
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cec  08016f7c  08016f7c  00026f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019c68  08019c68  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  08019c68  08019c68  00029c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019c70  08019c70  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019c70  08019c70  00029c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019c74  08019c74  00029c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08019c78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001023c  200000e8  08019d60  000300e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010324  08019d60  00030324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004767e  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f43  00000000  00000000  00077796  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000032a8  00000000  00000000  0007f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002f28  00000000  00000000  00082988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036051  00000000  00000000  000858b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003071c  00000000  00000000  000bb901  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012ab6e  00000000  00000000  000ec01d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00216b8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dee0  00000000  00000000  00216c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016f64 	.word	0x08016f64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08016f64 	.word	0x08016f64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b972 	b.w	80009c4 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	4604      	mov	r4, r0
 8000700:	4688      	mov	r8, r1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d14b      	bne.n	800079e <__udivmoddi4+0xa6>
 8000706:	428a      	cmp	r2, r1
 8000708:	4615      	mov	r5, r2
 800070a:	d967      	bls.n	80007dc <__udivmoddi4+0xe4>
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	b14a      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000712:	f1c2 0720 	rsb	r7, r2, #32
 8000716:	fa01 f302 	lsl.w	r3, r1, r2
 800071a:	fa20 f707 	lsr.w	r7, r0, r7
 800071e:	4095      	lsls	r5, r2
 8000720:	ea47 0803 	orr.w	r8, r7, r3
 8000724:	4094      	lsls	r4, r2
 8000726:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000730:	fa1f fc85 	uxth.w	ip, r5
 8000734:	fb0e 8817 	mls	r8, lr, r7, r8
 8000738:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800073c:	fb07 f10c 	mul.w	r1, r7, ip
 8000740:	4299      	cmp	r1, r3
 8000742:	d909      	bls.n	8000758 <__udivmoddi4+0x60>
 8000744:	18eb      	adds	r3, r5, r3
 8000746:	f107 30ff 	add.w	r0, r7, #4294967295
 800074a:	f080 811b 	bcs.w	8000984 <__udivmoddi4+0x28c>
 800074e:	4299      	cmp	r1, r3
 8000750:	f240 8118 	bls.w	8000984 <__udivmoddi4+0x28c>
 8000754:	3f02      	subs	r7, #2
 8000756:	442b      	add	r3, r5
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	b2a4      	uxth	r4, r4
 800075c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000760:	fb0e 3310 	mls	r3, lr, r0, r3
 8000764:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000768:	fb00 fc0c 	mul.w	ip, r0, ip
 800076c:	45a4      	cmp	ip, r4
 800076e:	d909      	bls.n	8000784 <__udivmoddi4+0x8c>
 8000770:	192c      	adds	r4, r5, r4
 8000772:	f100 33ff 	add.w	r3, r0, #4294967295
 8000776:	f080 8107 	bcs.w	8000988 <__udivmoddi4+0x290>
 800077a:	45a4      	cmp	ip, r4
 800077c:	f240 8104 	bls.w	8000988 <__udivmoddi4+0x290>
 8000780:	3802      	subs	r0, #2
 8000782:	442c      	add	r4, r5
 8000784:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000788:	eba4 040c 	sub.w	r4, r4, ip
 800078c:	2700      	movs	r7, #0
 800078e:	b11e      	cbz	r6, 8000798 <__udivmoddi4+0xa0>
 8000790:	40d4      	lsrs	r4, r2
 8000792:	2300      	movs	r3, #0
 8000794:	e9c6 4300 	strd	r4, r3, [r6]
 8000798:	4639      	mov	r1, r7
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0xbe>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80eb 	beq.w	800097e <__udivmoddi4+0x286>
 80007a8:	2700      	movs	r7, #0
 80007aa:	e9c6 0100 	strd	r0, r1, [r6]
 80007ae:	4638      	mov	r0, r7
 80007b0:	4639      	mov	r1, r7
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	fab3 f783 	clz	r7, r3
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d147      	bne.n	800084e <__udivmoddi4+0x156>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0xd0>
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f200 80fa 	bhi.w	80009bc <__udivmoddi4+0x2c4>
 80007c8:	1a84      	subs	r4, r0, r2
 80007ca:	eb61 0303 	sbc.w	r3, r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	4698      	mov	r8, r3
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d0e0      	beq.n	8000798 <__udivmoddi4+0xa0>
 80007d6:	e9c6 4800 	strd	r4, r8, [r6]
 80007da:	e7dd      	b.n	8000798 <__udivmoddi4+0xa0>
 80007dc:	b902      	cbnz	r2, 80007e0 <__udivmoddi4+0xe8>
 80007de:	deff      	udf	#255	; 0xff
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f040 808f 	bne.w	8000908 <__udivmoddi4+0x210>
 80007ea:	1b49      	subs	r1, r1, r5
 80007ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007f0:	fa1f f885 	uxth.w	r8, r5
 80007f4:	2701      	movs	r7, #1
 80007f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000804:	fb08 f10c 	mul.w	r1, r8, ip
 8000808:	4299      	cmp	r1, r3
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x124>
 800080c:	18eb      	adds	r3, r5, r3
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4299      	cmp	r1, r3
 8000816:	f200 80cd 	bhi.w	80009b4 <__udivmoddi4+0x2bc>
 800081a:	4684      	mov	ip, r0
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1410 	mls	r4, lr, r0, r1
 8000828:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x14c>
 8000834:	192c      	adds	r4, r5, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x14a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80b6 	bhi.w	80009ae <__udivmoddi4+0x2b6>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e79f      	b.n	800078e <__udivmoddi4+0x96>
 800084e:	f1c7 0c20 	rsb	ip, r7, #32
 8000852:	40bb      	lsls	r3, r7
 8000854:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000858:	ea4e 0e03 	orr.w	lr, lr, r3
 800085c:	fa01 f407 	lsl.w	r4, r1, r7
 8000860:	fa20 f50c 	lsr.w	r5, r0, ip
 8000864:	fa21 f30c 	lsr.w	r3, r1, ip
 8000868:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800086c:	4325      	orrs	r5, r4
 800086e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000872:	0c2c      	lsrs	r4, r5, #16
 8000874:	fb08 3319 	mls	r3, r8, r9, r3
 8000878:	fa1f fa8e 	uxth.w	sl, lr
 800087c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000880:	fb09 f40a 	mul.w	r4, r9, sl
 8000884:	429c      	cmp	r4, r3
 8000886:	fa02 f207 	lsl.w	r2, r2, r7
 800088a:	fa00 f107 	lsl.w	r1, r0, r7
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1e 0303 	adds.w	r3, lr, r3
 8000894:	f109 30ff 	add.w	r0, r9, #4294967295
 8000898:	f080 8087 	bcs.w	80009aa <__udivmoddi4+0x2b2>
 800089c:	429c      	cmp	r4, r3
 800089e:	f240 8084 	bls.w	80009aa <__udivmoddi4+0x2b2>
 80008a2:	f1a9 0902 	sub.w	r9, r9, #2
 80008a6:	4473      	add	r3, lr
 80008a8:	1b1b      	subs	r3, r3, r4
 80008aa:	b2ad      	uxth	r5, r5
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3310 	mls	r3, r8, r0, r3
 80008b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008bc:	45a2      	cmp	sl, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1e 0404 	adds.w	r4, lr, r4
 80008c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008c8:	d26b      	bcs.n	80009a2 <__udivmoddi4+0x2aa>
 80008ca:	45a2      	cmp	sl, r4
 80008cc:	d969      	bls.n	80009a2 <__udivmoddi4+0x2aa>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4474      	add	r4, lr
 80008d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008d6:	fba0 8902 	umull	r8, r9, r0, r2
 80008da:	eba4 040a 	sub.w	r4, r4, sl
 80008de:	454c      	cmp	r4, r9
 80008e0:	46c2      	mov	sl, r8
 80008e2:	464b      	mov	r3, r9
 80008e4:	d354      	bcc.n	8000990 <__udivmoddi4+0x298>
 80008e6:	d051      	beq.n	800098c <__udivmoddi4+0x294>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d069      	beq.n	80009c0 <__udivmoddi4+0x2c8>
 80008ec:	ebb1 050a 	subs.w	r5, r1, sl
 80008f0:	eb64 0403 	sbc.w	r4, r4, r3
 80008f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008f8:	40fd      	lsrs	r5, r7
 80008fa:	40fc      	lsrs	r4, r7
 80008fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000900:	e9c6 5400 	strd	r5, r4, [r6]
 8000904:	2700      	movs	r7, #0
 8000906:	e747      	b.n	8000798 <__udivmoddi4+0xa0>
 8000908:	f1c2 0320 	rsb	r3, r2, #32
 800090c:	fa20 f703 	lsr.w	r7, r0, r3
 8000910:	4095      	lsls	r5, r2
 8000912:	fa01 f002 	lsl.w	r0, r1, r2
 8000916:	fa21 f303 	lsr.w	r3, r1, r3
 800091a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800091e:	4338      	orrs	r0, r7
 8000920:	0c01      	lsrs	r1, r0, #16
 8000922:	fbb3 f7fe 	udiv	r7, r3, lr
 8000926:	fa1f f885 	uxth.w	r8, r5
 800092a:	fb0e 3317 	mls	r3, lr, r7, r3
 800092e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000932:	fb07 f308 	mul.w	r3, r7, r8
 8000936:	428b      	cmp	r3, r1
 8000938:	fa04 f402 	lsl.w	r4, r4, r2
 800093c:	d907      	bls.n	800094e <__udivmoddi4+0x256>
 800093e:	1869      	adds	r1, r5, r1
 8000940:	f107 3cff 	add.w	ip, r7, #4294967295
 8000944:	d22f      	bcs.n	80009a6 <__udivmoddi4+0x2ae>
 8000946:	428b      	cmp	r3, r1
 8000948:	d92d      	bls.n	80009a6 <__udivmoddi4+0x2ae>
 800094a:	3f02      	subs	r7, #2
 800094c:	4429      	add	r1, r5
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	b281      	uxth	r1, r0
 8000952:	fbb3 f0fe 	udiv	r0, r3, lr
 8000956:	fb0e 3310 	mls	r3, lr, r0, r3
 800095a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800095e:	fb00 f308 	mul.w	r3, r0, r8
 8000962:	428b      	cmp	r3, r1
 8000964:	d907      	bls.n	8000976 <__udivmoddi4+0x27e>
 8000966:	1869      	adds	r1, r5, r1
 8000968:	f100 3cff 	add.w	ip, r0, #4294967295
 800096c:	d217      	bcs.n	800099e <__udivmoddi4+0x2a6>
 800096e:	428b      	cmp	r3, r1
 8000970:	d915      	bls.n	800099e <__udivmoddi4+0x2a6>
 8000972:	3802      	subs	r0, #2
 8000974:	4429      	add	r1, r5
 8000976:	1ac9      	subs	r1, r1, r3
 8000978:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800097c:	e73b      	b.n	80007f6 <__udivmoddi4+0xfe>
 800097e:	4637      	mov	r7, r6
 8000980:	4630      	mov	r0, r6
 8000982:	e709      	b.n	8000798 <__udivmoddi4+0xa0>
 8000984:	4607      	mov	r7, r0
 8000986:	e6e7      	b.n	8000758 <__udivmoddi4+0x60>
 8000988:	4618      	mov	r0, r3
 800098a:	e6fb      	b.n	8000784 <__udivmoddi4+0x8c>
 800098c:	4541      	cmp	r1, r8
 800098e:	d2ab      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000990:	ebb8 0a02 	subs.w	sl, r8, r2
 8000994:	eb69 020e 	sbc.w	r2, r9, lr
 8000998:	3801      	subs	r0, #1
 800099a:	4613      	mov	r3, r2
 800099c:	e7a4      	b.n	80008e8 <__udivmoddi4+0x1f0>
 800099e:	4660      	mov	r0, ip
 80009a0:	e7e9      	b.n	8000976 <__udivmoddi4+0x27e>
 80009a2:	4618      	mov	r0, r3
 80009a4:	e795      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a6:	4667      	mov	r7, ip
 80009a8:	e7d1      	b.n	800094e <__udivmoddi4+0x256>
 80009aa:	4681      	mov	r9, r0
 80009ac:	e77c      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009ae:	3802      	subs	r0, #2
 80009b0:	442c      	add	r4, r5
 80009b2:	e747      	b.n	8000844 <__udivmoddi4+0x14c>
 80009b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b8:	442b      	add	r3, r5
 80009ba:	e72f      	b.n	800081c <__udivmoddi4+0x124>
 80009bc:	4638      	mov	r0, r7
 80009be:	e708      	b.n	80007d2 <__udivmoddi4+0xda>
 80009c0:	4637      	mov	r7, r6
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0xa0>

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <BSP_AUDIO_IN_HalfTransfer_CallBack>:
#define AUDIO_IN_SAMPLES_RATE 16000
#define AUDIO_IN_SAMPLES (AUDIO_IN_SAMPLES_RATE/10)
int16_t audio_in_buffer[AUDIO_IN_SAMPLES*2]; // L+R interleaved

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[0] , 0 , 0);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x30>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4909      	ldr	r1, [pc, #36]	; (8000a30 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>)
 8000a0c:	f011 fda6 	bl	801255c <osMessageQueuePut>
 8000a10:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f113 0f03 	cmn.w	r3, #3
 8000a18:	d004      	beq.n	8000a24 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		Error_Handler();
 8000a20:	f001 fb6c 	bl	80020fc <Error_Handler>
	}
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000a114 	.word	0x2000a114
 8000a30:	2000a338 	.word	0x2000a338

08000a34 <BSP_AUDIO_IN_TransferComplete_CallBack>:
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[AUDIO_IN_SAMPLES/2] , 0 , 0);
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <BSP_AUDIO_IN_TransferComplete_CallBack+0x30>)
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	4909      	ldr	r1, [pc, #36]	; (8000a68 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>)
 8000a44:	f011 fd8a 	bl	801255c <osMessageQueuePut>
 8000a48:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f113 0f03 	cmn.w	r3, #3
 8000a50:	d004      	beq.n	8000a5c <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		Error_Handler();
 8000a58:	f001 fb50 	bl	80020fc <Error_Handler>
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000a114 	.word	0x2000a114
 8000a68:	2000a978 	.word	0x2000a978

08000a6c <BSP_AUDIO_IN_Error_CallBack>:
void BSP_AUDIO_IN_Error_CallBack(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <AudioRecordingFunction>:
void AudioRecordingFunction(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint8_t ok;
	  ok = BSP_AUDIO_IN_Init(AUDIO_IN_SAMPLES_RATE, 16, 2);
 8000a84:	2202      	movs	r2, #2
 8000a86:	2110      	movs	r1, #16
 8000a88:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000a8c:	f004 f9fd 	bl	8004e8a <BSP_AUDIO_IN_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <AudioRecordingFunction+0x22>
		  Error_Handler();
 8000a9a:	f001 fb2f 	bl	80020fc <Error_Handler>
	  }
	  ok = BSP_AUDIO_IN_Record(audio_in_buffer, AUDIO_IN_SAMPLES);
 8000a9e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <AudioRecordingFunction+0x4c>)
 8000aa4:	f004 fa70 	bl	8004f88 <BSP_AUDIO_IN_Record>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <AudioRecordingFunction+0x3a>
	  	  Error_Handler();
 8000ab2:	f001 fb23 	bl	80020fc <Error_Handler>
	    }
	  osThreadSuspend(audioRecordingHandle);
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <AudioRecordingFunction+0x50>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f011 fbcc 	bl	8012258 <osThreadSuspend>

}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000a338 	.word	0x2000a338
 8000acc:	2000bcb8 	.word	0x2000bcb8

08000ad0 <AudioProcessingFunction>:
void AudioProcessingFunction(void *argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	for (;;){
		static int16_t buffer[AUDIO_IN_SAMPLES*2/2];
		osStatus_t status = osMessageQueueGet(audioQueue, &buffer[0], NULL, 1000);
 8000ad8:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <AudioProcessingFunction+0xd8>)
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4932      	ldr	r1, [pc, #200]	; (8000bac <AudioProcessingFunction+0xdc>)
 8000ae4:	f011 fdae 	bl	8012644 <osMessageQueueGet>
 8000ae8:	61f8      	str	r0, [r7, #28]
		if(status != osOK){
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <AudioProcessingFunction+0x24>
			Error_Handler();
 8000af0:	f001 fb04 	bl	80020fc <Error_Handler>
		}
		float sum = 0;
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i=0 ; i < AUDIO_IN_SAMPLES*2/2 ; ++i){
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	e017      	b.n	8000b30 <AudioProcessingFunction+0x60>
			sum += buffer[i]*buffer[i];
 8000b00:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <AudioProcessingFunction+0xdc>)
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4a28      	ldr	r2, [pc, #160]	; (8000bac <AudioProcessingFunction+0xdc>)
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000b12:	fb03 f301 	mul.w	r3, r3, r1
 8000b16:	ee07 3a90 	vmov	s15, r3
 8000b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (int i=0 ; i < AUDIO_IN_SAMPLES*2/2 ; ++i){
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000b36:	dbe3      	blt.n	8000b00 <AudioProcessingFunction+0x30>
		}
		float moyenne = sum / AUDIO_IN_SAMPLES*2/2;
 8000b38:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000b3c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8000bb0 <AudioProcessingFunction+0xe0>
 8000b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b44:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000b48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b50:	edc7 7a06 	vstr	s15, [r7, #24]

		float maxSignal = (1<<15)-1;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <AudioProcessingFunction+0xe4>)
 8000b56:	617b      	str	r3, [r7, #20]
		float maxMoyenne = maxSignal*maxSignal;
 8000b58:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b64:	edc7 7a04 	vstr	s15, [r7, #16]

		float dBFS = 10 * log10f(moyenne/maxMoyenne);
 8000b68:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000b74:	eeb0 0a66 	vmov.f32	s0, s13
 8000b78:	f016 f830 	bl	8016bdc <log10f>
 8000b7c:	eeb0 7a40 	vmov.f32	s14, s0
 8000b80:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8000b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b88:	edc7 7a03 	vstr	s15, [r7, #12]
		printf("dBFS= %4d\n", (int)dBFS);
 8000b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b94:	ee17 1a90 	vmov	r1, s15
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <AudioProcessingFunction+0xe8>)
 8000b9a:	f015 f9e3 	bl	8015f64 <iprintf>
		BSP_LED_Toggle(LED1);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f003 fe4c 	bl	800483c <BSP_LED_Toggle>
	for (;;){
 8000ba4:	e798      	b.n	8000ad8 <AudioProcessingFunction+0x8>
 8000ba6:	bf00      	nop
 8000ba8:	2000a114 	.word	0x2000a114
 8000bac:	20000104 	.word	0x20000104
 8000bb0:	44c80000 	.word	0x44c80000
 8000bb4:	46fffe00 	.word	0x46fffe00
 8000bb8:	08016fb4 	.word	0x08016fb4

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 8000bc0:	4b4e      	ldr	r3, [pc, #312]	; (8000cfc <main+0x140>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4a4d      	ldr	r2, [pc, #308]	; (8000cfc <main+0x140>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f005 fa9a 	bl	8006104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f8b8 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f001 f892 	bl	8001cfc <MX_GPIO_Init>
  MX_ADC3_Init();
 8000bd8:	f000 f972 	bl	8000ec0 <MX_ADC3_Init>
  MX_CRC_Init();
 8000bdc:	f000 f9c2 	bl	8000f64 <MX_CRC_Init>
  MX_DCMI_Init();
 8000be0:	f000 f9e2 	bl	8000fa8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000be4:	f000 fa14 	bl	8001010 <MX_DMA2D_Init>
  MX_ETH_Init();
 8000be8:	f000 fa44 	bl	8001074 <MX_ETH_Init>
  MX_FMC_Init();
 8000bec:	f001 f836 	bl	8001c5c <MX_FMC_Init>
  MX_I2C1_Init();
 8000bf0:	f000 fa48 	bl	8001084 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000bf4:	f000 fa86 	bl	8001104 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000bf8:	f000 fac4 	bl	8001184 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000bfc:	f000 fb78 	bl	80012f0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000c00:	f000 fba2 	bl	8001348 <MX_RTC_Init>
  MX_SAI2_Init();
 8000c04:	f000 fc46 	bl	8001494 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000c08:	f000 fcec 	bl	80015e4 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8000c0c:	f000 fd1a 	bl	8001644 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c10:	f000 fdc4 	bl	800179c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c14:	f000 fe38 	bl	8001888 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000c18:	f000 feae 	bl	8001978 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000c1c:	f000 ff24 	bl	8001a68 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000c20:	f000 ff76 	bl	8001b10 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000c24:	f000 ffba 	bl	8001b9c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000c28:	f000 ffe8 	bl	8001bfc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000c2c:	f004 fb56 	bl	80052dc <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000c30:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000c34:	2000      	movs	r0, #0
 8000c36:	f004 fbe9 	bl	800540c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000c3a:	4831      	ldr	r0, [pc, #196]	; (8000d00 <main+0x144>)
 8000c3c:	f004 fca8 	bl	8005590 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000c40:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000c44:	f004 fc42 	bl	80054cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000c48:	482d      	ldr	r0, [pc, #180]	; (8000d00 <main+0x144>)
 8000c4a:	f004 fc57 	bl	80054fc <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 8000c4e:	f004 fbc9 	bl	80053e4 <BSP_LCD_GetYSize>
 8000c52:	4603      	mov	r3, r0
 8000c54:	085b      	lsrs	r3, r3, #1
 8000c56:	b299      	uxth	r1, r3
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <main+0x148>)
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f004 fd03 	bl	8005668 <BSP_LCD_DisplayStringAt>


  LCD_LOG_Init();
 8000c62:	f014 fe55 	bl	8015910 <LCD_LOG_Init>
  LCD_LOG_SetHeader("Header");
 8000c66:	4828      	ldr	r0, [pc, #160]	; (8000d08 <main+0x14c>)
 8000c68:	f014 fe9c 	bl	80159a4 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter("Footer");
 8000c6c:	4827      	ldr	r0, [pc, #156]	; (8000d0c <main+0x150>)
 8000c6e:	f014 fed5 	bl	8015a1c <LCD_LOG_SetFooter>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c72:	f011 f9e1 	bl	8012038 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  mutexLCD = osMutexNew (&mutexLCD_attributes);
 8000c76:	4826      	ldr	r0, [pc, #152]	; (8000d10 <main+0x154>)
 8000c78:	f011 fb50 	bl	801231c <osMutexNew>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <main+0x158>)
 8000c80:	601a      	str	r2, [r3, #0]
  if (mutexLCD == NULL){
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <main+0x158>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <main+0xd2>
	  Error_Handler();
 8000c8a:	f001 fa37 	bl	80020fc <Error_Handler>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  audioQueue = osMessageQueueNew(2, sizeof(audio_in_buffer)/2 , &audioQueue_attributes);
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <main+0x15c>)
 8000c90:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000c94:	2002      	movs	r0, #2
 8000c96:	f011 fbdb 	bl	8012450 <osMessageQueueNew>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <main+0x160>)
 8000c9e:	601a      	str	r2, [r3, #0]
  if (audioQueue == NULL){
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <main+0x160>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <main+0xf0>
	  Error_Handler();
 8000ca8:	f001 fa28 	bl	80020fc <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <main+0x164>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	481c      	ldr	r0, [pc, #112]	; (8000d24 <main+0x168>)
 8000cb2:	f011 fa2b 	bl	801210c <osThreadNew>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <main+0x16c>)
 8000cba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  audioRecordingHandle = osThreadNew(&AudioRecordingFunction, NULL, &audioRecording_attributes);
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <main+0x170>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	481b      	ldr	r0, [pc, #108]	; (8000d30 <main+0x174>)
 8000cc2:	f011 fa23 	bl	801210c <osThreadNew>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <main+0x178>)
 8000cca:	601a      	str	r2, [r3, #0]
  if (audioRecordingHandle == NULL){
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <main+0x178>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <main+0x11c>
	  Error_Handler();
 8000cd4:	f001 fa12 	bl	80020fc <Error_Handler>
  }
  audioProcessingHandle = osThreadNew(&AudioProcessingFunction, NULL, &audioProcessing_attributes);
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <main+0x17c>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4817      	ldr	r0, [pc, #92]	; (8000d3c <main+0x180>)
 8000cde:	f011 fa15 	bl	801210c <osThreadNew>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <main+0x184>)
 8000ce6:	601a      	str	r2, [r3, #0]
  if (audioProcessingHandle == NULL){
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <main+0x184>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <main+0x138>
	  Error_Handler();
 8000cf0:	f001 fa04 	bl	80020fc <Error_Handler>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cf4:	f011 f9d4 	bl	80120a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <main+0x13c>
 8000cfa:	bf00      	nop
 8000cfc:	e0042000 	.word	0xe0042000
 8000d00:	ff0000ff 	.word	0xff0000ff
 8000d04:	08016fc0 	.word	0x08016fc0
 8000d08:	08016fd0 	.word	0x08016fd0
 8000d0c:	08016fd8 	.word	0x08016fd8
 8000d10:	08017074 	.word	0x08017074
 8000d14:	2000a08c 	.word	0x2000a08c
 8000d18:	08017084 	.word	0x08017084
 8000d1c:	2000a114 	.word	0x2000a114
 8000d20:	08017008 	.word	0x08017008
 8000d24:	080020c5 	.word	0x080020c5
 8000d28:	20009ebc 	.word	0x20009ebc
 8000d2c:	0801702c 	.word	0x0801702c
 8000d30:	08000a7d 	.word	0x08000a7d
 8000d34:	2000bcb8 	.word	0x2000bcb8
 8000d38:	08017050 	.word	0x08017050
 8000d3c:	08000ad1 	.word	0x08000ad1
 8000d40:	2000a090 	.word	0x2000a090

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0b4      	sub	sp, #208	; 0xd0
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d4e:	2230      	movs	r2, #48	; 0x30
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f015 f855 	bl	8015e02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	2284      	movs	r2, #132	; 0x84
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f015 f846 	bl	8015e02 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d76:	f009 ff53 	bl	800ac20 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b4e      	ldr	r3, [pc, #312]	; (8000eb4 <SystemClock_Config+0x170>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a4d      	ldr	r2, [pc, #308]	; (8000eb4 <SystemClock_Config+0x170>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b4b      	ldr	r3, [pc, #300]	; (8000eb4 <SystemClock_Config+0x170>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d92:	4b49      	ldr	r3, [pc, #292]	; (8000eb8 <SystemClock_Config+0x174>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a48      	ldr	r2, [pc, #288]	; (8000eb8 <SystemClock_Config+0x174>)
 8000d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <SystemClock_Config+0x174>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000daa:	2309      	movs	r3, #9
 8000dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dcc:	2319      	movs	r3, #25
 8000dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000dd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000de0:	2309      	movs	r3, #9
 8000de2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f00a f83a 	bl	800ae64 <HAL_RCC_OscConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000df6:	f001 f981 	bl	80020fc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dfa:	f009 ff21 	bl	800ac40 <HAL_PWREx_EnableOverDrive>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e04:	f001 f97a 	bl	80020fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e2e:	2106      	movs	r1, #6
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00a fabb 	bl	800b3ac <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000e3c:	f001 f95e 	bl	80020fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <SystemClock_Config+0x178>)
 8000e42:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000e54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000e62:	2303      	movs	r3, #3
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e82:	2300      	movs	r3, #0
 8000e84:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000e8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00a fc8a 	bl	800b7b4 <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000ea6:	f001 f929 	bl	80020fc <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	37d0      	adds	r7, #208	; 0xd0
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40007000 	.word	0x40007000
 8000ebc:	01314868 	.word	0x01314868

08000ec0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <MX_ADC3_Init+0x9c>)
 8000ed6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000eda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ede:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <MX_ADC3_Init+0xa0>)
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000f22:	f005 f93f 	bl	80061a4 <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000f2c:	f001 f8e6 	bl	80020fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_ADC3_Init+0x98>)
 8000f42:	f005 f973 	bl	800622c <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000f4c:	f001 f8d6 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000a1c0 	.word	0x2000a1c0
 8000f5c:	40012200 	.word	0x40012200
 8000f60:	0f000001 	.word	0x0f000001

08000f64 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <MX_CRC_Init+0x3c>)
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <MX_CRC_Init+0x40>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_CRC_Init+0x3c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_CRC_Init+0x3c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_CRC_Init+0x3c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_CRC_Init+0x3c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_CRC_Init+0x3c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_CRC_Init+0x3c>)
 8000f8e:	f005 fc73 	bl	8006878 <HAL_CRC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f98:	f001 f8b0 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000a068 	.word	0x2000a068
 8000fa4:	40023000 	.word	0x40023000

08000fa8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <MX_DCMI_Init+0x64>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_DCMI_Init+0x60>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_DCMI_Init+0x60>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_DCMI_Init+0x60>)
 8000ff6:	f005 fd29 	bl	8006a4c <HAL_DCMI_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001000:	f001 f87c 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000a208 	.word	0x2000a208
 800100c:	50050000 	.word	0x50050000

08001010 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_DMA2D_Init+0x5c>)
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <MX_DMA2D_Init+0x60>)
 8001018:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_DMA2D_Init+0x5c>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_DMA2D_Init+0x5c>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_DMA2D_Init+0x5c>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_DMA2D_Init+0x5c>)
 800102e:	2200      	movs	r2, #0
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_DMA2D_Init+0x5c>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_DMA2D_Init+0x5c>)
 800103a:	2200      	movs	r2, #0
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_DMA2D_Init+0x5c>)
 8001040:	2200      	movs	r2, #0
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <MX_DMA2D_Init+0x5c>)
 8001046:	f006 f94f 	bl	80072e8 <HAL_DMA2D_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001050:	f001 f854 	bl	80020fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001054:	2101      	movs	r1, #1
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_DMA2D_Init+0x5c>)
 8001058:	f006 fbb4 	bl	80077c4 <HAL_DMA2D_ConfigLayer>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001062:	f001 f84b 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000bcbc 	.word	0x2000bcbc
 8001070:	4002b000 	.word	0x4002b000

08001074 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
 return;
 8001078:	bf00      	nop
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_I2C1_Init+0x74>)
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_I2C1_Init+0x78>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_I2C1_Init+0x74>)
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <MX_I2C1_Init+0x7c>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_I2C1_Init+0x74>)
 800109c:	2201      	movs	r2, #1
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010c0:	f008 fc86 	bl	80099d0 <HAL_I2C_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ca:	f001 f817 	bl	80020fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010d2:	f009 f995 	bl	800a400 <HAL_I2CEx_ConfigAnalogFilter>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010dc:	f001 f80e 	bl	80020fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010e4:	f009 f9d7 	bl	800a496 <HAL_I2CEx_ConfigDigitalFilter>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f001 f805 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000a01c 	.word	0x2000a01c
 80010fc:	40005400 	.word	0x40005400
 8001100:	00c0eaff 	.word	0x00c0eaff

08001104 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_I2C3_Init+0x74>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <MX_I2C3_Init+0x78>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_I2C3_Init+0x74>)
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <MX_I2C3_Init+0x7c>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_I2C3_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_I2C3_Init+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_I2C3_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_I2C3_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_I2C3_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_I2C3_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_I2C3_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <MX_I2C3_Init+0x74>)
 8001140:	f008 fc46 	bl	80099d0 <HAL_I2C_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800114a:	f000 ffd7 	bl	80020fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <MX_I2C3_Init+0x74>)
 8001152:	f009 f955 	bl	800a400 <HAL_I2CEx_ConfigAnalogFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800115c:	f000 ffce 	bl	80020fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_I2C3_Init+0x74>)
 8001164:	f009 f997 	bl	800a496 <HAL_I2CEx_ConfigDigitalFilter>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 ffc5 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20009ec0 	.word	0x20009ec0
 800117c:	40005c00 	.word	0x40005c00
 8001180:	00c0eaff 	.word	0x00c0eaff

08001184 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09a      	sub	sp, #104	; 0x68
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800118a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800118e:	2234      	movs	r2, #52	; 0x34
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f014 fe35 	bl	8015e02 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2234      	movs	r2, #52	; 0x34
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f014 fe2f 	bl	8015e02 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011a4:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011a6:	4a51      	ldr	r2, [pc, #324]	; (80012ec <MX_LTDC_Init+0x168>)
 80011a8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011aa:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011b0:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011bc:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011c4:	2228      	movs	r2, #40	; 0x28
 80011c6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80011c8:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011ca:	2209      	movs	r2, #9
 80011cc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80011ce:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011d0:	2235      	movs	r2, #53	; 0x35
 80011d2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011d6:	220b      	movs	r2, #11
 80011d8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80011da:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011dc:	f240 2215 	movw	r2, #533	; 0x215
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011e4:	f240 121b 	movw	r2, #283	; 0x11b
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011ec:	f240 2235 	movw	r2, #565	; 0x235
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80011f2:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011f4:	f240 121d 	movw	r2, #285	; 0x11d
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <MX_LTDC_Init+0x164>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001202:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <MX_LTDC_Init+0x164>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800120a:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <MX_LTDC_Init+0x164>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001212:	4835      	ldr	r0, [pc, #212]	; (80012e8 <MX_LTDC_Init+0x164>)
 8001214:	f009 f98c 	bl	800a530 <HAL_LTDC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800121e:	f000 ff6d 	bl	80020fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8001226:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8001230:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001234:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001236:	2302      	movs	r3, #2
 8001238:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 800123a:	23ff      	movs	r3, #255	; 0xff
 800123c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001242:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001246:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001248:	2307      	movs	r3, #7
 800124a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 800124c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001250:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8001252:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001256:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001258:	f44f 7388 	mov.w	r3, #272	; 0x110
 800125c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001270:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001274:	2200      	movs	r2, #0
 8001276:	4619      	mov	r1, r3
 8001278:	481b      	ldr	r0, [pc, #108]	; (80012e8 <MX_LTDC_Init+0x164>)
 800127a:	f009 faeb 	bl	800a854 <HAL_LTDC_ConfigLayer>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001284:	f000 ff3a 	bl	80020fc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80012a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a4:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012a6:	2305      	movs	r3, #5
 80012a8:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2201      	movs	r2, #1
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_LTDC_Init+0x164>)
 80012d0:	f009 fac0 	bl	800a854 <HAL_LTDC_ConfigLayer>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 80012da:	f000 ff0f 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3768      	adds	r7, #104	; 0x68
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000a118 	.word	0x2000a118
 80012ec:	40016800 	.word	0x40016800

080012f0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_QUADSPI_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_QUADSPI_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_QUADSPI_Init+0x50>)
 80012fc:	22ff      	movs	r2, #255	; 0xff
 80012fe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_QUADSPI_Init+0x50>)
 8001302:	2201      	movs	r2, #1
 8001304:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_QUADSPI_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_QUADSPI_Init+0x50>)
 800130e:	2201      	movs	r2, #1
 8001310:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_QUADSPI_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_QUADSPI_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_QUADSPI_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_QUADSPI_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_QUADSPI_Init+0x50>)
 800132c:	f009 fcd8 	bl	800ace0 <HAL_QSPI_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001336:	f000 fee1 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000bdf8 	.word	0x2000bdf8
 8001344:	a0001000 	.word	0xa0001000

08001348 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b092      	sub	sp, #72	; 0x48
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800134e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	222c      	movs	r2, #44	; 0x2c
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f014 fd49 	bl	8015e02 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001370:	4b46      	ldr	r3, [pc, #280]	; (800148c <MX_RTC_Init+0x144>)
 8001372:	4a47      	ldr	r2, [pc, #284]	; (8001490 <MX_RTC_Init+0x148>)
 8001374:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001376:	4b45      	ldr	r3, [pc, #276]	; (800148c <MX_RTC_Init+0x144>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800137c:	4b43      	ldr	r3, [pc, #268]	; (800148c <MX_RTC_Init+0x144>)
 800137e:	227f      	movs	r2, #127	; 0x7f
 8001380:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001382:	4b42      	ldr	r3, [pc, #264]	; (800148c <MX_RTC_Init+0x144>)
 8001384:	22ff      	movs	r2, #255	; 0xff
 8001386:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001388:	4b40      	ldr	r3, [pc, #256]	; (800148c <MX_RTC_Init+0x144>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <MX_RTC_Init+0x144>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001394:	4b3d      	ldr	r3, [pc, #244]	; (800148c <MX_RTC_Init+0x144>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800139a:	483c      	ldr	r0, [pc, #240]	; (800148c <MX_RTC_Init+0x144>)
 800139c:	f00b f838 	bl	800c410 <HAL_RTC_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80013a6:	f000 fea9 	bl	80020fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	482f      	ldr	r0, [pc, #188]	; (800148c <MX_RTC_Init+0x144>)
 80013ce:	f00b f89b 	bl	800c508 <HAL_RTC_SetTime>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80013d8:	f000 fe90 	bl	80020fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013dc:	2301      	movs	r3, #1
 80013de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f8:	2201      	movs	r2, #1
 80013fa:	4619      	mov	r1, r3
 80013fc:	4823      	ldr	r0, [pc, #140]	; (800148c <MX_RTC_Init+0x144>)
 80013fe:	f00b f941 	bl	800c684 <HAL_RTC_SetDate>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001408:	f000 fe78 	bl	80020fc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800140c:	2300      	movs	r3, #0
 800140e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001410:	2300      	movs	r3, #0
 8001412:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001414:	2300      	movs	r3, #0
 8001416:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001430:	2301      	movs	r3, #1
 8001432:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	2201      	movs	r2, #1
 8001440:	4619      	mov	r1, r3
 8001442:	4812      	ldr	r0, [pc, #72]	; (800148c <MX_RTC_Init+0x144>)
 8001444:	f00b f9c6 	bl	800c7d4 <HAL_RTC_SetAlarm>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800144e:	f000 fe55 	bl	80020fc <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	2201      	movs	r2, #1
 800145c:	4619      	mov	r1, r3
 800145e:	480b      	ldr	r0, [pc, #44]	; (800148c <MX_RTC_Init+0x144>)
 8001460:	f00b f9b8 	bl	800c7d4 <HAL_RTC_SetAlarm>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800146a:	f000 fe47 	bl	80020fc <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800146e:	2202      	movs	r2, #2
 8001470:	2100      	movs	r1, #0
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_RTC_Init+0x144>)
 8001474:	f00b fb38 	bl	800cae8 <HAL_RTCEx_SetTimeStamp>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800147e:	f000 fe3d 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3748      	adds	r7, #72	; 0x48
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000a2d8 	.word	0x2000a2d8
 8001490:	40002800 	.word	0x40002800

08001494 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001498:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <MX_SAI2_Init+0x13c>)
 800149a:	4a4e      	ldr	r2, [pc, #312]	; (80015d4 <MX_SAI2_Init+0x140>)
 800149c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80014a4:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014b0:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014b6:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80014bc:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014c2:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80014c8:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014ce:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80014d4:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014d6:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <MX_SAI2_Init+0x144>)
 80014d8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80014e0:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014ec:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014f4:	2208      	movs	r2, #8
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80014f8:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <MX_SAI2_Init+0x13c>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <MX_SAI2_Init+0x13c>)
 8001500:	2200      	movs	r2, #0
 8001502:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <MX_SAI2_Init+0x13c>)
 8001506:	2200      	movs	r2, #0
 8001508:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <MX_SAI2_Init+0x13c>)
 800150c:	2200      	movs	r2, #0
 800150e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <MX_SAI2_Init+0x13c>)
 8001512:	2200      	movs	r2, #0
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_SAI2_Init+0x13c>)
 8001518:	2200      	movs	r2, #0
 800151a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_SAI2_Init+0x13c>)
 800151e:	2201      	movs	r2, #1
 8001520:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_SAI2_Init+0x13c>)
 8001524:	2200      	movs	r2, #0
 8001526:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001528:	4829      	ldr	r0, [pc, #164]	; (80015d0 <MX_SAI2_Init+0x13c>)
 800152a:	f00b fb33 	bl	800cb94 <HAL_SAI_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001534:	f000 fde2 	bl	80020fc <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <MX_SAI2_Init+0x148>)
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <MX_SAI2_Init+0x14c>)
 800153c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <MX_SAI2_Init+0x148>)
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <MX_SAI2_Init+0x148>)
 8001546:	2203      	movs	r2, #3
 8001548:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <MX_SAI2_Init+0x148>)
 800154c:	2240      	movs	r2, #64	; 0x40
 800154e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <MX_SAI2_Init+0x148>)
 8001552:	2200      	movs	r2, #0
 8001554:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <MX_SAI2_Init+0x148>)
 8001558:	2200      	movs	r2, #0
 800155a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_SAI2_Init+0x148>)
 800155e:	2201      	movs	r2, #1
 8001560:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_SAI2_Init+0x148>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_SAI2_Init+0x148>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_SAI2_Init+0x148>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_SAI2_Init+0x148>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_SAI2_Init+0x148>)
 800157c:	2200      	movs	r2, #0
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_SAI2_Init+0x148>)
 8001582:	2200      	movs	r2, #0
 8001584:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_SAI2_Init+0x148>)
 8001588:	2208      	movs	r2, #8
 800158a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_SAI2_Init+0x148>)
 800158e:	2201      	movs	r2, #1
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_SAI2_Init+0x148>)
 8001594:	2200      	movs	r2, #0
 8001596:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_SAI2_Init+0x148>)
 800159a:	2200      	movs	r2, #0
 800159c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_SAI2_Init+0x148>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <MX_SAI2_Init+0x148>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_SAI2_Init+0x148>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_SAI2_Init+0x148>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_SAI2_Init+0x148>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <MX_SAI2_Init+0x148>)
 80015be:	f00b fae9 	bl	800cb94 <HAL_SAI_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80015c8:	f000 fd98 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20009f98 	.word	0x20009f98
 80015d4:	40015c04 	.word	0x40015c04
 80015d8:	0002ee00 	.word	0x0002ee00
 80015dc:	20009e38 	.word	0x20009e38
 80015e0:	40015c24 	.word	0x40015c24

080015e4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 80015ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80015ee:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_SPDIFRX_Init+0x5c>)
 800162e:	f00b fe51 	bl	800d2d4 <HAL_SPDIFRX_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001638:	f000 fd60 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20009f4c 	.word	0x20009f4c

08001644 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b09a      	sub	sp, #104	; 0x68
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	615a      	str	r2, [r3, #20]
 8001676:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	222c      	movs	r2, #44	; 0x2c
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f014 fbbf 	bl	8015e02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <MX_TIM1_Init+0x150>)
 8001686:	4a44      	ldr	r2, [pc, #272]	; (8001798 <MX_TIM1_Init+0x154>)
 8001688:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800168a:	4b42      	ldr	r3, [pc, #264]	; (8001794 <MX_TIM1_Init+0x150>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <MX_TIM1_Init+0x150>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <MX_TIM1_Init+0x150>)
 8001698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800169c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <MX_TIM1_Init+0x150>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016a4:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <MX_TIM1_Init+0x150>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016aa:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <MX_TIM1_Init+0x150>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016b0:	4838      	ldr	r0, [pc, #224]	; (8001794 <MX_TIM1_Init+0x150>)
 80016b2:	f00b fe6b 	bl	800d38c <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016bc:	f000 fd1e 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ca:	4619      	mov	r1, r3
 80016cc:	4831      	ldr	r0, [pc, #196]	; (8001794 <MX_TIM1_Init+0x150>)
 80016ce:	f00c f915 	bl	800d8fc <HAL_TIM_ConfigClockSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016d8:	f000 fd10 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016dc:	482d      	ldr	r0, [pc, #180]	; (8001794 <MX_TIM1_Init+0x150>)
 80016de:	f00b feab 	bl	800d438 <HAL_TIM_PWM_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016e8:	f000 fd08 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016fc:	4619      	mov	r1, r3
 80016fe:	4825      	ldr	r0, [pc, #148]	; (8001794 <MX_TIM1_Init+0x150>)
 8001700:	f00c fd76 	bl	800e1f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800170a:	f000 fcf7 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170e:	2360      	movs	r3, #96	; 0x60
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001716:	2300      	movs	r3, #0
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800171a:	2300      	movs	r3, #0
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	4818      	ldr	r0, [pc, #96]	; (8001794 <MX_TIM1_Init+0x150>)
 8001734:	f00b ffca 	bl	800d6cc <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800173e:	f000 fcdd 	bl	80020fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4619      	mov	r1, r3
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <MX_TIM1_Init+0x150>)
 8001778:	f00c fdc8 	bl	800e30c <HAL_TIMEx_ConfigBreakDeadTime>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001782:	f000 fcbb 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <MX_TIM1_Init+0x150>)
 8001788:	f001 f938 	bl	80029fc <HAL_TIM_MspPostInit>

}
 800178c:	bf00      	nop
 800178e:	3768      	adds	r7, #104	; 0x68
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000a2f8 	.word	0x2000a2f8
 8001798:	40010000 	.word	0x40010000

0800179c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08e      	sub	sp, #56	; 0x38
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <MX_TIM2_Init+0xe8>)
 80017d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <MX_TIM2_Init+0xe8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <MX_TIM2_Init+0xe8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <MX_TIM2_Init+0xe8>)
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295
 80017e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <MX_TIM2_Init+0xe8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <MX_TIM2_Init+0xe8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f6:	4823      	ldr	r0, [pc, #140]	; (8001884 <MX_TIM2_Init+0xe8>)
 80017f8:	f00b fdc8 	bl	800d38c <HAL_TIM_Base_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001802:	f000 fc7b 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800180c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001810:	4619      	mov	r1, r3
 8001812:	481c      	ldr	r0, [pc, #112]	; (8001884 <MX_TIM2_Init+0xe8>)
 8001814:	f00c f872 	bl	800d8fc <HAL_TIM_ConfigClockSource>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800181e:	f000 fc6d 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001822:	4818      	ldr	r0, [pc, #96]	; (8001884 <MX_TIM2_Init+0xe8>)
 8001824:	f00b fe08 	bl	800d438 <HAL_TIM_PWM_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800182e:	f000 fc65 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4810      	ldr	r0, [pc, #64]	; (8001884 <MX_TIM2_Init+0xe8>)
 8001842:	f00c fcd5 	bl	800e1f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800184c:	f000 fc56 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001850:	2360      	movs	r3, #96	; 0x60
 8001852:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001860:	463b      	mov	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	4619      	mov	r1, r3
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <MX_TIM2_Init+0xe8>)
 8001868:	f00b ff30 	bl	800d6cc <HAL_TIM_PWM_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001872:	f000 fc43 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001876:	4803      	ldr	r0, [pc, #12]	; (8001884 <MX_TIM2_Init+0xe8>)
 8001878:	f001 f8c0 	bl	80029fc <HAL_TIM_MspPostInit>

}
 800187c:	bf00      	nop
 800187e:	3738      	adds	r7, #56	; 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000bcfc 	.word	0x2000bcfc

08001888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a8:	463b      	mov	r3, r7
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <MX_TIM3_Init+0xe8>)
 80018bc:	4a2d      	ldr	r2, [pc, #180]	; (8001974 <MX_TIM3_Init+0xec>)
 80018be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <MX_TIM3_Init+0xe8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <MX_TIM3_Init+0xe8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018cc:	4b28      	ldr	r3, [pc, #160]	; (8001970 <MX_TIM3_Init+0xe8>)
 80018ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d4:	4b26      	ldr	r3, [pc, #152]	; (8001970 <MX_TIM3_Init+0xe8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <MX_TIM3_Init+0xe8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018e0:	4823      	ldr	r0, [pc, #140]	; (8001970 <MX_TIM3_Init+0xe8>)
 80018e2:	f00b fd53 	bl	800d38c <HAL_TIM_Base_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018ec:	f000 fc06 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fa:	4619      	mov	r1, r3
 80018fc:	481c      	ldr	r0, [pc, #112]	; (8001970 <MX_TIM3_Init+0xe8>)
 80018fe:	f00b fffd 	bl	800d8fc <HAL_TIM_ConfigClockSource>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001908:	f000 fbf8 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800190c:	4818      	ldr	r0, [pc, #96]	; (8001970 <MX_TIM3_Init+0xe8>)
 800190e:	f00b fd93 	bl	800d438 <HAL_TIM_PWM_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001918:	f000 fbf0 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4811      	ldr	r0, [pc, #68]	; (8001970 <MX_TIM3_Init+0xe8>)
 800192c:	f00c fc60 	bl	800e1f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001936:	f000 fbe1 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193a:	2360      	movs	r3, #96	; 0x60
 800193c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	2200      	movs	r2, #0
 800194e:	4619      	mov	r1, r3
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <MX_TIM3_Init+0xe8>)
 8001952:	f00b febb 	bl	800d6cc <HAL_TIM_PWM_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800195c:	f000 fbce 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <MX_TIM3_Init+0xe8>)
 8001962:	f001 f84b 	bl	80029fc <HAL_TIM_MspPostInit>

}
 8001966:	bf00      	nop
 8001968:	3738      	adds	r7, #56	; 0x38
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000a0d4 	.word	0x2000a0d4
 8001974:	40000400 	.word	0x40000400

08001978 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	; 0x38
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001998:	463b      	mov	r3, r7
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <MX_TIM5_Init+0xe8>)
 80019ac:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <MX_TIM5_Init+0xec>)
 80019ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <MX_TIM5_Init+0xe8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <MX_TIM5_Init+0xe8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80019bc:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <MX_TIM5_Init+0xe8>)
 80019be:	f04f 32ff 	mov.w	r2, #4294967295
 80019c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c4:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <MX_TIM5_Init+0xe8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ca:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <MX_TIM5_Init+0xe8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019d0:	4823      	ldr	r0, [pc, #140]	; (8001a60 <MX_TIM5_Init+0xe8>)
 80019d2:	f00b fcdb 	bl	800d38c <HAL_TIM_Base_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80019dc:	f000 fb8e 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ea:	4619      	mov	r1, r3
 80019ec:	481c      	ldr	r0, [pc, #112]	; (8001a60 <MX_TIM5_Init+0xe8>)
 80019ee:	f00b ff85 	bl	800d8fc <HAL_TIM_ConfigClockSource>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80019f8:	f000 fb80 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80019fc:	4818      	ldr	r0, [pc, #96]	; (8001a60 <MX_TIM5_Init+0xe8>)
 80019fe:	f00b fd1b 	bl	800d438 <HAL_TIM_PWM_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001a08:	f000 fb78 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4811      	ldr	r0, [pc, #68]	; (8001a60 <MX_TIM5_Init+0xe8>)
 8001a1c:	f00c fbe8 	bl	800e1f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001a26:	f000 fb69 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2a:	2360      	movs	r3, #96	; 0x60
 8001a2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	220c      	movs	r2, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <MX_TIM5_Init+0xe8>)
 8001a42:	f00b fe43 	bl	800d6cc <HAL_TIM_PWM_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001a4c:	f000 fb56 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <MX_TIM5_Init+0xe8>)
 8001a52:	f000 ffd3 	bl	80029fc <HAL_TIM_MspPostInit>

}
 8001a56:	bf00      	nop
 8001a58:	3738      	adds	r7, #56	; 0x38
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000a094 	.word	0x2000a094
 8001a64:	40000c00 	.word	0x40000c00

08001a68 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001a88:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <MX_TIM8_Init+0xa4>)
 8001a8a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ab2:	4815      	ldr	r0, [pc, #84]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001ab4:	f00b fc6a 	bl	800d38c <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001abe:	f000 fb1d 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	480e      	ldr	r0, [pc, #56]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001ad0:	f00b ff14 	bl	800d8fc <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001ada:	f000 fb0f 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_TIM8_Init+0xa0>)
 8001af0:	f00c fb7e 	bl	800e1f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001afa:	f000 faff 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20009f0c 	.word	0x20009f0c
 8001b0c:	40010400 	.word	0x40010400

08001b10 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	615a      	str	r2, [r3, #20]
 8001b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <MX_TIM12_Init+0x84>)
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <MX_TIM12_Init+0x88>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_TIM12_Init+0x84>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_TIM12_Init+0x84>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <MX_TIM12_Init+0x84>)
 8001b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b40:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_TIM12_Init+0x84>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <MX_TIM12_Init+0x84>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b4e:	4811      	ldr	r0, [pc, #68]	; (8001b94 <MX_TIM12_Init+0x84>)
 8001b50:	f00b fc72 	bl	800d438 <HAL_TIM_PWM_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001b5a:	f000 facf 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b5e:	2360      	movs	r3, #96	; 0x60
 8001b60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	4807      	ldr	r0, [pc, #28]	; (8001b94 <MX_TIM12_Init+0x84>)
 8001b76:	f00b fda9 	bl	800d6cc <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001b80:	f000 fabc 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <MX_TIM12_Init+0x84>)
 8001b86:	f000 ff39 	bl	80029fc <HAL_TIM_MspPostInit>

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000bd3c 	.word	0x2000bd3c
 8001b98:	40001800 	.word	0x40001800

08001b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <MX_USART1_UART_Init+0x5c>)
 8001ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_USART1_UART_Init+0x58>)
 8001be0:	f00c fc30 	bl	800e444 <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bea:	f000 fa87 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000a258 	.word	0x2000a258
 8001bf8:	40011000 	.word	0x40011000

08001bfc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <MX_USART6_UART_Init+0x5c>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_USART6_UART_Init+0x58>)
 8001c40:	f00c fc00 	bl	800e444 <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001c4a:	f000 fa57 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000bc38 	.word	0x2000bc38
 8001c58:	40011400 	.word	0x40011400

08001c5c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	615a      	str	r2, [r3, #20]
 8001c72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001c76:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <MX_FMC_Init+0x9c>)
 8001c78:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001c88:	2204      	movs	r2, #4
 8001c8a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001c8e:	2210      	movs	r2, #16
 8001c90:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001c9a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001c9e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001cb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_FMC_Init+0x98>)
 8001cde:	f00b fa7a 	bl	800d1d6 <HAL_SDRAM_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001ce8:	f000 fa08 	bl	80020fc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001cec:	bf00      	nop
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000bd7c 	.word	0x2000bd7c
 8001cf8:	a0000140 	.word	0xa0000140

08001cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b090      	sub	sp, #64	; 0x40
 8001d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d12:	4baf      	ldr	r3, [pc, #700]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4aae      	ldr	r2, [pc, #696]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d18:	f043 0310 	orr.w	r3, r3, #16
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4bac      	ldr	r3, [pc, #688]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d2a:	4ba9      	ldr	r3, [pc, #676]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4aa8      	ldr	r2, [pc, #672]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4ba6      	ldr	r3, [pc, #664]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	4ba3      	ldr	r3, [pc, #652]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4aa2      	ldr	r2, [pc, #648]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4ba0      	ldr	r3, [pc, #640]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	4b9d      	ldr	r3, [pc, #628]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a9c      	ldr	r2, [pc, #624]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b9a      	ldr	r3, [pc, #616]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	4b97      	ldr	r3, [pc, #604]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a96      	ldr	r2, [pc, #600]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b94      	ldr	r3, [pc, #592]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a90      	ldr	r2, [pc, #576]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b8e      	ldr	r3, [pc, #568]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001da2:	4b8b      	ldr	r3, [pc, #556]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a8a      	ldr	r2, [pc, #552]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dba:	4b85      	ldr	r3, [pc, #532]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a84      	ldr	r2, [pc, #528]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001dd2:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a7e      	ldr	r2, [pc, #504]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b7c      	ldr	r3, [pc, #496]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dea:	4b79      	ldr	r3, [pc, #484]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a78      	ldr	r2, [pc, #480]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001df0:	f043 0320 	orr.w	r3, r3, #32
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	4b73      	ldr	r3, [pc, #460]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a72      	ldr	r2, [pc, #456]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	486d      	ldr	r0, [pc, #436]	; (8001fd4 <MX_GPIO_Init+0x2d8>)
 8001e20:	f006 f8b2 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	210e      	movs	r1, #14
 8001e28:	486b      	ldr	r0, [pc, #428]	; (8001fd8 <MX_GPIO_Init+0x2dc>)
 8001e2a:	f006 f8ad 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2108      	movs	r1, #8
 8001e32:	486a      	ldr	r0, [pc, #424]	; (8001fdc <MX_GPIO_Init+0x2e0>)
 8001e34:	f006 f8a8 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3e:	4866      	ldr	r0, [pc, #408]	; (8001fd8 <MX_GPIO_Init+0x2dc>)
 8001e40:	f006 f8a2 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4a:	4865      	ldr	r0, [pc, #404]	; (8001fe0 <MX_GPIO_Init+0x2e4>)
 8001e4c:	f006 f89c 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	21c8      	movs	r1, #200	; 0xc8
 8001e54:	4863      	ldr	r0, [pc, #396]	; (8001fe4 <MX_GPIO_Init+0x2e8>)
 8001e56:	f006 f897 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	485e      	ldr	r0, [pc, #376]	; (8001fe8 <MX_GPIO_Init+0x2ec>)
 8001e6e:	f005 fdd7 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001e72:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e84:	230a      	movs	r3, #10
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4857      	ldr	r0, [pc, #348]	; (8001fec <MX_GPIO_Init+0x2f0>)
 8001e90:	f005 fdc6 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001e94:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ea6:	230c      	movs	r3, #12
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	484f      	ldr	r0, [pc, #316]	; (8001ff0 <MX_GPIO_Init+0x2f4>)
 8001eb2:	f005 fdb5 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	484a      	ldr	r0, [pc, #296]	; (8001ff4 <MX_GPIO_Init+0x2f8>)
 8001ecc:	f005 fda8 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001ed0:	2340      	movs	r3, #64	; 0x40
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <MX_GPIO_Init+0x2fc>)
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	483c      	ldr	r0, [pc, #240]	; (8001fd4 <MX_GPIO_Init+0x2d8>)
 8001ee4:	f005 fd9c 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efc:	4619      	mov	r1, r3
 8001efe:	4835      	ldr	r0, [pc, #212]	; (8001fd4 <MX_GPIO_Init+0x2d8>)
 8001f00:	f005 fd8e 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8001f04:	f241 030e 	movw	r3, #4110	; 0x100e
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	482e      	ldr	r0, [pc, #184]	; (8001fd8 <MX_GPIO_Init+0x2dc>)
 8001f1e:	f005 fd7f 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f34:	4619      	mov	r1, r3
 8001f36:	482e      	ldr	r0, [pc, #184]	; (8001ff0 <MX_GPIO_Init+0x2f4>)
 8001f38:	f005 fd72 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f50:	4619      	mov	r1, r3
 8001f52:	4822      	ldr	r0, [pc, #136]	; (8001fdc <MX_GPIO_Init+0x2e0>)
 8001f54:	f005 fd64 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001f58:	2310      	movs	r3, #16
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f68:	4619      	mov	r1, r3
 8001f6a:	481a      	ldr	r0, [pc, #104]	; (8001fd4 <MX_GPIO_Init+0x2d8>)
 8001f6c:	f005 fd58 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001f70:	f248 0304 	movw	r3, #32772	; 0x8004
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f82:	4619      	mov	r1, r3
 8001f84:	4816      	ldr	r0, [pc, #88]	; (8001fe0 <MX_GPIO_Init+0x2e4>)
 8001f86:	f005 fd4b 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480f      	ldr	r0, [pc, #60]	; (8001fe0 <MX_GPIO_Init+0x2e4>)
 8001fa4:	f005 fd3c 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_GPIO_Init+0x2fc>)
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <MX_GPIO_Init+0x2dc>)
 8001fbe:	f005 fd2f 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e016      	b.n	8001ffc <MX_GPIO_Init+0x300>
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40022800 	.word	0x40022800
 8001fe0:	40021c00 	.word	0x40021c00
 8001fe4:	40021800 	.word	0x40021800
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	40020800 	.word	0x40020800
 8001ff4:	40022400 	.word	0x40022400
 8001ff8:	10120000 	.word	0x10120000
 8001ffc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002002:	230a      	movs	r3, #10
 8002004:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200a:	4619      	mov	r1, r3
 800200c:	4828      	ldr	r0, [pc, #160]	; (80020b0 <MX_GPIO_Init+0x3b4>)
 800200e:	f005 fd07 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002012:	23c8      	movs	r3, #200	; 0xc8
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002026:	4619      	mov	r1, r3
 8002028:	4822      	ldr	r0, [pc, #136]	; (80020b4 <MX_GPIO_Init+0x3b8>)
 800202a:	f005 fcf9 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800202e:	2305      	movs	r3, #5
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800203e:	230a      	movs	r3, #10
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002046:	4619      	mov	r1, r3
 8002048:	481b      	ldr	r0, [pc, #108]	; (80020b8 <MX_GPIO_Init+0x3bc>)
 800204a:	f005 fce9 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800204e:	2304      	movs	r3, #4
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002052:	2300      	movs	r3, #0
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800205e:	4619      	mov	r1, r3
 8002060:	4814      	ldr	r0, [pc, #80]	; (80020b4 <MX_GPIO_Init+0x3b8>)
 8002062:	f005 fcdd 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002066:	2328      	movs	r3, #40	; 0x28
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002076:	230a      	movs	r3, #10
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800207e:	4619      	mov	r1, r3
 8002080:	480e      	ldr	r0, [pc, #56]	; (80020bc <MX_GPIO_Init+0x3c0>)
 8002082:	f005 fccd 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002086:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002098:	2305      	movs	r3, #5
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <MX_GPIO_Init+0x3c4>)
 80020a4:	f005 fcbc 	bl	8007a20 <HAL_GPIO_Init>

}
 80020a8:	bf00      	nop
 80020aa:	3740      	adds	r7, #64	; 0x40
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021c00 	.word	0x40021c00
 80020b4:	40021800 	.word	0x40021800
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020400 	.word	0x40020400

080020c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80020cc:	f013 f92a 	bl	8015324 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020d0:	2001      	movs	r0, #1
 80020d2:	f010 f8f5 	bl	80122c0 <osDelay>
 80020d6:	e7fb      	b.n	80020d0 <StartDefaultTask+0xc>

080020d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020ea:	f004 f819 	bl	8006120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40001000 	.word	0x40001000

080020fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1);
 8002100:	e7fe      	b.n	8002100 <Error_Handler+0x4>
	...

08002104 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_MspInit+0x4c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_MspInit+0x4c>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_MspInit+0x4c>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_MspInit+0x4c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_MspInit+0x4c>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	210f      	movs	r1, #15
 800213e:	f06f 0001 	mvn.w	r0, #1
 8002142:	f004 fb6f 	bl	8006824 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800

08002154 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_ADC_MspInit+0xa4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d13c      	bne.n	80021f0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_ADC_MspInit+0xa8>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_ADC_MspInit+0xa8>)
 800217c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_ADC_MspInit+0xa8>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_ADC_MspInit+0xa8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <HAL_ADC_MspInit+0xa8>)
 8002194:	f043 0320 	orr.w	r3, r3, #32
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_ADC_MspInit+0xa8>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_ADC_MspInit+0xa8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a14      	ldr	r2, [pc, #80]	; (80021fc <HAL_ADC_MspInit+0xa8>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_ADC_MspInit+0xa8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80021be:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80021c2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c4:	2303      	movs	r3, #3
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	480b      	ldr	r0, [pc, #44]	; (8002200 <HAL_ADC_MspInit+0xac>)
 80021d4:	f005 fc24 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80021d8:	2301      	movs	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021dc:	2303      	movs	r3, #3
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <HAL_ADC_MspInit+0xb0>)
 80021ec:	f005 fc18 	bl	8007a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40012200 	.word	0x40012200
 80021fc:	40023800 	.word	0x40023800
 8002200:	40021400 	.word	0x40021400
 8002204:	40020000 	.word	0x40020000

08002208 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <HAL_CRC_MspInit+0x38>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10b      	bne.n	8002232 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_CRC_MspInit+0x3c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <HAL_CRC_MspInit+0x3c>)
 8002220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_CRC_MspInit+0x3c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40023000 	.word	0x40023000
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	; 0x38
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a50      	ldr	r2, [pc, #320]	; (80023a8 <HAL_DCMI_MspInit+0x160>)
 8002266:	4293      	cmp	r3, r2
 8002268:	f040 809a 	bne.w	80023a0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800226c:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 800226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002270:	4a4e      	ldr	r2, [pc, #312]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6353      	str	r3, [r2, #52]	; 0x34
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 800227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002284:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	4a48      	ldr	r2, [pc, #288]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 800228a:	f043 0310 	orr.w	r3, r3, #16
 800228e:	6313      	str	r3, [r2, #48]	; 0x30
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800229c:	4b43      	ldr	r3, [pc, #268]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	4a42      	ldr	r2, [pc, #264]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022a2:	f043 0308 	orr.w	r3, r3, #8
 80022a6:	6313      	str	r3, [r2, #48]	; 0x30
 80022a8:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022b4:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	4a3c      	ldr	r2, [pc, #240]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022be:	6313      	str	r3, [r2, #48]	; 0x30
 80022c0:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80022cc:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	4a36      	ldr	r2, [pc, #216]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d6:	6313      	str	r3, [r2, #48]	; 0x30
 80022d8:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4a30      	ldr	r2, [pc, #192]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6313      	str	r3, [r2, #48]	; 0x30
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_DCMI_MspInit+0x164>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80022fc:	2360      	movs	r3, #96	; 0x60
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800230c:	230d      	movs	r3, #13
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002314:	4619      	mov	r1, r3
 8002316:	4826      	ldr	r0, [pc, #152]	; (80023b0 <HAL_DCMI_MspInit+0x168>)
 8002318:	f005 fb82 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800231c:	2308      	movs	r3, #8
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800232c:	230d      	movs	r3, #13
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002334:	4619      	mov	r1, r3
 8002336:	481f      	ldr	r0, [pc, #124]	; (80023b4 <HAL_DCMI_MspInit+0x16c>)
 8002338:	f005 fb72 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800233c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800234e:	230d      	movs	r3, #13
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	4619      	mov	r1, r3
 8002358:	4817      	ldr	r0, [pc, #92]	; (80023b8 <HAL_DCMI_MspInit+0x170>)
 800235a:	f005 fb61 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800235e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002370:	230d      	movs	r3, #13
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002378:	4619      	mov	r1, r3
 800237a:	4810      	ldr	r0, [pc, #64]	; (80023bc <HAL_DCMI_MspInit+0x174>)
 800237c:	f005 fb50 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002380:	2350      	movs	r3, #80	; 0x50
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002390:	230d      	movs	r3, #13
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002398:	4619      	mov	r1, r3
 800239a:	4809      	ldr	r0, [pc, #36]	; (80023c0 <HAL_DCMI_MspInit+0x178>)
 800239c:	f005 fb40 	bl	8007a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3738      	adds	r7, #56	; 0x38
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	50050000 	.word	0x50050000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40020c00 	.word	0x40020c00
 80023b8:	40021800 	.word	0x40021800
 80023bc:	40021c00 	.word	0x40021c00
 80023c0:	40020000 	.word	0x40020000

080023c4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <HAL_DMA2D_MspInit+0x44>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d113      	bne.n	80023fe <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_DMA2D_MspInit+0x48>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a0c      	ldr	r2, [pc, #48]	; (800240c <HAL_DMA2D_MspInit+0x48>)
 80023dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_DMA2D_MspInit+0x48>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	205a      	movs	r0, #90	; 0x5a
 80023f4:	f004 fa16 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80023f8:	205a      	movs	r0, #90	; 0x5a
 80023fa:	f004 fa2f 	bl	800685c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	4002b000 	.word	0x4002b000
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	; 0x30
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <HAL_I2C_MspInit+0xdc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d129      	bne.n	8002486 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800244a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800244e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002450:	2312      	movs	r3, #18
 8002452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002454:	2301      	movs	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800245c:	2304      	movs	r3, #4
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	4823      	ldr	r0, [pc, #140]	; (80024f4 <HAL_I2C_MspInit+0xe4>)
 8002468:	f005 fada 	bl	8007a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800246c:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 8002472:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002476:	6413      	str	r3, [r2, #64]	; 0x40
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002484:	e02d      	b.n	80024e2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_I2C_MspInit+0xe8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d128      	bne.n	80024e2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 8002496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249a:	6313      	str	r3, [r2, #48]	; 0x30
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80024a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ae:	2312      	movs	r3, #18
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b2:	2301      	movs	r3, #1
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024ba:	2304      	movs	r3, #4
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	4619      	mov	r1, r3
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <HAL_I2C_MspInit+0xec>)
 80024c6:	f005 faab 	bl	8007a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 80024d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_I2C_MspInit+0xe0>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
}
 80024e2:	bf00      	nop
 80024e4:	3730      	adds	r7, #48	; 0x30
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40005400 	.word	0x40005400
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020400 	.word	0x40020400
 80024f8:	40005c00 	.word	0x40005c00
 80024fc:	40021c00 	.word	0x40021c00

08002500 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <HAL_I2C_MspDeInit+0x64>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d110      	bne.n	8002534 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_I2C_MspDeInit+0x68>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_I2C_MspDeInit+0x68>)
 8002518:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800251e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002522:	4812      	ldr	r0, [pc, #72]	; (800256c <HAL_I2C_MspDeInit+0x6c>)
 8002524:	f005 fc26 	bl	8007d74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800252c:	480f      	ldr	r0, [pc, #60]	; (800256c <HAL_I2C_MspDeInit+0x6c>)
 800252e:	f005 fc21 	bl	8007d74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002532:	e013      	b.n	800255c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_I2C_MspDeInit+0x70>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10e      	bne.n	800255c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_I2C_MspDeInit+0x68>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_I2C_MspDeInit+0x68>)
 8002544:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	4809      	ldr	r0, [pc, #36]	; (8002574 <HAL_I2C_MspDeInit+0x74>)
 800254e:	f005 fc11 	bl	8007d74 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002556:	4807      	ldr	r0, [pc, #28]	; (8002574 <HAL_I2C_MspDeInit+0x74>)
 8002558:	f005 fc0c 	bl	8007d74 <HAL_GPIO_DeInit>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40005400 	.word	0x40005400
 8002568:	40023800 	.word	0x40023800
 800256c:	40020400 	.word	0x40020400
 8002570:	40005c00 	.word	0x40005c00
 8002574:	40021c00 	.word	0x40021c00

08002578 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08e      	sub	sp, #56	; 0x38
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a55      	ldr	r2, [pc, #340]	; (80026ec <HAL_LTDC_MspInit+0x174>)
 8002596:	4293      	cmp	r3, r2
 8002598:	f040 80a3 	bne.w	80026e2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800259c:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	4a53      	ldr	r2, [pc, #332]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025a6:	6453      	str	r3, [r2, #68]	; 0x44
 80025a8:	4b51      	ldr	r3, [pc, #324]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b0:	623b      	str	r3, [r7, #32]
 80025b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b4:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	6313      	str	r3, [r2, #48]	; 0x30
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	4a47      	ldr	r2, [pc, #284]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d6:	6313      	str	r3, [r2, #48]	; 0x30
 80025d8:	4b45      	ldr	r3, [pc, #276]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80025e4:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	4a41      	ldr	r2, [pc, #260]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ee:	6313      	str	r3, [r2, #48]	; 0x30
 80025f0:	4b3f      	ldr	r3, [pc, #252]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025fc:	4b3c      	ldr	r3, [pc, #240]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	4a3b      	ldr	r2, [pc, #236]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 8002602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002606:	6313      	str	r3, [r2, #48]	; 0x30
 8002608:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002614:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	4a35      	ldr	r2, [pc, #212]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6313      	str	r3, [r2, #48]	; 0x30
 8002620:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <HAL_LTDC_MspInit+0x178>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800262c:	2310      	movs	r3, #16
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800263c:	230e      	movs	r3, #14
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002644:	4619      	mov	r1, r3
 8002646:	482b      	ldr	r0, [pc, #172]	; (80026f4 <HAL_LTDC_MspInit+0x17c>)
 8002648:	f005 f9ea 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800264c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800265e:	230e      	movs	r3, #14
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002666:	4619      	mov	r1, r3
 8002668:	4823      	ldr	r0, [pc, #140]	; (80026f8 <HAL_LTDC_MspInit+0x180>)
 800266a:	f005 f9d9 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800266e:	23f7      	movs	r3, #247	; 0xf7
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800267e:	230e      	movs	r3, #14
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002686:	4619      	mov	r1, r3
 8002688:	481c      	ldr	r0, [pc, #112]	; (80026fc <HAL_LTDC_MspInit+0x184>)
 800268a:	f005 f9c9 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800268e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026a0:	2309      	movs	r3, #9
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80026a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a8:	4619      	mov	r1, r3
 80026aa:	4815      	ldr	r0, [pc, #84]	; (8002700 <HAL_LTDC_MspInit+0x188>)
 80026ac:	f005 f9b8 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80026b0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026c2:	230e      	movs	r3, #14
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ca:	4619      	mov	r1, r3
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <HAL_LTDC_MspInit+0x18c>)
 80026ce:	f005 f9a7 	bl	8007a20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	2058      	movs	r0, #88	; 0x58
 80026d8:	f004 f8a4 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80026dc:	2058      	movs	r0, #88	; 0x58
 80026de:	f004 f8bd 	bl	800685c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80026e2:	bf00      	nop
 80026e4:	3738      	adds	r7, #56	; 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40016800 	.word	0x40016800
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40022400 	.word	0x40022400
 80026fc:	40022800 	.word	0x40022800
 8002700:	40021800 	.word	0x40021800
 8002704:	40022000 	.word	0x40022000

08002708 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	; 0x30
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a3b      	ldr	r2, [pc, #236]	; (8002814 <HAL_QSPI_MspInit+0x10c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d170      	bne.n	800280c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800272a:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	4a3a      	ldr	r2, [pc, #232]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6393      	str	r3, [r2, #56]	; 0x38
 8002736:	4b38      	ldr	r3, [pc, #224]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002742:	4b35      	ldr	r3, [pc, #212]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002748:	f043 0310 	orr.w	r3, r3, #16
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a2e      	ldr	r2, [pc, #184]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_QSPI_MspInit+0x110>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800278a:	2304      	movs	r3, #4
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800279a:	2309      	movs	r3, #9
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	481d      	ldr	r0, [pc, #116]	; (800281c <HAL_QSPI_MspInit+0x114>)
 80027a6:	f005 f93b 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80027aa:	2340      	movs	r3, #64	; 0x40
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b6:	2303      	movs	r3, #3
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80027ba:	230a      	movs	r3, #10
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	4816      	ldr	r0, [pc, #88]	; (8002820 <HAL_QSPI_MspInit+0x118>)
 80027c6:	f005 f92b 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027ca:	2304      	movs	r3, #4
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80027da:	2309      	movs	r3, #9
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4619      	mov	r1, r3
 80027e4:	480e      	ldr	r0, [pc, #56]	; (8002820 <HAL_QSPI_MspInit+0x118>)
 80027e6:	f005 f91b 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80027ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80027ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80027fc:	2309      	movs	r3, #9
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	4619      	mov	r1, r3
 8002806:	4807      	ldr	r0, [pc, #28]	; (8002824 <HAL_QSPI_MspInit+0x11c>)
 8002808:	f005 f90a 	bl	8007a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800280c:	bf00      	nop
 800280e:	3730      	adds	r7, #48	; 0x30
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	a0001000 	.word	0xa0001000
 8002818:	40023800 	.word	0x40023800
 800281c:	40021000 	.word	0x40021000
 8002820:	40020400 	.word	0x40020400
 8002824:	40020c00 	.word	0x40020c00

08002828 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <HAL_RTC_MspInit+0x2c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d105      	bne.n	8002846 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RTC_MspInit+0x30>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a06      	ldr	r2, [pc, #24]	; (8002858 <HAL_RTC_MspInit+0x30>)
 8002840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40002800 	.word	0x40002800
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800287c:	d127      	bne.n	80028ce <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_SPDIFRX_MspInit+0x7c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <HAL_SPDIFRX_MspInit+0x7c>)
 800289c:	f043 0308 	orr.w	r3, r3, #8
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_SPDIFRX_MspInit+0x7c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80028be:	2308      	movs	r3, #8
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4804      	ldr	r0, [pc, #16]	; (80028dc <HAL_SPDIFRX_MspInit+0x80>)
 80028ca:	f005 f8a9 	bl	8007a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020c00 	.word	0x40020c00

080028e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2e      	ldr	r2, [pc, #184]	; (80029a8 <HAL_TIM_Base_MspInit+0xc8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10c      	bne.n	800290c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a2d      	ldr	r2, [pc, #180]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800290a:	e046      	b.n	800299a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d10c      	bne.n	8002930 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002916:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a24      	ldr	r2, [pc, #144]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]
}
 800292e:	e034      	b.n	800299a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <HAL_TIM_Base_MspInit+0xd0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10c      	bne.n	8002954 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]
}
 8002952:	e022      	b.n	800299a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <HAL_TIM_Base_MspInit+0xd4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10c      	bne.n	8002978 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002964:	f043 0308 	orr.w	r3, r3, #8
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
}
 8002976:	e010      	b.n	800299a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <HAL_TIM_Base_MspInit+0xd8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10b      	bne.n	800299a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_TIM_Base_MspInit+0xcc>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
}
 800299a:	bf00      	nop
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40000c00 	.word	0x40000c00
 80029b8:	40010400 	.word	0x40010400

080029bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <HAL_TIM_PWM_MspInit+0x38>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10b      	bne.n	80029e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80029d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40001800 	.word	0x40001800
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08c      	sub	sp, #48	; 0x30
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a56      	ldr	r2, [pc, #344]	; (8002b74 <HAL_TIM_MspPostInit+0x178>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d11d      	bne.n	8002a5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a55      	ldr	r2, [pc, #340]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	2300      	movs	r3, #0
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	4619      	mov	r1, r3
 8002a52:	484a      	ldr	r0, [pc, #296]	; (8002b7c <HAL_TIM_MspPostInit+0x180>)
 8002a54:	f004 ffe4 	bl	8007a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002a58:	e087      	b.n	8002b6a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a62:	d11d      	bne.n	8002aa0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a43      	ldr	r2, [pc, #268]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	4619      	mov	r1, r3
 8002a98:	4838      	ldr	r0, [pc, #224]	; (8002b7c <HAL_TIM_MspPostInit+0x180>)
 8002a9a:	f004 ffc1 	bl	8007a20 <HAL_GPIO_Init>
}
 8002a9e:	e064      	b.n	8002b6a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a36      	ldr	r2, [pc, #216]	; (8002b80 <HAL_TIM_MspPostInit+0x184>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d11c      	bne.n	8002ae4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a32      	ldr	r2, [pc, #200]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 031c 	add.w	r3, r7, #28
 8002ada:	4619      	mov	r1, r3
 8002adc:	4829      	ldr	r0, [pc, #164]	; (8002b84 <HAL_TIM_MspPostInit+0x188>)
 8002ade:	f004 ff9f 	bl	8007a20 <HAL_GPIO_Init>
}
 8002ae2:	e042      	b.n	8002b6a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <HAL_TIM_MspPostInit+0x18c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d11c      	bne.n	8002b28 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b16:	2302      	movs	r3, #2
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	4619      	mov	r1, r3
 8002b20:	481a      	ldr	r0, [pc, #104]	; (8002b8c <HAL_TIM_MspPostInit+0x190>)
 8002b22:	f004 ff7d 	bl	8007a20 <HAL_GPIO_Init>
}
 8002b26:	e020      	b.n	8002b6a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_TIM_MspPostInit+0x194>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d11b      	bne.n	8002b6a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a10      	ldr	r2, [pc, #64]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_TIM_MspPostInit+0x17c>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002b4a:	2340      	movs	r3, #64	; 0x40
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 031c 	add.w	r3, r7, #28
 8002b62:	4619      	mov	r1, r3
 8002b64:	480b      	ldr	r0, [pc, #44]	; (8002b94 <HAL_TIM_MspPostInit+0x198>)
 8002b66:	f004 ff5b 	bl	8007a20 <HAL_GPIO_Init>
}
 8002b6a:	bf00      	nop
 8002b6c:	3730      	adds	r7, #48	; 0x30
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40020400 	.word	0x40020400
 8002b88:	40000c00 	.word	0x40000c00
 8002b8c:	40022000 	.word	0x40022000
 8002b90:	40001800 	.word	0x40001800
 8002b94:	40021c00 	.word	0x40021c00

08002b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08c      	sub	sp, #48	; 0x30
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 031c 	add.w	r3, r7, #28
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3c      	ldr	r2, [pc, #240]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d145      	bne.n	8002c46 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bba:	4b3c      	ldr	r3, [pc, #240]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4a3b      	ldr	r2, [pc, #236]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002bc0:	f043 0310 	orr.w	r3, r3, #16
 8002bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc6:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a35      	ldr	r2, [pc, #212]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b33      	ldr	r3, [pc, #204]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	4b30      	ldr	r3, [pc, #192]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c12:	2307      	movs	r3, #7
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 031c 	add.w	r3, r7, #28
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4824      	ldr	r0, [pc, #144]	; (8002cb0 <HAL_UART_MspInit+0x118>)
 8002c1e:	f004 feff 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c34:	2307      	movs	r3, #7
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	481d      	ldr	r0, [pc, #116]	; (8002cb4 <HAL_UART_MspInit+0x11c>)
 8002c40:	f004 feee 	bl	8007a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c44:	e02c      	b.n	8002ca0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <HAL_UART_MspInit+0x120>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d127      	bne.n	8002ca0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	4a15      	ldr	r2, [pc, #84]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002c56:	f043 0320 	orr.w	r3, r3, #32
 8002c5a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c68:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6313      	str	r3, [r2, #48]	; 0x30
 8002c74:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002c80:	23c0      	movs	r3, #192	; 0xc0
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c90:	2308      	movs	r3, #8
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4808      	ldr	r0, [pc, #32]	; (8002cbc <HAL_UART_MspInit+0x124>)
 8002c9c:	f004 fec0 	bl	8007a20 <HAL_GPIO_Init>
}
 8002ca0:	bf00      	nop
 8002ca2:	3730      	adds	r7, #48	; 0x30
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40011000 	.word	0x40011000
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40011400 	.word	0x40011400
 8002cbc:	40020800 	.word	0x40020800

08002cc0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_FMC_MspInit+0x100>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d16d      	bne.n	8002db8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002cdc:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <HAL_FMC_MspInit+0x100>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_FMC_MspInit+0x104>)
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	4a37      	ldr	r2, [pc, #220]	; (8002dc4 <HAL_FMC_MspInit+0x104>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6393      	str	r3, [r2, #56]	; 0x38
 8002cee:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_FMC_MspInit+0x104>)
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002cfa:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002cfe:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d0c:	230c      	movs	r3, #12
 8002d0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	4619      	mov	r1, r3
 8002d14:	482c      	ldr	r0, [pc, #176]	; (8002dc8 <HAL_FMC_MspInit+0x108>)
 8002d16:	f004 fe83 	bl	8007a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002d1a:	f248 1333 	movw	r3, #33075	; 0x8133
 8002d1e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4825      	ldr	r0, [pc, #148]	; (8002dcc <HAL_FMC_MspInit+0x10c>)
 8002d36:	f004 fe73 	bl	8007a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002d3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d3e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d4c:	230c      	movs	r3, #12
 8002d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	481e      	ldr	r0, [pc, #120]	; (8002dd0 <HAL_FMC_MspInit+0x110>)
 8002d56:	f004 fe63 	bl	8007a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002d5a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002d5e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	4817      	ldr	r0, [pc, #92]	; (8002dd4 <HAL_FMC_MspInit+0x114>)
 8002d76:	f004 fe53 	bl	8007a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002d7a:	2328      	movs	r3, #40	; 0x28
 8002d7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <HAL_FMC_MspInit+0x118>)
 8002d94:	f004 fe44 	bl	8007a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002da8:	230c      	movs	r3, #12
 8002daa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	480a      	ldr	r0, [pc, #40]	; (8002ddc <HAL_FMC_MspInit+0x11c>)
 8002db2:	f004 fe35 	bl	8007a20 <HAL_GPIO_Init>
 8002db6:	e000      	b.n	8002dba <HAL_FMC_MspInit+0xfa>
    return;
 8002db8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000d84 	.word	0x20000d84
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40021800 	.word	0x40021800
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40021400 	.word	0x40021400
 8002dd8:	40021c00 	.word	0x40021c00
 8002ddc:	40020800 	.word	0x40020800

08002de0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002de8:	f7ff ff6a 	bl	8002cc0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <HAL_SAI_MspInit+0xbc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d124      	bne.n	8002e50 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002e06:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_SAI_MspInit+0xc0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <HAL_SAI_MspInit+0xc4>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4a29      	ldr	r2, [pc, #164]	; (8002eb8 <HAL_SAI_MspInit+0xc4>)
 8002e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_SAI_MspInit+0xc4>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_SAI_MspInit+0xc0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <HAL_SAI_MspInit+0xc0>)
 8002e2e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002e30:	23f0      	movs	r3, #240	; 0xf0
 8002e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002e40:	230a      	movs	r3, #10
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	481c      	ldr	r0, [pc, #112]	; (8002ebc <HAL_SAI_MspInit+0xc8>)
 8002e4c:	f004 fde8 	bl	8007a20 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1a      	ldr	r2, [pc, #104]	; (8002ec0 <HAL_SAI_MspInit+0xcc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d125      	bne.n	8002ea6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <HAL_SAI_MspInit+0xc0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_SAI_MspInit+0xc4>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <HAL_SAI_MspInit+0xc4>)
 8002e68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_SAI_MspInit+0xc4>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_SAI_MspInit+0xc0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <HAL_SAI_MspInit+0xc0>)
 8002e82:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002e96:	230a      	movs	r3, #10
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <HAL_SAI_MspInit+0xd0>)
 8002ea2:	f004 fdbd 	bl	8007a20 <HAL_GPIO_Init>

    }
}
 8002ea6:	bf00      	nop
 8002ea8:	3728      	adds	r7, #40	; 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40015c04 	.word	0x40015c04
 8002eb4:	20000d88 	.word	0x20000d88
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40015c24 	.word	0x40015c24
 8002ec4:	40021800 	.word	0x40021800

08002ec8 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_SAI_MspDeInit+0x74>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d112      	bne.n	8002f00 <HAL_SAI_MspDeInit+0x38>
    {
    SAI2_client --;
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_SAI_MspDeInit+0x78>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <HAL_SAI_MspDeInit+0x78>)
 8002ee2:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_SAI_MspDeInit+0x78>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_SAI_MspDeInit+0x7c>)
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_SAI_MspDeInit+0x7c>)
 8002ef2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ef6:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8002ef8:	21f0      	movs	r1, #240	; 0xf0
 8002efa:	4813      	ldr	r0, [pc, #76]	; (8002f48 <HAL_SAI_MspDeInit+0x80>)
 8002efc:	f004 ff3a 	bl	8007d74 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_SAI_MspDeInit+0x84>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d113      	bne.n	8002f32 <HAL_SAI_MspDeInit+0x6a>
    {
    SAI2_client --;
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_SAI_MspDeInit+0x78>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <HAL_SAI_MspDeInit+0x78>)
 8002f12:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_SAI_MspDeInit+0x78>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_SAI_MspDeInit+0x60>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_SAI_MspDeInit+0x7c>)
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <HAL_SAI_MspDeInit+0x7c>)
 8002f22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f26:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8002f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f2c:	4808      	ldr	r0, [pc, #32]	; (8002f50 <HAL_SAI_MspDeInit+0x88>)
 8002f2e:	f004 ff21 	bl	8007d74 <HAL_GPIO_DeInit>

    }
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40015c04 	.word	0x40015c04
 8002f40:	20000d88 	.word	0x20000d88
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40015c24 	.word	0x40015c24
 8002f50:	40021800 	.word	0x40021800

08002f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08c      	sub	sp, #48	; 0x30
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	2036      	movs	r0, #54	; 0x36
 8002f6a:	f003 fc5b 	bl	8006824 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f6e:	2036      	movs	r0, #54	; 0x36
 8002f70:	f003 fc74 	bl	800685c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <HAL_InitTick+0xa0>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4a1e      	ldr	r2, [pc, #120]	; (8002ff4 <HAL_InitTick+0xa0>)
 8002f7a:	f043 0310 	orr.w	r3, r3, #16
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f80:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <HAL_InitTick+0xa0>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f8c:	f107 0210 	add.w	r2, r7, #16
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f008 fbda 	bl	800b750 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002f9c:	f008 fbb0 	bl	800b700 <HAL_RCC_GetPCLK1Freq>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <HAL_InitTick+0xa4>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0c9b      	lsrs	r3, r3, #18
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_InitTick+0xa8>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <HAL_InitTick+0xac>)
 8002fb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_InitTick+0xa8>)
 8002fbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002fc2:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <HAL_InitTick+0xa8>)
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <HAL_InitTick+0xa8>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_InitTick+0xa8>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002fd4:	4809      	ldr	r0, [pc, #36]	; (8002ffc <HAL_InitTick+0xa8>)
 8002fd6:	f00a f9d9 	bl	800d38c <HAL_TIM_Base_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d104      	bne.n	8002fea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002fe0:	4806      	ldr	r0, [pc, #24]	; (8002ffc <HAL_InitTick+0xa8>)
 8002fe2:	f00a f9ff 	bl	800d3e4 <HAL_TIM_Base_Start_IT>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	e000      	b.n	8002fec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3730      	adds	r7, #48	; 0x30
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	431bde83 	.word	0x431bde83
 8002ffc:	2000be44 	.word	0x2000be44
 8003000:	40001000 	.word	0x40001000

08003004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003016:	e7fe      	b.n	8003016 <HardFault_Handler+0x4>

08003018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800301c:	e7fe      	b.n	800301c <MemManage_Handler+0x4>

0800301e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003022:	e7fe      	b.n	8003022 <BusFault_Handler+0x4>

08003024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003028:	e7fe      	b.n	8003028 <UsageFault_Handler+0x4>

0800302a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <TIM6_DAC_IRQHandler+0x10>)
 800303e:	f00a fa26 	bl	800d48e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	2000be44 	.word	0x2000be44

0800304c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <OTG_FS_IRQHandler+0x10>)
 8003052:	f005 fa5b 	bl	800850c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000c3f0 	.word	0x2000c3f0

08003060 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <LTDC_IRQHandler+0x10>)
 8003066:	f007 fb33 	bl	800a6d0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000a118 	.word	0x2000a118

08003074 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <DMA2D_IRQHandler+0x10>)
 800307a:	f004 fa93 	bl	80075a4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000bcbc 	.word	0x2000bcbc

08003088 <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
#include "stm32746g_discovery_audio.h"
extern SAI_HandleTypeDef haudio_in_sai;
 void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
 {
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	 HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <DMA2_Stream7_IRQHandler+0x14>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4618      	mov	r0, r3
 8003092:	f003 fec1 	bl	8006e18 <HAL_DMA_IRQHandler>
 }
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000e68 	.word	0x20000e68

080030a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e00a      	b.n	80030c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030b2:	f3af 8000 	nop.w
 80030b6:	4601      	mov	r1, r0
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	60ba      	str	r2, [r7, #8]
 80030be:	b2ca      	uxtb	r2, r1
 80030c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	dbf0      	blt.n	80030b2 <_read+0x12>
	}

return len;
 80030d0:	687b      	ldr	r3, [r7, #4]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e009      	b.n	8003100 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	60ba      	str	r2, [r7, #8]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f012 fcd9 	bl	8015aac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3301      	adds	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	dbf1      	blt.n	80030ec <_write+0x12>
	}
	return len;
 8003108:	687b      	ldr	r3, [r7, #4]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <_close>:

int _close(int file)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
	return -1;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800313a:	605a      	str	r2, [r3, #4]
	return 0;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <_isatty>:

int _isatty(int file)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
	return 1;
 8003152:	2301      	movs	r3, #1
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
	return 0;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003184:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <_sbrk+0x5c>)
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <_sbrk+0x60>)
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003190:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <_sbrk+0x64>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <_sbrk+0x64>)
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <_sbrk+0x68>)
 800319c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <_sbrk+0x64>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d207      	bcs.n	80031bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031ac:	f012 fde4 	bl	8015d78 <__errno>
 80031b0:	4602      	mov	r2, r0
 80031b2:	230c      	movs	r3, #12
 80031b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ba:	e009      	b.n	80031d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <_sbrk+0x64>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <_sbrk+0x64>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	4a05      	ldr	r2, [pc, #20]	; (80031e0 <_sbrk+0x64>)
 80031cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20050000 	.word	0x20050000
 80031dc:	00000400 	.word	0x00000400
 80031e0:	20000d8c 	.word	0x20000d8c
 80031e4:	20010328 	.word	0x20010328

080031e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <SystemInit+0x28>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <SystemInit+0x28>)
 80031f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <SystemInit+0x28>)
 80031fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003202:	609a      	str	r2, [r3, #8]
#endif
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800324c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800321a:	e003      	b.n	8003224 <LoopCopyDataInit>

0800321c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800321e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003222:	3104      	adds	r1, #4

08003224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003224:	480b      	ldr	r0, [pc, #44]	; (8003254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800322a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800322c:	d3f6      	bcc.n	800321c <CopyDataInit>
  ldr  r2, =_sbss
 800322e:	4a0b      	ldr	r2, [pc, #44]	; (800325c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003230:	e002      	b.n	8003238 <LoopFillZerobss>

08003232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003234:	f842 3b04 	str.w	r3, [r2], #4

08003238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800323a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800323c:	d3f9      	bcc.n	8003232 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800323e:	f7ff ffd3 	bl	80031e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003242:	f012 fd9f 	bl	8015d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003246:	f7fd fcb9 	bl	8000bbc <main>
  bx  lr    
 800324a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800324c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003250:	08019c78 	.word	0x08019c78
  ldr  r0, =_sdata
 8003254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003258:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 800325c:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 8003260:	20010324 	.word	0x20010324

08003264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003264:	e7fe      	b.n	8003264 <ADC_IRQHandler>
	...

08003268 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	4603      	mov	r3, r0
 8003272:	81fb      	strh	r3, [r7, #14]
 8003274:	460b      	mov	r3, r1
 8003276:	81bb      	strh	r3, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8003280:	89bb      	ldrh	r3, [r7, #12]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8003286:	89bb      	ldrh	r3, [r7, #12]
 8003288:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800328c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003292:	f001 fc3f 	bl	8004b14 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2203      	movs	r2, #3
 800329c:	f44f 7181 	mov.w	r1, #258	; 0x102
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 fab3 	bl	800480c <CODEC_IO_Write>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2200      	movs	r2, #0
 80032b6:	f640 0117 	movw	r1, #2071	; 0x817
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 faa6 	bl	800480c <CODEC_IO_Write>
 80032c0:	4603      	mov	r3, r0
 80032c2:	461a      	mov	r2, r3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80032ca:	89fb      	ldrh	r3, [r7, #14]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2200      	movs	r2, #0
 80032d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 fa99 	bl	800480c <CODEC_IO_Write>
 80032da:	4603      	mov	r3, r0
 80032dc:	461a      	mov	r2, r3
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	4413      	add	r3, r2
 80032e2:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80032e4:	89fb      	ldrh	r3, [r7, #14]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	226c      	movs	r2, #108	; 0x6c
 80032ea:	2139      	movs	r1, #57	; 0x39
 80032ec:	4618      	mov	r0, r3
 80032ee:	f001 fa8d 	bl	800480c <CODEC_IO_Write>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80032fc:	8afb      	ldrh	r3, [r7, #22]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2213      	movs	r2, #19
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f001 fa7e 	bl	800480c <CODEC_IO_Write>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	e00b      	b.n	8003334 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 800331c:	89fb      	ldrh	r3, [r7, #14]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2203      	movs	r2, #3
 8003322:	2101      	movs	r1, #1
 8003324:	4618      	mov	r0, r3
 8003326:	f001 fa71 	bl	800480c <CODEC_IO_Write>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8003334:	2032      	movs	r0, #50	; 0x32
 8003336:	f001 fc55 	bl	8004be4 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800333a:	8b3b      	ldrh	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 815b 	beq.w	80035f8 <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 8003342:	4bbc      	ldr	r3, [pc, #752]	; (8003634 <wm8994_Init+0x3cc>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8003348:	8b3b      	ldrh	r3, [r7, #24]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d047      	beq.n	80033de <wm8994_Init+0x176>
 800334e:	2b03      	cmp	r3, #3
 8003350:	f000 8087 	beq.w	8003462 <wm8994_Init+0x1fa>
 8003354:	2b01      	cmp	r3, #1
 8003356:	f040 810c 	bne.w	8003572 <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800335a:	89fb      	ldrh	r3, [r7, #14]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003362:	2105      	movs	r1, #5
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fa51 	bl	800480c <CODEC_IO_Write>
 800336a:	4603      	mov	r3, r0
 800336c:	461a      	mov	r2, r3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003374:	89fb      	ldrh	r3, [r7, #14]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2200      	movs	r2, #0
 800337a:	f240 6101 	movw	r1, #1537	; 0x601
 800337e:	4618      	mov	r0, r3
 8003380:	f001 fa44 	bl	800480c <CODEC_IO_Write>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4413      	add	r3, r2
 800338c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800338e:	89fb      	ldrh	r3, [r7, #14]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2200      	movs	r2, #0
 8003394:	f240 6102 	movw	r1, #1538	; 0x602
 8003398:	4618      	mov	r0, r3
 800339a:	f001 fa37 	bl	800480c <CODEC_IO_Write>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80033a8:	89fb      	ldrh	r3, [r7, #14]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2202      	movs	r2, #2
 80033ae:	f240 6104 	movw	r1, #1540	; 0x604
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 fa2a 	bl	800480c <CODEC_IO_Write>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80033c2:	89fb      	ldrh	r3, [r7, #14]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2202      	movs	r2, #2
 80033c8:	f240 6105 	movw	r1, #1541	; 0x605
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fa1d 	bl	800480c <CODEC_IO_Write>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	61fb      	str	r3, [r7, #28]
      break;
 80033dc:	e10f      	b.n	80035fe <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80033de:	89fb      	ldrh	r3, [r7, #14]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f240 3203 	movw	r2, #771	; 0x303
 80033e6:	2105      	movs	r1, #5
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fa0f 	bl	800480c <CODEC_IO_Write>
 80033ee:	4603      	mov	r3, r0
 80033f0:	461a      	mov	r2, r3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80033f8:	89fb      	ldrh	r3, [r7, #14]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2201      	movs	r2, #1
 80033fe:	f240 6101 	movw	r1, #1537	; 0x601
 8003402:	4618      	mov	r0, r3
 8003404:	f001 fa02 	bl	800480c <CODEC_IO_Write>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	4413      	add	r3, r2
 8003410:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003412:	89fb      	ldrh	r3, [r7, #14]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2201      	movs	r2, #1
 8003418:	f240 6102 	movw	r1, #1538	; 0x602
 800341c:	4618      	mov	r0, r3
 800341e:	f001 f9f5 	bl	800480c <CODEC_IO_Write>
 8003422:	4603      	mov	r3, r0
 8003424:	461a      	mov	r2, r3
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800342c:	89fb      	ldrh	r3, [r7, #14]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2200      	movs	r2, #0
 8003432:	f240 6104 	movw	r1, #1540	; 0x604
 8003436:	4618      	mov	r0, r3
 8003438:	f001 f9e8 	bl	800480c <CODEC_IO_Write>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003446:	89fb      	ldrh	r3, [r7, #14]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2200      	movs	r2, #0
 800344c:	f240 6105 	movw	r1, #1541	; 0x605
 8003450:	4618      	mov	r0, r3
 8003452:	f001 f9db 	bl	800480c <CODEC_IO_Write>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	61fb      	str	r3, [r7, #28]
      break;
 8003460:	e0cd      	b.n	80035fe <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003462:	8afb      	ldrh	r3, [r7, #22]
 8003464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003468:	d141      	bne.n	80034ee <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800346a:	89fb      	ldrh	r3, [r7, #14]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003472:	2105      	movs	r1, #5
 8003474:	4618      	mov	r0, r3
 8003476:	f001 f9c9 	bl	800480c <CODEC_IO_Write>
 800347a:	4603      	mov	r3, r0
 800347c:	461a      	mov	r2, r3
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8003484:	89fb      	ldrh	r3, [r7, #14]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2203      	movs	r2, #3
 800348a:	f240 6101 	movw	r1, #1537	; 0x601
 800348e:	4618      	mov	r0, r3
 8003490:	f001 f9bc 	bl	800480c <CODEC_IO_Write>
 8003494:	4603      	mov	r3, r0
 8003496:	461a      	mov	r2, r3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800349e:	89fb      	ldrh	r3, [r7, #14]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2203      	movs	r2, #3
 80034a4:	f240 6102 	movw	r1, #1538	; 0x602
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 f9af 	bl	800480c <CODEC_IO_Write>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	4413      	add	r3, r2
 80034b6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80034b8:	89fb      	ldrh	r3, [r7, #14]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2203      	movs	r2, #3
 80034be:	f240 6104 	movw	r1, #1540	; 0x604
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f9a2 	bl	800480c <CODEC_IO_Write>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80034d2:	89fb      	ldrh	r3, [r7, #14]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2203      	movs	r2, #3
 80034d8:	f240 6105 	movw	r1, #1541	; 0x605
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 f995 	bl	800480c <CODEC_IO_Write>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80034ec:	e087      	b.n	80035fe <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80034ee:	89fb      	ldrh	r3, [r7, #14]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80034f6:	2105      	movs	r1, #5
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 f987 	bl	800480c <CODEC_IO_Write>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	4413      	add	r3, r2
 8003506:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2201      	movs	r2, #1
 800350e:	f240 6101 	movw	r1, #1537	; 0x601
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f97a 	bl	800480c <CODEC_IO_Write>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2201      	movs	r2, #1
 8003528:	f240 6102 	movw	r1, #1538	; 0x602
 800352c:	4618      	mov	r0, r3
 800352e:	f001 f96d 	bl	800480c <CODEC_IO_Write>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800353c:	89fb      	ldrh	r3, [r7, #14]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2202      	movs	r2, #2
 8003542:	f240 6104 	movw	r1, #1540	; 0x604
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f960 	bl	800480c <CODEC_IO_Write>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8003556:	89fb      	ldrh	r3, [r7, #14]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2202      	movs	r2, #2
 800355c:	f240 6105 	movw	r1, #1541	; 0x605
 8003560:	4618      	mov	r0, r3
 8003562:	f001 f953 	bl	800480c <CODEC_IO_Write>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	61fb      	str	r3, [r7, #28]
      break;
 8003570:	e045      	b.n	80035fe <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003572:	89fb      	ldrh	r3, [r7, #14]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f240 3203 	movw	r2, #771	; 0x303
 800357a:	2105      	movs	r1, #5
 800357c:	4618      	mov	r0, r3
 800357e:	f001 f945 	bl	800480c <CODEC_IO_Write>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800358c:	89fb      	ldrh	r3, [r7, #14]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2201      	movs	r2, #1
 8003592:	f240 6101 	movw	r1, #1537	; 0x601
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f938 	bl	800480c <CODEC_IO_Write>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80035a6:	89fb      	ldrh	r3, [r7, #14]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2201      	movs	r2, #1
 80035ac:	f240 6102 	movw	r1, #1538	; 0x602
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 f92b 	bl	800480c <CODEC_IO_Write>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80035c0:	89fb      	ldrh	r3, [r7, #14]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2200      	movs	r2, #0
 80035c6:	f240 6104 	movw	r1, #1540	; 0x604
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 f91e 	bl	800480c <CODEC_IO_Write>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2200      	movs	r2, #0
 80035e0:	f240 6105 	movw	r1, #1541	; 0x605
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 f911 	bl	800480c <CODEC_IO_Write>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	61fb      	str	r3, [r7, #28]
      break;
 80035f4:	bf00      	nop
 80035f6:	e002      	b.n	80035fe <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <wm8994_Init+0x3cc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80035fe:	8afb      	ldrh	r3, [r7, #22]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 81a7 	beq.w	8003954 <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <wm8994_Init+0x3d0>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800360c:	8afb      	ldrh	r3, [r7, #22]
 800360e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003612:	d013      	beq.n	800363c <wm8994_Init+0x3d4>
 8003614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003618:	dc04      	bgt.n	8003624 <wm8994_Init+0x3bc>
 800361a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361e:	f000 80cf 	beq.w	80037c0 <wm8994_Init+0x558>
 8003622:	e192      	b.n	800394a <wm8994_Init+0x6e2>
 8003624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003628:	d057      	beq.n	80036da <wm8994_Init+0x472>
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362e:	f000 8116 	beq.w	800385e <wm8994_Init+0x5f6>
 8003632:	e18a      	b.n	800394a <wm8994_Init+0x6e2>
 8003634:	20000d90 	.word	0x20000d90
 8003638:	20000d94 	.word	0x20000d94
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 800363c:	89fb      	ldrh	r3, [r7, #14]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8003644:	2104      	movs	r1, #4
 8003646:	4618      	mov	r0, r3
 8003648:	f001 f8e0 	bl	800480c <CODEC_IO_Write>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003656:	89fb      	ldrh	r3, [r7, #14]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	22db      	movs	r2, #219	; 0xdb
 800365c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003660:	4618      	mov	r0, r3
 8003662:	f001 f8d3 	bl	800480c <CODEC_IO_Write>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8003670:	89fb      	ldrh	r3, [r7, #14]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8003678:	2102      	movs	r1, #2
 800367a:	4618      	mov	r0, r3
 800367c:	f001 f8c6 	bl	800480c <CODEC_IO_Write>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800368a:	89fb      	ldrh	r3, [r7, #14]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2202      	movs	r2, #2
 8003690:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003694:	4618      	mov	r0, r3
 8003696:	f001 f8b9 	bl	800480c <CODEC_IO_Write>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80036a4:	89fb      	ldrh	r3, [r7, #14]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2202      	movs	r2, #2
 80036aa:	f240 6109 	movw	r1, #1545	; 0x609
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f8ac 	bl	800480c <CODEC_IO_Write>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80036be:	89fb      	ldrh	r3, [r7, #14]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	220e      	movs	r2, #14
 80036c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 f89f 	bl	800480c <CODEC_IO_Write>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	61fb      	str	r3, [r7, #28]
      break;
 80036d8:	e13f      	b.n	800395a <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80036da:	89fb      	ldrh	r3, [r7, #14]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2211      	movs	r2, #17
 80036e0:	2128      	movs	r1, #40	; 0x28
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f892 	bl	800480c <CODEC_IO_Write>
 80036e8:	4603      	mov	r3, r0
 80036ea:	461a      	mov	r2, r3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80036f2:	89fb      	ldrh	r3, [r7, #14]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2235      	movs	r2, #53	; 0x35
 80036f8:	2129      	movs	r1, #41	; 0x29
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 f886 	bl	800480c <CODEC_IO_Write>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800370a:	89fb      	ldrh	r3, [r7, #14]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2235      	movs	r2, #53	; 0x35
 8003710:	212a      	movs	r1, #42	; 0x2a
 8003712:	4618      	mov	r0, r3
 8003714:	f001 f87a 	bl	800480c <CODEC_IO_Write>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8003722:	89fb      	ldrh	r3, [r7, #14]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f240 3203 	movw	r2, #771	; 0x303
 800372a:	2104      	movs	r1, #4
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f86d 	bl	800480c <CODEC_IO_Write>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800373c:	89fb      	ldrh	r3, [r7, #14]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	22db      	movs	r2, #219	; 0xdb
 8003742:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003746:	4618      	mov	r0, r3
 8003748:	f001 f860 	bl	800480c <CODEC_IO_Write>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003756:	89fb      	ldrh	r3, [r7, #14]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f246 3250 	movw	r2, #25424	; 0x6350
 800375e:	2102      	movs	r1, #2
 8003760:	4618      	mov	r0, r3
 8003762:	f001 f853 	bl	800480c <CODEC_IO_Write>
 8003766:	4603      	mov	r3, r0
 8003768:	461a      	mov	r2, r3
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003770:	89fb      	ldrh	r3, [r7, #14]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2202      	movs	r2, #2
 8003776:	f240 6106 	movw	r1, #1542	; 0x606
 800377a:	4618      	mov	r0, r3
 800377c:	f001 f846 	bl	800480c <CODEC_IO_Write>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800378a:	89fb      	ldrh	r3, [r7, #14]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2202      	movs	r2, #2
 8003790:	f240 6107 	movw	r1, #1543	; 0x607
 8003794:	4618      	mov	r0, r3
 8003796:	f001 f839 	bl	800480c <CODEC_IO_Write>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80037a4:	89fb      	ldrh	r3, [r7, #14]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	220d      	movs	r2, #13
 80037aa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f82c 	bl	800480c <CODEC_IO_Write>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	61fb      	str	r3, [r7, #28]
      break;
 80037be:	e0cc      	b.n	800395a <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80037c8:	2104      	movs	r1, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f81e 	bl	800480c <CODEC_IO_Write>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80037da:	89fb      	ldrh	r3, [r7, #14]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	22db      	movs	r2, #219	; 0xdb
 80037e0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 f811 	bl	800480c <CODEC_IO_Write>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80037f4:	89fb      	ldrh	r3, [r7, #14]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f246 3250 	movw	r2, #25424	; 0x6350
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 f804 	bl	800480c <CODEC_IO_Write>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800380e:	89fb      	ldrh	r3, [r7, #14]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2202      	movs	r2, #2
 8003814:	f240 6106 	movw	r1, #1542	; 0x606
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fff7 	bl	800480c <CODEC_IO_Write>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003828:	89fb      	ldrh	r3, [r7, #14]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2202      	movs	r2, #2
 800382e:	f240 6107 	movw	r1, #1543	; 0x607
 8003832:	4618      	mov	r0, r3
 8003834:	f000 ffea 	bl	800480c <CODEC_IO_Write>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003842:	89fb      	ldrh	r3, [r7, #14]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	220d      	movs	r2, #13
 8003848:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800384c:	4618      	mov	r0, r3
 800384e:	f000 ffdd 	bl	800480c <CODEC_IO_Write>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	61fb      	str	r3, [r7, #28]
      break; 
 800385c:	e07d      	b.n	800395a <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800385e:	89fb      	ldrh	r3, [r7, #14]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f640 723c 	movw	r2, #3900	; 0xf3c
 8003866:	2104      	movs	r1, #4
 8003868:	4618      	mov	r0, r3
 800386a:	f000 ffcf 	bl	800480c <CODEC_IO_Write>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003878:	89fb      	ldrh	r3, [r7, #14]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	22db      	movs	r2, #219	; 0xdb
 800387e:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003882:	4618      	mov	r0, r3
 8003884:	f000 ffc2 	bl	800480c <CODEC_IO_Write>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003892:	89fb      	ldrh	r3, [r7, #14]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	22db      	movs	r2, #219	; 0xdb
 8003898:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800389c:	4618      	mov	r0, r3
 800389e:	f000 ffb5 	bl	800480c <CODEC_IO_Write>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80038ac:	89fb      	ldrh	r3, [r7, #14]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80038b4:	2102      	movs	r1, #2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 ffa8 	bl	800480c <CODEC_IO_Write>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2202      	movs	r2, #2
 80038cc:	f240 6106 	movw	r1, #1542	; 0x606
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 ff9b 	bl	800480c <CODEC_IO_Write>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461a      	mov	r2, r3
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80038e0:	89fb      	ldrh	r3, [r7, #14]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2202      	movs	r2, #2
 80038e6:	f240 6107 	movw	r1, #1543	; 0x607
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 ff8e 	bl	800480c <CODEC_IO_Write>
 80038f0:	4603      	mov	r3, r0
 80038f2:	461a      	mov	r2, r3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80038fa:	89fb      	ldrh	r3, [r7, #14]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2202      	movs	r2, #2
 8003900:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003904:	4618      	mov	r0, r3
 8003906:	f000 ff81 	bl	800480c <CODEC_IO_Write>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003914:	89fb      	ldrh	r3, [r7, #14]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2202      	movs	r2, #2
 800391a:	f240 6109 	movw	r1, #1545	; 0x609
 800391e:	4618      	mov	r0, r3
 8003920:	f000 ff74 	bl	800480c <CODEC_IO_Write>
 8003924:	4603      	mov	r3, r0
 8003926:	461a      	mov	r2, r3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800392e:	89fb      	ldrh	r3, [r7, #14]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	220d      	movs	r2, #13
 8003934:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003938:	4618      	mov	r0, r3
 800393a:	f000 ff67 	bl	800480c <CODEC_IO_Write>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	61fb      	str	r3, [r7, #28]
      break;    
 8003948:	e007      	b.n	800395a <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3301      	adds	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
      break;
 8003950:	bf00      	nop
 8003952:	e002      	b.n	800395a <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 8003954:	4b95      	ldr	r3, [pc, #596]	; (8003bac <wm8994_Init+0x944>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f245 6222 	movw	r2, #22050	; 0x5622
 8003960:	4293      	cmp	r3, r2
 8003962:	d076      	beq.n	8003a52 <wm8994_Init+0x7ea>
 8003964:	f245 6222 	movw	r2, #22050	; 0x5622
 8003968:	4293      	cmp	r3, r2
 800396a:	d80a      	bhi.n	8003982 <wm8994_Init+0x71a>
 800396c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003970:	4293      	cmp	r3, r2
 8003972:	d060      	beq.n	8003a36 <wm8994_Init+0x7ce>
 8003974:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003978:	d025      	beq.n	80039c6 <wm8994_Init+0x75e>
 800397a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800397e:	d014      	beq.n	80039aa <wm8994_Init+0x742>
 8003980:	e083      	b.n	8003a8a <wm8994_Init+0x822>
 8003982:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003986:	4293      	cmp	r3, r2
 8003988:	d071      	beq.n	8003a6e <wm8994_Init+0x806>
 800398a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800398e:	4293      	cmp	r3, r2
 8003990:	d803      	bhi.n	800399a <wm8994_Init+0x732>
 8003992:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003996:	d024      	beq.n	80039e2 <wm8994_Init+0x77a>
 8003998:	e077      	b.n	8003a8a <wm8994_Init+0x822>
 800399a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800399e:	4293      	cmp	r3, r2
 80039a0:	d02d      	beq.n	80039fe <wm8994_Init+0x796>
 80039a2:	4a83      	ldr	r2, [pc, #524]	; (8003bb0 <wm8994_Init+0x948>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d038      	beq.n	8003a1a <wm8994_Init+0x7b2>
 80039a8:	e06f      	b.n	8003a8a <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80039aa:	89fb      	ldrh	r3, [r7, #14]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2203      	movs	r2, #3
 80039b0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 ff29 	bl	800480c <CODEC_IO_Write>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	61fb      	str	r3, [r7, #28]
    break;
 80039c4:	e06f      	b.n	8003aa6 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80039c6:	89fb      	ldrh	r3, [r7, #14]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2233      	movs	r2, #51	; 0x33
 80039cc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 ff1b 	bl	800480c <CODEC_IO_Write>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	61fb      	str	r3, [r7, #28]
    break;
 80039e0:	e061      	b.n	8003aa6 <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80039e2:	89fb      	ldrh	r3, [r7, #14]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2263      	movs	r2, #99	; 0x63
 80039e8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 ff0d 	bl	800480c <CODEC_IO_Write>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	4413      	add	r3, r2
 80039fa:	61fb      	str	r3, [r7, #28]
    break;
 80039fc:	e053      	b.n	8003aa6 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80039fe:	89fb      	ldrh	r3, [r7, #14]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2283      	movs	r2, #131	; 0x83
 8003a04:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 feff 	bl	800480c <CODEC_IO_Write>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	61fb      	str	r3, [r7, #28]
    break;
 8003a18:	e045      	b.n	8003aa6 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003a1a:	89fb      	ldrh	r3, [r7, #14]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	22a3      	movs	r2, #163	; 0xa3
 8003a20:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fef1 	bl	800480c <CODEC_IO_Write>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	4413      	add	r3, r2
 8003a32:	61fb      	str	r3, [r7, #28]
    break;
 8003a34:	e037      	b.n	8003aa6 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003a36:	89fb      	ldrh	r3, [r7, #14]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2213      	movs	r2, #19
 8003a3c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fee3 	bl	800480c <CODEC_IO_Write>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	61fb      	str	r3, [r7, #28]
    break;
 8003a50:	e029      	b.n	8003aa6 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003a52:	89fb      	ldrh	r3, [r7, #14]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2243      	movs	r2, #67	; 0x43
 8003a58:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fed5 	bl	800480c <CODEC_IO_Write>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	61fb      	str	r3, [r7, #28]
    break;
 8003a6c:	e01b      	b.n	8003aa6 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003a6e:	89fb      	ldrh	r3, [r7, #14]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2273      	movs	r2, #115	; 0x73
 8003a74:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fec7 	bl	800480c <CODEC_IO_Write>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	4413      	add	r3, r2
 8003a86:	61fb      	str	r3, [r7, #28]
    break; 
 8003a88:	e00d      	b.n	8003aa6 <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003a8a:	89fb      	ldrh	r3, [r7, #14]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2283      	movs	r2, #131	; 0x83
 8003a90:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 feb9 	bl	800480c <CODEC_IO_Write>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	61fb      	str	r3, [r7, #28]
    break; 
 8003aa4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003aa6:	8afb      	ldrh	r3, [r7, #22]
 8003aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aac:	d10e      	bne.n	8003acc <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8003aae:	89fb      	ldrh	r3, [r7, #14]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f244 0218 	movw	r2, #16408	; 0x4018
 8003ab6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fea6 	bl	800480c <CODEC_IO_Write>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e00d      	b.n	8003ae8 <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8003acc:	89fb      	ldrh	r3, [r7, #14]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f244 0210 	movw	r2, #16400	; 0x4010
 8003ad4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fe97 	bl	800480c <CODEC_IO_Write>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8003ae8:	89fb      	ldrh	r3, [r7, #14]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2200      	movs	r2, #0
 8003aee:	f240 3102 	movw	r1, #770	; 0x302
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fe8a 	bl	800480c <CODEC_IO_Write>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	4413      	add	r3, r2
 8003b00:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8003b02:	89fb      	ldrh	r3, [r7, #14]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	220a      	movs	r2, #10
 8003b08:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fe7d 	bl	800480c <CODEC_IO_Write>
 8003b12:	4603      	mov	r3, r0
 8003b14:	461a      	mov	r2, r3
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8003b1c:	89fb      	ldrh	r3, [r7, #14]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2201      	movs	r2, #1
 8003b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fe70 	bl	800480c <CODEC_IO_Write>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8003b36:	8b3b      	ldrh	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 817b 	beq.w	8003e34 <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8003b3e:	8b3b      	ldrh	r3, [r7, #24]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d157      	bne.n	8003bf4 <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8003b44:	89fb      	ldrh	r3, [r7, #14]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b4c:	212d      	movs	r1, #45	; 0x2d
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fe5c 	bl	800480c <CODEC_IO_Write>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8003b5e:	89fb      	ldrh	r3, [r7, #14]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b66:	212e      	movs	r1, #46	; 0x2e
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fe4f 	bl	800480c <CODEC_IO_Write>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <wm8994_Init+0x94c>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01b      	beq.n	8003bb8 <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8003b80:	89fb      	ldrh	r3, [r7, #14]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8003b88:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fe3d 	bl	800480c <CODEC_IO_Write>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <wm8994_Init+0x94c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8003ba2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ba6:	f001 f81d 	bl	8004be4 <AUDIO_IO_Delay>
 8003baa:	e016      	b.n	8003bda <wm8994_Init+0x972>
 8003bac:	20000d94 	.word	0x20000d94
 8003bb0:	00017700 	.word	0x00017700
 8003bb4:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8003bb8:	89fb      	ldrh	r3, [r7, #14]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f248 1208 	movw	r2, #33032	; 0x8108
 8003bc0:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fe21 	bl	800480c <CODEC_IO_Write>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	461a      	mov	r2, r3
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8003bd4:	2032      	movs	r0, #50	; 0x32
 8003bd6:	f001 f805 	bl	8004be4 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2200      	movs	r2, #0
 8003be0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fe11 	bl	800480c <CODEC_IO_Write>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8003bf4:	89fb      	ldrh	r3, [r7, #14]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003bfc:	2103      	movs	r1, #3
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fe04 	bl	800480c <CODEC_IO_Write>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8003c0e:	89fb      	ldrh	r3, [r7, #14]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2200      	movs	r2, #0
 8003c14:	2122      	movs	r1, #34	; 0x22
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fdf8 	bl	800480c <CODEC_IO_Write>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	461a      	mov	r2, r3
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8003c26:	89fb      	ldrh	r3, [r7, #14]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2123      	movs	r1, #35	; 0x23
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fdec 	bl	800480c <CODEC_IO_Write>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8003c3e:	89fb      	ldrh	r3, [r7, #14]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003c46:	2136      	movs	r1, #54	; 0x36
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fddf 	bl	800480c <CODEC_IO_Write>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461a      	mov	r2, r3
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4413      	add	r3, r2
 8003c56:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8003c58:	89fb      	ldrh	r3, [r7, #14]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f243 0203 	movw	r2, #12291	; 0x3003
 8003c60:	2101      	movs	r1, #1
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fdd2 	bl	800480c <CODEC_IO_Write>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003c72:	8afb      	ldrh	r3, [r7, #22]
 8003c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c78:	d10d      	bne.n	8003c96 <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8003c7a:	89fb      	ldrh	r3, [r7, #14]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f240 2205 	movw	r2, #517	; 0x205
 8003c82:	2151      	movs	r1, #81	; 0x51
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fdc1 	bl	800480c <CODEC_IO_Write>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e00b      	b.n	8003cae <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8003c96:	89fb      	ldrh	r3, [r7, #14]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	2151      	movs	r1, #81	; 0x51
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fdb4 	bl	800480c <CODEC_IO_Write>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	4413      	add	r3, r2
 8003cac:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8003cae:	8b7b      	ldrh	r3, [r7, #26]
 8003cb0:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8003cb4:	f043 0303 	orr.w	r3, r3, #3
 8003cb8:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003cba:	89fb      	ldrh	r3, [r7, #14]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	8b7a      	ldrh	r2, [r7, #26]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fda2 	bl	800480c <CODEC_IO_Write>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	461a      	mov	r2, r3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8003cd2:	89fb      	ldrh	r3, [r7, #14]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2222      	movs	r2, #34	; 0x22
 8003cd8:	2160      	movs	r1, #96	; 0x60
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fd96 	bl	800480c <CODEC_IO_Write>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8003cea:	89fb      	ldrh	r3, [r7, #14]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f649 7225 	movw	r2, #40741	; 0x9f25
 8003cf2:	214c      	movs	r1, #76	; 0x4c
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fd89 	bl	800480c <CODEC_IO_Write>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8003d04:	200f      	movs	r0, #15
 8003d06:	f000 ff6d 	bl	8004be4 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8003d0a:	89fb      	ldrh	r3, [r7, #14]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2201      	movs	r2, #1
 8003d10:	212d      	movs	r1, #45	; 0x2d
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fd7a 	bl	800480c <CODEC_IO_Write>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8003d22:	89fb      	ldrh	r3, [r7, #14]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2201      	movs	r2, #1
 8003d28:	212e      	movs	r1, #46	; 0x2e
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fd6e 	bl	800480c <CODEC_IO_Write>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8003d3a:	89fb      	ldrh	r3, [r7, #14]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f44f 724c 	mov.w	r2, #816	; 0x330
 8003d42:	2103      	movs	r1, #3
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fd61 	bl	800480c <CODEC_IO_Write>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8003d54:	89fb      	ldrh	r3, [r7, #14]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2233      	movs	r2, #51	; 0x33
 8003d5a:	2154      	movs	r1, #84	; 0x54
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fd55 	bl	800480c <CODEC_IO_Write>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8003d6c:	f240 1001 	movw	r0, #257	; 0x101
 8003d70:	f000 ff38 	bl	8004be4 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8003d74:	89fb      	ldrh	r3, [r7, #14]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	22ee      	movs	r2, #238	; 0xee
 8003d7a:	2160      	movs	r1, #96	; 0x60
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fd45 	bl	800480c <CODEC_IO_Write>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	22c0      	movs	r2, #192	; 0xc0
 8003d92:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fd38 	bl	800480c <CODEC_IO_Write>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8003da6:	89fb      	ldrh	r3, [r7, #14]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	22c0      	movs	r2, #192	; 0xc0
 8003dac:	f240 6111 	movw	r1, #1553	; 0x611
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fd2b 	bl	800480c <CODEC_IO_Write>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003dc0:	89fb      	ldrh	r3, [r7, #14]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fd1e 	bl	800480c <CODEC_IO_Write>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003dda:	89fb      	ldrh	r3, [r7, #14]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	22c0      	movs	r2, #192	; 0xc0
 8003de0:	f240 6112 	movw	r1, #1554	; 0x612
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fd11 	bl	800480c <CODEC_IO_Write>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003df4:	89fb      	ldrh	r3, [r7, #14]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	22c0      	movs	r2, #192	; 0xc0
 8003dfa:	f240 6113 	movw	r1, #1555	; 0x613
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fd04 	bl	800480c <CODEC_IO_Write>
 8003e04:	4603      	mov	r3, r0
 8003e06:	461a      	mov	r2, r3
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003e0e:	89fb      	ldrh	r3, [r7, #14]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2210      	movs	r2, #16
 8003e14:	f240 4122 	movw	r1, #1058	; 0x422
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fcf7 	bl	800480c <CODEC_IO_Write>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003e28:	7afa      	ldrb	r2, [r7, #11]
 8003e2a:	89fb      	ldrh	r3, [r7, #14]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f984 	bl	800413c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8003e34:	8afb      	ldrh	r3, [r7, #22]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a6 	beq.w	8003f88 <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003e3c:	8afb      	ldrh	r3, [r7, #22]
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e42:	d003      	beq.n	8003e4c <wm8994_Init+0xbe4>
 8003e44:	8afb      	ldrh	r3, [r7, #22]
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d12b      	bne.n	8003ea4 <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003e4c:	8b7b      	ldrh	r3, [r7, #26]
 8003e4e:	f043 0313 	orr.w	r3, r3, #19
 8003e52:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003e54:	89fb      	ldrh	r3, [r7, #14]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	8b7a      	ldrh	r2, [r7, #26]
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fcd5 	bl	800480c <CODEC_IO_Write>
 8003e62:	4603      	mov	r3, r0
 8003e64:	461a      	mov	r2, r3
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003e6c:	89fb      	ldrh	r3, [r7, #14]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2202      	movs	r2, #2
 8003e72:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fcc8 	bl	800480c <CODEC_IO_Write>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	461a      	mov	r2, r3
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8003e86:	89fb      	ldrh	r3, [r7, #14]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e8e:	f240 4111 	movw	r1, #1041	; 0x411
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fcba 	bl	800480c <CODEC_IO_Write>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e06b      	b.n	8003f7c <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003ea4:	8afb      	ldrh	r3, [r7, #22]
 8003ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eaa:	d139      	bne.n	8003f20 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003eac:	8b7b      	ldrh	r3, [r7, #26]
 8003eae:	f043 0313 	orr.w	r3, r3, #19
 8003eb2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003eb4:	89fb      	ldrh	r3, [r7, #14]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	8b7a      	ldrh	r2, [r7, #26]
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fca5 	bl	800480c <CODEC_IO_Write>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003ecc:	89fb      	ldrh	r3, [r7, #14]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fc98 	bl	800480c <CODEC_IO_Write>
 8003edc:	4603      	mov	r3, r0
 8003ede:	461a      	mov	r2, r3
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003ee6:	89fb      	ldrh	r3, [r7, #14]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003eee:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fc8a 	bl	800480c <CODEC_IO_Write>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4413      	add	r3, r2
 8003f00:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003f0a:	f240 4111 	movw	r1, #1041	; 0x411
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fc7c 	bl	800480c <CODEC_IO_Write>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461a      	mov	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	e02d      	b.n	8003f7c <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8003f20:	8afb      	ldrh	r3, [r7, #22]
 8003f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f26:	d003      	beq.n	8003f30 <wm8994_Init+0xcc8>
 8003f28:	8afb      	ldrh	r3, [r7, #22]
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2e:	d125      	bne.n	8003f7c <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8003f30:	89fb      	ldrh	r3, [r7, #14]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	220b      	movs	r2, #11
 8003f36:	2118      	movs	r1, #24
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fc67 	bl	800480c <CODEC_IO_Write>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8003f48:	89fb      	ldrh	r3, [r7, #14]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	220b      	movs	r2, #11
 8003f4e:	211a      	movs	r1, #26
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fc5b 	bl	800480c <CODEC_IO_Write>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003f60:	89fb      	ldrh	r3, [r7, #14]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003f68:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fc4d 	bl	800480c <CODEC_IO_Write>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003f7c:	7afa      	ldrb	r2, [r7, #11]
 8003f7e:	89fb      	ldrh	r3, [r7, #14]
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f8da 	bl	800413c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8003f88:	69fb      	ldr	r3, [r7, #28]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop

08003f94 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003f98:	f000 fdc6 	bl	8004b28 <AUDIO_IO_DeInit>
}
 8003f9c:	bf00      	nop
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003faa:	f000 fdb3 	bl	8004b14 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fde9 	bl	8004b8c <AUDIO_IO_Read>
 8003fba:	4603      	mov	r3, r0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	6039      	str	r1, [r7, #0]
 8003fce:	80fb      	strh	r3, [r7, #6]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f9d1 	bl	8004384 <wm8994_SetMute>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f9bc 	bl	8004384 <wm8994_SetMute>
 800400c:	4602      	mov	r2, r0
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2201      	movs	r2, #1
 800401a:	2102      	movs	r1, #2
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fbf5 	bl	800480c <CODEC_IO_Write>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800402c:	68fb      	ldr	r3, [r7, #12]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f000 f99b 	bl	8004384 <wm8994_SetMute>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004070:	4b31      	ldr	r3, [pc, #196]	; (8004138 <wm8994_Stop+0xd8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d05a      	beq.n	800412e <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f981 	bl	8004384 <wm8994_SetMute>
 8004082:	4602      	mov	r2, r0
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d04e      	beq.n	800412e <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004098:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fbb5 	bl	800480c <CODEC_IO_Write>
 80040a2:	4603      	mov	r3, r0
 80040a4:	461a      	mov	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b4:	f240 4122 	movw	r1, #1058	; 0x422
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fba7 	bl	800480c <CODEC_IO_Write>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2200      	movs	r2, #0
 80040ce:	212d      	movs	r1, #45	; 0x2d
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fb9b 	bl	800480c <CODEC_IO_Write>
 80040d6:	4603      	mov	r3, r0
 80040d8:	461a      	mov	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2200      	movs	r2, #0
 80040e6:	212e      	movs	r1, #46	; 0x2e
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fb8f 	bl	800480c <CODEC_IO_Write>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2200      	movs	r2, #0
 80040fe:	2105      	movs	r1, #5
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fb83 	bl	800480c <CODEC_IO_Write>
 8004106:	4603      	mov	r3, r0
 8004108:	461a      	mov	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2200      	movs	r2, #0
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fb77 	bl	800480c <CODEC_IO_Write>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <wm8994_Stop+0xd8>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000d90 	.word	0x20000d90

0800413c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	460a      	mov	r2, r1
 8004146:	80fb      	strh	r3, [r7, #6]
 8004148:	4613      	mov	r3, r2
 800414a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004150:	797b      	ldrb	r3, [r7, #5]
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d80b      	bhi.n	800416e <wm8994_SetVolume+0x32>
 8004156:	797a      	ldrb	r2, [r7, #5]
 8004158:	4613      	mov	r3, r2
 800415a:	019b      	lsls	r3, r3, #6
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	4a86      	ldr	r2, [pc, #536]	; (8004378 <wm8994_SetVolume+0x23c>)
 8004160:	fb82 1203 	smull	r1, r2, r2, r3
 8004164:	1152      	asrs	r2, r2, #5
 8004166:	17db      	asrs	r3, r3, #31
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	e000      	b.n	8004170 <wm8994_SetVolume+0x34>
 800416e:	2364      	movs	r3, #100	; 0x64
 8004170:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004172:	4b82      	ldr	r3, [pc, #520]	; (800437c <wm8994_SetVolume+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 809b 	beq.w	80042b2 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 800417c:	7afb      	ldrb	r3, [r7, #11]
 800417e:	2b3e      	cmp	r3, #62	; 0x3e
 8004180:	d93d      	bls.n	80041fe <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f8fc 	bl	8004384 <wm8994_SetMute>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f240 127f 	movw	r2, #383	; 0x17f
 800419c:	211c      	movs	r1, #28
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fb34 	bl	800480c <CODEC_IO_Write>
 80041a4:	4603      	mov	r3, r0
 80041a6:	461a      	mov	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f240 127f 	movw	r2, #383	; 0x17f
 80041b6:	211d      	movs	r1, #29
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fb27 	bl	800480c <CODEC_IO_Write>
 80041be:	4603      	mov	r3, r0
 80041c0:	461a      	mov	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f240 127f 	movw	r2, #383	; 0x17f
 80041d0:	2126      	movs	r1, #38	; 0x26
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fb1a 	bl	800480c <CODEC_IO_Write>
 80041d8:	4603      	mov	r3, r0
 80041da:	461a      	mov	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f240 127f 	movw	r2, #383	; 0x17f
 80041ea:	2127      	movs	r1, #39	; 0x27
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fb0d 	bl	800480c <CODEC_IO_Write>
 80041f2:	4603      	mov	r3, r0
 80041f4:	461a      	mov	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e059      	b.n	80042b2 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80041fe:	797b      	ldrb	r3, [r7, #5]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	2101      	movs	r1, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f000 f8bb 	bl	8004384 <wm8994_SetMute>
 800420e:	4602      	mov	r2, r0
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e04c      	b.n	80042b2 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f000 f8b1 	bl	8004384 <wm8994_SetMute>
 8004222:	4602      	mov	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	b2d8      	uxtb	r0, r3
 800422e:	7afb      	ldrb	r3, [r7, #11]
 8004230:	b21b      	sxth	r3, r3
 8004232:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004236:	b21b      	sxth	r3, r3
 8004238:	b29b      	uxth	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	211c      	movs	r1, #28
 800423e:	f000 fae5 	bl	800480c <CODEC_IO_Write>
 8004242:	4603      	mov	r3, r0
 8004244:	461a      	mov	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	b2d8      	uxtb	r0, r3
 8004250:	7afb      	ldrb	r3, [r7, #11]
 8004252:	b21b      	sxth	r3, r3
 8004254:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004258:	b21b      	sxth	r3, r3
 800425a:	b29b      	uxth	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	211d      	movs	r1, #29
 8004260:	f000 fad4 	bl	800480c <CODEC_IO_Write>
 8004264:	4603      	mov	r3, r0
 8004266:	461a      	mov	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	b2d8      	uxtb	r0, r3
 8004272:	7afb      	ldrb	r3, [r7, #11]
 8004274:	b21b      	sxth	r3, r3
 8004276:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800427a:	b21b      	sxth	r3, r3
 800427c:	b29b      	uxth	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	2126      	movs	r1, #38	; 0x26
 8004282:	f000 fac3 	bl	800480c <CODEC_IO_Write>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4413      	add	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	b2d8      	uxtb	r0, r3
 8004294:	7afb      	ldrb	r3, [r7, #11]
 8004296:	b21b      	sxth	r3, r3
 8004298:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800429c:	b21b      	sxth	r3, r3
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	2127      	movs	r1, #39	; 0x27
 80042a4:	f000 fab2 	bl	800480c <CODEC_IO_Write>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80042b2:	4b33      	ldr	r3, [pc, #204]	; (8004380 <wm8994_SetVolume+0x244>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d059      	beq.n	800436e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80042ba:	797b      	ldrb	r3, [r7, #5]
 80042bc:	2b63      	cmp	r3, #99	; 0x63
 80042be:	d80c      	bhi.n	80042da <wm8994_SetVolume+0x19e>
 80042c0:	797a      	ldrb	r2, [r7, #5]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	4a2b      	ldr	r2, [pc, #172]	; (8004378 <wm8994_SetVolume+0x23c>)
 80042cc:	fb82 1203 	smull	r1, r2, r2, r3
 80042d0:	1152      	asrs	r2, r2, #5
 80042d2:	17db      	asrs	r3, r3, #31
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	e000      	b.n	80042dc <wm8994_SetVolume+0x1a0>
 80042da:	23ef      	movs	r3, #239	; 0xef
 80042dc:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	b2d8      	uxtb	r0, r3
 80042e2:	7afb      	ldrb	r3, [r7, #11]
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042f4:	f000 fa8a 	bl	800480c <CODEC_IO_Write>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	b2d8      	uxtb	r0, r3
 8004306:	7afb      	ldrb	r3, [r7, #11]
 8004308:	b21b      	sxth	r3, r3
 800430a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430e:	b21b      	sxth	r3, r3
 8004310:	b29b      	uxth	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	f240 4101 	movw	r1, #1025	; 0x401
 8004318:	f000 fa78 	bl	800480c <CODEC_IO_Write>
 800431c:	4603      	mov	r3, r0
 800431e:	461a      	mov	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	b2d8      	uxtb	r0, r3
 800432a:	7afb      	ldrb	r3, [r7, #11]
 800432c:	b21b      	sxth	r3, r3
 800432e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004332:	b21b      	sxth	r3, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	f240 4104 	movw	r1, #1028	; 0x404
 800433c:	f000 fa66 	bl	800480c <CODEC_IO_Write>
 8004340:	4603      	mov	r3, r0
 8004342:	461a      	mov	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	b2d8      	uxtb	r0, r3
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	b21b      	sxth	r3, r3
 8004352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004356:	b21b      	sxth	r3, r3
 8004358:	b29b      	uxth	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	f240 4105 	movw	r1, #1029	; 0x405
 8004360:	f000 fa54 	bl	800480c <CODEC_IO_Write>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800436e:	68fb      	ldr	r3, [r7, #12]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	51eb851f 	.word	0x51eb851f
 800437c:	20000d90 	.word	0x20000d90
 8004380:	20000d94 	.word	0x20000d94

08004384 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	6039      	str	r1, [r7, #0]
 800438e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <wm8994_SetMute+0x98>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d039      	beq.n	8004410 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d11c      	bne.n	80043dc <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043aa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fa2c 	bl	800480c <CODEC_IO_Write>
 80043b4:	4603      	mov	r3, r0
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c6:	f240 4122 	movw	r1, #1058	; 0x422
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa1e 	bl	800480c <CODEC_IO_Write>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	e019      	b.n	8004410 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2210      	movs	r2, #16
 80043e2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fa10 	bl	800480c <CODEC_IO_Write>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2210      	movs	r2, #16
 80043fc:	f240 4122 	movw	r1, #1058	; 0x422
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fa03 	bl	800480c <CODEC_IO_Write>
 8004406:	4603      	mov	r3, r0
 8004408:	461a      	mov	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000d90 	.word	0x20000d90

08004420 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	460a      	mov	r2, r1
 800442a:	80fb      	strh	r3, [r7, #6]
 800442c:	4613      	mov	r3, r2
 800442e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8004434:	797b      	ldrb	r3, [r7, #5]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d047      	beq.n	80044ca <wm8994_SetOutputMode+0xaa>
 800443a:	2b03      	cmp	r3, #3
 800443c:	f000 8087 	beq.w	800454e <wm8994_SetOutputMode+0x12e>
 8004440:	2b01      	cmp	r3, #1
 8004442:	f040 80c6 	bne.w	80045d2 <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f640 420c 	movw	r2, #3084	; 0xc0c
 800444e:	2105      	movs	r1, #5
 8004450:	4618      	mov	r0, r3
 8004452:	f000 f9db 	bl	800480c <CODEC_IO_Write>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2200      	movs	r2, #0
 8004466:	f240 6101 	movw	r1, #1537	; 0x601
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f9ce 	bl	800480c <CODEC_IO_Write>
 8004470:	4603      	mov	r3, r0
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2200      	movs	r2, #0
 8004480:	f240 6102 	movw	r1, #1538	; 0x602
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f9c1 	bl	800480c <CODEC_IO_Write>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2202      	movs	r2, #2
 800449a:	f240 6104 	movw	r1, #1540	; 0x604
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f9b4 	bl	800480c <CODEC_IO_Write>
 80044a4:	4603      	mov	r3, r0
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2202      	movs	r2, #2
 80044b4:	f240 6105 	movw	r1, #1541	; 0x605
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f9a7 	bl	800480c <CODEC_IO_Write>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
    break;
 80044c8:	e0c5      	b.n	8004656 <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f240 3203 	movw	r2, #771	; 0x303
 80044d2:	2105      	movs	r1, #5
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f999 	bl	800480c <CODEC_IO_Write>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2201      	movs	r2, #1
 80044ea:	f240 6101 	movw	r1, #1537	; 0x601
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f98c 	bl	800480c <CODEC_IO_Write>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2201      	movs	r2, #1
 8004504:	f240 6102 	movw	r1, #1538	; 0x602
 8004508:	4618      	mov	r0, r3
 800450a:	f000 f97f 	bl	800480c <CODEC_IO_Write>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2200      	movs	r2, #0
 800451e:	f240 6104 	movw	r1, #1540	; 0x604
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f972 	bl	800480c <CODEC_IO_Write>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2200      	movs	r2, #0
 8004538:	f240 6105 	movw	r1, #1541	; 0x605
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f965 	bl	800480c <CODEC_IO_Write>
 8004542:	4603      	mov	r3, r0
 8004544:	461a      	mov	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
    break;
 800454c:	e083      	b.n	8004656 <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004556:	2105      	movs	r1, #5
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f957 	bl	800480c <CODEC_IO_Write>
 800455e:	4603      	mov	r3, r0
 8004560:	461a      	mov	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2201      	movs	r2, #1
 800456e:	f240 6101 	movw	r1, #1537	; 0x601
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f94a 	bl	800480c <CODEC_IO_Write>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2201      	movs	r2, #1
 8004588:	f240 6102 	movw	r1, #1538	; 0x602
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f93d 	bl	800480c <CODEC_IO_Write>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2202      	movs	r2, #2
 80045a2:	f240 6104 	movw	r1, #1540	; 0x604
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f930 	bl	800480c <CODEC_IO_Write>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2202      	movs	r2, #2
 80045bc:	f240 6105 	movw	r1, #1541	; 0x605
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f923 	bl	800480c <CODEC_IO_Write>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
    break;
 80045d0:	e041      	b.n	8004656 <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f240 3203 	movw	r2, #771	; 0x303
 80045da:	2105      	movs	r1, #5
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f915 	bl	800480c <CODEC_IO_Write>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4413      	add	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2201      	movs	r2, #1
 80045f2:	f240 6101 	movw	r1, #1537	; 0x601
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f908 	bl	800480c <CODEC_IO_Write>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2201      	movs	r2, #1
 800460c:	f240 6102 	movw	r1, #1538	; 0x602
 8004610:	4618      	mov	r0, r3
 8004612:	f000 f8fb 	bl	800480c <CODEC_IO_Write>
 8004616:	4603      	mov	r3, r0
 8004618:	461a      	mov	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2200      	movs	r2, #0
 8004626:	f240 6104 	movw	r1, #1540	; 0x604
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f8ee 	bl	800480c <CODEC_IO_Write>
 8004630:	4603      	mov	r3, r0
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2200      	movs	r2, #0
 8004640:	f240 6105 	movw	r1, #1541	; 0x605
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f8e1 	bl	800480c <CODEC_IO_Write>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
    break;    
 8004654:	bf00      	nop
  }  
  return counter;
 8004656:	68fb      	ldr	r3, [r7, #12]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f245 6222 	movw	r2, #22050	; 0x5622
 8004676:	4293      	cmp	r3, r2
 8004678:	d076      	beq.n	8004768 <wm8994_SetFrequency+0x108>
 800467a:	f245 6222 	movw	r2, #22050	; 0x5622
 800467e:	4293      	cmp	r3, r2
 8004680:	d80a      	bhi.n	8004698 <wm8994_SetFrequency+0x38>
 8004682:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004686:	4293      	cmp	r3, r2
 8004688:	d060      	beq.n	800474c <wm8994_SetFrequency+0xec>
 800468a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800468e:	d025      	beq.n	80046dc <wm8994_SetFrequency+0x7c>
 8004690:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004694:	d014      	beq.n	80046c0 <wm8994_SetFrequency+0x60>
 8004696:	e083      	b.n	80047a0 <wm8994_SetFrequency+0x140>
 8004698:	f64a 4244 	movw	r2, #44100	; 0xac44
 800469c:	4293      	cmp	r3, r2
 800469e:	d071      	beq.n	8004784 <wm8994_SetFrequency+0x124>
 80046a0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d803      	bhi.n	80046b0 <wm8994_SetFrequency+0x50>
 80046a8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80046ac:	d024      	beq.n	80046f8 <wm8994_SetFrequency+0x98>
 80046ae:	e077      	b.n	80047a0 <wm8994_SetFrequency+0x140>
 80046b0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d02d      	beq.n	8004714 <wm8994_SetFrequency+0xb4>
 80046b8:	4a43      	ldr	r2, [pc, #268]	; (80047c8 <wm8994_SetFrequency+0x168>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d038      	beq.n	8004730 <wm8994_SetFrequency+0xd0>
 80046be:	e06f      	b.n	80047a0 <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2203      	movs	r2, #3
 80046c6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f89e 	bl	800480c <CODEC_IO_Write>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
    break;
 80046da:	e06f      	b.n	80047bc <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2233      	movs	r2, #51	; 0x33
 80046e2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f890 	bl	800480c <CODEC_IO_Write>
 80046ec:	4603      	mov	r3, r0
 80046ee:	461a      	mov	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
    break;
 80046f6:	e061      	b.n	80047bc <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2263      	movs	r2, #99	; 0x63
 80046fe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f882 	bl	800480c <CODEC_IO_Write>
 8004708:	4603      	mov	r3, r0
 800470a:	461a      	mov	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
    break;
 8004712:	e053      	b.n	80047bc <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004714:	88fb      	ldrh	r3, [r7, #6]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2283      	movs	r2, #131	; 0x83
 800471a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f874 	bl	800480c <CODEC_IO_Write>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
    break;
 800472e:	e045      	b.n	80047bc <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	22a3      	movs	r2, #163	; 0xa3
 8004736:	f44f 7104 	mov.w	r1, #528	; 0x210
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f866 	bl	800480c <CODEC_IO_Write>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
    break;
 800474a:	e037      	b.n	80047bc <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2213      	movs	r2, #19
 8004752:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f858 	bl	800480c <CODEC_IO_Write>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
    break;
 8004766:	e029      	b.n	80047bc <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2243      	movs	r2, #67	; 0x43
 800476e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f84a 	bl	800480c <CODEC_IO_Write>
 8004778:	4603      	mov	r3, r0
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
    break;
 8004782:	e01b      	b.n	80047bc <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2273      	movs	r2, #115	; 0x73
 800478a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f83c 	bl	800480c <CODEC_IO_Write>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
    break; 
 800479e:	e00d      	b.n	80047bc <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2283      	movs	r2, #131	; 0x83
 80047a6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f82e 	bl	800480c <CODEC_IO_Write>
 80047b0:	4603      	mov	r3, r0
 80047b2:	461a      	mov	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
    break; 
 80047ba:	bf00      	nop
  }
  return counter;
 80047bc:	68fb      	ldr	r3, [r7, #12]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	00017700 	.word	0x00017700

080047cc <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f812 	bl	800480c <CODEC_IO_Write>
 80047e8:	4603      	mov	r3, r0
 80047ea:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <wm8994_Reset+0x38>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <wm8994_Reset+0x3c>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

  return counter;
 80047f8:	68fb      	ldr	r3, [r7, #12]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000d90 	.word	0x20000d90
 8004808:	20000d94 	.word	0x20000d94

0800480c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	71fb      	strb	r3, [r7, #7]
 8004816:	460b      	mov	r3, r1
 8004818:	80bb      	strh	r3, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	88b9      	ldrh	r1, [r7, #4]
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f985 	bl	8004b38 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	b2db      	uxtb	r3, r3
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <BSP_LED_Toggle>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Toggle LED connected to GPIO */
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <BSP_LED_Toggle+0x20>
  {
    gpio_led = LED1_GPIO_PORT;
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <BSP_LED_Toggle+0x28>)
 800484e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 8004850:	2302      	movs	r3, #2
 8004852:	b29b      	uxth	r3, r3
 8004854:	4619      	mov	r1, r3
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f003 fbaf 	bl	8007fba <HAL_GPIO_TogglePin>
  }
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40022000 	.word	0x40022000

08004868 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	; 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a51      	ldr	r2, [pc, #324]	; (80049b8 <I2Cx_MspInit+0x150>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d14d      	bne.n	8004914 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004878:	4b50      	ldr	r3, [pc, #320]	; (80049bc <I2Cx_MspInit+0x154>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	4a4f      	ldr	r2, [pc, #316]	; (80049bc <I2Cx_MspInit+0x154>)
 800487e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004882:	6313      	str	r3, [r2, #48]	; 0x30
 8004884:	4b4d      	ldr	r3, [pc, #308]	; (80049bc <I2Cx_MspInit+0x154>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004894:	2312      	movs	r3, #18
 8004896:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004898:	2300      	movs	r3, #0
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800489c:	2302      	movs	r3, #2
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80048a0:	2304      	movs	r3, #4
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80048a4:	f107 031c 	add.w	r3, r7, #28
 80048a8:	4619      	mov	r1, r3
 80048aa:	4845      	ldr	r0, [pc, #276]	; (80049c0 <I2Cx_MspInit+0x158>)
 80048ac:	f003 f8b8 	bl	8007a20 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80048b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80048b6:	f107 031c 	add.w	r3, r7, #28
 80048ba:	4619      	mov	r1, r3
 80048bc:	4840      	ldr	r0, [pc, #256]	; (80049c0 <I2Cx_MspInit+0x158>)
 80048be:	f003 f8af 	bl	8007a20 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80048c2:	4b3e      	ldr	r3, [pc, #248]	; (80049bc <I2Cx_MspInit+0x154>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4a3d      	ldr	r2, [pc, #244]	; (80049bc <I2Cx_MspInit+0x154>)
 80048c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048cc:	6413      	str	r3, [r2, #64]	; 0x40
 80048ce:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <I2Cx_MspInit+0x154>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80048da:	4b38      	ldr	r3, [pc, #224]	; (80049bc <I2Cx_MspInit+0x154>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4a37      	ldr	r2, [pc, #220]	; (80049bc <I2Cx_MspInit+0x154>)
 80048e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048e4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80048e6:	4b35      	ldr	r3, [pc, #212]	; (80049bc <I2Cx_MspInit+0x154>)
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	4a34      	ldr	r2, [pc, #208]	; (80049bc <I2Cx_MspInit+0x154>)
 80048ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048f0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80048f2:	2200      	movs	r2, #0
 80048f4:	210f      	movs	r1, #15
 80048f6:	2048      	movs	r0, #72	; 0x48
 80048f8:	f001 ff94 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80048fc:	2048      	movs	r0, #72	; 0x48
 80048fe:	f001 ffad 	bl	800685c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004902:	2200      	movs	r2, #0
 8004904:	210f      	movs	r1, #15
 8004906:	2049      	movs	r0, #73	; 0x49
 8004908:	f001 ff8c 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800490c:	2049      	movs	r0, #73	; 0x49
 800490e:	f001 ffa5 	bl	800685c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004912:	e04d      	b.n	80049b0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004914:	4b29      	ldr	r3, [pc, #164]	; (80049bc <I2Cx_MspInit+0x154>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <I2Cx_MspInit+0x154>)
 800491a:	f043 0302 	orr.w	r3, r3, #2
 800491e:	6313      	str	r3, [r2, #48]	; 0x30
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <I2Cx_MspInit+0x154>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800492c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004930:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004932:	2312      	movs	r3, #18
 8004934:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800493a:	2302      	movs	r3, #2
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800493e:	2304      	movs	r3, #4
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004942:	f107 031c 	add.w	r3, r7, #28
 8004946:	4619      	mov	r1, r3
 8004948:	481e      	ldr	r0, [pc, #120]	; (80049c4 <I2Cx_MspInit+0x15c>)
 800494a:	f003 f869 	bl	8007a20 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800494e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004954:	f107 031c 	add.w	r3, r7, #28
 8004958:	4619      	mov	r1, r3
 800495a:	481a      	ldr	r0, [pc, #104]	; (80049c4 <I2Cx_MspInit+0x15c>)
 800495c:	f003 f860 	bl	8007a20 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004960:	4b16      	ldr	r3, [pc, #88]	; (80049bc <I2Cx_MspInit+0x154>)
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <I2Cx_MspInit+0x154>)
 8004966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800496a:	6413      	str	r3, [r2, #64]	; 0x40
 800496c:	4b13      	ldr	r3, [pc, #76]	; (80049bc <I2Cx_MspInit+0x154>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004978:	4b10      	ldr	r3, [pc, #64]	; (80049bc <I2Cx_MspInit+0x154>)
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4a0f      	ldr	r2, [pc, #60]	; (80049bc <I2Cx_MspInit+0x154>)
 800497e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004982:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <I2Cx_MspInit+0x154>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	4a0c      	ldr	r2, [pc, #48]	; (80049bc <I2Cx_MspInit+0x154>)
 800498a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800498e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004990:	2200      	movs	r2, #0
 8004992:	210f      	movs	r1, #15
 8004994:	201f      	movs	r0, #31
 8004996:	f001 ff45 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800499a:	201f      	movs	r0, #31
 800499c:	f001 ff5e 	bl	800685c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80049a0:	2200      	movs	r2, #0
 80049a2:	210f      	movs	r1, #15
 80049a4:	2020      	movs	r0, #32
 80049a6:	f001 ff3d 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80049aa:	2020      	movs	r0, #32
 80049ac:	f001 ff56 	bl	800685c <HAL_NVIC_EnableIRQ>
}
 80049b0:	bf00      	nop
 80049b2:	3730      	adds	r7, #48	; 0x30
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000d98 	.word	0x20000d98
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40021c00 	.word	0x40021c00
 80049c4:	40020400 	.word	0x40020400

080049c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f005 faeb 	bl	8009fac <HAL_I2C_GetState>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d125      	bne.n	8004a28 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <I2Cx_Init+0x68>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d103      	bne.n	80049ec <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <I2Cx_Init+0x6c>)
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e002      	b.n	80049f2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <I2Cx_Init+0x70>)
 80049f0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a11      	ldr	r2, [pc, #68]	; (8004a3c <I2Cx_Init+0x74>)
 80049f6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff23 	bl	8004868 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f004 ffd4 	bl	80099d0 <HAL_I2C_Init>
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20000d98 	.word	0x20000d98
 8004a34:	40005c00 	.word	0x40005c00
 8004a38:	40005400 	.word	0x40005400
 8004a3c:	40912732 	.word	0x40912732

08004a40 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af04      	add	r7, sp, #16
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	72fb      	strb	r3, [r7, #11]
 8004a52:	460b      	mov	r3, r1
 8004a54:	813b      	strh	r3, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004a5e:	7afb      	ldrb	r3, [r7, #11]
 8004a60:	b299      	uxth	r1, r3
 8004a62:	88f8      	ldrh	r0, [r7, #6]
 8004a64:	893a      	ldrh	r2, [r7, #8]
 8004a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a6a:	9302      	str	r3, [sp, #8]
 8004a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4603      	mov	r3, r0
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f005 f97e 	bl	8009d78 <HAL_I2C_Mem_Read>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d004      	beq.n	8004a90 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004a86:	7afb      	ldrb	r3, [r7, #11]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f832 	bl	8004af4 <I2Cx_Error>
  }
  return status;    
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b08a      	sub	sp, #40	; 0x28
 8004a9e:	af04      	add	r7, sp, #16
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	72fb      	strb	r3, [r7, #11]
 8004aac:	460b      	mov	r3, r1
 8004aae:	813b      	strh	r3, [r7, #8]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004ab8:	7afb      	ldrb	r3, [r7, #11]
 8004aba:	b299      	uxth	r1, r3
 8004abc:	88f8      	ldrh	r0, [r7, #6]
 8004abe:	893a      	ldrh	r2, [r7, #8]
 8004ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ac4:	9302      	str	r3, [sp, #8]
 8004ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	4603      	mov	r3, r0
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f005 f83d 	bl	8009b50 <HAL_I2C_Mem_Write>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004ae0:	7afb      	ldrb	r3, [r7, #11]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f805 	bl	8004af4 <I2Cx_Error>
  }
  return status;
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f004 fff5 	bl	8009af0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff ff5e 	bl	80049c8 <I2Cx_Init>
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004b18:	4802      	ldr	r0, [pc, #8]	; (8004b24 <AUDIO_IO_Init+0x10>)
 8004b1a:	f7ff ff55 	bl	80049c8 <I2Cx_Init>
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000d98 	.word	0x20000d98

08004b28 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
}
 8004b2c:	bf00      	nop
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
 8004b42:	460b      	mov	r3, r1
 8004b44:	80bb      	strh	r3, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004b4e:	89fb      	ldrh	r3, [r7, #14]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004b56:	89fb      	ldrh	r3, [r7, #14]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	b21a      	sxth	r2, r3
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	b21b      	sxth	r3, r3
 8004b62:	4313      	orrs	r3, r2
 8004b64:	b21b      	sxth	r3, r3
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004b6a:	88ba      	ldrh	r2, [r7, #4]
 8004b6c:	79f9      	ldrb	r1, [r7, #7]
 8004b6e:	2302      	movs	r3, #2
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	1cbb      	adds	r3, r7, #2
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2302      	movs	r3, #2
 8004b78:	4803      	ldr	r0, [pc, #12]	; (8004b88 <AUDIO_IO_Write+0x50>)
 8004b7a:	f7ff ff8e 	bl	8004a9a <I2Cx_WriteMultiple>
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000d98 	.word	0x20000d98

08004b8c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	4603      	mov	r3, r0
 8004b94:	460a      	mov	r2, r1
 8004b96:	71fb      	strb	r3, [r7, #7]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	81bb      	strh	r3, [r7, #12]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004ba4:	88ba      	ldrh	r2, [r7, #4]
 8004ba6:	79f9      	ldrb	r1, [r7, #7]
 8004ba8:	2302      	movs	r3, #2
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	480a      	ldr	r0, [pc, #40]	; (8004be0 <AUDIO_IO_Read+0x54>)
 8004bb6:	f7ff ff43 	bl	8004a40 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004bba:	89bb      	ldrh	r3, [r7, #12]
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004bc0:	89bb      	ldrh	r3, [r7, #12]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	b21a      	sxth	r2, r3
 8004bc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	b21b      	sxth	r3, r3
 8004bd0:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8004bd2:	89fb      	ldrh	r3, [r7, #14]
 8004bd4:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8004bd6:	89bb      	ldrh	r3, [r7, #12]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000d98 	.word	0x20000d98

08004be4 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 fab7 	bl	8006160 <HAL_Delay>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8004c04:	480e      	ldr	r0, [pc, #56]	; (8004c40 <HAL_SAI_ErrorCallback+0x44>)
 8004c06:	f008 f9fb 	bl	800d000 <HAL_SAI_GetState>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8004c0e:	480d      	ldr	r0, [pc, #52]	; (8004c44 <HAL_SAI_ErrorCallback+0x48>)
 8004c10:	f008 f9f6 	bl	800d000 <HAL_SAI_GetState>
 8004c14:	4603      	mov	r3, r0
 8004c16:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d002      	beq.n	8004c24 <HAL_SAI_ErrorCallback+0x28>
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b12      	cmp	r3, #18
 8004c22:	d101      	bne.n	8004c28 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8004c24:	f000 f810 	bl	8004c48 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8004c28:	7bbb      	ldrb	r3, [r7, #14]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d002      	beq.n	8004c34 <HAL_SAI_ErrorCallback+0x38>
 8004c2e:	7bbb      	ldrb	r3, [r7, #14]
 8004c30:	2b22      	cmp	r3, #34	; 0x22
 8004c32:	d101      	bne.n	8004c38 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8004c34:	f7fb ff1a 	bl	8000a6c <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000de4 	.word	0x20000de4
 8004c44:	20000e68 	.word	0x20000e68

08004c48 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08c      	sub	sp, #48	; 0x30
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8004c62:	4b63      	ldr	r3, [pc, #396]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	4a62      	ldr	r2, [pc, #392]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c6e:	4b60      	ldr	r3, [pc, #384]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c76:	61bb      	str	r3, [r7, #24]
 8004c78:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8004c7a:	4b5d      	ldr	r3, [pc, #372]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4a5c      	ldr	r2, [pc, #368]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c84:	6313      	str	r3, [r2, #48]	; 0x30
 8004c86:	4b5a      	ldr	r3, [pc, #360]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8004c92:	4b57      	ldr	r3, [pc, #348]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	4a56      	ldr	r2, [pc, #344]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9e:	4b54      	ldr	r3, [pc, #336]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8004caa:	4b51      	ldr	r3, [pc, #324]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	4a50      	ldr	r2, [pc, #320]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb6:	4b4e      	ldr	r3, [pc, #312]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004cd2:	230a      	movs	r3, #10
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8004cd6:	f107 031c 	add.w	r3, r7, #28
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4845      	ldr	r0, [pc, #276]	; (8004df4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004cde:	f002 fe9f 	bl	8007a20 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8004cf2:	230a      	movs	r3, #10
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004cf6:	f107 031c 	add.w	r3, r7, #28
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	483d      	ldr	r0, [pc, #244]	; (8004df4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004cfe:	f002 fe8f 	bl	8007a20 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8004d02:	2340      	movs	r3, #64	; 0x40
 8004d04:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004d06:	2302      	movs	r3, #2
 8004d08:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004d12:	230a      	movs	r3, #10
 8004d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004d16:	f107 031c 	add.w	r3, r7, #28
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4835      	ldr	r0, [pc, #212]	; (8004df4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004d1e:	f002 fe7f 	bl	8007a20 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004d22:	2310      	movs	r3, #16
 8004d24:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004d26:	2302      	movs	r3, #2
 8004d28:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004d32:	230a      	movs	r3, #10
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004d36:	f107 031c 	add.w	r3, r7, #28
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	482d      	ldr	r0, [pc, #180]	; (8004df4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004d3e:	f002 fe6f 	bl	8007a20 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004d42:	4b2b      	ldr	r3, [pc, #172]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	4a2a      	ldr	r2, [pc, #168]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4e:	4b28      	ldr	r3, [pc, #160]	; (8004df0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d138      	bne.n	8004dd6 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004d64:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004d66:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004d6a:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004d6c:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004d6e:	2240      	movs	r2, #64	; 0x40
 8004d70:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004d72:	4b22      	ldr	r3, [pc, #136]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004d78:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d7e:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004d80:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d86:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004d88:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d8e:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d96:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004d98:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004d9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d9e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004da0:	4b16      	ldr	r3, [pc, #88]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004da2:	2204      	movs	r2, #4
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004da8:	2203      	movs	r2, #3
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004db8:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004dba:	4a11      	ldr	r2, [pc, #68]	; (8004e00 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004dbc:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a0e      	ldr	r2, [pc, #56]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004dc2:	66da      	str	r2, [r3, #108]	; 0x6c
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8004dca:	480c      	ldr	r0, [pc, #48]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004dcc:	f001 ff66 	bl	8006c9c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8004dd0:	480a      	ldr	r0, [pc, #40]	; (8004dfc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004dd2:	f001 feb5 	bl	8006b40 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	210e      	movs	r1, #14
 8004dda:	203c      	movs	r0, #60	; 0x3c
 8004ddc:	f001 fd22 	bl	8006824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8004de0:	203c      	movs	r0, #60	; 0x3c
 8004de2:	f001 fd3b 	bl	800685c <HAL_NVIC_EnableIRQ>
}
 8004de6:	bf00      	nop
 8004de8:	3730      	adds	r7, #48	; 0x30
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023800 	.word	0x40023800
 8004df4:	40022000 	.word	0x40022000
 8004df8:	40015c04 	.word	0x40015c04
 8004dfc:	20000eec 	.word	0x20000eec
 8004e00:	40026470 	.word	0x40026470

08004e04 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b0a6      	sub	sp, #152	; 0x98
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004e10:	f107 0314 	add.w	r3, r7, #20
 8004e14:	4618      	mov	r0, r3
 8004e16:	f007 f8bb 	bl	800bf90 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f245 6222 	movw	r2, #22050	; 0x5622
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d112      	bne.n	8004e5e <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004e38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e3c:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004e3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e42:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004e44:	f240 13ad 	movw	r3, #429	; 0x1ad
 8004e48:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8004e4e:	2313      	movs	r3, #19
 8004e50:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004e52:	f107 0314 	add.w	r3, r7, #20
 8004e56:	4618      	mov	r0, r3
 8004e58:	f006 fcac 	bl	800b7b4 <HAL_RCCEx_PeriphCLKConfig>
 8004e5c:	e011      	b.n	8004e82 <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004e5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e62:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004e64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e68:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8004e6a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8004e6e:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8004e70:	2307      	movs	r3, #7
 8004e72:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004e74:	2301      	movs	r3, #1
 8004e76:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004e78:	f107 0314 	add.w	r3, r7, #20
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f006 fc99 	bl	800b7b4 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8004e82:	bf00      	nop
 8004e84:	3798      	adds	r7, #152	; 0x98
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	68f9      	ldr	r1, [r7, #12]
 8004e9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ea0:	f000 f806 	bl	8004eb0 <BSP_AUDIO_IN_InitEx>
 8004ea4:	4603      	mov	r3, r0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b089      	sub	sp, #36	; 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004ec8:	89fb      	ldrh	r3, [r7, #14]
 8004eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ece:	d006      	beq.n	8004ede <BSP_AUDIO_IN_InitEx+0x2e>
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed6:	d002      	beq.n	8004ede <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e046      	b.n	8004f6c <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8004ede:	f000 f9e7 	bl	80052b0 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	4824      	ldr	r0, [pc, #144]	; (8004f78 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004ee8:	f7ff ff8c 	bl	8004e04 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004eec:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004eee:	4a23      	ldr	r2, [pc, #140]	; (8004f7c <BSP_AUDIO_IN_InitEx+0xcc>)
 8004ef0:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8004ef2:	4821      	ldr	r0, [pc, #132]	; (8004f78 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004ef4:	f008 f884 	bl	800d000 <HAL_SAI_GetState>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8004efe:	2100      	movs	r1, #0
 8004f00:	481d      	ldr	r0, [pc, #116]	; (8004f78 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004f02:	f7ff fea9 	bl	8004c58 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8004f06:	2100      	movs	r1, #0
 8004f08:	481b      	ldr	r0, [pc, #108]	; (8004f78 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004f0a:	f000 f869 	bl	8004fe0 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004f0e:	89fb      	ldrh	r3, [r7, #14]
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d102      	bne.n	8004f1c <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8004f16:	230a      	movs	r3, #10
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	e001      	b.n	8004f20 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004f1c:	2305      	movs	r3, #5
 8004f1e:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	2001      	movs	r0, #1
 8004f26:	f000 f90d 	bl	8005144 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2034      	movs	r0, #52	; 0x34
 8004f30:	4798      	blx	r3
 8004f32:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f648 1294 	movw	r2, #35220	; 0x8994
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d109      	bne.n	8004f52 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	2034      	movs	r0, #52	; 0x34
 8004f44:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004f48:	4a0d      	ldr	r2, [pc, #52]	; (8004f80 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004f4a:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e001      	b.n	8004f56 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8004f56:	7ffb      	ldrb	r3, [r7, #31]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d107      	bne.n	8004f6c <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681c      	ldr	r4, [r3, #0]
 8004f62:	89f9      	ldrh	r1, [r7, #14]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2264      	movs	r2, #100	; 0x64
 8004f68:	2034      	movs	r0, #52	; 0x34
 8004f6a:	47a0      	blx	r4
    }
  }
  return ret;
 8004f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd90      	pop	{r4, r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000e68 	.word	0x20000e68
 8004f7c:	40015c24 	.word	0x40015c24
 8004f80:	20000004 	.word	0x20000004
 8004f84:	2000bec4 	.word	0x2000bec4

08004f88 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <BSP_AUDIO_IN_Record+0x2c>)
 8004fa0:	f007 ffa0 	bl	800cee4 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	b2db      	uxtb	r3, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000e68 	.word	0x20000e68

08004fb8 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004fc0:	f7fb fd38 	bl	8000a34 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8004fd4:	f7fb fd12 	bl	80009fc <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8004fea:	4b50      	ldr	r3, [pc, #320]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	4a4f      	ldr	r2, [pc, #316]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004ff0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ff6:	4b4d      	ldr	r3, [pc, #308]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8005002:	4b4a      	ldr	r3, [pc, #296]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	4a49      	ldr	r2, [pc, #292]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800500c:	6313      	str	r3, [r2, #48]	; 0x30
 800500e:	4b47      	ldr	r3, [pc, #284]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800501a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005020:	2302      	movs	r3, #2
 8005022:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005024:	2300      	movs	r3, #0
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005028:	2302      	movs	r3, #2
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 800502c:	230a      	movs	r3, #10
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8005030:	f107 031c 	add.w	r3, r7, #28
 8005034:	4619      	mov	r1, r3
 8005036:	483e      	ldr	r0, [pc, #248]	; (8005130 <BSP_AUDIO_IN_MspInit+0x150>)
 8005038:	f002 fcf2 	bl	8007a20 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 800503c:	4b3b      	ldr	r3, [pc, #236]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	4a3a      	ldr	r2, [pc, #232]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005046:	6313      	str	r3, [r2, #48]	; 0x30
 8005048:	4b38      	ldr	r3, [pc, #224]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8005054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005058:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800505a:	2300      	movs	r3, #0
 800505c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800505e:	2300      	movs	r3, #0
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005062:	2302      	movs	r3, #2
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8005066:	f107 031c 	add.w	r3, r7, #28
 800506a:	4619      	mov	r1, r3
 800506c:	4831      	ldr	r0, [pc, #196]	; (8005134 <BSP_AUDIO_IN_MspInit+0x154>)
 800506e:	f002 fcd7 	bl	8007a20 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8005072:	4b2e      	ldr	r3, [pc, #184]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	4a2d      	ldr	r2, [pc, #180]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800507c:	6313      	str	r3, [r2, #48]	; 0x30
 800507e:	4b2b      	ldr	r3, [pc, #172]	; (800512c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2a      	ldr	r2, [pc, #168]	; (8005138 <BSP_AUDIO_IN_MspInit+0x158>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d137      	bne.n	8005104 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8005094:	4b29      	ldr	r3, [pc, #164]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 8005096:	2200      	movs	r2, #0
 8005098:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800509a:	4b28      	ldr	r3, [pc, #160]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 800509c:	2200      	movs	r2, #0
 800509e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80050a0:	4b26      	ldr	r3, [pc, #152]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80050a6:	4b25      	ldr	r3, [pc, #148]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ac:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80050ae:	4b23      	ldr	r3, [pc, #140]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b4:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80050b6:	4b21      	ldr	r3, [pc, #132]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050bc:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80050be:	4b1f      	ldr	r3, [pc, #124]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c4:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80050c6:	4b1d      	ldr	r3, [pc, #116]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050cc:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80050ce:	4b1b      	ldr	r3, [pc, #108]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80050d4:	4b19      	ldr	r3, [pc, #100]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050d6:	2203      	movs	r2, #3
 80050d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80050da:	4b18      	ldr	r3, [pc, #96]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050dc:	2200      	movs	r2, #0
 80050de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80050e0:	4b16      	ldr	r3, [pc, #88]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050e8:	4a15      	ldr	r2, [pc, #84]	; (8005140 <BSP_AUDIO_IN_MspInit+0x160>)
 80050ea:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050f0:	671a      	str	r2, [r3, #112]	; 0x70
 80050f2:	4a12      	ldr	r2, [pc, #72]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80050f8:	4810      	ldr	r0, [pc, #64]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 80050fa:	f001 fdcf 	bl	8006c9c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80050fe:	480f      	ldr	r0, [pc, #60]	; (800513c <BSP_AUDIO_IN_MspInit+0x15c>)
 8005100:	f001 fd1e 	bl	8006b40 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005104:	2200      	movs	r2, #0
 8005106:	210f      	movs	r1, #15
 8005108:	2046      	movs	r0, #70	; 0x46
 800510a:	f001 fb8b 	bl	8006824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800510e:	2046      	movs	r0, #70	; 0x46
 8005110:	f001 fba4 	bl	800685c <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005114:	2200      	movs	r2, #0
 8005116:	210f      	movs	r1, #15
 8005118:	2028      	movs	r0, #40	; 0x28
 800511a:	f001 fb83 	bl	8006824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800511e:	2028      	movs	r0, #40	; 0x28
 8005120:	f001 fb9c 	bl	800685c <HAL_NVIC_EnableIRQ>
}
 8005124:	bf00      	nop
 8005126:	3730      	adds	r7, #48	; 0x30
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40023800 	.word	0x40023800
 8005130:	40021800 	.word	0x40021800
 8005134:	40021c00 	.word	0x40021c00
 8005138:	40015c24 	.word	0x40015c24
 800513c:	20000f4c 	.word	0x20000f4c
 8005140:	400264b8 	.word	0x400264b8

08005144 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005150:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <SAIx_In_Init+0x15c>)
 8005152:	4a54      	ldr	r2, [pc, #336]	; (80052a4 <SAIx_In_Init+0x160>)
 8005154:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8005156:	4b52      	ldr	r3, [pc, #328]	; (80052a0 <SAIx_In_Init+0x15c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b50      	ldr	r3, [pc, #320]	; (80052a0 <SAIx_In_Init+0x15c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005164:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8005166:	4a4e      	ldr	r2, [pc, #312]	; (80052a0 <SAIx_In_Init+0x15c>)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 800516c:	4a4c      	ldr	r2, [pc, #304]	; (80052a0 <SAIx_In_Init+0x15c>)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005172:	4b4b      	ldr	r3, [pc, #300]	; (80052a0 <SAIx_In_Init+0x15c>)
 8005174:	2200      	movs	r2, #0
 8005176:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8005178:	4b49      	ldr	r3, [pc, #292]	; (80052a0 <SAIx_In_Init+0x15c>)
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800517e:	4b48      	ldr	r3, [pc, #288]	; (80052a0 <SAIx_In_Init+0x15c>)
 8005180:	2280      	movs	r2, #128	; 0x80
 8005182:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005184:	4b46      	ldr	r3, [pc, #280]	; (80052a0 <SAIx_In_Init+0x15c>)
 8005186:	2200      	movs	r2, #0
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800518a:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <SAIx_In_Init+0x15c>)
 800518c:	2201      	movs	r2, #1
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8005190:	4b43      	ldr	r3, [pc, #268]	; (80052a0 <SAIx_In_Init+0x15c>)
 8005192:	2200      	movs	r2, #0
 8005194:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8005196:	4b42      	ldr	r3, [pc, #264]	; (80052a0 <SAIx_In_Init+0x15c>)
 8005198:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800519c:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800519e:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80051a4:	4b3e      	ldr	r3, [pc, #248]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051a6:	2240      	movs	r2, #64	; 0x40
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80051aa:	4b3d      	ldr	r3, [pc, #244]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051ac:	2220      	movs	r2, #32
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80051b0:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051b6:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80051b8:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80051be:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80051c4:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80051c6:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80051cc:	4b34      	ldr	r3, [pc, #208]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80051d2:	4b33      	ldr	r3, [pc, #204]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051d4:	2204      	movs	r2, #4
 80051d6:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80051d8:	4a31      	ldr	r2, [pc, #196]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80051de:	4830      	ldr	r0, [pc, #192]	; (80052a0 <SAIx_In_Init+0x15c>)
 80051e0:	f007 fcd8 	bl	800cb94 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80051e4:	4b30      	ldr	r3, [pc, #192]	; (80052a8 <SAIx_In_Init+0x164>)
 80051e6:	4a31      	ldr	r2, [pc, #196]	; (80052ac <SAIx_In_Init+0x168>)
 80051e8:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80051ea:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <SAIx_In_Init+0x164>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b2d      	ldr	r3, [pc, #180]	; (80052a8 <SAIx_In_Init+0x164>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051f8:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80051fa:	4a2b      	ldr	r2, [pc, #172]	; (80052a8 <SAIx_In_Init+0x164>)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8005200:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <SAIx_In_Init+0x164>)
 8005202:	2203      	movs	r2, #3
 8005204:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005206:	4b28      	ldr	r3, [pc, #160]	; (80052a8 <SAIx_In_Init+0x164>)
 8005208:	2200      	movs	r2, #0
 800520a:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800520c:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <SAIx_In_Init+0x164>)
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8005212:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <SAIx_In_Init+0x164>)
 8005214:	2280      	movs	r2, #128	; 0x80
 8005216:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005218:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <SAIx_In_Init+0x164>)
 800521a:	2200      	movs	r2, #0
 800521c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <SAIx_In_Init+0x164>)
 8005220:	2201      	movs	r2, #1
 8005222:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8005224:	4b20      	ldr	r3, [pc, #128]	; (80052a8 <SAIx_In_Init+0x164>)
 8005226:	2201      	movs	r2, #1
 8005228:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800522a:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <SAIx_In_Init+0x164>)
 800522c:	2200      	movs	r2, #0
 800522e:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <SAIx_In_Init+0x164>)
 8005232:	2201      	movs	r2, #1
 8005234:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8005236:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <SAIx_In_Init+0x164>)
 8005238:	2240      	movs	r2, #64	; 0x40
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800523c:	4b1a      	ldr	r3, [pc, #104]	; (80052a8 <SAIx_In_Init+0x164>)
 800523e:	2220      	movs	r2, #32
 8005240:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005242:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <SAIx_In_Init+0x164>)
 8005244:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005248:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800524a:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <SAIx_In_Init+0x164>)
 800524c:	2200      	movs	r2, #0
 800524e:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005250:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <SAIx_In_Init+0x164>)
 8005252:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005256:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8005258:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <SAIx_In_Init+0x164>)
 800525a:	2200      	movs	r2, #0
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <SAIx_In_Init+0x164>)
 8005260:	2200      	movs	r2, #0
 8005262:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8005264:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <SAIx_In_Init+0x164>)
 8005266:	2204      	movs	r2, #4
 8005268:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800526a:	4a0f      	ldr	r2, [pc, #60]	; (80052a8 <SAIx_In_Init+0x164>)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8005270:	480d      	ldr	r0, [pc, #52]	; (80052a8 <SAIx_In_Init+0x164>)
 8005272:	f007 fc8f 	bl	800cb94 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <SAIx_In_Init+0x15c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <SAIx_In_Init+0x15c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005284:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <SAIx_In_Init+0x164>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <SAIx_In_Init+0x164>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005294:	601a      	str	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000de4 	.word	0x20000de4
 80052a4:	40015c04 	.word	0x40015c04
 80052a8:	20000e68 	.word	0x20000e68
 80052ac:	40015c24 	.word	0x40015c24

080052b0 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80052b4:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <SAIx_In_DeInit+0x24>)
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <SAIx_In_DeInit+0x28>)
 80052b8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <SAIx_In_DeInit+0x24>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <SAIx_In_DeInit+0x24>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052c8:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80052ca:	4802      	ldr	r0, [pc, #8]	; (80052d4 <SAIx_In_DeInit+0x24>)
 80052cc:	f007 fdd4 	bl	800ce78 <HAL_SAI_DeInit>
}
 80052d0:	bf00      	nop
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000e68 	.word	0x20000e68
 80052d8:	40015c24 	.word	0x40015c24

080052dc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80052e0:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <BSP_LCD_Init+0xcc>)
 80052e2:	2228      	movs	r2, #40	; 0x28
 80052e4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80052e6:	4b30      	ldr	r3, [pc, #192]	; (80053a8 <BSP_LCD_Init+0xcc>)
 80052e8:	2209      	movs	r2, #9
 80052ea:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80052ec:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <BSP_LCD_Init+0xcc>)
 80052ee:	2235      	movs	r2, #53	; 0x35
 80052f0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80052f2:	4b2d      	ldr	r3, [pc, #180]	; (80053a8 <BSP_LCD_Init+0xcc>)
 80052f4:	220b      	movs	r2, #11
 80052f6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80052f8:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <BSP_LCD_Init+0xcc>)
 80052fa:	f240 121b 	movw	r2, #283	; 0x11b
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8005300:	4b29      	ldr	r3, [pc, #164]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005302:	f240 2215 	movw	r2, #533	; 0x215
 8005306:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8005308:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <BSP_LCD_Init+0xcc>)
 800530a:	f240 121d 	movw	r2, #285	; 0x11d
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8005310:	4b25      	ldr	r3, [pc, #148]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005312:	f240 2235 	movw	r2, #565	; 0x235
 8005316:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8005318:	2100      	movs	r1, #0
 800531a:	4823      	ldr	r0, [pc, #140]	; (80053a8 <BSP_LCD_Init+0xcc>)
 800531c:	f000 fc1c 	bl	8005b58 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8005320:	4b21      	ldr	r3, [pc, #132]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005322:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8005328:	4b1f      	ldr	r3, [pc, #124]	; (80053a8 <BSP_LCD_Init+0xcc>)
 800532a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800532e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8005330:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8005338:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <BSP_LCD_Init+0xcc>)
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8005340:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005348:	4b17      	ldr	r3, [pc, #92]	; (80053a8 <BSP_LCD_Init+0xcc>)
 800534a:	2200      	movs	r2, #0
 800534c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800534e:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005350:	2200      	movs	r2, #0
 8005352:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8005354:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005356:	2200      	movs	r2, #0
 8005358:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <BSP_LCD_Init+0xcc>)
 800535c:	2200      	movs	r2, #0
 800535e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8005360:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005362:	4a12      	ldr	r2, [pc, #72]	; (80053ac <BSP_LCD_Init+0xd0>)
 8005364:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8005366:	4810      	ldr	r0, [pc, #64]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005368:	f005 fab2 	bl	800a8d0 <HAL_LTDC_GetState>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d103      	bne.n	800537a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8005372:	2100      	movs	r1, #0
 8005374:	480c      	ldr	r0, [pc, #48]	; (80053a8 <BSP_LCD_Init+0xcc>)
 8005376:	f000 fb15 	bl	80059a4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800537a:	480b      	ldr	r0, [pc, #44]	; (80053a8 <BSP_LCD_Init+0xcc>)
 800537c:	f005 f8d8 	bl	800a530 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8005380:	2201      	movs	r2, #1
 8005382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005386:	480a      	ldr	r0, [pc, #40]	; (80053b0 <BSP_LCD_Init+0xd4>)
 8005388:	f002 fdfe 	bl	8007f88 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800538c:	2201      	movs	r2, #1
 800538e:	2108      	movs	r1, #8
 8005390:	4808      	ldr	r0, [pc, #32]	; (80053b4 <BSP_LCD_Init+0xd8>)
 8005392:	f002 fdf9 	bl	8007f88 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8005396:	f000 fcff 	bl	8005d98 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800539a:	4807      	ldr	r0, [pc, #28]	; (80053b8 <BSP_LCD_Init+0xdc>)
 800539c:	f000 f8c8 	bl	8005530 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	2000bec8 	.word	0x2000bec8
 80053ac:	40016800 	.word	0x40016800
 80053b0:	40022000 	.word	0x40022000
 80053b4:	40022800 	.word	0x40022800
 80053b8:	20000038 	.word	0x20000038

080053bc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <BSP_LCD_GetXSize+0x20>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <BSP_LCD_GetXSize+0x24>)
 80053c6:	2134      	movs	r1, #52	; 0x34
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	4413      	add	r3, r2
 80053ce:	3360      	adds	r3, #96	; 0x60
 80053d0:	681b      	ldr	r3, [r3, #0]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	20000fec 	.word	0x20000fec
 80053e0:	2000bec8 	.word	0x2000bec8

080053e4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <BSP_LCD_GetYSize+0x20>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a06      	ldr	r2, [pc, #24]	; (8005408 <BSP_LCD_GetYSize+0x24>)
 80053ee:	2134      	movs	r1, #52	; 0x34
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	4413      	add	r3, r2
 80053f6:	3364      	adds	r3, #100	; 0x64
 80053f8:	681b      	ldr	r3, [r3, #0]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	20000fec 	.word	0x20000fec
 8005408:	2000bec8 	.word	0x2000bec8

0800540c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800540c:	b580      	push	{r7, lr}
 800540e:	b090      	sub	sp, #64	; 0x40
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	6039      	str	r1, [r7, #0]
 8005416:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800541c:	f7ff ffce 	bl	80053bc <BSP_LCD_GetXSize>
 8005420:	4603      	mov	r3, r0
 8005422:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005428:	f7ff ffdc 	bl	80053e4 <BSP_LCD_GetYSize>
 800542c:	4603      	mov	r3, r0
 800542e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005430:	2300      	movs	r3, #0
 8005432:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8005438:	23ff      	movs	r3, #255	; 0xff
 800543a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005452:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005458:	2307      	movs	r3, #7
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800545c:	f7ff ffae 	bl	80053bc <BSP_LCD_GetXSize>
 8005460:	4603      	mov	r3, r0
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8005464:	f7ff ffbe 	bl	80053e4 <BSP_LCD_GetYSize>
 8005468:	4603      	mov	r3, r0
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800546c:	88fa      	ldrh	r2, [r7, #6]
 800546e:	f107 030c 	add.w	r3, r7, #12
 8005472:	4619      	mov	r1, r3
 8005474:	4812      	ldr	r0, [pc, #72]	; (80054c0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8005476:	f005 f9ed 	bl	800a854 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	4911      	ldr	r1, [pc, #68]	; (80054c4 <BSP_LCD_LayerDefaultInit+0xb8>)
 800547e:	4613      	mov	r3, r2
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	3304      	adds	r3, #4
 800548a:	f04f 32ff 	mov.w	r2, #4294967295
 800548e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8005490:	88fa      	ldrh	r2, [r7, #6]
 8005492:	490c      	ldr	r1, [pc, #48]	; (80054c4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8005494:	4613      	mov	r3, r2
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	3308      	adds	r3, #8
 80054a0:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80054a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	4907      	ldr	r1, [pc, #28]	; (80054c4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80054a8:	4613      	mov	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80054b6:	601a      	str	r2, [r3, #0]
}
 80054b8:	bf00      	nop
 80054ba:	3740      	adds	r7, #64	; 0x40
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	2000bec8 	.word	0x2000bec8
 80054c4:	20000ff0 	.word	0x20000ff0
 80054c8:	20000038 	.word	0x20000038

080054cc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80054d4:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <BSP_LCD_SetTextColor+0x28>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4907      	ldr	r1, [pc, #28]	; (80054f8 <BSP_LCD_SetTextColor+0x2c>)
 80054da:	4613      	mov	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	601a      	str	r2, [r3, #0]
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	20000fec 	.word	0x20000fec
 80054f8:	20000ff0 	.word	0x20000ff0

080054fc <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <BSP_LCD_SetBackColor+0x2c>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4908      	ldr	r1, [pc, #32]	; (800552c <BSP_LCD_SetBackColor+0x30>)
 800550a:	4613      	mov	r3, r2
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3304      	adds	r3, #4
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000fec 	.word	0x20000fec
 800552c:	20000ff0 	.word	0x20000ff0

08005530 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8005538:	4b08      	ldr	r3, [pc, #32]	; (800555c <BSP_LCD_SetFont+0x2c>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4908      	ldr	r1, [pc, #32]	; (8005560 <BSP_LCD_SetFont+0x30>)
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	3308      	adds	r3, #8
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000fec 	.word	0x20000fec
 8005560:	20000ff0 	.word	0x20000ff0

08005564 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <BSP_LCD_GetFont+0x24>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4907      	ldr	r1, [pc, #28]	; (800558c <BSP_LCD_GetFont+0x28>)
 800556e:	4613      	mov	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	3308      	adds	r3, #8
 800557a:	681b      	ldr	r3, [r3, #0]
}
 800557c:	4618      	mov	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000fec 	.word	0x20000fec
 800558c:	20000ff0 	.word	0x20000ff0

08005590 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8005590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005592:	b085      	sub	sp, #20
 8005594:	af02      	add	r7, sp, #8
 8005596:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005598:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <BSP_LCD_Clear+0x48>)
 800559a:	681c      	ldr	r4, [r3, #0]
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <BSP_LCD_Clear+0x48>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <BSP_LCD_Clear+0x4c>)
 80055a2:	2134      	movs	r1, #52	; 0x34
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	4413      	add	r3, r2
 80055aa:	335c      	adds	r3, #92	; 0x5c
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461d      	mov	r5, r3
 80055b0:	f7ff ff04 	bl	80053bc <BSP_LCD_GetXSize>
 80055b4:	4606      	mov	r6, r0
 80055b6:	f7ff ff15 	bl	80053e4 <BSP_LCD_GetYSize>
 80055ba:	4602      	mov	r2, r0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	2300      	movs	r3, #0
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	4632      	mov	r2, r6
 80055c8:	4629      	mov	r1, r5
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 fb98 	bl	8005d00 <LL_FillBuffer>
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d8:	20000fec 	.word	0x20000fec
 80055dc:	2000bec8 	.word	0x2000bec8

080055e0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	80fb      	strh	r3, [r7, #6]
 80055ea:	460b      	mov	r3, r1
 80055ec:	80bb      	strh	r3, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80055f2:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <BSP_LCD_DisplayChar+0x80>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	491b      	ldr	r1, [pc, #108]	; (8005664 <BSP_LCD_DisplayChar+0x84>)
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	3308      	adds	r3, #8
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6819      	ldr	r1, [r3, #0]
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800560e:	4b14      	ldr	r3, [pc, #80]	; (8005660 <BSP_LCD_DisplayChar+0x80>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4c14      	ldr	r4, [pc, #80]	; (8005664 <BSP_LCD_DisplayChar+0x84>)
 8005614:	4613      	mov	r3, r2
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4423      	add	r3, r4
 800561e:	3308      	adds	r3, #8
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005624:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005628:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <BSP_LCD_DisplayChar+0x80>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4c0d      	ldr	r4, [pc, #52]	; (8005664 <BSP_LCD_DisplayChar+0x84>)
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4423      	add	r3, r4
 8005638:	3308      	adds	r3, #8
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	889b      	ldrh	r3, [r3, #4]
 800563e:	3307      	adds	r3, #7
 8005640:	2b00      	cmp	r3, #0
 8005642:	da00      	bge.n	8005646 <BSP_LCD_DisplayChar+0x66>
 8005644:	3307      	adds	r3, #7
 8005646:	10db      	asrs	r3, r3, #3
 8005648:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800564c:	18ca      	adds	r2, r1, r3
 800564e:	88b9      	ldrh	r1, [r7, #4]
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fa9c 	bl	8005b90 <DrawChar>
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	bd90      	pop	{r4, r7, pc}
 8005660:	20000fec 	.word	0x20000fec
 8005664:	20000ff0 	.word	0x20000ff0

08005668 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8005668:	b5b0      	push	{r4, r5, r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60ba      	str	r2, [r7, #8]
 8005670:	461a      	mov	r2, r3
 8005672:	4603      	mov	r3, r0
 8005674:	81fb      	strh	r3, [r7, #14]
 8005676:	460b      	mov	r3, r1
 8005678:	81bb      	strh	r3, [r7, #12]
 800567a:	4613      	mov	r3, r2
 800567c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800567e:	2301      	movs	r3, #1
 8005680:	83fb      	strh	r3, [r7, #30]
 8005682:	2300      	movs	r3, #0
 8005684:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8005686:	2300      	movs	r3, #0
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8005692:	e002      	b.n	800569a <BSP_LCD_DisplayStringAt+0x32>
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3301      	adds	r3, #1
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	617a      	str	r2, [r7, #20]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f6      	bne.n	8005694 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80056a6:	f7ff fe89 	bl	80053bc <BSP_LCD_GetXSize>
 80056aa:	4b4f      	ldr	r3, [pc, #316]	; (80057e8 <BSP_LCD_DisplayStringAt+0x180>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	494f      	ldr	r1, [pc, #316]	; (80057ec <BSP_LCD_DisplayStringAt+0x184>)
 80056b0:	4613      	mov	r3, r2
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	3308      	adds	r3, #8
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	889b      	ldrh	r3, [r3, #4]
 80056c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d01c      	beq.n	8005706 <BSP_LCD_DisplayStringAt+0x9e>
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d017      	beq.n	8005700 <BSP_LCD_DisplayStringAt+0x98>
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d12e      	bne.n	8005732 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	1ad1      	subs	r1, r2, r3
 80056da:	4b43      	ldr	r3, [pc, #268]	; (80057e8 <BSP_LCD_DisplayStringAt+0x180>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4843      	ldr	r0, [pc, #268]	; (80057ec <BSP_LCD_DisplayStringAt+0x184>)
 80056e0:	4613      	mov	r3, r2
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4403      	add	r3, r0
 80056ea:	3308      	adds	r3, #8
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	889b      	ldrh	r3, [r3, #4]
 80056f0:	fb03 f301 	mul.w	r3, r3, r1
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	89fb      	ldrh	r3, [r7, #14]
 80056fa:	4413      	add	r3, r2
 80056fc:	83fb      	strh	r3, [r7, #30]
      break;
 80056fe:	e01b      	b.n	8005738 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8005700:	89fb      	ldrh	r3, [r7, #14]
 8005702:	83fb      	strh	r3, [r7, #30]
      break;
 8005704:	e018      	b.n	8005738 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	b299      	uxth	r1, r3
 800570e:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <BSP_LCD_DisplayStringAt+0x180>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4836      	ldr	r0, [pc, #216]	; (80057ec <BSP_LCD_DisplayStringAt+0x184>)
 8005714:	4613      	mov	r3, r2
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4403      	add	r3, r0
 800571e:	3308      	adds	r3, #8
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	889b      	ldrh	r3, [r3, #4]
 8005724:	fb11 f303 	smulbb	r3, r1, r3
 8005728:	b29a      	uxth	r2, r3
 800572a:	89fb      	ldrh	r3, [r7, #14]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	83fb      	strh	r3, [r7, #30]
      break;
 8005730:	e002      	b.n	8005738 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8005732:	89fb      	ldrh	r3, [r7, #14]
 8005734:	83fb      	strh	r3, [r7, #30]
      break;
 8005736:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8005738:	8bfb      	ldrh	r3, [r7, #30]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <BSP_LCD_DisplayStringAt+0xde>
 800573e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005742:	2b00      	cmp	r3, #0
 8005744:	da1d      	bge.n	8005782 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8005746:	2301      	movs	r3, #1
 8005748:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800574a:	e01a      	b.n	8005782 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	781a      	ldrb	r2, [r3, #0]
 8005750:	89b9      	ldrh	r1, [r7, #12]
 8005752:	8bfb      	ldrh	r3, [r7, #30]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff ff43 	bl	80055e0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800575a:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <BSP_LCD_DisplayStringAt+0x180>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4923      	ldr	r1, [pc, #140]	; (80057ec <BSP_LCD_DisplayStringAt+0x184>)
 8005760:	4613      	mov	r3, r2
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	3308      	adds	r3, #8
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	889a      	ldrh	r2, [r3, #4]
 8005770:	8bfb      	ldrh	r3, [r7, #30]
 8005772:	4413      	add	r3, r2
 8005774:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3301      	adds	r3, #1
 800577a:	60bb      	str	r3, [r7, #8]
    i++;
 800577c:	8bbb      	ldrh	r3, [r7, #28]
 800577e:	3301      	adds	r3, #1
 8005780:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	bf14      	ite	ne
 800578a:	2301      	movne	r3, #1
 800578c:	2300      	moveq	r3, #0
 800578e:	b2dc      	uxtb	r4, r3
 8005790:	f7ff fe14 	bl	80053bc <BSP_LCD_GetXSize>
 8005794:	4605      	mov	r5, r0
 8005796:	8bb9      	ldrh	r1, [r7, #28]
 8005798:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <BSP_LCD_DisplayStringAt+0x180>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4813      	ldr	r0, [pc, #76]	; (80057ec <BSP_LCD_DisplayStringAt+0x184>)
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4403      	add	r3, r0
 80057a8:	3308      	adds	r3, #8
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	889b      	ldrh	r3, [r3, #4]
 80057ae:	fb03 f301 	mul.w	r3, r3, r1
 80057b2:	1aeb      	subs	r3, r5, r3
 80057b4:	b299      	uxth	r1, r3
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <BSP_LCD_DisplayStringAt+0x180>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	480c      	ldr	r0, [pc, #48]	; (80057ec <BSP_LCD_DisplayStringAt+0x184>)
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4403      	add	r3, r0
 80057c6:	3308      	adds	r3, #8
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	889b      	ldrh	r3, [r3, #4]
 80057cc:	4299      	cmp	r1, r3
 80057ce:	bf2c      	ite	cs
 80057d0:	2301      	movcs	r3, #1
 80057d2:	2300      	movcc	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	4023      	ands	r3, r4
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1b6      	bne.n	800574c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80057de:	bf00      	nop
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bdb0      	pop	{r4, r5, r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000fec 	.word	0x20000fec
 80057ec:	20000ff0 	.word	0x20000ff0

080057f0 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	6039      	str	r1, [r7, #0]
 80057fa:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80057fc:	f7ff feb2 	bl	8005564 <BSP_LCD_GetFont>
 8005800:	4603      	mov	r3, r0
 8005802:	88db      	ldrh	r3, [r3, #6]
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	fb12 f303 	smulbb	r3, r2, r3
 800580a:	b299      	uxth	r1, r3
 800580c:	2303      	movs	r3, #3
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	2000      	movs	r0, #0
 8005812:	f7ff ff29 	bl	8005668 <BSP_LCD_DisplayStringAt>
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005820:	b5b0      	push	{r4, r5, r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	603a      	str	r2, [r7, #0]
 800582a:	80fb      	strh	r3, [r7, #6]
 800582c:	460b      	mov	r3, r1
 800582e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005830:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <BSP_LCD_DrawPixel+0x88>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1d      	ldr	r2, [pc, #116]	; (80058ac <BSP_LCD_DrawPixel+0x8c>)
 8005836:	2134      	movs	r1, #52	; 0x34
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	3348      	adds	r3, #72	; 0x48
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d116      	bne.n	8005874 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8005846:	4b18      	ldr	r3, [pc, #96]	; (80058a8 <BSP_LCD_DrawPixel+0x88>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a18      	ldr	r2, [pc, #96]	; (80058ac <BSP_LCD_DrawPixel+0x8c>)
 800584c:	2134      	movs	r1, #52	; 0x34
 800584e:	fb01 f303 	mul.w	r3, r1, r3
 8005852:	4413      	add	r3, r2
 8005854:	335c      	adds	r3, #92	; 0x5c
 8005856:	681c      	ldr	r4, [r3, #0]
 8005858:	88bd      	ldrh	r5, [r7, #4]
 800585a:	f7ff fdaf 	bl	80053bc <BSP_LCD_GetXSize>
 800585e:	4603      	mov	r3, r0
 8005860:	fb03 f205 	mul.w	r2, r3, r5
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	4413      	add	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4423      	add	r3, r4
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	b292      	uxth	r2, r2
 8005870:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8005872:	e015      	b.n	80058a0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <BSP_LCD_DrawPixel+0x88>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <BSP_LCD_DrawPixel+0x8c>)
 800587a:	2134      	movs	r1, #52	; 0x34
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	335c      	adds	r3, #92	; 0x5c
 8005884:	681c      	ldr	r4, [r3, #0]
 8005886:	88bd      	ldrh	r5, [r7, #4]
 8005888:	f7ff fd98 	bl	80053bc <BSP_LCD_GetXSize>
 800588c:	4603      	mov	r3, r0
 800588e:	fb03 f205 	mul.w	r2, r3, r5
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4423      	add	r3, r4
 800589a:	461a      	mov	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	6013      	str	r3, [r2, #0]
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bdb0      	pop	{r4, r5, r7, pc}
 80058a8:	20000fec 	.word	0x20000fec
 80058ac:	2000bec8 	.word	0x2000bec8

080058b0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80058b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af02      	add	r7, sp, #8
 80058b8:	4604      	mov	r4, r0
 80058ba:	4608      	mov	r0, r1
 80058bc:	4611      	mov	r1, r2
 80058be:	461a      	mov	r2, r3
 80058c0:	4623      	mov	r3, r4
 80058c2:	80fb      	strh	r3, [r7, #6]
 80058c4:	4603      	mov	r3, r0
 80058c6:	80bb      	strh	r3, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	807b      	strh	r3, [r7, #2]
 80058cc:	4613      	mov	r3, r2
 80058ce:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80058d4:	4b30      	ldr	r3, [pc, #192]	; (8005998 <BSP_LCD_FillRect+0xe8>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	4930      	ldr	r1, [pc, #192]	; (800599c <BSP_LCD_FillRect+0xec>)
 80058da:	4613      	mov	r3, r2
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff fdf0 	bl	80054cc <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80058ec:	4b2a      	ldr	r3, [pc, #168]	; (8005998 <BSP_LCD_FillRect+0xe8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <BSP_LCD_FillRect+0xf0>)
 80058f2:	2134      	movs	r1, #52	; 0x34
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	4413      	add	r3, r2
 80058fa:	3348      	adds	r3, #72	; 0x48
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d114      	bne.n	800592c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005902:	4b25      	ldr	r3, [pc, #148]	; (8005998 <BSP_LCD_FillRect+0xe8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <BSP_LCD_FillRect+0xf0>)
 8005908:	2134      	movs	r1, #52	; 0x34
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	4413      	add	r3, r2
 8005910:	335c      	adds	r3, #92	; 0x5c
 8005912:	681c      	ldr	r4, [r3, #0]
 8005914:	f7ff fd52 	bl	80053bc <BSP_LCD_GetXSize>
 8005918:	4602      	mov	r2, r0
 800591a:	88bb      	ldrh	r3, [r7, #4]
 800591c:	fb03 f202 	mul.w	r2, r3, r2
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	4413      	add	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	4423      	add	r3, r4
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	e013      	b.n	8005954 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <BSP_LCD_FillRect+0xe8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <BSP_LCD_FillRect+0xf0>)
 8005932:	2134      	movs	r1, #52	; 0x34
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	4413      	add	r3, r2
 800593a:	335c      	adds	r3, #92	; 0x5c
 800593c:	681c      	ldr	r4, [r3, #0]
 800593e:	f7ff fd3d 	bl	80053bc <BSP_LCD_GetXSize>
 8005942:	4602      	mov	r2, r0
 8005944:	88bb      	ldrh	r3, [r7, #4]
 8005946:	fb03 f202 	mul.w	r2, r3, r2
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4423      	add	r3, r4
 8005952:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8005954:	4b10      	ldr	r3, [pc, #64]	; (8005998 <BSP_LCD_FillRect+0xe8>)
 8005956:	681c      	ldr	r4, [r3, #0]
 8005958:	68fd      	ldr	r5, [r7, #12]
 800595a:	887e      	ldrh	r6, [r7, #2]
 800595c:	f8b7 8000 	ldrh.w	r8, [r7]
 8005960:	f7ff fd2c 	bl	80053bc <BSP_LCD_GetXSize>
 8005964:	4602      	mov	r2, r0
 8005966:	887b      	ldrh	r3, [r7, #2]
 8005968:	1ad1      	subs	r1, r2, r3
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <BSP_LCD_FillRect+0xe8>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	480b      	ldr	r0, [pc, #44]	; (800599c <BSP_LCD_FillRect+0xec>)
 8005970:	4613      	mov	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4403      	add	r3, r0
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	9100      	str	r1, [sp, #0]
 8005980:	4643      	mov	r3, r8
 8005982:	4632      	mov	r2, r6
 8005984:	4629      	mov	r1, r5
 8005986:	4620      	mov	r0, r4
 8005988:	f000 f9ba 	bl	8005d00 <LL_FillBuffer>
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005996:	bf00      	nop
 8005998:	20000fec 	.word	0x20000fec
 800599c:	20000ff0 	.word	0x20000ff0
 80059a0:	2000bec8 	.word	0x2000bec8

080059a4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b090      	sub	sp, #64	; 0x40
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80059ae:	4b64      	ldr	r3, [pc, #400]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	4a63      	ldr	r2, [pc, #396]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b8:	6453      	str	r3, [r2, #68]	; 0x44
 80059ba:	4b61      	ldr	r3, [pc, #388]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80059c6:	4b5e      	ldr	r3, [pc, #376]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	4a5d      	ldr	r2, [pc, #372]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059d0:	6313      	str	r3, [r2, #48]	; 0x30
 80059d2:	4b5b      	ldr	r3, [pc, #364]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80059de:	4b58      	ldr	r3, [pc, #352]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	4a57      	ldr	r2, [pc, #348]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059e4:	f043 0310 	orr.w	r3, r3, #16
 80059e8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ea:	4b55      	ldr	r3, [pc, #340]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80059f6:	4b52      	ldr	r3, [pc, #328]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	4a51      	ldr	r2, [pc, #324]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 80059fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a00:	6313      	str	r3, [r2, #48]	; 0x30
 8005a02:	4b4f      	ldr	r3, [pc, #316]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005a0e:	4b4c      	ldr	r3, [pc, #304]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	4a4b      	ldr	r2, [pc, #300]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a18:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1a:	4b49      	ldr	r3, [pc, #292]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005a26:	4b46      	ldr	r3, [pc, #280]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	4a45      	ldr	r2, [pc, #276]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a30:	6313      	str	r3, [r2, #48]	; 0x30
 8005a32:	4b43      	ldr	r3, [pc, #268]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005a3e:	4b40      	ldr	r3, [pc, #256]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	4a3f      	ldr	r2, [pc, #252]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a48:	6313      	str	r3, [r2, #48]	; 0x30
 8005a4a:	4b3d      	ldr	r3, [pc, #244]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8005a56:	4b3a      	ldr	r3, [pc, #232]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	4a39      	ldr	r2, [pc, #228]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a60:	6313      	str	r3, [r2, #48]	; 0x30
 8005a62:	4b37      	ldr	r3, [pc, #220]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005a6e:	4b34      	ldr	r3, [pc, #208]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	4a33      	ldr	r2, [pc, #204]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a78:	6313      	str	r3, [r2, #48]	; 0x30
 8005a7a:	4b31      	ldr	r3, [pc, #196]	; (8005b40 <BSP_LCD_MspInit+0x19c>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8005a86:	2310      	movs	r3, #16
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005a92:	2302      	movs	r3, #2
 8005a94:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005a96:	230e      	movs	r3, #14
 8005a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4828      	ldr	r0, [pc, #160]	; (8005b44 <BSP_LCD_MspInit+0x1a0>)
 8005aa2:	f001 ffbd 	bl	8007a20 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005aac:	2302      	movs	r3, #2
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005ab0:	2309      	movs	r3, #9
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4823      	ldr	r0, [pc, #140]	; (8005b48 <BSP_LCD_MspInit+0x1a4>)
 8005abc:	f001 ffb0 	bl	8007a20 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005ac0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005aca:	230e      	movs	r3, #14
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	481d      	ldr	r0, [pc, #116]	; (8005b4c <BSP_LCD_MspInit+0x1a8>)
 8005ad6:	f001 ffa3 	bl	8007a20 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8005ada:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005ae4:	230e      	movs	r3, #14
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005aec:	4619      	mov	r1, r3
 8005aee:	4818      	ldr	r0, [pc, #96]	; (8005b50 <BSP_LCD_MspInit+0x1ac>)
 8005af0:	f001 ff96 	bl	8007a20 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8005af4:	23f7      	movs	r3, #247	; 0xf7
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005af8:	2302      	movs	r3, #2
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005afc:	230e      	movs	r3, #14
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b04:	4619      	mov	r1, r3
 8005b06:	4813      	ldr	r0, [pc, #76]	; (8005b54 <BSP_LCD_MspInit+0x1b0>)
 8005b08:	f001 ff8a 	bl	8007a20 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8005b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005b12:	2301      	movs	r3, #1
 8005b14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8005b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	480b      	ldr	r0, [pc, #44]	; (8005b4c <BSP_LCD_MspInit+0x1a8>)
 8005b1e:	f001 ff7f 	bl	8007a20 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8005b22:	2308      	movs	r3, #8
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005b26:	2301      	movs	r3, #1
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4808      	ldr	r0, [pc, #32]	; (8005b54 <BSP_LCD_MspInit+0x1b0>)
 8005b32:	f001 ff75 	bl	8007a20 <HAL_GPIO_Init>
}
 8005b36:	bf00      	nop
 8005b38:	3740      	adds	r7, #64	; 0x40
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40023800 	.word	0x40023800
 8005b44:	40021000 	.word	0x40021000
 8005b48:	40021800 	.word	0x40021800
 8005b4c:	40022000 	.word	0x40022000
 8005b50:	40022400 	.word	0x40022400
 8005b54:	40022800 	.word	0x40022800

08005b58 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <BSP_LCD_ClockConfig+0x34>)
 8005b64:	2208      	movs	r2, #8
 8005b66:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005b68:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <BSP_LCD_ClockConfig+0x34>)
 8005b6a:	22c0      	movs	r2, #192	; 0xc0
 8005b6c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <BSP_LCD_ClockConfig+0x34>)
 8005b70:	2205      	movs	r2, #5
 8005b72:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005b74:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <BSP_LCD_ClockConfig+0x34>)
 8005b76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005b7c:	4803      	ldr	r0, [pc, #12]	; (8005b8c <BSP_LCD_ClockConfig+0x34>)
 8005b7e:	f005 fe19 	bl	800b7b4 <HAL_RCCEx_PeriphCLKConfig>
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20001008 	.word	0x20001008

08005b90 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	603a      	str	r2, [r7, #0]
 8005b9a:	80fb      	strh	r3, [r7, #6]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005ba8:	4b53      	ldr	r3, [pc, #332]	; (8005cf8 <DrawChar+0x168>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4953      	ldr	r1, [pc, #332]	; (8005cfc <DrawChar+0x16c>)
 8005bae:	4613      	mov	r3, r2
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	3308      	adds	r3, #8
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	88db      	ldrh	r3, [r3, #6]
 8005bbe:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005bc0:	4b4d      	ldr	r3, [pc, #308]	; (8005cf8 <DrawChar+0x168>)
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	494d      	ldr	r1, [pc, #308]	; (8005cfc <DrawChar+0x16c>)
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	889b      	ldrh	r3, [r3, #4]
 8005bd6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8005bd8:	8a3b      	ldrh	r3, [r7, #16]
 8005bda:	3307      	adds	r3, #7
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	da00      	bge.n	8005be2 <DrawChar+0x52>
 8005be0:	3307      	adds	r3, #7
 8005be2:	10db      	asrs	r3, r3, #3
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	8a3b      	ldrh	r3, [r7, #16]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	e076      	b.n	8005ce6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005bf8:	8a3b      	ldrh	r3, [r7, #16]
 8005bfa:	3307      	adds	r3, #7
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	da00      	bge.n	8005c02 <DrawChar+0x72>
 8005c00:	3307      	adds	r3, #7
 8005c02:	10db      	asrs	r3, r3, #3
 8005c04:	461a      	mov	r2, r3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	fb03 f302 	mul.w	r3, r3, r2
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	4413      	add	r3, r2
 8005c10:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8005c12:	8a3b      	ldrh	r3, [r7, #16]
 8005c14:	3307      	adds	r3, #7
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da00      	bge.n	8005c1c <DrawChar+0x8c>
 8005c1a:	3307      	adds	r3, #7
 8005c1c:	10db      	asrs	r3, r3, #3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d002      	beq.n	8005c28 <DrawChar+0x98>
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d004      	beq.n	8005c30 <DrawChar+0xa0>
 8005c26:	e00c      	b.n	8005c42 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	617b      	str	r3, [r7, #20]
      break;
 8005c2e:	e016      	b.n	8005c5e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	3201      	adds	r2, #1
 8005c3a:	7812      	ldrb	r2, [r2, #0]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
      break;
 8005c40:	e00d      	b.n	8005c5e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	041a      	lsls	r2, r3, #16
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	4313      	orrs	r3, r2
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	3202      	adds	r2, #2
 8005c56:	7812      	ldrb	r2, [r2, #0]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
      break;
 8005c5c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	e036      	b.n	8005cd2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005c64:	8a3a      	ldrh	r2, [r7, #16]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	1ad2      	subs	r2, r2, r3
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	2201      	movs	r2, #1
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d012      	beq.n	8005ca6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	4413      	add	r3, r2
 8005c88:	b298      	uxth	r0, r3
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <DrawChar+0x168>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	491b      	ldr	r1, [pc, #108]	; (8005cfc <DrawChar+0x16c>)
 8005c90:	4613      	mov	r3, r2
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	88bb      	ldrh	r3, [r7, #4]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f7ff fdbe 	bl	8005820 <BSP_LCD_DrawPixel>
 8005ca4:	e012      	b.n	8005ccc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	4413      	add	r3, r2
 8005cae:	b298      	uxth	r0, r3
 8005cb0:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <DrawChar+0x168>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4911      	ldr	r1, [pc, #68]	; (8005cfc <DrawChar+0x16c>)
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	88bb      	ldrh	r3, [r7, #4]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f7ff fdaa 	bl	8005820 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	8a3b      	ldrh	r3, [r7, #16]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3c4      	bcc.n	8005c64 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8005cda:	88bb      	ldrh	r3, [r7, #4]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	8a7b      	ldrh	r3, [r7, #18]
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d384      	bcc.n	8005bf8 <DrawChar+0x68>
  }
}
 8005cee:	bf00      	nop
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000fec 	.word	0x20000fec
 8005cfc:	20000ff0 	.word	0x20000ff0

08005d00 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8005d0e:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <LL_FillBuffer+0x88>)
 8005d10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005d14:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005d16:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <LL_FillBuffer+0x8c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1d      	ldr	r2, [pc, #116]	; (8005d90 <LL_FillBuffer+0x90>)
 8005d1c:	2134      	movs	r1, #52	; 0x34
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	3348      	adds	r3, #72	; 0x48
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d103      	bne.n	8005d34 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005d2c:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <LL_FillBuffer+0x88>)
 8005d2e:	2202      	movs	r2, #2
 8005d30:	609a      	str	r2, [r3, #8]
 8005d32:	e002      	b.n	8005d3a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005d34:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <LL_FillBuffer+0x88>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8005d3a:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <LL_FillBuffer+0x88>)
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <LL_FillBuffer+0x88>)
 8005d42:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <LL_FillBuffer+0x94>)
 8005d44:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8005d46:	4810      	ldr	r0, [pc, #64]	; (8005d88 <LL_FillBuffer+0x88>)
 8005d48:	f001 face 	bl	80072e8 <HAL_DMA2D_Init>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d115      	bne.n	8005d7e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	480c      	ldr	r0, [pc, #48]	; (8005d88 <LL_FillBuffer+0x88>)
 8005d56:	f001 fd35 	bl	80077c4 <HAL_DMA2D_ConfigLayer>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10e      	bne.n	8005d7e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69f9      	ldr	r1, [r7, #28]
 8005d6a:	4807      	ldr	r0, [pc, #28]	; (8005d88 <LL_FillBuffer+0x88>)
 8005d6c:	f001 fb06 	bl	800737c <HAL_DMA2D_Start>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8005d76:	210a      	movs	r1, #10
 8005d78:	4803      	ldr	r0, [pc, #12]	; (8005d88 <LL_FillBuffer+0x88>)
 8005d7a:	f001 fb2a 	bl	80073d2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005d7e:	bf00      	nop
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000fac 	.word	0x20000fac
 8005d8c:	20000fec 	.word	0x20000fec
 8005d90:	2000bec8 	.word	0x2000bec8
 8005d94:	4002b000 	.word	0x4002b000

08005d98 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005d9c:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005d9e:	4a2a      	ldr	r2, [pc, #168]	; (8005e48 <BSP_SDRAM_Init+0xb0>)
 8005da0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005da2:	4b2a      	ldr	r3, [pc, #168]	; (8005e4c <BSP_SDRAM_Init+0xb4>)
 8005da4:	2202      	movs	r2, #2
 8005da6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005da8:	4b28      	ldr	r3, [pc, #160]	; (8005e4c <BSP_SDRAM_Init+0xb4>)
 8005daa:	2207      	movs	r2, #7
 8005dac:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005dae:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <BSP_SDRAM_Init+0xb4>)
 8005db0:	2204      	movs	r2, #4
 8005db2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005db4:	4b25      	ldr	r3, [pc, #148]	; (8005e4c <BSP_SDRAM_Init+0xb4>)
 8005db6:	2207      	movs	r2, #7
 8005db8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8005dba:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <BSP_SDRAM_Init+0xb4>)
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005dc0:	4b22      	ldr	r3, [pc, #136]	; (8005e4c <BSP_SDRAM_Init+0xb4>)
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8005dc6:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <BSP_SDRAM_Init+0xb4>)
 8005dc8:	2202      	movs	r2, #2
 8005dca:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005dda:	2204      	movs	r2, #4
 8005ddc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005dde:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005de0:	2210      	movs	r2, #16
 8005de2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005de4:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005de6:	2240      	movs	r2, #64	; 0x40
 8005de8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8005dea:	4b16      	ldr	r3, [pc, #88]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005df0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005df2:	4b14      	ldr	r3, [pc, #80]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005df8:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dfe:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005e00:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005e02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005e08:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005e0e:	2100      	movs	r1, #0
 8005e10:	480c      	ldr	r0, [pc, #48]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005e12:	f000 f87f 	bl	8005f14 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8005e16:	490d      	ldr	r1, [pc, #52]	; (8005e4c <BSP_SDRAM_Init+0xb4>)
 8005e18:	480a      	ldr	r0, [pc, #40]	; (8005e44 <BSP_SDRAM_Init+0xac>)
 8005e1a:	f007 f9dc 	bl	800d1d6 <HAL_SDRAM_Init>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <BSP_SDRAM_Init+0xb8>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	e002      	b.n	8005e32 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005e2c:	4b08      	ldr	r3, [pc, #32]	; (8005e50 <BSP_SDRAM_Init+0xb8>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005e32:	f240 6003 	movw	r0, #1539	; 0x603
 8005e36:	f000 f80d 	bl	8005e54 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005e3a:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <BSP_SDRAM_Init+0xb8>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000bf70 	.word	0x2000bf70
 8005e48:	a0000140 	.word	0xa0000140
 8005e4c:	2000108c 	.word	0x2000108c
 8005e50:	20000050 	.word	0x20000050

08005e54 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005e60:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005e66:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e68:	2210      	movs	r2, #16
 8005e6a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005e6c:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005e72:	4b26      	ldr	r3, [pc, #152]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e7c:	4923      	ldr	r1, [pc, #140]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e7e:	4824      	ldr	r0, [pc, #144]	; (8005f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005e80:	f007 f9dd 	bl	800d23e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005e84:	2001      	movs	r0, #1
 8005e86:	f000 f96b 	bl	8006160 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005e8a:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005e90:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e92:	2210      	movs	r2, #16
 8005e94:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005e96:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005e9c:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ea6:	4919      	ldr	r1, [pc, #100]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ea8:	4819      	ldr	r0, [pc, #100]	; (8005f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005eaa:	f007 f9c8 	bl	800d23e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005eb4:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005eba:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005ec0:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eca:	4910      	ldr	r1, [pc, #64]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ecc:	4810      	ldr	r0, [pc, #64]	; (8005f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005ece:	f007 f9b6 	bl	800d23e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005ed2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005ed6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005eda:	2204      	movs	r2, #4
 8005edc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005ede:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ee0:	2210      	movs	r2, #16
 8005ee2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005ee4:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4a07      	ldr	r2, [pc, #28]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005eee:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ef4:	4905      	ldr	r1, [pc, #20]	; (8005f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ef6:	4806      	ldr	r0, [pc, #24]	; (8005f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005ef8:	f007 f9a1 	bl	800d23e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	4804      	ldr	r0, [pc, #16]	; (8005f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005f00:	f007 f9c8 	bl	800d294 <HAL_SDRAM_ProgramRefreshRate>
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	200010a8 	.word	0x200010a8
 8005f10:	2000bf70 	.word	0x2000bf70

08005f14 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b090      	sub	sp, #64	; 0x40
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f1e:	4b70      	ldr	r3, [pc, #448]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	4a6f      	ldr	r2, [pc, #444]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	6393      	str	r3, [r2, #56]	; 0x38
 8005f2a:	4b6d      	ldr	r3, [pc, #436]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005f36:	4b6a      	ldr	r3, [pc, #424]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	4a69      	ldr	r2, [pc, #420]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f40:	6313      	str	r3, [r2, #48]	; 0x30
 8005f42:	4b67      	ldr	r3, [pc, #412]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f4e:	4b64      	ldr	r3, [pc, #400]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	4a63      	ldr	r2, [pc, #396]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f54:	f043 0304 	orr.w	r3, r3, #4
 8005f58:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5a:	4b61      	ldr	r3, [pc, #388]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	623b      	str	r3, [r7, #32]
 8005f64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f66:	4b5e      	ldr	r3, [pc, #376]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	4a5d      	ldr	r2, [pc, #372]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f6c:	f043 0308 	orr.w	r3, r3, #8
 8005f70:	6313      	str	r3, [r2, #48]	; 0x30
 8005f72:	4b5b      	ldr	r3, [pc, #364]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f7e:	4b58      	ldr	r3, [pc, #352]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	4a57      	ldr	r2, [pc, #348]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f84:	f043 0310 	orr.w	r3, r3, #16
 8005f88:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8a:	4b55      	ldr	r3, [pc, #340]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f96:	4b52      	ldr	r3, [pc, #328]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	4a51      	ldr	r2, [pc, #324]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005f9c:	f043 0320 	orr.w	r3, r3, #32
 8005fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fa2:	4b4f      	ldr	r3, [pc, #316]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005fae:	4b4c      	ldr	r3, [pc, #304]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	4a4b      	ldr	r2, [pc, #300]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8005fba:	4b49      	ldr	r3, [pc, #292]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005fc6:	4b46      	ldr	r3, [pc, #280]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	4a45      	ldr	r2, [pc, #276]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd2:	4b43      	ldr	r3, [pc, #268]	; (80060e0 <BSP_SDRAM_MspInit+0x1cc>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005fea:	230c      	movs	r3, #12
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005fee:	2308      	movs	r3, #8
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	483a      	ldr	r0, [pc, #232]	; (80060e4 <BSP_SDRAM_MspInit+0x1d0>)
 8005ffa:	f001 fd11 	bl	8007a20 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005ffe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006008:	4619      	mov	r1, r3
 800600a:	4837      	ldr	r0, [pc, #220]	; (80060e8 <BSP_SDRAM_MspInit+0x1d4>)
 800600c:	f001 fd08 	bl	8007a20 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006010:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800601a:	4619      	mov	r1, r3
 800601c:	4833      	ldr	r0, [pc, #204]	; (80060ec <BSP_SDRAM_MspInit+0x1d8>)
 800601e:	f001 fcff 	bl	8007a20 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006022:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006026:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800602c:	4619      	mov	r1, r3
 800602e:	4830      	ldr	r0, [pc, #192]	; (80060f0 <BSP_SDRAM_MspInit+0x1dc>)
 8006030:	f001 fcf6 	bl	8007a20 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006034:	f248 1333 	movw	r3, #33075	; 0x8133
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800603a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800603e:	4619      	mov	r1, r3
 8006040:	482c      	ldr	r0, [pc, #176]	; (80060f4 <BSP_SDRAM_MspInit+0x1e0>)
 8006042:	f001 fced 	bl	8007a20 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006046:	2328      	movs	r3, #40	; 0x28
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800604a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800604e:	4619      	mov	r1, r3
 8006050:	4829      	ldr	r0, [pc, #164]	; (80060f8 <BSP_SDRAM_MspInit+0x1e4>)
 8006052:	f001 fce5 	bl	8007a20 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006056:	4b29      	ldr	r3, [pc, #164]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 8006058:	2200      	movs	r2, #0
 800605a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800605c:	4b27      	ldr	r3, [pc, #156]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 800605e:	2280      	movs	r2, #128	; 0x80
 8006060:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006062:	4b26      	ldr	r3, [pc, #152]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 8006064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006068:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800606a:	4b24      	ldr	r3, [pc, #144]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 800606c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006070:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006072:	4b22      	ldr	r3, [pc, #136]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 8006074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006078:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800607a:	4b20      	ldr	r3, [pc, #128]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 800607c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006080:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8006082:	4b1e      	ldr	r3, [pc, #120]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 8006084:	2200      	movs	r2, #0
 8006086:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006088:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 800608a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800608e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 8006092:	2200      	movs	r2, #0
 8006094:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006096:	4b19      	ldr	r3, [pc, #100]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 8006098:	2203      	movs	r2, #3
 800609a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800609c:	4b17      	ldr	r3, [pc, #92]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 800609e:	2200      	movs	r2, #0
 80060a0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80060a8:	4b14      	ldr	r3, [pc, #80]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 80060aa:	4a15      	ldr	r2, [pc, #84]	; (8006100 <BSP_SDRAM_MspInit+0x1ec>)
 80060ac:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a12      	ldr	r2, [pc, #72]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
 80060b4:	4a11      	ldr	r2, [pc, #68]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80060ba:	4810      	ldr	r0, [pc, #64]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 80060bc:	f000 fdee 	bl	8006c9c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80060c0:	480e      	ldr	r0, [pc, #56]	; (80060fc <BSP_SDRAM_MspInit+0x1e8>)
 80060c2:	f000 fd3d 	bl	8006b40 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80060c6:	2200      	movs	r2, #0
 80060c8:	210f      	movs	r1, #15
 80060ca:	2038      	movs	r0, #56	; 0x38
 80060cc:	f000 fbaa 	bl	8006824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80060d0:	2038      	movs	r0, #56	; 0x38
 80060d2:	f000 fbc3 	bl	800685c <HAL_NVIC_EnableIRQ>
}
 80060d6:	bf00      	nop
 80060d8:	3740      	adds	r7, #64	; 0x40
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40023800 	.word	0x40023800
 80060e4:	40020800 	.word	0x40020800
 80060e8:	40020c00 	.word	0x40020c00
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40021400 	.word	0x40021400
 80060f4:	40021800 	.word	0x40021800
 80060f8:	40021c00 	.word	0x40021c00
 80060fc:	200010b8 	.word	0x200010b8
 8006100:	40026410 	.word	0x40026410

08006104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006108:	2003      	movs	r0, #3
 800610a:	f000 fb80 	bl	800680e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800610e:	2000      	movs	r0, #0
 8006110:	f7fc ff20 	bl	8002f54 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006114:	f7fb fff6 	bl	8002104 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <HAL_IncTick+0x20>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	4b06      	ldr	r3, [pc, #24]	; (8006144 <HAL_IncTick+0x24>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4413      	add	r3, r2
 8006130:	4a04      	ldr	r2, [pc, #16]	; (8006144 <HAL_IncTick+0x24>)
 8006132:	6013      	str	r3, [r2, #0]
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20000058 	.word	0x20000058
 8006144:	2000bfa4 	.word	0x2000bfa4

08006148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return uwTick;
 800614c:	4b03      	ldr	r3, [pc, #12]	; (800615c <HAL_GetTick+0x14>)
 800614e:	681b      	ldr	r3, [r3, #0]
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	2000bfa4 	.word	0x2000bfa4

08006160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006168:	f7ff ffee 	bl	8006148 <HAL_GetTick>
 800616c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d005      	beq.n	8006186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800617a:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <HAL_Delay+0x40>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006186:	bf00      	nop
 8006188:	f7ff ffde 	bl	8006148 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d8f7      	bhi.n	8006188 <HAL_Delay+0x28>
  {
  }
}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20000058 	.word	0x20000058

080061a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e031      	b.n	800621e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fb ffc6 	bl	8002154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d116      	bne.n	8006210 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e6:	4b10      	ldr	r3, [pc, #64]	; (8006228 <HAL_ADC_Init+0x84>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	f043 0202 	orr.w	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f964 	bl	80064c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	f043 0201 	orr.w	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	641a      	str	r2, [r3, #64]	; 0x40
 800620e:	e001      	b.n	8006214 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	ffffeefd 	.word	0xffffeefd

0800622c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_ADC_ConfigChannel+0x1c>
 8006244:	2302      	movs	r3, #2
 8006246:	e12a      	b.n	800649e <HAL_ADC_ConfigChannel+0x272>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b09      	cmp	r3, #9
 8006256:	d93a      	bls.n	80062ce <HAL_ADC_ConfigChannel+0xa2>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006260:	d035      	beq.n	80062ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68d9      	ldr	r1, [r3, #12]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	4613      	mov	r3, r2
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	4413      	add	r3, r2
 8006276:	3b1e      	subs	r3, #30
 8006278:	2207      	movs	r2, #7
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	43da      	mvns	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	400a      	ands	r2, r1
 8006286:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a87      	ldr	r2, [pc, #540]	; (80064ac <HAL_ADC_ConfigChannel+0x280>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10a      	bne.n	80062a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68d9      	ldr	r1, [r3, #12]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	061a      	lsls	r2, r3, #24
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062a6:	e035      	b.n	8006314 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68d9      	ldr	r1, [r3, #12]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4618      	mov	r0, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4403      	add	r3, r0
 80062c0:	3b1e      	subs	r3, #30
 80062c2:	409a      	lsls	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062cc:	e022      	b.n	8006314 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6919      	ldr	r1, [r3, #16]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	4613      	mov	r3, r2
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	4413      	add	r3, r2
 80062e2:	2207      	movs	r2, #7
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	43da      	mvns	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	400a      	ands	r2, r1
 80062f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6919      	ldr	r1, [r3, #16]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	4618      	mov	r0, r3
 8006304:	4603      	mov	r3, r0
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	4403      	add	r3, r0
 800630a:	409a      	lsls	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b06      	cmp	r3, #6
 800631a:	d824      	bhi.n	8006366 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	3b05      	subs	r3, #5
 800632e:	221f      	movs	r2, #31
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43da      	mvns	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	400a      	ands	r2, r1
 800633c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	4618      	mov	r0, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	3b05      	subs	r3, #5
 8006358:	fa00 f203 	lsl.w	r2, r0, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	635a      	str	r2, [r3, #52]	; 0x34
 8006364:	e04c      	b.n	8006400 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b0c      	cmp	r3, #12
 800636c:	d824      	bhi.n	80063b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	3b23      	subs	r3, #35	; 0x23
 8006380:	221f      	movs	r2, #31
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43da      	mvns	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	400a      	ands	r2, r1
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	4618      	mov	r0, r3
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	3b23      	subs	r3, #35	; 0x23
 80063aa:	fa00 f203 	lsl.w	r2, r0, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
 80063b6:	e023      	b.n	8006400 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	3b41      	subs	r3, #65	; 0x41
 80063ca:	221f      	movs	r2, #31
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	43da      	mvns	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	400a      	ands	r2, r1
 80063d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	4618      	mov	r0, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	3b41      	subs	r3, #65	; 0x41
 80063f4:	fa00 f203 	lsl.w	r2, r0, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <HAL_ADC_ConfigChannel+0x284>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d10a      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x1f4>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006412:	d105      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006414:	4b27      	ldr	r3, [pc, #156]	; (80064b4 <HAL_ADC_ConfigChannel+0x288>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a26      	ldr	r2, [pc, #152]	; (80064b4 <HAL_ADC_ConfigChannel+0x288>)
 800641a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800641e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <HAL_ADC_ConfigChannel+0x284>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d109      	bne.n	800643e <HAL_ADC_ConfigChannel+0x212>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b12      	cmp	r3, #18
 8006430:	d105      	bne.n	800643e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006432:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <HAL_ADC_ConfigChannel+0x288>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <HAL_ADC_ConfigChannel+0x288>)
 8006438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800643c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <HAL_ADC_ConfigChannel+0x284>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d125      	bne.n	8006494 <HAL_ADC_ConfigChannel+0x268>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a17      	ldr	r2, [pc, #92]	; (80064ac <HAL_ADC_ConfigChannel+0x280>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <HAL_ADC_ConfigChannel+0x22e>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b11      	cmp	r3, #17
 8006458:	d11c      	bne.n	8006494 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800645a:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <HAL_ADC_ConfigChannel+0x288>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <HAL_ADC_ConfigChannel+0x288>)
 8006460:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006464:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a10      	ldr	r2, [pc, #64]	; (80064ac <HAL_ADC_ConfigChannel+0x280>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d111      	bne.n	8006494 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006470:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <HAL_ADC_ConfigChannel+0x28c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a11      	ldr	r2, [pc, #68]	; (80064bc <HAL_ADC_ConfigChannel+0x290>)
 8006476:	fba2 2303 	umull	r2, r3, r2, r3
 800647a:	0c9a      	lsrs	r2, r3, #18
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006486:	e002      	b.n	800648e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3b01      	subs	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1f9      	bne.n	8006488 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	10000012 	.word	0x10000012
 80064b0:	40012000 	.word	0x40012000
 80064b4:	40012300 	.word	0x40012300
 80064b8:	20000000 	.word	0x20000000
 80064bc:	431bde83 	.word	0x431bde83

080064c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80064c8:	4b78      	ldr	r3, [pc, #480]	; (80066ac <ADC_Init+0x1ec>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4a77      	ldr	r2, [pc, #476]	; (80066ac <ADC_Init+0x1ec>)
 80064ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80064d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80064d4:	4b75      	ldr	r3, [pc, #468]	; (80066ac <ADC_Init+0x1ec>)
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4973      	ldr	r1, [pc, #460]	; (80066ac <ADC_Init+0x1ec>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6859      	ldr	r1, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	021a      	lsls	r2, r3, #8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6859      	ldr	r1, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6899      	ldr	r1, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	4a58      	ldr	r2, [pc, #352]	; (80066b0 <ADC_Init+0x1f0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d022      	beq.n	800659a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006562:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6899      	ldr	r1, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6899      	ldr	r1, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]
 8006598:	e00f      	b.n	80065ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0202 	bic.w	r2, r2, #2
 80065c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6899      	ldr	r1, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	005a      	lsls	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01b      	beq.n	8006620 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006606:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6859      	ldr	r1, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	3b01      	subs	r3, #1
 8006614:	035a      	lsls	r2, r3, #13
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	e007      	b.n	8006630 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800662e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	3b01      	subs	r3, #1
 800664c:	051a      	lsls	r2, r3, #20
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6899      	ldr	r1, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006672:	025a      	lsls	r2, r3, #9
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6899      	ldr	r1, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	029a      	lsls	r2, r3, #10
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	609a      	str	r2, [r3, #8]
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	40012300 	.word	0x40012300
 80066b0:	0f000001 	.word	0x0f000001

080066b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066c4:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <__NVIC_SetPriorityGrouping+0x40>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066d0:	4013      	ands	r3, r2
 80066d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <__NVIC_SetPriorityGrouping+0x44>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066e2:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <__NVIC_SetPriorityGrouping+0x40>)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	60d3      	str	r3, [r2, #12]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	e000ed00 	.word	0xe000ed00
 80066f8:	05fa0000 	.word	0x05fa0000

080066fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006700:	4b04      	ldr	r3, [pc, #16]	; (8006714 <__NVIC_GetPriorityGrouping+0x18>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	0a1b      	lsrs	r3, r3, #8
 8006706:	f003 0307 	and.w	r3, r3, #7
}
 800670a:	4618      	mov	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	e000ed00 	.word	0xe000ed00

08006718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006726:	2b00      	cmp	r3, #0
 8006728:	db0b      	blt.n	8006742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	f003 021f 	and.w	r2, r3, #31
 8006730:	4907      	ldr	r1, [pc, #28]	; (8006750 <__NVIC_EnableIRQ+0x38>)
 8006732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	2001      	movs	r0, #1
 800673a:	fa00 f202 	lsl.w	r2, r0, r2
 800673e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e100 	.word	0xe000e100

08006754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	6039      	str	r1, [r7, #0]
 800675e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006764:	2b00      	cmp	r3, #0
 8006766:	db0a      	blt.n	800677e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	b2da      	uxtb	r2, r3
 800676c:	490c      	ldr	r1, [pc, #48]	; (80067a0 <__NVIC_SetPriority+0x4c>)
 800676e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006772:	0112      	lsls	r2, r2, #4
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	440b      	add	r3, r1
 8006778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800677c:	e00a      	b.n	8006794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	4908      	ldr	r1, [pc, #32]	; (80067a4 <__NVIC_SetPriority+0x50>)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	3b04      	subs	r3, #4
 800678c:	0112      	lsls	r2, r2, #4
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	440b      	add	r3, r1
 8006792:	761a      	strb	r2, [r3, #24]
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	e000e100 	.word	0xe000e100
 80067a4:	e000ed00 	.word	0xe000ed00

080067a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b089      	sub	sp, #36	; 0x24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f1c3 0307 	rsb	r3, r3, #7
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	bf28      	it	cs
 80067c6:	2304      	movcs	r3, #4
 80067c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3304      	adds	r3, #4
 80067ce:	2b06      	cmp	r3, #6
 80067d0:	d902      	bls.n	80067d8 <NVIC_EncodePriority+0x30>
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3b03      	subs	r3, #3
 80067d6:	e000      	b.n	80067da <NVIC_EncodePriority+0x32>
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067dc:	f04f 32ff 	mov.w	r2, #4294967295
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43da      	mvns	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	401a      	ands	r2, r3
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067f0:	f04f 31ff 	mov.w	r1, #4294967295
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	fa01 f303 	lsl.w	r3, r1, r3
 80067fa:	43d9      	mvns	r1, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006800:	4313      	orrs	r3, r2
         );
}
 8006802:	4618      	mov	r0, r3
 8006804:	3724      	adds	r7, #36	; 0x24
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ff4c 	bl	80066b4 <__NVIC_SetPriorityGrouping>
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006836:	f7ff ff61 	bl	80066fc <__NVIC_GetPriorityGrouping>
 800683a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	6978      	ldr	r0, [r7, #20]
 8006842:	f7ff ffb1 	bl	80067a8 <NVIC_EncodePriority>
 8006846:	4602      	mov	r2, r0
 8006848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800684c:	4611      	mov	r1, r2
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff ff80 	bl	8006754 <__NVIC_SetPriority>
}
 8006854:	bf00      	nop
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff ff54 	bl	8006718 <__NVIC_EnableIRQ>
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e054      	b.n	8006934 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	7f5b      	ldrb	r3, [r3, #29]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fb fcb4 	bl	8002208 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10c      	bne.n	80068c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a22      	ldr	r2, [pc, #136]	; (800693c <HAL_CRC_Init+0xc4>)
 80068b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0218 	bic.w	r2, r2, #24
 80068c4:	609a      	str	r2, [r3, #8]
 80068c6:	e00c      	b.n	80068e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6899      	ldr	r1, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f834 	bl	8006940 <HAL_CRCEx_Polynomial_Set>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e028      	b.n	8006934 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	795b      	ldrb	r3, [r3, #5]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f04f 32ff 	mov.w	r2, #4294967295
 80068f2:	611a      	str	r2, [r3, #16]
 80068f4:	e004      	b.n	8006900 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6912      	ldr	r2, [r2, #16]
 80068fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	04c11db7 	.word	0x04c11db7

08006940 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006950:	231f      	movs	r3, #31
 8006952:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006954:	bf00      	nop
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1e5a      	subs	r2, r3, #1
 800695a:	613a      	str	r2, [r7, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <HAL_CRCEx_Polynomial_Set+0x34>
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	fa22 f303 	lsr.w	r3, r2, r3
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b18      	cmp	r3, #24
 8006978:	d846      	bhi.n	8006a08 <HAL_CRCEx_Polynomial_Set+0xc8>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <HAL_CRCEx_Polynomial_Set+0x40>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006a0f 	.word	0x08006a0f
 8006984:	08006a09 	.word	0x08006a09
 8006988:	08006a09 	.word	0x08006a09
 800698c:	08006a09 	.word	0x08006a09
 8006990:	08006a09 	.word	0x08006a09
 8006994:	08006a09 	.word	0x08006a09
 8006998:	08006a09 	.word	0x08006a09
 800699c:	08006a09 	.word	0x08006a09
 80069a0:	080069fd 	.word	0x080069fd
 80069a4:	08006a09 	.word	0x08006a09
 80069a8:	08006a09 	.word	0x08006a09
 80069ac:	08006a09 	.word	0x08006a09
 80069b0:	08006a09 	.word	0x08006a09
 80069b4:	08006a09 	.word	0x08006a09
 80069b8:	08006a09 	.word	0x08006a09
 80069bc:	08006a09 	.word	0x08006a09
 80069c0:	080069f1 	.word	0x080069f1
 80069c4:	08006a09 	.word	0x08006a09
 80069c8:	08006a09 	.word	0x08006a09
 80069cc:	08006a09 	.word	0x08006a09
 80069d0:	08006a09 	.word	0x08006a09
 80069d4:	08006a09 	.word	0x08006a09
 80069d8:	08006a09 	.word	0x08006a09
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	080069e5 	.word	0x080069e5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	2b06      	cmp	r3, #6
 80069e8:	d913      	bls.n	8006a12 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80069ee:	e010      	b.n	8006a12 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2b07      	cmp	r3, #7
 80069f4:	d90f      	bls.n	8006a16 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80069fa:	e00c      	b.n	8006a16 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2b0f      	cmp	r3, #15
 8006a00:	d90b      	bls.n	8006a1a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a06:	e008      	b.n	8006a1a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0c:	e006      	b.n	8006a1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a0e:	bf00      	nop
 8006a10:	e004      	b.n	8006a1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a12:	bf00      	nop
 8006a14:	e002      	b.n	8006a1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a16:	bf00      	nop
 8006a18:	e000      	b.n	8006a1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a1a:	bf00      	nop
  }
  if (status == HAL_OK)
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10d      	bne.n	8006a3e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f023 0118 	bic.w	r1, r3, #24
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e069      	b.n	8006b32 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fb fbec 	bl	8002248 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6819      	ldr	r1, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	4b2a      	ldr	r3, [pc, #168]	; (8006b3c <HAL_DCMI_Init+0xf0>)
 8006a92:	400b      	ands	r3, r1
 8006a94:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6819      	ldr	r1, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006aaa:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006ab6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006ac2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006ace:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006ada:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d112      	bne.n	8006b12 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	7f1b      	ldrb	r3, [r3, #28]
 8006af0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	7f5b      	ldrb	r3, [r3, #29]
 8006af6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006af8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	7f9b      	ldrb	r3, [r3, #30]
 8006afe:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006b00:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7fdb      	ldrb	r3, [r3, #31]
 8006b08:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006b0e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b10:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 021e 	orr.w	r2, r2, #30
 8006b20:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	ffe0f007 	.word	0xffe0f007

08006b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006b4c:	f7ff fafc 	bl	8006148 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e099      	b.n	8006c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0201 	bic.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b7c:	e00f      	b.n	8006b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b7e:	f7ff fae3 	bl	8006148 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b05      	cmp	r3, #5
 8006b8a:	d908      	bls.n	8006b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2203      	movs	r2, #3
 8006b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e078      	b.n	8006c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e8      	bne.n	8006b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4b38      	ldr	r3, [pc, #224]	; (8006c98 <HAL_DMA_Init+0x158>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d107      	bne.n	8006c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	4313      	orrs	r3, r2
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f023 0307 	bic.w	r3, r3, #7
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d117      	bne.n	8006c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00e      	beq.n	8006c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fad5 	bl	80071f4 <DMA_CheckFifoParam>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2240      	movs	r2, #64	; 0x40
 8006c54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e016      	b.n	8006c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa8c 	bl	8007188 <DMA_CalcBaseAndBitshift>
 8006c70:	4603      	mov	r3, r0
 8006c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c78:	223f      	movs	r2, #63	; 0x3f
 8006c7a:	409a      	lsls	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	f010803f 	.word	0xf010803f

08006c9c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e050      	b.n	8006d50 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d101      	bne.n	8006cbe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e048      	b.n	8006d50 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0201 	bic.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2221      	movs	r2, #33	; 0x21
 8006cfc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fa42 	bl	8007188 <DMA_CalcBaseAndBitshift>
 8006d04:	4603      	mov	r3, r0
 8006d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0c:	223f      	movs	r2, #63	; 0x3f
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_DMA_Start_IT+0x26>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e048      	b.n	8006e10 <HAL_DMA_Start_IT+0xb8>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d137      	bne.n	8006e02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2202      	movs	r2, #2
 8006d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f9c0 	bl	800712c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db0:	223f      	movs	r2, #63	; 0x3f
 8006db2:	409a      	lsls	r2, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0216 	orr.w	r2, r2, #22
 8006dc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006dd6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0208 	orr.w	r2, r2, #8
 8006dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e005      	b.n	8006e0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006e24:	4b92      	ldr	r3, [pc, #584]	; (8007070 <HAL_DMA_IRQHandler+0x258>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a92      	ldr	r2, [pc, #584]	; (8007074 <HAL_DMA_IRQHandler+0x25c>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	0a9b      	lsrs	r3, r3, #10
 8006e30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e42:	2208      	movs	r2, #8
 8006e44:	409a      	lsls	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01a      	beq.n	8006e84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d013      	beq.n	8006e84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0204 	bic.w	r2, r2, #4
 8006e6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e70:	2208      	movs	r2, #8
 8006e72:	409a      	lsls	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7c:	f043 0201 	orr.w	r2, r3, #1
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e88:	2201      	movs	r2, #1
 8006e8a:	409a      	lsls	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d012      	beq.n	8006eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	409a      	lsls	r2, r3
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb2:	f043 0202 	orr.w	r2, r3, #2
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ebe:	2204      	movs	r2, #4
 8006ec0:	409a      	lsls	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d012      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006edc:	2204      	movs	r2, #4
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee8:	f043 0204 	orr.w	r2, r3, #4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef4:	2210      	movs	r2, #16
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d043      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d03c      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f12:	2210      	movs	r2, #16
 8006f14:	409a      	lsls	r2, r3
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d018      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d108      	bne.n	8006f48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d024      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
 8006f46:	e01f      	b.n	8006f88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01b      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
 8006f58:	e016      	b.n	8006f88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d107      	bne.n	8006f78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0208 	bic.w	r2, r2, #8
 8006f76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	409a      	lsls	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4013      	ands	r3, r2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 808e 	beq.w	80070b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8086 	beq.w	80070b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fae:	2220      	movs	r2, #32
 8006fb0:	409a      	lsls	r2, r3
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b05      	cmp	r3, #5
 8006fc0:	d136      	bne.n	8007030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0216 	bic.w	r2, r2, #22
 8006fd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <HAL_DMA_IRQHandler+0x1da>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0208 	bic.w	r2, r2, #8
 8007000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007006:	223f      	movs	r2, #63	; 0x3f
 8007008:	409a      	lsls	r2, r3
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007022:	2b00      	cmp	r3, #0
 8007024:	d07d      	beq.n	8007122 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
        }
        return;
 800702e:	e078      	b.n	8007122 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01c      	beq.n	8007078 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d108      	bne.n	800705e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007050:	2b00      	cmp	r3, #0
 8007052:	d030      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
 800705c:	e02b      	b.n	80070b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d027      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
 800706e:	e022      	b.n	80070b6 <HAL_DMA_IRQHandler+0x29e>
 8007070:	20000000 	.word	0x20000000
 8007074:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10f      	bne.n	80070a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0210 	bic.w	r2, r2, #16
 8007094:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d032      	beq.n	8007124 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d022      	beq.n	8007110 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2205      	movs	r2, #5
 80070ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60bb      	str	r3, [r7, #8]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d307      	bcc.n	80070fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f2      	bne.n	80070e2 <HAL_DMA_IRQHandler+0x2ca>
 80070fc:	e000      	b.n	8007100 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80070fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
 8007120:	e000      	b.n	8007124 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007122:	bf00      	nop
    }
  }
}
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop

0800712c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d108      	bne.n	800716c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800716a:	e007      	b.n	800717c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	60da      	str	r2, [r3, #12]
}
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	3b10      	subs	r3, #16
 8007198:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <DMA_CalcBaseAndBitshift+0x60>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	091b      	lsrs	r3, r3, #4
 80071a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80071a2:	4a12      	ldr	r2, [pc, #72]	; (80071ec <DMA_CalcBaseAndBitshift+0x64>)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d908      	bls.n	80071c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <DMA_CalcBaseAndBitshift+0x68>)
 80071be:	4013      	ands	r3, r2
 80071c0:	1d1a      	adds	r2, r3, #4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	659a      	str	r2, [r3, #88]	; 0x58
 80071c6:	e006      	b.n	80071d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	4b08      	ldr	r3, [pc, #32]	; (80071f0 <DMA_CalcBaseAndBitshift+0x68>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	aaaaaaab 	.word	0xaaaaaaab
 80071ec:	08019bc0 	.word	0x08019bc0
 80071f0:	fffffc00 	.word	0xfffffc00

080071f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d11f      	bne.n	800724e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b03      	cmp	r3, #3
 8007212:	d855      	bhi.n	80072c0 <DMA_CheckFifoParam+0xcc>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <DMA_CheckFifoParam+0x28>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	0800722d 	.word	0x0800722d
 8007220:	0800723f 	.word	0x0800723f
 8007224:	0800722d 	.word	0x0800722d
 8007228:	080072c1 	.word	0x080072c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d045      	beq.n	80072c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800723c:	e042      	b.n	80072c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007246:	d13f      	bne.n	80072c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800724c:	e03c      	b.n	80072c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007256:	d121      	bne.n	800729c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d836      	bhi.n	80072cc <DMA_CheckFifoParam+0xd8>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <DMA_CheckFifoParam+0x70>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	08007275 	.word	0x08007275
 8007268:	0800727b 	.word	0x0800727b
 800726c:	08007275 	.word	0x08007275
 8007270:	0800728d 	.word	0x0800728d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
      break;
 8007278:	e02f      	b.n	80072da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d024      	beq.n	80072d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800728a:	e021      	b.n	80072d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007294:	d11e      	bne.n	80072d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800729a:	e01b      	b.n	80072d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d902      	bls.n	80072a8 <DMA_CheckFifoParam+0xb4>
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d003      	beq.n	80072ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80072a6:	e018      	b.n	80072da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
      break;
 80072ac:	e015      	b.n	80072da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00e      	beq.n	80072d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	73fb      	strb	r3, [r7, #15]
      break;
 80072be:	e00b      	b.n	80072d8 <DMA_CheckFifoParam+0xe4>
      break;
 80072c0:	bf00      	nop
 80072c2:	e00a      	b.n	80072da <DMA_CheckFifoParam+0xe6>
      break;
 80072c4:	bf00      	nop
 80072c6:	e008      	b.n	80072da <DMA_CheckFifoParam+0xe6>
      break;
 80072c8:	bf00      	nop
 80072ca:	e006      	b.n	80072da <DMA_CheckFifoParam+0xe6>
      break;
 80072cc:	bf00      	nop
 80072ce:	e004      	b.n	80072da <DMA_CheckFifoParam+0xe6>
      break;
 80072d0:	bf00      	nop
 80072d2:	e002      	b.n	80072da <DMA_CheckFifoParam+0xe6>
      break;   
 80072d4:	bf00      	nop
 80072d6:	e000      	b.n	80072da <DMA_CheckFifoParam+0xe6>
      break;
 80072d8:	bf00      	nop
    }
  } 
  
  return status; 
 80072da:	7bfb      	ldrb	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e039      	b.n	800736e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fb f858 	bl	80023c4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007338:	f023 0107 	bic.w	r1, r3, #7
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <HAL_DMA2D_Init+0x90>)
 8007350:	4013      	ands	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68d1      	ldr	r1, [r2, #12]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6812      	ldr	r2, [r2, #0]
 800735a:	430b      	orrs	r3, r1
 800735c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	ffffc000 	.word	0xffffc000

0800737c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af02      	add	r7, sp, #8
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_DMA2D_Start+0x1c>
 8007394:	2302      	movs	r3, #2
 8007396:	e018      	b.n	80073ca <HAL_DMA2D_Start+0x4e>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fa98 	bl	80078e8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d056      	beq.n	800749c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80073ee:	f7fe feab 	bl	8006148 <HAL_GetTick>
 80073f2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80073f4:	e04b      	b.n	800748e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007404:	2b00      	cmp	r3, #0
 8007406:	d023      	beq.n	8007450 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007416:	f043 0202 	orr.w	r2, r3, #2
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d005      	beq.n	8007434 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742c:	f043 0201 	orr.w	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2221      	movs	r2, #33	; 0x21
 800743a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2204      	movs	r2, #4
 8007440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e0a5      	b.n	800759c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d01a      	beq.n	800748e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8007458:	f7fe fe76 	bl	8006148 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <HAL_DMA2D_PollForTransfer+0x9c>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10f      	bne.n	800748e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007472:	f043 0220 	orr.w	r2, r3, #32
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2203      	movs	r2, #3
 800747e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e086      	b.n	800759c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0ac      	beq.n	80073f6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d061      	beq.n	8007582 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80074be:	f7fe fe43 	bl	8006148 <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80074c4:	e056      	b.n	8007574 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d02e      	beq.n	8007536 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f003 0308 	and.w	r3, r3, #8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e6:	f043 0204 	orr.w	r2, r3, #4
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	f043 0202 	orr.w	r2, r3, #2
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007512:	f043 0201 	orr.w	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2229      	movs	r2, #41	; 0x29
 8007520:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2204      	movs	r2, #4
 8007526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e032      	b.n	800759c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d01a      	beq.n	8007574 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800753e:	f7fe fe03 	bl	8006148 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d302      	bcc.n	8007554 <HAL_DMA2D_PollForTransfer+0x182>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10f      	bne.n	8007574 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007558:	f043 0220 	orr.w	r2, r3, #32
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2203      	movs	r2, #3
 8007564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e013      	b.n	800759c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f003 0310 	and.w	r3, r3, #16
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0a1      	beq.n	80074c6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2212      	movs	r2, #18
 8007588:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d026      	beq.n	8007614 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d021      	beq.n	8007614 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075de:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e4:	f043 0201 	orr.w	r2, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2201      	movs	r2, #1
 80075f2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2204      	movs	r2, #4
 80075f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d026      	beq.n	800766c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d021      	beq.n	800766c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007636:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2220      	movs	r2, #32
 800763e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007644:	f043 0202 	orr.w	r2, r3, #2
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2204      	movs	r2, #4
 8007650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d026      	beq.n	80076c4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800767c:	2b00      	cmp	r3, #0
 800767e:	d021      	beq.n	80076c4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800768e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2208      	movs	r2, #8
 8007696:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769c:	f043 0204 	orr.w	r2, r3, #4
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2204      	movs	r2, #4
 80076a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d013      	beq.n	80076f6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2204      	movs	r2, #4
 80076ee:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f853 	bl	800779c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d024      	beq.n	800774a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01f      	beq.n	800774a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007718:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2202      	movs	r2, #2
 8007720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b00      	cmp	r3, #0
 8007752:	d01f      	beq.n	8007794 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d01a      	beq.n	8007794 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800776c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2210      	movs	r2, #16
 8007774:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f80e 	bl	80077b0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007794:	bf00      	nop
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_DMA2D_ConfigLayer+0x20>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e079      	b.n	80078d8 <HAL_DMA2D_ConfigLayer+0x114>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	3318      	adds	r3, #24
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	041b      	lsls	r3, r3, #16
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800780e:	4b35      	ldr	r3, [pc, #212]	; (80078e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8007810:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b0a      	cmp	r3, #10
 8007818:	d003      	beq.n	8007822 <HAL_DMA2D_ConfigLayer+0x5e>
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b09      	cmp	r3, #9
 8007820:	d107      	bne.n	8007832 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	4313      	orrs	r3, r2
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	e005      	b.n	800783e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	061b      	lsls	r3, r3, #24
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	4313      	orrs	r3, r2
 800783c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d120      	bne.n	8007886 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	43db      	mvns	r3, r3
 800784e:	ea02 0103 	and.w	r1, r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	430a      	orrs	r2, r1
 800785a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b0a      	cmp	r3, #10
 800786c:	d003      	beq.n	8007876 <HAL_DMA2D_ConfigLayer+0xb2>
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2b09      	cmp	r3, #9
 8007874:	d127      	bne.n	80078c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007882:	629a      	str	r2, [r3, #40]	; 0x28
 8007884:	e01f      	b.n	80078c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	43db      	mvns	r3, r3
 8007890:	ea02 0103 	and.w	r1, r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	430a      	orrs	r2, r1
 800789c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b0a      	cmp	r3, #10
 80078ae:	d003      	beq.n	80078b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b09      	cmp	r3, #9
 80078b6:	d106      	bne.n	80078c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80078c4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	ff03000f 	.word	0xff03000f

080078e8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b08b      	sub	sp, #44	; 0x2c
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	041a      	lsls	r2, r3, #16
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	431a      	orrs	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007920:	d174      	bne.n	8007a0c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007928:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007930:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007938:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d108      	bne.n	800795a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	431a      	orrs	r2, r3
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	4313      	orrs	r3, r2
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
 8007958:	e053      	b.n	8007a02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d106      	bne.n	8007970 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	4313      	orrs	r3, r2
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
 800796e:	e048      	b.n	8007a02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d111      	bne.n	800799c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	0cdb      	lsrs	r3, r3, #19
 800797c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	0a9b      	lsrs	r3, r3, #10
 8007982:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	08db      	lsrs	r3, r3, #3
 8007988:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	02db      	lsls	r3, r3, #11
 8007992:	4313      	orrs	r3, r2
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
 800799a:	e032      	b.n	8007a02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d117      	bne.n	80079d4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	0fdb      	lsrs	r3, r3, #31
 80079a8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	0cdb      	lsrs	r3, r3, #19
 80079ae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	0adb      	lsrs	r3, r3, #11
 80079b4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	08db      	lsrs	r3, r3, #3
 80079ba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	029b      	lsls	r3, r3, #10
 80079c4:	431a      	orrs	r2, r3
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	03db      	lsls	r3, r3, #15
 80079ca:	4313      	orrs	r3, r2
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
 80079d2:	e016      	b.n	8007a02 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	0f1b      	lsrs	r3, r3, #28
 80079d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	0d1b      	lsrs	r3, r3, #20
 80079de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	0b1b      	lsrs	r3, r3, #12
 80079e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	091b      	lsrs	r3, r3, #4
 80079ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	011a      	lsls	r2, r3, #4
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	431a      	orrs	r2, r3
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	031b      	lsls	r3, r3, #12
 80079fa:	4313      	orrs	r3, r2
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007a0a:	e003      	b.n	8007a14 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	60da      	str	r2, [r3, #12]
}
 8007a14:	bf00      	nop
 8007a16:	372c      	adds	r7, #44	; 0x2c
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b089      	sub	sp, #36	; 0x24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007a36:	2300      	movs	r3, #0
 8007a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
 8007a3e:	e175      	b.n	8007d2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007a40:	2201      	movs	r2, #1
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	fa02 f303 	lsl.w	r3, r2, r3
 8007a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4013      	ands	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	f040 8164 	bne.w	8007d26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d00b      	beq.n	8007a7e <HAL_GPIO_Init+0x5e>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d007      	beq.n	8007a7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a72:	2b11      	cmp	r3, #17
 8007a74:	d003      	beq.n	8007a7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b12      	cmp	r3, #18
 8007a7c:	d130      	bne.n	8007ae0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	2203      	movs	r2, #3
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43db      	mvns	r3, r3
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	4013      	ands	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	43db      	mvns	r3, r3
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	091b      	lsrs	r3, r3, #4
 8007aca:	f003 0201 	and.w	r2, r3, #1
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	2203      	movs	r2, #3
 8007aec:	fa02 f303 	lsl.w	r3, r2, r3
 8007af0:	43db      	mvns	r3, r3
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	4013      	ands	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d003      	beq.n	8007b20 <HAL_GPIO_Init+0x100>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	2b12      	cmp	r3, #18
 8007b1e:	d123      	bne.n	8007b68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	08da      	lsrs	r2, r3, #3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3208      	adds	r2, #8
 8007b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	220f      	movs	r2, #15
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	4013      	ands	r3, r2
 8007b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	fa02 f303 	lsl.w	r3, r2, r3
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	08da      	lsrs	r2, r3, #3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	3208      	adds	r2, #8
 8007b62:	69b9      	ldr	r1, [r7, #24]
 8007b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	2203      	movs	r2, #3
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f003 0203 	and.w	r2, r3, #3
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 80be 	beq.w	8007d26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007baa:	4b65      	ldr	r3, [pc, #404]	; (8007d40 <HAL_GPIO_Init+0x320>)
 8007bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bae:	4a64      	ldr	r2, [pc, #400]	; (8007d40 <HAL_GPIO_Init+0x320>)
 8007bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8007bb6:	4b62      	ldr	r3, [pc, #392]	; (8007d40 <HAL_GPIO_Init+0x320>)
 8007bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007bc2:	4a60      	ldr	r2, [pc, #384]	; (8007d44 <HAL_GPIO_Init+0x324>)
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	089b      	lsrs	r3, r3, #2
 8007bc8:	3302      	adds	r3, #2
 8007bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	220f      	movs	r2, #15
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	43db      	mvns	r3, r3
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	4013      	ands	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a57      	ldr	r2, [pc, #348]	; (8007d48 <HAL_GPIO_Init+0x328>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d037      	beq.n	8007c5e <HAL_GPIO_Init+0x23e>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a56      	ldr	r2, [pc, #344]	; (8007d4c <HAL_GPIO_Init+0x32c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d031      	beq.n	8007c5a <HAL_GPIO_Init+0x23a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a55      	ldr	r2, [pc, #340]	; (8007d50 <HAL_GPIO_Init+0x330>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d02b      	beq.n	8007c56 <HAL_GPIO_Init+0x236>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a54      	ldr	r2, [pc, #336]	; (8007d54 <HAL_GPIO_Init+0x334>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d025      	beq.n	8007c52 <HAL_GPIO_Init+0x232>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a53      	ldr	r2, [pc, #332]	; (8007d58 <HAL_GPIO_Init+0x338>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d01f      	beq.n	8007c4e <HAL_GPIO_Init+0x22e>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a52      	ldr	r2, [pc, #328]	; (8007d5c <HAL_GPIO_Init+0x33c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d019      	beq.n	8007c4a <HAL_GPIO_Init+0x22a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a51      	ldr	r2, [pc, #324]	; (8007d60 <HAL_GPIO_Init+0x340>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d013      	beq.n	8007c46 <HAL_GPIO_Init+0x226>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a50      	ldr	r2, [pc, #320]	; (8007d64 <HAL_GPIO_Init+0x344>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00d      	beq.n	8007c42 <HAL_GPIO_Init+0x222>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a4f      	ldr	r2, [pc, #316]	; (8007d68 <HAL_GPIO_Init+0x348>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d007      	beq.n	8007c3e <HAL_GPIO_Init+0x21e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a4e      	ldr	r2, [pc, #312]	; (8007d6c <HAL_GPIO_Init+0x34c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d101      	bne.n	8007c3a <HAL_GPIO_Init+0x21a>
 8007c36:	2309      	movs	r3, #9
 8007c38:	e012      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c3a:	230a      	movs	r3, #10
 8007c3c:	e010      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c3e:	2308      	movs	r3, #8
 8007c40:	e00e      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c42:	2307      	movs	r3, #7
 8007c44:	e00c      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c46:	2306      	movs	r3, #6
 8007c48:	e00a      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c4a:	2305      	movs	r3, #5
 8007c4c:	e008      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c4e:	2304      	movs	r3, #4
 8007c50:	e006      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c52:	2303      	movs	r3, #3
 8007c54:	e004      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c56:	2302      	movs	r3, #2
 8007c58:	e002      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e000      	b.n	8007c60 <HAL_GPIO_Init+0x240>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	69fa      	ldr	r2, [r7, #28]
 8007c62:	f002 0203 	and.w	r2, r2, #3
 8007c66:	0092      	lsls	r2, r2, #2
 8007c68:	4093      	lsls	r3, r2
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007c70:	4934      	ldr	r1, [pc, #208]	; (8007d44 <HAL_GPIO_Init+0x324>)
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	089b      	lsrs	r3, r3, #2
 8007c76:	3302      	adds	r3, #2
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c7e:	4b3c      	ldr	r3, [pc, #240]	; (8007d70 <HAL_GPIO_Init+0x350>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	43db      	mvns	r3, r3
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007ca2:	4a33      	ldr	r2, [pc, #204]	; (8007d70 <HAL_GPIO_Init+0x350>)
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007ca8:	4b31      	ldr	r3, [pc, #196]	; (8007d70 <HAL_GPIO_Init+0x350>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	43db      	mvns	r3, r3
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ccc:	4a28      	ldr	r2, [pc, #160]	; (8007d70 <HAL_GPIO_Init+0x350>)
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cd2:	4b27      	ldr	r3, [pc, #156]	; (8007d70 <HAL_GPIO_Init+0x350>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	43db      	mvns	r3, r3
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <HAL_GPIO_Init+0x350>)
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007cfc:	4b1c      	ldr	r3, [pc, #112]	; (8007d70 <HAL_GPIO_Init+0x350>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	43db      	mvns	r3, r3
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d20:	4a13      	ldr	r2, [pc, #76]	; (8007d70 <HAL_GPIO_Init+0x350>)
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	f67f ae86 	bls.w	8007a40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007d34:	bf00      	nop
 8007d36:	3724      	adds	r7, #36	; 0x24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	40023800 	.word	0x40023800
 8007d44:	40013800 	.word	0x40013800
 8007d48:	40020000 	.word	0x40020000
 8007d4c:	40020400 	.word	0x40020400
 8007d50:	40020800 	.word	0x40020800
 8007d54:	40020c00 	.word	0x40020c00
 8007d58:	40021000 	.word	0x40021000
 8007d5c:	40021400 	.word	0x40021400
 8007d60:	40021800 	.word	0x40021800
 8007d64:	40021c00 	.word	0x40021c00
 8007d68:	40022000 	.word	0x40022000
 8007d6c:	40022400 	.word	0x40022400
 8007d70:	40013c00 	.word	0x40013c00

08007d74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	e0d9      	b.n	8007f44 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007d90:	2201      	movs	r2, #1
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	f040 80c9 	bne.w	8007f3e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007dac:	4a6a      	ldr	r2, [pc, #424]	; (8007f58 <HAL_GPIO_DeInit+0x1e4>)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	089b      	lsrs	r3, r3, #2
 8007db2:	3302      	adds	r3, #2
 8007db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f003 0303 	and.w	r3, r3, #3
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	220f      	movs	r2, #15
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a62      	ldr	r2, [pc, #392]	; (8007f5c <HAL_GPIO_DeInit+0x1e8>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d037      	beq.n	8007e46 <HAL_GPIO_DeInit+0xd2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a61      	ldr	r2, [pc, #388]	; (8007f60 <HAL_GPIO_DeInit+0x1ec>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d031      	beq.n	8007e42 <HAL_GPIO_DeInit+0xce>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a60      	ldr	r2, [pc, #384]	; (8007f64 <HAL_GPIO_DeInit+0x1f0>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d02b      	beq.n	8007e3e <HAL_GPIO_DeInit+0xca>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a5f      	ldr	r2, [pc, #380]	; (8007f68 <HAL_GPIO_DeInit+0x1f4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d025      	beq.n	8007e3a <HAL_GPIO_DeInit+0xc6>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a5e      	ldr	r2, [pc, #376]	; (8007f6c <HAL_GPIO_DeInit+0x1f8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d01f      	beq.n	8007e36 <HAL_GPIO_DeInit+0xc2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a5d      	ldr	r2, [pc, #372]	; (8007f70 <HAL_GPIO_DeInit+0x1fc>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d019      	beq.n	8007e32 <HAL_GPIO_DeInit+0xbe>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a5c      	ldr	r2, [pc, #368]	; (8007f74 <HAL_GPIO_DeInit+0x200>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d013      	beq.n	8007e2e <HAL_GPIO_DeInit+0xba>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a5b      	ldr	r2, [pc, #364]	; (8007f78 <HAL_GPIO_DeInit+0x204>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00d      	beq.n	8007e2a <HAL_GPIO_DeInit+0xb6>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a5a      	ldr	r2, [pc, #360]	; (8007f7c <HAL_GPIO_DeInit+0x208>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d007      	beq.n	8007e26 <HAL_GPIO_DeInit+0xb2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a59      	ldr	r2, [pc, #356]	; (8007f80 <HAL_GPIO_DeInit+0x20c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d101      	bne.n	8007e22 <HAL_GPIO_DeInit+0xae>
 8007e1e:	2309      	movs	r3, #9
 8007e20:	e012      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e22:	230a      	movs	r3, #10
 8007e24:	e010      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e26:	2308      	movs	r3, #8
 8007e28:	e00e      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e2a:	2307      	movs	r3, #7
 8007e2c:	e00c      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e2e:	2306      	movs	r3, #6
 8007e30:	e00a      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e32:	2305      	movs	r3, #5
 8007e34:	e008      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e36:	2304      	movs	r3, #4
 8007e38:	e006      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e004      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e002      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <HAL_GPIO_DeInit+0xd4>
 8007e46:	2300      	movs	r3, #0
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	f002 0203 	and.w	r2, r2, #3
 8007e4e:	0092      	lsls	r2, r2, #2
 8007e50:	4093      	lsls	r3, r2
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d132      	bne.n	8007ebe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007e58:	4b4a      	ldr	r3, [pc, #296]	; (8007f84 <HAL_GPIO_DeInit+0x210>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	43db      	mvns	r3, r3
 8007e60:	4948      	ldr	r1, [pc, #288]	; (8007f84 <HAL_GPIO_DeInit+0x210>)
 8007e62:	4013      	ands	r3, r2
 8007e64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007e66:	4b47      	ldr	r3, [pc, #284]	; (8007f84 <HAL_GPIO_DeInit+0x210>)
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	4945      	ldr	r1, [pc, #276]	; (8007f84 <HAL_GPIO_DeInit+0x210>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007e74:	4b43      	ldr	r3, [pc, #268]	; (8007f84 <HAL_GPIO_DeInit+0x210>)
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	43db      	mvns	r3, r3
 8007e7c:	4941      	ldr	r1, [pc, #260]	; (8007f84 <HAL_GPIO_DeInit+0x210>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007e82:	4b40      	ldr	r3, [pc, #256]	; (8007f84 <HAL_GPIO_DeInit+0x210>)
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	43db      	mvns	r3, r3
 8007e8a:	493e      	ldr	r1, [pc, #248]	; (8007f84 <HAL_GPIO_DeInit+0x210>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	220f      	movs	r2, #15
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007ea0:	4a2d      	ldr	r2, [pc, #180]	; (8007f58 <HAL_GPIO_DeInit+0x1e4>)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	089b      	lsrs	r3, r3, #2
 8007ea6:	3302      	adds	r3, #2
 8007ea8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	43da      	mvns	r2, r3
 8007eb0:	4829      	ldr	r0, [pc, #164]	; (8007f58 <HAL_GPIO_DeInit+0x1e4>)
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	089b      	lsrs	r3, r3, #2
 8007eb6:	400a      	ands	r2, r1
 8007eb8:	3302      	adds	r3, #2
 8007eba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	2103      	movs	r1, #3
 8007ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ecc:	43db      	mvns	r3, r3
 8007ece:	401a      	ands	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	08da      	lsrs	r2, r3, #3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3208      	adds	r2, #8
 8007edc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	220f      	movs	r2, #15
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	08d2      	lsrs	r2, r2, #3
 8007ef4:	4019      	ands	r1, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3208      	adds	r2, #8
 8007efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	2103      	movs	r1, #3
 8007f08:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0c:	43db      	mvns	r3, r3
 8007f0e:	401a      	ands	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	2101      	movs	r1, #1
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f20:	43db      	mvns	r3, r3
 8007f22:	401a      	ands	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	2103      	movs	r1, #3
 8007f32:	fa01 f303 	lsl.w	r3, r1, r3
 8007f36:	43db      	mvns	r3, r3
 8007f38:	401a      	ands	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	3301      	adds	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b0f      	cmp	r3, #15
 8007f48:	f67f af22 	bls.w	8007d90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007f4c:	bf00      	nop
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	40013800 	.word	0x40013800
 8007f5c:	40020000 	.word	0x40020000
 8007f60:	40020400 	.word	0x40020400
 8007f64:	40020800 	.word	0x40020800
 8007f68:	40020c00 	.word	0x40020c00
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	40021400 	.word	0x40021400
 8007f74:	40021800 	.word	0x40021800
 8007f78:	40021c00 	.word	0x40021c00
 8007f7c:	40022000 	.word	0x40022000
 8007f80:	40022400 	.word	0x40022400
 8007f84:	40013c00 	.word	0x40013c00

08007f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	807b      	strh	r3, [r7, #2]
 8007f94:	4613      	mov	r3, r2
 8007f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f98:	787b      	ldrb	r3, [r7, #1]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f9e:	887a      	ldrh	r2, [r7, #2]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007fa4:	e003      	b.n	8007fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007fa6:	887b      	ldrh	r3, [r7, #2]
 8007fa8:	041a      	lsls	r2, r3, #16
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	619a      	str	r2, [r3, #24]
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	695a      	ldr	r2, [r3, #20]
 8007fca:	887b      	ldrh	r3, [r7, #2]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d004      	beq.n	8007fdc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fd2:	887b      	ldrh	r3, [r7, #2]
 8007fd4:	041a      	lsls	r2, r3, #16
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8007fda:	e002      	b.n	8007fe2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007fdc:	887a      	ldrh	r2, [r7, #2]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	619a      	str	r2, [r3, #24]
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ff0:	b08f      	sub	sp, #60	; 0x3c
 8007ff2:	af0a      	add	r7, sp, #40	; 0x28
 8007ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e054      	b.n	80080aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f00d f9d6 	bl	80153cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2203      	movs	r2, #3
 8008024:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008030:	2b00      	cmp	r3, #0
 8008032:	d102      	bne.n	800803a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f006 ffd3 	bl	800efea <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	603b      	str	r3, [r7, #0]
 800804a:	687e      	ldr	r6, [r7, #4]
 800804c:	466d      	mov	r5, sp
 800804e:	f106 0410 	add.w	r4, r6, #16
 8008052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800805a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800805e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008062:	1d33      	adds	r3, r6, #4
 8008064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008066:	6838      	ldr	r0, [r7, #0]
 8008068:	f006 ff56 	bl	800ef18 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2101      	movs	r1, #1
 8008072:	4618      	mov	r0, r3
 8008074:	f006 ffca 	bl	800f00c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	603b      	str	r3, [r7, #0]
 800807e:	687e      	ldr	r6, [r7, #4]
 8008080:	466d      	mov	r5, sp
 8008082:	f106 0410 	add.w	r4, r6, #16
 8008086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800808a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800808c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800808e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008092:	e885 0003 	stmia.w	r5, {r0, r1}
 8008096:	1d33      	adds	r3, r6, #4
 8008098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800809a:	6838      	ldr	r0, [r7, #0]
 800809c:	f007 f8dc 	bl	800f258 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80080b2:	b590      	push	{r4, r7, lr}
 80080b4:	b089      	sub	sp, #36	; 0x24
 80080b6:	af04      	add	r7, sp, #16
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	4608      	mov	r0, r1
 80080bc:	4611      	mov	r1, r2
 80080be:	461a      	mov	r2, r3
 80080c0:	4603      	mov	r3, r0
 80080c2:	70fb      	strb	r3, [r7, #3]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70bb      	strb	r3, [r7, #2]
 80080c8:	4613      	mov	r3, r2
 80080ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <HAL_HCD_HC_Init+0x28>
 80080d6:	2302      	movs	r3, #2
 80080d8:	e07f      	b.n	80081da <HAL_HCD_HC_Init+0x128>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80080e2:	78fa      	ldrb	r2, [r7, #3]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	440b      	add	r3, r1
 80080f0:	333d      	adds	r3, #61	; 0x3d
 80080f2:	2200      	movs	r2, #0
 80080f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80080f6:	78fa      	ldrb	r2, [r7, #3]
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	440b      	add	r3, r1
 8008104:	3338      	adds	r3, #56	; 0x38
 8008106:	787a      	ldrb	r2, [r7, #1]
 8008108:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	4613      	mov	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	440b      	add	r3, r1
 8008118:	3340      	adds	r3, #64	; 0x40
 800811a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800811c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800811e:	78fa      	ldrb	r2, [r7, #3]
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	440b      	add	r3, r1
 800812c:	3339      	adds	r3, #57	; 0x39
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	440b      	add	r3, r1
 8008140:	333f      	adds	r3, #63	; 0x3f
 8008142:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008146:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	78bb      	ldrb	r3, [r7, #2]
 800814c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008150:	b2d8      	uxtb	r0, r3
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	440b      	add	r3, r1
 800815e:	333a      	adds	r3, #58	; 0x3a
 8008160:	4602      	mov	r2, r0
 8008162:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8008164:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008168:	2b00      	cmp	r3, #0
 800816a:	da0a      	bge.n	8008182 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800816c:	78fa      	ldrb	r2, [r7, #3]
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	440b      	add	r3, r1
 800817a:	333b      	adds	r3, #59	; 0x3b
 800817c:	2201      	movs	r2, #1
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	e009      	b.n	8008196 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	4613      	mov	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	00db      	lsls	r3, r3, #3
 800818e:	440b      	add	r3, r1
 8008190:	333b      	adds	r3, #59	; 0x3b
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	440b      	add	r3, r1
 80081a4:	333c      	adds	r3, #60	; 0x3c
 80081a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80081aa:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6818      	ldr	r0, [r3, #0]
 80081b0:	787c      	ldrb	r4, [r7, #1]
 80081b2:	78ba      	ldrb	r2, [r7, #2]
 80081b4:	78f9      	ldrb	r1, [r7, #3]
 80081b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081b8:	9302      	str	r3, [sp, #8]
 80081ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4623      	mov	r3, r4
 80081c8:	f007 f9bc 	bl	800f544 <USB_HC_Init>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd90      	pop	{r4, r7, pc}

080081e2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d101      	bne.n	8008200 <HAL_HCD_HC_Halt+0x1e>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e00f      	b.n	8008220 <HAL_HCD_HC_Halt+0x3e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	78fa      	ldrb	r2, [r7, #3]
 800820e:	4611      	mov	r1, r2
 8008210:	4618      	mov	r0, r3
 8008212:	f007 fbf6 	bl	800fa02 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	4608      	mov	r0, r1
 8008232:	4611      	mov	r1, r2
 8008234:	461a      	mov	r2, r3
 8008236:	4603      	mov	r3, r0
 8008238:	70fb      	strb	r3, [r7, #3]
 800823a:	460b      	mov	r3, r1
 800823c:	70bb      	strb	r3, [r7, #2]
 800823e:	4613      	mov	r3, r2
 8008240:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8008242:	78fa      	ldrb	r2, [r7, #3]
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	440b      	add	r3, r1
 8008250:	333b      	adds	r3, #59	; 0x3b
 8008252:	78ba      	ldrb	r2, [r7, #2]
 8008254:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	440b      	add	r3, r1
 8008264:	333f      	adds	r3, #63	; 0x3f
 8008266:	787a      	ldrb	r2, [r7, #1]
 8008268:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800826a:	7c3b      	ldrb	r3, [r7, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d114      	bne.n	800829a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8008270:	78fa      	ldrb	r2, [r7, #3]
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	440b      	add	r3, r1
 800827e:	3342      	adds	r3, #66	; 0x42
 8008280:	2203      	movs	r2, #3
 8008282:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8008284:	78fa      	ldrb	r2, [r7, #3]
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	4613      	mov	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	440b      	add	r3, r1
 8008292:	333d      	adds	r3, #61	; 0x3d
 8008294:	7f3a      	ldrb	r2, [r7, #28]
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	e009      	b.n	80082ae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	440b      	add	r3, r1
 80082a8:	3342      	adds	r3, #66	; 0x42
 80082aa:	2202      	movs	r2, #2
 80082ac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80082ae:	787b      	ldrb	r3, [r7, #1]
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	f200 80d6 	bhi.w	8008462 <HAL_HCD_HC_SubmitRequest+0x23a>
 80082b6:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <HAL_HCD_HC_SubmitRequest+0x94>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	080082cd 	.word	0x080082cd
 80082c0:	0800844d 	.word	0x0800844d
 80082c4:	08008339 	.word	0x08008339
 80082c8:	080083c3 	.word	0x080083c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80082cc:	7c3b      	ldrb	r3, [r7, #16]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	f040 80c9 	bne.w	8008466 <HAL_HCD_HC_SubmitRequest+0x23e>
 80082d4:	78bb      	ldrb	r3, [r7, #2]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f040 80c5 	bne.w	8008466 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80082dc:	8b3b      	ldrh	r3, [r7, #24]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	440b      	add	r3, r1
 80082f0:	3351      	adds	r3, #81	; 0x51
 80082f2:	2201      	movs	r2, #1
 80082f4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80082f6:	78fa      	ldrb	r2, [r7, #3]
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	440b      	add	r3, r1
 8008304:	3351      	adds	r3, #81	; 0x51
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800830c:	78fa      	ldrb	r2, [r7, #3]
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	440b      	add	r3, r1
 800831a:	3342      	adds	r3, #66	; 0x42
 800831c:	2200      	movs	r2, #0
 800831e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008320:	e0a1      	b.n	8008466 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	440b      	add	r3, r1
 8008330:	3342      	adds	r3, #66	; 0x42
 8008332:	2202      	movs	r2, #2
 8008334:	701a      	strb	r2, [r3, #0]
      break;
 8008336:	e096      	b.n	8008466 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8008338:	78bb      	ldrb	r3, [r7, #2]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d120      	bne.n	8008380 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	440b      	add	r3, r1
 800834c:	3351      	adds	r3, #81	; 0x51
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10a      	bne.n	800836a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008354:	78fa      	ldrb	r2, [r7, #3]
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	440b      	add	r3, r1
 8008362:	3342      	adds	r3, #66	; 0x42
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8008368:	e07e      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800836a:	78fa      	ldrb	r2, [r7, #3]
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	440b      	add	r3, r1
 8008378:	3342      	adds	r3, #66	; 0x42
 800837a:	2202      	movs	r2, #2
 800837c:	701a      	strb	r2, [r3, #0]
      break;
 800837e:	e073      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008380:	78fa      	ldrb	r2, [r7, #3]
 8008382:	6879      	ldr	r1, [r7, #4]
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	440b      	add	r3, r1
 800838e:	3350      	adds	r3, #80	; 0x50
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10a      	bne.n	80083ac <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	00db      	lsls	r3, r3, #3
 80083a2:	440b      	add	r3, r1
 80083a4:	3342      	adds	r3, #66	; 0x42
 80083a6:	2200      	movs	r2, #0
 80083a8:	701a      	strb	r2, [r3, #0]
      break;
 80083aa:	e05d      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80083ac:	78fa      	ldrb	r2, [r7, #3]
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	440b      	add	r3, r1
 80083ba:	3342      	adds	r3, #66	; 0x42
 80083bc:	2202      	movs	r2, #2
 80083be:	701a      	strb	r2, [r3, #0]
      break;
 80083c0:	e052      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80083c2:	78bb      	ldrb	r3, [r7, #2]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d120      	bne.n	800840a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80083c8:	78fa      	ldrb	r2, [r7, #3]
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	440b      	add	r3, r1
 80083d6:	3351      	adds	r3, #81	; 0x51
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80083de:	78fa      	ldrb	r2, [r7, #3]
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	440b      	add	r3, r1
 80083ec:	3342      	adds	r3, #66	; 0x42
 80083ee:	2200      	movs	r2, #0
 80083f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80083f2:	e039      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	440b      	add	r3, r1
 8008402:	3342      	adds	r3, #66	; 0x42
 8008404:	2202      	movs	r2, #2
 8008406:	701a      	strb	r2, [r3, #0]
      break;
 8008408:	e02e      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	4613      	mov	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	440b      	add	r3, r1
 8008418:	3350      	adds	r3, #80	; 0x50
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008420:	78fa      	ldrb	r2, [r7, #3]
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	440b      	add	r3, r1
 800842e:	3342      	adds	r3, #66	; 0x42
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
      break;
 8008434:	e018      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008436:	78fa      	ldrb	r2, [r7, #3]
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	440b      	add	r3, r1
 8008444:	3342      	adds	r3, #66	; 0x42
 8008446:	2202      	movs	r2, #2
 8008448:	701a      	strb	r2, [r3, #0]
      break;
 800844a:	e00d      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	440b      	add	r3, r1
 800845a:	3342      	adds	r3, #66	; 0x42
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
      break;
 8008460:	e002      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8008462:	bf00      	nop
 8008464:	e000      	b.n	8008468 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8008466:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8008468:	78fa      	ldrb	r2, [r7, #3]
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	440b      	add	r3, r1
 8008476:	3344      	adds	r3, #68	; 0x44
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800847c:	78fa      	ldrb	r2, [r7, #3]
 800847e:	8b39      	ldrh	r1, [r7, #24]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	4403      	add	r3, r0
 800848c:	3348      	adds	r3, #72	; 0x48
 800848e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	440b      	add	r3, r1
 800849e:	335c      	adds	r3, #92	; 0x5c
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80084a4:	78fa      	ldrb	r2, [r7, #3]
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	440b      	add	r3, r1
 80084b2:	334c      	adds	r3, #76	; 0x4c
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80084b8:	78fa      	ldrb	r2, [r7, #3]
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	440b      	add	r3, r1
 80084c6:	3339      	adds	r3, #57	; 0x39
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80084cc:	78fa      	ldrb	r2, [r7, #3]
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	440b      	add	r3, r1
 80084da:	335d      	adds	r3, #93	; 0x5d
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	3338      	adds	r3, #56	; 0x38
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	18d1      	adds	r1, r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	461a      	mov	r2, r3
 80084fc:	f007 f92c 	bl	800f758 <USB_HC_StartXfer>
 8008500:	4603      	mov	r3, r0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop

0800850c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	f006 fe55 	bl	800f1d2 <USB_GetMode>
 8008528:	4603      	mov	r3, r0
 800852a:	2b01      	cmp	r3, #1
 800852c:	f040 80ef 	bne.w	800870e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f006 fe39 	bl	800f1ac <USB_ReadInterrupts>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80e5 	beq.w	800870c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4618      	mov	r0, r3
 8008548:	f006 fe30 	bl	800f1ac <USB_ReadInterrupts>
 800854c:	4603      	mov	r3, r0
 800854e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008556:	d104      	bne.n	8008562 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008560:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f006 fe20 	bl	800f1ac <USB_ReadInterrupts>
 800856c:	4603      	mov	r3, r0
 800856e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008576:	d104      	bne.n	8008582 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008580:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f006 fe10 	bl	800f1ac <USB_ReadInterrupts>
 800858c:	4603      	mov	r3, r0
 800858e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008596:	d104      	bne.n	80085a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80085a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f006 fe00 	bl	800f1ac <USB_ReadInterrupts>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d103      	bne.n	80085be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2202      	movs	r2, #2
 80085bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f006 fdf2 	bl	800f1ac <USB_ReadInterrupts>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d2:	d115      	bne.n	8008600 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80085dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d108      	bne.n	8008600 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f00c ff5e 	bl	80154b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2101      	movs	r1, #1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f006 fedc 	bl	800f3b8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f006 fdd1 	bl	800f1ac <USB_ReadInterrupts>
 800860a:	4603      	mov	r3, r0
 800860c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008614:	d102      	bne.n	800861c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 f966 	bl	80098e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4618      	mov	r0, r3
 8008622:	f006 fdc3 	bl	800f1ac <USB_ReadInterrupts>
 8008626:	4603      	mov	r3, r0
 8008628:	f003 0308 	and.w	r3, r3, #8
 800862c:	2b08      	cmp	r3, #8
 800862e:	d106      	bne.n	800863e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f00c ff21 	bl	8015478 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2208      	movs	r2, #8
 800863c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4618      	mov	r0, r3
 8008644:	f006 fdb2 	bl	800f1ac <USB_ReadInterrupts>
 8008648:	4603      	mov	r3, r0
 800864a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800864e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008652:	d138      	bne.n	80086c6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4618      	mov	r0, r3
 800865a:	f007 f9c1 	bl	800f9e0 <USB_HC_ReadInterrupt>
 800865e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	e025      	b.n	80086b2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	fa22 f303 	lsr.w	r3, r2, r3
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d018      	beq.n	80086ac <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	4413      	add	r3, r2
 8008682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800868c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008690:	d106      	bne.n	80086a0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8cf 	bl	800883c <HCD_HC_IN_IRQHandler>
 800869e:	e005      	b.n	80086ac <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fcfd 	bl	80090a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	3301      	adds	r3, #1
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d3d4      	bcc.n	8008666 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f006 fd6e 	bl	800f1ac <USB_ReadInterrupts>
 80086d0:	4603      	mov	r3, r0
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	2b10      	cmp	r3, #16
 80086d8:	d101      	bne.n	80086de <HAL_HCD_IRQHandler+0x1d2>
 80086da:	2301      	movs	r3, #1
 80086dc:	e000      	b.n	80086e0 <HAL_HCD_IRQHandler+0x1d4>
 80086de:	2300      	movs	r3, #0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d014      	beq.n	800870e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	699a      	ldr	r2, [r3, #24]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0210 	bic.w	r2, r2, #16
 80086f2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 f84b 	bl	8009790 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	699a      	ldr	r2, [r3, #24]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f042 0210 	orr.w	r2, r2, #16
 8008708:	619a      	str	r2, [r3, #24]
 800870a:	e000      	b.n	800870e <HAL_HCD_IRQHandler+0x202>
      return;
 800870c:	bf00      	nop
    }
  }
}
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8008722:	2b01      	cmp	r3, #1
 8008724:	d101      	bne.n	800872a <HAL_HCD_Start+0x16>
 8008726:	2302      	movs	r3, #2
 8008728:	e013      	b.n	8008752 <HAL_HCD_Start+0x3e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f006 fc46 	bl	800efc8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2101      	movs	r1, #1
 8008742:	4618      	mov	r0, r3
 8008744:	f006 fe9c 	bl	800f480 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_HCD_Stop+0x16>
 800876c:	2302      	movs	r3, #2
 800876e:	e00d      	b.n	800878c <HAL_HCD_Stop+0x32>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4618      	mov	r0, r3
 800877e:	f007 fa7b 	bl	800fc78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f006 fe43 	bl	800f42c <USB_ResetPort>
 80087a6:	4603      	mov	r3, r0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	440b      	add	r3, r1
 80087ca:	335c      	adds	r3, #92	; 0x5c
 80087cc:	781b      	ldrb	r3, [r3, #0]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	440b      	add	r3, r1
 80087f4:	334c      	adds	r3, #76	; 0x4c
 80087f6:	681b      	ldr	r3, [r3, #0]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	f006 fe85 	bl	800f520 <USB_GetCurrentFrame>
 8008816:	4603      	mov	r3, r0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f006 fe60 	bl	800f4f2 <USB_GetHostSpeed>
 8008832:	4603      	mov	r3, r0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4413      	add	r3, r2
 800885e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	2b04      	cmp	r3, #4
 800886a:	d119      	bne.n	80088a0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	4413      	add	r3, r2
 8008874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008878:	461a      	mov	r2, r3
 800887a:	2304      	movs	r3, #4
 800887c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	4413      	add	r3, r2
 8008886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	440a      	add	r2, r1
 8008894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008898:	f043 0302 	orr.w	r3, r3, #2
 800889c:	60d3      	str	r3, [r2, #12]
 800889e:	e0ce      	b.n	8008a3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b6:	d12c      	bne.n	8008912 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c4:	461a      	mov	r2, r3
 80088c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	440b      	add	r3, r1
 80088da:	335d      	adds	r3, #93	; 0x5d
 80088dc:	2207      	movs	r2, #7
 80088de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	0151      	lsls	r1, r2, #5
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	440a      	add	r2, r1
 80088f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088fa:	f043 0302 	orr.w	r3, r3, #2
 80088fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f007 f879 	bl	800fa02 <USB_HC_Halt>
 8008910:	e095      	b.n	8008a3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	4413      	add	r3, r2
 800891a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f003 0320 	and.w	r3, r3, #32
 8008924:	2b20      	cmp	r3, #32
 8008926:	d109      	bne.n	800893c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	4413      	add	r3, r2
 8008930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008934:	461a      	mov	r2, r3
 8008936:	2320      	movs	r3, #32
 8008938:	6093      	str	r3, [r2, #8]
 800893a:	e080      	b.n	8008a3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	4413      	add	r3, r2
 8008944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 0308 	and.w	r3, r3, #8
 800894e:	2b08      	cmp	r3, #8
 8008950:	d134      	bne.n	80089bc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	4413      	add	r3, r2
 800895a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	0151      	lsls	r1, r2, #5
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	440a      	add	r2, r1
 8008968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800896c:	f043 0302 	orr.w	r3, r3, #2
 8008970:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	440b      	add	r3, r1
 8008980:	335d      	adds	r3, #93	; 0x5d
 8008982:	2205      	movs	r2, #5
 8008984:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	4413      	add	r3, r2
 800898e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008992:	461a      	mov	r2, r3
 8008994:	2310      	movs	r3, #16
 8008996:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a4:	461a      	mov	r2, r3
 80089a6:	2308      	movs	r3, #8
 80089a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	b2d2      	uxtb	r2, r2
 80089b2:	4611      	mov	r1, r2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f007 f824 	bl	800fa02 <USB_HC_Halt>
 80089ba:	e040      	b.n	8008a3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d2:	d134      	bne.n	8008a3e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089ee:	f043 0302 	orr.w	r3, r3, #2
 80089f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	b2d2      	uxtb	r2, r2
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f006 ffff 	bl	800fa02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a10:	461a      	mov	r2, r3
 8008a12:	2310      	movs	r3, #16
 8008a14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	440b      	add	r3, r1
 8008a24:	335d      	adds	r3, #93	; 0x5d
 8008a26:	2208      	movs	r2, #8
 8008a28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a36:	461a      	mov	r2, r3
 8008a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a3c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a54:	d122      	bne.n	8008a9c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	0151      	lsls	r1, r2, #5
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a70:	f043 0302 	orr.w	r3, r3, #2
 8008a74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	b2d2      	uxtb	r2, r2
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f006 ffbe 	bl	800fa02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a92:	461a      	mov	r2, r3
 8008a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a98:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8008a9a:	e300      	b.n	800909e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	f040 80fd 	bne.w	8008cae <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d01b      	beq.n	8008af4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	440b      	add	r3, r1
 8008aca:	3348      	adds	r3, #72	; 0x48
 8008acc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	0159      	lsls	r1, r3, #5
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	440b      	add	r3, r1
 8008ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8008ae0:	1ad1      	subs	r1, r2, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4403      	add	r3, r0
 8008af0:	334c      	adds	r3, #76	; 0x4c
 8008af2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	440b      	add	r3, r1
 8008b02:	335d      	adds	r3, #93	; 0x5d
 8008b04:	2201      	movs	r2, #1
 8008b06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	440b      	add	r3, r1
 8008b16:	3358      	adds	r3, #88	; 0x58
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b28:	461a      	mov	r2, r3
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	440b      	add	r3, r1
 8008b3c:	333f      	adds	r3, #63	; 0x3f
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	00db      	lsls	r3, r3, #3
 8008b50:	440b      	add	r3, r1
 8008b52:	333f      	adds	r3, #63	; 0x3f
 8008b54:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d121      	bne.n	8008b9e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b74:	f043 0302 	orr.w	r3, r3, #2
 8008b78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	b2d2      	uxtb	r2, r2
 8008b82:	4611      	mov	r1, r2
 8008b84:	4618      	mov	r0, r3
 8008b86:	f006 ff3c 	bl	800fa02 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b96:	461a      	mov	r2, r3
 8008b98:	2310      	movs	r3, #16
 8008b9a:	6093      	str	r3, [r2, #8]
 8008b9c:	e070      	b.n	8008c80 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	440b      	add	r3, r1
 8008bac:	333f      	adds	r3, #63	; 0x3f
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d12a      	bne.n	8008c0a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bd2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	440b      	add	r3, r1
 8008be2:	335c      	adds	r3, #92	; 0x5c
 8008be4:	2201      	movs	r2, #1
 8008be6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	b2d8      	uxtb	r0, r3
 8008bec:	6879      	ldr	r1, [r7, #4]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	440b      	add	r3, r1
 8008bfa:	335c      	adds	r3, #92	; 0x5c
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	4601      	mov	r1, r0
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f00c fc62 	bl	80154cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8008c08:	e03a      	b.n	8008c80 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	440b      	add	r3, r1
 8008c18:	333f      	adds	r3, #63	; 0x3f
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d12f      	bne.n	8008c80 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4613      	mov	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	440b      	add	r3, r1
 8008c2e:	335c      	adds	r3, #92	; 0x5c
 8008c30:	2201      	movs	r2, #1
 8008c32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	440b      	add	r3, r1
 8008c42:	3350      	adds	r3, #80	; 0x50
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	f083 0301 	eor.w	r3, r3, #1
 8008c4a:	b2d8      	uxtb	r0, r3
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	440b      	add	r3, r1
 8008c5a:	3350      	adds	r3, #80	; 0x50
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	b2d8      	uxtb	r0, r3
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	440b      	add	r3, r1
 8008c72:	335c      	adds	r3, #92	; 0x5c
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	4601      	mov	r1, r0
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f00c fc26 	bl	80154cc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	440b      	add	r3, r1
 8008c8e:	3350      	adds	r3, #80	; 0x50
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	f083 0301 	eor.w	r3, r3, #1
 8008c96:	b2d8      	uxtb	r0, r3
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	440b      	add	r3, r1
 8008ca6:	3350      	adds	r3, #80	; 0x50
 8008ca8:	4602      	mov	r2, r0
 8008caa:	701a      	strb	r2, [r3, #0]
}
 8008cac:	e1f7      	b.n	800909e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	f040 811a 	bne.w	8008efa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	0151      	lsls	r1, r2, #5
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	440a      	add	r2, r1
 8008cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ce0:	f023 0302 	bic.w	r3, r3, #2
 8008ce4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	440b      	add	r3, r1
 8008cf4:	335d      	adds	r3, #93	; 0x5d
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d10a      	bne.n	8008d12 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	4613      	mov	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	440b      	add	r3, r1
 8008d0a:	335c      	adds	r3, #92	; 0x5c
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	701a      	strb	r2, [r3, #0]
 8008d10:	e0d9      	b.n	8008ec6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	440b      	add	r3, r1
 8008d20:	335d      	adds	r3, #93	; 0x5d
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b05      	cmp	r3, #5
 8008d26:	d10a      	bne.n	8008d3e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	440b      	add	r3, r1
 8008d36:	335c      	adds	r3, #92	; 0x5c
 8008d38:	2205      	movs	r2, #5
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	e0c3      	b.n	8008ec6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	440b      	add	r3, r1
 8008d4c:	335d      	adds	r3, #93	; 0x5d
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b06      	cmp	r3, #6
 8008d52:	d00a      	beq.n	8008d6a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	440b      	add	r3, r1
 8008d62:	335d      	adds	r3, #93	; 0x5d
 8008d64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	d156      	bne.n	8008e18 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	440b      	add	r3, r1
 8008d78:	3358      	adds	r3, #88	; 0x58
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	1c59      	adds	r1, r3, #1
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	4403      	add	r3, r0
 8008d8c:	3358      	adds	r3, #88	; 0x58
 8008d8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	4613      	mov	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3358      	adds	r3, #88	; 0x58
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d914      	bls.n	8008dd0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	440b      	add	r3, r1
 8008db4:	3358      	adds	r3, #88	; 0x58
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	440b      	add	r3, r1
 8008dc8:	335c      	adds	r3, #92	; 0x5c
 8008dca:	2204      	movs	r2, #4
 8008dcc:	701a      	strb	r2, [r3, #0]
 8008dce:	e009      	b.n	8008de4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	440b      	add	r3, r1
 8008dde:	335c      	adds	r3, #92	; 0x5c
 8008de0:	2202      	movs	r2, #2
 8008de2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008dfa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e02:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e10:	461a      	mov	r2, r3
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	e056      	b.n	8008ec6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	440b      	add	r3, r1
 8008e26:	335d      	adds	r3, #93	; 0x5d
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d123      	bne.n	8008e76 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4613      	mov	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	440b      	add	r3, r1
 8008e3c:	335c      	adds	r3, #92	; 0x5c
 8008e3e:	2202      	movs	r2, #2
 8008e40:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e58:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e60:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e6e:	461a      	mov	r2, r3
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	e027      	b.n	8008ec6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	440b      	add	r3, r1
 8008e84:	335d      	adds	r3, #93	; 0x5d
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b07      	cmp	r3, #7
 8008e8a:	d11c      	bne.n	8008ec6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4613      	mov	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	440b      	add	r3, r1
 8008e9a:	3358      	adds	r3, #88	; 0x58
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	1c59      	adds	r1, r3, #1
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	4403      	add	r3, r0
 8008eae:	3358      	adds	r3, #88	; 0x58
 8008eb0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	440b      	add	r3, r1
 8008ec0:	335c      	adds	r3, #92	; 0x5c
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	b2d8      	uxtb	r0, r3
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	440b      	add	r3, r1
 8008eea:	335c      	adds	r3, #92	; 0x5c
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	4601      	mov	r1, r0
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f00c faea 	bl	80154cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008ef8:	e0d1      	b.n	800909e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d13e      	bne.n	8008f8e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f2a:	f043 0302 	orr.w	r3, r3, #2
 8008f2e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	440b      	add	r3, r1
 8008f3e:	3358      	adds	r3, #88	; 0x58
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	1c59      	adds	r1, r3, #1
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	4403      	add	r3, r0
 8008f52:	3358      	adds	r3, #88	; 0x58
 8008f54:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	440b      	add	r3, r1
 8008f64:	335d      	adds	r3, #93	; 0x5d
 8008f66:	2206      	movs	r2, #6
 8008f68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	b2d2      	uxtb	r2, r2
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f006 fd44 	bl	800fa02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f86:	461a      	mov	r2, r3
 8008f88:	2380      	movs	r3, #128	; 0x80
 8008f8a:	6093      	str	r3, [r2, #8]
}
 8008f8c:	e087      	b.n	800909e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 0310 	and.w	r3, r3, #16
 8008fa0:	2b10      	cmp	r3, #16
 8008fa2:	d17c      	bne.n	800909e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	440b      	add	r3, r1
 8008fb2:	333f      	adds	r3, #63	; 0x3f
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d122      	bne.n	8009000 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	440b      	add	r3, r1
 8008fc8:	3358      	adds	r3, #88	; 0x58
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	0151      	lsls	r1, r2, #5
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	440a      	add	r2, r1
 8008fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fe8:	f043 0302 	orr.w	r3, r3, #2
 8008fec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	b2d2      	uxtb	r2, r2
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f006 fd02 	bl	800fa02 <USB_HC_Halt>
 8008ffe:	e045      	b.n	800908c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	00db      	lsls	r3, r3, #3
 800900c:	440b      	add	r3, r1
 800900e:	333f      	adds	r3, #63	; 0x3f
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	440b      	add	r3, r1
 8009024:	333f      	adds	r3, #63	; 0x3f
 8009026:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009028:	2b02      	cmp	r3, #2
 800902a:	d12f      	bne.n	800908c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	440b      	add	r3, r1
 800903a:	3358      	adds	r3, #88	; 0x58
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d121      	bne.n	800908c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	440b      	add	r3, r1
 8009056:	335d      	adds	r3, #93	; 0x5d
 8009058:	2203      	movs	r2, #3
 800905a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	4413      	add	r3, r2
 8009064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	0151      	lsls	r1, r2, #5
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	440a      	add	r2, r1
 8009072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009076:	f043 0302 	orr.w	r3, r3, #2
 800907a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	b2d2      	uxtb	r2, r2
 8009084:	4611      	mov	r1, r2
 8009086:	4618      	mov	r0, r3
 8009088:	f006 fcbb 	bl	800fa02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	4413      	add	r3, r2
 8009094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009098:	461a      	mov	r2, r3
 800909a:	2310      	movs	r3, #16
 800909c:	6093      	str	r3, [r2, #8]
}
 800909e:	bf00      	nop
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b086      	sub	sp, #24
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d119      	bne.n	800910a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e2:	461a      	mov	r2, r3
 80090e4:	2304      	movs	r3, #4
 80090e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	0151      	lsls	r1, r2, #5
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	440a      	add	r2, r1
 80090fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009102:	f043 0302 	orr.w	r3, r3, #2
 8009106:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8009108:	e33e      	b.n	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	4413      	add	r3, r2
 8009112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b20      	cmp	r3, #32
 800911e:	d141      	bne.n	80091a4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	4413      	add	r3, r2
 8009128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800912c:	461a      	mov	r2, r3
 800912e:	2320      	movs	r3, #32
 8009130:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	440b      	add	r3, r1
 8009140:	333d      	adds	r3, #61	; 0x3d
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	f040 831f 	bne.w	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	00db      	lsls	r3, r3, #3
 8009156:	440b      	add	r3, r1
 8009158:	333d      	adds	r3, #61	; 0x3d
 800915a:	2200      	movs	r2, #0
 800915c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	440b      	add	r3, r1
 800916c:	335c      	adds	r3, #92	; 0x5c
 800916e:	2202      	movs	r2, #2
 8009170:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	4413      	add	r3, r2
 800917a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	0151      	lsls	r1, r2, #5
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	440a      	add	r2, r1
 8009188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800918c:	f043 0302 	orr.w	r3, r3, #2
 8009190:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	4611      	mov	r1, r2
 800919c:	4618      	mov	r0, r3
 800919e:	f006 fc30 	bl	800fa02 <USB_HC_Halt>
}
 80091a2:	e2f1      	b.n	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d13f      	bne.n	800923a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	00db      	lsls	r3, r3, #3
 80091c6:	440b      	add	r3, r1
 80091c8:	335d      	adds	r3, #93	; 0x5d
 80091ca:	2204      	movs	r2, #4
 80091cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	440b      	add	r3, r1
 80091dc:	333d      	adds	r3, #61	; 0x3d
 80091de:	2201      	movs	r2, #1
 80091e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	440b      	add	r3, r1
 80091f0:	3358      	adds	r3, #88	; 0x58
 80091f2:	2200      	movs	r2, #0
 80091f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	440a      	add	r2, r1
 800920c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009210:	f043 0302 	orr.w	r3, r3, #2
 8009214:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	b2d2      	uxtb	r2, r2
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f006 fbee 	bl	800fa02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	4413      	add	r3, r2
 800922e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009232:	461a      	mov	r2, r3
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	6093      	str	r3, [r2, #8]
}
 8009238:	e2a6      	b.n	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	4413      	add	r3, r2
 8009242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800924c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009250:	d122      	bne.n	8009298 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	4413      	add	r3, r2
 800925a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	0151      	lsls	r1, r2, #5
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	440a      	add	r2, r1
 8009268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800926c:	f043 0302 	orr.w	r3, r3, #2
 8009270:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	b2d2      	uxtb	r2, r2
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f006 fbc0 	bl	800fa02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	4413      	add	r3, r2
 800928a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800928e:	461a      	mov	r2, r3
 8009290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009294:	6093      	str	r3, [r2, #8]
}
 8009296:	e277      	b.n	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d135      	bne.n	800931a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80092ae:	6879      	ldr	r1, [r7, #4]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	4613      	mov	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	440b      	add	r3, r1
 80092bc:	3358      	adds	r3, #88	; 0x58
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092dc:	f043 0302 	orr.w	r3, r3, #2
 80092e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	b2d2      	uxtb	r2, r2
 80092ea:	4611      	mov	r1, r2
 80092ec:	4618      	mov	r0, r3
 80092ee:	f006 fb88 	bl	800fa02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fe:	461a      	mov	r2, r3
 8009300:	2301      	movs	r3, #1
 8009302:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4613      	mov	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	440b      	add	r3, r1
 8009312:	335d      	adds	r3, #93	; 0x5d
 8009314:	2201      	movs	r2, #1
 8009316:	701a      	strb	r2, [r3, #0]
}
 8009318:	e236      	b.n	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	4413      	add	r3, r2
 8009322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f003 0308 	and.w	r3, r3, #8
 800932c:	2b08      	cmp	r3, #8
 800932e:	d12b      	bne.n	8009388 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	4413      	add	r3, r2
 8009338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800933c:	461a      	mov	r2, r3
 800933e:	2308      	movs	r3, #8
 8009340:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	4413      	add	r3, r2
 800934a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	0151      	lsls	r1, r2, #5
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	440a      	add	r2, r1
 8009358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800935c:	f043 0302 	orr.w	r3, r3, #2
 8009360:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	b2d2      	uxtb	r2, r2
 800936a:	4611      	mov	r1, r2
 800936c:	4618      	mov	r0, r3
 800936e:	f006 fb48 	bl	800fa02 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	4613      	mov	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	00db      	lsls	r3, r3, #3
 800937e:	440b      	add	r3, r1
 8009380:	335d      	adds	r3, #93	; 0x5d
 8009382:	2205      	movs	r2, #5
 8009384:	701a      	strb	r2, [r3, #0]
}
 8009386:	e1ff      	b.n	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4413      	add	r3, r2
 8009390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0310 	and.w	r3, r3, #16
 800939a:	2b10      	cmp	r3, #16
 800939c:	d155      	bne.n	800944a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	440b      	add	r3, r1
 80093ac:	3358      	adds	r3, #88	; 0x58
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	440b      	add	r3, r1
 80093c0:	335d      	adds	r3, #93	; 0x5d
 80093c2:	2203      	movs	r2, #3
 80093c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	440b      	add	r3, r1
 80093d4:	333d      	adds	r3, #61	; 0x3d
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d114      	bne.n	8009406 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	440b      	add	r3, r1
 80093ea:	333c      	adds	r3, #60	; 0x3c
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	00db      	lsls	r3, r3, #3
 80093fe:	440b      	add	r3, r1
 8009400:	333d      	adds	r3, #61	; 0x3d
 8009402:	2201      	movs	r2, #1
 8009404:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	4413      	add	r3, r2
 800940e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	0151      	lsls	r1, r2, #5
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	440a      	add	r2, r1
 800941c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009420:	f043 0302 	orr.w	r3, r3, #2
 8009424:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	b2d2      	uxtb	r2, r2
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f006 fae6 	bl	800fa02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	4413      	add	r3, r2
 800943e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009442:	461a      	mov	r2, r3
 8009444:	2310      	movs	r3, #16
 8009446:	6093      	str	r3, [r2, #8]
}
 8009448:	e19e      	b.n	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	4413      	add	r3, r2
 8009452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945c:	2b80      	cmp	r3, #128	; 0x80
 800945e:	d12b      	bne.n	80094b8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	4413      	add	r3, r2
 8009468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	0151      	lsls	r1, r2, #5
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	440a      	add	r2, r1
 8009476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800947a:	f043 0302 	orr.w	r3, r3, #2
 800947e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f006 fab9 	bl	800fa02 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	440b      	add	r3, r1
 800949e:	335d      	adds	r3, #93	; 0x5d
 80094a0:	2206      	movs	r2, #6
 80094a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b0:	461a      	mov	r2, r3
 80094b2:	2380      	movs	r3, #128	; 0x80
 80094b4:	6093      	str	r3, [r2, #8]
}
 80094b6:	e167      	b.n	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ce:	d135      	bne.n	800953c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	0151      	lsls	r1, r2, #5
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	440a      	add	r2, r1
 80094e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094ea:	f043 0302 	orr.w	r3, r3, #2
 80094ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f006 fa81 	bl	800fa02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	4413      	add	r3, r2
 8009508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950c:	461a      	mov	r2, r3
 800950e:	2310      	movs	r3, #16
 8009510:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	4413      	add	r3, r2
 800951a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800951e:	461a      	mov	r2, r3
 8009520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009524:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	440b      	add	r3, r1
 8009534:	335d      	adds	r3, #93	; 0x5d
 8009536:	2208      	movs	r2, #8
 8009538:	701a      	strb	r2, [r3, #0]
}
 800953a:	e125      	b.n	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	4413      	add	r3, r2
 8009544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f003 0302 	and.w	r3, r3, #2
 800954e:	2b02      	cmp	r3, #2
 8009550:	f040 811a 	bne.w	8009788 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	4413      	add	r3, r2
 800955c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	440a      	add	r2, r1
 800956a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800956e:	f023 0302 	bic.w	r3, r3, #2
 8009572:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	440b      	add	r3, r1
 8009582:	335d      	adds	r3, #93	; 0x5d
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d137      	bne.n	80095fa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4613      	mov	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	440b      	add	r3, r1
 8009598:	335c      	adds	r3, #92	; 0x5c
 800959a:	2201      	movs	r2, #1
 800959c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	440b      	add	r3, r1
 80095ac:	333f      	adds	r3, #63	; 0x3f
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d00b      	beq.n	80095cc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	4613      	mov	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	440b      	add	r3, r1
 80095c2:	333f      	adds	r3, #63	; 0x3f
 80095c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	f040 80c5 	bne.w	8009756 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	4613      	mov	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	440b      	add	r3, r1
 80095da:	3351      	adds	r3, #81	; 0x51
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	f083 0301 	eor.w	r3, r3, #1
 80095e2:	b2d8      	uxtb	r0, r3
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	440b      	add	r3, r1
 80095f2:	3351      	adds	r3, #81	; 0x51
 80095f4:	4602      	mov	r2, r0
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	e0ad      	b.n	8009756 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	440b      	add	r3, r1
 8009608:	335d      	adds	r3, #93	; 0x5d
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	2b03      	cmp	r3, #3
 800960e:	d10a      	bne.n	8009626 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009610:	6879      	ldr	r1, [r7, #4]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	4613      	mov	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	440b      	add	r3, r1
 800961e:	335c      	adds	r3, #92	; 0x5c
 8009620:	2202      	movs	r2, #2
 8009622:	701a      	strb	r2, [r3, #0]
 8009624:	e097      	b.n	8009756 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	440b      	add	r3, r1
 8009634:	335d      	adds	r3, #93	; 0x5d
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b04      	cmp	r3, #4
 800963a:	d10a      	bne.n	8009652 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4613      	mov	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	00db      	lsls	r3, r3, #3
 8009648:	440b      	add	r3, r1
 800964a:	335c      	adds	r3, #92	; 0x5c
 800964c:	2202      	movs	r2, #2
 800964e:	701a      	strb	r2, [r3, #0]
 8009650:	e081      	b.n	8009756 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4613      	mov	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	440b      	add	r3, r1
 8009660:	335d      	adds	r3, #93	; 0x5d
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b05      	cmp	r3, #5
 8009666:	d10a      	bne.n	800967e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	440b      	add	r3, r1
 8009676:	335c      	adds	r3, #92	; 0x5c
 8009678:	2205      	movs	r2, #5
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	e06b      	b.n	8009756 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	440b      	add	r3, r1
 800968c:	335d      	adds	r3, #93	; 0x5d
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b06      	cmp	r3, #6
 8009692:	d00a      	beq.n	80096aa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	440b      	add	r3, r1
 80096a2:	335d      	adds	r3, #93	; 0x5d
 80096a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80096a6:	2b08      	cmp	r3, #8
 80096a8:	d155      	bne.n	8009756 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80096aa:	6879      	ldr	r1, [r7, #4]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	440b      	add	r3, r1
 80096b8:	3358      	adds	r3, #88	; 0x58
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	1c59      	adds	r1, r3, #1
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	4403      	add	r3, r0
 80096cc:	3358      	adds	r3, #88	; 0x58
 80096ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	440b      	add	r3, r1
 80096de:	3358      	adds	r3, #88	; 0x58
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d914      	bls.n	8009710 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4613      	mov	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	440b      	add	r3, r1
 80096f4:	3358      	adds	r3, #88	; 0x58
 80096f6:	2200      	movs	r2, #0
 80096f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	440b      	add	r3, r1
 8009708:	335c      	adds	r3, #92	; 0x5c
 800970a:	2204      	movs	r2, #4
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	e009      	b.n	8009724 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	4613      	mov	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	440b      	add	r3, r1
 800971e:	335c      	adds	r3, #92	; 0x5c
 8009720:	2202      	movs	r2, #2
 8009722:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	4413      	add	r3, r2
 800972c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800973a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009742:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	4413      	add	r3, r2
 800974c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009750:	461a      	mov	r2, r3
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	4413      	add	r3, r2
 800975e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009762:	461a      	mov	r2, r3
 8009764:	2302      	movs	r3, #2
 8009766:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	b2d8      	uxtb	r0, r3
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	440b      	add	r3, r1
 800977a:	335c      	adds	r3, #92	; 0x5c
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	4601      	mov	r1, r0
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f00b fea2 	bl	80154cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009788:	bf00      	nop
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08a      	sub	sp, #40	; 0x28
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	f003 030f 	and.w	r3, r3, #15
 80097b0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	0c5b      	lsrs	r3, r3, #17
 80097b6:	f003 030f 	and.w	r3, r3, #15
 80097ba:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	091b      	lsrs	r3, r3, #4
 80097c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097c4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d003      	beq.n	80097d4 <HCD_RXQLVL_IRQHandler+0x44>
 80097cc:	2b05      	cmp	r3, #5
 80097ce:	f000 8082 	beq.w	80098d6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80097d2:	e083      	b.n	80098dc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d07f      	beq.n	80098da <HCD_RXQLVL_IRQHandler+0x14a>
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	4613      	mov	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	440b      	add	r3, r1
 80097e8:	3344      	adds	r3, #68	; 0x44
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d074      	beq.n	80098da <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6818      	ldr	r0, [r3, #0]
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	440b      	add	r3, r1
 8009802:	3344      	adds	r3, #68	; 0x44
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	b292      	uxth	r2, r2
 800980a:	4619      	mov	r1, r3
 800980c:	f005 fca5 	bl	800f15a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	440b      	add	r3, r1
 800981e:	3344      	adds	r3, #68	; 0x44
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	18d1      	adds	r1, r2, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	69ba      	ldr	r2, [r7, #24]
 800982a:	4613      	mov	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	4403      	add	r3, r0
 8009834:	3344      	adds	r3, #68	; 0x44
 8009836:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	440b      	add	r3, r1
 8009846:	334c      	adds	r3, #76	; 0x4c
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	18d1      	adds	r1, r2, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	4403      	add	r3, r0
 800985c:	334c      	adds	r3, #76	; 0x4c
 800985e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	4413      	add	r3, r2
 8009868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	4b1d      	ldr	r3, [pc, #116]	; (80098e4 <HCD_RXQLVL_IRQHandler+0x154>)
 8009870:	4013      	ands	r3, r2
 8009872:	2b00      	cmp	r3, #0
 8009874:	d031      	beq.n	80098da <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	4413      	add	r3, r2
 800987e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800988c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009894:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	4413      	add	r3, r2
 800989e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a2:	461a      	mov	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80098a8:	6879      	ldr	r1, [r7, #4]
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	440b      	add	r3, r1
 80098b6:	3350      	adds	r3, #80	; 0x50
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	f083 0301 	eor.w	r3, r3, #1
 80098be:	b2d8      	uxtb	r0, r3
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	440b      	add	r3, r1
 80098ce:	3350      	adds	r3, #80	; 0x50
 80098d0:	4602      	mov	r2, r0
 80098d2:	701a      	strb	r2, [r3, #0]
      break;
 80098d4:	e001      	b.n	80098da <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80098d6:	bf00      	nop
 80098d8:	e000      	b.n	80098dc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80098da:	bf00      	nop
  }
}
 80098dc:	bf00      	nop
 80098de:	3728      	adds	r7, #40	; 0x28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	1ff80000 	.word	0x1ff80000

080098e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009914:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b02      	cmp	r3, #2
 800991e:	d10b      	bne.n	8009938 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b01      	cmp	r3, #1
 8009928:	d102      	bne.n	8009930 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f00b fdb2 	bl	8015494 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f043 0302 	orr.w	r3, r3, #2
 8009936:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f003 0308 	and.w	r3, r3, #8
 800993e:	2b08      	cmp	r3, #8
 8009940:	d132      	bne.n	80099a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f043 0308 	orr.w	r3, r3, #8
 8009948:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b04      	cmp	r3, #4
 8009952:	d126      	bne.n	80099a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	2b02      	cmp	r3, #2
 800995a:	d113      	bne.n	8009984 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009962:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009966:	d106      	bne.n	8009976 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2102      	movs	r1, #2
 800996e:	4618      	mov	r0, r3
 8009970:	f005 fd22 	bl	800f3b8 <USB_InitFSLSPClkSel>
 8009974:	e011      	b.n	800999a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2101      	movs	r1, #1
 800997c:	4618      	mov	r0, r3
 800997e:	f005 fd1b 	bl	800f3b8 <USB_InitFSLSPClkSel>
 8009982:	e00a      	b.n	800999a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d106      	bne.n	800999a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009992:	461a      	mov	r2, r3
 8009994:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009998:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f00b fda8 	bl	80154f0 <HAL_HCD_PortEnabled_Callback>
 80099a0:	e002      	b.n	80099a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f00b fdb2 	bl	801550c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f003 0320 	and.w	r3, r3, #32
 80099ae:	2b20      	cmp	r3, #32
 80099b0:	d103      	bne.n	80099ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f043 0320 	orr.w	r3, r3, #32
 80099b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099c0:	461a      	mov	r2, r3
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	6013      	str	r3, [r2, #0]
}
 80099c6:	bf00      	nop
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e07f      	b.n	8009ae2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7f8 fd0a 	bl	8002410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2224      	movs	r2, #36	; 0x24
 8009a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 0201 	bic.w	r2, r2, #1
 8009a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009a20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d107      	bne.n	8009a4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	689a      	ldr	r2, [r3, #8]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a46:	609a      	str	r2, [r3, #8]
 8009a48:	e006      	b.n	8009a58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689a      	ldr	r2, [r3, #8]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009a56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d104      	bne.n	8009a6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6859      	ldr	r1, [r3, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	4b1d      	ldr	r3, [pc, #116]	; (8009aec <HAL_I2C_Init+0x11c>)
 8009a76:	430b      	orrs	r3, r1
 8009a78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	691a      	ldr	r2, [r3, #16]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	ea42 0103 	orr.w	r1, r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	021a      	lsls	r2, r3, #8
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	69d9      	ldr	r1, [r3, #28]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a1a      	ldr	r2, [r3, #32]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0201 	orr.w	r2, r2, #1
 8009ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	02008000 	.word	0x02008000

08009af0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e021      	b.n	8009b46 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2224      	movs	r2, #36	; 0x24
 8009b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 0201 	bic.w	r2, r2, #1
 8009b18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7f8 fcf0 	bl	8002500 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af02      	add	r7, sp, #8
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	4608      	mov	r0, r1
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	4603      	mov	r3, r0
 8009b60:	817b      	strh	r3, [r7, #10]
 8009b62:	460b      	mov	r3, r1
 8009b64:	813b      	strh	r3, [r7, #8]
 8009b66:	4613      	mov	r3, r2
 8009b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b20      	cmp	r3, #32
 8009b74:	f040 80f9 	bne.w	8009d6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <HAL_I2C_Mem_Write+0x34>
 8009b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d105      	bne.n	8009b90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e0ed      	b.n	8009d6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_I2C_Mem_Write+0x4e>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e0e6      	b.n	8009d6c <HAL_I2C_Mem_Write+0x21c>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009ba6:	f7fc facf 	bl	8006148 <HAL_GetTick>
 8009baa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	2319      	movs	r3, #25
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 fad1 	bl	800a160 <I2C_WaitOnFlagUntilTimeout>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e0d1      	b.n	8009d6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2221      	movs	r2, #33	; 0x21
 8009bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2240      	movs	r2, #64	; 0x40
 8009bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6a3a      	ldr	r2, [r7, #32]
 8009be2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bf0:	88f8      	ldrh	r0, [r7, #6]
 8009bf2:	893a      	ldrh	r2, [r7, #8]
 8009bf4:	8979      	ldrh	r1, [r7, #10]
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	9301      	str	r3, [sp, #4]
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	4603      	mov	r3, r0
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f9e1 	bl	8009fc8 <I2C_RequestMemoryWrite>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e0a9      	b.n	8009d6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	2bff      	cmp	r3, #255	; 0xff
 8009c20:	d90e      	bls.n	8009c40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	22ff      	movs	r2, #255	; 0xff
 8009c26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	8979      	ldrh	r1, [r7, #10]
 8009c30:	2300      	movs	r3, #0
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fbb3 	bl	800a3a4 <I2C_TransferConfig>
 8009c3e:	e00f      	b.n	8009c60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	8979      	ldrh	r1, [r7, #10]
 8009c52:	2300      	movs	r3, #0
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 fba2 	bl	800a3a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 fabb 	bl	800a1e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e07b      	b.n	8009d6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	781a      	ldrb	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	3b01      	subs	r3, #1
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d034      	beq.n	8009d18 <HAL_I2C_Mem_Write+0x1c8>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d130      	bne.n	8009d18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2180      	movs	r1, #128	; 0x80
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 fa4d 	bl	800a160 <I2C_WaitOnFlagUntilTimeout>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e04d      	b.n	8009d6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	2bff      	cmp	r3, #255	; 0xff
 8009cd8:	d90e      	bls.n	8009cf8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	22ff      	movs	r2, #255	; 0xff
 8009cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	8979      	ldrh	r1, [r7, #10]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 fb57 	bl	800a3a4 <I2C_TransferConfig>
 8009cf6:	e00f      	b.n	8009d18 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	8979      	ldrh	r1, [r7, #10]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 fb46 	bl	800a3a4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d19e      	bne.n	8009c60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fa9a 	bl	800a260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e01a      	b.n	8009d6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6859      	ldr	r1, [r3, #4]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <HAL_I2C_Mem_Write+0x224>)
 8009d4a:	400b      	ands	r3, r1
 8009d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	e000      	b.n	8009d6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009d6a:	2302      	movs	r3, #2
  }
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	fe00e800 	.word	0xfe00e800

08009d78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af02      	add	r7, sp, #8
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	4608      	mov	r0, r1
 8009d82:	4611      	mov	r1, r2
 8009d84:	461a      	mov	r2, r3
 8009d86:	4603      	mov	r3, r0
 8009d88:	817b      	strh	r3, [r7, #10]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	813b      	strh	r3, [r7, #8]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b20      	cmp	r3, #32
 8009d9c:	f040 80fd 	bne.w	8009f9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <HAL_I2C_Mem_Read+0x34>
 8009da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d105      	bne.n	8009db8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009db2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e0f1      	b.n	8009f9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d101      	bne.n	8009dc6 <HAL_I2C_Mem_Read+0x4e>
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	e0ea      	b.n	8009f9c <HAL_I2C_Mem_Read+0x224>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009dce:	f7fc f9bb 	bl	8006148 <HAL_GetTick>
 8009dd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	2319      	movs	r3, #25
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 f9bd 	bl	800a160 <I2C_WaitOnFlagUntilTimeout>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e0d5      	b.n	8009f9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2222      	movs	r2, #34	; 0x22
 8009df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2240      	movs	r2, #64	; 0x40
 8009dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a3a      	ldr	r2, [r7, #32]
 8009e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e18:	88f8      	ldrh	r0, [r7, #6]
 8009e1a:	893a      	ldrh	r2, [r7, #8]
 8009e1c:	8979      	ldrh	r1, [r7, #10]
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	4603      	mov	r3, r0
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 f921 	bl	800a070 <I2C_RequestMemoryRead>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d005      	beq.n	8009e40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e0ad      	b.n	8009f9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	2bff      	cmp	r3, #255	; 0xff
 8009e48:	d90e      	bls.n	8009e68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	22ff      	movs	r2, #255	; 0xff
 8009e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	8979      	ldrh	r1, [r7, #10]
 8009e58:	4b52      	ldr	r3, [pc, #328]	; (8009fa4 <HAL_I2C_Mem_Read+0x22c>)
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 fa9f 	bl	800a3a4 <I2C_TransferConfig>
 8009e66:	e00f      	b.n	8009e88 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	8979      	ldrh	r1, [r7, #10]
 8009e7a:	4b4a      	ldr	r3, [pc, #296]	; (8009fa4 <HAL_I2C_Mem_Read+0x22c>)
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f000 fa8e 	bl	800a3a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2104      	movs	r1, #4
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 f964 	bl	800a160 <I2C_WaitOnFlagUntilTimeout>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e07c      	b.n	8009f9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d034      	beq.n	8009f48 <HAL_I2C_Mem_Read+0x1d0>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d130      	bne.n	8009f48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	2200      	movs	r2, #0
 8009eee:	2180      	movs	r1, #128	; 0x80
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f935 	bl	800a160 <I2C_WaitOnFlagUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e04d      	b.n	8009f9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	2bff      	cmp	r3, #255	; 0xff
 8009f08:	d90e      	bls.n	8009f28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	22ff      	movs	r2, #255	; 0xff
 8009f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	8979      	ldrh	r1, [r7, #10]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 fa3f 	bl	800a3a4 <I2C_TransferConfig>
 8009f26:	e00f      	b.n	8009f48 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	8979      	ldrh	r1, [r7, #10]
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fa2e 	bl	800a3a4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d19a      	bne.n	8009e88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 f982 	bl	800a260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e01a      	b.n	8009f9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2220      	movs	r2, #32
 8009f6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6859      	ldr	r1, [r3, #4]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	4b0b      	ldr	r3, [pc, #44]	; (8009fa8 <HAL_I2C_Mem_Read+0x230>)
 8009f7a:	400b      	ands	r3, r1
 8009f7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2220      	movs	r2, #32
 8009f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e000      	b.n	8009f9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009f9a:	2302      	movs	r3, #2
  }
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	80002400 	.word	0x80002400
 8009fa8:	fe00e800 	.word	0xfe00e800

08009fac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fba:	b2db      	uxtb	r3, r3
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	817b      	strh	r3, [r7, #10]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	813b      	strh	r3, [r7, #8]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009fe2:	88fb      	ldrh	r3, [r7, #6]
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	8979      	ldrh	r1, [r7, #10]
 8009fe8:	4b20      	ldr	r3, [pc, #128]	; (800a06c <I2C_RequestMemoryWrite+0xa4>)
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f9d7 	bl	800a3a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	69b9      	ldr	r1, [r7, #24]
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 f8f0 	bl	800a1e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e02c      	b.n	800a064 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a00a:	88fb      	ldrh	r3, [r7, #6]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d105      	bne.n	800a01c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a010:	893b      	ldrh	r3, [r7, #8]
 800a012:	b2da      	uxtb	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	629a      	str	r2, [r3, #40]	; 0x28
 800a01a:	e015      	b.n	800a048 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a01c:	893b      	ldrh	r3, [r7, #8]
 800a01e:	0a1b      	lsrs	r3, r3, #8
 800a020:	b29b      	uxth	r3, r3
 800a022:	b2da      	uxtb	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a02a:	69fa      	ldr	r2, [r7, #28]
 800a02c:	69b9      	ldr	r1, [r7, #24]
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 f8d6 	bl	800a1e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e012      	b.n	800a064 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a03e:	893b      	ldrh	r3, [r7, #8]
 800a040:	b2da      	uxtb	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	2200      	movs	r2, #0
 800a050:	2180      	movs	r1, #128	; 0x80
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 f884 	bl	800a160 <I2C_WaitOnFlagUntilTimeout>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	80002000 	.word	0x80002000

0800a070 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af02      	add	r7, sp, #8
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	4608      	mov	r0, r1
 800a07a:	4611      	mov	r1, r2
 800a07c:	461a      	mov	r2, r3
 800a07e:	4603      	mov	r3, r0
 800a080:	817b      	strh	r3, [r7, #10]
 800a082:	460b      	mov	r3, r1
 800a084:	813b      	strh	r3, [r7, #8]
 800a086:	4613      	mov	r3, r2
 800a088:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	8979      	ldrh	r1, [r7, #10]
 800a090:	4b20      	ldr	r3, [pc, #128]	; (800a114 <I2C_RequestMemoryRead+0xa4>)
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	2300      	movs	r3, #0
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 f984 	bl	800a3a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a09c:	69fa      	ldr	r2, [r7, #28]
 800a09e:	69b9      	ldr	r1, [r7, #24]
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f89d 	bl	800a1e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e02c      	b.n	800a10a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0b0:	88fb      	ldrh	r3, [r7, #6]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d105      	bne.n	800a0c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0b6:	893b      	ldrh	r3, [r7, #8]
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	629a      	str	r2, [r3, #40]	; 0x28
 800a0c0:	e015      	b.n	800a0ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a0c2:	893b      	ldrh	r3, [r7, #8]
 800a0c4:	0a1b      	lsrs	r3, r3, #8
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0d0:	69fa      	ldr	r2, [r7, #28]
 800a0d2:	69b9      	ldr	r1, [r7, #24]
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f883 	bl	800a1e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e012      	b.n	800a10a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0e4:	893b      	ldrh	r3, [r7, #8]
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2140      	movs	r1, #64	; 0x40
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 f831 	bl	800a160 <I2C_WaitOnFlagUntilTimeout>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	80002000 	.word	0x80002000

0800a118 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	f003 0302 	and.w	r3, r3, #2
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d103      	bne.n	800a136 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2200      	movs	r2, #0
 800a134:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	2b01      	cmp	r3, #1
 800a142:	d007      	beq.n	800a154 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 0201 	orr.w	r2, r2, #1
 800a152:	619a      	str	r2, [r3, #24]
  }
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	4613      	mov	r3, r2
 800a16e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a170:	e022      	b.n	800a1b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a178:	d01e      	beq.n	800a1b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a17a:	f7fb ffe5 	bl	8006148 <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d302      	bcc.n	800a190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d113      	bne.n	800a1b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a194:	f043 0220 	orr.w	r2, r3, #32
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e00f      	b.n	800a1d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	699a      	ldr	r2, [r3, #24]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	bf0c      	ite	eq
 800a1c8:	2301      	moveq	r3, #1
 800a1ca:	2300      	movne	r3, #0
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	79fb      	ldrb	r3, [r7, #7]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d0cd      	beq.n	800a172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a1ec:	e02c      	b.n	800a248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 f870 	bl	800a2d8 <I2C_IsAcknowledgeFailed>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e02a      	b.n	800a258 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a208:	d01e      	beq.n	800a248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a20a:	f7fb ff9d 	bl	8006148 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	429a      	cmp	r2, r3
 800a218:	d302      	bcc.n	800a220 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d113      	bne.n	800a248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a224:	f043 0220 	orr.w	r2, r3, #32
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2220      	movs	r2, #32
 800a230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	e007      	b.n	800a258 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	f003 0302 	and.w	r3, r3, #2
 800a252:	2b02      	cmp	r3, #2
 800a254:	d1cb      	bne.n	800a1ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a26c:	e028      	b.n	800a2c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 f830 	bl	800a2d8 <I2C_IsAcknowledgeFailed>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e026      	b.n	800a2d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a282:	f7fb ff61 	bl	8006148 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d302      	bcc.n	800a298 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d113      	bne.n	800a2c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29c:	f043 0220 	orr.w	r2, r3, #32
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e007      	b.n	800a2d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b20      	cmp	r3, #32
 800a2cc:	d1cf      	bne.n	800a26e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	f003 0310 	and.w	r3, r3, #16
 800a2ee:	2b10      	cmp	r3, #16
 800a2f0:	d151      	bne.n	800a396 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2f2:	e022      	b.n	800a33a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2fa:	d01e      	beq.n	800a33a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2fc:	f7fb ff24 	bl	8006148 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d302      	bcc.n	800a312 <I2C_IsAcknowledgeFailed+0x3a>
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d113      	bne.n	800a33a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a316:	f043 0220 	orr.w	r2, r3, #32
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2220      	movs	r2, #32
 800a322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e02e      	b.n	800a398 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	f003 0320 	and.w	r3, r3, #32
 800a344:	2b20      	cmp	r3, #32
 800a346:	d1d5      	bne.n	800a2f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2210      	movs	r2, #16
 800a34e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2220      	movs	r2, #32
 800a356:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff fedd 	bl	800a118 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6859      	ldr	r1, [r3, #4]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	4b0d      	ldr	r3, [pc, #52]	; (800a3a0 <I2C_IsAcknowledgeFailed+0xc8>)
 800a36a:	400b      	ands	r3, r1
 800a36c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a372:	f043 0204 	orr.w	r2, r3, #4
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2220      	movs	r2, #32
 800a37e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	fe00e800 	.word	0xfe00e800

0800a3a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	607b      	str	r3, [r7, #4]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	817b      	strh	r3, [r7, #10]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	0d5b      	lsrs	r3, r3, #21
 800a3c0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a3c4:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <I2C_TransferConfig+0x58>)
 800a3c6:	430b      	orrs	r3, r1
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	ea02 0103 	and.w	r1, r2, r3
 800a3ce:	897b      	ldrh	r3, [r7, #10]
 800a3d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a3d4:	7a7b      	ldrb	r3, [r7, #9]
 800a3d6:	041b      	lsls	r3, r3, #16
 800a3d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a3ee:	bf00      	nop
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	03ff63ff 	.word	0x03ff63ff

0800a400 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b20      	cmp	r3, #32
 800a414:	d138      	bne.n	800a488 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a420:	2302      	movs	r3, #2
 800a422:	e032      	b.n	800a48a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2224      	movs	r2, #36	; 0x24
 800a430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 0201 	bic.w	r2, r2, #1
 800a442:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a452:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6819      	ldr	r1, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0201 	orr.w	r2, r2, #1
 800a472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2220      	movs	r2, #32
 800a478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	e000      	b.n	800a48a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a488:	2302      	movs	r3, #2
  }
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a496:	b480      	push	{r7}
 800a498:	b085      	sub	sp, #20
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b20      	cmp	r3, #32
 800a4aa:	d139      	bne.n	800a520 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d101      	bne.n	800a4ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	e033      	b.n	800a522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2224      	movs	r2, #36	; 0x24
 800a4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 0201 	bic.w	r2, r2, #1
 800a4d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a4e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f042 0201 	orr.w	r2, r2, #1
 800a50a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	e000      	b.n	800a522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a520:	2302      	movs	r3, #2
  }
}
 800a522:	4618      	mov	r0, r3
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
	...

0800a530 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e0bf      	b.n	800a6c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d106      	bne.n	800a55c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7f8 f80e 	bl	8002578 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	699a      	ldr	r2, [r3, #24]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a572:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6999      	ldr	r1, [r3, #24]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a588:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6899      	ldr	r1, [r3, #8]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	4b4a      	ldr	r3, [pc, #296]	; (800a6cc <HAL_LTDC_Init+0x19c>)
 800a5a4:	400b      	ands	r3, r1
 800a5a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	041b      	lsls	r3, r3, #16
 800a5ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6899      	ldr	r1, [r3, #8]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	699a      	ldr	r2, [r3, #24]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68d9      	ldr	r1, [r3, #12]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	4b3e      	ldr	r3, [pc, #248]	; (800a6cc <HAL_LTDC_Init+0x19c>)
 800a5d2:	400b      	ands	r3, r1
 800a5d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	041b      	lsls	r3, r3, #16
 800a5dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68d9      	ldr	r1, [r3, #12]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a1a      	ldr	r2, [r3, #32]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	430a      	orrs	r2, r1
 800a5f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6919      	ldr	r1, [r3, #16]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	4b33      	ldr	r3, [pc, #204]	; (800a6cc <HAL_LTDC_Init+0x19c>)
 800a600:	400b      	ands	r3, r1
 800a602:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	041b      	lsls	r3, r3, #16
 800a60a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6919      	ldr	r1, [r3, #16]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	431a      	orrs	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6959      	ldr	r1, [r3, #20]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	4b27      	ldr	r3, [pc, #156]	; (800a6cc <HAL_LTDC_Init+0x19c>)
 800a62e:	400b      	ands	r3, r1
 800a630:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a636:	041b      	lsls	r3, r3, #16
 800a638:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6959      	ldr	r1, [r3, #20]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	431a      	orrs	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a656:	021b      	lsls	r3, r3, #8
 800a658:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a660:	041b      	lsls	r3, r3, #16
 800a662:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a672:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4313      	orrs	r3, r2
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a686:	431a      	orrs	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0206 	orr.w	r2, r2, #6
 800a69e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0201 	orr.w	r2, r2, #1
 800a6ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	f000f800 	.word	0xf000f800

0800a6d0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f003 0304 	and.w	r3, r3, #4
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d023      	beq.n	800a73a <HAL_LTDC_IRQHandler+0x6a>
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f003 0304 	and.w	r3, r3, #4
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d01e      	beq.n	800a73a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f022 0204 	bic.w	r2, r2, #4
 800a70a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2204      	movs	r2, #4
 800a712:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a71a:	f043 0201 	orr.w	r2, r3, #1
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2204      	movs	r2, #4
 800a728:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f86f 	bl	800a818 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d023      	beq.n	800a78c <HAL_LTDC_IRQHandler+0xbc>
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d01e      	beq.n	800a78c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f022 0202 	bic.w	r2, r2, #2
 800a75c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2202      	movs	r2, #2
 800a764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a76c:	f043 0202 	orr.w	r2, r3, #2
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2204      	movs	r2, #4
 800a77a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f846 	bl	800a818 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d01b      	beq.n	800a7ce <HAL_LTDC_IRQHandler+0xfe>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d016      	beq.n	800a7ce <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f022 0201 	bic.w	r2, r2, #1
 800a7ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f82f 	bl	800a82c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f003 0308 	and.w	r3, r3, #8
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01b      	beq.n	800a810 <HAL_LTDC_IRQHandler+0x140>
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f003 0308 	and.w	r3, r3, #8
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d016      	beq.n	800a810 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f022 0208 	bic.w	r2, r2, #8
 800a7f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2208      	movs	r2, #8
 800a7f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f818 	bl	800a840 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a810:	bf00      	nop
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a854:	b5b0      	push	{r4, r5, r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a866:	2b01      	cmp	r3, #1
 800a868:	d101      	bne.n	800a86e <HAL_LTDC_ConfigLayer+0x1a>
 800a86a:	2302      	movs	r3, #2
 800a86c:	e02c      	b.n	800a8c8 <HAL_LTDC_ConfigLayer+0x74>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2202      	movs	r2, #2
 800a87a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2134      	movs	r1, #52	; 0x34
 800a884:	fb01 f303 	mul.w	r3, r1, r3
 800a888:	4413      	add	r3, r2
 800a88a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	4614      	mov	r4, r2
 800a892:	461d      	mov	r5, r3
 800a894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a89a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a89c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a89e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	68b9      	ldr	r1, [r7, #8]
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f000 f81f 	bl	800a8ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bdb0      	pop	{r4, r5, r7, pc}

0800a8d0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a8de:	b2db      	uxtb	r3, r3
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b089      	sub	sp, #36	; 0x24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	0c1b      	lsrs	r3, r3, #16
 800a904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a908:	4413      	add	r3, r2
 800a90a:	041b      	lsls	r3, r3, #16
 800a90c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	01db      	lsls	r3, r3, #7
 800a918:	4413      	add	r3, r2
 800a91a:	3384      	adds	r3, #132	; 0x84
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	6812      	ldr	r2, [r2, #0]
 800a922:	4611      	mov	r1, r2
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	01d2      	lsls	r2, r2, #7
 800a928:	440a      	add	r2, r1
 800a92a:	3284      	adds	r2, #132	; 0x84
 800a92c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a930:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	0c1b      	lsrs	r3, r3, #16
 800a93e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a942:	4413      	add	r3, r2
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4619      	mov	r1, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	01db      	lsls	r3, r3, #7
 800a950:	440b      	add	r3, r1
 800a952:	3384      	adds	r3, #132	; 0x84
 800a954:	4619      	mov	r1, r3
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	4313      	orrs	r3, r2
 800a95a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	68da      	ldr	r2, [r3, #12]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a96a:	4413      	add	r3, r2
 800a96c:	041b      	lsls	r3, r3, #16
 800a96e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	461a      	mov	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	01db      	lsls	r3, r3, #7
 800a97a:	4413      	add	r3, r2
 800a97c:	3384      	adds	r3, #132	; 0x84
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	6812      	ldr	r2, [r2, #0]
 800a984:	4611      	mov	r1, r2
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	01d2      	lsls	r2, r2, #7
 800a98a:	440a      	add	r2, r1
 800a98c:	3284      	adds	r2, #132	; 0x84
 800a98e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a992:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9a2:	4413      	add	r3, r2
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	01db      	lsls	r3, r3, #7
 800a9b0:	440b      	add	r3, r1
 800a9b2:	3384      	adds	r3, #132	; 0x84
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	01db      	lsls	r3, r3, #7
 800a9c6:	4413      	add	r3, r2
 800a9c8:	3384      	adds	r3, #132	; 0x84
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	01d2      	lsls	r2, r2, #7
 800a9d6:	440a      	add	r2, r1
 800a9d8:	3284      	adds	r2, #132	; 0x84
 800a9da:	f023 0307 	bic.w	r3, r3, #7
 800a9de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	01db      	lsls	r3, r3, #7
 800a9ea:	4413      	add	r3, r2
 800a9ec:	3384      	adds	r3, #132	; 0x84
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9fc:	021b      	lsls	r3, r3, #8
 800a9fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800aa06:	041b      	lsls	r3, r3, #16
 800aa08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	061b      	lsls	r3, r3, #24
 800aa10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	01db      	lsls	r3, r3, #7
 800aa1c:	4413      	add	r3, r2
 800aa1e:	3384      	adds	r3, #132	; 0x84
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	01db      	lsls	r3, r3, #7
 800aa2c:	4413      	add	r3, r2
 800aa2e:	3384      	adds	r3, #132	; 0x84
 800aa30:	461a      	mov	r2, r3
 800aa32:	2300      	movs	r3, #0
 800aa34:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	431a      	orrs	r2, r3
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	431a      	orrs	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	01db      	lsls	r3, r3, #7
 800aa50:	440b      	add	r3, r1
 800aa52:	3384      	adds	r3, #132	; 0x84
 800aa54:	4619      	mov	r1, r3
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	461a      	mov	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	01db      	lsls	r3, r3, #7
 800aa66:	4413      	add	r3, r2
 800aa68:	3384      	adds	r3, #132	; 0x84
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	6812      	ldr	r2, [r2, #0]
 800aa70:	4611      	mov	r1, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	01d2      	lsls	r2, r2, #7
 800aa76:	440a      	add	r2, r1
 800aa78:	3284      	adds	r2, #132	; 0x84
 800aa7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aa7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	461a      	mov	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	01db      	lsls	r3, r3, #7
 800aa8a:	4413      	add	r3, r2
 800aa8c:	3384      	adds	r3, #132	; 0x84
 800aa8e:	461a      	mov	r2, r3
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	01db      	lsls	r3, r3, #7
 800aaa0:	4413      	add	r3, r2
 800aaa2:	3384      	adds	r3, #132	; 0x84
 800aaa4:	69da      	ldr	r2, [r3, #28]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	01db      	lsls	r3, r3, #7
 800aab0:	440b      	add	r3, r1
 800aab2:	3384      	adds	r3, #132	; 0x84
 800aab4:	4619      	mov	r1, r3
 800aab6:	4b58      	ldr	r3, [pc, #352]	; (800ac18 <LTDC_SetConfig+0x32c>)
 800aab8:	4013      	ands	r3, r2
 800aaba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	69da      	ldr	r2, [r3, #28]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	68f9      	ldr	r1, [r7, #12]
 800aac6:	6809      	ldr	r1, [r1, #0]
 800aac8:	4608      	mov	r0, r1
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	01c9      	lsls	r1, r1, #7
 800aace:	4401      	add	r1, r0
 800aad0:	3184      	adds	r1, #132	; 0x84
 800aad2:	4313      	orrs	r3, r2
 800aad4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	01db      	lsls	r3, r3, #7
 800aae0:	4413      	add	r3, r2
 800aae2:	3384      	adds	r3, #132	; 0x84
 800aae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	01db      	lsls	r3, r3, #7
 800aaf0:	4413      	add	r3, r2
 800aaf2:	3384      	adds	r3, #132	; 0x84
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	01db      	lsls	r3, r3, #7
 800ab04:	4413      	add	r3, r2
 800ab06:	3384      	adds	r3, #132	; 0x84
 800ab08:	461a      	mov	r2, r3
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d102      	bne.n	800ab1e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ab18:	2304      	movs	r3, #4
 800ab1a:	61fb      	str	r3, [r7, #28]
 800ab1c:	e01b      	b.n	800ab56 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d102      	bne.n	800ab2c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ab26:	2303      	movs	r3, #3
 800ab28:	61fb      	str	r3, [r7, #28]
 800ab2a:	e014      	b.n	800ab56 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	d00b      	beq.n	800ab4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d007      	beq.n	800ab4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d003      	beq.n	800ab4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ab48:	2b07      	cmp	r3, #7
 800ab4a:	d102      	bne.n	800ab52 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	61fb      	str	r3, [r7, #28]
 800ab50:	e001      	b.n	800ab56 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ab52:	2301      	movs	r3, #1
 800ab54:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	01db      	lsls	r3, r3, #7
 800ab60:	4413      	add	r3, r2
 800ab62:	3384      	adds	r3, #132	; 0x84
 800ab64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	6812      	ldr	r2, [r2, #0]
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	01d2      	lsls	r2, r2, #7
 800ab70:	440a      	add	r2, r1
 800ab72:	3284      	adds	r2, #132	; 0x84
 800ab74:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800ab78:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	fb02 f303 	mul.w	r3, r2, r3
 800ab84:	041a      	lsls	r2, r3, #16
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6859      	ldr	r1, [r3, #4]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	1acb      	subs	r3, r1, r3
 800ab90:	69f9      	ldr	r1, [r7, #28]
 800ab92:	fb01 f303 	mul.w	r3, r1, r3
 800ab96:	3303      	adds	r3, #3
 800ab98:	68f9      	ldr	r1, [r7, #12]
 800ab9a:	6809      	ldr	r1, [r1, #0]
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	01c9      	lsls	r1, r1, #7
 800aba2:	4401      	add	r1, r0
 800aba4:	3184      	adds	r1, #132	; 0x84
 800aba6:	4313      	orrs	r3, r2
 800aba8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	461a      	mov	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	01db      	lsls	r3, r3, #7
 800abb4:	4413      	add	r3, r2
 800abb6:	3384      	adds	r3, #132	; 0x84
 800abb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4619      	mov	r1, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	01db      	lsls	r3, r3, #7
 800abc4:	440b      	add	r3, r1
 800abc6:	3384      	adds	r3, #132	; 0x84
 800abc8:	4619      	mov	r1, r3
 800abca:	4b14      	ldr	r3, [pc, #80]	; (800ac1c <LTDC_SetConfig+0x330>)
 800abcc:	4013      	ands	r3, r2
 800abce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	461a      	mov	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	01db      	lsls	r3, r3, #7
 800abda:	4413      	add	r3, r2
 800abdc:	3384      	adds	r3, #132	; 0x84
 800abde:	461a      	mov	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	461a      	mov	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	01db      	lsls	r3, r3, #7
 800abf0:	4413      	add	r3, r2
 800abf2:	3384      	adds	r3, #132	; 0x84
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	6812      	ldr	r2, [r2, #0]
 800abfa:	4611      	mov	r1, r2
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	01d2      	lsls	r2, r2, #7
 800ac00:	440a      	add	r2, r1
 800ac02:	3284      	adds	r2, #132	; 0x84
 800ac04:	f043 0301 	orr.w	r3, r3, #1
 800ac08:	6013      	str	r3, [r2, #0]
}
 800ac0a:	bf00      	nop
 800ac0c:	3724      	adds	r7, #36	; 0x24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	fffff8f8 	.word	0xfffff8f8
 800ac1c:	fffff800 	.word	0xfffff800

0800ac20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ac20:	b480      	push	{r7}
 800ac22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac24:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a04      	ldr	r2, [pc, #16]	; (800ac3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ac2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac2e:	6013      	str	r3, [r2, #0]
}
 800ac30:	bf00      	nop
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40007000 	.word	0x40007000

0800ac40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac4a:	4b23      	ldr	r3, [pc, #140]	; (800acd8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4e:	4a22      	ldr	r2, [pc, #136]	; (800acd8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac54:	6413      	str	r3, [r2, #64]	; 0x40
 800ac56:	4b20      	ldr	r3, [pc, #128]	; (800acd8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac5e:	603b      	str	r3, [r7, #0]
 800ac60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ac62:	4b1e      	ldr	r3, [pc, #120]	; (800acdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a1d      	ldr	r2, [pc, #116]	; (800acdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac6e:	f7fb fa6b 	bl	8006148 <HAL_GetTick>
 800ac72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac74:	e009      	b.n	800ac8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac76:	f7fb fa67 	bl	8006148 <HAL_GetTick>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac84:	d901      	bls.n	800ac8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e022      	b.n	800acd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac8a:	4b14      	ldr	r3, [pc, #80]	; (800acdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac96:	d1ee      	bne.n	800ac76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ac98:	4b10      	ldr	r3, [pc, #64]	; (800acdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a0f      	ldr	r2, [pc, #60]	; (800acdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aca2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aca4:	f7fb fa50 	bl	8006148 <HAL_GetTick>
 800aca8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acaa:	e009      	b.n	800acc0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acac:	f7fb fa4c 	bl	8006148 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acba:	d901      	bls.n	800acc0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800acbc:	2303      	movs	r3, #3
 800acbe:	e007      	b.n	800acd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800accc:	d1ee      	bne.n	800acac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	40023800 	.word	0x40023800
 800acdc:	40007000 	.word	0x40007000

0800ace0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af02      	add	r7, sp, #8
 800ace6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ace8:	f7fb fa2e 	bl	8006148 <HAL_GetTick>
 800acec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e067      	b.n	800adc8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10b      	bne.n	800ad1c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7f7 fcfb 	bl	8002708 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800ad12:	f241 3188 	movw	r1, #5000	; 0x1388
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f85e 	bl	800add8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	021a      	lsls	r2, r3, #8
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	430a      	orrs	r2, r1
 800ad34:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	2120      	movs	r1, #32
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f856 	bl	800adf4 <QSPI_WaitFlagStateUntilTimeout>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d135      	bne.n	800adbe <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	4b1d      	ldr	r3, [pc, #116]	; (800add0 <HAL_QSPI_Init+0xf0>)
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	6852      	ldr	r2, [r2, #4]
 800ad60:	0611      	lsls	r1, r2, #24
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	68d2      	ldr	r2, [r2, #12]
 800ad66:	4311      	orrs	r1, r2
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	69d2      	ldr	r2, [r2, #28]
 800ad6c:	4311      	orrs	r1, r2
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	6a12      	ldr	r2, [r2, #32]
 800ad72:	4311      	orrs	r1, r2
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	430b      	orrs	r3, r1
 800ad7a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	4b14      	ldr	r3, [pc, #80]	; (800add4 <HAL_QSPI_Init+0xf4>)
 800ad84:	4013      	ands	r3, r2
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	6912      	ldr	r2, [r2, #16]
 800ad8a:	0411      	lsls	r1, r2, #16
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	6952      	ldr	r2, [r2, #20]
 800ad90:	4311      	orrs	r1, r2
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	6992      	ldr	r2, [r2, #24]
 800ad96:	4311      	orrs	r1, r2
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	6812      	ldr	r2, [r2, #0]
 800ad9c:	430b      	orrs	r3, r1
 800ad9e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f042 0201 	orr.w	r2, r2, #1
 800adae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800adc6:	7afb      	ldrb	r3, [r7, #11]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	00ffff2f 	.word	0x00ffff2f
 800add4:	ffe0f8fe 	.word	0xffe0f8fe

0800add8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	603b      	str	r3, [r7, #0]
 800ae00:	4613      	mov	r3, r2
 800ae02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ae04:	e01a      	b.n	800ae3c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0c:	d016      	beq.n	800ae3c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae0e:	f7fb f99b 	bl	8006148 <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	69ba      	ldr	r2, [r7, #24]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d302      	bcc.n	800ae24 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10b      	bne.n	800ae3c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2204      	movs	r2, #4
 800ae28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae30:	f043 0201 	orr.w	r2, r3, #1
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e00e      	b.n	800ae5a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689a      	ldr	r2, [r3, #8]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	4013      	ands	r3, r2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bf14      	ite	ne
 800ae4a:	2301      	movne	r3, #1
 800ae4c:	2300      	moveq	r3, #0
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	461a      	mov	r2, r3
 800ae52:	79fb      	ldrb	r3, [r7, #7]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d1d6      	bne.n	800ae06 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e291      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 8087 	beq.w	800af96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ae88:	4b96      	ldr	r3, [pc, #600]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f003 030c 	and.w	r3, r3, #12
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d00c      	beq.n	800aeae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae94:	4b93      	ldr	r3, [pc, #588]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f003 030c 	and.w	r3, r3, #12
 800ae9c:	2b08      	cmp	r3, #8
 800ae9e:	d112      	bne.n	800aec6 <HAL_RCC_OscConfig+0x62>
 800aea0:	4b90      	ldr	r3, [pc, #576]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aeac:	d10b      	bne.n	800aec6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeae:	4b8d      	ldr	r3, [pc, #564]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d06c      	beq.n	800af94 <HAL_RCC_OscConfig+0x130>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d168      	bne.n	800af94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e26b      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aece:	d106      	bne.n	800aede <HAL_RCC_OscConfig+0x7a>
 800aed0:	4b84      	ldr	r3, [pc, #528]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a83      	ldr	r2, [pc, #524]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800aed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeda:	6013      	str	r3, [r2, #0]
 800aedc:	e02e      	b.n	800af3c <HAL_RCC_OscConfig+0xd8>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10c      	bne.n	800af00 <HAL_RCC_OscConfig+0x9c>
 800aee6:	4b7f      	ldr	r3, [pc, #508]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a7e      	ldr	r2, [pc, #504]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800aeec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aef0:	6013      	str	r3, [r2, #0]
 800aef2:	4b7c      	ldr	r3, [pc, #496]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a7b      	ldr	r2, [pc, #492]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800aef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	e01d      	b.n	800af3c <HAL_RCC_OscConfig+0xd8>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af08:	d10c      	bne.n	800af24 <HAL_RCC_OscConfig+0xc0>
 800af0a:	4b76      	ldr	r3, [pc, #472]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a75      	ldr	r2, [pc, #468]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	4b73      	ldr	r3, [pc, #460]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a72      	ldr	r2, [pc, #456]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af20:	6013      	str	r3, [r2, #0]
 800af22:	e00b      	b.n	800af3c <HAL_RCC_OscConfig+0xd8>
 800af24:	4b6f      	ldr	r3, [pc, #444]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a6e      	ldr	r2, [pc, #440]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	4b6c      	ldr	r3, [pc, #432]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a6b      	ldr	r2, [pc, #428]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d013      	beq.n	800af6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af44:	f7fb f900 	bl	8006148 <HAL_GetTick>
 800af48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af4a:	e008      	b.n	800af5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af4c:	f7fb f8fc 	bl	8006148 <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	2b64      	cmp	r3, #100	; 0x64
 800af58:	d901      	bls.n	800af5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e21f      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af5e:	4b61      	ldr	r3, [pc, #388]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0f0      	beq.n	800af4c <HAL_RCC_OscConfig+0xe8>
 800af6a:	e014      	b.n	800af96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af6c:	f7fb f8ec 	bl	8006148 <HAL_GetTick>
 800af70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af72:	e008      	b.n	800af86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af74:	f7fb f8e8 	bl	8006148 <HAL_GetTick>
 800af78:	4602      	mov	r2, r0
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	2b64      	cmp	r3, #100	; 0x64
 800af80:	d901      	bls.n	800af86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	e20b      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af86:	4b57      	ldr	r3, [pc, #348]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1f0      	bne.n	800af74 <HAL_RCC_OscConfig+0x110>
 800af92:	e000      	b.n	800af96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 0302 	and.w	r3, r3, #2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d069      	beq.n	800b076 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800afa2:	4b50      	ldr	r3, [pc, #320]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f003 030c 	and.w	r3, r3, #12
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00b      	beq.n	800afc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800afae:	4b4d      	ldr	r3, [pc, #308]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	f003 030c 	and.w	r3, r3, #12
 800afb6:	2b08      	cmp	r3, #8
 800afb8:	d11c      	bne.n	800aff4 <HAL_RCC_OscConfig+0x190>
 800afba:	4b4a      	ldr	r3, [pc, #296]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d116      	bne.n	800aff4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afc6:	4b47      	ldr	r3, [pc, #284]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0302 	and.w	r3, r3, #2
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d005      	beq.n	800afde <HAL_RCC_OscConfig+0x17a>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d001      	beq.n	800afde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e1df      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afde:	4b41      	ldr	r3, [pc, #260]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	493d      	ldr	r1, [pc, #244]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aff2:	e040      	b.n	800b076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d023      	beq.n	800b044 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800affc:	4b39      	ldr	r3, [pc, #228]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a38      	ldr	r2, [pc, #224]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b002:	f043 0301 	orr.w	r3, r3, #1
 800b006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b008:	f7fb f89e 	bl	8006148 <HAL_GetTick>
 800b00c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b00e:	e008      	b.n	800b022 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b010:	f7fb f89a 	bl	8006148 <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d901      	bls.n	800b022 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b01e:	2303      	movs	r3, #3
 800b020:	e1bd      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b022:	4b30      	ldr	r3, [pc, #192]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0f0      	beq.n	800b010 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b02e:	4b2d      	ldr	r3, [pc, #180]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	00db      	lsls	r3, r3, #3
 800b03c:	4929      	ldr	r1, [pc, #164]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	600b      	str	r3, [r1, #0]
 800b042:	e018      	b.n	800b076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b044:	4b27      	ldr	r3, [pc, #156]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a26      	ldr	r2, [pc, #152]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b04a:	f023 0301 	bic.w	r3, r3, #1
 800b04e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b050:	f7fb f87a 	bl	8006148 <HAL_GetTick>
 800b054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b056:	e008      	b.n	800b06a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b058:	f7fb f876 	bl	8006148 <HAL_GetTick>
 800b05c:	4602      	mov	r2, r0
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	2b02      	cmp	r3, #2
 800b064:	d901      	bls.n	800b06a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	e199      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b06a:	4b1e      	ldr	r3, [pc, #120]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0302 	and.w	r3, r3, #2
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1f0      	bne.n	800b058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0308 	and.w	r3, r3, #8
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d038      	beq.n	800b0f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d019      	beq.n	800b0be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b08a:	4b16      	ldr	r3, [pc, #88]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b08c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b08e:	4a15      	ldr	r2, [pc, #84]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b090:	f043 0301 	orr.w	r3, r3, #1
 800b094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b096:	f7fb f857 	bl	8006148 <HAL_GetTick>
 800b09a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b09c:	e008      	b.n	800b0b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b09e:	f7fb f853 	bl	8006148 <HAL_GetTick>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d901      	bls.n	800b0b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e176      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0b0:	4b0c      	ldr	r3, [pc, #48]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b0b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0b4:	f003 0302 	and.w	r3, r3, #2
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d0f0      	beq.n	800b09e <HAL_RCC_OscConfig+0x23a>
 800b0bc:	e01a      	b.n	800b0f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0be:	4b09      	ldr	r3, [pc, #36]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b0c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0c2:	4a08      	ldr	r2, [pc, #32]	; (800b0e4 <HAL_RCC_OscConfig+0x280>)
 800b0c4:	f023 0301 	bic.w	r3, r3, #1
 800b0c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0ca:	f7fb f83d 	bl	8006148 <HAL_GetTick>
 800b0ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0d0:	e00a      	b.n	800b0e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0d2:	f7fb f839 	bl	8006148 <HAL_GetTick>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d903      	bls.n	800b0e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e15c      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
 800b0e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0e8:	4b91      	ldr	r3, [pc, #580]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b0ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0ec:	f003 0302 	and.w	r3, r3, #2
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1ee      	bne.n	800b0d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f000 80a4 	beq.w	800b24a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b102:	4b8b      	ldr	r3, [pc, #556]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10d      	bne.n	800b12a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b10e:	4b88      	ldr	r3, [pc, #544]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b112:	4a87      	ldr	r2, [pc, #540]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b118:	6413      	str	r3, [r2, #64]	; 0x40
 800b11a:	4b85      	ldr	r3, [pc, #532]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b122:	60bb      	str	r3, [r7, #8]
 800b124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b126:	2301      	movs	r3, #1
 800b128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b12a:	4b82      	ldr	r3, [pc, #520]	; (800b334 <HAL_RCC_OscConfig+0x4d0>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b132:	2b00      	cmp	r3, #0
 800b134:	d118      	bne.n	800b168 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b136:	4b7f      	ldr	r3, [pc, #508]	; (800b334 <HAL_RCC_OscConfig+0x4d0>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a7e      	ldr	r2, [pc, #504]	; (800b334 <HAL_RCC_OscConfig+0x4d0>)
 800b13c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b142:	f7fb f801 	bl	8006148 <HAL_GetTick>
 800b146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b148:	e008      	b.n	800b15c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b14a:	f7fa fffd 	bl	8006148 <HAL_GetTick>
 800b14e:	4602      	mov	r2, r0
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	2b64      	cmp	r3, #100	; 0x64
 800b156:	d901      	bls.n	800b15c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b158:	2303      	movs	r3, #3
 800b15a:	e120      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b15c:	4b75      	ldr	r3, [pc, #468]	; (800b334 <HAL_RCC_OscConfig+0x4d0>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0f0      	beq.n	800b14a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d106      	bne.n	800b17e <HAL_RCC_OscConfig+0x31a>
 800b170:	4b6f      	ldr	r3, [pc, #444]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b174:	4a6e      	ldr	r2, [pc, #440]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b176:	f043 0301 	orr.w	r3, r3, #1
 800b17a:	6713      	str	r3, [r2, #112]	; 0x70
 800b17c:	e02d      	b.n	800b1da <HAL_RCC_OscConfig+0x376>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10c      	bne.n	800b1a0 <HAL_RCC_OscConfig+0x33c>
 800b186:	4b6a      	ldr	r3, [pc, #424]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b18a:	4a69      	ldr	r2, [pc, #420]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b18c:	f023 0301 	bic.w	r3, r3, #1
 800b190:	6713      	str	r3, [r2, #112]	; 0x70
 800b192:	4b67      	ldr	r3, [pc, #412]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b196:	4a66      	ldr	r2, [pc, #408]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b198:	f023 0304 	bic.w	r3, r3, #4
 800b19c:	6713      	str	r3, [r2, #112]	; 0x70
 800b19e:	e01c      	b.n	800b1da <HAL_RCC_OscConfig+0x376>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	2b05      	cmp	r3, #5
 800b1a6:	d10c      	bne.n	800b1c2 <HAL_RCC_OscConfig+0x35e>
 800b1a8:	4b61      	ldr	r3, [pc, #388]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ac:	4a60      	ldr	r2, [pc, #384]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b1ae:	f043 0304 	orr.w	r3, r3, #4
 800b1b2:	6713      	str	r3, [r2, #112]	; 0x70
 800b1b4:	4b5e      	ldr	r3, [pc, #376]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b8:	4a5d      	ldr	r2, [pc, #372]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b1ba:	f043 0301 	orr.w	r3, r3, #1
 800b1be:	6713      	str	r3, [r2, #112]	; 0x70
 800b1c0:	e00b      	b.n	800b1da <HAL_RCC_OscConfig+0x376>
 800b1c2:	4b5b      	ldr	r3, [pc, #364]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c6:	4a5a      	ldr	r2, [pc, #360]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b1c8:	f023 0301 	bic.w	r3, r3, #1
 800b1cc:	6713      	str	r3, [r2, #112]	; 0x70
 800b1ce:	4b58      	ldr	r3, [pc, #352]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d2:	4a57      	ldr	r2, [pc, #348]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b1d4:	f023 0304 	bic.w	r3, r3, #4
 800b1d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d015      	beq.n	800b20e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1e2:	f7fa ffb1 	bl	8006148 <HAL_GetTick>
 800b1e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1e8:	e00a      	b.n	800b200 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1ea:	f7fa ffad 	bl	8006148 <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d901      	bls.n	800b200 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e0ce      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b200:	4b4b      	ldr	r3, [pc, #300]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b204:	f003 0302 	and.w	r3, r3, #2
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0ee      	beq.n	800b1ea <HAL_RCC_OscConfig+0x386>
 800b20c:	e014      	b.n	800b238 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b20e:	f7fa ff9b 	bl	8006148 <HAL_GetTick>
 800b212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b214:	e00a      	b.n	800b22c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b216:	f7fa ff97 	bl	8006148 <HAL_GetTick>
 800b21a:	4602      	mov	r2, r0
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	f241 3288 	movw	r2, #5000	; 0x1388
 800b224:	4293      	cmp	r3, r2
 800b226:	d901      	bls.n	800b22c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e0b8      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b22c:	4b40      	ldr	r3, [pc, #256]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b230:	f003 0302 	and.w	r3, r3, #2
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1ee      	bne.n	800b216 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b238:	7dfb      	ldrb	r3, [r7, #23]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d105      	bne.n	800b24a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b23e:	4b3c      	ldr	r3, [pc, #240]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	4a3b      	ldr	r2, [pc, #236]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 80a4 	beq.w	800b39c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b254:	4b36      	ldr	r3, [pc, #216]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	f003 030c 	and.w	r3, r3, #12
 800b25c:	2b08      	cmp	r3, #8
 800b25e:	d06b      	beq.n	800b338 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	2b02      	cmp	r3, #2
 800b266:	d149      	bne.n	800b2fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b268:	4b31      	ldr	r3, [pc, #196]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a30      	ldr	r2, [pc, #192]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b26e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b274:	f7fa ff68 	bl	8006148 <HAL_GetTick>
 800b278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b27c:	f7fa ff64 	bl	8006148 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e087      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b28e:	4b28      	ldr	r3, [pc, #160]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1f0      	bne.n	800b27c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	69da      	ldr	r2, [r3, #28]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	431a      	orrs	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	019b      	lsls	r3, r3, #6
 800b2aa:	431a      	orrs	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b0:	085b      	lsrs	r3, r3, #1
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	041b      	lsls	r3, r3, #16
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2bc:	061b      	lsls	r3, r3, #24
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	4a1b      	ldr	r2, [pc, #108]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b2c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b2c8:	4b19      	ldr	r3, [pc, #100]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a18      	ldr	r2, [pc, #96]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b2ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2d4:	f7fa ff38 	bl	8006148 <HAL_GetTick>
 800b2d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2da:	e008      	b.n	800b2ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2dc:	f7fa ff34 	bl	8006148 <HAL_GetTick>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d901      	bls.n	800b2ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e057      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2ee:	4b10      	ldr	r3, [pc, #64]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0f0      	beq.n	800b2dc <HAL_RCC_OscConfig+0x478>
 800b2fa:	e04f      	b.n	800b39c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2fc:	4b0c      	ldr	r3, [pc, #48]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0b      	ldr	r2, [pc, #44]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b308:	f7fa ff1e 	bl	8006148 <HAL_GetTick>
 800b30c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b30e:	e008      	b.n	800b322 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b310:	f7fa ff1a 	bl	8006148 <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d901      	bls.n	800b322 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e03d      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b322:	4b03      	ldr	r3, [pc, #12]	; (800b330 <HAL_RCC_OscConfig+0x4cc>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1f0      	bne.n	800b310 <HAL_RCC_OscConfig+0x4ac>
 800b32e:	e035      	b.n	800b39c <HAL_RCC_OscConfig+0x538>
 800b330:	40023800 	.word	0x40023800
 800b334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b338:	4b1b      	ldr	r3, [pc, #108]	; (800b3a8 <HAL_RCC_OscConfig+0x544>)
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d028      	beq.n	800b398 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b350:	429a      	cmp	r2, r3
 800b352:	d121      	bne.n	800b398 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b35e:	429a      	cmp	r2, r3
 800b360:	d11a      	bne.n	800b398 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b368:	4013      	ands	r3, r2
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b36e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b370:	4293      	cmp	r3, r2
 800b372:	d111      	bne.n	800b398 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37e:	085b      	lsrs	r3, r3, #1
 800b380:	3b01      	subs	r3, #1
 800b382:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b384:	429a      	cmp	r2, r3
 800b386:	d107      	bne.n	800b398 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b392:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b394:	429a      	cmp	r2, r3
 800b396:	d001      	beq.n	800b39c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e000      	b.n	800b39e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	40023800 	.word	0x40023800

0800b3ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e0d0      	b.n	800b566 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3c4:	4b6a      	ldr	r3, [pc, #424]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 030f 	and.w	r3, r3, #15
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d910      	bls.n	800b3f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3d2:	4b67      	ldr	r3, [pc, #412]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f023 020f 	bic.w	r2, r3, #15
 800b3da:	4965      	ldr	r1, [pc, #404]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3e2:	4b63      	ldr	r3, [pc, #396]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 030f 	and.w	r3, r3, #15
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d001      	beq.n	800b3f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e0b8      	b.n	800b566 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0302 	and.w	r3, r3, #2
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d020      	beq.n	800b442 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0304 	and.w	r3, r3, #4
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d005      	beq.n	800b418 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b40c:	4b59      	ldr	r3, [pc, #356]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	4a58      	ldr	r2, [pc, #352]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b416:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 0308 	and.w	r3, r3, #8
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b424:	4b53      	ldr	r3, [pc, #332]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	4a52      	ldr	r2, [pc, #328]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b42a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b42e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b430:	4b50      	ldr	r3, [pc, #320]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	494d      	ldr	r1, [pc, #308]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b43e:	4313      	orrs	r3, r2
 800b440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d040      	beq.n	800b4d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d107      	bne.n	800b466 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b456:	4b47      	ldr	r3, [pc, #284]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d115      	bne.n	800b48e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e07f      	b.n	800b566 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d107      	bne.n	800b47e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b46e:	4b41      	ldr	r3, [pc, #260]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b476:	2b00      	cmp	r3, #0
 800b478:	d109      	bne.n	800b48e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e073      	b.n	800b566 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b47e:	4b3d      	ldr	r3, [pc, #244]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 0302 	and.w	r3, r3, #2
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e06b      	b.n	800b566 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b48e:	4b39      	ldr	r3, [pc, #228]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	f023 0203 	bic.w	r2, r3, #3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	4936      	ldr	r1, [pc, #216]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b49c:	4313      	orrs	r3, r2
 800b49e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4a0:	f7fa fe52 	bl	8006148 <HAL_GetTick>
 800b4a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4a6:	e00a      	b.n	800b4be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4a8:	f7fa fe4e 	bl	8006148 <HAL_GetTick>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d901      	bls.n	800b4be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e053      	b.n	800b566 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4be:	4b2d      	ldr	r3, [pc, #180]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	f003 020c 	and.w	r2, r3, #12
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d1eb      	bne.n	800b4a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b4d0:	4b27      	ldr	r3, [pc, #156]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 030f 	and.w	r3, r3, #15
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d210      	bcs.n	800b500 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4de:	4b24      	ldr	r3, [pc, #144]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f023 020f 	bic.w	r2, r3, #15
 800b4e6:	4922      	ldr	r1, [pc, #136]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ee:	4b20      	ldr	r3, [pc, #128]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 030f 	and.w	r3, r3, #15
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d001      	beq.n	800b500 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e032      	b.n	800b566 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 0304 	and.w	r3, r3, #4
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d008      	beq.n	800b51e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b50c:	4b19      	ldr	r3, [pc, #100]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	4916      	ldr	r1, [pc, #88]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b51a:	4313      	orrs	r3, r2
 800b51c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 0308 	and.w	r3, r3, #8
 800b526:	2b00      	cmp	r3, #0
 800b528:	d009      	beq.n	800b53e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b52a:	4b12      	ldr	r3, [pc, #72]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	00db      	lsls	r3, r3, #3
 800b538:	490e      	ldr	r1, [pc, #56]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b53a:	4313      	orrs	r3, r2
 800b53c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b53e:	f000 f821 	bl	800b584 <HAL_RCC_GetSysClockFreq>
 800b542:	4601      	mov	r1, r0
 800b544:	4b0b      	ldr	r3, [pc, #44]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	091b      	lsrs	r3, r3, #4
 800b54a:	f003 030f 	and.w	r3, r3, #15
 800b54e:	4a0a      	ldr	r2, [pc, #40]	; (800b578 <HAL_RCC_ClockConfig+0x1cc>)
 800b550:	5cd3      	ldrb	r3, [r2, r3]
 800b552:	fa21 f303 	lsr.w	r3, r1, r3
 800b556:	4a09      	ldr	r2, [pc, #36]	; (800b57c <HAL_RCC_ClockConfig+0x1d0>)
 800b558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b55a:	4b09      	ldr	r3, [pc, #36]	; (800b580 <HAL_RCC_ClockConfig+0x1d4>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7f7 fcf8 	bl	8002f54 <HAL_InitTick>

  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	40023c00 	.word	0x40023c00
 800b574:	40023800 	.word	0x40023800
 800b578:	0801709c 	.word	0x0801709c
 800b57c:	20000000 	.word	0x20000000
 800b580:	20000054 	.word	0x20000054

0800b584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	607b      	str	r3, [r7, #4]
 800b58e:	2300      	movs	r3, #0
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	2300      	movs	r3, #0
 800b594:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b59a:	4b50      	ldr	r3, [pc, #320]	; (800b6dc <HAL_RCC_GetSysClockFreq+0x158>)
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f003 030c 	and.w	r3, r3, #12
 800b5a2:	2b04      	cmp	r3, #4
 800b5a4:	d007      	beq.n	800b5b6 <HAL_RCC_GetSysClockFreq+0x32>
 800b5a6:	2b08      	cmp	r3, #8
 800b5a8:	d008      	beq.n	800b5bc <HAL_RCC_GetSysClockFreq+0x38>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f040 808d 	bne.w	800b6ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b5b0:	4b4b      	ldr	r3, [pc, #300]	; (800b6e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800b5b2:	60bb      	str	r3, [r7, #8]
      break;
 800b5b4:	e08c      	b.n	800b6d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b5b6:	4b4b      	ldr	r3, [pc, #300]	; (800b6e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b5b8:	60bb      	str	r3, [r7, #8]
      break;
 800b5ba:	e089      	b.n	800b6d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5bc:	4b47      	ldr	r3, [pc, #284]	; (800b6dc <HAL_RCC_GetSysClockFreq+0x158>)
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b5c6:	4b45      	ldr	r3, [pc, #276]	; (800b6dc <HAL_RCC_GetSysClockFreq+0x158>)
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d023      	beq.n	800b61a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5d2:	4b42      	ldr	r3, [pc, #264]	; (800b6dc <HAL_RCC_GetSysClockFreq+0x158>)
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	099b      	lsrs	r3, r3, #6
 800b5d8:	f04f 0400 	mov.w	r4, #0
 800b5dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b5e0:	f04f 0200 	mov.w	r2, #0
 800b5e4:	ea03 0501 	and.w	r5, r3, r1
 800b5e8:	ea04 0602 	and.w	r6, r4, r2
 800b5ec:	4a3d      	ldr	r2, [pc, #244]	; (800b6e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b5ee:	fb02 f106 	mul.w	r1, r2, r6
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	fb02 f205 	mul.w	r2, r2, r5
 800b5f8:	440a      	add	r2, r1
 800b5fa:	493a      	ldr	r1, [pc, #232]	; (800b6e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b5fc:	fba5 0101 	umull	r0, r1, r5, r1
 800b600:	1853      	adds	r3, r2, r1
 800b602:	4619      	mov	r1, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f04f 0400 	mov.w	r4, #0
 800b60a:	461a      	mov	r2, r3
 800b60c:	4623      	mov	r3, r4
 800b60e:	f7f5 f85b 	bl	80006c8 <__aeabi_uldivmod>
 800b612:	4603      	mov	r3, r0
 800b614:	460c      	mov	r4, r1
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	e049      	b.n	800b6ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b61a:	4b30      	ldr	r3, [pc, #192]	; (800b6dc <HAL_RCC_GetSysClockFreq+0x158>)
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	099b      	lsrs	r3, r3, #6
 800b620:	f04f 0400 	mov.w	r4, #0
 800b624:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b628:	f04f 0200 	mov.w	r2, #0
 800b62c:	ea03 0501 	and.w	r5, r3, r1
 800b630:	ea04 0602 	and.w	r6, r4, r2
 800b634:	4629      	mov	r1, r5
 800b636:	4632      	mov	r2, r6
 800b638:	f04f 0300 	mov.w	r3, #0
 800b63c:	f04f 0400 	mov.w	r4, #0
 800b640:	0154      	lsls	r4, r2, #5
 800b642:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b646:	014b      	lsls	r3, r1, #5
 800b648:	4619      	mov	r1, r3
 800b64a:	4622      	mov	r2, r4
 800b64c:	1b49      	subs	r1, r1, r5
 800b64e:	eb62 0206 	sbc.w	r2, r2, r6
 800b652:	f04f 0300 	mov.w	r3, #0
 800b656:	f04f 0400 	mov.w	r4, #0
 800b65a:	0194      	lsls	r4, r2, #6
 800b65c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b660:	018b      	lsls	r3, r1, #6
 800b662:	1a5b      	subs	r3, r3, r1
 800b664:	eb64 0402 	sbc.w	r4, r4, r2
 800b668:	f04f 0100 	mov.w	r1, #0
 800b66c:	f04f 0200 	mov.w	r2, #0
 800b670:	00e2      	lsls	r2, r4, #3
 800b672:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b676:	00d9      	lsls	r1, r3, #3
 800b678:	460b      	mov	r3, r1
 800b67a:	4614      	mov	r4, r2
 800b67c:	195b      	adds	r3, r3, r5
 800b67e:	eb44 0406 	adc.w	r4, r4, r6
 800b682:	f04f 0100 	mov.w	r1, #0
 800b686:	f04f 0200 	mov.w	r2, #0
 800b68a:	02a2      	lsls	r2, r4, #10
 800b68c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b690:	0299      	lsls	r1, r3, #10
 800b692:	460b      	mov	r3, r1
 800b694:	4614      	mov	r4, r2
 800b696:	4618      	mov	r0, r3
 800b698:	4621      	mov	r1, r4
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f04f 0400 	mov.w	r4, #0
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	4623      	mov	r3, r4
 800b6a4:	f7f5 f810 	bl	80006c8 <__aeabi_uldivmod>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b6ae:	4b0b      	ldr	r3, [pc, #44]	; (800b6dc <HAL_RCC_GetSysClockFreq+0x158>)
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	0c1b      	lsrs	r3, r3, #16
 800b6b4:	f003 0303 	and.w	r3, r3, #3
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	005b      	lsls	r3, r3, #1
 800b6bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c6:	60bb      	str	r3, [r7, #8]
      break;
 800b6c8:	e002      	b.n	800b6d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b6ca:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800b6cc:	60bb      	str	r3, [r7, #8]
      break;
 800b6ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b6d0:	68bb      	ldr	r3, [r7, #8]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	40023800 	.word	0x40023800
 800b6e0:	00f42400 	.word	0x00f42400
 800b6e4:	017d7840 	.word	0x017d7840

0800b6e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b6ec:	4b03      	ldr	r3, [pc, #12]	; (800b6fc <HAL_RCC_GetHCLKFreq+0x14>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	20000000 	.word	0x20000000

0800b700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b704:	f7ff fff0 	bl	800b6e8 <HAL_RCC_GetHCLKFreq>
 800b708:	4601      	mov	r1, r0
 800b70a:	4b05      	ldr	r3, [pc, #20]	; (800b720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	0a9b      	lsrs	r3, r3, #10
 800b710:	f003 0307 	and.w	r3, r3, #7
 800b714:	4a03      	ldr	r2, [pc, #12]	; (800b724 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b716:	5cd3      	ldrb	r3, [r2, r3]
 800b718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	40023800 	.word	0x40023800
 800b724:	080170ac 	.word	0x080170ac

0800b728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b72c:	f7ff ffdc 	bl	800b6e8 <HAL_RCC_GetHCLKFreq>
 800b730:	4601      	mov	r1, r0
 800b732:	4b05      	ldr	r3, [pc, #20]	; (800b748 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	0b5b      	lsrs	r3, r3, #13
 800b738:	f003 0307 	and.w	r3, r3, #7
 800b73c:	4a03      	ldr	r2, [pc, #12]	; (800b74c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b73e:	5cd3      	ldrb	r3, [r2, r3]
 800b740:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b744:	4618      	mov	r0, r3
 800b746:	bd80      	pop	{r7, pc}
 800b748:	40023800 	.word	0x40023800
 800b74c:	080170ac 	.word	0x080170ac

0800b750 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	220f      	movs	r2, #15
 800b75e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b760:	4b12      	ldr	r3, [pc, #72]	; (800b7ac <HAL_RCC_GetClockConfig+0x5c>)
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	f003 0203 	and.w	r2, r3, #3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b76c:	4b0f      	ldr	r3, [pc, #60]	; (800b7ac <HAL_RCC_GetClockConfig+0x5c>)
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b778:	4b0c      	ldr	r3, [pc, #48]	; (800b7ac <HAL_RCC_GetClockConfig+0x5c>)
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b784:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <HAL_RCC_GetClockConfig+0x5c>)
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	08db      	lsrs	r3, r3, #3
 800b78a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b792:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <HAL_RCC_GetClockConfig+0x60>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f003 020f 	and.w	r2, r3, #15
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	601a      	str	r2, [r3, #0]
}
 800b79e:	bf00      	nop
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	40023800 	.word	0x40023800
 800b7b0:	40023c00 	.word	0x40023c00

0800b7b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0301 	and.w	r3, r3, #1
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d012      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b7dc:	4b69      	ldr	r3, [pc, #420]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	4a68      	ldr	r2, [pc, #416]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b7e6:	6093      	str	r3, [r2, #8]
 800b7e8:	4b66      	ldr	r3, [pc, #408]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f0:	4964      	ldr	r1, [pc, #400]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d101      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b7fe:	2301      	movs	r3, #1
 800b800:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d017      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b80e:	4b5d      	ldr	r3, [pc, #372]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b81c:	4959      	ldr	r1, [pc, #356]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b81e:	4313      	orrs	r3, r2
 800b820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b82c:	d101      	bne.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b82e:	2301      	movs	r3, #1
 800b830:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d101      	bne.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b83a:	2301      	movs	r3, #1
 800b83c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d017      	beq.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b84a:	4b4e      	ldr	r3, [pc, #312]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b84c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b850:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b858:	494a      	ldr	r1, [pc, #296]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b85a:	4313      	orrs	r3, r2
 800b85c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b868:	d101      	bne.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b86a:	2301      	movs	r3, #1
 800b86c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b876:	2301      	movs	r3, #1
 800b878:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b886:	2301      	movs	r3, #1
 800b888:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0320 	and.w	r3, r3, #32
 800b892:	2b00      	cmp	r3, #0
 800b894:	f000 808b 	beq.w	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b898:	4b3a      	ldr	r3, [pc, #232]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89c:	4a39      	ldr	r2, [pc, #228]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b89e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8a2:	6413      	str	r3, [r2, #64]	; 0x40
 800b8a4:	4b37      	ldr	r3, [pc, #220]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8ac:	60bb      	str	r3, [r7, #8]
 800b8ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b8b0:	4b35      	ldr	r3, [pc, #212]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a34      	ldr	r2, [pc, #208]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b8b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8bc:	f7fa fc44 	bl	8006148 <HAL_GetTick>
 800b8c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b8c2:	e008      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8c4:	f7fa fc40 	bl	8006148 <HAL_GetTick>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	2b64      	cmp	r3, #100	; 0x64
 800b8d0:	d901      	bls.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e355      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b8d6:	4b2c      	ldr	r3, [pc, #176]	; (800b988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0f0      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b8e2:	4b28      	ldr	r3, [pc, #160]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d035      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d02e      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b900:	4b20      	ldr	r3, [pc, #128]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b908:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b90a:	4b1e      	ldr	r3, [pc, #120]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b90e:	4a1d      	ldr	r2, [pc, #116]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b914:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b916:	4b1b      	ldr	r3, [pc, #108]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b91a:	4a1a      	ldr	r2, [pc, #104]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b91c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b920:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b922:	4a18      	ldr	r2, [pc, #96]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b928:	4b16      	ldr	r3, [pc, #88]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b01      	cmp	r3, #1
 800b932:	d114      	bne.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b934:	f7fa fc08 	bl	8006148 <HAL_GetTick>
 800b938:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b93a:	e00a      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b93c:	f7fa fc04 	bl	8006148 <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	f241 3288 	movw	r2, #5000	; 0x1388
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d901      	bls.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e317      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b952:	4b0c      	ldr	r3, [pc, #48]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b956:	f003 0302 	and.w	r3, r3, #2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0ee      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b96a:	d111      	bne.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b96c:	4b05      	ldr	r3, [pc, #20]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b978:	4b04      	ldr	r3, [pc, #16]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b97a:	400b      	ands	r3, r1
 800b97c:	4901      	ldr	r1, [pc, #4]	; (800b984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	608b      	str	r3, [r1, #8]
 800b982:	e00b      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b984:	40023800 	.word	0x40023800
 800b988:	40007000 	.word	0x40007000
 800b98c:	0ffffcff 	.word	0x0ffffcff
 800b990:	4bb0      	ldr	r3, [pc, #704]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	4aaf      	ldr	r2, [pc, #700]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b996:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b99a:	6093      	str	r3, [r2, #8]
 800b99c:	4bad      	ldr	r3, [pc, #692]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b99e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9a8:	49aa      	ldr	r1, [pc, #680]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 0310 	and.w	r3, r3, #16
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d010      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b9ba:	4ba6      	ldr	r3, [pc, #664]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b9bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9c0:	4aa4      	ldr	r2, [pc, #656]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b9c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b9ca:	4ba2      	ldr	r3, [pc, #648]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b9cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d4:	499f      	ldr	r1, [pc, #636]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00a      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b9e8:	4b9a      	ldr	r3, [pc, #616]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9f6:	4997      	ldr	r1, [pc, #604]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ba0a:	4b92      	ldr	r3, [pc, #584]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ba0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba18:	498e      	ldr	r1, [pc, #568]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00a      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ba2c:	4b89      	ldr	r3, [pc, #548]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ba2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba3a:	4986      	ldr	r1, [pc, #536]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00a      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba4e:	4b81      	ldr	r3, [pc, #516]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ba50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba5c:	497d      	ldr	r1, [pc, #500]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00a      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba70:	4b78      	ldr	r3, [pc, #480]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ba72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba76:	f023 0203 	bic.w	r2, r3, #3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba7e:	4975      	ldr	r1, [pc, #468]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ba80:	4313      	orrs	r3, r2
 800ba82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00a      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ba92:	4b70      	ldr	r3, [pc, #448]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ba94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba98:	f023 020c 	bic.w	r2, r3, #12
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baa0:	496c      	ldr	r1, [pc, #432]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800baa2:	4313      	orrs	r3, r2
 800baa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00a      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bab4:	4b67      	ldr	r3, [pc, #412]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac2:	4964      	ldr	r1, [pc, #400]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bac4:	4313      	orrs	r3, r2
 800bac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bad6:	4b5f      	ldr	r3, [pc, #380]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800badc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae4:	495b      	ldr	r1, [pc, #364]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bae6:	4313      	orrs	r3, r2
 800bae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00a      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800baf8:	4b56      	ldr	r3, [pc, #344]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bafe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb06:	4953      	ldr	r1, [pc, #332]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00a      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bb1a:	4b4e      	ldr	r3, [pc, #312]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bb1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb28:	494a      	ldr	r1, [pc, #296]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00a      	beq.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bb3c:	4b45      	ldr	r3, [pc, #276]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bb3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb4a:	4942      	ldr	r1, [pc, #264]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00a      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bb5e:	4b3d      	ldr	r3, [pc, #244]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bb60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb6c:	4939      	ldr	r1, [pc, #228]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00a      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb80:	4b34      	ldr	r3, [pc, #208]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bb82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb8e:	4931      	ldr	r1, [pc, #196]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d011      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bba2:	4b2c      	ldr	r3, [pc, #176]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bba8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbb0:	4928      	ldr	r1, [pc, #160]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbc0:	d101      	bne.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0308 	and.w	r3, r3, #8
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00a      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bbe2:	4b1c      	ldr	r3, [pc, #112]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bbe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbf0:	4918      	ldr	r1, [pc, #96]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00b      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bc04:	4b13      	ldr	r3, [pc, #76]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bc06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc14:	490f      	ldr	r1, [pc, #60]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bc16:	4313      	orrs	r3, r2
 800bc18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d005      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc2a:	f040 80d8 	bne.w	800bdde <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bc2e:	4b09      	ldr	r3, [pc, #36]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a08      	ldr	r2, [pc, #32]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bc34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bc38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc3a:	f7fa fa85 	bl	8006148 <HAL_GetTick>
 800bc3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bc40:	e00a      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bc42:	f7fa fa81 	bl	8006148 <HAL_GetTick>
 800bc46:	4602      	mov	r2, r0
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	2b64      	cmp	r3, #100	; 0x64
 800bc4e:	d903      	bls.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc50:	2303      	movs	r3, #3
 800bc52:	e196      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800bc54:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bc58:	4b6c      	ldr	r3, [pc, #432]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1ee      	bne.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d021      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d11d      	bne.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bc78:	4b64      	ldr	r3, [pc, #400]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bc7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc7e:	0c1b      	lsrs	r3, r3, #16
 800bc80:	f003 0303 	and.w	r3, r3, #3
 800bc84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc86:	4b61      	ldr	r3, [pc, #388]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bc88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc8c:	0e1b      	lsrs	r3, r3, #24
 800bc8e:	f003 030f 	and.w	r3, r3, #15
 800bc92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	019a      	lsls	r2, r3, #6
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	041b      	lsls	r3, r3, #16
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	061b      	lsls	r3, r3, #24
 800bca4:	431a      	orrs	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	071b      	lsls	r3, r3, #28
 800bcac:	4957      	ldr	r1, [pc, #348]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d004      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x516>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcc8:	d00a      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d02e      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcde:	d129      	bne.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bce0:	4b4a      	ldr	r3, [pc, #296]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bce6:	0c1b      	lsrs	r3, r3, #16
 800bce8:	f003 0303 	and.w	r3, r3, #3
 800bcec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bcee:	4b47      	ldr	r3, [pc, #284]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bcf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcf4:	0f1b      	lsrs	r3, r3, #28
 800bcf6:	f003 0307 	and.w	r3, r3, #7
 800bcfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	019a      	lsls	r2, r3, #6
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	041b      	lsls	r3, r3, #16
 800bd06:	431a      	orrs	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	061b      	lsls	r3, r3, #24
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	071b      	lsls	r3, r3, #28
 800bd14:	493d      	ldr	r1, [pc, #244]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bd1c:	4b3b      	ldr	r3, [pc, #236]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bd1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd22:	f023 021f 	bic.w	r2, r3, #31
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	4937      	ldr	r1, [pc, #220]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d01d      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bd40:	4b32      	ldr	r3, [pc, #200]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bd42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd46:	0e1b      	lsrs	r3, r3, #24
 800bd48:	f003 030f 	and.w	r3, r3, #15
 800bd4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bd4e:	4b2f      	ldr	r3, [pc, #188]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bd50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd54:	0f1b      	lsrs	r3, r3, #28
 800bd56:	f003 0307 	and.w	r3, r3, #7
 800bd5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	019a      	lsls	r2, r3, #6
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	041b      	lsls	r3, r3, #16
 800bd68:	431a      	orrs	r2, r3
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	061b      	lsls	r3, r3, #24
 800bd6e:	431a      	orrs	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	071b      	lsls	r3, r3, #28
 800bd74:	4925      	ldr	r1, [pc, #148]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bd76:	4313      	orrs	r3, r2
 800bd78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d011      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	019a      	lsls	r2, r3, #6
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	041b      	lsls	r3, r3, #16
 800bd94:	431a      	orrs	r2, r3
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	061b      	lsls	r3, r3, #24
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	071b      	lsls	r3, r3, #28
 800bda4:	4919      	ldr	r1, [pc, #100]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bda6:	4313      	orrs	r3, r2
 800bda8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bdac:	4b17      	ldr	r3, [pc, #92]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a16      	ldr	r2, [pc, #88]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bdb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bdb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdb8:	f7fa f9c6 	bl	8006148 <HAL_GetTick>
 800bdbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bdbe:	e008      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bdc0:	f7fa f9c2 	bl	8006148 <HAL_GetTick>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	2b64      	cmp	r3, #100	; 0x64
 800bdcc:	d901      	bls.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e0d7      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bdd2:	4b0e      	ldr	r3, [pc, #56]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0f0      	beq.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	f040 80cd 	bne.w	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bde6:	4b09      	ldr	r3, [pc, #36]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a08      	ldr	r2, [pc, #32]	; (800be0c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800bdec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdf2:	f7fa f9a9 	bl	8006148 <HAL_GetTick>
 800bdf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bdf8:	e00a      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bdfa:	f7fa f9a5 	bl	8006148 <HAL_GetTick>
 800bdfe:	4602      	mov	r2, r0
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	2b64      	cmp	r3, #100	; 0x64
 800be06:	d903      	bls.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be08:	2303      	movs	r3, #3
 800be0a:	e0ba      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800be0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800be10:	4b5e      	ldr	r3, [pc, #376]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be1c:	d0ed      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d02e      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be42:	2b00      	cmp	r3, #0
 800be44:	d12a      	bne.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800be46:	4b51      	ldr	r3, [pc, #324]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800be48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be4c:	0c1b      	lsrs	r3, r3, #16
 800be4e:	f003 0303 	and.w	r3, r3, #3
 800be52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800be54:	4b4d      	ldr	r3, [pc, #308]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800be56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be5a:	0f1b      	lsrs	r3, r3, #28
 800be5c:	f003 0307 	and.w	r3, r3, #7
 800be60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	019a      	lsls	r2, r3, #6
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	041b      	lsls	r3, r3, #16
 800be6c:	431a      	orrs	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	061b      	lsls	r3, r3, #24
 800be74:	431a      	orrs	r2, r3
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	071b      	lsls	r3, r3, #28
 800be7a:	4944      	ldr	r1, [pc, #272]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800be7c:	4313      	orrs	r3, r2
 800be7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800be82:	4b42      	ldr	r3, [pc, #264]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800be84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be90:	3b01      	subs	r3, #1
 800be92:	021b      	lsls	r3, r3, #8
 800be94:	493d      	ldr	r1, [pc, #244]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800be96:	4313      	orrs	r3, r2
 800be98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d022      	beq.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beb0:	d11d      	bne.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800beb2:	4b36      	ldr	r3, [pc, #216]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800beb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beb8:	0e1b      	lsrs	r3, r3, #24
 800beba:	f003 030f 	and.w	r3, r3, #15
 800bebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bec0:	4b32      	ldr	r3, [pc, #200]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800bec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bec6:	0f1b      	lsrs	r3, r3, #28
 800bec8:	f003 0307 	and.w	r3, r3, #7
 800becc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	019a      	lsls	r2, r3, #6
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6a1b      	ldr	r3, [r3, #32]
 800bed8:	041b      	lsls	r3, r3, #16
 800beda:	431a      	orrs	r2, r3
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	061b      	lsls	r3, r3, #24
 800bee0:	431a      	orrs	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	071b      	lsls	r3, r3, #28
 800bee6:	4929      	ldr	r1, [pc, #164]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800bee8:	4313      	orrs	r3, r2
 800beea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f003 0308 	and.w	r3, r3, #8
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d028      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800befa:	4b24      	ldr	r3, [pc, #144]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800befc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf00:	0e1b      	lsrs	r3, r3, #24
 800bf02:	f003 030f 	and.w	r3, r3, #15
 800bf06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bf08:	4b20      	ldr	r3, [pc, #128]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800bf0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf0e:	0c1b      	lsrs	r3, r3, #16
 800bf10:	f003 0303 	and.w	r3, r3, #3
 800bf14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	019a      	lsls	r2, r3, #6
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	041b      	lsls	r3, r3, #16
 800bf20:	431a      	orrs	r2, r3
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	061b      	lsls	r3, r3, #24
 800bf26:	431a      	orrs	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	69db      	ldr	r3, [r3, #28]
 800bf2c:	071b      	lsls	r3, r3, #28
 800bf2e:	4917      	ldr	r1, [pc, #92]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800bf30:	4313      	orrs	r3, r2
 800bf32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bf36:	4b15      	ldr	r3, [pc, #84]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800bf38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	4911      	ldr	r1, [pc, #68]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800bf46:	4313      	orrs	r3, r2
 800bf48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bf4c:	4b0f      	ldr	r3, [pc, #60]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a0e      	ldr	r2, [pc, #56]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800bf52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf58:	f7fa f8f6 	bl	8006148 <HAL_GetTick>
 800bf5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bf5e:	e008      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bf60:	f7fa f8f2 	bl	8006148 <HAL_GetTick>
 800bf64:	4602      	mov	r2, r0
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	2b64      	cmp	r3, #100	; 0x64
 800bf6c:	d901      	bls.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	e007      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bf72:	4b06      	ldr	r3, [pc, #24]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf7e:	d1ef      	bne.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3720      	adds	r7, #32
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	40023800 	.word	0x40023800

0800bf90 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a80      	ldr	r2, [pc, #512]	; (800c1a0 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800bfa0:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800bfa2:	4b80      	ldr	r3, [pc, #512]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfa8:	099b      	lsrs	r3, r3, #6
 800bfaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bfb2:	4b7c      	ldr	r3, [pc, #496]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfb8:	0c1b      	lsrs	r3, r3, #16
 800bfba:	f003 0203 	and.w	r2, r3, #3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bfc2:	4b78      	ldr	r3, [pc, #480]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfc8:	0e1b      	lsrs	r3, r3, #24
 800bfca:	f003 020f 	and.w	r2, r3, #15
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bfd2:	4b74      	ldr	r3, [pc, #464]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfd8:	0f1b      	lsrs	r3, r3, #28
 800bfda:	f003 0207 	and.w	r2, r3, #7
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800bfe2:	4b70      	ldr	r3, [pc, #448]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bfe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe8:	099b      	lsrs	r3, r3, #6
 800bfea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bff2:	4b6c      	ldr	r3, [pc, #432]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800bff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bff8:	0c1b      	lsrs	r3, r3, #16
 800bffa:	f003 0203 	and.w	r2, r3, #3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c002:	4b68      	ldr	r3, [pc, #416]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c008:	0e1b      	lsrs	r3, r3, #24
 800c00a:	f003 020f 	and.w	r2, r3, #15
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c012:	4b64      	ldr	r3, [pc, #400]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c018:	0f1b      	lsrs	r3, r3, #28
 800c01a:	f003 0207 	and.w	r2, r3, #7
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800c022:	4b60      	ldr	r3, [pc, #384]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c028:	f003 021f 	and.w	r2, r3, #31
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800c030:	4b5c      	ldr	r3, [pc, #368]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c036:	0a1b      	lsrs	r3, r3, #8
 800c038:	f003 021f 	and.w	r2, r3, #31
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800c040:	4b58      	ldr	r3, [pc, #352]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c046:	0c1b      	lsrs	r3, r3, #16
 800c048:	f003 0203 	and.w	r2, r3, #3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800c050:	4b54      	ldr	r3, [pc, #336]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c056:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800c05e:	4b51      	ldr	r3, [pc, #324]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c064:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800c06c:	4b4d      	ldr	r3, [pc, #308]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800c078:	4b4a      	ldr	r3, [pc, #296]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c07e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800c086:	4b47      	ldr	r3, [pc, #284]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c08c:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800c094:	4b43      	ldr	r3, [pc, #268]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c09a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800c0a2:	4b40      	ldr	r3, [pc, #256]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0a8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800c0b0:	4b3c      	ldr	r3, [pc, #240]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b6:	f003 0203 	and.w	r2, r3, #3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800c0be:	4b39      	ldr	r3, [pc, #228]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0c4:	f003 020c 	and.w	r2, r3, #12
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800c0cc:	4b35      	ldr	r3, [pc, #212]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0d2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800c0da:	4b32      	ldr	r3, [pc, #200]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0e0:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800c0e8:	4b2e      	ldr	r3, [pc, #184]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800c0f6:	4b2b      	ldr	r3, [pc, #172]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0fc:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800c104:	4b27      	ldr	r3, [pc, #156]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c10a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800c112:	4b24      	ldr	r3, [pc, #144]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c118:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c120:	4b20      	ldr	r3, [pc, #128]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c126:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800c12e:	4b1d      	ldr	r3, [pc, #116]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c134:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800c13c:	4b19      	ldr	r3, [pc, #100]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c142:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800c14a:	4b16      	ldr	r3, [pc, #88]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c150:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800c15a:	4b12      	ldr	r3, [pc, #72]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c162:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800c164:	4b0f      	ldr	r3, [pc, #60]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c168:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	431a      	orrs	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800c174:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c17a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d103      	bne.n	800c18a <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800c188:	e003      	b.n	800c192 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c190:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c192:	bf00      	nop
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	00fffff1 	.word	0x00fffff1
 800c1a4:	40023800 	.word	0x40023800

0800c1a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c1c6:	f040 8086 	bne.w	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c1ca:	4b8d      	ldr	r3, [pc, #564]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1d0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c1d8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1e0:	d03e      	beq.n	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800c1e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1e6:	d073      	beq.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d000      	beq.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c1ec:	e074      	b.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c1ee:	4b84      	ldr	r3, [pc, #528]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d108      	bne.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c1fa:	4b81      	ldr	r3, [pc, #516]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c202:	4a80      	ldr	r2, [pc, #512]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c204:	fbb2 f3f3 	udiv	r3, r2, r3
 800c208:	613b      	str	r3, [r7, #16]
 800c20a:	e007      	b.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c20c:	4b7c      	ldr	r3, [pc, #496]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c214:	4a7c      	ldr	r2, [pc, #496]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800c216:	fbb2 f3f3 	udiv	r3, r2, r3
 800c21a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c21c:	4b78      	ldr	r3, [pc, #480]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c222:	0e1b      	lsrs	r3, r3, #24
 800c224:	f003 030f 	and.w	r3, r3, #15
 800c228:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c22a:	4b75      	ldr	r3, [pc, #468]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c230:	099b      	lsrs	r3, r3, #6
 800c232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c236:	693a      	ldr	r2, [r7, #16]
 800c238:	fb02 f203 	mul.w	r2, r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c242:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c244:	4b6e      	ldr	r3, [pc, #440]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c24a:	0a1b      	lsrs	r3, r3, #8
 800c24c:	f003 031f 	and.w	r3, r3, #31
 800c250:	3301      	adds	r3, #1
 800c252:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c254:	697a      	ldr	r2, [r7, #20]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	fbb2 f3f3 	udiv	r3, r2, r3
 800c25c:	617b      	str	r3, [r7, #20]
        break;
 800c25e:	e03b      	b.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c260:	4b67      	ldr	r3, [pc, #412]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d108      	bne.n	800c27e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c26c:	4b64      	ldr	r3, [pc, #400]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c274:	4a63      	ldr	r2, [pc, #396]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c276:	fbb2 f3f3 	udiv	r3, r2, r3
 800c27a:	613b      	str	r3, [r7, #16]
 800c27c:	e007      	b.n	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c27e:	4b60      	ldr	r3, [pc, #384]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c286:	4a60      	ldr	r2, [pc, #384]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800c288:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c28e:	4b5c      	ldr	r3, [pc, #368]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c294:	0e1b      	lsrs	r3, r3, #24
 800c296:	f003 030f 	and.w	r3, r3, #15
 800c29a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c29c:	4b58      	ldr	r3, [pc, #352]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2a2:	099b      	lsrs	r3, r3, #6
 800c2a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	fb02 f203 	mul.w	r2, r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2b4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c2b6:	4b52      	ldr	r3, [pc, #328]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c2b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2bc:	f003 031f 	and.w	r3, r3, #31
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c2c4:	697a      	ldr	r2, [r7, #20]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2cc:	617b      	str	r3, [r7, #20]
        break;
 800c2ce:	e003      	b.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2d0:	4b4e      	ldr	r3, [pc, #312]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800c2d2:	617b      	str	r3, [r7, #20]
        break;
 800c2d4:	e000      	b.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800c2d6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2de:	f040 8086 	bne.w	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c2e2:	4b47      	ldr	r3, [pc, #284]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c2f0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2f8:	d03e      	beq.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800c2fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2fe:	d073      	beq.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800c300:	2b00      	cmp	r3, #0
 800c302:	d000      	beq.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c304:	e074      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c306:	4b3e      	ldr	r3, [pc, #248]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d108      	bne.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c312:	4b3b      	ldr	r3, [pc, #236]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c31a:	4a3a      	ldr	r2, [pc, #232]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c320:	613b      	str	r3, [r7, #16]
 800c322:	e007      	b.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c324:	4b36      	ldr	r3, [pc, #216]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c32c:	4a36      	ldr	r2, [pc, #216]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800c32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c332:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c334:	4b32      	ldr	r3, [pc, #200]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c33a:	0e1b      	lsrs	r3, r3, #24
 800c33c:	f003 030f 	and.w	r3, r3, #15
 800c340:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c342:	4b2f      	ldr	r3, [pc, #188]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c348:	099b      	lsrs	r3, r3, #6
 800c34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	fb02 f203 	mul.w	r2, r2, r3
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	fbb2 f3f3 	udiv	r3, r2, r3
 800c35a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c35c:	4b28      	ldr	r3, [pc, #160]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c35e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c362:	0a1b      	lsrs	r3, r3, #8
 800c364:	f003 031f 	and.w	r3, r3, #31
 800c368:	3301      	adds	r3, #1
 800c36a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	fbb2 f3f3 	udiv	r3, r2, r3
 800c374:	617b      	str	r3, [r7, #20]
        break;
 800c376:	e03b      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c378:	4b21      	ldr	r3, [pc, #132]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d108      	bne.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c384:	4b1e      	ldr	r3, [pc, #120]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c38c:	4a1d      	ldr	r2, [pc, #116]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c392:	613b      	str	r3, [r7, #16]
 800c394:	e007      	b.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c396:	4b1a      	ldr	r3, [pc, #104]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c39e:	4a1a      	ldr	r2, [pc, #104]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800c3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c3a6:	4b16      	ldr	r3, [pc, #88]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3ac:	0e1b      	lsrs	r3, r3, #24
 800c3ae:	f003 030f 	and.w	r3, r3, #15
 800c3b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c3b4:	4b12      	ldr	r3, [pc, #72]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3ba:	099b      	lsrs	r3, r3, #6
 800c3bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	fb02 f203 	mul.w	r2, r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3cc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c3ce:	4b0c      	ldr	r3, [pc, #48]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c3d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3d4:	f003 031f 	and.w	r3, r3, #31
 800c3d8:	3301      	adds	r3, #1
 800c3da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e4:	617b      	str	r3, [r7, #20]
        break;
 800c3e6:	e003      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3e8:	4b08      	ldr	r3, [pc, #32]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800c3ea:	617b      	str	r3, [r7, #20]
        break;
 800c3ec:	e000      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800c3ee:	bf00      	nop

  return frequency;
 800c3f0:	697b      	ldr	r3, [r7, #20]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	371c      	adds	r7, #28
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	40023800 	.word	0x40023800
 800c404:	00f42400 	.word	0x00f42400
 800c408:	017d7840 	.word	0x017d7840
 800c40c:	00bb8000 	.word	0x00bb8000

0800c410 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e06b      	b.n	800c4fa <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	7f5b      	ldrb	r3, [r3, #29]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d105      	bne.n	800c438 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7f6 f9f8 	bl	8002828 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2202      	movs	r2, #2
 800c43c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	22ca      	movs	r2, #202	; 0xca
 800c444:	625a      	str	r2, [r3, #36]	; 0x24
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2253      	movs	r2, #83	; 0x53
 800c44c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fb00 	bl	800ca54 <RTC_EnterInitMode>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d008      	beq.n	800c46c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	22ff      	movs	r2, #255	; 0xff
 800c460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2204      	movs	r2, #4
 800c466:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	e046      	b.n	800c4fa <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6899      	ldr	r1, [r3, #8]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	4b23      	ldr	r3, [pc, #140]	; (800c504 <HAL_RTC_Init+0xf4>)
 800c478:	400b      	ands	r3, r1
 800c47a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6899      	ldr	r1, [r3, #8]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	431a      	orrs	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	695b      	ldr	r3, [r3, #20]
 800c490:	431a      	orrs	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	430a      	orrs	r2, r1
 800c498:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	68d2      	ldr	r2, [r2, #12]
 800c4a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6919      	ldr	r1, [r3, #16]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	041a      	lsls	r2, r3, #16
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	430a      	orrs	r2, r1
 800c4b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68da      	ldr	r2, [r3, #12]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4c6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f022 0208 	bic.w	r2, r2, #8
 800c4d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	22ff      	movs	r2, #255	; 0xff
 800c4f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
  }
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	ff8fffbf 	.word	0xff8fffbf

0800c508 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c508:	b590      	push	{r4, r7, lr}
 800c50a:	b087      	sub	sp, #28
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800c514:	2300      	movs	r3, #0
 800c516:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	7f1b      	ldrb	r3, [r3, #28]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d101      	bne.n	800c524 <HAL_RTC_SetTime+0x1c>
 800c520:	2302      	movs	r3, #2
 800c522:	e0a8      	b.n	800c676 <HAL_RTC_SetTime+0x16e>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2201      	movs	r2, #1
 800c528:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2202      	movs	r2, #2
 800c52e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d126      	bne.n	800c584 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c540:	2b00      	cmp	r3, #0
 800c542:	d102      	bne.n	800c54a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2200      	movs	r2, #0
 800c548:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 faac 	bl	800caac <RTC_ByteToBcd2>
 800c554:	4603      	mov	r3, r0
 800c556:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	785b      	ldrb	r3, [r3, #1]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 faa5 	bl	800caac <RTC_ByteToBcd2>
 800c562:	4603      	mov	r3, r0
 800c564:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c566:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	789b      	ldrb	r3, [r3, #2]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 fa9d 	bl	800caac <RTC_ByteToBcd2>
 800c572:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c574:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	7b1b      	ldrb	r3, [r3, #12]
 800c57c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c57e:	4313      	orrs	r3, r2
 800c580:	617b      	str	r3, [r7, #20]
 800c582:	e018      	b.n	800c5b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d102      	bne.n	800c598 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2200      	movs	r2, #0
 800c596:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	785b      	ldrb	r3, [r3, #1]
 800c5a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c5a4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c5aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	7b1b      	ldrb	r3, [r3, #12]
 800c5b0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	22ca      	movs	r2, #202	; 0xca
 800c5bc:	625a      	str	r2, [r3, #36]	; 0x24
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2253      	movs	r2, #83	; 0x53
 800c5c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 fa44 	bl	800ca54 <RTC_EnterInitMode>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00b      	beq.n	800c5ea <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	22ff      	movs	r2, #255	; 0xff
 800c5d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2204      	movs	r2, #4
 800c5de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e045      	b.n	800c676 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	6979      	ldr	r1, [r7, #20]
 800c5f0:	4b23      	ldr	r3, [pc, #140]	; (800c680 <HAL_RTC_SetTime+0x178>)
 800c5f2:	400b      	ands	r3, r1
 800c5f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	689a      	ldr	r2, [r3, #8]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c604:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	6899      	ldr	r1, [r3, #8]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	691a      	ldr	r2, [r3, #16]
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	431a      	orrs	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	430a      	orrs	r2, r1
 800c61c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68da      	ldr	r2, [r3, #12]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c62c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f003 0320 	and.w	r3, r3, #32
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d111      	bne.n	800c660 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 f9e1 	bl	800ca04 <HAL_RTC_WaitForSynchro>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00b      	beq.n	800c660 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	22ff      	movs	r2, #255	; 0xff
 800c64e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2204      	movs	r2, #4
 800c654:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	e00a      	b.n	800c676 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	22ff      	movs	r2, #255	; 0xff
 800c666:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2201      	movs	r2, #1
 800c66c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c674:	2300      	movs	r3, #0
  }
}
 800c676:	4618      	mov	r0, r3
 800c678:	371c      	adds	r7, #28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd90      	pop	{r4, r7, pc}
 800c67e:	bf00      	nop
 800c680:	007f7f7f 	.word	0x007f7f7f

0800c684 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c684:	b590      	push	{r4, r7, lr}
 800c686:	b087      	sub	sp, #28
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	7f1b      	ldrb	r3, [r3, #28]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d101      	bne.n	800c6a0 <HAL_RTC_SetDate+0x1c>
 800c69c:	2302      	movs	r3, #2
 800c69e:	e092      	b.n	800c7c6 <HAL_RTC_SetDate+0x142>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10e      	bne.n	800c6d0 <HAL_RTC_SetDate+0x4c>
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	785b      	ldrb	r3, [r3, #1]
 800c6b6:	f003 0310 	and.w	r3, r3, #16
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d008      	beq.n	800c6d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	785b      	ldrb	r3, [r3, #1]
 800c6c2:	f023 0310 	bic.w	r3, r3, #16
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	330a      	adds	r3, #10
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d11c      	bne.n	800c710 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	78db      	ldrb	r3, [r3, #3]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 f9e6 	bl	800caac <RTC_ByteToBcd2>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	785b      	ldrb	r3, [r3, #1]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f9df 	bl	800caac <RTC_ByteToBcd2>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800c6f2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	789b      	ldrb	r3, [r3, #2]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 f9d7 	bl	800caac <RTC_ByteToBcd2>
 800c6fe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800c700:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800c70a:	4313      	orrs	r3, r2
 800c70c:	617b      	str	r3, [r7, #20]
 800c70e:	e00e      	b.n	800c72e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	78db      	ldrb	r3, [r3, #3]
 800c714:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	785b      	ldrb	r3, [r3, #1]
 800c71a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800c71c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800c722:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800c72a:	4313      	orrs	r3, r2
 800c72c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	22ca      	movs	r2, #202	; 0xca
 800c734:	625a      	str	r2, [r3, #36]	; 0x24
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2253      	movs	r2, #83	; 0x53
 800c73c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f000 f988 	bl	800ca54 <RTC_EnterInitMode>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00b      	beq.n	800c762 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	22ff      	movs	r2, #255	; 0xff
 800c750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2204      	movs	r2, #4
 800c756:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	e031      	b.n	800c7c6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	6979      	ldr	r1, [r7, #20]
 800c768:	4b19      	ldr	r3, [pc, #100]	; (800c7d0 <HAL_RTC_SetDate+0x14c>)
 800c76a:	400b      	ands	r3, r1
 800c76c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68da      	ldr	r2, [r3, #12]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c77c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	f003 0320 	and.w	r3, r3, #32
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d111      	bne.n	800c7b0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 f939 	bl	800ca04 <HAL_RTC_WaitForSynchro>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00b      	beq.n	800c7b0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	22ff      	movs	r2, #255	; 0xff
 800c79e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2204      	movs	r2, #4
 800c7a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e00a      	b.n	800c7c6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	22ff      	movs	r2, #255	; 0xff
 800c7b6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
  }
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	371c      	adds	r7, #28
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd90      	pop	{r4, r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	00ffff3f 	.word	0x00ffff3f

0800c7d4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c7d4:	b590      	push	{r4, r7, lr}
 800c7d6:	b089      	sub	sp, #36	; 0x24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	61fb      	str	r3, [r7, #28]
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	7f1b      	ldrb	r3, [r3, #28]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d101      	bne.n	800c7f8 <HAL_RTC_SetAlarm+0x24>
 800c7f4:	2302      	movs	r3, #2
 800c7f6:	e101      	b.n	800c9fc <HAL_RTC_SetAlarm+0x228>
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2202      	movs	r2, #2
 800c802:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d137      	bne.n	800c87a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c814:	2b00      	cmp	r3, #0
 800c816:	d102      	bne.n	800c81e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	2200      	movs	r2, #0
 800c81c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	4618      	mov	r0, r3
 800c824:	f000 f942 	bl	800caac <RTC_ByteToBcd2>
 800c828:	4603      	mov	r3, r0
 800c82a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	785b      	ldrb	r3, [r3, #1]
 800c830:	4618      	mov	r0, r3
 800c832:	f000 f93b 	bl	800caac <RTC_ByteToBcd2>
 800c836:	4603      	mov	r3, r0
 800c838:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800c83a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	789b      	ldrb	r3, [r3, #2]
 800c840:	4618      	mov	r0, r3
 800c842:	f000 f933 	bl	800caac <RTC_ByteToBcd2>
 800c846:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800c848:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	7b1b      	ldrb	r3, [r3, #12]
 800c850:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c852:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 f925 	bl	800caac <RTC_ByteToBcd2>
 800c862:	4603      	mov	r3, r0
 800c864:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c866:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800c86e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800c874:	4313      	orrs	r3, r2
 800c876:	61fb      	str	r3, [r7, #28]
 800c878:	e023      	b.n	800c8c2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c884:	2b00      	cmp	r3, #0
 800c886:	d102      	bne.n	800c88e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	2200      	movs	r2, #0
 800c88c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	785b      	ldrb	r3, [r3, #1]
 800c898:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800c89a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800c8a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	7b1b      	ldrb	r3, [r3, #12]
 800c8a6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c8a8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c8b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c8b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800c8b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	69db      	ldr	r3, [r3, #28]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	22ca      	movs	r2, #202	; 0xca
 800c8d4:	625a      	str	r2, [r3, #36]	; 0x24
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2253      	movs	r2, #83	; 0x53
 800c8dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8e6:	d13f      	bne.n	800c968 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	689a      	ldr	r2, [r3, #8]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8f6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	689a      	ldr	r2, [r3, #8]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c906:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c908:	f7f9 fc1e 	bl	8006148 <HAL_GetTick>
 800c90c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800c90e:	e013      	b.n	800c938 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c910:	f7f9 fc1a 	bl	8006148 <HAL_GetTick>
 800c914:	4602      	mov	r2, r0
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c91e:	d90b      	bls.n	800c938 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	22ff      	movs	r2, #255	; 0xff
 800c926:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2203      	movs	r2, #3
 800c92c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e061      	b.n	800c9fc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	f003 0301 	and.w	r3, r3, #1
 800c942:	2b00      	cmp	r3, #0
 800c944:	d0e4      	beq.n	800c910 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	69fa      	ldr	r2, [r7, #28]
 800c94c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	689a      	ldr	r2, [r3, #8]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c964:	609a      	str	r2, [r3, #8]
 800c966:	e03e      	b.n	800c9e6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	689a      	ldr	r2, [r3, #8]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c976:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	689a      	ldr	r2, [r3, #8]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c986:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c988:	f7f9 fbde 	bl	8006148 <HAL_GetTick>
 800c98c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800c98e:	e013      	b.n	800c9b8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c990:	f7f9 fbda 	bl	8006148 <HAL_GetTick>
 800c994:	4602      	mov	r2, r0
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c99e:	d90b      	bls.n	800c9b8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	22ff      	movs	r2, #255	; 0xff
 800c9a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2203      	movs	r2, #3
 800c9ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	e021      	b.n	800c9fc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	f003 0302 	and.w	r3, r3, #2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0e4      	beq.n	800c990 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	69fa      	ldr	r2, [r7, #28]
 800c9cc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	689a      	ldr	r2, [r3, #8]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	22ff      	movs	r2, #255	; 0xff
 800c9ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3724      	adds	r7, #36	; 0x24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd90      	pop	{r4, r7, pc}

0800ca04 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68da      	ldr	r2, [r3, #12]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ca1e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ca20:	f7f9 fb92 	bl	8006148 <HAL_GetTick>
 800ca24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ca26:	e009      	b.n	800ca3c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ca28:	f7f9 fb8e 	bl	8006148 <HAL_GetTick>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca36:	d901      	bls.n	800ca3c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e007      	b.n	800ca4c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	f003 0320 	and.w	r3, r3, #32
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0ee      	beq.n	800ca28 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68db      	ldr	r3, [r3, #12]
 800ca66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d119      	bne.n	800caa2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f04f 32ff 	mov.w	r2, #4294967295
 800ca76:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ca78:	f7f9 fb66 	bl	8006148 <HAL_GetTick>
 800ca7c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ca7e:	e009      	b.n	800ca94 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ca80:	f7f9 fb62 	bl	8006148 <HAL_GetTick>
 800ca84:	4602      	mov	r2, r0
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca8e:	d901      	bls.n	800ca94 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800ca90:	2303      	movs	r3, #3
 800ca92:	e007      	b.n	800caa4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d0ee      	beq.n	800ca80 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	4603      	mov	r3, r0
 800cab4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800caba:	e005      	b.n	800cac8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3301      	adds	r3, #1
 800cac0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	3b0a      	subs	r3, #10
 800cac6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800cac8:	79fb      	ldrb	r3, [r7, #7]
 800caca:	2b09      	cmp	r3, #9
 800cacc:	d8f6      	bhi.n	800cabc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	011b      	lsls	r3, r3, #4
 800cad4:	b2da      	uxtb	r2, r3
 800cad6:	79fb      	ldrb	r3, [r7, #7]
 800cad8:	4313      	orrs	r3, r2
 800cada:	b2db      	uxtb	r3, r3
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800cae8:	b480      	push	{r7}
 800caea:	b087      	sub	sp, #28
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	7f1b      	ldrb	r3, [r3, #28]
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d101      	bne.n	800cb04 <HAL_RTCEx_SetTimeStamp+0x1c>
 800cb00:	2302      	movs	r3, #2
 800cb02:	e03e      	b.n	800cb82 <HAL_RTCEx_SetTimeStamp+0x9a>
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2201      	movs	r2, #1
 800cb08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2202      	movs	r2, #2
 800cb0e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	689a      	ldr	r2, [r3, #8]
 800cb16:	4b1e      	ldr	r3, [pc, #120]	; (800cb90 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800cb18:	4013      	ands	r3, r2
 800cb1a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	22ca      	movs	r2, #202	; 0xca
 800cb2a:	625a      	str	r2, [r3, #36]	; 0x24
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2253      	movs	r2, #83	; 0x53
 800cb32:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0206 	bic.w	r2, r2, #6
 800cb42:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	430a      	orrs	r2, r1
 800cb52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	689a      	ldr	r2, [r3, #8]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb6a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	22ff      	movs	r2, #255	; 0xff
 800cb72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2201      	movs	r2, #1
 800cb78:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	371c      	adds	r7, #28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	fffff7f7 	.word	0xfffff7f7

0800cb94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800cba0:	2300      	movs	r3, #0
 800cba2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	e149      	b.n	800ce46 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d106      	bne.n	800cbcc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7f6 f914 	bl	8002df4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2202      	movs	r2, #2
 800cbd0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 fa57 	bl	800d088 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d007      	beq.n	800cbf2 <HAL_SAI_Init+0x5e>
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d302      	bcc.n	800cbec <HAL_SAI_Init+0x58>
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d006      	beq.n	800cbf8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800cbea:	e008      	b.n	800cbfe <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	61fb      	str	r3, [r7, #28]
      break;
 800cbf0:	e005      	b.n	800cbfe <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800cbf2:	2310      	movs	r3, #16
 800cbf4:	61fb      	str	r3, [r7, #28]
      break;
 800cbf6:	e002      	b.n	800cbfe <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800cbf8:	2320      	movs	r3, #32
 800cbfa:	61fb      	str	r3, [r7, #28]
      break;
 800cbfc:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d81d      	bhi.n	800cc42 <HAL_SAI_Init+0xae>
 800cc06:	a201      	add	r2, pc, #4	; (adr r2, 800cc0c <HAL_SAI_Init+0x78>)
 800cc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0c:	0800cc1d 	.word	0x0800cc1d
 800cc10:	0800cc23 	.word	0x0800cc23
 800cc14:	0800cc2b 	.word	0x0800cc2b
 800cc18:	0800cc33 	.word	0x0800cc33
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	617b      	str	r3, [r7, #20]
      }
      break;
 800cc20:	e010      	b.n	800cc44 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800cc22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc26:	617b      	str	r3, [r7, #20]
      }
      break;
 800cc28:	e00c      	b.n	800cc44 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800cc2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc2e:	617b      	str	r3, [r7, #20]
      }
      break;
 800cc30:	e008      	b.n	800cc44 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800cc32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc36:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	f043 0301 	orr.w	r3, r3, #1
 800cc3e:	61fb      	str	r3, [r7, #28]
      }
      break;
 800cc40:	e000      	b.n	800cc44 <HAL_SAI_Init+0xb0>
  default:
    break;
 800cc42:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a81      	ldr	r2, [pc, #516]	; (800ce50 <HAL_SAI_Init+0x2bc>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d004      	beq.n	800cc58 <HAL_SAI_Init+0xc4>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a80      	ldr	r2, [pc, #512]	; (800ce54 <HAL_SAI_Init+0x2c0>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d103      	bne.n	800cc60 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800cc58:	4a7f      	ldr	r2, [pc, #508]	; (800ce58 <HAL_SAI_Init+0x2c4>)
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	6013      	str	r3, [r2, #0]
 800cc5e:	e002      	b.n	800cc66 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800cc60:	4a7e      	ldr	r2, [pc, #504]	; (800ce5c <HAL_SAI_Init+0x2c8>)
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	69db      	ldr	r3, [r3, #28]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d043      	beq.n	800ccf6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a76      	ldr	r2, [pc, #472]	; (800ce50 <HAL_SAI_Init+0x2bc>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d004      	beq.n	800cc86 <HAL_SAI_Init+0xf2>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a74      	ldr	r2, [pc, #464]	; (800ce54 <HAL_SAI_Init+0x2c0>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d104      	bne.n	800cc90 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800cc86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cc8a:	f7ff fa8d 	bl	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800cc8e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a72      	ldr	r2, [pc, #456]	; (800ce60 <HAL_SAI_Init+0x2cc>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d004      	beq.n	800cca4 <HAL_SAI_Init+0x110>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a71      	ldr	r2, [pc, #452]	; (800ce64 <HAL_SAI_Init+0x2d0>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d104      	bne.n	800ccae <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800cca4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cca8:	f7ff fa7e 	bl	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800ccac:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	461a      	mov	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	69db      	ldr	r3, [r3, #28]
 800ccbe:	025b      	lsls	r3, r3, #9
 800ccc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccc4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4a67      	ldr	r2, [pc, #412]	; (800ce68 <HAL_SAI_Init+0x2d4>)
 800ccca:	fba2 2303 	umull	r2, r3, r2, r3
 800ccce:	08da      	lsrs	r2, r3, #3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800ccd4:	68f9      	ldr	r1, [r7, #12]
 800ccd6:	4b64      	ldr	r3, [pc, #400]	; (800ce68 <HAL_SAI_Init+0x2d4>)
 800ccd8:	fba3 2301 	umull	r2, r3, r3, r1
 800ccdc:	08da      	lsrs	r2, r3, #3
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	1aca      	subs	r2, r1, r3
 800cce8:	2a08      	cmp	r2, #8
 800ccea:	d904      	bls.n	800ccf6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a1b      	ldr	r3, [r3, #32]
 800ccf0:	1c5a      	adds	r2, r3, #1
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <HAL_SAI_Init+0x172>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d109      	bne.n	800cd1a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d101      	bne.n	800cd12 <HAL_SAI_Init+0x17e>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e001      	b.n	800cd16 <HAL_SAI_Init+0x182>
 800cd12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd16:	61bb      	str	r3, [r7, #24]
 800cd18:	e008      	b.n	800cd2c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d102      	bne.n	800cd28 <HAL_SAI_Init+0x194>
 800cd22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd26:	e000      	b.n	800cd2a <HAL_SAI_Init+0x196>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6819      	ldr	r1, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	4b4d      	ldr	r3, [pc, #308]	; (800ce6c <HAL_SAI_Init+0x2d8>)
 800cd38:	400b      	ands	r3, r1
 800cd3a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6819      	ldr	r1, [r3, #0]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685a      	ldr	r2, [r3, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cd50:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd56:	431a      	orrs	r2, r3
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800cd64:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cd70:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a1b      	ldr	r3, [r3, #32]
 800cd76:	051b      	lsls	r3, r3, #20
 800cd78:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	6859      	ldr	r1, [r3, #4]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	4b38      	ldr	r3, [pc, #224]	; (800ce70 <HAL_SAI_Init+0x2dc>)
 800cd8e:	400b      	ands	r3, r1
 800cd90:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	6859      	ldr	r1, [r3, #4]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	699a      	ldr	r2, [r3, #24]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda0:	431a      	orrs	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda6:	431a      	orrs	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	430a      	orrs	r2, r1
 800cdae:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6899      	ldr	r1, [r3, #8]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	4b2e      	ldr	r3, [pc, #184]	; (800ce74 <HAL_SAI_Init+0x2e0>)
 800cdbc:	400b      	ands	r3, r1
 800cdbe:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	6899      	ldr	r1, [r3, #8]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdca:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800cdd0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800cdd6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800cddc:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cde2:	3b01      	subs	r3, #1
 800cde4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800cde6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	430a      	orrs	r2, r1
 800cdee:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68d9      	ldr	r1, [r3, #12]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	f24f 0320 	movw	r3, #61472	; 0xf020
 800cdfe:	400b      	ands	r3, r1
 800ce00:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68d9      	ldr	r1, [r3, #12]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce10:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce16:	041b      	lsls	r3, r3, #16
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	021b      	lsls	r3, r3, #8
 800ce22:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	430a      	orrs	r2, r1
 800ce2a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3720      	adds	r7, #32
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	40015804 	.word	0x40015804
 800ce54:	40015824 	.word	0x40015824
 800ce58:	40015800 	.word	0x40015800
 800ce5c:	40015c00 	.word	0x40015c00
 800ce60:	40015c04 	.word	0x40015c04
 800ce64:	40015c24 	.word	0x40015c24
 800ce68:	cccccccd 	.word	0xcccccccd
 800ce6c:	ff05c010 	.word	0xff05c010
 800ce70:	ffff1ff0 	.word	0xffff1ff0
 800ce74:	fff88000 	.word	0xfff88000

0800ce78 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d101      	bne.n	800ce8a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e027      	b.n	800ceda <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2202      	movs	r2, #2
 800ce8e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2200      	movs	r2, #0
 800ce98:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cea2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f8ef 	bl	800d088 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	685a      	ldr	r2, [r3, #4]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f042 0208 	orr.w	r2, r2, #8
 800ceb8:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7f6 f804 	bl	8002ec8 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
	...

0800cee4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	4613      	mov	r3, r2
 800cef0:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <HAL_SAI_Receive_DMA+0x1a>
 800cef8:	88fb      	ldrh	r3, [r7, #6]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e074      	b.n	800cfec <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d16d      	bne.n	800cfea <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d101      	bne.n	800cf1c <HAL_SAI_Receive_DMA+0x38>
 800cf18:	2302      	movs	r3, #2
 800cf1a:	e067      	b.n	800cfec <HAL_SAI_Receive_DMA+0x108>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	68ba      	ldr	r2, [r7, #8]
 800cf28:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	88fa      	ldrh	r2, [r7, #6]
 800cf2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	88fa      	ldrh	r2, [r7, #6]
 800cf36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2222      	movs	r2, #34	; 0x22
 800cf46:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4e:	4a29      	ldr	r2, [pc, #164]	; (800cff4 <HAL_SAI_Receive_DMA+0x110>)
 800cf50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf56:	4a28      	ldr	r2, [pc, #160]	; (800cff8 <HAL_SAI_Receive_DMA+0x114>)
 800cf58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5e:	4a27      	ldr	r2, [pc, #156]	; (800cffc <HAL_SAI_Receive_DMA+0x118>)
 800cf60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf66:	2200      	movs	r2, #0
 800cf68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	331c      	adds	r3, #28
 800cf74:	4619      	mov	r1, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cf82:	f7f9 fee9 	bl	8006d58 <HAL_DMA_Start_IT>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d005      	beq.n	800cf98 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	e029      	b.n	800cfec <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d107      	bne.n	800cfb6 <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cfb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 f82f 	bl	800d01c <SAI_InterruptFlag>
 800cfbe:	4601      	mov	r1, r0
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	691a      	ldr	r2, [r3, #16]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	430a      	orrs	r2, r1
 800cfcc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cfdc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e000      	b.n	800cfec <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800cfea:	2302      	movs	r3, #2
  }
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	0800d155 	.word	0x0800d155
 800cff8:	0800d0f5 	.word	0x0800d0f5
 800cffc:	0800d171 	.word	0x0800d171

0800d000 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d00e:	b2db      	uxtb	r3, r3
}
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d026:	2301      	movs	r3, #1
 800d028:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d103      	bne.n	800d038 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f043 0308 	orr.w	r3, r3, #8
 800d036:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03c:	2b08      	cmp	r3, #8
 800d03e:	d10b      	bne.n	800d058 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d044:	2b03      	cmp	r3, #3
 800d046:	d003      	beq.n	800d050 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d103      	bne.n	800d058 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f043 0310 	orr.w	r3, r3, #16
 800d056:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	2b03      	cmp	r3, #3
 800d05e:	d003      	beq.n	800d068 <SAI_InterruptFlag+0x4c>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	2b02      	cmp	r3, #2
 800d066:	d104      	bne.n	800d072 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	e003      	b.n	800d07a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f043 0304 	orr.w	r3, r3, #4
 800d078:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d07a:	68fb      	ldr	r3, [r7, #12]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d088:	b490      	push	{r4, r7}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800d090:	4b16      	ldr	r3, [pc, #88]	; (800d0ec <SAI_Disable+0x64>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a16      	ldr	r2, [pc, #88]	; (800d0f0 <SAI_Disable+0x68>)
 800d096:	fba2 2303 	umull	r2, r3, r2, r3
 800d09a:	0b1b      	lsrs	r3, r3, #12
 800d09c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d0b0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d0b2:	4623      	mov	r3, r4
 800d0b4:	1e5c      	subs	r4, r3, #1
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10a      	bne.n	800d0d0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d0ce:	e006      	b.n	800d0de <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1e9      	bne.n	800d0b2 <SAI_Disable+0x2a>

  return status;
 800d0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bc90      	pop	{r4, r7}
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	20000000 	.word	0x20000000
 800d0f0:	95cbec1b 	.word	0x95cbec1b

0800d0f4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d100:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	69db      	ldr	r3, [r3, #28]
 800d106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d10a:	d01c      	beq.n	800d146 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d11a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d124:	2100      	movs	r1, #0
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f7ff ff78 	bl	800d01c <SAI_InterruptFlag>
 800d12c:	4603      	mov	r3, r0
 800d12e:	43d9      	mvns	r1, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	691a      	ldr	r2, [r3, #16]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	400a      	ands	r2, r1
 800d13c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2201      	movs	r2, #1
 800d142:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f7f7 ff36 	bl	8004fb8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d14c:	bf00      	nop
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d160:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f7f7 ff32 	bl	8004fcc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d168:	bf00      	nop
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d17c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d184:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d194:	2b01      	cmp	r3, #1
 800d196:	d004      	beq.n	800d1a2 <SAI_DMAError+0x32>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d112      	bne.n	800d1c8 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d1b0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff ff68 	bl	800d088 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f7f7 fd17 	bl	8004bfc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d1ce:	bf00      	nop
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b082      	sub	sp, #8
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e025      	b.n	800d236 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d106      	bne.n	800d204 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7f5 fdee 	bl	8002de0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2202      	movs	r2, #2
 800d208:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	3304      	adds	r3, #4
 800d214:	4619      	mov	r1, r3
 800d216:	4610      	mov	r0, r2
 800d218:	f001 fd58 	bl	800eccc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6818      	ldr	r0, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	461a      	mov	r2, r3
 800d226:	6839      	ldr	r1, [r7, #0]
 800d228:	f001 fdc2 	bl	800edb0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b084      	sub	sp, #16
 800d242:	af00      	add	r7, sp, #0
 800d244:	60f8      	str	r0, [r7, #12]
 800d246:	60b9      	str	r1, [r7, #8]
 800d248:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d250:	b2db      	uxtb	r3, r3
 800d252:	2b02      	cmp	r3, #2
 800d254:	d101      	bne.n	800d25a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800d256:	2302      	movs	r3, #2
 800d258:	e018      	b.n	800d28c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2202      	movs	r2, #2
 800d25e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	68b9      	ldr	r1, [r7, #8]
 800d26a:	4618      	mov	r0, r3
 800d26c:	f001 fe20 	bl	800eeb0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b02      	cmp	r3, #2
 800d276:	d104      	bne.n	800d282 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2205      	movs	r2, #5
 800d27c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d280:	e003      	b.n	800d28a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d101      	bne.n	800d2ae <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	e00e      	b.n	800d2cc <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2202      	movs	r2, #2
 800d2b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f001 fe18 	bl	800eef2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e04c      	b.n	800d380 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d106      	bne.n	800d300 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7f5 faae 	bl	800285c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2202      	movs	r2, #2
 800d304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f022 0203 	bic.w	r2, r2, #3
 800d316:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	4b19      	ldr	r3, [pc, #100]	; (800d388 <HAL_SPDIFRX_Init+0xb4>)
 800d324:	4013      	ands	r3, r2
 800d326:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800d330:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800d336:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800d33c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800d342:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800d348:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800d34e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800d354:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800d35a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800d360:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	4313      	orrs	r3, r2
 800d366:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800d37e:	2300      	movs	r3, #0
}
 800d380:	4618      	mov	r0, r3
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	fff88407 	.word	0xfff88407

0800d38c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d101      	bne.n	800d39e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	e01d      	b.n	800d3da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7f5 fa94 	bl	80028e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3304      	adds	r3, #4
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	f000 fb78 	bl	800dac0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
	...

0800d3e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68da      	ldr	r2, [r3, #12]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f042 0201 	orr.w	r2, r2, #1
 800d3fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	689a      	ldr	r2, [r3, #8]
 800d402:	4b0c      	ldr	r3, [pc, #48]	; (800d434 <HAL_TIM_Base_Start_IT+0x50>)
 800d404:	4013      	ands	r3, r2
 800d406:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b06      	cmp	r3, #6
 800d40c:	d00b      	beq.n	800d426 <HAL_TIM_Base_Start_IT+0x42>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d414:	d007      	beq.n	800d426 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f042 0201 	orr.w	r2, r2, #1
 800d424:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3714      	adds	r7, #20
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr
 800d434:	00010007 	.word	0x00010007

0800d438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d101      	bne.n	800d44a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	e01d      	b.n	800d486 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b00      	cmp	r3, #0
 800d454:	d106      	bne.n	800d464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7f5 faac 	bl	80029bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2202      	movs	r2, #2
 800d468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	3304      	adds	r3, #4
 800d474:	4619      	mov	r1, r3
 800d476:	4610      	mov	r0, r2
 800d478:	f000 fb22 	bl	800dac0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b082      	sub	sp, #8
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	691b      	ldr	r3, [r3, #16]
 800d49c:	f003 0302 	and.w	r3, r3, #2
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	d122      	bne.n	800d4ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	f003 0302 	and.w	r3, r3, #2
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d11b      	bne.n	800d4ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f06f 0202 	mvn.w	r2, #2
 800d4ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	f003 0303 	and.w	r3, r3, #3
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d003      	beq.n	800d4d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fad7 	bl	800da84 <HAL_TIM_IC_CaptureCallback>
 800d4d6:	e005      	b.n	800d4e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fac9 	bl	800da70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fada 	bl	800da98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	691b      	ldr	r3, [r3, #16]
 800d4f0:	f003 0304 	and.w	r3, r3, #4
 800d4f4:	2b04      	cmp	r3, #4
 800d4f6:	d122      	bne.n	800d53e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	f003 0304 	and.w	r3, r3, #4
 800d502:	2b04      	cmp	r3, #4
 800d504:	d11b      	bne.n	800d53e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f06f 0204 	mvn.w	r2, #4
 800d50e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2202      	movs	r2, #2
 800d514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	699b      	ldr	r3, [r3, #24]
 800d51c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d520:	2b00      	cmp	r3, #0
 800d522:	d003      	beq.n	800d52c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 faad 	bl	800da84 <HAL_TIM_IC_CaptureCallback>
 800d52a:	e005      	b.n	800d538 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fa9f 	bl	800da70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fab0 	bl	800da98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	f003 0308 	and.w	r3, r3, #8
 800d548:	2b08      	cmp	r3, #8
 800d54a:	d122      	bne.n	800d592 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	f003 0308 	and.w	r3, r3, #8
 800d556:	2b08      	cmp	r3, #8
 800d558:	d11b      	bne.n	800d592 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f06f 0208 	mvn.w	r2, #8
 800d562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2204      	movs	r2, #4
 800d568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	69db      	ldr	r3, [r3, #28]
 800d570:	f003 0303 	and.w	r3, r3, #3
 800d574:	2b00      	cmp	r3, #0
 800d576:	d003      	beq.n	800d580 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 fa83 	bl	800da84 <HAL_TIM_IC_CaptureCallback>
 800d57e:	e005      	b.n	800d58c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 fa75 	bl	800da70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 fa86 	bl	800da98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	691b      	ldr	r3, [r3, #16]
 800d598:	f003 0310 	and.w	r3, r3, #16
 800d59c:	2b10      	cmp	r3, #16
 800d59e:	d122      	bne.n	800d5e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	f003 0310 	and.w	r3, r3, #16
 800d5aa:	2b10      	cmp	r3, #16
 800d5ac:	d11b      	bne.n	800d5e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f06f 0210 	mvn.w	r2, #16
 800d5b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2208      	movs	r2, #8
 800d5bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d003      	beq.n	800d5d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 fa59 	bl	800da84 <HAL_TIM_IC_CaptureCallback>
 800d5d2:	e005      	b.n	800d5e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 fa4b 	bl	800da70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 fa5c 	bl	800da98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	f003 0301 	and.w	r3, r3, #1
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d10e      	bne.n	800d612 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	f003 0301 	and.w	r3, r3, #1
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d107      	bne.n	800d612 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f06f 0201 	mvn.w	r2, #1
 800d60a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7f4 fd63 	bl	80020d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d61c:	2b80      	cmp	r3, #128	; 0x80
 800d61e:	d10e      	bne.n	800d63e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d62a:	2b80      	cmp	r3, #128	; 0x80
 800d62c:	d107      	bne.n	800d63e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 feef 	bl	800e41c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d64c:	d10e      	bne.n	800d66c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d658:	2b80      	cmp	r3, #128	; 0x80
 800d65a:	d107      	bne.n	800d66c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fee2 	bl	800e430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d676:	2b40      	cmp	r3, #64	; 0x40
 800d678:	d10e      	bne.n	800d698 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d684:	2b40      	cmp	r3, #64	; 0x40
 800d686:	d107      	bne.n	800d698 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fa0a 	bl	800daac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	f003 0320 	and.w	r3, r3, #32
 800d6a2:	2b20      	cmp	r3, #32
 800d6a4:	d10e      	bne.n	800d6c4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	f003 0320 	and.w	r3, r3, #32
 800d6b0:	2b20      	cmp	r3, #32
 800d6b2:	d107      	bne.n	800d6c4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f06f 0220 	mvn.w	r2, #32
 800d6bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fea2 	bl	800e408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d6c4:	bf00      	nop
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d101      	bne.n	800d6e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d6e2:	2302      	movs	r3, #2
 800d6e4:	e105      	b.n	800d8f2 <HAL_TIM_PWM_ConfigChannel+0x226>
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b14      	cmp	r3, #20
 800d6fa:	f200 80f0 	bhi.w	800d8de <HAL_TIM_PWM_ConfigChannel+0x212>
 800d6fe:	a201      	add	r2, pc, #4	; (adr r2, 800d704 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d704:	0800d759 	.word	0x0800d759
 800d708:	0800d8df 	.word	0x0800d8df
 800d70c:	0800d8df 	.word	0x0800d8df
 800d710:	0800d8df 	.word	0x0800d8df
 800d714:	0800d799 	.word	0x0800d799
 800d718:	0800d8df 	.word	0x0800d8df
 800d71c:	0800d8df 	.word	0x0800d8df
 800d720:	0800d8df 	.word	0x0800d8df
 800d724:	0800d7db 	.word	0x0800d7db
 800d728:	0800d8df 	.word	0x0800d8df
 800d72c:	0800d8df 	.word	0x0800d8df
 800d730:	0800d8df 	.word	0x0800d8df
 800d734:	0800d81b 	.word	0x0800d81b
 800d738:	0800d8df 	.word	0x0800d8df
 800d73c:	0800d8df 	.word	0x0800d8df
 800d740:	0800d8df 	.word	0x0800d8df
 800d744:	0800d85d 	.word	0x0800d85d
 800d748:	0800d8df 	.word	0x0800d8df
 800d74c:	0800d8df 	.word	0x0800d8df
 800d750:	0800d8df 	.word	0x0800d8df
 800d754:	0800d89d 	.word	0x0800d89d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68b9      	ldr	r1, [r7, #8]
 800d75e:	4618      	mov	r0, r3
 800d760:	f000 fa4e 	bl	800dc00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	699a      	ldr	r2, [r3, #24]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f042 0208 	orr.w	r2, r2, #8
 800d772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	699a      	ldr	r2, [r3, #24]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f022 0204 	bic.w	r2, r2, #4
 800d782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	6999      	ldr	r1, [r3, #24]
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	691a      	ldr	r2, [r3, #16]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	430a      	orrs	r2, r1
 800d794:	619a      	str	r2, [r3, #24]
      break;
 800d796:	e0a3      	b.n	800d8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	68b9      	ldr	r1, [r7, #8]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 faa0 	bl	800dce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	699a      	ldr	r2, [r3, #24]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	699a      	ldr	r2, [r3, #24]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6999      	ldr	r1, [r3, #24]
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	021a      	lsls	r2, r3, #8
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	430a      	orrs	r2, r1
 800d7d6:	619a      	str	r2, [r3, #24]
      break;
 800d7d8:	e082      	b.n	800d8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	68b9      	ldr	r1, [r7, #8]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 faf7 	bl	800ddd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	69da      	ldr	r2, [r3, #28]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f042 0208 	orr.w	r2, r2, #8
 800d7f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	69da      	ldr	r2, [r3, #28]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f022 0204 	bic.w	r2, r2, #4
 800d804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	69d9      	ldr	r1, [r3, #28]
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	691a      	ldr	r2, [r3, #16]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	430a      	orrs	r2, r1
 800d816:	61da      	str	r2, [r3, #28]
      break;
 800d818:	e062      	b.n	800d8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68b9      	ldr	r1, [r7, #8]
 800d820:	4618      	mov	r0, r3
 800d822:	f000 fb4d 	bl	800dec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	69da      	ldr	r2, [r3, #28]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	69da      	ldr	r2, [r3, #28]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	69d9      	ldr	r1, [r3, #28]
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	021a      	lsls	r2, r3, #8
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	430a      	orrs	r2, r1
 800d858:	61da      	str	r2, [r3, #28]
      break;
 800d85a:	e041      	b.n	800d8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68b9      	ldr	r1, [r7, #8]
 800d862:	4618      	mov	r0, r3
 800d864:	f000 fb84 	bl	800df70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f042 0208 	orr.w	r2, r2, #8
 800d876:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f022 0204 	bic.w	r2, r2, #4
 800d886:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	691a      	ldr	r2, [r3, #16]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	430a      	orrs	r2, r1
 800d898:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d89a:	e021      	b.n	800d8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68b9      	ldr	r1, [r7, #8]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f000 fbb6 	bl	800e014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	021a      	lsls	r2, r3, #8
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	430a      	orrs	r2, r1
 800d8da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d8dc:	e000      	b.n	800d8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800d8de:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop

0800d8fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d101      	bne.n	800d914 <HAL_TIM_ConfigClockSource+0x18>
 800d910:	2302      	movs	r3, #2
 800d912:	e0a6      	b.n	800da62 <HAL_TIM_ConfigClockSource+0x166>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2202      	movs	r2, #2
 800d920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d92c:	68fa      	ldr	r2, [r7, #12]
 800d92e:	4b4f      	ldr	r3, [pc, #316]	; (800da6c <HAL_TIM_ConfigClockSource+0x170>)
 800d930:	4013      	ands	r3, r2
 800d932:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d93a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b40      	cmp	r3, #64	; 0x40
 800d94a:	d067      	beq.n	800da1c <HAL_TIM_ConfigClockSource+0x120>
 800d94c:	2b40      	cmp	r3, #64	; 0x40
 800d94e:	d80b      	bhi.n	800d968 <HAL_TIM_ConfigClockSource+0x6c>
 800d950:	2b10      	cmp	r3, #16
 800d952:	d073      	beq.n	800da3c <HAL_TIM_ConfigClockSource+0x140>
 800d954:	2b10      	cmp	r3, #16
 800d956:	d802      	bhi.n	800d95e <HAL_TIM_ConfigClockSource+0x62>
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d06f      	beq.n	800da3c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d95c:	e078      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d95e:	2b20      	cmp	r3, #32
 800d960:	d06c      	beq.n	800da3c <HAL_TIM_ConfigClockSource+0x140>
 800d962:	2b30      	cmp	r3, #48	; 0x30
 800d964:	d06a      	beq.n	800da3c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d966:	e073      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d968:	2b70      	cmp	r3, #112	; 0x70
 800d96a:	d00d      	beq.n	800d988 <HAL_TIM_ConfigClockSource+0x8c>
 800d96c:	2b70      	cmp	r3, #112	; 0x70
 800d96e:	d804      	bhi.n	800d97a <HAL_TIM_ConfigClockSource+0x7e>
 800d970:	2b50      	cmp	r3, #80	; 0x50
 800d972:	d033      	beq.n	800d9dc <HAL_TIM_ConfigClockSource+0xe0>
 800d974:	2b60      	cmp	r3, #96	; 0x60
 800d976:	d041      	beq.n	800d9fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d978:	e06a      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d97a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d97e:	d066      	beq.n	800da4e <HAL_TIM_ConfigClockSource+0x152>
 800d980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d984:	d017      	beq.n	800d9b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d986:	e063      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6818      	ldr	r0, [r3, #0]
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	6899      	ldr	r1, [r3, #8]
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	685a      	ldr	r2, [r3, #4]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	f000 fc0a 	bl	800e1b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d9aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	609a      	str	r2, [r3, #8]
      break;
 800d9b4:	e04c      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6818      	ldr	r0, [r3, #0]
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	6899      	ldr	r1, [r3, #8]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	685a      	ldr	r2, [r3, #4]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	f000 fbf3 	bl	800e1b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	689a      	ldr	r2, [r3, #8]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d9d8:	609a      	str	r2, [r3, #8]
      break;
 800d9da:	e039      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6818      	ldr	r0, [r3, #0]
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	6859      	ldr	r1, [r3, #4]
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	f000 fb67 	bl	800e0bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2150      	movs	r1, #80	; 0x50
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f000 fbc0 	bl	800e17a <TIM_ITRx_SetConfig>
      break;
 800d9fa:	e029      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6818      	ldr	r0, [r3, #0]
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	6859      	ldr	r1, [r3, #4]
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	461a      	mov	r2, r3
 800da0a:	f000 fb86 	bl	800e11a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2160      	movs	r1, #96	; 0x60
 800da14:	4618      	mov	r0, r3
 800da16:	f000 fbb0 	bl	800e17a <TIM_ITRx_SetConfig>
      break;
 800da1a:	e019      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6818      	ldr	r0, [r3, #0]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	6859      	ldr	r1, [r3, #4]
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	461a      	mov	r2, r3
 800da2a:	f000 fb47 	bl	800e0bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2140      	movs	r1, #64	; 0x40
 800da34:	4618      	mov	r0, r3
 800da36:	f000 fba0 	bl	800e17a <TIM_ITRx_SetConfig>
      break;
 800da3a:	e009      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4619      	mov	r1, r3
 800da46:	4610      	mov	r0, r2
 800da48:	f000 fb97 	bl	800e17a <TIM_ITRx_SetConfig>
      break;
 800da4c:	e000      	b.n	800da50 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800da4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2201      	movs	r2, #1
 800da54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2200      	movs	r2, #0
 800da5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	fffeff88 	.word	0xfffeff88

0800da70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da8c:	bf00      	nop
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800daa0:	bf00      	nop
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dab4:	bf00      	nop
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	4a40      	ldr	r2, [pc, #256]	; (800dbd4 <TIM_Base_SetConfig+0x114>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d013      	beq.n	800db00 <TIM_Base_SetConfig+0x40>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dade:	d00f      	beq.n	800db00 <TIM_Base_SetConfig+0x40>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	4a3d      	ldr	r2, [pc, #244]	; (800dbd8 <TIM_Base_SetConfig+0x118>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d00b      	beq.n	800db00 <TIM_Base_SetConfig+0x40>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a3c      	ldr	r2, [pc, #240]	; (800dbdc <TIM_Base_SetConfig+0x11c>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d007      	beq.n	800db00 <TIM_Base_SetConfig+0x40>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4a3b      	ldr	r2, [pc, #236]	; (800dbe0 <TIM_Base_SetConfig+0x120>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d003      	beq.n	800db00 <TIM_Base_SetConfig+0x40>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a3a      	ldr	r2, [pc, #232]	; (800dbe4 <TIM_Base_SetConfig+0x124>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d108      	bne.n	800db12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	4313      	orrs	r3, r2
 800db10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4a2f      	ldr	r2, [pc, #188]	; (800dbd4 <TIM_Base_SetConfig+0x114>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d02b      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db20:	d027      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4a2c      	ldr	r2, [pc, #176]	; (800dbd8 <TIM_Base_SetConfig+0x118>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d023      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a2b      	ldr	r2, [pc, #172]	; (800dbdc <TIM_Base_SetConfig+0x11c>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d01f      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4a2a      	ldr	r2, [pc, #168]	; (800dbe0 <TIM_Base_SetConfig+0x120>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d01b      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4a29      	ldr	r2, [pc, #164]	; (800dbe4 <TIM_Base_SetConfig+0x124>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d017      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a28      	ldr	r2, [pc, #160]	; (800dbe8 <TIM_Base_SetConfig+0x128>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d013      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4a27      	ldr	r2, [pc, #156]	; (800dbec <TIM_Base_SetConfig+0x12c>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d00f      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4a26      	ldr	r2, [pc, #152]	; (800dbf0 <TIM_Base_SetConfig+0x130>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d00b      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4a25      	ldr	r2, [pc, #148]	; (800dbf4 <TIM_Base_SetConfig+0x134>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d007      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a24      	ldr	r2, [pc, #144]	; (800dbf8 <TIM_Base_SetConfig+0x138>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d003      	beq.n	800db72 <TIM_Base_SetConfig+0xb2>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a23      	ldr	r2, [pc, #140]	; (800dbfc <TIM_Base_SetConfig+0x13c>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d108      	bne.n	800db84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	4313      	orrs	r3, r2
 800db82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	695b      	ldr	r3, [r3, #20]
 800db8e:	4313      	orrs	r3, r2
 800db90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	689a      	ldr	r2, [r3, #8]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a0a      	ldr	r2, [pc, #40]	; (800dbd4 <TIM_Base_SetConfig+0x114>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d003      	beq.n	800dbb8 <TIM_Base_SetConfig+0xf8>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a0c      	ldr	r2, [pc, #48]	; (800dbe4 <TIM_Base_SetConfig+0x124>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d103      	bne.n	800dbc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	691a      	ldr	r2, [r3, #16]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	615a      	str	r2, [r3, #20]
}
 800dbc6:	bf00      	nop
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	40010000 	.word	0x40010000
 800dbd8:	40000400 	.word	0x40000400
 800dbdc:	40000800 	.word	0x40000800
 800dbe0:	40000c00 	.word	0x40000c00
 800dbe4:	40010400 	.word	0x40010400
 800dbe8:	40014000 	.word	0x40014000
 800dbec:	40014400 	.word	0x40014400
 800dbf0:	40014800 	.word	0x40014800
 800dbf4:	40001800 	.word	0x40001800
 800dbf8:	40001c00 	.word	0x40001c00
 800dbfc:	40002000 	.word	0x40002000

0800dc00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b087      	sub	sp, #28
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6a1b      	ldr	r3, [r3, #32]
 800dc0e:	f023 0201 	bic.w	r2, r3, #1
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a1b      	ldr	r3, [r3, #32]
 800dc1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	699b      	ldr	r3, [r3, #24]
 800dc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	4b2b      	ldr	r3, [pc, #172]	; (800dcd8 <TIM_OC1_SetConfig+0xd8>)
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f023 0303 	bic.w	r3, r3, #3
 800dc36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	68fa      	ldr	r2, [r7, #12]
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f023 0302 	bic.w	r3, r3, #2
 800dc48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	697a      	ldr	r2, [r7, #20]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a21      	ldr	r2, [pc, #132]	; (800dcdc <TIM_OC1_SetConfig+0xdc>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d003      	beq.n	800dc64 <TIM_OC1_SetConfig+0x64>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a20      	ldr	r2, [pc, #128]	; (800dce0 <TIM_OC1_SetConfig+0xe0>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d10c      	bne.n	800dc7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	f023 0308 	bic.w	r3, r3, #8
 800dc6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	697a      	ldr	r2, [r7, #20]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	f023 0304 	bic.w	r3, r3, #4
 800dc7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4a16      	ldr	r2, [pc, #88]	; (800dcdc <TIM_OC1_SetConfig+0xdc>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d003      	beq.n	800dc8e <TIM_OC1_SetConfig+0x8e>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4a15      	ldr	r2, [pc, #84]	; (800dce0 <TIM_OC1_SetConfig+0xe0>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d111      	bne.n	800dcb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	693a      	ldr	r2, [r7, #16]
 800dca4:	4313      	orrs	r3, r2
 800dca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	685a      	ldr	r2, [r3, #4]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	697a      	ldr	r2, [r7, #20]
 800dcca:	621a      	str	r2, [r3, #32]
}
 800dccc:	bf00      	nop
 800dcce:	371c      	adds	r7, #28
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	fffeff8f 	.word	0xfffeff8f
 800dcdc:	40010000 	.word	0x40010000
 800dce0:	40010400 	.word	0x40010400

0800dce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b087      	sub	sp, #28
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6a1b      	ldr	r3, [r3, #32]
 800dcf2:	f023 0210 	bic.w	r2, r3, #16
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a1b      	ldr	r3, [r3, #32]
 800dcfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	699b      	ldr	r3, [r3, #24]
 800dd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	4b2e      	ldr	r3, [pc, #184]	; (800ddc8 <TIM_OC2_SetConfig+0xe4>)
 800dd10:	4013      	ands	r3, r2
 800dd12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	021b      	lsls	r3, r3, #8
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	4313      	orrs	r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	f023 0320 	bic.w	r3, r3, #32
 800dd2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	011b      	lsls	r3, r3, #4
 800dd36:	697a      	ldr	r2, [r7, #20]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a23      	ldr	r2, [pc, #140]	; (800ddcc <TIM_OC2_SetConfig+0xe8>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d003      	beq.n	800dd4c <TIM_OC2_SetConfig+0x68>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a22      	ldr	r2, [pc, #136]	; (800ddd0 <TIM_OC2_SetConfig+0xec>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d10d      	bne.n	800dd68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	011b      	lsls	r3, r3, #4
 800dd5a:	697a      	ldr	r2, [r7, #20]
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4a18      	ldr	r2, [pc, #96]	; (800ddcc <TIM_OC2_SetConfig+0xe8>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d003      	beq.n	800dd78 <TIM_OC2_SetConfig+0x94>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a17      	ldr	r2, [pc, #92]	; (800ddd0 <TIM_OC2_SetConfig+0xec>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d113      	bne.n	800dda0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	695b      	ldr	r3, [r3, #20]
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	699b      	ldr	r3, [r3, #24]
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	685a      	ldr	r2, [r3, #4]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	621a      	str	r2, [r3, #32]
}
 800ddba:	bf00      	nop
 800ddbc:	371c      	adds	r7, #28
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	feff8fff 	.word	0xfeff8fff
 800ddcc:	40010000 	.word	0x40010000
 800ddd0:	40010400 	.word	0x40010400

0800ddd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b087      	sub	sp, #28
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6a1b      	ldr	r3, [r3, #32]
 800ddee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	4b2d      	ldr	r3, [pc, #180]	; (800deb4 <TIM_OC3_SetConfig+0xe0>)
 800de00:	4013      	ands	r3, r2
 800de02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f023 0303 	bic.w	r3, r3, #3
 800de0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	4313      	orrs	r3, r2
 800de14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	689b      	ldr	r3, [r3, #8]
 800de22:	021b      	lsls	r3, r3, #8
 800de24:	697a      	ldr	r2, [r7, #20]
 800de26:	4313      	orrs	r3, r2
 800de28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a22      	ldr	r2, [pc, #136]	; (800deb8 <TIM_OC3_SetConfig+0xe4>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d003      	beq.n	800de3a <TIM_OC3_SetConfig+0x66>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a21      	ldr	r2, [pc, #132]	; (800debc <TIM_OC3_SetConfig+0xe8>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d10d      	bne.n	800de56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	021b      	lsls	r3, r3, #8
 800de48:	697a      	ldr	r2, [r7, #20]
 800de4a:	4313      	orrs	r3, r2
 800de4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a17      	ldr	r2, [pc, #92]	; (800deb8 <TIM_OC3_SetConfig+0xe4>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d003      	beq.n	800de66 <TIM_OC3_SetConfig+0x92>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a16      	ldr	r2, [pc, #88]	; (800debc <TIM_OC3_SetConfig+0xe8>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d113      	bne.n	800de8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	011b      	lsls	r3, r3, #4
 800de7c:	693a      	ldr	r2, [r7, #16]
 800de7e:	4313      	orrs	r3, r2
 800de80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	699b      	ldr	r3, [r3, #24]
 800de86:	011b      	lsls	r3, r3, #4
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	693a      	ldr	r2, [r7, #16]
 800de92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	685a      	ldr	r2, [r3, #4]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	697a      	ldr	r2, [r7, #20]
 800dea6:	621a      	str	r2, [r3, #32]
}
 800dea8:	bf00      	nop
 800deaa:	371c      	adds	r7, #28
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr
 800deb4:	fffeff8f 	.word	0xfffeff8f
 800deb8:	40010000 	.word	0x40010000
 800debc:	40010400 	.word	0x40010400

0800dec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b087      	sub	sp, #28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6a1b      	ldr	r3, [r3, #32]
 800dece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a1b      	ldr	r3, [r3, #32]
 800deda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	69db      	ldr	r3, [r3, #28]
 800dee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	4b1e      	ldr	r3, [pc, #120]	; (800df64 <TIM_OC4_SetConfig+0xa4>)
 800deec:	4013      	ands	r3, r2
 800deee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800def6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	021b      	lsls	r3, r3, #8
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	4313      	orrs	r3, r2
 800df02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800df0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	031b      	lsls	r3, r3, #12
 800df12:	693a      	ldr	r2, [r7, #16]
 800df14:	4313      	orrs	r3, r2
 800df16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	4a13      	ldr	r2, [pc, #76]	; (800df68 <TIM_OC4_SetConfig+0xa8>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d003      	beq.n	800df28 <TIM_OC4_SetConfig+0x68>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4a12      	ldr	r2, [pc, #72]	; (800df6c <TIM_OC4_SetConfig+0xac>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d109      	bne.n	800df3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	695b      	ldr	r3, [r3, #20]
 800df34:	019b      	lsls	r3, r3, #6
 800df36:	697a      	ldr	r2, [r7, #20]
 800df38:	4313      	orrs	r3, r2
 800df3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	697a      	ldr	r2, [r7, #20]
 800df40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	621a      	str	r2, [r3, #32]
}
 800df56:	bf00      	nop
 800df58:	371c      	adds	r7, #28
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	feff8fff 	.word	0xfeff8fff
 800df68:	40010000 	.word	0x40010000
 800df6c:	40010400 	.word	0x40010400

0800df70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800df70:	b480      	push	{r7}
 800df72:	b087      	sub	sp, #28
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a1b      	ldr	r3, [r3, #32]
 800df7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6a1b      	ldr	r3, [r3, #32]
 800df8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	4b1b      	ldr	r3, [pc, #108]	; (800e008 <TIM_OC5_SetConfig+0x98>)
 800df9c:	4013      	ands	r3, r2
 800df9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dfb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	041b      	lsls	r3, r3, #16
 800dfb8:	693a      	ldr	r2, [r7, #16]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4a12      	ldr	r2, [pc, #72]	; (800e00c <TIM_OC5_SetConfig+0x9c>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d003      	beq.n	800dfce <TIM_OC5_SetConfig+0x5e>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	4a11      	ldr	r2, [pc, #68]	; (800e010 <TIM_OC5_SetConfig+0xa0>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d109      	bne.n	800dfe2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dfd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	695b      	ldr	r3, [r3, #20]
 800dfda:	021b      	lsls	r3, r3, #8
 800dfdc:	697a      	ldr	r2, [r7, #20]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	697a      	ldr	r2, [r7, #20]
 800dfe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	685a      	ldr	r2, [r3, #4]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	693a      	ldr	r2, [r7, #16]
 800dffa:	621a      	str	r2, [r3, #32]
}
 800dffc:	bf00      	nop
 800dffe:	371c      	adds	r7, #28
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr
 800e008:	fffeff8f 	.word	0xfffeff8f
 800e00c:	40010000 	.word	0x40010000
 800e010:	40010400 	.word	0x40010400

0800e014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e014:	b480      	push	{r7}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6a1b      	ldr	r3, [r3, #32]
 800e022:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	4b1c      	ldr	r3, [pc, #112]	; (800e0b0 <TIM_OC6_SetConfig+0x9c>)
 800e040:	4013      	ands	r3, r2
 800e042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	021b      	lsls	r3, r3, #8
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	051b      	lsls	r3, r3, #20
 800e05e:	693a      	ldr	r2, [r7, #16]
 800e060:	4313      	orrs	r3, r2
 800e062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4a13      	ldr	r2, [pc, #76]	; (800e0b4 <TIM_OC6_SetConfig+0xa0>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d003      	beq.n	800e074 <TIM_OC6_SetConfig+0x60>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4a12      	ldr	r2, [pc, #72]	; (800e0b8 <TIM_OC6_SetConfig+0xa4>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d109      	bne.n	800e088 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e07a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	029b      	lsls	r3, r3, #10
 800e082:	697a      	ldr	r2, [r7, #20]
 800e084:	4313      	orrs	r3, r2
 800e086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	697a      	ldr	r2, [r7, #20]
 800e08c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	693a      	ldr	r2, [r7, #16]
 800e0a0:	621a      	str	r2, [r3, #32]
}
 800e0a2:	bf00      	nop
 800e0a4:	371c      	adds	r7, #28
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	feff8fff 	.word	0xfeff8fff
 800e0b4:	40010000 	.word	0x40010000
 800e0b8:	40010400 	.word	0x40010400

0800e0bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b087      	sub	sp, #28
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6a1b      	ldr	r3, [r3, #32]
 800e0cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	f023 0201 	bic.w	r2, r3, #1
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	699b      	ldr	r3, [r3, #24]
 800e0de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e0e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	011b      	lsls	r3, r3, #4
 800e0ec:	693a      	ldr	r2, [r7, #16]
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	f023 030a 	bic.w	r3, r3, #10
 800e0f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e0fa:	697a      	ldr	r2, [r7, #20]
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	693a      	ldr	r2, [r7, #16]
 800e106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	621a      	str	r2, [r3, #32]
}
 800e10e:	bf00      	nop
 800e110:	371c      	adds	r7, #28
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e11a:	b480      	push	{r7}
 800e11c:	b087      	sub	sp, #28
 800e11e:	af00      	add	r7, sp, #0
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	60b9      	str	r1, [r7, #8]
 800e124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6a1b      	ldr	r3, [r3, #32]
 800e12a:	f023 0210 	bic.w	r2, r3, #16
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	699b      	ldr	r3, [r3, #24]
 800e136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6a1b      	ldr	r3, [r3, #32]
 800e13c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	031b      	lsls	r3, r3, #12
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e156:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	011b      	lsls	r3, r3, #4
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	4313      	orrs	r3, r2
 800e160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	697a      	ldr	r2, [r7, #20]
 800e166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	693a      	ldr	r2, [r7, #16]
 800e16c:	621a      	str	r2, [r3, #32]
}
 800e16e:	bf00      	nop
 800e170:	371c      	adds	r7, #28
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e17a:	b480      	push	{r7}
 800e17c:	b085      	sub	sp, #20
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e192:	683a      	ldr	r2, [r7, #0]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	4313      	orrs	r3, r2
 800e198:	f043 0307 	orr.w	r3, r3, #7
 800e19c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	609a      	str	r2, [r3, #8]
}
 800e1a4:	bf00      	nop
 800e1a6:	3714      	adds	r7, #20
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b087      	sub	sp, #28
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
 800e1bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e1ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	021a      	lsls	r2, r3, #8
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	431a      	orrs	r2, r3
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	697a      	ldr	r2, [r7, #20]
 800e1e2:	609a      	str	r2, [r3, #8]
}
 800e1e4:	bf00      	nop
 800e1e6:	371c      	adds	r7, #28
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr

0800e1f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e200:	2b01      	cmp	r3, #1
 800e202:	d101      	bne.n	800e208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e204:	2302      	movs	r3, #2
 800e206:	e06d      	b.n	800e2e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2202      	movs	r2, #2
 800e214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	689b      	ldr	r3, [r3, #8]
 800e226:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a30      	ldr	r2, [pc, #192]	; (800e2f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d004      	beq.n	800e23c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a2f      	ldr	r2, [pc, #188]	; (800e2f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d108      	bne.n	800e24e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e242:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e254:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a20      	ldr	r2, [pc, #128]	; (800e2f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d022      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e27a:	d01d      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a1d      	ldr	r2, [pc, #116]	; (800e2f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d018      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a1c      	ldr	r2, [pc, #112]	; (800e2fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d013      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a1a      	ldr	r2, [pc, #104]	; (800e300 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d00e      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a15      	ldr	r2, [pc, #84]	; (800e2f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d009      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a16      	ldr	r2, [pc, #88]	; (800e304 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d004      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4a15      	ldr	r2, [pc, #84]	; (800e308 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d10c      	bne.n	800e2d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	68ba      	ldr	r2, [r7, #8]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr
 800e2f0:	40010000 	.word	0x40010000
 800e2f4:	40010400 	.word	0x40010400
 800e2f8:	40000400 	.word	0x40000400
 800e2fc:	40000800 	.word	0x40000800
 800e300:	40000c00 	.word	0x40000c00
 800e304:	40014000 	.word	0x40014000
 800e308:	40001800 	.word	0x40001800

0800e30c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b085      	sub	sp, #20
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e316:	2300      	movs	r3, #0
 800e318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e320:	2b01      	cmp	r3, #1
 800e322:	d101      	bne.n	800e328 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e324:	2302      	movs	r3, #2
 800e326:	e065      	b.n	800e3f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	4313      	orrs	r3, r2
 800e34a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	4313      	orrs	r3, r2
 800e358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4313      	orrs	r3, r2
 800e366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	691b      	ldr	r3, [r3, #16]
 800e372:	4313      	orrs	r3, r2
 800e374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	695b      	ldr	r3, [r3, #20]
 800e380:	4313      	orrs	r3, r2
 800e382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e38e:	4313      	orrs	r3, r2
 800e390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	041b      	lsls	r3, r3, #16
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4a16      	ldr	r2, [pc, #88]	; (800e400 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d004      	beq.n	800e3b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a14      	ldr	r2, [pc, #80]	; (800e404 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d115      	bne.n	800e3e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c0:	051b      	lsls	r3, r3, #20
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	69db      	ldr	r3, [r3, #28]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3f2:	2300      	movs	r3, #0
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3714      	adds	r7, #20
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	40010000 	.word	0x40010000
 800e404:	40010400 	.word	0x40010400

0800e408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e410:	bf00      	nop
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e424:	bf00      	nop
 800e426:	370c      	adds	r7, #12
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e438:	bf00      	nop
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e452:	2301      	movs	r3, #1
 800e454:	e040      	b.n	800e4d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d106      	bne.n	800e46c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2200      	movs	r2, #0
 800e462:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7f4 fb96 	bl	8002b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2224      	movs	r2, #36	; 0x24
 800e470:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f022 0201 	bic.w	r2, r2, #1
 800e480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f82c 	bl	800e4e0 <UART_SetConfig>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d101      	bne.n	800e492 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	e022      	b.n	800e4d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e496:	2b00      	cmp	r3, #0
 800e498:	d002      	beq.n	800e4a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 faca 	bl	800ea34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	685a      	ldr	r2, [r3, #4]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e4ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	689a      	ldr	r2, [r3, #8]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e4be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f042 0201 	orr.w	r2, r2, #1
 800e4ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 fb51 	bl	800eb78 <UART_CheckIdleState>
 800e4d6:	4603      	mov	r3, r0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b088      	sub	sp, #32
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	689a      	ldr	r2, [r3, #8]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	431a      	orrs	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	695b      	ldr	r3, [r3, #20]
 800e4fe:	431a      	orrs	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	69db      	ldr	r3, [r3, #28]
 800e504:	4313      	orrs	r3, r2
 800e506:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	4bb1      	ldr	r3, [pc, #708]	; (800e7d4 <UART_SetConfig+0x2f4>)
 800e510:	4013      	ands	r3, r2
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	6812      	ldr	r2, [r2, #0]
 800e516:	6939      	ldr	r1, [r7, #16]
 800e518:	430b      	orrs	r3, r1
 800e51a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	68da      	ldr	r2, [r3, #12]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	430a      	orrs	r2, r1
 800e530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	699b      	ldr	r3, [r3, #24]
 800e536:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6a1b      	ldr	r3, [r3, #32]
 800e53c:	693a      	ldr	r2, [r7, #16]
 800e53e:	4313      	orrs	r3, r2
 800e540:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	689b      	ldr	r3, [r3, #8]
 800e548:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	693a      	ldr	r2, [r7, #16]
 800e552:	430a      	orrs	r2, r1
 800e554:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a9f      	ldr	r2, [pc, #636]	; (800e7d8 <UART_SetConfig+0x2f8>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d121      	bne.n	800e5a4 <UART_SetConfig+0xc4>
 800e560:	4b9e      	ldr	r3, [pc, #632]	; (800e7dc <UART_SetConfig+0x2fc>)
 800e562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e566:	f003 0303 	and.w	r3, r3, #3
 800e56a:	2b03      	cmp	r3, #3
 800e56c:	d816      	bhi.n	800e59c <UART_SetConfig+0xbc>
 800e56e:	a201      	add	r2, pc, #4	; (adr r2, 800e574 <UART_SetConfig+0x94>)
 800e570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e574:	0800e585 	.word	0x0800e585
 800e578:	0800e591 	.word	0x0800e591
 800e57c:	0800e58b 	.word	0x0800e58b
 800e580:	0800e597 	.word	0x0800e597
 800e584:	2301      	movs	r3, #1
 800e586:	77fb      	strb	r3, [r7, #31]
 800e588:	e151      	b.n	800e82e <UART_SetConfig+0x34e>
 800e58a:	2302      	movs	r3, #2
 800e58c:	77fb      	strb	r3, [r7, #31]
 800e58e:	e14e      	b.n	800e82e <UART_SetConfig+0x34e>
 800e590:	2304      	movs	r3, #4
 800e592:	77fb      	strb	r3, [r7, #31]
 800e594:	e14b      	b.n	800e82e <UART_SetConfig+0x34e>
 800e596:	2308      	movs	r3, #8
 800e598:	77fb      	strb	r3, [r7, #31]
 800e59a:	e148      	b.n	800e82e <UART_SetConfig+0x34e>
 800e59c:	2310      	movs	r3, #16
 800e59e:	77fb      	strb	r3, [r7, #31]
 800e5a0:	bf00      	nop
 800e5a2:	e144      	b.n	800e82e <UART_SetConfig+0x34e>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a8d      	ldr	r2, [pc, #564]	; (800e7e0 <UART_SetConfig+0x300>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d134      	bne.n	800e618 <UART_SetConfig+0x138>
 800e5ae:	4b8b      	ldr	r3, [pc, #556]	; (800e7dc <UART_SetConfig+0x2fc>)
 800e5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5b4:	f003 030c 	and.w	r3, r3, #12
 800e5b8:	2b0c      	cmp	r3, #12
 800e5ba:	d829      	bhi.n	800e610 <UART_SetConfig+0x130>
 800e5bc:	a201      	add	r2, pc, #4	; (adr r2, 800e5c4 <UART_SetConfig+0xe4>)
 800e5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c2:	bf00      	nop
 800e5c4:	0800e5f9 	.word	0x0800e5f9
 800e5c8:	0800e611 	.word	0x0800e611
 800e5cc:	0800e611 	.word	0x0800e611
 800e5d0:	0800e611 	.word	0x0800e611
 800e5d4:	0800e605 	.word	0x0800e605
 800e5d8:	0800e611 	.word	0x0800e611
 800e5dc:	0800e611 	.word	0x0800e611
 800e5e0:	0800e611 	.word	0x0800e611
 800e5e4:	0800e5ff 	.word	0x0800e5ff
 800e5e8:	0800e611 	.word	0x0800e611
 800e5ec:	0800e611 	.word	0x0800e611
 800e5f0:	0800e611 	.word	0x0800e611
 800e5f4:	0800e60b 	.word	0x0800e60b
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	77fb      	strb	r3, [r7, #31]
 800e5fc:	e117      	b.n	800e82e <UART_SetConfig+0x34e>
 800e5fe:	2302      	movs	r3, #2
 800e600:	77fb      	strb	r3, [r7, #31]
 800e602:	e114      	b.n	800e82e <UART_SetConfig+0x34e>
 800e604:	2304      	movs	r3, #4
 800e606:	77fb      	strb	r3, [r7, #31]
 800e608:	e111      	b.n	800e82e <UART_SetConfig+0x34e>
 800e60a:	2308      	movs	r3, #8
 800e60c:	77fb      	strb	r3, [r7, #31]
 800e60e:	e10e      	b.n	800e82e <UART_SetConfig+0x34e>
 800e610:	2310      	movs	r3, #16
 800e612:	77fb      	strb	r3, [r7, #31]
 800e614:	bf00      	nop
 800e616:	e10a      	b.n	800e82e <UART_SetConfig+0x34e>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a71      	ldr	r2, [pc, #452]	; (800e7e4 <UART_SetConfig+0x304>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d120      	bne.n	800e664 <UART_SetConfig+0x184>
 800e622:	4b6e      	ldr	r3, [pc, #440]	; (800e7dc <UART_SetConfig+0x2fc>)
 800e624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e628:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e62c:	2b10      	cmp	r3, #16
 800e62e:	d00f      	beq.n	800e650 <UART_SetConfig+0x170>
 800e630:	2b10      	cmp	r3, #16
 800e632:	d802      	bhi.n	800e63a <UART_SetConfig+0x15a>
 800e634:	2b00      	cmp	r3, #0
 800e636:	d005      	beq.n	800e644 <UART_SetConfig+0x164>
 800e638:	e010      	b.n	800e65c <UART_SetConfig+0x17c>
 800e63a:	2b20      	cmp	r3, #32
 800e63c:	d005      	beq.n	800e64a <UART_SetConfig+0x16a>
 800e63e:	2b30      	cmp	r3, #48	; 0x30
 800e640:	d009      	beq.n	800e656 <UART_SetConfig+0x176>
 800e642:	e00b      	b.n	800e65c <UART_SetConfig+0x17c>
 800e644:	2300      	movs	r3, #0
 800e646:	77fb      	strb	r3, [r7, #31]
 800e648:	e0f1      	b.n	800e82e <UART_SetConfig+0x34e>
 800e64a:	2302      	movs	r3, #2
 800e64c:	77fb      	strb	r3, [r7, #31]
 800e64e:	e0ee      	b.n	800e82e <UART_SetConfig+0x34e>
 800e650:	2304      	movs	r3, #4
 800e652:	77fb      	strb	r3, [r7, #31]
 800e654:	e0eb      	b.n	800e82e <UART_SetConfig+0x34e>
 800e656:	2308      	movs	r3, #8
 800e658:	77fb      	strb	r3, [r7, #31]
 800e65a:	e0e8      	b.n	800e82e <UART_SetConfig+0x34e>
 800e65c:	2310      	movs	r3, #16
 800e65e:	77fb      	strb	r3, [r7, #31]
 800e660:	bf00      	nop
 800e662:	e0e4      	b.n	800e82e <UART_SetConfig+0x34e>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a5f      	ldr	r2, [pc, #380]	; (800e7e8 <UART_SetConfig+0x308>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d120      	bne.n	800e6b0 <UART_SetConfig+0x1d0>
 800e66e:	4b5b      	ldr	r3, [pc, #364]	; (800e7dc <UART_SetConfig+0x2fc>)
 800e670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e674:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e678:	2b40      	cmp	r3, #64	; 0x40
 800e67a:	d00f      	beq.n	800e69c <UART_SetConfig+0x1bc>
 800e67c:	2b40      	cmp	r3, #64	; 0x40
 800e67e:	d802      	bhi.n	800e686 <UART_SetConfig+0x1a6>
 800e680:	2b00      	cmp	r3, #0
 800e682:	d005      	beq.n	800e690 <UART_SetConfig+0x1b0>
 800e684:	e010      	b.n	800e6a8 <UART_SetConfig+0x1c8>
 800e686:	2b80      	cmp	r3, #128	; 0x80
 800e688:	d005      	beq.n	800e696 <UART_SetConfig+0x1b6>
 800e68a:	2bc0      	cmp	r3, #192	; 0xc0
 800e68c:	d009      	beq.n	800e6a2 <UART_SetConfig+0x1c2>
 800e68e:	e00b      	b.n	800e6a8 <UART_SetConfig+0x1c8>
 800e690:	2300      	movs	r3, #0
 800e692:	77fb      	strb	r3, [r7, #31]
 800e694:	e0cb      	b.n	800e82e <UART_SetConfig+0x34e>
 800e696:	2302      	movs	r3, #2
 800e698:	77fb      	strb	r3, [r7, #31]
 800e69a:	e0c8      	b.n	800e82e <UART_SetConfig+0x34e>
 800e69c:	2304      	movs	r3, #4
 800e69e:	77fb      	strb	r3, [r7, #31]
 800e6a0:	e0c5      	b.n	800e82e <UART_SetConfig+0x34e>
 800e6a2:	2308      	movs	r3, #8
 800e6a4:	77fb      	strb	r3, [r7, #31]
 800e6a6:	e0c2      	b.n	800e82e <UART_SetConfig+0x34e>
 800e6a8:	2310      	movs	r3, #16
 800e6aa:	77fb      	strb	r3, [r7, #31]
 800e6ac:	bf00      	nop
 800e6ae:	e0be      	b.n	800e82e <UART_SetConfig+0x34e>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a4d      	ldr	r2, [pc, #308]	; (800e7ec <UART_SetConfig+0x30c>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d124      	bne.n	800e704 <UART_SetConfig+0x224>
 800e6ba:	4b48      	ldr	r3, [pc, #288]	; (800e7dc <UART_SetConfig+0x2fc>)
 800e6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6c8:	d012      	beq.n	800e6f0 <UART_SetConfig+0x210>
 800e6ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6ce:	d802      	bhi.n	800e6d6 <UART_SetConfig+0x1f6>
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d007      	beq.n	800e6e4 <UART_SetConfig+0x204>
 800e6d4:	e012      	b.n	800e6fc <UART_SetConfig+0x21c>
 800e6d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6da:	d006      	beq.n	800e6ea <UART_SetConfig+0x20a>
 800e6dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e6e0:	d009      	beq.n	800e6f6 <UART_SetConfig+0x216>
 800e6e2:	e00b      	b.n	800e6fc <UART_SetConfig+0x21c>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	77fb      	strb	r3, [r7, #31]
 800e6e8:	e0a1      	b.n	800e82e <UART_SetConfig+0x34e>
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	77fb      	strb	r3, [r7, #31]
 800e6ee:	e09e      	b.n	800e82e <UART_SetConfig+0x34e>
 800e6f0:	2304      	movs	r3, #4
 800e6f2:	77fb      	strb	r3, [r7, #31]
 800e6f4:	e09b      	b.n	800e82e <UART_SetConfig+0x34e>
 800e6f6:	2308      	movs	r3, #8
 800e6f8:	77fb      	strb	r3, [r7, #31]
 800e6fa:	e098      	b.n	800e82e <UART_SetConfig+0x34e>
 800e6fc:	2310      	movs	r3, #16
 800e6fe:	77fb      	strb	r3, [r7, #31]
 800e700:	bf00      	nop
 800e702:	e094      	b.n	800e82e <UART_SetConfig+0x34e>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a39      	ldr	r2, [pc, #228]	; (800e7f0 <UART_SetConfig+0x310>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d124      	bne.n	800e758 <UART_SetConfig+0x278>
 800e70e:	4b33      	ldr	r3, [pc, #204]	; (800e7dc <UART_SetConfig+0x2fc>)
 800e710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e714:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e71c:	d012      	beq.n	800e744 <UART_SetConfig+0x264>
 800e71e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e722:	d802      	bhi.n	800e72a <UART_SetConfig+0x24a>
 800e724:	2b00      	cmp	r3, #0
 800e726:	d007      	beq.n	800e738 <UART_SetConfig+0x258>
 800e728:	e012      	b.n	800e750 <UART_SetConfig+0x270>
 800e72a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e72e:	d006      	beq.n	800e73e <UART_SetConfig+0x25e>
 800e730:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e734:	d009      	beq.n	800e74a <UART_SetConfig+0x26a>
 800e736:	e00b      	b.n	800e750 <UART_SetConfig+0x270>
 800e738:	2301      	movs	r3, #1
 800e73a:	77fb      	strb	r3, [r7, #31]
 800e73c:	e077      	b.n	800e82e <UART_SetConfig+0x34e>
 800e73e:	2302      	movs	r3, #2
 800e740:	77fb      	strb	r3, [r7, #31]
 800e742:	e074      	b.n	800e82e <UART_SetConfig+0x34e>
 800e744:	2304      	movs	r3, #4
 800e746:	77fb      	strb	r3, [r7, #31]
 800e748:	e071      	b.n	800e82e <UART_SetConfig+0x34e>
 800e74a:	2308      	movs	r3, #8
 800e74c:	77fb      	strb	r3, [r7, #31]
 800e74e:	e06e      	b.n	800e82e <UART_SetConfig+0x34e>
 800e750:	2310      	movs	r3, #16
 800e752:	77fb      	strb	r3, [r7, #31]
 800e754:	bf00      	nop
 800e756:	e06a      	b.n	800e82e <UART_SetConfig+0x34e>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a25      	ldr	r2, [pc, #148]	; (800e7f4 <UART_SetConfig+0x314>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d124      	bne.n	800e7ac <UART_SetConfig+0x2cc>
 800e762:	4b1e      	ldr	r3, [pc, #120]	; (800e7dc <UART_SetConfig+0x2fc>)
 800e764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e768:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e770:	d012      	beq.n	800e798 <UART_SetConfig+0x2b8>
 800e772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e776:	d802      	bhi.n	800e77e <UART_SetConfig+0x29e>
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d007      	beq.n	800e78c <UART_SetConfig+0x2ac>
 800e77c:	e012      	b.n	800e7a4 <UART_SetConfig+0x2c4>
 800e77e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e782:	d006      	beq.n	800e792 <UART_SetConfig+0x2b2>
 800e784:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e788:	d009      	beq.n	800e79e <UART_SetConfig+0x2be>
 800e78a:	e00b      	b.n	800e7a4 <UART_SetConfig+0x2c4>
 800e78c:	2300      	movs	r3, #0
 800e78e:	77fb      	strb	r3, [r7, #31]
 800e790:	e04d      	b.n	800e82e <UART_SetConfig+0x34e>
 800e792:	2302      	movs	r3, #2
 800e794:	77fb      	strb	r3, [r7, #31]
 800e796:	e04a      	b.n	800e82e <UART_SetConfig+0x34e>
 800e798:	2304      	movs	r3, #4
 800e79a:	77fb      	strb	r3, [r7, #31]
 800e79c:	e047      	b.n	800e82e <UART_SetConfig+0x34e>
 800e79e:	2308      	movs	r3, #8
 800e7a0:	77fb      	strb	r3, [r7, #31]
 800e7a2:	e044      	b.n	800e82e <UART_SetConfig+0x34e>
 800e7a4:	2310      	movs	r3, #16
 800e7a6:	77fb      	strb	r3, [r7, #31]
 800e7a8:	bf00      	nop
 800e7aa:	e040      	b.n	800e82e <UART_SetConfig+0x34e>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a11      	ldr	r2, [pc, #68]	; (800e7f8 <UART_SetConfig+0x318>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d139      	bne.n	800e82a <UART_SetConfig+0x34a>
 800e7b6:	4b09      	ldr	r3, [pc, #36]	; (800e7dc <UART_SetConfig+0x2fc>)
 800e7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e7c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7c4:	d027      	beq.n	800e816 <UART_SetConfig+0x336>
 800e7c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7ca:	d817      	bhi.n	800e7fc <UART_SetConfig+0x31c>
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d01c      	beq.n	800e80a <UART_SetConfig+0x32a>
 800e7d0:	e027      	b.n	800e822 <UART_SetConfig+0x342>
 800e7d2:	bf00      	nop
 800e7d4:	efff69f3 	.word	0xefff69f3
 800e7d8:	40011000 	.word	0x40011000
 800e7dc:	40023800 	.word	0x40023800
 800e7e0:	40004400 	.word	0x40004400
 800e7e4:	40004800 	.word	0x40004800
 800e7e8:	40004c00 	.word	0x40004c00
 800e7ec:	40005000 	.word	0x40005000
 800e7f0:	40011400 	.word	0x40011400
 800e7f4:	40007800 	.word	0x40007800
 800e7f8:	40007c00 	.word	0x40007c00
 800e7fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e800:	d006      	beq.n	800e810 <UART_SetConfig+0x330>
 800e802:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e806:	d009      	beq.n	800e81c <UART_SetConfig+0x33c>
 800e808:	e00b      	b.n	800e822 <UART_SetConfig+0x342>
 800e80a:	2300      	movs	r3, #0
 800e80c:	77fb      	strb	r3, [r7, #31]
 800e80e:	e00e      	b.n	800e82e <UART_SetConfig+0x34e>
 800e810:	2302      	movs	r3, #2
 800e812:	77fb      	strb	r3, [r7, #31]
 800e814:	e00b      	b.n	800e82e <UART_SetConfig+0x34e>
 800e816:	2304      	movs	r3, #4
 800e818:	77fb      	strb	r3, [r7, #31]
 800e81a:	e008      	b.n	800e82e <UART_SetConfig+0x34e>
 800e81c:	2308      	movs	r3, #8
 800e81e:	77fb      	strb	r3, [r7, #31]
 800e820:	e005      	b.n	800e82e <UART_SetConfig+0x34e>
 800e822:	2310      	movs	r3, #16
 800e824:	77fb      	strb	r3, [r7, #31]
 800e826:	bf00      	nop
 800e828:	e001      	b.n	800e82e <UART_SetConfig+0x34e>
 800e82a:	2310      	movs	r3, #16
 800e82c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	69db      	ldr	r3, [r3, #28]
 800e832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e836:	d17f      	bne.n	800e938 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800e838:	7ffb      	ldrb	r3, [r7, #31]
 800e83a:	2b08      	cmp	r3, #8
 800e83c:	d85c      	bhi.n	800e8f8 <UART_SetConfig+0x418>
 800e83e:	a201      	add	r2, pc, #4	; (adr r2, 800e844 <UART_SetConfig+0x364>)
 800e840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e844:	0800e869 	.word	0x0800e869
 800e848:	0800e889 	.word	0x0800e889
 800e84c:	0800e8a9 	.word	0x0800e8a9
 800e850:	0800e8f9 	.word	0x0800e8f9
 800e854:	0800e8c1 	.word	0x0800e8c1
 800e858:	0800e8f9 	.word	0x0800e8f9
 800e85c:	0800e8f9 	.word	0x0800e8f9
 800e860:	0800e8f9 	.word	0x0800e8f9
 800e864:	0800e8e1 	.word	0x0800e8e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e868:	f7fc ff4a 	bl	800b700 <HAL_RCC_GetPCLK1Freq>
 800e86c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	005a      	lsls	r2, r3, #1
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	085b      	lsrs	r3, r3, #1
 800e878:	441a      	add	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e882:	b29b      	uxth	r3, r3
 800e884:	61bb      	str	r3, [r7, #24]
        break;
 800e886:	e03a      	b.n	800e8fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e888:	f7fc ff4e 	bl	800b728 <HAL_RCC_GetPCLK2Freq>
 800e88c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	005a      	lsls	r2, r3, #1
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	085b      	lsrs	r3, r3, #1
 800e898:	441a      	add	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	61bb      	str	r3, [r7, #24]
        break;
 800e8a6:	e02a      	b.n	800e8fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	085a      	lsrs	r2, r3, #1
 800e8ae:	4b5f      	ldr	r3, [pc, #380]	; (800ea2c <UART_SetConfig+0x54c>)
 800e8b0:	4413      	add	r3, r2
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	6852      	ldr	r2, [r2, #4]
 800e8b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	61bb      	str	r3, [r7, #24]
        break;
 800e8be:	e01e      	b.n	800e8fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e8c0:	f7fc fe60 	bl	800b584 <HAL_RCC_GetSysClockFreq>
 800e8c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	005a      	lsls	r2, r3, #1
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	085b      	lsrs	r3, r3, #1
 800e8d0:	441a      	add	r2, r3
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	61bb      	str	r3, [r7, #24]
        break;
 800e8de:	e00e      	b.n	800e8fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	085b      	lsrs	r3, r3, #1
 800e8e6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	61bb      	str	r3, [r7, #24]
        break;
 800e8f6:	e002      	b.n	800e8fe <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	75fb      	strb	r3, [r7, #23]
        break;
 800e8fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	2b0f      	cmp	r3, #15
 800e902:	d916      	bls.n	800e932 <UART_SetConfig+0x452>
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e90a:	d212      	bcs.n	800e932 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	f023 030f 	bic.w	r3, r3, #15
 800e914:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	085b      	lsrs	r3, r3, #1
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	f003 0307 	and.w	r3, r3, #7
 800e920:	b29a      	uxth	r2, r3
 800e922:	897b      	ldrh	r3, [r7, #10]
 800e924:	4313      	orrs	r3, r2
 800e926:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	897a      	ldrh	r2, [r7, #10]
 800e92e:	60da      	str	r2, [r3, #12]
 800e930:	e070      	b.n	800ea14 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e932:	2301      	movs	r3, #1
 800e934:	75fb      	strb	r3, [r7, #23]
 800e936:	e06d      	b.n	800ea14 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800e938:	7ffb      	ldrb	r3, [r7, #31]
 800e93a:	2b08      	cmp	r3, #8
 800e93c:	d859      	bhi.n	800e9f2 <UART_SetConfig+0x512>
 800e93e:	a201      	add	r2, pc, #4	; (adr r2, 800e944 <UART_SetConfig+0x464>)
 800e940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e944:	0800e969 	.word	0x0800e969
 800e948:	0800e987 	.word	0x0800e987
 800e94c:	0800e9a5 	.word	0x0800e9a5
 800e950:	0800e9f3 	.word	0x0800e9f3
 800e954:	0800e9bd 	.word	0x0800e9bd
 800e958:	0800e9f3 	.word	0x0800e9f3
 800e95c:	0800e9f3 	.word	0x0800e9f3
 800e960:	0800e9f3 	.word	0x0800e9f3
 800e964:	0800e9db 	.word	0x0800e9db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e968:	f7fc feca 	bl	800b700 <HAL_RCC_GetPCLK1Freq>
 800e96c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	085a      	lsrs	r2, r3, #1
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	441a      	add	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e980:	b29b      	uxth	r3, r3
 800e982:	61bb      	str	r3, [r7, #24]
        break;
 800e984:	e038      	b.n	800e9f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e986:	f7fc fecf 	bl	800b728 <HAL_RCC_GetPCLK2Freq>
 800e98a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	085a      	lsrs	r2, r3, #1
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	441a      	add	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	61bb      	str	r3, [r7, #24]
        break;
 800e9a2:	e029      	b.n	800e9f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	085a      	lsrs	r2, r3, #1
 800e9aa:	4b21      	ldr	r3, [pc, #132]	; (800ea30 <UART_SetConfig+0x550>)
 800e9ac:	4413      	add	r3, r2
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	6852      	ldr	r2, [r2, #4]
 800e9b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	61bb      	str	r3, [r7, #24]
        break;
 800e9ba:	e01d      	b.n	800e9f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e9bc:	f7fc fde2 	bl	800b584 <HAL_RCC_GetSysClockFreq>
 800e9c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	085a      	lsrs	r2, r3, #1
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	441a      	add	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	61bb      	str	r3, [r7, #24]
        break;
 800e9d8:	e00e      	b.n	800e9f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	085b      	lsrs	r3, r3, #1
 800e9e0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	61bb      	str	r3, [r7, #24]
        break;
 800e9f0:	e002      	b.n	800e9f8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	75fb      	strb	r3, [r7, #23]
        break;
 800e9f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	2b0f      	cmp	r3, #15
 800e9fc:	d908      	bls.n	800ea10 <UART_SetConfig+0x530>
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea04:	d204      	bcs.n	800ea10 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	69ba      	ldr	r2, [r7, #24]
 800ea0c:	60da      	str	r2, [r3, #12]
 800ea0e:	e001      	b.n	800ea14 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ea10:	2301      	movs	r3, #1
 800ea12:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3720      	adds	r7, #32
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	01e84800 	.word	0x01e84800
 800ea30:	00f42400 	.word	0x00f42400

0800ea34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea40:	f003 0301 	and.w	r3, r3, #1
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00a      	beq.n	800ea5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	430a      	orrs	r2, r1
 800ea5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea62:	f003 0302 	and.w	r3, r3, #2
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00a      	beq.n	800ea80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	430a      	orrs	r2, r1
 800ea7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea84:	f003 0304 	and.w	r3, r3, #4
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00a      	beq.n	800eaa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	430a      	orrs	r2, r1
 800eaa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa6:	f003 0308 	and.w	r3, r3, #8
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00a      	beq.n	800eac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	430a      	orrs	r2, r1
 800eac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac8:	f003 0310 	and.w	r3, r3, #16
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00a      	beq.n	800eae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	430a      	orrs	r2, r1
 800eae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaea:	f003 0320 	and.w	r3, r3, #32
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d00a      	beq.n	800eb08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	430a      	orrs	r2, r1
 800eb06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d01a      	beq.n	800eb4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	430a      	orrs	r2, r1
 800eb28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb32:	d10a      	bne.n	800eb4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	430a      	orrs	r2, r1
 800eb48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d00a      	beq.n	800eb6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	430a      	orrs	r2, r1
 800eb6a:	605a      	str	r2, [r3, #4]
  }
}
 800eb6c:	bf00      	nop
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af02      	add	r7, sp, #8
 800eb7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800eb86:	f7f7 fadf 	bl	8006148 <HAL_GetTick>
 800eb8a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f003 0308 	and.w	r3, r3, #8
 800eb96:	2b08      	cmp	r3, #8
 800eb98:	d10e      	bne.n	800ebb8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2200      	movs	r2, #0
 800eba4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 f814 	bl	800ebd6 <UART_WaitOnFlagUntilTimeout>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d001      	beq.n	800ebb8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	e00a      	b.n	800ebce <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2220      	movs	r2, #32
 800ebbc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ebcc:	2300      	movs	r3, #0
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b084      	sub	sp, #16
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	60f8      	str	r0, [r7, #12]
 800ebde:	60b9      	str	r1, [r7, #8]
 800ebe0:	603b      	str	r3, [r7, #0]
 800ebe2:	4613      	mov	r3, r2
 800ebe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebe6:	e05d      	b.n	800eca4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebee:	d059      	beq.n	800eca4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebf0:	f7f7 faaa 	bl	8006148 <HAL_GetTick>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	69ba      	ldr	r2, [r7, #24]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d302      	bcc.n	800ec06 <UART_WaitOnFlagUntilTimeout+0x30>
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d11b      	bne.n	800ec3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ec14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	689a      	ldr	r2, [r3, #8]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f022 0201 	bic.w	r2, r2, #1
 800ec24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2220      	movs	r2, #32
 800ec2a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2220      	movs	r2, #32
 800ec30:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ec3a:	2303      	movs	r3, #3
 800ec3c:	e042      	b.n	800ecc4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f003 0304 	and.w	r3, r3, #4
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d02b      	beq.n	800eca4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	69db      	ldr	r3, [r3, #28]
 800ec52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec5a:	d123      	bne.n	800eca4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec64:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ec74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	689a      	ldr	r2, [r3, #8]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f022 0201 	bic.w	r2, r2, #1
 800ec84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2220      	movs	r2, #32
 800ec8a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2220      	movs	r2, #32
 800ec90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2220      	movs	r2, #32
 800ec96:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800eca0:	2303      	movs	r3, #3
 800eca2:	e00f      	b.n	800ecc4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	69da      	ldr	r2, [r3, #28]
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	4013      	ands	r3, r2
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	bf0c      	ite	eq
 800ecb4:	2301      	moveq	r3, #1
 800ecb6:	2300      	movne	r3, #0
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	461a      	mov	r2, r3
 800ecbc:	79fb      	ldrb	r3, [r7, #7]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d092      	beq.n	800ebe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ecc2:	2300      	movs	r3, #0
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3710      	adds	r7, #16
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b085      	sub	sp, #20
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d027      	beq.n	800ed36 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	4b2f      	ldr	r3, [pc, #188]	; (800edac <FMC_SDRAM_Init+0xe0>)
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ecfc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ed02:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ed08:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ed0e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ed14:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ed1a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ed20:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ed26:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	e032      	b.n	800ed9c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ed42:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ed4c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ed52:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	4b12      	ldr	r3, [pc, #72]	; (800edac <FMC_SDRAM_Init+0xe0>)
 800ed64:	4013      	ands	r3, r2
 800ed66:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ed70:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ed76:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ed7c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ed82:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ed88:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3714      	adds	r7, #20
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop
 800edac:	ffff8000 	.word	0xffff8000

0800edb0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b087      	sub	sp, #28
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d02e      	beq.n	800ee28 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	689b      	ldr	r3, [r3, #8]
 800edce:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800edd6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	3b01      	subs	r3, #1
 800ede4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ede6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	3b01      	subs	r3, #1
 800edee:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800edf0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	68db      	ldr	r3, [r3, #12]
 800edf6:	3b01      	subs	r3, #1
 800edf8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800edfa:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	691b      	ldr	r3, [r3, #16]
 800ee00:	3b01      	subs	r3, #1
 800ee02:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ee04:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ee0e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	699b      	ldr	r3, [r3, #24]
 800ee14:	3b01      	subs	r3, #1
 800ee16:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	697a      	ldr	r2, [r7, #20]
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	609a      	str	r2, [r3, #8]
 800ee26:	e039      	b.n	800ee9c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	4b1e      	ldr	r3, [pc, #120]	; (800eeac <FMC_SDRAM_Timing_Init+0xfc>)
 800ee32:	4013      	ands	r3, r2
 800ee34:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	3b01      	subs	r3, #1
 800ee3c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ee46:	4313      	orrs	r3, r2
 800ee48:	697a      	ldr	r2, [r7, #20]
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ee5a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	3b01      	subs	r3, #1
 800ee68:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ee6a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ee74:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ee7e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	699b      	ldr	r3, [r3, #24]
 800ee84:	3b01      	subs	r3, #1
 800ee86:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	693a      	ldr	r2, [r7, #16]
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	697a      	ldr	r2, [r7, #20]
 800ee94:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	693a      	ldr	r2, [r7, #16]
 800ee9a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	371c      	adds	r7, #28
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	ff0f0fff 	.word	0xff0f0fff

0800eeb0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b087      	sub	sp, #28
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800eec8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	3b01      	subs	r3, #1
 800eed0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800eed2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800eeda:	4313      	orrs	r3, r2
 800eedc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800eede:	697a      	ldr	r2, [r7, #20]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800eee4:	2300      	movs	r3, #0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	371c      	adds	r7, #28
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800eef2:	b480      	push	{r7}
 800eef4:	b083      	sub	sp, #12
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	695a      	ldr	r2, [r3, #20]
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	431a      	orrs	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ef0a:	2300      	movs	r3, #0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ef18:	b084      	sub	sp, #16
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
 800ef22:	f107 001c 	add.w	r0, r7, #28
 800ef26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d120      	bne.n	800ef72 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	68da      	ldr	r2, [r3, #12]
 800ef40:	4b20      	ldr	r3, [pc, #128]	; (800efc4 <USB_CoreInit+0xac>)
 800ef42:	4013      	ands	r3, r2
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ef54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d105      	bne.n	800ef66 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f942 	bl	800f1f0 <USB_CoreReset>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73fb      	strb	r3, [r7, #15]
 800ef70:	e010      	b.n	800ef94 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 f936 	bl	800f1f0 <USB_CoreReset>
 800ef84:	4603      	mov	r3, r0
 800ef86:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800ef94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d10b      	bne.n	800efb2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	f043 0206 	orr.w	r2, r3, #6
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	f043 0220 	orr.w	r2, r3, #32
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800efb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800efbe:	b004      	add	sp, #16
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	ffbdffbf 	.word	0xffbdffbf

0800efc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	f043 0201 	orr.w	r2, r3, #1
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800efdc:	2300      	movs	r3, #0
}
 800efde:	4618      	mov	r0, r3
 800efe0:	370c      	adds	r7, #12
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr

0800efea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800efea:	b480      	push	{r7}
 800efec:	b083      	sub	sp, #12
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	f023 0201 	bic.w	r2, r3, #1
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800effe:	2300      	movs	r3, #0
}
 800f000:	4618      	mov	r0, r3
 800f002:	370c      	adds	r7, #12
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	460b      	mov	r3, r1
 800f016:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f024:	78fb      	ldrb	r3, [r7, #3]
 800f026:	2b01      	cmp	r3, #1
 800f028:	d106      	bne.n	800f038 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	60da      	str	r2, [r3, #12]
 800f036:	e00b      	b.n	800f050 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f038:	78fb      	ldrb	r3, [r7, #3]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d106      	bne.n	800f04c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	60da      	str	r2, [r3, #12]
 800f04a:	e001      	b.n	800f050 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f04c:	2301      	movs	r3, #1
 800f04e:	e003      	b.n	800f058 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f050:	2032      	movs	r0, #50	; 0x32
 800f052:	f7f7 f885 	bl	8006160 <HAL_Delay>

  return HAL_OK;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f060:	b480      	push	{r7}
 800f062:	b085      	sub	sp, #20
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f06a:	2300      	movs	r3, #0
 800f06c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	019b      	lsls	r3, r3, #6
 800f072:	f043 0220 	orr.w	r2, r3, #32
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	3301      	adds	r3, #1
 800f07e:	60fb      	str	r3, [r7, #12]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	4a09      	ldr	r2, [pc, #36]	; (800f0a8 <USB_FlushTxFifo+0x48>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d901      	bls.n	800f08c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f088:	2303      	movs	r3, #3
 800f08a:	e006      	b.n	800f09a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	691b      	ldr	r3, [r3, #16]
 800f090:	f003 0320 	and.w	r3, r3, #32
 800f094:	2b20      	cmp	r3, #32
 800f096:	d0f0      	beq.n	800f07a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3714      	adds	r7, #20
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	00030d40 	.word	0x00030d40

0800f0ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2210      	movs	r2, #16
 800f0bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	60fb      	str	r3, [r7, #12]
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	4a09      	ldr	r2, [pc, #36]	; (800f0ec <USB_FlushRxFifo+0x40>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d901      	bls.n	800f0d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f0cc:	2303      	movs	r3, #3
 800f0ce:	e006      	b.n	800f0de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	691b      	ldr	r3, [r3, #16]
 800f0d4:	f003 0310 	and.w	r3, r3, #16
 800f0d8:	2b10      	cmp	r3, #16
 800f0da:	d0f0      	beq.n	800f0be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3714      	adds	r7, #20
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e8:	4770      	bx	lr
 800f0ea:	bf00      	nop
 800f0ec:	00030d40 	.word	0x00030d40

0800f0f0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b089      	sub	sp, #36	; 0x24
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	4611      	mov	r1, r2
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	460b      	mov	r3, r1
 800f100:	71fb      	strb	r3, [r7, #7]
 800f102:	4613      	mov	r3, r2
 800f104:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f10e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f112:	2b00      	cmp	r3, #0
 800f114:	d11a      	bne.n	800f14c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f116:	88bb      	ldrh	r3, [r7, #4]
 800f118:	3303      	adds	r3, #3
 800f11a:	089b      	lsrs	r3, r3, #2
 800f11c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f11e:	2300      	movs	r3, #0
 800f120:	61bb      	str	r3, [r7, #24]
 800f122:	e00f      	b.n	800f144 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f124:	79fb      	ldrb	r3, [r7, #7]
 800f126:	031a      	lsls	r2, r3, #12
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	4413      	add	r3, r2
 800f12c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f130:	461a      	mov	r2, r3
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	3304      	adds	r3, #4
 800f13c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	3301      	adds	r3, #1
 800f142:	61bb      	str	r3, [r7, #24]
 800f144:	69ba      	ldr	r2, [r7, #24]
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d3eb      	bcc.n	800f124 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3724      	adds	r7, #36	; 0x24
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr

0800f15a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f15a:	b480      	push	{r7}
 800f15c:	b089      	sub	sp, #36	; 0x24
 800f15e:	af00      	add	r7, sp, #0
 800f160:	60f8      	str	r0, [r7, #12]
 800f162:	60b9      	str	r1, [r7, #8]
 800f164:	4613      	mov	r3, r2
 800f166:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f170:	88fb      	ldrh	r3, [r7, #6]
 800f172:	3303      	adds	r3, #3
 800f174:	089b      	lsrs	r3, r3, #2
 800f176:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f178:	2300      	movs	r3, #0
 800f17a:	61bb      	str	r3, [r7, #24]
 800f17c:	e00b      	b.n	800f196 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	601a      	str	r2, [r3, #0]
    pDest++;
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	3304      	adds	r3, #4
 800f18e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	3301      	adds	r3, #1
 800f194:	61bb      	str	r3, [r7, #24]
 800f196:	69ba      	ldr	r2, [r7, #24]
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d3ef      	bcc.n	800f17e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f19e:	69fb      	ldr	r3, [r7, #28]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3724      	adds	r7, #36	; 0x24
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b085      	sub	sp, #20
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	695b      	ldr	r3, [r3, #20]
 800f1b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	699b      	ldr	r3, [r3, #24]
 800f1be:	68fa      	ldr	r2, [r7, #12]
 800f1c0:	4013      	ands	r3, r2
 800f1c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3714      	adds	r7, #20
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f1d2:	b480      	push	{r7}
 800f1d4:	b083      	sub	sp, #12
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	695b      	ldr	r3, [r3, #20]
 800f1de:	f003 0301 	and.w	r3, r3, #1
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	370c      	adds	r7, #12
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
	...

0800f1f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b085      	sub	sp, #20
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	3301      	adds	r3, #1
 800f200:	60fb      	str	r3, [r7, #12]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	4a13      	ldr	r2, [pc, #76]	; (800f254 <USB_CoreReset+0x64>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d901      	bls.n	800f20e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f20a:	2303      	movs	r3, #3
 800f20c:	e01b      	b.n	800f246 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	691b      	ldr	r3, [r3, #16]
 800f212:	2b00      	cmp	r3, #0
 800f214:	daf2      	bge.n	800f1fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f216:	2300      	movs	r3, #0
 800f218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	f043 0201 	orr.w	r2, r3, #1
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	3301      	adds	r3, #1
 800f22a:	60fb      	str	r3, [r7, #12]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	4a09      	ldr	r2, [pc, #36]	; (800f254 <USB_CoreReset+0x64>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d901      	bls.n	800f238 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f234:	2303      	movs	r3, #3
 800f236:	e006      	b.n	800f246 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	691b      	ldr	r3, [r3, #16]
 800f23c:	f003 0301 	and.w	r3, r3, #1
 800f240:	2b01      	cmp	r3, #1
 800f242:	d0f0      	beq.n	800f226 <USB_CoreReset+0x36>

  return HAL_OK;
 800f244:	2300      	movs	r3, #0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3714      	adds	r7, #20
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	00030d40 	.word	0x00030d40

0800f258 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f258:	b084      	sub	sp, #16
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b084      	sub	sp, #16
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
 800f262:	f107 001c 	add.w	r0, r7, #28
 800f266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f274:	461a      	mov	r2, r3
 800f276:	2300      	movs	r3, #0
 800f278:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f27e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d018      	beq.n	800f2c4 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800f292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f294:	2b01      	cmp	r3, #1
 800f296:	d10a      	bne.n	800f2ae <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	68ba      	ldr	r2, [r7, #8]
 800f2a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f2a6:	f043 0304 	orr.w	r3, r3, #4
 800f2aa:	6013      	str	r3, [r2, #0]
 800f2ac:	e014      	b.n	800f2d8 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	68ba      	ldr	r2, [r7, #8]
 800f2b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f2bc:	f023 0304 	bic.w	r3, r3, #4
 800f2c0:	6013      	str	r3, [r2, #0]
 800f2c2:	e009      	b.n	800f2d8 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f2d2:	f023 0304 	bic.w	r3, r3, #4
 800f2d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800f2d8:	2110      	movs	r1, #16
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f7ff fec0 	bl	800f060 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7ff fee3 	bl	800f0ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	60fb      	str	r3, [r7, #12]
 800f2ea:	e015      	b.n	800f318 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	015a      	lsls	r2, r3, #5
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f2fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	015a      	lsls	r2, r3, #5
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	4413      	add	r3, r2
 800f308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f30c:	461a      	mov	r2, r3
 800f30e:	2300      	movs	r3, #0
 800f310:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	3301      	adds	r3, #1
 800f316:	60fb      	str	r3, [r7, #12]
 800f318:	6a3b      	ldr	r3, [r7, #32]
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d3e5      	bcc.n	800f2ec <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800f320:	2101      	movs	r1, #1
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f8ac 	bl	800f480 <USB_DriveVbus>

  HAL_Delay(200U);
 800f328:	20c8      	movs	r0, #200	; 0xc8
 800f32a:	f7f6 ff19 	bl	8006160 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2200      	movs	r2, #0
 800f332:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f04f 32ff 	mov.w	r2, #4294967295
 800f33a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f344:	2b00      	cmp	r3, #0
 800f346:	d00b      	beq.n	800f360 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f34e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4a14      	ldr	r2, [pc, #80]	; (800f3a4 <USB_HostInit+0x14c>)
 800f354:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a13      	ldr	r2, [pc, #76]	; (800f3a8 <USB_HostInit+0x150>)
 800f35a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800f35e:	e009      	b.n	800f374 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2280      	movs	r2, #128	; 0x80
 800f364:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a10      	ldr	r2, [pc, #64]	; (800f3ac <USB_HostInit+0x154>)
 800f36a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4a10      	ldr	r2, [pc, #64]	; (800f3b0 <USB_HostInit+0x158>)
 800f370:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	699b      	ldr	r3, [r3, #24]
 800f37e:	f043 0210 	orr.w	r2, r3, #16
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	699a      	ldr	r2, [r3, #24]
 800f38a:	4b0a      	ldr	r3, [pc, #40]	; (800f3b4 <USB_HostInit+0x15c>)
 800f38c:	4313      	orrs	r3, r2
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f39e:	b004      	add	sp, #16
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	01000200 	.word	0x01000200
 800f3a8:	00e00300 	.word	0x00e00300
 800f3ac:	00600080 	.word	0x00600080
 800f3b0:	004000e0 	.word	0x004000e0
 800f3b4:	a3200008 	.word	0xa3200008

0800f3b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f3d6:	f023 0303 	bic.w	r3, r3, #3
 800f3da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3e2:	681a      	ldr	r2, [r3, #0]
 800f3e4:	78fb      	ldrb	r3, [r7, #3]
 800f3e6:	f003 0303 	and.w	r3, r3, #3
 800f3ea:	68f9      	ldr	r1, [r7, #12]
 800f3ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f3f4:	78fb      	ldrb	r3, [r7, #3]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d107      	bne.n	800f40a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f400:	461a      	mov	r2, r3
 800f402:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f406:	6053      	str	r3, [r2, #4]
 800f408:	e009      	b.n	800f41e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800f40a:	78fb      	ldrb	r3, [r7, #3]
 800f40c:	2b02      	cmp	r3, #2
 800f40e:	d106      	bne.n	800f41e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f416:	461a      	mov	r2, r3
 800f418:	f241 7370 	movw	r3, #6000	; 0x1770
 800f41c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800f41e:	2300      	movs	r3, #0
}
 800f420:	4618      	mov	r0, r3
 800f422:	3714      	adds	r7, #20
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800f438:	2300      	movs	r3, #0
 800f43a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f44c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	68fa      	ldr	r2, [r7, #12]
 800f452:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f45a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800f45c:	2064      	movs	r0, #100	; 0x64
 800f45e:	f7f6 fe7f 	bl	8006160 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f46a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f46e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800f470:	200a      	movs	r0, #10
 800f472:	f7f6 fe75 	bl	8006160 <HAL_Delay>

  return HAL_OK;
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f490:	2300      	movs	r3, #0
 800f492:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f4a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d109      	bne.n	800f4c4 <USB_DriveVbus+0x44>
 800f4b0:	78fb      	ldrb	r3, [r7, #3]
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d106      	bne.n	800f4c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f4be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f4c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4ce:	d109      	bne.n	800f4e4 <USB_DriveVbus+0x64>
 800f4d0:	78fb      	ldrb	r3, [r7, #3]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d106      	bne.n	800f4e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	68fa      	ldr	r2, [r7, #12]
 800f4da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3714      	adds	r7, #20
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b085      	sub	sp, #20
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f4fe:	2300      	movs	r3, #0
 800f500:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	0c5b      	lsrs	r3, r3, #17
 800f510:	f003 0303 	and.w	r3, r3, #3
}
 800f514:	4618      	mov	r0, r3
 800f516:	3714      	adds	r7, #20
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr

0800f520 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	b29b      	uxth	r3, r3
}
 800f536:	4618      	mov	r0, r3
 800f538:	3714      	adds	r7, #20
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
	...

0800f544 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800f544:	b480      	push	{r7}
 800f546:	b087      	sub	sp, #28
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	4608      	mov	r0, r1
 800f54e:	4611      	mov	r1, r2
 800f550:	461a      	mov	r2, r3
 800f552:	4603      	mov	r3, r0
 800f554:	70fb      	strb	r3, [r7, #3]
 800f556:	460b      	mov	r3, r1
 800f558:	70bb      	strb	r3, [r7, #2]
 800f55a:	4613      	mov	r3, r2
 800f55c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800f55e:	2300      	movs	r3, #0
 800f560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800f566:	78fb      	ldrb	r3, [r7, #3]
 800f568:	015a      	lsls	r2, r3, #5
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	4413      	add	r3, r2
 800f56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f572:	461a      	mov	r2, r3
 800f574:	f04f 33ff 	mov.w	r3, #4294967295
 800f578:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800f57a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f57e:	2b03      	cmp	r3, #3
 800f580:	d87e      	bhi.n	800f680 <USB_HC_Init+0x13c>
 800f582:	a201      	add	r2, pc, #4	; (adr r2, 800f588 <USB_HC_Init+0x44>)
 800f584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f588:	0800f599 	.word	0x0800f599
 800f58c:	0800f643 	.word	0x0800f643
 800f590:	0800f599 	.word	0x0800f599
 800f594:	0800f605 	.word	0x0800f605
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f598:	78fb      	ldrb	r3, [r7, #3]
 800f59a:	015a      	lsls	r2, r3, #5
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	4413      	add	r3, r2
 800f5a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	f240 439d 	movw	r3, #1181	; 0x49d
 800f5aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800f5ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	da10      	bge.n	800f5d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f5b4:	78fb      	ldrb	r3, [r7, #3]
 800f5b6:	015a      	lsls	r2, r3, #5
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	4413      	add	r3, r2
 800f5bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	78fa      	ldrb	r2, [r7, #3]
 800f5c4:	0151      	lsls	r1, r2, #5
 800f5c6:	68ba      	ldr	r2, [r7, #8]
 800f5c8:	440a      	add	r2, r1
 800f5ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f5ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5d2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800f5d4:	e057      	b.n	800f686 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d051      	beq.n	800f686 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800f5e2:	78fb      	ldrb	r3, [r7, #3]
 800f5e4:	015a      	lsls	r2, r3, #5
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	78fa      	ldrb	r2, [r7, #3]
 800f5f2:	0151      	lsls	r1, r2, #5
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	440a      	add	r2, r1
 800f5f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f5fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f600:	60d3      	str	r3, [r2, #12]
      break;
 800f602:	e040      	b.n	800f686 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f604:	78fb      	ldrb	r3, [r7, #3]
 800f606:	015a      	lsls	r2, r3, #5
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	4413      	add	r3, r2
 800f60c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f610:	461a      	mov	r2, r3
 800f612:	f240 639d 	movw	r3, #1693	; 0x69d
 800f616:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f618:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	da34      	bge.n	800f68a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f620:	78fb      	ldrb	r3, [r7, #3]
 800f622:	015a      	lsls	r2, r3, #5
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	4413      	add	r3, r2
 800f628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	78fa      	ldrb	r2, [r7, #3]
 800f630:	0151      	lsls	r1, r2, #5
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	440a      	add	r2, r1
 800f636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f63a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f63e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800f640:	e023      	b.n	800f68a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f642:	78fb      	ldrb	r3, [r7, #3]
 800f644:	015a      	lsls	r2, r3, #5
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	4413      	add	r3, r2
 800f64a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f64e:	461a      	mov	r2, r3
 800f650:	f240 2325 	movw	r3, #549	; 0x225
 800f654:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f656:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	da17      	bge.n	800f68e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800f65e:	78fb      	ldrb	r3, [r7, #3]
 800f660:	015a      	lsls	r2, r3, #5
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	4413      	add	r3, r2
 800f666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	78fa      	ldrb	r2, [r7, #3]
 800f66e:	0151      	lsls	r1, r2, #5
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	440a      	add	r2, r1
 800f674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f678:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800f67c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800f67e:	e006      	b.n	800f68e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800f680:	2301      	movs	r3, #1
 800f682:	75fb      	strb	r3, [r7, #23]
      break;
 800f684:	e004      	b.n	800f690 <USB_HC_Init+0x14c>
      break;
 800f686:	bf00      	nop
 800f688:	e002      	b.n	800f690 <USB_HC_Init+0x14c>
      break;
 800f68a:	bf00      	nop
 800f68c:	e000      	b.n	800f690 <USB_HC_Init+0x14c>
      break;
 800f68e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f696:	699a      	ldr	r2, [r3, #24]
 800f698:	78fb      	ldrb	r3, [r7, #3]
 800f69a:	f003 030f 	and.w	r3, r3, #15
 800f69e:	2101      	movs	r1, #1
 800f6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800f6a4:	68b9      	ldr	r1, [r7, #8]
 800f6a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	699b      	ldr	r3, [r3, #24]
 800f6b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800f6ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	da03      	bge.n	800f6ca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800f6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6c6:	613b      	str	r3, [r7, #16]
 800f6c8:	e001      	b.n	800f6ce <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800f6ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d103      	bne.n	800f6de <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800f6d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	e001      	b.n	800f6e2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f6e2:	787b      	ldrb	r3, [r7, #1]
 800f6e4:	059b      	lsls	r3, r3, #22
 800f6e6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f6ea:	78bb      	ldrb	r3, [r7, #2]
 800f6ec:	02db      	lsls	r3, r3, #11
 800f6ee:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f6f2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f6f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f6f8:	049b      	lsls	r3, r3, #18
 800f6fa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f6fe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f700:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f702:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f706:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f70c:	78fb      	ldrb	r3, [r7, #3]
 800f70e:	0159      	lsls	r1, r3, #5
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	440b      	add	r3, r1
 800f714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f718:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f71e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800f720:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f724:	2b03      	cmp	r3, #3
 800f726:	d10f      	bne.n	800f748 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800f728:	78fb      	ldrb	r3, [r7, #3]
 800f72a:	015a      	lsls	r2, r3, #5
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	4413      	add	r3, r2
 800f730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	78fa      	ldrb	r2, [r7, #3]
 800f738:	0151      	lsls	r1, r2, #5
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	440a      	add	r2, r1
 800f73e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f746:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800f748:	7dfb      	ldrb	r3, [r7, #23]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	371c      	adds	r7, #28
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop

0800f758 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b08c      	sub	sp, #48	; 0x30
 800f75c:	af02      	add	r7, sp, #8
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	4613      	mov	r3, r2
 800f764:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	785b      	ldrb	r3, [r3, #1]
 800f76e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800f770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f774:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f77a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d028      	beq.n	800f7d4 <USB_HC_StartXfer+0x7c>
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	791b      	ldrb	r3, [r3, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d124      	bne.n	800f7d4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800f78a:	79fb      	ldrb	r3, [r7, #7]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d10b      	bne.n	800f7a8 <USB_HC_StartXfer+0x50>
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	795b      	ldrb	r3, [r3, #5]
 800f794:	2b01      	cmp	r3, #1
 800f796:	d107      	bne.n	800f7a8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	785b      	ldrb	r3, [r3, #1]
 800f79c:	4619      	mov	r1, r3
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f000 fa2e 	bl	800fc00 <USB_DoPing>
      return HAL_OK;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	e112      	b.n	800f9ce <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800f7a8:	79fb      	ldrb	r3, [r7, #7]
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d112      	bne.n	800f7d4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	015a      	lsls	r2, r3, #5
 800f7b2:	6a3b      	ldr	r3, [r7, #32]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	69fa      	ldr	r2, [r7, #28]
 800f7be:	0151      	lsls	r1, r2, #5
 800f7c0:	6a3a      	ldr	r2, [r7, #32]
 800f7c2:	440a      	add	r2, r1
 800f7c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f7c8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800f7cc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d018      	beq.n	800f80e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	691b      	ldr	r3, [r3, #16]
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	8912      	ldrh	r2, [r2, #8]
 800f7e4:	4413      	add	r3, r2
 800f7e6:	3b01      	subs	r3, #1
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	8912      	ldrh	r2, [r2, #8]
 800f7ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7f0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800f7f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f7f4:	8b7b      	ldrh	r3, [r7, #26]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d90b      	bls.n	800f812 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800f7fa:	8b7b      	ldrh	r3, [r7, #26]
 800f7fc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800f7fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f800:	68ba      	ldr	r2, [r7, #8]
 800f802:	8912      	ldrh	r2, [r2, #8]
 800f804:	fb02 f203 	mul.w	r2, r2, r3
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	611a      	str	r2, [r3, #16]
 800f80c:	e001      	b.n	800f812 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800f80e:	2301      	movs	r3, #1
 800f810:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	78db      	ldrb	r3, [r3, #3]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d006      	beq.n	800f828 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800f81a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f81c:	68ba      	ldr	r2, [r7, #8]
 800f81e:	8912      	ldrh	r2, [r2, #8]
 800f820:	fb02 f203 	mul.w	r2, r2, r3
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	691b      	ldr	r3, [r3, #16]
 800f82c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f832:	04d9      	lsls	r1, r3, #19
 800f834:	4b68      	ldr	r3, [pc, #416]	; (800f9d8 <USB_HC_StartXfer+0x280>)
 800f836:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800f838:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	7a9b      	ldrb	r3, [r3, #10]
 800f83e:	075b      	lsls	r3, r3, #29
 800f840:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800f844:	69f9      	ldr	r1, [r7, #28]
 800f846:	0148      	lsls	r0, r1, #5
 800f848:	6a39      	ldr	r1, [r7, #32]
 800f84a:	4401      	add	r1, r0
 800f84c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f850:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800f852:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800f854:	79fb      	ldrb	r3, [r7, #7]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d009      	beq.n	800f86e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	68d9      	ldr	r1, [r3, #12]
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	015a      	lsls	r2, r3, #5
 800f862:	6a3b      	ldr	r3, [r7, #32]
 800f864:	4413      	add	r3, r2
 800f866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f86a:	460a      	mov	r2, r1
 800f86c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800f86e:	6a3b      	ldr	r3, [r7, #32]
 800f870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	f003 0301 	and.w	r3, r3, #1
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	bf0c      	ite	eq
 800f87e:	2301      	moveq	r3, #1
 800f880:	2300      	movne	r3, #0
 800f882:	b2db      	uxtb	r3, r3
 800f884:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	015a      	lsls	r2, r3, #5
 800f88a:	6a3b      	ldr	r3, [r7, #32]
 800f88c:	4413      	add	r3, r2
 800f88e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	69fa      	ldr	r2, [r7, #28]
 800f896:	0151      	lsls	r1, r2, #5
 800f898:	6a3a      	ldr	r2, [r7, #32]
 800f89a:	440a      	add	r2, r1
 800f89c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f8a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f8a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	015a      	lsls	r2, r3, #5
 800f8aa:	6a3b      	ldr	r3, [r7, #32]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	7e7b      	ldrb	r3, [r7, #25]
 800f8b6:	075b      	lsls	r3, r3, #29
 800f8b8:	69f9      	ldr	r1, [r7, #28]
 800f8ba:	0148      	lsls	r0, r1, #5
 800f8bc:	6a39      	ldr	r1, [r7, #32]
 800f8be:	4401      	add	r1, r0
 800f8c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	015a      	lsls	r2, r3, #5
 800f8cc:	6a3b      	ldr	r3, [r7, #32]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a41      	ldr	r2, [pc, #260]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f8d8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f8da:	4b40      	ldr	r3, [pc, #256]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f8e2:	4a3e      	ldr	r2, [pc, #248]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f8e4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	78db      	ldrb	r3, [r3, #3]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d006      	beq.n	800f8fc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800f8ee:	4b3b      	ldr	r3, [pc, #236]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8f6:	4a39      	ldr	r2, [pc, #228]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f8f8:	6013      	str	r3, [r2, #0]
 800f8fa:	e005      	b.n	800f908 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800f8fc:	4b37      	ldr	r3, [pc, #220]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f904:	4a35      	ldr	r2, [pc, #212]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f906:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f908:	4b34      	ldr	r3, [pc, #208]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f910:	4a32      	ldr	r2, [pc, #200]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f912:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	015a      	lsls	r2, r3, #5
 800f918:	6a3b      	ldr	r3, [r7, #32]
 800f91a:	4413      	add	r3, r2
 800f91c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f920:	461a      	mov	r2, r3
 800f922:	4b2e      	ldr	r3, [pc, #184]	; (800f9dc <USB_HC_StartXfer+0x284>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800f928:	79fb      	ldrb	r3, [r7, #7]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d14e      	bne.n	800f9cc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	78db      	ldrb	r3, [r3, #3]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d14a      	bne.n	800f9cc <USB_HC_StartXfer+0x274>
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	691b      	ldr	r3, [r3, #16]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d046      	beq.n	800f9cc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	79db      	ldrb	r3, [r3, #7]
 800f942:	2b03      	cmp	r3, #3
 800f944:	d830      	bhi.n	800f9a8 <USB_HC_StartXfer+0x250>
 800f946:	a201      	add	r2, pc, #4	; (adr r2, 800f94c <USB_HC_StartXfer+0x1f4>)
 800f948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94c:	0800f95d 	.word	0x0800f95d
 800f950:	0800f981 	.word	0x0800f981
 800f954:	0800f95d 	.word	0x0800f95d
 800f958:	0800f981 	.word	0x0800f981
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	691b      	ldr	r3, [r3, #16]
 800f960:	3303      	adds	r3, #3
 800f962:	089b      	lsrs	r3, r3, #2
 800f964:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f966:	8afa      	ldrh	r2, [r7, #22]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	429a      	cmp	r2, r3
 800f970:	d91c      	bls.n	800f9ac <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	699b      	ldr	r3, [r3, #24]
 800f976:	f043 0220 	orr.w	r2, r3, #32
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	619a      	str	r2, [r3, #24]
          }
          break;
 800f97e:	e015      	b.n	800f9ac <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	691b      	ldr	r3, [r3, #16]
 800f984:	3303      	adds	r3, #3
 800f986:	089b      	lsrs	r3, r3, #2
 800f988:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f98a:	8afa      	ldrh	r2, [r7, #22]
 800f98c:	6a3b      	ldr	r3, [r7, #32]
 800f98e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f992:	691b      	ldr	r3, [r3, #16]
 800f994:	b29b      	uxth	r3, r3
 800f996:	429a      	cmp	r2, r3
 800f998:	d90a      	bls.n	800f9b0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	699b      	ldr	r3, [r3, #24]
 800f99e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	619a      	str	r2, [r3, #24]
          }
          break;
 800f9a6:	e003      	b.n	800f9b0 <USB_HC_StartXfer+0x258>

        default:
          break;
 800f9a8:	bf00      	nop
 800f9aa:	e002      	b.n	800f9b2 <USB_HC_StartXfer+0x25a>
          break;
 800f9ac:	bf00      	nop
 800f9ae:	e000      	b.n	800f9b2 <USB_HC_StartXfer+0x25a>
          break;
 800f9b0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	68d9      	ldr	r1, [r3, #12]
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	785a      	ldrb	r2, [r3, #1]
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	b298      	uxth	r0, r3
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f7ff fb92 	bl	800f0f0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3728      	adds	r7, #40	; 0x28
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	1ff80000 	.word	0x1ff80000
 800f9dc:	20001118 	.word	0x20001118

0800f9e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b085      	sub	sp, #20
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9f2:	695b      	ldr	r3, [r3, #20]
 800f9f4:	b29b      	uxth	r3, r3
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3714      	adds	r7, #20
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr

0800fa02 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800fa02:	b480      	push	{r7}
 800fa04:	b087      	sub	sp, #28
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	6078      	str	r0, [r7, #4]
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800fa12:	78fb      	ldrb	r3, [r7, #3]
 800fa14:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800fa16:	2300      	movs	r3, #0
 800fa18:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	015a      	lsls	r2, r3, #5
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	4413      	add	r3, r2
 800fa22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	0c9b      	lsrs	r3, r3, #18
 800fa2a:	f003 0303 	and.w	r3, r3, #3
 800fa2e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d002      	beq.n	800fa3c <USB_HC_Halt+0x3a>
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d16c      	bne.n	800fb16 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	015a      	lsls	r2, r3, #5
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	4413      	add	r3, r2
 800fa44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	0151      	lsls	r1, r2, #5
 800fa4e:	693a      	ldr	r2, [r7, #16]
 800fa50:	440a      	add	r2, r1
 800fa52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fa56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa5a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d143      	bne.n	800faf0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	015a      	lsls	r2, r3, #5
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	4413      	add	r3, r2
 800fa70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	68fa      	ldr	r2, [r7, #12]
 800fa78:	0151      	lsls	r1, r2, #5
 800fa7a:	693a      	ldr	r2, [r7, #16]
 800fa7c:	440a      	add	r2, r1
 800fa7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fa82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	015a      	lsls	r2, r3, #5
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	4413      	add	r3, r2
 800fa90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	0151      	lsls	r1, r2, #5
 800fa9a:	693a      	ldr	r2, [r7, #16]
 800fa9c:	440a      	add	r2, r1
 800fa9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800faa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800faa6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	015a      	lsls	r2, r3, #5
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	4413      	add	r3, r2
 800fab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	68fa      	ldr	r2, [r7, #12]
 800fab8:	0151      	lsls	r1, r2, #5
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	440a      	add	r2, r1
 800fabe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fac2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fac6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	3301      	adds	r3, #1
 800facc:	617b      	str	r3, [r7, #20]
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fad4:	d81d      	bhi.n	800fb12 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	015a      	lsls	r2, r3, #5
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	4413      	add	r3, r2
 800fade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800faec:	d0ec      	beq.n	800fac8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800faee:	e080      	b.n	800fbf2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	015a      	lsls	r2, r3, #5
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	4413      	add	r3, r2
 800faf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	0151      	lsls	r1, r2, #5
 800fb02:	693a      	ldr	r2, [r7, #16]
 800fb04:	440a      	add	r2, r1
 800fb06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb0e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800fb10:	e06f      	b.n	800fbf2 <USB_HC_Halt+0x1f0>
          break;
 800fb12:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800fb14:	e06d      	b.n	800fbf2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	015a      	lsls	r2, r3, #5
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	68fa      	ldr	r2, [r7, #12]
 800fb26:	0151      	lsls	r1, r2, #5
 800fb28:	693a      	ldr	r2, [r7, #16]
 800fb2a:	440a      	add	r2, r1
 800fb2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb34:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb3c:	691b      	ldr	r3, [r3, #16]
 800fb3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d143      	bne.n	800fbce <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	015a      	lsls	r2, r3, #5
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	68fa      	ldr	r2, [r7, #12]
 800fb56:	0151      	lsls	r1, r2, #5
 800fb58:	693a      	ldr	r2, [r7, #16]
 800fb5a:	440a      	add	r2, r1
 800fb5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb64:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	015a      	lsls	r2, r3, #5
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	0151      	lsls	r1, r2, #5
 800fb78:	693a      	ldr	r2, [r7, #16]
 800fb7a:	440a      	add	r2, r1
 800fb7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb84:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	015a      	lsls	r2, r3, #5
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	0151      	lsls	r1, r2, #5
 800fb98:	693a      	ldr	r2, [r7, #16]
 800fb9a:	440a      	add	r2, r1
 800fb9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fba0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fba4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	617b      	str	r3, [r7, #20]
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fbb2:	d81d      	bhi.n	800fbf0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	015a      	lsls	r2, r3, #5
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	4413      	add	r3, r2
 800fbbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbca:	d0ec      	beq.n	800fba6 <USB_HC_Halt+0x1a4>
 800fbcc:	e011      	b.n	800fbf2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	015a      	lsls	r2, r3, #5
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	0151      	lsls	r1, r2, #5
 800fbe0:	693a      	ldr	r2, [r7, #16]
 800fbe2:	440a      	add	r2, r1
 800fbe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fbe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fbec:	6013      	str	r3, [r2, #0]
 800fbee:	e000      	b.n	800fbf2 <USB_HC_Halt+0x1f0>
          break;
 800fbf0:	bf00      	nop
    }
  }

  return HAL_OK;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	371c      	adds	r7, #28
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b087      	sub	sp, #28
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800fc10:	78fb      	ldrb	r3, [r7, #3]
 800fc12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800fc14:	2301      	movs	r3, #1
 800fc16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	04da      	lsls	r2, r3, #19
 800fc1c:	4b15      	ldr	r3, [pc, #84]	; (800fc74 <USB_DoPing+0x74>)
 800fc1e:	4013      	ands	r3, r2
 800fc20:	693a      	ldr	r2, [r7, #16]
 800fc22:	0151      	lsls	r1, r2, #5
 800fc24:	697a      	ldr	r2, [r7, #20]
 800fc26:	440a      	add	r2, r1
 800fc28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fc30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	015a      	lsls	r2, r3, #5
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	4413      	add	r3, r2
 800fc3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fc48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fc50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	015a      	lsls	r2, r3, #5
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	4413      	add	r3, r2
 800fc5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc5e:	461a      	mov	r2, r3
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	371c      	adds	r7, #28
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	1ff80000 	.word	0x1ff80000

0800fc78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b086      	sub	sp, #24
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800fc84:	2300      	movs	r3, #0
 800fc86:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f7ff f9ae 	bl	800efea <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800fc8e:	2110      	movs	r1, #16
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7ff f9e5 	bl	800f060 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7ff fa08 	bl	800f0ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	613b      	str	r3, [r7, #16]
 800fca0:	e01f      	b.n	800fce2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	015a      	lsls	r2, r3, #5
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	4413      	add	r3, r2
 800fcaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fcb8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fcc0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fcc8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	015a      	lsls	r2, r3, #5
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	3301      	adds	r3, #1
 800fce0:	613b      	str	r3, [r7, #16]
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	2b0f      	cmp	r3, #15
 800fce6:	d9dc      	bls.n	800fca2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800fce8:	2300      	movs	r3, #0
 800fcea:	613b      	str	r3, [r7, #16]
 800fcec:	e034      	b.n	800fd58 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	015a      	lsls	r2, r3, #5
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd04:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fd0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fd14:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	015a      	lsls	r2, r3, #5
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd22:	461a      	mov	r2, r3
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	617b      	str	r3, [r7, #20]
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fd34:	d80c      	bhi.n	800fd50 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	015a      	lsls	r2, r3, #5
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd4c:	d0ec      	beq.n	800fd28 <USB_StopHost+0xb0>
 800fd4e:	e000      	b.n	800fd52 <USB_StopHost+0xda>
        break;
 800fd50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	3301      	adds	r3, #1
 800fd56:	613b      	str	r3, [r7, #16]
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	2b0f      	cmp	r3, #15
 800fd5c:	d9c7      	bls.n	800fcee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd64:	461a      	mov	r2, r3
 800fd66:	f04f 33ff 	mov.w	r3, #4294967295
 800fd6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7ff f927 	bl	800efc8 <USB_EnableGlobalInt>

  return HAL_OK;
 800fd7a:	2300      	movs	r3, #0
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3718      	adds	r7, #24
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800fd84:	b590      	push	{r4, r7, lr}
 800fd86:	b089      	sub	sp, #36	; 0x24
 800fd88:	af04      	add	r7, sp, #16
 800fd8a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	2202      	movs	r2, #2
 800fd90:	2102      	movs	r1, #2
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 fcb4 	bl	8010700 <USBH_FindInterface>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800fd9c:	7bfb      	ldrb	r3, [r7, #15]
 800fd9e:	2bff      	cmp	r3, #255	; 0xff
 800fda0:	d002      	beq.n	800fda8 <USBH_CDC_InterfaceInit+0x24>
 800fda2:	7bfb      	ldrb	r3, [r7, #15]
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d901      	bls.n	800fdac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fda8:	2302      	movs	r3, #2
 800fdaa:	e13d      	b.n	8010028 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800fdac:	7bfb      	ldrb	r3, [r7, #15]
 800fdae:	4619      	mov	r1, r3
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 fc89 	bl	80106c8 <USBH_SelectInterface>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800fdba:	7bbb      	ldrb	r3, [r7, #14]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d001      	beq.n	800fdc4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800fdc0:	2302      	movs	r3, #2
 800fdc2:	e131      	b.n	8010028 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800fdca:	2050      	movs	r0, #80	; 0x50
 800fdcc:	f005 fffe 	bl	8015dcc <malloc>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fdda:	69db      	ldr	r3, [r3, #28]
 800fddc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d101      	bne.n	800fde8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800fde4:	2302      	movs	r3, #2
 800fde6:	e11f      	b.n	8010028 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800fde8:	2250      	movs	r2, #80	; 0x50
 800fdea:	2100      	movs	r1, #0
 800fdec:	68b8      	ldr	r0, [r7, #8]
 800fdee:	f006 f808 	bl	8015e02 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	211a      	movs	r1, #26
 800fdf8:	fb01 f303 	mul.w	r3, r1, r3
 800fdfc:	4413      	add	r3, r2
 800fdfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	b25b      	sxtb	r3, r3
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	da15      	bge.n	800fe36 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fe0a:	7bfb      	ldrb	r3, [r7, #15]
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	211a      	movs	r1, #26
 800fe10:	fb01 f303 	mul.w	r3, r1, r3
 800fe14:	4413      	add	r3, r2
 800fe16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fe1a:	781a      	ldrb	r2, [r3, #0]
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fe20:	7bfb      	ldrb	r3, [r7, #15]
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	211a      	movs	r1, #26
 800fe26:	fb01 f303 	mul.w	r3, r1, r3
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fe30:	881a      	ldrh	r2, [r3, #0]
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	785b      	ldrb	r3, [r3, #1]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f002 f890 	bl	8011f62 <USBH_AllocPipe>
 800fe42:	4603      	mov	r3, r0
 800fe44:	461a      	mov	r2, r3
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	7819      	ldrb	r1, [r3, #0]
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	7858      	ldrb	r0, [r3, #1]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	8952      	ldrh	r2, [r2, #10]
 800fe62:	9202      	str	r2, [sp, #8]
 800fe64:	2203      	movs	r2, #3
 800fe66:	9201      	str	r2, [sp, #4]
 800fe68:	9300      	str	r3, [sp, #0]
 800fe6a:	4623      	mov	r3, r4
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f002 f848 	bl	8011f04 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f005 fcc1 	bl	8015804 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800fe82:	2300      	movs	r3, #0
 800fe84:	2200      	movs	r2, #0
 800fe86:	210a      	movs	r1, #10
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 fc39 	bl	8010700 <USBH_FindInterface>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800fe92:	7bfb      	ldrb	r3, [r7, #15]
 800fe94:	2bff      	cmp	r3, #255	; 0xff
 800fe96:	d002      	beq.n	800fe9e <USBH_CDC_InterfaceInit+0x11a>
 800fe98:	7bfb      	ldrb	r3, [r7, #15]
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d901      	bls.n	800fea2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fe9e:	2302      	movs	r3, #2
 800fea0:	e0c2      	b.n	8010028 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800fea2:	7bfb      	ldrb	r3, [r7, #15]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	211a      	movs	r1, #26
 800fea8:	fb01 f303 	mul.w	r3, r1, r3
 800feac:	4413      	add	r3, r2
 800feae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	b25b      	sxtb	r3, r3
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	da16      	bge.n	800fee8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800feba:	7bfb      	ldrb	r3, [r7, #15]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	211a      	movs	r1, #26
 800fec0:	fb01 f303 	mul.w	r3, r1, r3
 800fec4:	4413      	add	r3, r2
 800fec6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800feca:	781a      	ldrb	r2, [r3, #0]
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fed0:	7bfb      	ldrb	r3, [r7, #15]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	211a      	movs	r1, #26
 800fed6:	fb01 f303 	mul.w	r3, r1, r3
 800feda:	4413      	add	r3, r2
 800fedc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fee0:	881a      	ldrh	r2, [r3, #0]
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	835a      	strh	r2, [r3, #26]
 800fee6:	e015      	b.n	800ff14 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fee8:	7bfb      	ldrb	r3, [r7, #15]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	211a      	movs	r1, #26
 800feee:	fb01 f303 	mul.w	r3, r1, r3
 800fef2:	4413      	add	r3, r2
 800fef4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fef8:	781a      	ldrb	r2, [r3, #0]
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fefe:	7bfb      	ldrb	r3, [r7, #15]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	211a      	movs	r1, #26
 800ff04:	fb01 f303 	mul.w	r3, r1, r3
 800ff08:	4413      	add	r3, r2
 800ff0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ff0e:	881a      	ldrh	r2, [r3, #0]
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ff14:	7bfb      	ldrb	r3, [r7, #15]
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	211a      	movs	r1, #26
 800ff1a:	fb01 f303 	mul.w	r3, r1, r3
 800ff1e:	4413      	add	r3, r2
 800ff20:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	b25b      	sxtb	r3, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	da16      	bge.n	800ff5a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	211a      	movs	r1, #26
 800ff32:	fb01 f303 	mul.w	r3, r1, r3
 800ff36:	4413      	add	r3, r2
 800ff38:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ff3c:	781a      	ldrb	r2, [r3, #0]
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ff42:	7bfb      	ldrb	r3, [r7, #15]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	211a      	movs	r1, #26
 800ff48:	fb01 f303 	mul.w	r3, r1, r3
 800ff4c:	4413      	add	r3, r2
 800ff4e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ff52:	881a      	ldrh	r2, [r3, #0]
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	835a      	strh	r2, [r3, #26]
 800ff58:	e015      	b.n	800ff86 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ff5a:	7bfb      	ldrb	r3, [r7, #15]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	211a      	movs	r1, #26
 800ff60:	fb01 f303 	mul.w	r3, r1, r3
 800ff64:	4413      	add	r3, r2
 800ff66:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ff6a:	781a      	ldrb	r2, [r3, #0]
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ff70:	7bfb      	ldrb	r3, [r7, #15]
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	211a      	movs	r1, #26
 800ff76:	fb01 f303 	mul.w	r3, r1, r3
 800ff7a:	4413      	add	r3, r2
 800ff7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ff80:	881a      	ldrh	r2, [r3, #0]
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	7b9b      	ldrb	r3, [r3, #14]
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f001 ffe8 	bl	8011f62 <USBH_AllocPipe>
 800ff92:	4603      	mov	r3, r0
 800ff94:	461a      	mov	r2, r3
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	7bdb      	ldrb	r3, [r3, #15]
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f001 ffde 	bl	8011f62 <USBH_AllocPipe>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	7b59      	ldrb	r1, [r3, #13]
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	7b98      	ldrb	r0, [r3, #14]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	8b12      	ldrh	r2, [r2, #24]
 800ffc6:	9202      	str	r2, [sp, #8]
 800ffc8:	2202      	movs	r2, #2
 800ffca:	9201      	str	r2, [sp, #4]
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	4623      	mov	r3, r4
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f001 ff96 	bl	8011f04 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	7b19      	ldrb	r1, [r3, #12]
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	7bd8      	ldrb	r0, [r3, #15]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ffec:	68ba      	ldr	r2, [r7, #8]
 800ffee:	8b52      	ldrh	r2, [r2, #26]
 800fff0:	9202      	str	r2, [sp, #8]
 800fff2:	2202      	movs	r2, #2
 800fff4:	9201      	str	r2, [sp, #4]
 800fff6:	9300      	str	r3, [sp, #0]
 800fff8:	4623      	mov	r3, r4
 800fffa:	4602      	mov	r2, r0
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f001 ff81 	bl	8011f04 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	2200      	movs	r2, #0
 8010006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	7b5b      	ldrb	r3, [r3, #13]
 801000e:	2200      	movs	r2, #0
 8010010:	4619      	mov	r1, r3
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f005 fbf6 	bl	8015804 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	7b1b      	ldrb	r3, [r3, #12]
 801001c:	2200      	movs	r2, #0
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f005 fbef 	bl	8015804 <USBH_LL_SetToggle>

  return USBH_OK;
 8010026:	2300      	movs	r3, #0
}
 8010028:	4618      	mov	r0, r3
 801002a:	3714      	adds	r7, #20
 801002c:	46bd      	mov	sp, r7
 801002e:	bd90      	pop	{r4, r7, pc}

08010030 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801003e:	69db      	ldr	r3, [r3, #28]
 8010040:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00e      	beq.n	8010068 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	4619      	mov	r1, r3
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f001 ff76 	bl	8011f42 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	4619      	mov	r1, r3
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f001 ffa1 	bl	8011fa4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2200      	movs	r2, #0
 8010066:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	7b1b      	ldrb	r3, [r3, #12]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d00e      	beq.n	801008e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	7b1b      	ldrb	r3, [r3, #12]
 8010074:	4619      	mov	r1, r3
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f001 ff63 	bl	8011f42 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	7b1b      	ldrb	r3, [r3, #12]
 8010080:	4619      	mov	r1, r3
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f001 ff8e 	bl	8011fa4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	7b5b      	ldrb	r3, [r3, #13]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00e      	beq.n	80100b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	7b5b      	ldrb	r3, [r3, #13]
 801009a:	4619      	mov	r1, r3
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f001 ff50 	bl	8011f42 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	7b5b      	ldrb	r3, [r3, #13]
 80100a6:	4619      	mov	r1, r3
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f001 ff7b 	bl	8011fa4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2200      	movs	r2, #0
 80100b2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100ba:	69db      	ldr	r3, [r3, #28]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00b      	beq.n	80100d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100c6:	69db      	ldr	r3, [r3, #28]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f005 fe87 	bl	8015ddc <free>
    phost->pActiveClass->pData = 0U;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100d4:	2200      	movs	r2, #0
 80100d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80100d8:	2300      	movs	r3, #0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b084      	sub	sp, #16
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100f0:	69db      	ldr	r3, [r3, #28]
 80100f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	3340      	adds	r3, #64	; 0x40
 80100f8:	4619      	mov	r1, r3
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 f8b1 	bl	8010262 <GetLineCoding>
 8010100:	4603      	mov	r3, r0
 8010102:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8010104:	7afb      	ldrb	r3, [r7, #11]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d105      	bne.n	8010116 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010110:	2102      	movs	r1, #2
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8010116:	7afb      	ldrb	r3, [r7, #11]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8010128:	2301      	movs	r3, #1
 801012a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 801012c:	2300      	movs	r3, #0
 801012e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010136:	69db      	ldr	r3, [r3, #28]
 8010138:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010140:	2b04      	cmp	r3, #4
 8010142:	d877      	bhi.n	8010234 <USBH_CDC_Process+0x114>
 8010144:	a201      	add	r2, pc, #4	; (adr r2, 801014c <USBH_CDC_Process+0x2c>)
 8010146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801014a:	bf00      	nop
 801014c:	08010161 	.word	0x08010161
 8010150:	08010167 	.word	0x08010167
 8010154:	08010197 	.word	0x08010197
 8010158:	0801020b 	.word	0x0801020b
 801015c:	08010219 	.word	0x08010219
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8010160:	2300      	movs	r3, #0
 8010162:	73fb      	strb	r3, [r7, #15]
      break;
 8010164:	e06d      	b.n	8010242 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801016a:	4619      	mov	r1, r3
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 f897 	bl	80102a0 <SetLineCoding>
 8010172:	4603      	mov	r3, r0
 8010174:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010176:	7bbb      	ldrb	r3, [r7, #14]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d104      	bne.n	8010186 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	2202      	movs	r2, #2
 8010180:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010184:	e058      	b.n	8010238 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8010186:	7bbb      	ldrb	r3, [r7, #14]
 8010188:	2b01      	cmp	r3, #1
 801018a:	d055      	beq.n	8010238 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	2204      	movs	r2, #4
 8010190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010194:	e050      	b.n	8010238 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	3340      	adds	r3, #64	; 0x40
 801019a:	4619      	mov	r1, r3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 f860 	bl	8010262 <GetLineCoding>
 80101a2:	4603      	mov	r3, r0
 80101a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80101a6:	7bbb      	ldrb	r3, [r7, #14]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d126      	bne.n	80101fa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	2200      	movs	r2, #0
 80101b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101be:	791b      	ldrb	r3, [r3, #4]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d13b      	bne.n	801023c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101ce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d133      	bne.n	801023c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101de:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d12b      	bne.n	801023c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101ec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d124      	bne.n	801023c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 f984 	bl	8010500 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80101f8:	e020      	b.n	801023c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80101fa:	7bbb      	ldrb	r3, [r7, #14]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d01d      	beq.n	801023c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	2204      	movs	r2, #4
 8010204:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010208:	e018      	b.n	801023c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 f867 	bl	80102de <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f8f8 	bl	8010406 <CDC_ProcessReception>
      break;
 8010216:	e014      	b.n	8010242 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8010218:	2100      	movs	r1, #0
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f001 f94f 	bl	80114be <USBH_ClrFeature>
 8010220:	4603      	mov	r3, r0
 8010222:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010224:	7bbb      	ldrb	r3, [r7, #14]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10a      	bne.n	8010240 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	2200      	movs	r2, #0
 801022e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8010232:	e005      	b.n	8010240 <USBH_CDC_Process+0x120>

    default:
      break;
 8010234:	bf00      	nop
 8010236:	e004      	b.n	8010242 <USBH_CDC_Process+0x122>
      break;
 8010238:	bf00      	nop
 801023a:	e002      	b.n	8010242 <USBH_CDC_Process+0x122>
      break;
 801023c:	bf00      	nop
 801023e:	e000      	b.n	8010242 <USBH_CDC_Process+0x122>
      break;
 8010240:	bf00      	nop

  }

  return status;
 8010242:	7bfb      	ldrb	r3, [r7, #15]
}
 8010244:	4618      	mov	r0, r3
 8010246:	3710      	adds	r7, #16
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	370c      	adds	r7, #12
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr

08010262 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010262:	b580      	push	{r7, lr}
 8010264:	b082      	sub	sp, #8
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
 801026a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	22a1      	movs	r2, #161	; 0xa1
 8010270:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2221      	movs	r2, #33	; 0x21
 8010276:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2200      	movs	r2, #0
 8010282:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2207      	movs	r2, #7
 8010288:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2207      	movs	r2, #7
 801028e:	4619      	mov	r1, r3
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f001 faf4 	bl	801187e <USBH_CtlReq>
 8010296:	4603      	mov	r3, r0
}
 8010298:	4618      	mov	r0, r3
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2221      	movs	r2, #33	; 0x21
 80102ae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2220      	movs	r2, #32
 80102b4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2200      	movs	r2, #0
 80102c0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2207      	movs	r2, #7
 80102c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	2207      	movs	r2, #7
 80102cc:	4619      	mov	r1, r3
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f001 fad5 	bl	801187e <USBH_CtlReq>
 80102d4:	4603      	mov	r3, r0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}

080102de <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80102de:	b580      	push	{r7, lr}
 80102e0:	b086      	sub	sp, #24
 80102e2:	af02      	add	r7, sp, #8
 80102e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80102ec:	69db      	ldr	r3, [r3, #28]
 80102ee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80102f0:	2300      	movs	r3, #0
 80102f2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	d002      	beq.n	8010304 <CDC_ProcessTransmission+0x26>
 80102fe:	2b02      	cmp	r3, #2
 8010300:	d025      	beq.n	801034e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8010302:	e07c      	b.n	80103fe <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010308:	68fa      	ldr	r2, [r7, #12]
 801030a:	8b12      	ldrh	r2, [r2, #24]
 801030c:	4293      	cmp	r3, r2
 801030e:	d90c      	bls.n	801032a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	69d9      	ldr	r1, [r3, #28]
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	8b1a      	ldrh	r2, [r3, #24]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	7b58      	ldrb	r0, [r3, #13]
 801031c:	2301      	movs	r3, #1
 801031e:	9300      	str	r3, [sp, #0]
 8010320:	4603      	mov	r3, r0
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f001 fdab 	bl	8011e7e <USBH_BulkSendData>
 8010328:	e00c      	b.n	8010344 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8010332:	b29a      	uxth	r2, r3
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	7b58      	ldrb	r0, [r3, #13]
 8010338:	2301      	movs	r3, #1
 801033a:	9300      	str	r3, [sp, #0]
 801033c:	4603      	mov	r3, r0
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f001 fd9d 	bl	8011e7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2202      	movs	r2, #2
 8010348:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801034c:	e057      	b.n	80103fe <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	7b5b      	ldrb	r3, [r3, #13]
 8010352:	4619      	mov	r1, r3
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f005 fa2b 	bl	80157b0 <USBH_LL_GetURBState>
 801035a:	4603      	mov	r3, r0
 801035c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801035e:	7afb      	ldrb	r3, [r7, #11]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d136      	bne.n	80103d2 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010368:	68fa      	ldr	r2, [r7, #12]
 801036a:	8b12      	ldrh	r2, [r2, #24]
 801036c:	4293      	cmp	r3, r2
 801036e:	d90e      	bls.n	801038e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010374:	68fa      	ldr	r2, [r7, #12]
 8010376:	8b12      	ldrh	r2, [r2, #24]
 8010378:	1a9a      	subs	r2, r3, r2
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	69db      	ldr	r3, [r3, #28]
 8010382:	68fa      	ldr	r2, [r7, #12]
 8010384:	8b12      	ldrh	r2, [r2, #24]
 8010386:	441a      	add	r2, r3
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	61da      	str	r2, [r3, #28]
 801038c:	e002      	b.n	8010394 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2200      	movs	r2, #0
 8010392:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010398:	2b00      	cmp	r3, #0
 801039a:	d004      	beq.n	80103a6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2201      	movs	r2, #1
 80103a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80103a4:	e006      	b.n	80103b4 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f892 	bl	80104d8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2204      	movs	r2, #4
 80103b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80103c8:	2300      	movs	r3, #0
 80103ca:	2200      	movs	r2, #0
 80103cc:	f002 f8c6 	bl	801255c <osMessageQueuePut>
      break;
 80103d0:	e014      	b.n	80103fc <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 80103d2:	7afb      	ldrb	r3, [r7, #11]
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	d111      	bne.n	80103fc <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2201      	movs	r2, #1
 80103dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2204      	movs	r2, #4
 80103e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80103f4:	2300      	movs	r3, #0
 80103f6:	2200      	movs	r2, #0
 80103f8:	f002 f8b0 	bl	801255c <osMessageQueuePut>
      break;
 80103fc:	bf00      	nop
  }
}
 80103fe:	bf00      	nop
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b086      	sub	sp, #24
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010414:	69db      	ldr	r3, [r3, #28]
 8010416:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010418:	2300      	movs	r3, #0
 801041a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010422:	2b03      	cmp	r3, #3
 8010424:	d002      	beq.n	801042c <CDC_ProcessReception+0x26>
 8010426:	2b04      	cmp	r3, #4
 8010428:	d00e      	beq.n	8010448 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 801042a:	e051      	b.n	80104d0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	6a19      	ldr	r1, [r3, #32]
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	8b5a      	ldrh	r2, [r3, #26]
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	7b1b      	ldrb	r3, [r3, #12]
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f001 fd45 	bl	8011ec8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	2204      	movs	r2, #4
 8010442:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010446:	e043      	b.n	80104d0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	7b1b      	ldrb	r3, [r3, #12]
 801044c:	4619      	mov	r1, r3
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f005 f9ae 	bl	80157b0 <USBH_LL_GetURBState>
 8010454:	4603      	mov	r3, r0
 8010456:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010458:	7cfb      	ldrb	r3, [r7, #19]
 801045a:	2b01      	cmp	r3, #1
 801045c:	d137      	bne.n	80104ce <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	7b1b      	ldrb	r3, [r3, #12]
 8010462:	4619      	mov	r1, r3
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f005 f911 	bl	801568c <USBH_LL_GetLastXferSize>
 801046a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010470:	68fa      	ldr	r2, [r7, #12]
 8010472:	429a      	cmp	r2, r3
 8010474:	d016      	beq.n	80104a4 <CDC_ProcessReception+0x9e>
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	8b5b      	ldrh	r3, [r3, #26]
 801047a:	461a      	mov	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	4293      	cmp	r3, r2
 8010480:	d910      	bls.n	80104a4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	1ad2      	subs	r2, r2, r3
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	6a1a      	ldr	r2, [r3, #32]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	441a      	add	r2, r3
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	2203      	movs	r2, #3
 801049e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80104a2:	e006      	b.n	80104b2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 f81d 	bl	80104ec <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2204      	movs	r2, #4
 80104b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80104c6:	2300      	movs	r3, #0
 80104c8:	2200      	movs	r2, #0
 80104ca:	f002 f847 	bl	801255c <osMessageQueuePut>
      break;
 80104ce:	bf00      	nop
  }
}
 80104d0:	bf00      	nop
 80104d2:	3718      	adds	r7, #24
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80104d8:	b480      	push	{r7}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80104e0:	bf00      	nop
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80104f4:	bf00      	nop
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010508:	bf00      	nop
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	4613      	mov	r3, r2
 8010520:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d101      	bne.n	801052c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010528:	2302      	movs	r3, #2
 801052a:	e044      	b.n	80105b6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	79fa      	ldrb	r2, [r7, #7]
 8010530:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2200      	movs	r2, #0
 8010538:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2200      	movs	r2, #0
 8010540:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f000 f841 	bl	80105cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2200      	movs	r2, #0
 801054e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2200      	movs	r2, #0
 8010556:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2200      	movs	r2, #0
 8010566:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d003      	beq.n	8010578 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8010578:	2200      	movs	r2, #0
 801057a:	2104      	movs	r1, #4
 801057c:	2010      	movs	r0, #16
 801057e:	f001 ff67 	bl	8012450 <osMessageQueueNew>
 8010582:	4602      	mov	r2, r0
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 801058a:	4b0d      	ldr	r3, [pc, #52]	; (80105c0 <USBH_Init+0xac>)
 801058c:	4a0d      	ldr	r2, [pc, #52]	; (80105c4 <USBH_Init+0xb0>)
 801058e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8010590:	4b0b      	ldr	r3, [pc, #44]	; (80105c0 <USBH_Init+0xac>)
 8010592:	2280      	movs	r2, #128	; 0x80
 8010594:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8010596:	4b0a      	ldr	r3, [pc, #40]	; (80105c0 <USBH_Init+0xac>)
 8010598:	2218      	movs	r2, #24
 801059a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 801059c:	4a08      	ldr	r2, [pc, #32]	; (80105c0 <USBH_Init+0xac>)
 801059e:	68f9      	ldr	r1, [r7, #12]
 80105a0:	4809      	ldr	r0, [pc, #36]	; (80105c8 <USBH_Init+0xb4>)
 80105a2:	f001 fdb3 	bl	801210c <osThreadNew>
 80105a6:	4602      	mov	r2, r0
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	f004 ffba 	bl	8015528 <USBH_LL_Init>

  return USBH_OK;
 80105b4:	2300      	movs	r3, #0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3710      	adds	r7, #16
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	2000bfa8 	.word	0x2000bfa8
 80105c4:	08016fe4 	.word	0x08016fe4
 80105c8:	08011235 	.word	0x08011235

080105cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80105d4:	2300      	movs	r3, #0
 80105d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80105d8:	2300      	movs	r3, #0
 80105da:	60fb      	str	r3, [r7, #12]
 80105dc:	e009      	b.n	80105f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	33e0      	adds	r3, #224	; 0xe0
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	4413      	add	r3, r2
 80105e8:	2200      	movs	r2, #0
 80105ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	3301      	adds	r3, #1
 80105f0:	60fb      	str	r3, [r7, #12]
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2b0e      	cmp	r3, #14
 80105f6:	d9f2      	bls.n	80105de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80105f8:	2300      	movs	r3, #0
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	e009      	b.n	8010612 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	4413      	add	r3, r2
 8010604:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010608:	2200      	movs	r2, #0
 801060a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	3301      	adds	r3, #1
 8010610:	60fb      	str	r3, [r7, #12]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010618:	d3f1      	bcc.n	80105fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2201      	movs	r2, #1
 801062a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2201      	movs	r2, #1
 8010638:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2240      	movs	r2, #64	; 0x40
 801063e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2201      	movs	r2, #1
 8010652:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2200      	movs	r2, #0
 8010662:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8010666:	2300      	movs	r3, #0
}
 8010668:	4618      	mov	r0, r3
 801066a:	3714      	adds	r7, #20
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010674:	b480      	push	{r7}
 8010676:	b085      	sub	sp, #20
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d016      	beq.n	80106b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801068e:	2b00      	cmp	r3, #0
 8010690:	d10e      	bne.n	80106b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010698:	1c59      	adds	r1, r3, #1
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	33de      	adds	r3, #222	; 0xde
 80106a4:	6839      	ldr	r1, [r7, #0]
 80106a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	73fb      	strb	r3, [r7, #15]
 80106ae:	e004      	b.n	80106ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80106b0:	2302      	movs	r3, #2
 80106b2:	73fb      	strb	r3, [r7, #15]
 80106b4:	e001      	b.n	80106ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80106b6:	2302      	movs	r3, #2
 80106b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80106ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3714      	adds	r7, #20
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	460b      	mov	r3, r1
 80106d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80106d4:	2300      	movs	r3, #0
 80106d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80106de:	78fa      	ldrb	r2, [r7, #3]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d204      	bcs.n	80106ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	78fa      	ldrb	r2, [r7, #3]
 80106e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80106ec:	e001      	b.n	80106f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80106ee:	2302      	movs	r3, #2
 80106f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3714      	adds	r7, #20
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010700:	b480      	push	{r7}
 8010702:	b087      	sub	sp, #28
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	4608      	mov	r0, r1
 801070a:	4611      	mov	r1, r2
 801070c:	461a      	mov	r2, r3
 801070e:	4603      	mov	r3, r0
 8010710:	70fb      	strb	r3, [r7, #3]
 8010712:	460b      	mov	r3, r1
 8010714:	70bb      	strb	r3, [r7, #2]
 8010716:	4613      	mov	r3, r2
 8010718:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 801071a:	2300      	movs	r3, #0
 801071c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 801071e:	2300      	movs	r3, #0
 8010720:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010728:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801072a:	e025      	b.n	8010778 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801072c:	7dfb      	ldrb	r3, [r7, #23]
 801072e:	221a      	movs	r2, #26
 8010730:	fb02 f303 	mul.w	r3, r2, r3
 8010734:	3308      	adds	r3, #8
 8010736:	68fa      	ldr	r2, [r7, #12]
 8010738:	4413      	add	r3, r2
 801073a:	3302      	adds	r3, #2
 801073c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	795b      	ldrb	r3, [r3, #5]
 8010742:	78fa      	ldrb	r2, [r7, #3]
 8010744:	429a      	cmp	r2, r3
 8010746:	d002      	beq.n	801074e <USBH_FindInterface+0x4e>
 8010748:	78fb      	ldrb	r3, [r7, #3]
 801074a:	2bff      	cmp	r3, #255	; 0xff
 801074c:	d111      	bne.n	8010772 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010752:	78ba      	ldrb	r2, [r7, #2]
 8010754:	429a      	cmp	r2, r3
 8010756:	d002      	beq.n	801075e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010758:	78bb      	ldrb	r3, [r7, #2]
 801075a:	2bff      	cmp	r3, #255	; 0xff
 801075c:	d109      	bne.n	8010772 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010762:	787a      	ldrb	r2, [r7, #1]
 8010764:	429a      	cmp	r2, r3
 8010766:	d002      	beq.n	801076e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010768:	787b      	ldrb	r3, [r7, #1]
 801076a:	2bff      	cmp	r3, #255	; 0xff
 801076c:	d101      	bne.n	8010772 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801076e:	7dfb      	ldrb	r3, [r7, #23]
 8010770:	e006      	b.n	8010780 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010772:	7dfb      	ldrb	r3, [r7, #23]
 8010774:	3301      	adds	r3, #1
 8010776:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010778:	7dfb      	ldrb	r3, [r7, #23]
 801077a:	2b01      	cmp	r3, #1
 801077c:	d9d6      	bls.n	801072c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801077e:	23ff      	movs	r3, #255	; 0xff
}
 8010780:	4618      	mov	r0, r3
 8010782:	371c      	adds	r7, #28
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f004 ff03 	bl	80155a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 801079a:	2101      	movs	r1, #1
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f005 f81a 	bl	80157d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80107a2:	2300      	movs	r3, #0
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b088      	sub	sp, #32
 80107b0:	af04      	add	r7, sp, #16
 80107b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80107b4:	2302      	movs	r3, #2
 80107b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80107b8:	2300      	movs	r3, #0
 80107ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d102      	bne.n	80107ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2203      	movs	r2, #3
 80107cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	2b0b      	cmp	r3, #11
 80107d6:	f200 823c 	bhi.w	8010c52 <USBH_Process+0x4a6>
 80107da:	a201      	add	r2, pc, #4	; (adr r2, 80107e0 <USBH_Process+0x34>)
 80107dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107e0:	08010811 	.word	0x08010811
 80107e4:	0801085f 	.word	0x0801085f
 80107e8:	080108e3 	.word	0x080108e3
 80107ec:	08010bd1 	.word	0x08010bd1
 80107f0:	08010c53 	.word	0x08010c53
 80107f4:	080109a3 	.word	0x080109a3
 80107f8:	08010b5b 	.word	0x08010b5b
 80107fc:	080109f5 	.word	0x080109f5
 8010800:	08010a31 	.word	0x08010a31
 8010804:	08010a6b 	.word	0x08010a6b
 8010808:	08010ab3 	.word	0x08010ab3
 801080c:	08010bb9 	.word	0x08010bb9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8010816:	b2db      	uxtb	r3, r3
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 821c 	beq.w	8010c56 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2201      	movs	r2, #1
 8010822:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010824:	20c8      	movs	r0, #200	; 0xc8
 8010826:	f005 f820 	bl	801586a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f004 ff13 	bl	8015656 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2200      	movs	r2, #0
 801083c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2201      	movs	r2, #1
 8010844:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010854:	2300      	movs	r3, #0
 8010856:	2200      	movs	r2, #0
 8010858:	f001 fe80 	bl	801255c <osMessageQueuePut>
#endif
#endif
      }
      break;
 801085c:	e1fb      	b.n	8010c56 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8010864:	2b01      	cmp	r3, #1
 8010866:	d107      	bne.n	8010878 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2202      	movs	r2, #2
 8010874:	701a      	strb	r2, [r3, #0]
 8010876:	e025      	b.n	80108c4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801087e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010882:	d914      	bls.n	80108ae <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801088a:	3301      	adds	r3, #1
 801088c:	b2da      	uxtb	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801089a:	2b03      	cmp	r3, #3
 801089c:	d903      	bls.n	80108a6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	220d      	movs	r2, #13
 80108a2:	701a      	strb	r2, [r3, #0]
 80108a4:	e00e      	b.n	80108c4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2200      	movs	r2, #0
 80108aa:	701a      	strb	r2, [r3, #0]
 80108ac:	e00a      	b.n	80108c4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80108b4:	f103 020a 	add.w	r2, r3, #10
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80108be:	200a      	movs	r0, #10
 80108c0:	f004 ffd3 	bl	801586a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2201      	movs	r2, #1
 80108c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80108d8:	2300      	movs	r3, #0
 80108da:	2200      	movs	r2, #0
 80108dc:	f001 fe3e 	bl	801255c <osMessageQueuePut>
#endif
#endif
      break;
 80108e0:	e1c0      	b.n	8010c64 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d005      	beq.n	80108f8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80108f2:	2104      	movs	r1, #4
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80108f8:	2064      	movs	r0, #100	; 0x64
 80108fa:	f004 ffb6 	bl	801586a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f004 fe84 	bl	801560c <USBH_LL_GetSpeed>
 8010904:	4603      	mov	r3, r0
 8010906:	461a      	mov	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2205      	movs	r2, #5
 8010912:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8010914:	2100      	movs	r1, #0
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f001 fb23 	bl	8011f62 <USBH_AllocPipe>
 801091c:	4603      	mov	r3, r0
 801091e:	461a      	mov	r2, r3
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8010924:	2180      	movs	r1, #128	; 0x80
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f001 fb1b 	bl	8011f62 <USBH_AllocPipe>
 801092c:	4603      	mov	r3, r0
 801092e:	461a      	mov	r2, r3
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	7919      	ldrb	r1, [r3, #4]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010948:	b292      	uxth	r2, r2
 801094a:	9202      	str	r2, [sp, #8]
 801094c:	2200      	movs	r2, #0
 801094e:	9201      	str	r2, [sp, #4]
 8010950:	9300      	str	r3, [sp, #0]
 8010952:	4603      	mov	r3, r0
 8010954:	2280      	movs	r2, #128	; 0x80
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f001 fad4 	bl	8011f04 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	7959      	ldrb	r1, [r3, #5]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010970:	b292      	uxth	r2, r2
 8010972:	9202      	str	r2, [sp, #8]
 8010974:	2200      	movs	r2, #0
 8010976:	9201      	str	r2, [sp, #4]
 8010978:	9300      	str	r3, [sp, #0]
 801097a:	4603      	mov	r3, r0
 801097c:	2200      	movs	r2, #0
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f001 fac0 	bl	8011f04 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2201      	movs	r2, #1
 8010988:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010998:	2300      	movs	r3, #0
 801099a:	2200      	movs	r2, #0
 801099c:	f001 fdde 	bl	801255c <osMessageQueuePut>
#endif
#endif
      break;
 80109a0:	e160      	b.n	8010c64 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 f964 	bl	8010c70 <USBH_HandleEnum>
 80109a8:	4603      	mov	r3, r0
 80109aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80109ac:	7bbb      	ldrb	r3, [r7, #14]
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f040 8152 	bne.w	8010c5a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2200      	movs	r2, #0
 80109ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d103      	bne.n	80109d0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2208      	movs	r2, #8
 80109cc:	701a      	strb	r2, [r3, #0]
 80109ce:	e002      	b.n	80109d6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2207      	movs	r2, #7
 80109d4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2205      	movs	r2, #5
 80109da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80109ea:	2300      	movs	r3, #0
 80109ec:	2200      	movs	r2, #0
 80109ee:	f001 fdb5 	bl	801255c <osMessageQueuePut>
#endif
#endif
      }
      break;
 80109f2:	e132      	b.n	8010c5a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f000 812f 	beq.w	8010c5e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010a06:	2101      	movs	r1, #1
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2208      	movs	r2, #8
 8010a10:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2205      	movs	r2, #5
 8010a16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010a26:	2300      	movs	r3, #0
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f001 fd97 	bl	801255c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8010a2e:	e116      	b.n	8010c5e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fcf8 	bl	8011430 <USBH_SetCfg>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d102      	bne.n	8010a4c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2209      	movs	r2, #9
 8010a4a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010a60:	2300      	movs	r3, #0
 8010a62:	2200      	movs	r2, #0
 8010a64:	f001 fd7a 	bl	801255c <osMessageQueuePut>
#endif
#endif
      break;
 8010a68:	e0fc      	b.n	8010c64 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8010a70:	f003 0320 	and.w	r3, r3, #32
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d00a      	beq.n	8010a8e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8010a78:	2101      	movs	r1, #1
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 fcfb 	bl	8011476 <USBH_SetFeature>
 8010a80:	4603      	mov	r3, r0
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d106      	bne.n	8010a94 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	220a      	movs	r2, #10
 8010a8a:	701a      	strb	r2, [r3, #0]
 8010a8c:	e002      	b.n	8010a94 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	220a      	movs	r2, #10
 8010a92:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2201      	movs	r2, #1
 8010a98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f001 fd56 	bl	801255c <osMessageQueuePut>
#endif
#endif
      break;
 8010ab0:	e0d8      	b.n	8010c64 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d03f      	beq.n	8010b3c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	73fb      	strb	r3, [r7, #15]
 8010ac8:	e016      	b.n	8010af8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8010aca:	7bfa      	ldrb	r2, [r7, #15]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	32de      	adds	r2, #222	; 0xde
 8010ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ad4:	791a      	ldrb	r2, [r3, #4]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d108      	bne.n	8010af2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8010ae0:	7bfa      	ldrb	r2, [r7, #15]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	32de      	adds	r2, #222	; 0xde
 8010ae6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8010af0:	e005      	b.n	8010afe <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010af2:	7bfb      	ldrb	r3, [r7, #15]
 8010af4:	3301      	adds	r3, #1
 8010af6:	73fb      	strb	r3, [r7, #15]
 8010af8:	7bfb      	ldrb	r3, [r7, #15]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d0e5      	beq.n	8010aca <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d016      	beq.n	8010b36 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010b0e:	689b      	ldr	r3, [r3, #8]
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	4798      	blx	r3
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d109      	bne.n	8010b2e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2206      	movs	r2, #6
 8010b1e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010b26:	2103      	movs	r1, #3
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	4798      	blx	r3
 8010b2c:	e006      	b.n	8010b3c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	220d      	movs	r2, #13
 8010b32:	701a      	strb	r2, [r3, #0]
 8010b34:	e002      	b.n	8010b3c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	220d      	movs	r2, #13
 8010b3a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2205      	movs	r2, #5
 8010b40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010b50:	2300      	movs	r3, #0
 8010b52:	2200      	movs	r2, #0
 8010b54:	f001 fd02 	bl	801255c <osMessageQueuePut>
#endif
#endif
      break;
 8010b58:	e084      	b.n	8010c64 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d017      	beq.n	8010b94 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010b6a:	691b      	ldr	r3, [r3, #16]
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	4798      	blx	r3
 8010b70:	4603      	mov	r3, r0
 8010b72:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010b74:	7bbb      	ldrb	r3, [r7, #14]
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d103      	bne.n	8010b84 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	220b      	movs	r2, #11
 8010b80:	701a      	strb	r2, [r3, #0]
 8010b82:	e00a      	b.n	8010b9a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8010b84:	7bbb      	ldrb	r3, [r7, #14]
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	2b02      	cmp	r3, #2
 8010b8a:	d106      	bne.n	8010b9a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	220d      	movs	r2, #13
 8010b90:	701a      	strb	r2, [r3, #0]
 8010b92:	e002      	b.n	8010b9a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	220d      	movs	r2, #13
 8010b98:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2205      	movs	r2, #5
 8010b9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010bae:	2300      	movs	r3, #0
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f001 fcd3 	bl	801255c <osMessageQueuePut>
#endif
#endif
      break;
 8010bb6:	e055      	b.n	8010c64 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d04f      	beq.n	8010c62 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010bc8:	695b      	ldr	r3, [r3, #20]
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	4798      	blx	r3
      }
      break;
 8010bce:	e048      	b.n	8010c62 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f7ff fcf7 	bl	80105cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d009      	beq.n	8010bfc <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d005      	beq.n	8010c12 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010c0c:	2105      	movs	r1, #5
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d107      	bne.n	8010c2e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff fdb0 	bl	801078c <USBH_Start>
 8010c2c:	e002      	b.n	8010c34 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f004 fcb6 	bl	80155a0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2201      	movs	r2, #1
 8010c38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010c48:	2300      	movs	r3, #0
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f001 fc86 	bl	801255c <osMessageQueuePut>
#endif
#endif
      break;
 8010c50:	e008      	b.n	8010c64 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8010c52:	bf00      	nop
 8010c54:	e006      	b.n	8010c64 <USBH_Process+0x4b8>
      break;
 8010c56:	bf00      	nop
 8010c58:	e004      	b.n	8010c64 <USBH_Process+0x4b8>
      break;
 8010c5a:	bf00      	nop
 8010c5c:	e002      	b.n	8010c64 <USBH_Process+0x4b8>
    break;
 8010c5e:	bf00      	nop
 8010c60:	e000      	b.n	8010c64 <USBH_Process+0x4b8>
      break;
 8010c62:	bf00      	nop
  }
  return USBH_OK;
 8010c64:	2300      	movs	r3, #0
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3710      	adds	r7, #16
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop

08010c70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b088      	sub	sp, #32
 8010c74:	af04      	add	r7, sp, #16
 8010c76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8010c78:	2301      	movs	r3, #1
 8010c7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	785b      	ldrb	r3, [r3, #1]
 8010c84:	2b07      	cmp	r3, #7
 8010c86:	f200 8208 	bhi.w	801109a <USBH_HandleEnum+0x42a>
 8010c8a:	a201      	add	r2, pc, #4	; (adr r2, 8010c90 <USBH_HandleEnum+0x20>)
 8010c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c90:	08010cb1 	.word	0x08010cb1
 8010c94:	08010d6f 	.word	0x08010d6f
 8010c98:	08010dd9 	.word	0x08010dd9
 8010c9c:	08010e67 	.word	0x08010e67
 8010ca0:	08010ed1 	.word	0x08010ed1
 8010ca4:	08010f41 	.word	0x08010f41
 8010ca8:	08010fdd 	.word	0x08010fdd
 8010cac:	0801105b 	.word	0x0801105b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8010cb0:	2108      	movs	r1, #8
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f000 faec 	bl	8011290 <USBH_Get_DevDesc>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010cbc:	7bbb      	ldrb	r3, [r7, #14]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d130      	bne.n	8010d24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	7919      	ldrb	r1, [r3, #4]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010ce6:	b292      	uxth	r2, r2
 8010ce8:	9202      	str	r2, [sp, #8]
 8010cea:	2200      	movs	r2, #0
 8010cec:	9201      	str	r2, [sp, #4]
 8010cee:	9300      	str	r3, [sp, #0]
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2280      	movs	r2, #128	; 0x80
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f001 f905 	bl	8011f04 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	7959      	ldrb	r1, [r3, #5]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010d0a:	687a      	ldr	r2, [r7, #4]
 8010d0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010d0e:	b292      	uxth	r2, r2
 8010d10:	9202      	str	r2, [sp, #8]
 8010d12:	2200      	movs	r2, #0
 8010d14:	9201      	str	r2, [sp, #4]
 8010d16:	9300      	str	r3, [sp, #0]
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f001 f8f1 	bl	8011f04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010d22:	e1bc      	b.n	801109e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010d24:	7bbb      	ldrb	r3, [r7, #14]
 8010d26:	2b03      	cmp	r3, #3
 8010d28:	f040 81b9 	bne.w	801109e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d32:	3301      	adds	r3, #1
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d42:	2b03      	cmp	r3, #3
 8010d44:	d903      	bls.n	8010d4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	220d      	movs	r2, #13
 8010d4a:	701a      	strb	r2, [r3, #0]
      break;
 8010d4c:	e1a7      	b.n	801109e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	795b      	ldrb	r3, [r3, #5]
 8010d52:	4619      	mov	r1, r3
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f001 f925 	bl	8011fa4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	791b      	ldrb	r3, [r3, #4]
 8010d5e:	4619      	mov	r1, r3
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f001 f91f 	bl	8011fa4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	701a      	strb	r2, [r3, #0]
      break;
 8010d6c:	e197      	b.n	801109e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8010d6e:	2112      	movs	r1, #18
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f000 fa8d 	bl	8011290 <USBH_Get_DevDesc>
 8010d76:	4603      	mov	r3, r0
 8010d78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010d7a:	7bbb      	ldrb	r3, [r7, #14]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d103      	bne.n	8010d88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2202      	movs	r2, #2
 8010d84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010d86:	e18c      	b.n	80110a2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010d88:	7bbb      	ldrb	r3, [r7, #14]
 8010d8a:	2b03      	cmp	r3, #3
 8010d8c:	f040 8189 	bne.w	80110a2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d96:	3301      	adds	r3, #1
 8010d98:	b2da      	uxtb	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010da6:	2b03      	cmp	r3, #3
 8010da8:	d903      	bls.n	8010db2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	220d      	movs	r2, #13
 8010dae:	701a      	strb	r2, [r3, #0]
      break;
 8010db0:	e177      	b.n	80110a2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	795b      	ldrb	r3, [r3, #5]
 8010db6:	4619      	mov	r1, r3
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f001 f8f3 	bl	8011fa4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	791b      	ldrb	r3, [r3, #4]
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f001 f8ed 	bl	8011fa4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	701a      	strb	r2, [r3, #0]
      break;
 8010dd6:	e164      	b.n	80110a2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010dd8:	2101      	movs	r1, #1
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 fb04 	bl	80113e8 <USBH_SetAddress>
 8010de0:	4603      	mov	r3, r0
 8010de2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010de4:	7bbb      	ldrb	r3, [r7, #14]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d132      	bne.n	8010e50 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8010dea:	2002      	movs	r0, #2
 8010dec:	f004 fd3d 	bl	801586a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2201      	movs	r2, #1
 8010df4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2203      	movs	r2, #3
 8010dfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	7919      	ldrb	r1, [r3, #4]
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010e12:	b292      	uxth	r2, r2
 8010e14:	9202      	str	r2, [sp, #8]
 8010e16:	2200      	movs	r2, #0
 8010e18:	9201      	str	r2, [sp, #4]
 8010e1a:	9300      	str	r3, [sp, #0]
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2280      	movs	r2, #128	; 0x80
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f001 f86f 	bl	8011f04 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	7959      	ldrb	r1, [r3, #5]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010e3a:	b292      	uxth	r2, r2
 8010e3c:	9202      	str	r2, [sp, #8]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	9201      	str	r2, [sp, #4]
 8010e42:	9300      	str	r3, [sp, #0]
 8010e44:	4603      	mov	r3, r0
 8010e46:	2200      	movs	r2, #0
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f001 f85b 	bl	8011f04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010e4e:	e12a      	b.n	80110a6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010e50:	7bbb      	ldrb	r3, [r7, #14]
 8010e52:	2b03      	cmp	r3, #3
 8010e54:	f040 8127 	bne.w	80110a6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	220d      	movs	r2, #13
 8010e5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2200      	movs	r2, #0
 8010e62:	705a      	strb	r2, [r3, #1]
      break;
 8010e64:	e11f      	b.n	80110a6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010e66:	2109      	movs	r1, #9
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 fa39 	bl	80112e0 <USBH_Get_CfgDesc>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010e72:	7bbb      	ldrb	r3, [r7, #14]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d103      	bne.n	8010e80 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2204      	movs	r2, #4
 8010e7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010e7e:	e114      	b.n	80110aa <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010e80:	7bbb      	ldrb	r3, [r7, #14]
 8010e82:	2b03      	cmp	r3, #3
 8010e84:	f040 8111 	bne.w	80110aa <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010e8e:	3301      	adds	r3, #1
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010e9e:	2b03      	cmp	r3, #3
 8010ea0:	d903      	bls.n	8010eaa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	220d      	movs	r2, #13
 8010ea6:	701a      	strb	r2, [r3, #0]
      break;
 8010ea8:	e0ff      	b.n	80110aa <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	795b      	ldrb	r3, [r3, #5]
 8010eae:	4619      	mov	r1, r3
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f001 f877 	bl	8011fa4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	791b      	ldrb	r3, [r3, #4]
 8010eba:	4619      	mov	r1, r3
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f001 f871 	bl	8011fa4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	701a      	strb	r2, [r3, #0]
      break;
 8010ece:	e0ec      	b.n	80110aa <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8010ed6:	4619      	mov	r1, r3
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 fa01 	bl	80112e0 <USBH_Get_CfgDesc>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010ee2:	7bbb      	ldrb	r3, [r7, #14]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d103      	bne.n	8010ef0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2205      	movs	r2, #5
 8010eec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010eee:	e0de      	b.n	80110ae <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010ef0:	7bbb      	ldrb	r3, [r7, #14]
 8010ef2:	2b03      	cmp	r3, #3
 8010ef4:	f040 80db 	bne.w	80110ae <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010efe:	3301      	adds	r3, #1
 8010f00:	b2da      	uxtb	r2, r3
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010f0e:	2b03      	cmp	r3, #3
 8010f10:	d903      	bls.n	8010f1a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	220d      	movs	r2, #13
 8010f16:	701a      	strb	r2, [r3, #0]
      break;
 8010f18:	e0c9      	b.n	80110ae <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	795b      	ldrb	r3, [r3, #5]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f001 f83f 	bl	8011fa4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	791b      	ldrb	r3, [r3, #4]
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f001 f839 	bl	8011fa4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	701a      	strb	r2, [r3, #0]
      break;
 8010f3e:	e0b6      	b.n	80110ae <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d036      	beq.n	8010fb8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010f56:	23ff      	movs	r3, #255	; 0xff
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 f9e5 	bl	8011328 <USBH_Get_StringDesc>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010f62:	7bbb      	ldrb	r3, [r7, #14]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d111      	bne.n	8010f8c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2206      	movs	r2, #6
 8010f6c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2205      	movs	r2, #5
 8010f72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010f82:	2300      	movs	r3, #0
 8010f84:	2200      	movs	r2, #0
 8010f86:	f001 fae9 	bl	801255c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8010f8a:	e092      	b.n	80110b2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010f8c:	7bbb      	ldrb	r3, [r7, #14]
 8010f8e:	2b03      	cmp	r3, #3
 8010f90:	f040 808f 	bne.w	80110b2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2206      	movs	r2, #6
 8010f98:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2205      	movs	r2, #5
 8010f9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010fae:	2300      	movs	r3, #0
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f001 fad3 	bl	801255c <osMessageQueuePut>
      break;
 8010fb6:	e07c      	b.n	80110b2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2206      	movs	r2, #6
 8010fbc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2205      	movs	r2, #5
 8010fc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f001 fac1 	bl	801255c <osMessageQueuePut>
      break;
 8010fda:	e06a      	b.n	80110b2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d027      	beq.n	8011036 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010ff2:	23ff      	movs	r3, #255	; 0xff
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 f997 	bl	8011328 <USBH_Get_StringDesc>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010ffe:	7bbb      	ldrb	r3, [r7, #14]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d103      	bne.n	801100c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2207      	movs	r2, #7
 8011008:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 801100a:	e054      	b.n	80110b6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801100c:	7bbb      	ldrb	r3, [r7, #14]
 801100e:	2b03      	cmp	r3, #3
 8011010:	d151      	bne.n	80110b6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2207      	movs	r2, #7
 8011016:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2205      	movs	r2, #5
 801101c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801102c:	2300      	movs	r3, #0
 801102e:	2200      	movs	r2, #0
 8011030:	f001 fa94 	bl	801255c <osMessageQueuePut>
      break;
 8011034:	e03f      	b.n	80110b6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2207      	movs	r2, #7
 801103a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2205      	movs	r2, #5
 8011040:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011050:	2300      	movs	r3, #0
 8011052:	2200      	movs	r2, #0
 8011054:	f001 fa82 	bl	801255c <osMessageQueuePut>
      break;
 8011058:	e02d      	b.n	80110b6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8011060:	2b00      	cmp	r3, #0
 8011062:	d017      	beq.n	8011094 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8011070:	23ff      	movs	r3, #255	; 0xff
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f000 f958 	bl	8011328 <USBH_Get_StringDesc>
 8011078:	4603      	mov	r3, r0
 801107a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801107c:	7bbb      	ldrb	r3, [r7, #14]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d102      	bne.n	8011088 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8011082:	2300      	movs	r3, #0
 8011084:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8011086:	e018      	b.n	80110ba <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011088:	7bbb      	ldrb	r3, [r7, #14]
 801108a:	2b03      	cmp	r3, #3
 801108c:	d115      	bne.n	80110ba <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 801108e:	2300      	movs	r3, #0
 8011090:	73fb      	strb	r3, [r7, #15]
      break;
 8011092:	e012      	b.n	80110ba <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	73fb      	strb	r3, [r7, #15]
      break;
 8011098:	e00f      	b.n	80110ba <USBH_HandleEnum+0x44a>

    default:
      break;
 801109a:	bf00      	nop
 801109c:	e00e      	b.n	80110bc <USBH_HandleEnum+0x44c>
      break;
 801109e:	bf00      	nop
 80110a0:	e00c      	b.n	80110bc <USBH_HandleEnum+0x44c>
      break;
 80110a2:	bf00      	nop
 80110a4:	e00a      	b.n	80110bc <USBH_HandleEnum+0x44c>
      break;
 80110a6:	bf00      	nop
 80110a8:	e008      	b.n	80110bc <USBH_HandleEnum+0x44c>
      break;
 80110aa:	bf00      	nop
 80110ac:	e006      	b.n	80110bc <USBH_HandleEnum+0x44c>
      break;
 80110ae:	bf00      	nop
 80110b0:	e004      	b.n	80110bc <USBH_HandleEnum+0x44c>
      break;
 80110b2:	bf00      	nop
 80110b4:	e002      	b.n	80110bc <USBH_HandleEnum+0x44c>
      break;
 80110b6:	bf00      	nop
 80110b8:	e000      	b.n	80110bc <USBH_HandleEnum+0x44c>
      break;
 80110ba:	bf00      	nop
  }
  return Status;
 80110bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3710      	adds	r7, #16
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop

080110c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	683a      	ldr	r2, [r7, #0]
 80110d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80110da:	bf00      	nop
 80110dc:	370c      	adds	r7, #12
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr

080110e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b082      	sub	sp, #8
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80110f4:	1c5a      	adds	r2, r3, #1
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	f000 f804 	bl	801110a <USBH_HandleSof>
}
 8011102:	bf00      	nop
 8011104:	3708      	adds	r7, #8
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}

0801110a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801110a:	b580      	push	{r7, lr}
 801110c:	b082      	sub	sp, #8
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	b2db      	uxtb	r3, r3
 8011118:	2b0b      	cmp	r3, #11
 801111a:	d10a      	bne.n	8011132 <USBH_HandleSof+0x28>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011122:	2b00      	cmp	r3, #0
 8011124:	d005      	beq.n	8011132 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801112c:	699b      	ldr	r3, [r3, #24]
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	4798      	blx	r3
  }
}
 8011132:	bf00      	nop
 8011134:	3708      	adds	r7, #8
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}

0801113a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801113a:	b580      	push	{r7, lr}
 801113c:	b082      	sub	sp, #8
 801113e:	af00      	add	r7, sp, #0
 8011140:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2201      	movs	r2, #1
 8011146:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2201      	movs	r2, #1
 801114e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801115e:	2300      	movs	r3, #0
 8011160:	2200      	movs	r2, #0
 8011162:	f001 f9fb 	bl	801255c <osMessageQueuePut>
#endif
#endif

  return;
 8011166:	bf00      	nop
}
 8011168:	3708      	adds	r7, #8
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}

0801116e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801116e:	b480      	push	{r7}
 8011170:	b083      	sub	sp, #12
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2200      	movs	r2, #0
 801117a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801117e:	bf00      	nop
}
 8011180:	370c      	adds	r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr

0801118a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b082      	sub	sp, #8
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2201      	movs	r2, #1
 8011196:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2200      	movs	r2, #0
 801119e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2201      	movs	r2, #1
 80111ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80111be:	2300      	movs	r3, #0
 80111c0:	2200      	movs	r2, #0
 80111c2:	f001 f9cb 	bl	801255c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80111c6:	2300      	movs	r3, #0
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2201      	movs	r2, #1
 80111dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2200      	movs	r2, #0
 80111e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f004 f9f0 	bl	80155d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	791b      	ldrb	r3, [r3, #4]
 80111fa:	4619      	mov	r1, r3
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 fed1 	bl	8011fa4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	795b      	ldrb	r3, [r3, #5]
 8011206:	4619      	mov	r1, r3
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f000 fecb 	bl	8011fa4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2201      	movs	r2, #1
 8011212:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011222:	2300      	movs	r3, #0
 8011224:	2200      	movs	r2, #0
 8011226:	f001 f999 	bl	801255c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 801122a:	2300      	movs	r3, #0
}
 801122c:	4618      	mov	r0, r3
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8011248:	f04f 33ff 	mov.w	r3, #4294967295
 801124c:	2200      	movs	r2, #0
 801124e:	f001 f9f9 	bl	8012644 <osMessageQueueGet>
 8011252:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d1f0      	bne.n	801123c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f7ff faa6 	bl	80107ac <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8011260:	e7ec      	b.n	801123c <USBH_Process_OS+0x8>

08011262 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8011262:	b580      	push	{r7, lr}
 8011264:	b082      	sub	sp, #8
 8011266:	af00      	add	r7, sp, #0
 8011268:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2201      	movs	r2, #1
 801126e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801127e:	2300      	movs	r3, #0
 8011280:	2200      	movs	r2, #0
 8011282:	f001 f96b 	bl	801255c <osMessageQueuePut>
#endif

  return USBH_OK;
 8011286:	2300      	movs	r3, #0
}
 8011288:	4618      	mov	r0, r3
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af02      	add	r7, sp, #8
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	460b      	mov	r3, r1
 801129a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80112a2:	78fb      	ldrb	r3, [r7, #3]
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	9300      	str	r3, [sp, #0]
 80112a8:	4613      	mov	r3, r2
 80112aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80112ae:	2100      	movs	r1, #0
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f000 f864 	bl	801137e <USBH_GetDescriptor>
 80112b6:	4603      	mov	r3, r0
 80112b8:	73fb      	strb	r3, [r7, #15]
 80112ba:	7bfb      	ldrb	r3, [r7, #15]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10a      	bne.n	80112d6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80112cc:	78fa      	ldrb	r2, [r7, #3]
 80112ce:	b292      	uxth	r2, r2
 80112d0:	4619      	mov	r1, r3
 80112d2:	f000 f918 	bl	8011506 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80112d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3710      	adds	r7, #16
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af02      	add	r7, sp, #8
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	460b      	mov	r3, r1
 80112ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	331c      	adds	r3, #28
 80112f0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80112f2:	887b      	ldrh	r3, [r7, #2]
 80112f4:	9300      	str	r3, [sp, #0]
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80112fc:	2100      	movs	r1, #0
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f000 f83d 	bl	801137e <USBH_GetDescriptor>
 8011304:	4603      	mov	r3, r0
 8011306:	72fb      	strb	r3, [r7, #11]
 8011308:	7afb      	ldrb	r3, [r7, #11]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d107      	bne.n	801131e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011314:	887a      	ldrh	r2, [r7, #2]
 8011316:	68f9      	ldr	r1, [r7, #12]
 8011318:	4618      	mov	r0, r3
 801131a:	f000 f964 	bl	80115e6 <USBH_ParseCfgDesc>
  }

  return status;
 801131e:	7afb      	ldrb	r3, [r7, #11]
}
 8011320:	4618      	mov	r0, r3
 8011322:	3710      	adds	r7, #16
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b088      	sub	sp, #32
 801132c:	af02      	add	r7, sp, #8
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	607a      	str	r2, [r7, #4]
 8011332:	461a      	mov	r2, r3
 8011334:	460b      	mov	r3, r1
 8011336:	72fb      	strb	r3, [r7, #11]
 8011338:	4613      	mov	r3, r2
 801133a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 801133c:	7afb      	ldrb	r3, [r7, #11]
 801133e:	b29b      	uxth	r3, r3
 8011340:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011344:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 801134c:	893b      	ldrh	r3, [r7, #8]
 801134e:	9300      	str	r3, [sp, #0]
 8011350:	460b      	mov	r3, r1
 8011352:	2100      	movs	r1, #0
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f000 f812 	bl	801137e <USBH_GetDescriptor>
 801135a:	4603      	mov	r3, r0
 801135c:	75fb      	strb	r3, [r7, #23]
 801135e:	7dfb      	ldrb	r3, [r7, #23]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d107      	bne.n	8011374 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801136a:	893a      	ldrh	r2, [r7, #8]
 801136c:	6879      	ldr	r1, [r7, #4]
 801136e:	4618      	mov	r0, r3
 8011370:	f000 fa37 	bl	80117e2 <USBH_ParseStringDesc>
  }

  return status;
 8011374:	7dfb      	ldrb	r3, [r7, #23]
}
 8011376:	4618      	mov	r0, r3
 8011378:	3718      	adds	r7, #24
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}

0801137e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801137e:	b580      	push	{r7, lr}
 8011380:	b084      	sub	sp, #16
 8011382:	af00      	add	r7, sp, #0
 8011384:	60f8      	str	r0, [r7, #12]
 8011386:	607b      	str	r3, [r7, #4]
 8011388:	460b      	mov	r3, r1
 801138a:	72fb      	strb	r3, [r7, #11]
 801138c:	4613      	mov	r3, r2
 801138e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	789b      	ldrb	r3, [r3, #2]
 8011394:	2b01      	cmp	r3, #1
 8011396:	d11c      	bne.n	80113d2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8011398:	7afb      	ldrb	r3, [r7, #11]
 801139a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801139e:	b2da      	uxtb	r2, r3
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2206      	movs	r2, #6
 80113a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	893a      	ldrh	r2, [r7, #8]
 80113ae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80113b0:	893b      	ldrh	r3, [r7, #8]
 80113b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80113b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113ba:	d104      	bne.n	80113c6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f240 4209 	movw	r2, #1033	; 0x409
 80113c2:	829a      	strh	r2, [r3, #20]
 80113c4:	e002      	b.n	80113cc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2200      	movs	r2, #0
 80113ca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	8b3a      	ldrh	r2, [r7, #24]
 80113d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80113d2:	8b3b      	ldrh	r3, [r7, #24]
 80113d4:	461a      	mov	r2, r3
 80113d6:	6879      	ldr	r1, [r7, #4]
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	f000 fa50 	bl	801187e <USBH_CtlReq>
 80113de:	4603      	mov	r3, r0
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3710      	adds	r7, #16
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	460b      	mov	r3, r1
 80113f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	789b      	ldrb	r3, [r3, #2]
 80113f8:	2b01      	cmp	r3, #1
 80113fa:	d10f      	bne.n	801141c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2205      	movs	r2, #5
 8011406:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011408:	78fb      	ldrb	r3, [r7, #3]
 801140a:	b29a      	uxth	r2, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801141c:	2200      	movs	r2, #0
 801141e:	2100      	movs	r1, #0
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f000 fa2c 	bl	801187e <USBH_CtlReq>
 8011426:	4603      	mov	r3, r0
}
 8011428:	4618      	mov	r0, r3
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	460b      	mov	r3, r1
 801143a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	789b      	ldrb	r3, [r3, #2]
 8011440:	2b01      	cmp	r3, #1
 8011442:	d10e      	bne.n	8011462 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2200      	movs	r2, #0
 8011448:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2209      	movs	r2, #9
 801144e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	887a      	ldrh	r2, [r7, #2]
 8011454:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2200      	movs	r2, #0
 801145a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2200      	movs	r2, #0
 8011460:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8011462:	2200      	movs	r2, #0
 8011464:	2100      	movs	r1, #0
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 fa09 	bl	801187e <USBH_CtlReq>
 801146c:	4603      	mov	r3, r0
}
 801146e:	4618      	mov	r0, r3
 8011470:	3708      	adds	r7, #8
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011476:	b580      	push	{r7, lr}
 8011478:	b082      	sub	sp, #8
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
 801147e:	460b      	mov	r3, r1
 8011480:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	789b      	ldrb	r3, [r3, #2]
 8011486:	2b01      	cmp	r3, #1
 8011488:	d10f      	bne.n	80114aa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2200      	movs	r2, #0
 801148e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2203      	movs	r2, #3
 8011494:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011496:	78fb      	ldrb	r3, [r7, #3]
 8011498:	b29a      	uxth	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2200      	movs	r2, #0
 80114a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80114aa:	2200      	movs	r2, #0
 80114ac:	2100      	movs	r1, #0
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f000 f9e5 	bl	801187e <USBH_CtlReq>
 80114b4:	4603      	mov	r3, r0
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3708      	adds	r7, #8
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}

080114be <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80114be:	b580      	push	{r7, lr}
 80114c0:	b082      	sub	sp, #8
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	6078      	str	r0, [r7, #4]
 80114c6:	460b      	mov	r3, r1
 80114c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	789b      	ldrb	r3, [r3, #2]
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d10f      	bne.n	80114f2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2202      	movs	r2, #2
 80114d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2201      	movs	r2, #1
 80114dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2200      	movs	r2, #0
 80114e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80114e4:	78fb      	ldrb	r3, [r7, #3]
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2200      	movs	r2, #0
 80114f0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80114f2:	2200      	movs	r2, #0
 80114f4:	2100      	movs	r1, #0
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f000 f9c1 	bl	801187e <USBH_CtlReq>
 80114fc:	4603      	mov	r3, r0
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3708      	adds	r7, #8
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}

08011506 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8011506:	b480      	push	{r7}
 8011508:	b085      	sub	sp, #20
 801150a:	af00      	add	r7, sp, #0
 801150c:	60f8      	str	r0, [r7, #12]
 801150e:	60b9      	str	r1, [r7, #8]
 8011510:	4613      	mov	r3, r2
 8011512:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	781a      	ldrb	r2, [r3, #0]
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	785a      	ldrb	r2, [r3, #1]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	3302      	adds	r3, #2
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	b29a      	uxth	r2, r3
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	3303      	adds	r3, #3
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	b29b      	uxth	r3, r3
 8011534:	021b      	lsls	r3, r3, #8
 8011536:	b29b      	uxth	r3, r3
 8011538:	4313      	orrs	r3, r2
 801153a:	b29a      	uxth	r2, r3
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	791a      	ldrb	r2, [r3, #4]
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	795a      	ldrb	r2, [r3, #5]
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	799a      	ldrb	r2, [r3, #6]
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	79da      	ldrb	r2, [r3, #7]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8011560:	88fb      	ldrh	r3, [r7, #6]
 8011562:	2b08      	cmp	r3, #8
 8011564:	d939      	bls.n	80115da <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	3308      	adds	r3, #8
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	b29a      	uxth	r2, r3
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	3309      	adds	r3, #9
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	b29b      	uxth	r3, r3
 8011576:	021b      	lsls	r3, r3, #8
 8011578:	b29b      	uxth	r3, r3
 801157a:	4313      	orrs	r3, r2
 801157c:	b29a      	uxth	r2, r3
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	330a      	adds	r3, #10
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	b29a      	uxth	r2, r3
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	330b      	adds	r3, #11
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	b29b      	uxth	r3, r3
 8011592:	021b      	lsls	r3, r3, #8
 8011594:	b29b      	uxth	r3, r3
 8011596:	4313      	orrs	r3, r2
 8011598:	b29a      	uxth	r2, r3
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	330c      	adds	r3, #12
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	330d      	adds	r3, #13
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	021b      	lsls	r3, r3, #8
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	4313      	orrs	r3, r2
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	7b9a      	ldrb	r2, [r3, #14]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	7bda      	ldrb	r2, [r3, #15]
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	7c1a      	ldrb	r2, [r3, #16]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	7c5a      	ldrb	r2, [r3, #17]
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	745a      	strb	r2, [r3, #17]
  }
}
 80115da:	bf00      	nop
 80115dc:	3714      	adds	r7, #20
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr

080115e6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80115e6:	b580      	push	{r7, lr}
 80115e8:	b08a      	sub	sp, #40	; 0x28
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	60f8      	str	r0, [r7, #12]
 80115ee:	60b9      	str	r1, [r7, #8]
 80115f0:	4613      	mov	r3, r2
 80115f2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80115f8:	2300      	movs	r3, #0
 80115fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80115fe:	2300      	movs	r3, #0
 8011600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	781a      	ldrb	r2, [r3, #0]
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	785a      	ldrb	r2, [r3, #1]
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	3302      	adds	r3, #2
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	b29a      	uxth	r2, r3
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	3303      	adds	r3, #3
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	b29b      	uxth	r3, r3
 8011628:	021b      	lsls	r3, r3, #8
 801162a:	b29b      	uxth	r3, r3
 801162c:	4313      	orrs	r3, r2
 801162e:	b29a      	uxth	r2, r3
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	791a      	ldrb	r2, [r3, #4]
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	795a      	ldrb	r2, [r3, #5]
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	799a      	ldrb	r2, [r3, #6]
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	79da      	ldrb	r2, [r3, #7]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	7a1a      	ldrb	r2, [r3, #8]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801165c:	88fb      	ldrh	r3, [r7, #6]
 801165e:	2b09      	cmp	r3, #9
 8011660:	d95f      	bls.n	8011722 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8011662:	2309      	movs	r3, #9
 8011664:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8011666:	2300      	movs	r3, #0
 8011668:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801166a:	e051      	b.n	8011710 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801166c:	f107 0316 	add.w	r3, r7, #22
 8011670:	4619      	mov	r1, r3
 8011672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011674:	f000 f8e8 	bl	8011848 <USBH_GetNextDesc>
 8011678:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 801167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167c:	785b      	ldrb	r3, [r3, #1]
 801167e:	2b04      	cmp	r3, #4
 8011680:	d146      	bne.n	8011710 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8011682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011686:	221a      	movs	r2, #26
 8011688:	fb02 f303 	mul.w	r3, r2, r3
 801168c:	3308      	adds	r3, #8
 801168e:	68fa      	ldr	r2, [r7, #12]
 8011690:	4413      	add	r3, r2
 8011692:	3302      	adds	r3, #2
 8011694:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011698:	69f8      	ldr	r0, [r7, #28]
 801169a:	f000 f846 	bl	801172a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801169e:	2300      	movs	r3, #0
 80116a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80116a4:	2300      	movs	r3, #0
 80116a6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80116a8:	e022      	b.n	80116f0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80116aa:	f107 0316 	add.w	r3, r7, #22
 80116ae:	4619      	mov	r1, r3
 80116b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116b2:	f000 f8c9 	bl	8011848 <USBH_GetNextDesc>
 80116b6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80116b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ba:	785b      	ldrb	r3, [r3, #1]
 80116bc:	2b05      	cmp	r3, #5
 80116be:	d117      	bne.n	80116f0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80116c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80116c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80116c8:	3201      	adds	r2, #1
 80116ca:	00d2      	lsls	r2, r2, #3
 80116cc:	211a      	movs	r1, #26
 80116ce:	fb01 f303 	mul.w	r3, r1, r3
 80116d2:	4413      	add	r3, r2
 80116d4:	3308      	adds	r3, #8
 80116d6:	68fa      	ldr	r2, [r7, #12]
 80116d8:	4413      	add	r3, r2
 80116da:	3304      	adds	r3, #4
 80116dc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80116de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116e0:	69b8      	ldr	r0, [r7, #24]
 80116e2:	f000 f851 	bl	8011788 <USBH_ParseEPDesc>
            ep_ix++;
 80116e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80116ea:	3301      	adds	r3, #1
 80116ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80116f0:	69fb      	ldr	r3, [r7, #28]
 80116f2:	791b      	ldrb	r3, [r3, #4]
 80116f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d204      	bcs.n	8011706 <USBH_ParseCfgDesc+0x120>
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	885a      	ldrh	r2, [r3, #2]
 8011700:	8afb      	ldrh	r3, [r7, #22]
 8011702:	429a      	cmp	r2, r3
 8011704:	d8d1      	bhi.n	80116aa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8011706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801170a:	3301      	adds	r3, #1
 801170c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011714:	2b01      	cmp	r3, #1
 8011716:	d804      	bhi.n	8011722 <USBH_ParseCfgDesc+0x13c>
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	885a      	ldrh	r2, [r3, #2]
 801171c:	8afb      	ldrh	r3, [r7, #22]
 801171e:	429a      	cmp	r2, r3
 8011720:	d8a4      	bhi.n	801166c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8011722:	bf00      	nop
 8011724:	3728      	adds	r7, #40	; 0x28
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}

0801172a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 801172a:	b480      	push	{r7}
 801172c:	b083      	sub	sp, #12
 801172e:	af00      	add	r7, sp, #0
 8011730:	6078      	str	r0, [r7, #4]
 8011732:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	781a      	ldrb	r2, [r3, #0]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	785a      	ldrb	r2, [r3, #1]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	789a      	ldrb	r2, [r3, #2]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	78da      	ldrb	r2, [r3, #3]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	791a      	ldrb	r2, [r3, #4]
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	795a      	ldrb	r2, [r3, #5]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	799a      	ldrb	r2, [r3, #6]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	79da      	ldrb	r2, [r3, #7]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	7a1a      	ldrb	r2, [r3, #8]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	721a      	strb	r2, [r3, #8]
}
 801177c:	bf00      	nop
 801177e:	370c      	adds	r7, #12
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr

08011788 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	781a      	ldrb	r2, [r3, #0]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	785a      	ldrb	r2, [r3, #1]
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	789a      	ldrb	r2, [r3, #2]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	78da      	ldrb	r2, [r3, #3]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	3304      	adds	r3, #4
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	3305      	adds	r3, #5
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	021b      	lsls	r3, r3, #8
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	4313      	orrs	r3, r2
 80117c8:	b29a      	uxth	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	799a      	ldrb	r2, [r3, #6]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	719a      	strb	r2, [r3, #6]
}
 80117d6:	bf00      	nop
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr

080117e2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80117e2:	b480      	push	{r7}
 80117e4:	b087      	sub	sp, #28
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	60f8      	str	r0, [r7, #12]
 80117ea:	60b9      	str	r1, [r7, #8]
 80117ec:	4613      	mov	r3, r2
 80117ee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	3301      	adds	r3, #1
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	2b03      	cmp	r3, #3
 80117f8:	d120      	bne.n	801183c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	1e9a      	subs	r2, r3, #2
 8011800:	88fb      	ldrh	r3, [r7, #6]
 8011802:	4293      	cmp	r3, r2
 8011804:	bf28      	it	cs
 8011806:	4613      	movcs	r3, r2
 8011808:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	3302      	adds	r3, #2
 801180e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011810:	2300      	movs	r3, #0
 8011812:	82fb      	strh	r3, [r7, #22]
 8011814:	e00b      	b.n	801182e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011816:	8afb      	ldrh	r3, [r7, #22]
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	4413      	add	r3, r2
 801181c:	781a      	ldrb	r2, [r3, #0]
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	3301      	adds	r3, #1
 8011826:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8011828:	8afb      	ldrh	r3, [r7, #22]
 801182a:	3302      	adds	r3, #2
 801182c:	82fb      	strh	r3, [r7, #22]
 801182e:	8afa      	ldrh	r2, [r7, #22]
 8011830:	8abb      	ldrh	r3, [r7, #20]
 8011832:	429a      	cmp	r2, r3
 8011834:	d3ef      	bcc.n	8011816 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	2200      	movs	r2, #0
 801183a:	701a      	strb	r2, [r3, #0]
  }
}
 801183c:	bf00      	nop
 801183e:	371c      	adds	r7, #28
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8011848:	b480      	push	{r7}
 801184a:	b085      	sub	sp, #20
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	881a      	ldrh	r2, [r3, #0]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	b29b      	uxth	r3, r3
 801185c:	4413      	add	r3, r2
 801185e:	b29a      	uxth	r2, r3
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4413      	add	r3, r2
 801186e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011870:	68fb      	ldr	r3, [r7, #12]
}
 8011872:	4618      	mov	r0, r3
 8011874:	3714      	adds	r7, #20
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr

0801187e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b086      	sub	sp, #24
 8011882:	af00      	add	r7, sp, #0
 8011884:	60f8      	str	r0, [r7, #12]
 8011886:	60b9      	str	r1, [r7, #8]
 8011888:	4613      	mov	r3, r2
 801188a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801188c:	2301      	movs	r3, #1
 801188e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	789b      	ldrb	r3, [r3, #2]
 8011894:	2b01      	cmp	r3, #1
 8011896:	d002      	beq.n	801189e <USBH_CtlReq+0x20>
 8011898:	2b02      	cmp	r3, #2
 801189a:	d01d      	beq.n	80118d8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 801189c:	e043      	b.n	8011926 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	68ba      	ldr	r2, [r7, #8]
 80118a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	88fa      	ldrh	r2, [r7, #6]
 80118a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	2201      	movs	r2, #1
 80118ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2202      	movs	r2, #2
 80118b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80118b6:	2301      	movs	r3, #1
 80118b8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2203      	movs	r2, #3
 80118be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80118ce:	2300      	movs	r3, #0
 80118d0:	2200      	movs	r2, #0
 80118d2:	f000 fe43 	bl	801255c <osMessageQueuePut>
      break;
 80118d6:	e026      	b.n	8011926 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f000 f829 	bl	8011930 <USBH_HandleControl>
 80118de:	4603      	mov	r3, r0
 80118e0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80118e2:	7dfb      	ldrb	r3, [r7, #23]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d002      	beq.n	80118ee <USBH_CtlReq+0x70>
 80118e8:	7dfb      	ldrb	r3, [r7, #23]
 80118ea:	2b03      	cmp	r3, #3
 80118ec:	d106      	bne.n	80118fc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2201      	movs	r2, #1
 80118f2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2200      	movs	r2, #0
 80118f8:	761a      	strb	r2, [r3, #24]
 80118fa:	e005      	b.n	8011908 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80118fc:	7dfb      	ldrb	r3, [r7, #23]
 80118fe:	2b02      	cmp	r3, #2
 8011900:	d102      	bne.n	8011908 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	2201      	movs	r2, #1
 8011906:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2203      	movs	r2, #3
 801190c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801191c:	2300      	movs	r3, #0
 801191e:	2200      	movs	r2, #0
 8011920:	f000 fe1c 	bl	801255c <osMessageQueuePut>
      break;
 8011924:	bf00      	nop
  }
  return status;
 8011926:	7dfb      	ldrb	r3, [r7, #23]
}
 8011928:	4618      	mov	r0, r3
 801192a:	3718      	adds	r7, #24
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b086      	sub	sp, #24
 8011934:	af02      	add	r7, sp, #8
 8011936:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8011938:	2301      	movs	r3, #1
 801193a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801193c:	2300      	movs	r3, #0
 801193e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	7e1b      	ldrb	r3, [r3, #24]
 8011944:	3b01      	subs	r3, #1
 8011946:	2b0a      	cmp	r3, #10
 8011948:	f200 822b 	bhi.w	8011da2 <USBH_HandleControl+0x472>
 801194c:	a201      	add	r2, pc, #4	; (adr r2, 8011954 <USBH_HandleControl+0x24>)
 801194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011952:	bf00      	nop
 8011954:	08011981 	.word	0x08011981
 8011958:	0801199b 	.word	0x0801199b
 801195c:	08011a3d 	.word	0x08011a3d
 8011960:	08011a63 	.word	0x08011a63
 8011964:	08011aef 	.word	0x08011aef
 8011968:	08011b1b 	.word	0x08011b1b
 801196c:	08011bdd 	.word	0x08011bdd
 8011970:	08011bff 	.word	0x08011bff
 8011974:	08011c91 	.word	0x08011c91
 8011978:	08011cb9 	.word	0x08011cb9
 801197c:	08011d4b 	.word	0x08011d4b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f103 0110 	add.w	r1, r3, #16
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	795b      	ldrb	r3, [r3, #5]
 801198a:	461a      	mov	r2, r3
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f000 fa19 	bl	8011dc4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2202      	movs	r2, #2
 8011996:	761a      	strb	r2, [r3, #24]
      break;
 8011998:	e20e      	b.n	8011db8 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	795b      	ldrb	r3, [r3, #5]
 801199e:	4619      	mov	r1, r3
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f003 ff05 	bl	80157b0 <USBH_LL_GetURBState>
 80119a6:	4603      	mov	r3, r0
 80119a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80119aa:	7bbb      	ldrb	r3, [r7, #14]
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d12c      	bne.n	8011a0a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	7c1b      	ldrb	r3, [r3, #16]
 80119b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80119b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	8adb      	ldrh	r3, [r3, #22]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d00a      	beq.n	80119d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80119c2:	7b7b      	ldrb	r3, [r7, #13]
 80119c4:	2b80      	cmp	r3, #128	; 0x80
 80119c6:	d103      	bne.n	80119d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2203      	movs	r2, #3
 80119cc:	761a      	strb	r2, [r3, #24]
 80119ce:	e00d      	b.n	80119ec <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2205      	movs	r2, #5
 80119d4:	761a      	strb	r2, [r3, #24]
 80119d6:	e009      	b.n	80119ec <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80119d8:	7b7b      	ldrb	r3, [r7, #13]
 80119da:	2b80      	cmp	r3, #128	; 0x80
 80119dc:	d103      	bne.n	80119e6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2209      	movs	r2, #9
 80119e2:	761a      	strb	r2, [r3, #24]
 80119e4:	e002      	b.n	80119ec <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2207      	movs	r2, #7
 80119ea:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2203      	movs	r2, #3
 80119f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011a00:	2300      	movs	r3, #0
 8011a02:	2200      	movs	r2, #0
 8011a04:	f000 fdaa 	bl	801255c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011a08:	e1cd      	b.n	8011da6 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8011a0a:	7bbb      	ldrb	r3, [r7, #14]
 8011a0c:	2b04      	cmp	r3, #4
 8011a0e:	d003      	beq.n	8011a18 <USBH_HandleControl+0xe8>
 8011a10:	7bbb      	ldrb	r3, [r7, #14]
 8011a12:	2b02      	cmp	r3, #2
 8011a14:	f040 81c7 	bne.w	8011da6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	220b      	movs	r2, #11
 8011a1c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2203      	movs	r2, #3
 8011a22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011a32:	2300      	movs	r3, #0
 8011a34:	2200      	movs	r2, #0
 8011a36:	f000 fd91 	bl	801255c <osMessageQueuePut>
      break;
 8011a3a:	e1b4      	b.n	8011da6 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011a42:	b29a      	uxth	r2, r3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6899      	ldr	r1, [r3, #8]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	899a      	ldrh	r2, [r3, #12]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	791b      	ldrb	r3, [r3, #4]
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f000 f9f4 	bl	8011e42 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2204      	movs	r2, #4
 8011a5e:	761a      	strb	r2, [r3, #24]
      break;
 8011a60:	e1aa      	b.n	8011db8 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	791b      	ldrb	r3, [r3, #4]
 8011a66:	4619      	mov	r1, r3
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f003 fea1 	bl	80157b0 <USBH_LL_GetURBState>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8011a72:	7bbb      	ldrb	r3, [r7, #14]
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	d110      	bne.n	8011a9a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2209      	movs	r2, #9
 8011a7c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2203      	movs	r2, #3
 8011a82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011a92:	2300      	movs	r3, #0
 8011a94:	2200      	movs	r2, #0
 8011a96:	f000 fd61 	bl	801255c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8011a9a:	7bbb      	ldrb	r3, [r7, #14]
 8011a9c:	2b05      	cmp	r3, #5
 8011a9e:	d110      	bne.n	8011ac2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8011aa0:	2303      	movs	r3, #3
 8011aa2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2203      	movs	r2, #3
 8011aa8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011ab8:	2300      	movs	r3, #0
 8011aba:	2200      	movs	r2, #0
 8011abc:	f000 fd4e 	bl	801255c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011ac0:	e173      	b.n	8011daa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8011ac2:	7bbb      	ldrb	r3, [r7, #14]
 8011ac4:	2b04      	cmp	r3, #4
 8011ac6:	f040 8170 	bne.w	8011daa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	220b      	movs	r2, #11
 8011ace:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2203      	movs	r2, #3
 8011ad4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f000 fd38 	bl	801255c <osMessageQueuePut>
      break;
 8011aec:	e15d      	b.n	8011daa <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6899      	ldr	r1, [r3, #8]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	899a      	ldrh	r2, [r3, #12]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	7958      	ldrb	r0, [r3, #5]
 8011afa:	2301      	movs	r3, #1
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	4603      	mov	r3, r0
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f000 f979 	bl	8011df8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2206      	movs	r2, #6
 8011b16:	761a      	strb	r2, [r3, #24]
      break;
 8011b18:	e14e      	b.n	8011db8 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	795b      	ldrb	r3, [r3, #5]
 8011b1e:	4619      	mov	r1, r3
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f003 fe45 	bl	80157b0 <USBH_LL_GetURBState>
 8011b26:	4603      	mov	r3, r0
 8011b28:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011b2a:	7bbb      	ldrb	r3, [r7, #14]
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d111      	bne.n	8011b54 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2207      	movs	r2, #7
 8011b34:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2203      	movs	r2, #3
 8011b3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	f000 fd05 	bl	801255c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011b52:	e12c      	b.n	8011dae <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8011b54:	7bbb      	ldrb	r3, [r7, #14]
 8011b56:	2b05      	cmp	r3, #5
 8011b58:	d113      	bne.n	8011b82 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	220c      	movs	r2, #12
 8011b5e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011b60:	2303      	movs	r3, #3
 8011b62:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2203      	movs	r2, #3
 8011b68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011b78:	2300      	movs	r3, #0
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f000 fcee 	bl	801255c <osMessageQueuePut>
      break;
 8011b80:	e115      	b.n	8011dae <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011b82:	7bbb      	ldrb	r3, [r7, #14]
 8011b84:	2b02      	cmp	r3, #2
 8011b86:	d111      	bne.n	8011bac <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2205      	movs	r2, #5
 8011b8c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2203      	movs	r2, #3
 8011b92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f000 fcd9 	bl	801255c <osMessageQueuePut>
      break;
 8011baa:	e100      	b.n	8011dae <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8011bac:	7bbb      	ldrb	r3, [r7, #14]
 8011bae:	2b04      	cmp	r3, #4
 8011bb0:	f040 80fd 	bne.w	8011dae <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	220b      	movs	r2, #11
 8011bb8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8011bba:	2302      	movs	r3, #2
 8011bbc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2203      	movs	r2, #3
 8011bc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f000 fcc1 	bl	801255c <osMessageQueuePut>
      break;
 8011bda:	e0e8      	b.n	8011dae <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	791b      	ldrb	r3, [r3, #4]
 8011be0:	2200      	movs	r2, #0
 8011be2:	2100      	movs	r1, #0
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f000 f92c 	bl	8011e42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011bf0:	b29a      	uxth	r2, r3
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2208      	movs	r2, #8
 8011bfa:	761a      	strb	r2, [r3, #24]

      break;
 8011bfc:	e0dc      	b.n	8011db8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	791b      	ldrb	r3, [r3, #4]
 8011c02:	4619      	mov	r1, r3
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f003 fdd3 	bl	80157b0 <USBH_LL_GetURBState>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011c0e:	7bbb      	ldrb	r3, [r7, #14]
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d113      	bne.n	8011c3c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	220d      	movs	r2, #13
 8011c18:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2203      	movs	r2, #3
 8011c22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011c32:	2300      	movs	r3, #0
 8011c34:	2200      	movs	r2, #0
 8011c36:	f000 fc91 	bl	801255c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011c3a:	e0ba      	b.n	8011db2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8011c3c:	7bbb      	ldrb	r3, [r7, #14]
 8011c3e:	2b04      	cmp	r3, #4
 8011c40:	d111      	bne.n	8011c66 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	220b      	movs	r2, #11
 8011c46:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2203      	movs	r2, #3
 8011c4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	2200      	movs	r2, #0
 8011c60:	f000 fc7c 	bl	801255c <osMessageQueuePut>
      break;
 8011c64:	e0a5      	b.n	8011db2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8011c66:	7bbb      	ldrb	r3, [r7, #14]
 8011c68:	2b05      	cmp	r3, #5
 8011c6a:	f040 80a2 	bne.w	8011db2 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8011c6e:	2303      	movs	r3, #3
 8011c70:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2203      	movs	r2, #3
 8011c76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011c86:	2300      	movs	r3, #0
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f000 fc67 	bl	801255c <osMessageQueuePut>
      break;
 8011c8e:	e090      	b.n	8011db2 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	795a      	ldrb	r2, [r3, #5]
 8011c94:	2301      	movs	r3, #1
 8011c96:	9300      	str	r3, [sp, #0]
 8011c98:	4613      	mov	r3, r2
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f000 f8aa 	bl	8011df8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	220a      	movs	r2, #10
 8011cb4:	761a      	strb	r2, [r3, #24]
      break;
 8011cb6:	e07f      	b.n	8011db8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	795b      	ldrb	r3, [r3, #5]
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f003 fd76 	bl	80157b0 <USBH_LL_GetURBState>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011cc8:	7bbb      	ldrb	r3, [r7, #14]
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d113      	bne.n	8011cf6 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	220d      	movs	r2, #13
 8011cd6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2203      	movs	r2, #3
 8011cdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011cec:	2300      	movs	r3, #0
 8011cee:	2200      	movs	r2, #0
 8011cf0:	f000 fc34 	bl	801255c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011cf4:	e05f      	b.n	8011db6 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011cf6:	7bbb      	ldrb	r3, [r7, #14]
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	d111      	bne.n	8011d20 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2209      	movs	r2, #9
 8011d00:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2203      	movs	r2, #3
 8011d06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011d16:	2300      	movs	r3, #0
 8011d18:	2200      	movs	r2, #0
 8011d1a:	f000 fc1f 	bl	801255c <osMessageQueuePut>
      break;
 8011d1e:	e04a      	b.n	8011db6 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8011d20:	7bbb      	ldrb	r3, [r7, #14]
 8011d22:	2b04      	cmp	r3, #4
 8011d24:	d147      	bne.n	8011db6 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	220b      	movs	r2, #11
 8011d2a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2203      	movs	r2, #3
 8011d30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011d40:	2300      	movs	r3, #0
 8011d42:	2200      	movs	r2, #0
 8011d44:	f000 fc0a 	bl	801255c <osMessageQueuePut>
      break;
 8011d48:	e035      	b.n	8011db6 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	7e5b      	ldrb	r3, [r3, #25]
 8011d4e:	3301      	adds	r3, #1
 8011d50:	b2da      	uxtb	r2, r3
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	765a      	strb	r2, [r3, #25]
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	7e5b      	ldrb	r3, [r3, #25]
 8011d5a:	2b02      	cmp	r3, #2
 8011d5c:	d806      	bhi.n	8011d6c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2201      	movs	r2, #1
 8011d62:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2201      	movs	r2, #1
 8011d68:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011d6a:	e025      	b.n	8011db8 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011d72:	2106      	movs	r1, #6
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	795b      	ldrb	r3, [r3, #5]
 8011d82:	4619      	mov	r1, r3
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f000 f90d 	bl	8011fa4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	791b      	ldrb	r3, [r3, #4]
 8011d8e:	4619      	mov	r1, r3
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f000 f907 	bl	8011fa4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8011d9c:	2302      	movs	r3, #2
 8011d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8011da0:	e00a      	b.n	8011db8 <USBH_HandleControl+0x488>

    default:
      break;
 8011da2:	bf00      	nop
 8011da4:	e008      	b.n	8011db8 <USBH_HandleControl+0x488>
      break;
 8011da6:	bf00      	nop
 8011da8:	e006      	b.n	8011db8 <USBH_HandleControl+0x488>
      break;
 8011daa:	bf00      	nop
 8011dac:	e004      	b.n	8011db8 <USBH_HandleControl+0x488>
      break;
 8011dae:	bf00      	nop
 8011db0:	e002      	b.n	8011db8 <USBH_HandleControl+0x488>
      break;
 8011db2:	bf00      	nop
 8011db4:	e000      	b.n	8011db8 <USBH_HandleControl+0x488>
      break;
 8011db6:	bf00      	nop
  }

  return status;
 8011db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop

08011dc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b088      	sub	sp, #32
 8011dc8:	af04      	add	r7, sp, #16
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	4613      	mov	r3, r2
 8011dd0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011dd2:	79f9      	ldrb	r1, [r7, #7]
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	9303      	str	r3, [sp, #12]
 8011dd8:	2308      	movs	r3, #8
 8011dda:	9302      	str	r3, [sp, #8]
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	9301      	str	r3, [sp, #4]
 8011de0:	2300      	movs	r3, #0
 8011de2:	9300      	str	r3, [sp, #0]
 8011de4:	2300      	movs	r3, #0
 8011de6:	2200      	movs	r2, #0
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f003 fcb0 	bl	801574e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8011dee:	2300      	movs	r3, #0
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3710      	adds	r7, #16
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b088      	sub	sp, #32
 8011dfc:	af04      	add	r7, sp, #16
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	4611      	mov	r1, r2
 8011e04:	461a      	mov	r2, r3
 8011e06:	460b      	mov	r3, r1
 8011e08:	80fb      	strh	r3, [r7, #6]
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d001      	beq.n	8011e1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011e1c:	7979      	ldrb	r1, [r7, #5]
 8011e1e:	7e3b      	ldrb	r3, [r7, #24]
 8011e20:	9303      	str	r3, [sp, #12]
 8011e22:	88fb      	ldrh	r3, [r7, #6]
 8011e24:	9302      	str	r3, [sp, #8]
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	9301      	str	r3, [sp, #4]
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	9300      	str	r3, [sp, #0]
 8011e2e:	2300      	movs	r3, #0
 8011e30:	2200      	movs	r2, #0
 8011e32:	68f8      	ldr	r0, [r7, #12]
 8011e34:	f003 fc8b 	bl	801574e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011e38:	2300      	movs	r3, #0
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3710      	adds	r7, #16
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}

08011e42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8011e42:	b580      	push	{r7, lr}
 8011e44:	b088      	sub	sp, #32
 8011e46:	af04      	add	r7, sp, #16
 8011e48:	60f8      	str	r0, [r7, #12]
 8011e4a:	60b9      	str	r1, [r7, #8]
 8011e4c:	4611      	mov	r1, r2
 8011e4e:	461a      	mov	r2, r3
 8011e50:	460b      	mov	r3, r1
 8011e52:	80fb      	strh	r3, [r7, #6]
 8011e54:	4613      	mov	r3, r2
 8011e56:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011e58:	7979      	ldrb	r1, [r7, #5]
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	9303      	str	r3, [sp, #12]
 8011e5e:	88fb      	ldrh	r3, [r7, #6]
 8011e60:	9302      	str	r3, [sp, #8]
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	9301      	str	r3, [sp, #4]
 8011e66:	2301      	movs	r3, #1
 8011e68:	9300      	str	r3, [sp, #0]
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	68f8      	ldr	r0, [r7, #12]
 8011e70:	f003 fc6d 	bl	801574e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8011e74:	2300      	movs	r3, #0

}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3710      	adds	r7, #16
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}

08011e7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b088      	sub	sp, #32
 8011e82:	af04      	add	r7, sp, #16
 8011e84:	60f8      	str	r0, [r7, #12]
 8011e86:	60b9      	str	r1, [r7, #8]
 8011e88:	4611      	mov	r1, r2
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	80fb      	strh	r3, [r7, #6]
 8011e90:	4613      	mov	r3, r2
 8011e92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d001      	beq.n	8011ea2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011ea2:	7979      	ldrb	r1, [r7, #5]
 8011ea4:	7e3b      	ldrb	r3, [r7, #24]
 8011ea6:	9303      	str	r3, [sp, #12]
 8011ea8:	88fb      	ldrh	r3, [r7, #6]
 8011eaa:	9302      	str	r3, [sp, #8]
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	9301      	str	r3, [sp, #4]
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	9300      	str	r3, [sp, #0]
 8011eb4:	2302      	movs	r3, #2
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f003 fc48 	bl	801574e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3710      	adds	r7, #16
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}

08011ec8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b088      	sub	sp, #32
 8011ecc:	af04      	add	r7, sp, #16
 8011ece:	60f8      	str	r0, [r7, #12]
 8011ed0:	60b9      	str	r1, [r7, #8]
 8011ed2:	4611      	mov	r1, r2
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	80fb      	strh	r3, [r7, #6]
 8011eda:	4613      	mov	r3, r2
 8011edc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011ede:	7979      	ldrb	r1, [r7, #5]
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	9303      	str	r3, [sp, #12]
 8011ee4:	88fb      	ldrh	r3, [r7, #6]
 8011ee6:	9302      	str	r3, [sp, #8]
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	9301      	str	r3, [sp, #4]
 8011eec:	2301      	movs	r3, #1
 8011eee:	9300      	str	r3, [sp, #0]
 8011ef0:	2302      	movs	r3, #2
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f003 fc2a 	bl	801574e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8011efa:	2300      	movs	r3, #0
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3710      	adds	r7, #16
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b086      	sub	sp, #24
 8011f08:	af04      	add	r7, sp, #16
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	4608      	mov	r0, r1
 8011f0e:	4611      	mov	r1, r2
 8011f10:	461a      	mov	r2, r3
 8011f12:	4603      	mov	r3, r0
 8011f14:	70fb      	strb	r3, [r7, #3]
 8011f16:	460b      	mov	r3, r1
 8011f18:	70bb      	strb	r3, [r7, #2]
 8011f1a:	4613      	mov	r3, r2
 8011f1c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011f1e:	7878      	ldrb	r0, [r7, #1]
 8011f20:	78ba      	ldrb	r2, [r7, #2]
 8011f22:	78f9      	ldrb	r1, [r7, #3]
 8011f24:	8b3b      	ldrh	r3, [r7, #24]
 8011f26:	9302      	str	r3, [sp, #8]
 8011f28:	7d3b      	ldrb	r3, [r7, #20]
 8011f2a:	9301      	str	r3, [sp, #4]
 8011f2c:	7c3b      	ldrb	r3, [r7, #16]
 8011f2e:	9300      	str	r3, [sp, #0]
 8011f30:	4603      	mov	r3, r0
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f003 fbbd 	bl	80156b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011f38:	2300      	movs	r3, #0
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3708      	adds	r7, #8
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b082      	sub	sp, #8
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8011f4e:	78fb      	ldrb	r3, [r7, #3]
 8011f50:	4619      	mov	r1, r3
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f003 fbdc 	bl	8015710 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b084      	sub	sp, #16
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 f836 	bl	8011fe0 <USBH_GetFreePipe>
 8011f74:	4603      	mov	r3, r0
 8011f76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011f78:	89fb      	ldrh	r3, [r7, #14]
 8011f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	d00a      	beq.n	8011f98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8011f82:	78fa      	ldrb	r2, [r7, #3]
 8011f84:	89fb      	ldrh	r3, [r7, #14]
 8011f86:	f003 030f 	and.w	r3, r3, #15
 8011f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011f8e:	6879      	ldr	r1, [r7, #4]
 8011f90:	33e0      	adds	r3, #224	; 0xe0
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	440b      	add	r3, r1
 8011f96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011f98:	89fb      	ldrh	r3, [r7, #14]
 8011f9a:	b2db      	uxtb	r3, r3
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3710      	adds	r7, #16
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	460b      	mov	r3, r1
 8011fae:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8011fb0:	78fb      	ldrb	r3, [r7, #3]
 8011fb2:	2b0a      	cmp	r3, #10
 8011fb4:	d80d      	bhi.n	8011fd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011fb6:	78fb      	ldrb	r3, [r7, #3]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	33e0      	adds	r3, #224	; 0xe0
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	4413      	add	r3, r2
 8011fc0:	685a      	ldr	r2, [r3, #4]
 8011fc2:	78fb      	ldrb	r3, [r7, #3]
 8011fc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011fc8:	6879      	ldr	r1, [r7, #4]
 8011fca:	33e0      	adds	r3, #224	; 0xe0
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	440b      	add	r3, r1
 8011fd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011fd2:	2300      	movs	r3, #0
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b085      	sub	sp, #20
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8011fec:	2300      	movs	r3, #0
 8011fee:	73fb      	strb	r3, [r7, #15]
 8011ff0:	e00f      	b.n	8012012 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011ff2:	7bfb      	ldrb	r3, [r7, #15]
 8011ff4:	687a      	ldr	r2, [r7, #4]
 8011ff6:	33e0      	adds	r3, #224	; 0xe0
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	4413      	add	r3, r2
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012002:	2b00      	cmp	r3, #0
 8012004:	d102      	bne.n	801200c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8012006:	7bfb      	ldrb	r3, [r7, #15]
 8012008:	b29b      	uxth	r3, r3
 801200a:	e007      	b.n	801201c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801200c:	7bfb      	ldrb	r3, [r7, #15]
 801200e:	3301      	adds	r3, #1
 8012010:	73fb      	strb	r3, [r7, #15]
 8012012:	7bfb      	ldrb	r3, [r7, #15]
 8012014:	2b0a      	cmp	r3, #10
 8012016:	d9ec      	bls.n	8011ff2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8012018:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801201c:	4618      	mov	r0, r3
 801201e:	3714      	adds	r7, #20
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr

08012028 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012028:	b480      	push	{r7}
 801202a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801202c:	bf00      	nop
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr
	...

08012038 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012038:	b480      	push	{r7}
 801203a:	b085      	sub	sp, #20
 801203c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801203e:	f3ef 8305 	mrs	r3, IPSR
 8012042:	60bb      	str	r3, [r7, #8]
  return(result);
 8012044:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012046:	2b00      	cmp	r3, #0
 8012048:	d10f      	bne.n	801206a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801204a:	f3ef 8310 	mrs	r3, PRIMASK
 801204e:	607b      	str	r3, [r7, #4]
  return(result);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d105      	bne.n	8012062 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012056:	f3ef 8311 	mrs	r3, BASEPRI
 801205a:	603b      	str	r3, [r7, #0]
  return(result);
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d007      	beq.n	8012072 <osKernelInitialize+0x3a>
 8012062:	4b0e      	ldr	r3, [pc, #56]	; (801209c <osKernelInitialize+0x64>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	2b02      	cmp	r3, #2
 8012068:	d103      	bne.n	8012072 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801206a:	f06f 0305 	mvn.w	r3, #5
 801206e:	60fb      	str	r3, [r7, #12]
 8012070:	e00c      	b.n	801208c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012072:	4b0a      	ldr	r3, [pc, #40]	; (801209c <osKernelInitialize+0x64>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d105      	bne.n	8012086 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801207a:	4b08      	ldr	r3, [pc, #32]	; (801209c <osKernelInitialize+0x64>)
 801207c:	2201      	movs	r2, #1
 801207e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012080:	2300      	movs	r3, #0
 8012082:	60fb      	str	r3, [r7, #12]
 8012084:	e002      	b.n	801208c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8012086:	f04f 33ff 	mov.w	r3, #4294967295
 801208a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801208c:	68fb      	ldr	r3, [r7, #12]
}
 801208e:	4618      	mov	r0, r3
 8012090:	3714      	adds	r7, #20
 8012092:	46bd      	mov	sp, r7
 8012094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012098:	4770      	bx	lr
 801209a:	bf00      	nop
 801209c:	2000111c 	.word	0x2000111c

080120a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120a6:	f3ef 8305 	mrs	r3, IPSR
 80120aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80120ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d10f      	bne.n	80120d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120b2:	f3ef 8310 	mrs	r3, PRIMASK
 80120b6:	607b      	str	r3, [r7, #4]
  return(result);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d105      	bne.n	80120ca <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120be:	f3ef 8311 	mrs	r3, BASEPRI
 80120c2:	603b      	str	r3, [r7, #0]
  return(result);
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d007      	beq.n	80120da <osKernelStart+0x3a>
 80120ca:	4b0f      	ldr	r3, [pc, #60]	; (8012108 <osKernelStart+0x68>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b02      	cmp	r3, #2
 80120d0:	d103      	bne.n	80120da <osKernelStart+0x3a>
    stat = osErrorISR;
 80120d2:	f06f 0305 	mvn.w	r3, #5
 80120d6:	60fb      	str	r3, [r7, #12]
 80120d8:	e010      	b.n	80120fc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80120da:	4b0b      	ldr	r3, [pc, #44]	; (8012108 <osKernelStart+0x68>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	2b01      	cmp	r3, #1
 80120e0:	d109      	bne.n	80120f6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80120e2:	f7ff ffa1 	bl	8012028 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80120e6:	4b08      	ldr	r3, [pc, #32]	; (8012108 <osKernelStart+0x68>)
 80120e8:	2202      	movs	r2, #2
 80120ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80120ec:	f001 fc60 	bl	80139b0 <vTaskStartScheduler>
      stat = osOK;
 80120f0:	2300      	movs	r3, #0
 80120f2:	60fb      	str	r3, [r7, #12]
 80120f4:	e002      	b.n	80120fc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80120f6:	f04f 33ff 	mov.w	r3, #4294967295
 80120fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80120fc:	68fb      	ldr	r3, [r7, #12]
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	2000111c 	.word	0x2000111c

0801210c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801210c:	b580      	push	{r7, lr}
 801210e:	b090      	sub	sp, #64	; 0x40
 8012110:	af04      	add	r7, sp, #16
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	60b9      	str	r1, [r7, #8]
 8012116:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012118:	2300      	movs	r3, #0
 801211a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801211c:	f3ef 8305 	mrs	r3, IPSR
 8012120:	61fb      	str	r3, [r7, #28]
  return(result);
 8012122:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8012124:	2b00      	cmp	r3, #0
 8012126:	f040 808f 	bne.w	8012248 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801212a:	f3ef 8310 	mrs	r3, PRIMASK
 801212e:	61bb      	str	r3, [r7, #24]
  return(result);
 8012130:	69bb      	ldr	r3, [r7, #24]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d105      	bne.n	8012142 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012136:	f3ef 8311 	mrs	r3, BASEPRI
 801213a:	617b      	str	r3, [r7, #20]
  return(result);
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d003      	beq.n	801214a <osThreadNew+0x3e>
 8012142:	4b44      	ldr	r3, [pc, #272]	; (8012254 <osThreadNew+0x148>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b02      	cmp	r3, #2
 8012148:	d07e      	beq.n	8012248 <osThreadNew+0x13c>
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d07b      	beq.n	8012248 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8012150:	2380      	movs	r3, #128	; 0x80
 8012152:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8012154:	2318      	movs	r3, #24
 8012156:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8012158:	2300      	movs	r3, #0
 801215a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801215c:	f04f 33ff 	mov.w	r3, #4294967295
 8012160:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d045      	beq.n	80121f4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d002      	beq.n	8012176 <osThreadNew+0x6a>
        name = attr->name;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	699b      	ldr	r3, [r3, #24]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d002      	beq.n	8012184 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	699b      	ldr	r3, [r3, #24]
 8012182:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012186:	2b00      	cmp	r3, #0
 8012188:	d008      	beq.n	801219c <osThreadNew+0x90>
 801218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218c:	2b38      	cmp	r3, #56	; 0x38
 801218e:	d805      	bhi.n	801219c <osThreadNew+0x90>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	f003 0301 	and.w	r3, r3, #1
 8012198:	2b00      	cmp	r3, #0
 801219a:	d001      	beq.n	80121a0 <osThreadNew+0x94>
        return (NULL);
 801219c:	2300      	movs	r3, #0
 801219e:	e054      	b.n	801224a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	695b      	ldr	r3, [r3, #20]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d003      	beq.n	80121b0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	695b      	ldr	r3, [r3, #20]
 80121ac:	089b      	lsrs	r3, r3, #2
 80121ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	689b      	ldr	r3, [r3, #8]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00e      	beq.n	80121d6 <osThreadNew+0xca>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	2b5f      	cmp	r3, #95	; 0x5f
 80121be:	d90a      	bls.n	80121d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d006      	beq.n	80121d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	695b      	ldr	r3, [r3, #20]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d002      	beq.n	80121d6 <osThreadNew+0xca>
        mem = 1;
 80121d0:	2301      	movs	r3, #1
 80121d2:	623b      	str	r3, [r7, #32]
 80121d4:	e010      	b.n	80121f8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d10c      	bne.n	80121f8 <osThreadNew+0xec>
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	68db      	ldr	r3, [r3, #12]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d108      	bne.n	80121f8 <osThreadNew+0xec>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	691b      	ldr	r3, [r3, #16]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d104      	bne.n	80121f8 <osThreadNew+0xec>
          mem = 0;
 80121ee:	2300      	movs	r3, #0
 80121f0:	623b      	str	r3, [r7, #32]
 80121f2:	e001      	b.n	80121f8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80121f4:	2300      	movs	r3, #0
 80121f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80121f8:	6a3b      	ldr	r3, [r7, #32]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d110      	bne.n	8012220 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012206:	9202      	str	r2, [sp, #8]
 8012208:	9301      	str	r3, [sp, #4]
 801220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220c:	9300      	str	r3, [sp, #0]
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	f001 f977 	bl	8013508 <xTaskCreateStatic>
 801221a:	4603      	mov	r3, r0
 801221c:	613b      	str	r3, [r7, #16]
 801221e:	e013      	b.n	8012248 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012220:	6a3b      	ldr	r3, [r7, #32]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d110      	bne.n	8012248 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012228:	b29a      	uxth	r2, r3
 801222a:	f107 0310 	add.w	r3, r7, #16
 801222e:	9301      	str	r3, [sp, #4]
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	9300      	str	r3, [sp, #0]
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012238:	68f8      	ldr	r0, [r7, #12]
 801223a:	f001 f9c5 	bl	80135c8 <xTaskCreate>
 801223e:	4603      	mov	r3, r0
 8012240:	2b01      	cmp	r3, #1
 8012242:	d001      	beq.n	8012248 <osThreadNew+0x13c>
          hTask = NULL;
 8012244:	2300      	movs	r3, #0
 8012246:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012248:	693b      	ldr	r3, [r7, #16]
}
 801224a:	4618      	mov	r0, r3
 801224c:	3730      	adds	r7, #48	; 0x30
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	2000111c 	.word	0x2000111c

08012258 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012258:	b580      	push	{r7, lr}
 801225a:	b088      	sub	sp, #32
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012264:	f3ef 8305 	mrs	r3, IPSR
 8012268:	617b      	str	r3, [r7, #20]
  return(result);
 801226a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801226c:	2b00      	cmp	r3, #0
 801226e:	d10f      	bne.n	8012290 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012270:	f3ef 8310 	mrs	r3, PRIMASK
 8012274:	613b      	str	r3, [r7, #16]
  return(result);
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d105      	bne.n	8012288 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801227c:	f3ef 8311 	mrs	r3, BASEPRI
 8012280:	60fb      	str	r3, [r7, #12]
  return(result);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d007      	beq.n	8012298 <osThreadSuspend+0x40>
 8012288:	4b0c      	ldr	r3, [pc, #48]	; (80122bc <osThreadSuspend+0x64>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2b02      	cmp	r3, #2
 801228e:	d103      	bne.n	8012298 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8012290:	f06f 0305 	mvn.w	r3, #5
 8012294:	61fb      	str	r3, [r7, #28]
 8012296:	e00b      	b.n	80122b0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d103      	bne.n	80122a6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 801229e:	f06f 0303 	mvn.w	r3, #3
 80122a2:	61fb      	str	r3, [r7, #28]
 80122a4:	e004      	b.n	80122b0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80122a6:	2300      	movs	r3, #0
 80122a8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80122aa:	69b8      	ldr	r0, [r7, #24]
 80122ac:	f001 fb0a 	bl	80138c4 <vTaskSuspend>
  }

  return (stat);
 80122b0:	69fb      	ldr	r3, [r7, #28]
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3720      	adds	r7, #32
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	2000111c 	.word	0x2000111c

080122c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b086      	sub	sp, #24
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122c8:	f3ef 8305 	mrs	r3, IPSR
 80122cc:	613b      	str	r3, [r7, #16]
  return(result);
 80122ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d10f      	bne.n	80122f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122d4:	f3ef 8310 	mrs	r3, PRIMASK
 80122d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d105      	bne.n	80122ec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80122e0:	f3ef 8311 	mrs	r3, BASEPRI
 80122e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d007      	beq.n	80122fc <osDelay+0x3c>
 80122ec:	4b0a      	ldr	r3, [pc, #40]	; (8012318 <osDelay+0x58>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b02      	cmp	r3, #2
 80122f2:	d103      	bne.n	80122fc <osDelay+0x3c>
    stat = osErrorISR;
 80122f4:	f06f 0305 	mvn.w	r3, #5
 80122f8:	617b      	str	r3, [r7, #20]
 80122fa:	e007      	b.n	801230c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80122fc:	2300      	movs	r3, #0
 80122fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d002      	beq.n	801230c <osDelay+0x4c>
      vTaskDelay(ticks);
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f001 faa6 	bl	8013858 <vTaskDelay>
    }
  }

  return (stat);
 801230c:	697b      	ldr	r3, [r7, #20]
}
 801230e:	4618      	mov	r0, r3
 8012310:	3718      	adds	r7, #24
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	2000111c 	.word	0x2000111c

0801231c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801231c:	b580      	push	{r7, lr}
 801231e:	b08a      	sub	sp, #40	; 0x28
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8012324:	2300      	movs	r3, #0
 8012326:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012328:	f3ef 8305 	mrs	r3, IPSR
 801232c:	613b      	str	r3, [r7, #16]
  return(result);
 801232e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8012330:	2b00      	cmp	r3, #0
 8012332:	f040 8085 	bne.w	8012440 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012336:	f3ef 8310 	mrs	r3, PRIMASK
 801233a:	60fb      	str	r3, [r7, #12]
  return(result);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d105      	bne.n	801234e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012342:	f3ef 8311 	mrs	r3, BASEPRI
 8012346:	60bb      	str	r3, [r7, #8]
  return(result);
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d003      	beq.n	8012356 <osMutexNew+0x3a>
 801234e:	4b3f      	ldr	r3, [pc, #252]	; (801244c <osMutexNew+0x130>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	2b02      	cmp	r3, #2
 8012354:	d074      	beq.n	8012440 <osMutexNew+0x124>
    if (attr != NULL) {
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d003      	beq.n	8012364 <osMutexNew+0x48>
      type = attr->attr_bits;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	623b      	str	r3, [r7, #32]
 8012362:	e001      	b.n	8012368 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8012364:	2300      	movs	r3, #0
 8012366:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8012368:	6a3b      	ldr	r3, [r7, #32]
 801236a:	f003 0301 	and.w	r3, r3, #1
 801236e:	2b00      	cmp	r3, #0
 8012370:	d002      	beq.n	8012378 <osMutexNew+0x5c>
      rmtx = 1U;
 8012372:	2301      	movs	r3, #1
 8012374:	61fb      	str	r3, [r7, #28]
 8012376:	e001      	b.n	801237c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8012378:	2300      	movs	r3, #0
 801237a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801237c:	6a3b      	ldr	r3, [r7, #32]
 801237e:	f003 0308 	and.w	r3, r3, #8
 8012382:	2b00      	cmp	r3, #0
 8012384:	d15c      	bne.n	8012440 <osMutexNew+0x124>
      mem = -1;
 8012386:	f04f 33ff 	mov.w	r3, #4294967295
 801238a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d015      	beq.n	80123be <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	689b      	ldr	r3, [r3, #8]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d006      	beq.n	80123a8 <osMutexNew+0x8c>
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	2b4f      	cmp	r3, #79	; 0x4f
 80123a0:	d902      	bls.n	80123a8 <osMutexNew+0x8c>
          mem = 1;
 80123a2:	2301      	movs	r3, #1
 80123a4:	61bb      	str	r3, [r7, #24]
 80123a6:	e00c      	b.n	80123c2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	689b      	ldr	r3, [r3, #8]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d108      	bne.n	80123c2 <osMutexNew+0xa6>
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	68db      	ldr	r3, [r3, #12]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d104      	bne.n	80123c2 <osMutexNew+0xa6>
            mem = 0;
 80123b8:	2300      	movs	r3, #0
 80123ba:	61bb      	str	r3, [r7, #24]
 80123bc:	e001      	b.n	80123c2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80123be:	2300      	movs	r3, #0
 80123c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	2b01      	cmp	r3, #1
 80123c6:	d112      	bne.n	80123ee <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d007      	beq.n	80123de <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	689b      	ldr	r3, [r3, #8]
 80123d2:	4619      	mov	r1, r3
 80123d4:	2004      	movs	r0, #4
 80123d6:	f000 fc0c 	bl	8012bf2 <xQueueCreateMutexStatic>
 80123da:	6278      	str	r0, [r7, #36]	; 0x24
 80123dc:	e016      	b.n	801240c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	689b      	ldr	r3, [r3, #8]
 80123e2:	4619      	mov	r1, r3
 80123e4:	2001      	movs	r0, #1
 80123e6:	f000 fc04 	bl	8012bf2 <xQueueCreateMutexStatic>
 80123ea:	6278      	str	r0, [r7, #36]	; 0x24
 80123ec:	e00e      	b.n	801240c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80123ee:	69bb      	ldr	r3, [r7, #24]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d10b      	bne.n	801240c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d004      	beq.n	8012404 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80123fa:	2004      	movs	r0, #4
 80123fc:	f000 fbe1 	bl	8012bc2 <xQueueCreateMutex>
 8012400:	6278      	str	r0, [r7, #36]	; 0x24
 8012402:	e003      	b.n	801240c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8012404:	2001      	movs	r0, #1
 8012406:	f000 fbdc 	bl	8012bc2 <xQueueCreateMutex>
 801240a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240e:	2b00      	cmp	r3, #0
 8012410:	d00c      	beq.n	801242c <osMutexNew+0x110>
        if (attr != NULL) {
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d003      	beq.n	8012420 <osMutexNew+0x104>
          name = attr->name;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	617b      	str	r3, [r7, #20]
 801241e:	e001      	b.n	8012424 <osMutexNew+0x108>
        } else {
          name = NULL;
 8012420:	2300      	movs	r3, #0
 8012422:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8012424:	6979      	ldr	r1, [r7, #20]
 8012426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012428:	f001 f812 	bl	8013450 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242e:	2b00      	cmp	r3, #0
 8012430:	d006      	beq.n	8012440 <osMutexNew+0x124>
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d003      	beq.n	8012440 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243a:	f043 0301 	orr.w	r3, r3, #1
 801243e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012442:	4618      	mov	r0, r3
 8012444:	3728      	adds	r7, #40	; 0x28
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}
 801244a:	bf00      	nop
 801244c:	2000111c 	.word	0x2000111c

08012450 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012450:	b580      	push	{r7, lr}
 8012452:	b08c      	sub	sp, #48	; 0x30
 8012454:	af02      	add	r7, sp, #8
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801245c:	2300      	movs	r3, #0
 801245e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012460:	f3ef 8305 	mrs	r3, IPSR
 8012464:	61bb      	str	r3, [r7, #24]
  return(result);
 8012466:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012468:	2b00      	cmp	r3, #0
 801246a:	d170      	bne.n	801254e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801246c:	f3ef 8310 	mrs	r3, PRIMASK
 8012470:	617b      	str	r3, [r7, #20]
  return(result);
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d105      	bne.n	8012484 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012478:	f3ef 8311 	mrs	r3, BASEPRI
 801247c:	613b      	str	r3, [r7, #16]
  return(result);
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d003      	beq.n	801248c <osMessageQueueNew+0x3c>
 8012484:	4b34      	ldr	r3, [pc, #208]	; (8012558 <osMessageQueueNew+0x108>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2b02      	cmp	r3, #2
 801248a:	d060      	beq.n	801254e <osMessageQueueNew+0xfe>
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d05d      	beq.n	801254e <osMessageQueueNew+0xfe>
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d05a      	beq.n	801254e <osMessageQueueNew+0xfe>
    mem = -1;
 8012498:	f04f 33ff 	mov.w	r3, #4294967295
 801249c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d029      	beq.n	80124f8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d012      	beq.n	80124d2 <osMessageQueueNew+0x82>
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	2b4f      	cmp	r3, #79	; 0x4f
 80124b2:	d90e      	bls.n	80124d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d00a      	beq.n	80124d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	695a      	ldr	r2, [r3, #20]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	68b9      	ldr	r1, [r7, #8]
 80124c4:	fb01 f303 	mul.w	r3, r1, r3
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d302      	bcc.n	80124d2 <osMessageQueueNew+0x82>
        mem = 1;
 80124cc:	2301      	movs	r3, #1
 80124ce:	623b      	str	r3, [r7, #32]
 80124d0:	e014      	b.n	80124fc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	689b      	ldr	r3, [r3, #8]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d110      	bne.n	80124fc <osMessageQueueNew+0xac>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d10c      	bne.n	80124fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d108      	bne.n	80124fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	695b      	ldr	r3, [r3, #20]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d104      	bne.n	80124fc <osMessageQueueNew+0xac>
          mem = 0;
 80124f2:	2300      	movs	r3, #0
 80124f4:	623b      	str	r3, [r7, #32]
 80124f6:	e001      	b.n	80124fc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80124f8:	2300      	movs	r3, #0
 80124fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80124fc:	6a3b      	ldr	r3, [r7, #32]
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d10c      	bne.n	801251c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	691a      	ldr	r2, [r3, #16]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6899      	ldr	r1, [r3, #8]
 801250a:	2300      	movs	r3, #0
 801250c:	9300      	str	r3, [sp, #0]
 801250e:	460b      	mov	r3, r1
 8012510:	68b9      	ldr	r1, [r7, #8]
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f000 fa5a 	bl	80129cc <xQueueGenericCreateStatic>
 8012518:	6278      	str	r0, [r7, #36]	; 0x24
 801251a:	e008      	b.n	801252e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 801251c:	6a3b      	ldr	r3, [r7, #32]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d105      	bne.n	801252e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012522:	2200      	movs	r2, #0
 8012524:	68b9      	ldr	r1, [r7, #8]
 8012526:	68f8      	ldr	r0, [r7, #12]
 8012528:	f000 facd 	bl	8012ac6 <xQueueGenericCreate>
 801252c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012530:	2b00      	cmp	r3, #0
 8012532:	d00c      	beq.n	801254e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d003      	beq.n	8012542 <osMessageQueueNew+0xf2>
        name = attr->name;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	61fb      	str	r3, [r7, #28]
 8012540:	e001      	b.n	8012546 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8012542:	2300      	movs	r3, #0
 8012544:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012546:	69f9      	ldr	r1, [r7, #28]
 8012548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801254a:	f000 ff81 	bl	8013450 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012550:	4618      	mov	r0, r3
 8012552:	3728      	adds	r7, #40	; 0x28
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	2000111c 	.word	0x2000111c

0801255c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801255c:	b580      	push	{r7, lr}
 801255e:	b08a      	sub	sp, #40	; 0x28
 8012560:	af00      	add	r7, sp, #0
 8012562:	60f8      	str	r0, [r7, #12]
 8012564:	60b9      	str	r1, [r7, #8]
 8012566:	603b      	str	r3, [r7, #0]
 8012568:	4613      	mov	r3, r2
 801256a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012570:	2300      	movs	r3, #0
 8012572:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012574:	f3ef 8305 	mrs	r3, IPSR
 8012578:	61fb      	str	r3, [r7, #28]
  return(result);
 801257a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801257c:	2b00      	cmp	r3, #0
 801257e:	d10f      	bne.n	80125a0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012580:	f3ef 8310 	mrs	r3, PRIMASK
 8012584:	61bb      	str	r3, [r7, #24]
  return(result);
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d105      	bne.n	8012598 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801258c:	f3ef 8311 	mrs	r3, BASEPRI
 8012590:	617b      	str	r3, [r7, #20]
  return(result);
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d02c      	beq.n	80125f2 <osMessageQueuePut+0x96>
 8012598:	4b28      	ldr	r3, [pc, #160]	; (801263c <osMessageQueuePut+0xe0>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	2b02      	cmp	r3, #2
 801259e:	d128      	bne.n	80125f2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80125a0:	6a3b      	ldr	r3, [r7, #32]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d005      	beq.n	80125b2 <osMessageQueuePut+0x56>
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d002      	beq.n	80125b2 <osMessageQueuePut+0x56>
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d003      	beq.n	80125ba <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80125b2:	f06f 0303 	mvn.w	r3, #3
 80125b6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80125b8:	e039      	b.n	801262e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80125ba:	2300      	movs	r3, #0
 80125bc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80125be:	f107 0210 	add.w	r2, r7, #16
 80125c2:	2300      	movs	r3, #0
 80125c4:	68b9      	ldr	r1, [r7, #8]
 80125c6:	6a38      	ldr	r0, [r7, #32]
 80125c8:	f000 fc30 	bl	8012e2c <xQueueGenericSendFromISR>
 80125cc:	4603      	mov	r3, r0
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	d003      	beq.n	80125da <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80125d2:	f06f 0302 	mvn.w	r3, #2
 80125d6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80125d8:	e029      	b.n	801262e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d026      	beq.n	801262e <osMessageQueuePut+0xd2>
 80125e0:	4b17      	ldr	r3, [pc, #92]	; (8012640 <osMessageQueuePut+0xe4>)
 80125e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125e6:	601a      	str	r2, [r3, #0]
 80125e8:	f3bf 8f4f 	dsb	sy
 80125ec:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80125f0:	e01d      	b.n	801262e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80125f2:	6a3b      	ldr	r3, [r7, #32]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d002      	beq.n	80125fe <osMessageQueuePut+0xa2>
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d103      	bne.n	8012606 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80125fe:	f06f 0303 	mvn.w	r3, #3
 8012602:	627b      	str	r3, [r7, #36]	; 0x24
 8012604:	e014      	b.n	8012630 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012606:	2300      	movs	r3, #0
 8012608:	683a      	ldr	r2, [r7, #0]
 801260a:	68b9      	ldr	r1, [r7, #8]
 801260c:	6a38      	ldr	r0, [r7, #32]
 801260e:	f000 fb0b 	bl	8012c28 <xQueueGenericSend>
 8012612:	4603      	mov	r3, r0
 8012614:	2b01      	cmp	r3, #1
 8012616:	d00b      	beq.n	8012630 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d003      	beq.n	8012626 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801261e:	f06f 0301 	mvn.w	r3, #1
 8012622:	627b      	str	r3, [r7, #36]	; 0x24
 8012624:	e004      	b.n	8012630 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012626:	f06f 0302 	mvn.w	r3, #2
 801262a:	627b      	str	r3, [r7, #36]	; 0x24
 801262c:	e000      	b.n	8012630 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801262e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012632:	4618      	mov	r0, r3
 8012634:	3728      	adds	r7, #40	; 0x28
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
 801263a:	bf00      	nop
 801263c:	2000111c 	.word	0x2000111c
 8012640:	e000ed04 	.word	0xe000ed04

08012644 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012644:	b580      	push	{r7, lr}
 8012646:	b08a      	sub	sp, #40	; 0x28
 8012648:	af00      	add	r7, sp, #0
 801264a:	60f8      	str	r0, [r7, #12]
 801264c:	60b9      	str	r1, [r7, #8]
 801264e:	607a      	str	r2, [r7, #4]
 8012650:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012656:	2300      	movs	r3, #0
 8012658:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801265a:	f3ef 8305 	mrs	r3, IPSR
 801265e:	61fb      	str	r3, [r7, #28]
  return(result);
 8012660:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012662:	2b00      	cmp	r3, #0
 8012664:	d10f      	bne.n	8012686 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012666:	f3ef 8310 	mrs	r3, PRIMASK
 801266a:	61bb      	str	r3, [r7, #24]
  return(result);
 801266c:	69bb      	ldr	r3, [r7, #24]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d105      	bne.n	801267e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012672:	f3ef 8311 	mrs	r3, BASEPRI
 8012676:	617b      	str	r3, [r7, #20]
  return(result);
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d02c      	beq.n	80126d8 <osMessageQueueGet+0x94>
 801267e:	4b28      	ldr	r3, [pc, #160]	; (8012720 <osMessageQueueGet+0xdc>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2b02      	cmp	r3, #2
 8012684:	d128      	bne.n	80126d8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012686:	6a3b      	ldr	r3, [r7, #32]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d005      	beq.n	8012698 <osMessageQueueGet+0x54>
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d002      	beq.n	8012698 <osMessageQueueGet+0x54>
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d003      	beq.n	80126a0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012698:	f06f 0303 	mvn.w	r3, #3
 801269c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801269e:	e038      	b.n	8012712 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80126a0:	2300      	movs	r3, #0
 80126a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80126a4:	f107 0310 	add.w	r3, r7, #16
 80126a8:	461a      	mov	r2, r3
 80126aa:	68b9      	ldr	r1, [r7, #8]
 80126ac:	6a38      	ldr	r0, [r7, #32]
 80126ae:	f000 fd3b 	bl	8013128 <xQueueReceiveFromISR>
 80126b2:	4603      	mov	r3, r0
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d003      	beq.n	80126c0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80126b8:	f06f 0302 	mvn.w	r3, #2
 80126bc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80126be:	e028      	b.n	8012712 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80126c0:	693b      	ldr	r3, [r7, #16]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d025      	beq.n	8012712 <osMessageQueueGet+0xce>
 80126c6:	4b17      	ldr	r3, [pc, #92]	; (8012724 <osMessageQueueGet+0xe0>)
 80126c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126cc:	601a      	str	r2, [r3, #0]
 80126ce:	f3bf 8f4f 	dsb	sy
 80126d2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80126d6:	e01c      	b.n	8012712 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80126d8:	6a3b      	ldr	r3, [r7, #32]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d002      	beq.n	80126e4 <osMessageQueueGet+0xa0>
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d103      	bne.n	80126ec <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80126e4:	f06f 0303 	mvn.w	r3, #3
 80126e8:	627b      	str	r3, [r7, #36]	; 0x24
 80126ea:	e013      	b.n	8012714 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80126ec:	683a      	ldr	r2, [r7, #0]
 80126ee:	68b9      	ldr	r1, [r7, #8]
 80126f0:	6a38      	ldr	r0, [r7, #32]
 80126f2:	f000 fc37 	bl	8012f64 <xQueueReceive>
 80126f6:	4603      	mov	r3, r0
 80126f8:	2b01      	cmp	r3, #1
 80126fa:	d00b      	beq.n	8012714 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d003      	beq.n	801270a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8012702:	f06f 0301 	mvn.w	r3, #1
 8012706:	627b      	str	r3, [r7, #36]	; 0x24
 8012708:	e004      	b.n	8012714 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801270a:	f06f 0302 	mvn.w	r3, #2
 801270e:	627b      	str	r3, [r7, #36]	; 0x24
 8012710:	e000      	b.n	8012714 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012712:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012716:	4618      	mov	r0, r3
 8012718:	3728      	adds	r7, #40	; 0x28
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	2000111c 	.word	0x2000111c
 8012724:	e000ed04 	.word	0xe000ed04

08012728 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012728:	b480      	push	{r7}
 801272a:	b085      	sub	sp, #20
 801272c:	af00      	add	r7, sp, #0
 801272e:	60f8      	str	r0, [r7, #12]
 8012730:	60b9      	str	r1, [r7, #8]
 8012732:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	4a07      	ldr	r2, [pc, #28]	; (8012754 <vApplicationGetIdleTaskMemory+0x2c>)
 8012738:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	4a06      	ldr	r2, [pc, #24]	; (8012758 <vApplicationGetIdleTaskMemory+0x30>)
 801273e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2280      	movs	r2, #128	; 0x80
 8012744:	601a      	str	r2, [r3, #0]
}
 8012746:	bf00      	nop
 8012748:	3714      	adds	r7, #20
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	20001120 	.word	0x20001120
 8012758:	20001180 	.word	0x20001180

0801275c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801275c:	b480      	push	{r7}
 801275e:	b085      	sub	sp, #20
 8012760:	af00      	add	r7, sp, #0
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	4a07      	ldr	r2, [pc, #28]	; (8012788 <vApplicationGetTimerTaskMemory+0x2c>)
 801276c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	4a06      	ldr	r2, [pc, #24]	; (801278c <vApplicationGetTimerTaskMemory+0x30>)
 8012772:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f44f 7280 	mov.w	r2, #256	; 0x100
 801277a:	601a      	str	r2, [r3, #0]
}
 801277c:	bf00      	nop
 801277e:	3714      	adds	r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr
 8012788:	20001380 	.word	0x20001380
 801278c:	200013e0 	.word	0x200013e0

08012790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f103 0208 	add.w	r2, r3, #8
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f04f 32ff 	mov.w	r2, #4294967295
 80127a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f103 0208 	add.w	r2, r3, #8
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f103 0208 	add.w	r2, r3, #8
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2200      	movs	r2, #0
 80127c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80127c4:	bf00      	nop
 80127c6:	370c      	adds	r7, #12
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr

080127d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2200      	movs	r2, #0
 80127dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80127de:	bf00      	nop
 80127e0:	370c      	adds	r7, #12
 80127e2:	46bd      	mov	sp, r7
 80127e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e8:	4770      	bx	lr

080127ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80127ea:	b480      	push	{r7}
 80127ec:	b085      	sub	sp, #20
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6078      	str	r0, [r7, #4]
 80127f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	68fa      	ldr	r2, [r7, #12]
 80127fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	689a      	ldr	r2, [r3, #8]
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	689b      	ldr	r3, [r3, #8]
 801280c:	683a      	ldr	r2, [r7, #0]
 801280e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	683a      	ldr	r2, [r7, #0]
 8012814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	687a      	ldr	r2, [r7, #4]
 801281a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	1c5a      	adds	r2, r3, #1
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	601a      	str	r2, [r3, #0]
}
 8012826:	bf00      	nop
 8012828:	3714      	adds	r7, #20
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr

08012832 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012832:	b480      	push	{r7}
 8012834:	b085      	sub	sp, #20
 8012836:	af00      	add	r7, sp, #0
 8012838:	6078      	str	r0, [r7, #4]
 801283a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012848:	d103      	bne.n	8012852 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	691b      	ldr	r3, [r3, #16]
 801284e:	60fb      	str	r3, [r7, #12]
 8012850:	e00c      	b.n	801286c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	3308      	adds	r3, #8
 8012856:	60fb      	str	r3, [r7, #12]
 8012858:	e002      	b.n	8012860 <vListInsert+0x2e>
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	60fb      	str	r3, [r7, #12]
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	68ba      	ldr	r2, [r7, #8]
 8012868:	429a      	cmp	r2, r3
 801286a:	d2f6      	bcs.n	801285a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	685a      	ldr	r2, [r3, #4]
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	683a      	ldr	r2, [r7, #0]
 801287a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	683a      	ldr	r2, [r7, #0]
 8012886:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	1c5a      	adds	r2, r3, #1
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	601a      	str	r2, [r3, #0]
}
 8012898:	bf00      	nop
 801289a:	3714      	adds	r7, #20
 801289c:	46bd      	mov	sp, r7
 801289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a2:	4770      	bx	lr

080128a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80128a4:	b480      	push	{r7}
 80128a6:	b085      	sub	sp, #20
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	691b      	ldr	r3, [r3, #16]
 80128b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	687a      	ldr	r2, [r7, #4]
 80128b8:	6892      	ldr	r2, [r2, #8]
 80128ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	689b      	ldr	r3, [r3, #8]
 80128c0:	687a      	ldr	r2, [r7, #4]
 80128c2:	6852      	ldr	r2, [r2, #4]
 80128c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	687a      	ldr	r2, [r7, #4]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d103      	bne.n	80128d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	689a      	ldr	r2, [r3, #8]
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2200      	movs	r2, #0
 80128dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	1e5a      	subs	r2, r3, #1
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3714      	adds	r7, #20
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr

080128f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d10b      	bne.n	8012924 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012910:	b672      	cpsid	i
 8012912:	f383 8811 	msr	BASEPRI, r3
 8012916:	f3bf 8f6f 	isb	sy
 801291a:	f3bf 8f4f 	dsb	sy
 801291e:	b662      	cpsie	i
 8012920:	60bb      	str	r3, [r7, #8]
 8012922:	e7fe      	b.n	8012922 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8012924:	f002 f9f8 	bl	8014d18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	681a      	ldr	r2, [r3, #0]
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012930:	68f9      	ldr	r1, [r7, #12]
 8012932:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012934:	fb01 f303 	mul.w	r3, r1, r3
 8012938:	441a      	add	r2, r3
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2200      	movs	r2, #0
 8012942:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012954:	3b01      	subs	r3, #1
 8012956:	68f9      	ldr	r1, [r7, #12]
 8012958:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801295a:	fb01 f303 	mul.w	r3, r1, r3
 801295e:	441a      	add	r2, r3
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	22ff      	movs	r2, #255	; 0xff
 8012968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	22ff      	movs	r2, #255	; 0xff
 8012970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d114      	bne.n	80129a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	691b      	ldr	r3, [r3, #16]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d01a      	beq.n	80129b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	3310      	adds	r3, #16
 8012986:	4618      	mov	r0, r3
 8012988:	f001 fac6 	bl	8013f18 <xTaskRemoveFromEventList>
 801298c:	4603      	mov	r3, r0
 801298e:	2b00      	cmp	r3, #0
 8012990:	d012      	beq.n	80129b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012992:	4b0d      	ldr	r3, [pc, #52]	; (80129c8 <xQueueGenericReset+0xd0>)
 8012994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012998:	601a      	str	r2, [r3, #0]
 801299a:	f3bf 8f4f 	dsb	sy
 801299e:	f3bf 8f6f 	isb	sy
 80129a2:	e009      	b.n	80129b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	3310      	adds	r3, #16
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7ff fef1 	bl	8012790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	3324      	adds	r3, #36	; 0x24
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7ff feec 	bl	8012790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80129b8:	f002 f9e0 	bl	8014d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80129bc:	2301      	movs	r3, #1
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	e000ed04 	.word	0xe000ed04

080129cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b08e      	sub	sp, #56	; 0x38
 80129d0:	af02      	add	r7, sp, #8
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	607a      	str	r2, [r7, #4]
 80129d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d10b      	bne.n	80129f8 <xQueueGenericCreateStatic+0x2c>
 80129e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e4:	b672      	cpsid	i
 80129e6:	f383 8811 	msr	BASEPRI, r3
 80129ea:	f3bf 8f6f 	isb	sy
 80129ee:	f3bf 8f4f 	dsb	sy
 80129f2:	b662      	cpsie	i
 80129f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80129f6:	e7fe      	b.n	80129f6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d10b      	bne.n	8012a16 <xQueueGenericCreateStatic+0x4a>
 80129fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a02:	b672      	cpsid	i
 8012a04:	f383 8811 	msr	BASEPRI, r3
 8012a08:	f3bf 8f6f 	isb	sy
 8012a0c:	f3bf 8f4f 	dsb	sy
 8012a10:	b662      	cpsie	i
 8012a12:	627b      	str	r3, [r7, #36]	; 0x24
 8012a14:	e7fe      	b.n	8012a14 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d002      	beq.n	8012a22 <xQueueGenericCreateStatic+0x56>
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <xQueueGenericCreateStatic+0x5a>
 8012a22:	2301      	movs	r3, #1
 8012a24:	e000      	b.n	8012a28 <xQueueGenericCreateStatic+0x5c>
 8012a26:	2300      	movs	r3, #0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d10b      	bne.n	8012a44 <xQueueGenericCreateStatic+0x78>
 8012a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a30:	b672      	cpsid	i
 8012a32:	f383 8811 	msr	BASEPRI, r3
 8012a36:	f3bf 8f6f 	isb	sy
 8012a3a:	f3bf 8f4f 	dsb	sy
 8012a3e:	b662      	cpsie	i
 8012a40:	623b      	str	r3, [r7, #32]
 8012a42:	e7fe      	b.n	8012a42 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d102      	bne.n	8012a50 <xQueueGenericCreateStatic+0x84>
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d101      	bne.n	8012a54 <xQueueGenericCreateStatic+0x88>
 8012a50:	2301      	movs	r3, #1
 8012a52:	e000      	b.n	8012a56 <xQueueGenericCreateStatic+0x8a>
 8012a54:	2300      	movs	r3, #0
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d10b      	bne.n	8012a72 <xQueueGenericCreateStatic+0xa6>
 8012a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a5e:	b672      	cpsid	i
 8012a60:	f383 8811 	msr	BASEPRI, r3
 8012a64:	f3bf 8f6f 	isb	sy
 8012a68:	f3bf 8f4f 	dsb	sy
 8012a6c:	b662      	cpsie	i
 8012a6e:	61fb      	str	r3, [r7, #28]
 8012a70:	e7fe      	b.n	8012a70 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012a72:	2350      	movs	r3, #80	; 0x50
 8012a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	2b50      	cmp	r3, #80	; 0x50
 8012a7a:	d00b      	beq.n	8012a94 <xQueueGenericCreateStatic+0xc8>
 8012a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a80:	b672      	cpsid	i
 8012a82:	f383 8811 	msr	BASEPRI, r3
 8012a86:	f3bf 8f6f 	isb	sy
 8012a8a:	f3bf 8f4f 	dsb	sy
 8012a8e:	b662      	cpsie	i
 8012a90:	61bb      	str	r3, [r7, #24]
 8012a92:	e7fe      	b.n	8012a92 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012a94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d00d      	beq.n	8012abc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012aa8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	4613      	mov	r3, r2
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	68b9      	ldr	r1, [r7, #8]
 8012ab6:	68f8      	ldr	r0, [r7, #12]
 8012ab8:	f000 f846 	bl	8012b48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3730      	adds	r7, #48	; 0x30
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b08a      	sub	sp, #40	; 0x28
 8012aca:	af02      	add	r7, sp, #8
 8012acc:	60f8      	str	r0, [r7, #12]
 8012ace:	60b9      	str	r1, [r7, #8]
 8012ad0:	4613      	mov	r3, r2
 8012ad2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d10b      	bne.n	8012af2 <xQueueGenericCreate+0x2c>
 8012ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ade:	b672      	cpsid	i
 8012ae0:	f383 8811 	msr	BASEPRI, r3
 8012ae4:	f3bf 8f6f 	isb	sy
 8012ae8:	f3bf 8f4f 	dsb	sy
 8012aec:	b662      	cpsie	i
 8012aee:	613b      	str	r3, [r7, #16]
 8012af0:	e7fe      	b.n	8012af0 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d102      	bne.n	8012afe <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012af8:	2300      	movs	r3, #0
 8012afa:	61fb      	str	r3, [r7, #28]
 8012afc:	e004      	b.n	8012b08 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	68ba      	ldr	r2, [r7, #8]
 8012b02:	fb02 f303 	mul.w	r3, r2, r3
 8012b06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012b08:	69fb      	ldr	r3, [r7, #28]
 8012b0a:	3350      	adds	r3, #80	; 0x50
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f002 fa25 	bl	8014f5c <pvPortMalloc>
 8012b12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012b14:	69bb      	ldr	r3, [r7, #24]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d011      	beq.n	8012b3e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012b1a:	69bb      	ldr	r3, [r7, #24]
 8012b1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	3350      	adds	r3, #80	; 0x50
 8012b22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012b24:	69bb      	ldr	r3, [r7, #24]
 8012b26:	2200      	movs	r2, #0
 8012b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012b2c:	79fa      	ldrb	r2, [r7, #7]
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	9300      	str	r3, [sp, #0]
 8012b32:	4613      	mov	r3, r2
 8012b34:	697a      	ldr	r2, [r7, #20]
 8012b36:	68b9      	ldr	r1, [r7, #8]
 8012b38:	68f8      	ldr	r0, [r7, #12]
 8012b3a:	f000 f805 	bl	8012b48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012b3e:	69bb      	ldr	r3, [r7, #24]
	}
 8012b40:	4618      	mov	r0, r3
 8012b42:	3720      	adds	r7, #32
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
 8012b54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d103      	bne.n	8012b64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	69ba      	ldr	r2, [r7, #24]
 8012b60:	601a      	str	r2, [r3, #0]
 8012b62:	e002      	b.n	8012b6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	687a      	ldr	r2, [r7, #4]
 8012b68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012b6a:	69bb      	ldr	r3, [r7, #24]
 8012b6c:	68fa      	ldr	r2, [r7, #12]
 8012b6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012b70:	69bb      	ldr	r3, [r7, #24]
 8012b72:	68ba      	ldr	r2, [r7, #8]
 8012b74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012b76:	2101      	movs	r1, #1
 8012b78:	69b8      	ldr	r0, [r7, #24]
 8012b7a:	f7ff febd 	bl	80128f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012b7e:	69bb      	ldr	r3, [r7, #24]
 8012b80:	78fa      	ldrb	r2, [r7, #3]
 8012b82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012b86:	bf00      	nop
 8012b88:	3710      	adds	r7, #16
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}

08012b8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012b8e:	b580      	push	{r7, lr}
 8012b90:	b082      	sub	sp, #8
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d00e      	beq.n	8012bba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012bae:	2300      	movs	r3, #0
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	2100      	movs	r1, #0
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f000 f837 	bl	8012c28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012bba:	bf00      	nop
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}

08012bc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012bc2:	b580      	push	{r7, lr}
 8012bc4:	b086      	sub	sp, #24
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	4603      	mov	r3, r0
 8012bca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	617b      	str	r3, [r7, #20]
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012bd4:	79fb      	ldrb	r3, [r7, #7]
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	6939      	ldr	r1, [r7, #16]
 8012bda:	6978      	ldr	r0, [r7, #20]
 8012bdc:	f7ff ff73 	bl	8012ac6 <xQueueGenericCreate>
 8012be0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012be2:	68f8      	ldr	r0, [r7, #12]
 8012be4:	f7ff ffd3 	bl	8012b8e <prvInitialiseMutex>

		return xNewQueue;
 8012be8:	68fb      	ldr	r3, [r7, #12]
	}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3718      	adds	r7, #24
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}

08012bf2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b088      	sub	sp, #32
 8012bf6:	af02      	add	r7, sp, #8
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	6039      	str	r1, [r7, #0]
 8012bfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012bfe:	2301      	movs	r3, #1
 8012c00:	617b      	str	r3, [r7, #20]
 8012c02:	2300      	movs	r3, #0
 8012c04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012c06:	79fb      	ldrb	r3, [r7, #7]
 8012c08:	9300      	str	r3, [sp, #0]
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	6939      	ldr	r1, [r7, #16]
 8012c10:	6978      	ldr	r0, [r7, #20]
 8012c12:	f7ff fedb 	bl	80129cc <xQueueGenericCreateStatic>
 8012c16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f7ff ffb8 	bl	8012b8e <prvInitialiseMutex>

		return xNewQueue;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
	}
 8012c20:	4618      	mov	r0, r3
 8012c22:	3718      	adds	r7, #24
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b08e      	sub	sp, #56	; 0x38
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	607a      	str	r2, [r7, #4]
 8012c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012c36:	2300      	movs	r3, #0
 8012c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d10b      	bne.n	8012c5c <xQueueGenericSend+0x34>
 8012c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c48:	b672      	cpsid	i
 8012c4a:	f383 8811 	msr	BASEPRI, r3
 8012c4e:	f3bf 8f6f 	isb	sy
 8012c52:	f3bf 8f4f 	dsb	sy
 8012c56:	b662      	cpsie	i
 8012c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c5a:	e7fe      	b.n	8012c5a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d103      	bne.n	8012c6a <xQueueGenericSend+0x42>
 8012c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d101      	bne.n	8012c6e <xQueueGenericSend+0x46>
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	e000      	b.n	8012c70 <xQueueGenericSend+0x48>
 8012c6e:	2300      	movs	r3, #0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d10b      	bne.n	8012c8c <xQueueGenericSend+0x64>
 8012c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c78:	b672      	cpsid	i
 8012c7a:	f383 8811 	msr	BASEPRI, r3
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	f3bf 8f4f 	dsb	sy
 8012c86:	b662      	cpsie	i
 8012c88:	627b      	str	r3, [r7, #36]	; 0x24
 8012c8a:	e7fe      	b.n	8012c8a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	2b02      	cmp	r3, #2
 8012c90:	d103      	bne.n	8012c9a <xQueueGenericSend+0x72>
 8012c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c96:	2b01      	cmp	r3, #1
 8012c98:	d101      	bne.n	8012c9e <xQueueGenericSend+0x76>
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e000      	b.n	8012ca0 <xQueueGenericSend+0x78>
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d10b      	bne.n	8012cbc <xQueueGenericSend+0x94>
 8012ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca8:	b672      	cpsid	i
 8012caa:	f383 8811 	msr	BASEPRI, r3
 8012cae:	f3bf 8f6f 	isb	sy
 8012cb2:	f3bf 8f4f 	dsb	sy
 8012cb6:	b662      	cpsie	i
 8012cb8:	623b      	str	r3, [r7, #32]
 8012cba:	e7fe      	b.n	8012cba <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012cbc:	f001 faec 	bl	8014298 <xTaskGetSchedulerState>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d102      	bne.n	8012ccc <xQueueGenericSend+0xa4>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d101      	bne.n	8012cd0 <xQueueGenericSend+0xa8>
 8012ccc:	2301      	movs	r3, #1
 8012cce:	e000      	b.n	8012cd2 <xQueueGenericSend+0xaa>
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d10b      	bne.n	8012cee <xQueueGenericSend+0xc6>
 8012cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cda:	b672      	cpsid	i
 8012cdc:	f383 8811 	msr	BASEPRI, r3
 8012ce0:	f3bf 8f6f 	isb	sy
 8012ce4:	f3bf 8f4f 	dsb	sy
 8012ce8:	b662      	cpsie	i
 8012cea:	61fb      	str	r3, [r7, #28]
 8012cec:	e7fe      	b.n	8012cec <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012cee:	f002 f813 	bl	8014d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	d302      	bcc.n	8012d04 <xQueueGenericSend+0xdc>
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	2b02      	cmp	r3, #2
 8012d02:	d129      	bne.n	8012d58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012d04:	683a      	ldr	r2, [r7, #0]
 8012d06:	68b9      	ldr	r1, [r7, #8]
 8012d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d0a:	f000 fa90 	bl	801322e <prvCopyDataToQueue>
 8012d0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d010      	beq.n	8012d3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d1a:	3324      	adds	r3, #36	; 0x24
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f001 f8fb 	bl	8013f18 <xTaskRemoveFromEventList>
 8012d22:	4603      	mov	r3, r0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d013      	beq.n	8012d50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012d28:	4b3f      	ldr	r3, [pc, #252]	; (8012e28 <xQueueGenericSend+0x200>)
 8012d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d2e:	601a      	str	r2, [r3, #0]
 8012d30:	f3bf 8f4f 	dsb	sy
 8012d34:	f3bf 8f6f 	isb	sy
 8012d38:	e00a      	b.n	8012d50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d007      	beq.n	8012d50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012d40:	4b39      	ldr	r3, [pc, #228]	; (8012e28 <xQueueGenericSend+0x200>)
 8012d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d46:	601a      	str	r2, [r3, #0]
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012d50:	f002 f814 	bl	8014d7c <vPortExitCritical>
				return pdPASS;
 8012d54:	2301      	movs	r3, #1
 8012d56:	e063      	b.n	8012e20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d103      	bne.n	8012d66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012d5e:	f002 f80d 	bl	8014d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012d62:	2300      	movs	r3, #0
 8012d64:	e05c      	b.n	8012e20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d106      	bne.n	8012d7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012d6c:	f107 0314 	add.w	r3, r7, #20
 8012d70:	4618      	mov	r0, r3
 8012d72:	f001 f935 	bl	8013fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012d76:	2301      	movs	r3, #1
 8012d78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012d7a:	f001 ffff 	bl	8014d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012d7e:	f000 fe7f 	bl	8013a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012d82:	f001 ffc9 	bl	8014d18 <vPortEnterCritical>
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d8c:	b25b      	sxtb	r3, r3
 8012d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d92:	d103      	bne.n	8012d9c <xQueueGenericSend+0x174>
 8012d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d96:	2200      	movs	r2, #0
 8012d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012da2:	b25b      	sxtb	r3, r3
 8012da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012da8:	d103      	bne.n	8012db2 <xQueueGenericSend+0x18a>
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	2200      	movs	r2, #0
 8012dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012db2:	f001 ffe3 	bl	8014d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012db6:	1d3a      	adds	r2, r7, #4
 8012db8:	f107 0314 	add.w	r3, r7, #20
 8012dbc:	4611      	mov	r1, r2
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f001 f924 	bl	801400c <xTaskCheckForTimeOut>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d124      	bne.n	8012e14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dcc:	f000 fb27 	bl	801341e <prvIsQueueFull>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d018      	beq.n	8012e08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd8:	3310      	adds	r3, #16
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	4611      	mov	r1, r2
 8012dde:	4618      	mov	r0, r3
 8012de0:	f001 f848 	bl	8013e74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012de6:	f000 fab2 	bl	801334e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012dea:	f000 fe57 	bl	8013a9c <xTaskResumeAll>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	f47f af7c 	bne.w	8012cee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012df6:	4b0c      	ldr	r3, [pc, #48]	; (8012e28 <xQueueGenericSend+0x200>)
 8012df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dfc:	601a      	str	r2, [r3, #0]
 8012dfe:	f3bf 8f4f 	dsb	sy
 8012e02:	f3bf 8f6f 	isb	sy
 8012e06:	e772      	b.n	8012cee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e0a:	f000 faa0 	bl	801334e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012e0e:	f000 fe45 	bl	8013a9c <xTaskResumeAll>
 8012e12:	e76c      	b.n	8012cee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e16:	f000 fa9a 	bl	801334e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012e1a:	f000 fe3f 	bl	8013a9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012e1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3738      	adds	r7, #56	; 0x38
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	e000ed04 	.word	0xe000ed04

08012e2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b08e      	sub	sp, #56	; 0x38
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60f8      	str	r0, [r7, #12]
 8012e34:	60b9      	str	r1, [r7, #8]
 8012e36:	607a      	str	r2, [r7, #4]
 8012e38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d10b      	bne.n	8012e5c <xQueueGenericSendFromISR+0x30>
 8012e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e48:	b672      	cpsid	i
 8012e4a:	f383 8811 	msr	BASEPRI, r3
 8012e4e:	f3bf 8f6f 	isb	sy
 8012e52:	f3bf 8f4f 	dsb	sy
 8012e56:	b662      	cpsie	i
 8012e58:	627b      	str	r3, [r7, #36]	; 0x24
 8012e5a:	e7fe      	b.n	8012e5a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d103      	bne.n	8012e6a <xQueueGenericSendFromISR+0x3e>
 8012e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d101      	bne.n	8012e6e <xQueueGenericSendFromISR+0x42>
 8012e6a:	2301      	movs	r3, #1
 8012e6c:	e000      	b.n	8012e70 <xQueueGenericSendFromISR+0x44>
 8012e6e:	2300      	movs	r3, #0
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d10b      	bne.n	8012e8c <xQueueGenericSendFromISR+0x60>
 8012e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e78:	b672      	cpsid	i
 8012e7a:	f383 8811 	msr	BASEPRI, r3
 8012e7e:	f3bf 8f6f 	isb	sy
 8012e82:	f3bf 8f4f 	dsb	sy
 8012e86:	b662      	cpsie	i
 8012e88:	623b      	str	r3, [r7, #32]
 8012e8a:	e7fe      	b.n	8012e8a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	2b02      	cmp	r3, #2
 8012e90:	d103      	bne.n	8012e9a <xQueueGenericSendFromISR+0x6e>
 8012e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e96:	2b01      	cmp	r3, #1
 8012e98:	d101      	bne.n	8012e9e <xQueueGenericSendFromISR+0x72>
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	e000      	b.n	8012ea0 <xQueueGenericSendFromISR+0x74>
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d10b      	bne.n	8012ebc <xQueueGenericSendFromISR+0x90>
 8012ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea8:	b672      	cpsid	i
 8012eaa:	f383 8811 	msr	BASEPRI, r3
 8012eae:	f3bf 8f6f 	isb	sy
 8012eb2:	f3bf 8f4f 	dsb	sy
 8012eb6:	b662      	cpsie	i
 8012eb8:	61fb      	str	r3, [r7, #28]
 8012eba:	e7fe      	b.n	8012eba <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ebc:	f002 f80c 	bl	8014ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012ec0:	f3ef 8211 	mrs	r2, BASEPRI
 8012ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec8:	b672      	cpsid	i
 8012eca:	f383 8811 	msr	BASEPRI, r3
 8012ece:	f3bf 8f6f 	isb	sy
 8012ed2:	f3bf 8f4f 	dsb	sy
 8012ed6:	b662      	cpsie	i
 8012ed8:	61ba      	str	r2, [r7, #24]
 8012eda:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012edc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ede:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d302      	bcc.n	8012ef2 <xQueueGenericSendFromISR+0xc6>
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	2b02      	cmp	r3, #2
 8012ef0:	d12c      	bne.n	8012f4c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012efc:	683a      	ldr	r2, [r7, #0]
 8012efe:	68b9      	ldr	r1, [r7, #8]
 8012f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f02:	f000 f994 	bl	801322e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012f06:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f0e:	d112      	bne.n	8012f36 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d016      	beq.n	8012f46 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f1a:	3324      	adds	r3, #36	; 0x24
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f000 fffb 	bl	8013f18 <xTaskRemoveFromEventList>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d00e      	beq.n	8012f46 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d00b      	beq.n	8012f46 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2201      	movs	r2, #1
 8012f32:	601a      	str	r2, [r3, #0]
 8012f34:	e007      	b.n	8012f46 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012f36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	b2db      	uxtb	r3, r3
 8012f3e:	b25a      	sxtb	r2, r3
 8012f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012f46:	2301      	movs	r3, #1
 8012f48:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012f4a:	e001      	b.n	8012f50 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8012f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f52:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3738      	adds	r7, #56	; 0x38
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}

08012f64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b08c      	sub	sp, #48	; 0x30
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012f70:	2300      	movs	r3, #0
 8012f72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d10b      	bne.n	8012f96 <xQueueReceive+0x32>
	__asm volatile
 8012f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f82:	b672      	cpsid	i
 8012f84:	f383 8811 	msr	BASEPRI, r3
 8012f88:	f3bf 8f6f 	isb	sy
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	b662      	cpsie	i
 8012f92:	623b      	str	r3, [r7, #32]
 8012f94:	e7fe      	b.n	8012f94 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d103      	bne.n	8012fa4 <xQueueReceive+0x40>
 8012f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d101      	bne.n	8012fa8 <xQueueReceive+0x44>
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	e000      	b.n	8012faa <xQueueReceive+0x46>
 8012fa8:	2300      	movs	r3, #0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d10b      	bne.n	8012fc6 <xQueueReceive+0x62>
 8012fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb2:	b672      	cpsid	i
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	b662      	cpsie	i
 8012fc2:	61fb      	str	r3, [r7, #28]
 8012fc4:	e7fe      	b.n	8012fc4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fc6:	f001 f967 	bl	8014298 <xTaskGetSchedulerState>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d102      	bne.n	8012fd6 <xQueueReceive+0x72>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d101      	bne.n	8012fda <xQueueReceive+0x76>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	e000      	b.n	8012fdc <xQueueReceive+0x78>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d10b      	bne.n	8012ff8 <xQueueReceive+0x94>
 8012fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe4:	b672      	cpsid	i
 8012fe6:	f383 8811 	msr	BASEPRI, r3
 8012fea:	f3bf 8f6f 	isb	sy
 8012fee:	f3bf 8f4f 	dsb	sy
 8012ff2:	b662      	cpsie	i
 8012ff4:	61bb      	str	r3, [r7, #24]
 8012ff6:	e7fe      	b.n	8012ff6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ff8:	f001 fe8e 	bl	8014d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013000:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013004:	2b00      	cmp	r3, #0
 8013006:	d01f      	beq.n	8013048 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013008:	68b9      	ldr	r1, [r7, #8]
 801300a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801300c:	f000 f979 	bl	8013302 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013012:	1e5a      	subs	r2, r3, #1
 8013014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013016:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801301a:	691b      	ldr	r3, [r3, #16]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d00f      	beq.n	8013040 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013022:	3310      	adds	r3, #16
 8013024:	4618      	mov	r0, r3
 8013026:	f000 ff77 	bl	8013f18 <xTaskRemoveFromEventList>
 801302a:	4603      	mov	r3, r0
 801302c:	2b00      	cmp	r3, #0
 801302e:	d007      	beq.n	8013040 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013030:	4b3c      	ldr	r3, [pc, #240]	; (8013124 <xQueueReceive+0x1c0>)
 8013032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013036:	601a      	str	r2, [r3, #0]
 8013038:	f3bf 8f4f 	dsb	sy
 801303c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013040:	f001 fe9c 	bl	8014d7c <vPortExitCritical>
				return pdPASS;
 8013044:	2301      	movs	r3, #1
 8013046:	e069      	b.n	801311c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d103      	bne.n	8013056 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801304e:	f001 fe95 	bl	8014d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013052:	2300      	movs	r3, #0
 8013054:	e062      	b.n	801311c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013058:	2b00      	cmp	r3, #0
 801305a:	d106      	bne.n	801306a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801305c:	f107 0310 	add.w	r3, r7, #16
 8013060:	4618      	mov	r0, r3
 8013062:	f000 ffbd 	bl	8013fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013066:	2301      	movs	r3, #1
 8013068:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801306a:	f001 fe87 	bl	8014d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801306e:	f000 fd07 	bl	8013a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013072:	f001 fe51 	bl	8014d18 <vPortEnterCritical>
 8013076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801307c:	b25b      	sxtb	r3, r3
 801307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013082:	d103      	bne.n	801308c <xQueueReceive+0x128>
 8013084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013086:	2200      	movs	r2, #0
 8013088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013092:	b25b      	sxtb	r3, r3
 8013094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013098:	d103      	bne.n	80130a2 <xQueueReceive+0x13e>
 801309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801309c:	2200      	movs	r2, #0
 801309e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130a2:	f001 fe6b 	bl	8014d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130a6:	1d3a      	adds	r2, r7, #4
 80130a8:	f107 0310 	add.w	r3, r7, #16
 80130ac:	4611      	mov	r1, r2
 80130ae:	4618      	mov	r0, r3
 80130b0:	f000 ffac 	bl	801400c <xTaskCheckForTimeOut>
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d123      	bne.n	8013102 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130bc:	f000 f999 	bl	80133f2 <prvIsQueueEmpty>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d017      	beq.n	80130f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80130c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c8:	3324      	adds	r3, #36	; 0x24
 80130ca:	687a      	ldr	r2, [r7, #4]
 80130cc:	4611      	mov	r1, r2
 80130ce:	4618      	mov	r0, r3
 80130d0:	f000 fed0 	bl	8013e74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80130d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130d6:	f000 f93a 	bl	801334e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80130da:	f000 fcdf 	bl	8013a9c <xTaskResumeAll>
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d189      	bne.n	8012ff8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80130e4:	4b0f      	ldr	r3, [pc, #60]	; (8013124 <xQueueReceive+0x1c0>)
 80130e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130ea:	601a      	str	r2, [r3, #0]
 80130ec:	f3bf 8f4f 	dsb	sy
 80130f0:	f3bf 8f6f 	isb	sy
 80130f4:	e780      	b.n	8012ff8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80130f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130f8:	f000 f929 	bl	801334e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130fc:	f000 fcce 	bl	8013a9c <xTaskResumeAll>
 8013100:	e77a      	b.n	8012ff8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013104:	f000 f923 	bl	801334e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013108:	f000 fcc8 	bl	8013a9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801310c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801310e:	f000 f970 	bl	80133f2 <prvIsQueueEmpty>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	f43f af6f 	beq.w	8012ff8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801311a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801311c:	4618      	mov	r0, r3
 801311e:	3730      	adds	r7, #48	; 0x30
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	e000ed04 	.word	0xe000ed04

08013128 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b08e      	sub	sp, #56	; 0x38
 801312c:	af00      	add	r7, sp, #0
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	60b9      	str	r1, [r7, #8]
 8013132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10b      	bne.n	8013156 <xQueueReceiveFromISR+0x2e>
 801313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013142:	b672      	cpsid	i
 8013144:	f383 8811 	msr	BASEPRI, r3
 8013148:	f3bf 8f6f 	isb	sy
 801314c:	f3bf 8f4f 	dsb	sy
 8013150:	b662      	cpsie	i
 8013152:	623b      	str	r3, [r7, #32]
 8013154:	e7fe      	b.n	8013154 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d103      	bne.n	8013164 <xQueueReceiveFromISR+0x3c>
 801315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013160:	2b00      	cmp	r3, #0
 8013162:	d101      	bne.n	8013168 <xQueueReceiveFromISR+0x40>
 8013164:	2301      	movs	r3, #1
 8013166:	e000      	b.n	801316a <xQueueReceiveFromISR+0x42>
 8013168:	2300      	movs	r3, #0
 801316a:	2b00      	cmp	r3, #0
 801316c:	d10b      	bne.n	8013186 <xQueueReceiveFromISR+0x5e>
 801316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013172:	b672      	cpsid	i
 8013174:	f383 8811 	msr	BASEPRI, r3
 8013178:	f3bf 8f6f 	isb	sy
 801317c:	f3bf 8f4f 	dsb	sy
 8013180:	b662      	cpsie	i
 8013182:	61fb      	str	r3, [r7, #28]
 8013184:	e7fe      	b.n	8013184 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013186:	f001 fea7 	bl	8014ed8 <vPortValidateInterruptPriority>
	__asm volatile
 801318a:	f3ef 8211 	mrs	r2, BASEPRI
 801318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013192:	b672      	cpsid	i
 8013194:	f383 8811 	msr	BASEPRI, r3
 8013198:	f3bf 8f6f 	isb	sy
 801319c:	f3bf 8f4f 	dsb	sy
 80131a0:	b662      	cpsie	i
 80131a2:	61ba      	str	r2, [r7, #24]
 80131a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80131a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80131a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80131aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80131b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d02f      	beq.n	8013216 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80131b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80131bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80131c0:	68b9      	ldr	r1, [r7, #8]
 80131c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131c4:	f000 f89d 	bl	8013302 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80131c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ca:	1e5a      	subs	r2, r3, #1
 80131cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80131d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80131d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131d8:	d112      	bne.n	8013200 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131dc:	691b      	ldr	r3, [r3, #16]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d016      	beq.n	8013210 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e4:	3310      	adds	r3, #16
 80131e6:	4618      	mov	r0, r3
 80131e8:	f000 fe96 	bl	8013f18 <xTaskRemoveFromEventList>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d00e      	beq.n	8013210 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d00b      	beq.n	8013210 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2201      	movs	r2, #1
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	e007      	b.n	8013210 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013204:	3301      	adds	r3, #1
 8013206:	b2db      	uxtb	r3, r3
 8013208:	b25a      	sxtb	r2, r3
 801320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013210:	2301      	movs	r3, #1
 8013212:	637b      	str	r3, [r7, #52]	; 0x34
 8013214:	e001      	b.n	801321a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8013216:	2300      	movs	r3, #0
 8013218:	637b      	str	r3, [r7, #52]	; 0x34
 801321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801321c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013226:	4618      	mov	r0, r3
 8013228:	3738      	adds	r7, #56	; 0x38
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801322e:	b580      	push	{r7, lr}
 8013230:	b086      	sub	sp, #24
 8013232:	af00      	add	r7, sp, #0
 8013234:	60f8      	str	r0, [r7, #12]
 8013236:	60b9      	str	r1, [r7, #8]
 8013238:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801323a:	2300      	movs	r3, #0
 801323c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013242:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013248:	2b00      	cmp	r3, #0
 801324a:	d10d      	bne.n	8013268 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d14d      	bne.n	80132f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	689b      	ldr	r3, [r3, #8]
 8013258:	4618      	mov	r0, r3
 801325a:	f001 f83b 	bl	80142d4 <xTaskPriorityDisinherit>
 801325e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2200      	movs	r2, #0
 8013264:	609a      	str	r2, [r3, #8]
 8013266:	e043      	b.n	80132f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d119      	bne.n	80132a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	6858      	ldr	r0, [r3, #4]
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013276:	461a      	mov	r2, r3
 8013278:	68b9      	ldr	r1, [r7, #8]
 801327a:	f002 fdb7 	bl	8015dec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	685a      	ldr	r2, [r3, #4]
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013286:	441a      	add	r2, r3
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	685a      	ldr	r2, [r3, #4]
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	689b      	ldr	r3, [r3, #8]
 8013294:	429a      	cmp	r2, r3
 8013296:	d32b      	bcc.n	80132f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	681a      	ldr	r2, [r3, #0]
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	605a      	str	r2, [r3, #4]
 80132a0:	e026      	b.n	80132f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	68d8      	ldr	r0, [r3, #12]
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132aa:	461a      	mov	r2, r3
 80132ac:	68b9      	ldr	r1, [r7, #8]
 80132ae:	f002 fd9d 	bl	8015dec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	68da      	ldr	r2, [r3, #12]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132ba:	425b      	negs	r3, r3
 80132bc:	441a      	add	r2, r3
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	68da      	ldr	r2, [r3, #12]
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d207      	bcs.n	80132de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	689a      	ldr	r2, [r3, #8]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132d6:	425b      	negs	r3, r3
 80132d8:	441a      	add	r2, r3
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2b02      	cmp	r3, #2
 80132e2:	d105      	bne.n	80132f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d002      	beq.n	80132f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	3b01      	subs	r3, #1
 80132ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	1c5a      	adds	r2, r3, #1
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80132f8:	697b      	ldr	r3, [r7, #20]
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	3718      	adds	r7, #24
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}

08013302 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013302:	b580      	push	{r7, lr}
 8013304:	b082      	sub	sp, #8
 8013306:	af00      	add	r7, sp, #0
 8013308:	6078      	str	r0, [r7, #4]
 801330a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013310:	2b00      	cmp	r3, #0
 8013312:	d018      	beq.n	8013346 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	68da      	ldr	r2, [r3, #12]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801331c:	441a      	add	r2, r3
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	68da      	ldr	r2, [r3, #12]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	689b      	ldr	r3, [r3, #8]
 801332a:	429a      	cmp	r2, r3
 801332c:	d303      	bcc.n	8013336 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	68d9      	ldr	r1, [r3, #12]
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801333e:	461a      	mov	r2, r3
 8013340:	6838      	ldr	r0, [r7, #0]
 8013342:	f002 fd53 	bl	8015dec <memcpy>
	}
}
 8013346:	bf00      	nop
 8013348:	3708      	adds	r7, #8
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}

0801334e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801334e:	b580      	push	{r7, lr}
 8013350:	b084      	sub	sp, #16
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013356:	f001 fcdf 	bl	8014d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013360:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013362:	e011      	b.n	8013388 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013368:	2b00      	cmp	r3, #0
 801336a:	d012      	beq.n	8013392 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	3324      	adds	r3, #36	; 0x24
 8013370:	4618      	mov	r0, r3
 8013372:	f000 fdd1 	bl	8013f18 <xTaskRemoveFromEventList>
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d001      	beq.n	8013380 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801337c:	f000 feaa 	bl	80140d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013380:	7bfb      	ldrb	r3, [r7, #15]
 8013382:	3b01      	subs	r3, #1
 8013384:	b2db      	uxtb	r3, r3
 8013386:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801338c:	2b00      	cmp	r3, #0
 801338e:	dce9      	bgt.n	8013364 <prvUnlockQueue+0x16>
 8013390:	e000      	b.n	8013394 <prvUnlockQueue+0x46>
					break;
 8013392:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	22ff      	movs	r2, #255	; 0xff
 8013398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801339c:	f001 fcee 	bl	8014d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80133a0:	f001 fcba 	bl	8014d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80133ac:	e011      	b.n	80133d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	691b      	ldr	r3, [r3, #16]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d012      	beq.n	80133dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	3310      	adds	r3, #16
 80133ba:	4618      	mov	r0, r3
 80133bc:	f000 fdac 	bl	8013f18 <xTaskRemoveFromEventList>
 80133c0:	4603      	mov	r3, r0
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d001      	beq.n	80133ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80133c6:	f000 fe85 	bl	80140d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80133ca:	7bbb      	ldrb	r3, [r7, #14]
 80133cc:	3b01      	subs	r3, #1
 80133ce:	b2db      	uxtb	r3, r3
 80133d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80133d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	dce9      	bgt.n	80133ae <prvUnlockQueue+0x60>
 80133da:	e000      	b.n	80133de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80133dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	22ff      	movs	r2, #255	; 0xff
 80133e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80133e6:	f001 fcc9 	bl	8014d7c <vPortExitCritical>
}
 80133ea:	bf00      	nop
 80133ec:	3710      	adds	r7, #16
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}

080133f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80133f2:	b580      	push	{r7, lr}
 80133f4:	b084      	sub	sp, #16
 80133f6:	af00      	add	r7, sp, #0
 80133f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80133fa:	f001 fc8d 	bl	8014d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013402:	2b00      	cmp	r3, #0
 8013404:	d102      	bne.n	801340c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013406:	2301      	movs	r3, #1
 8013408:	60fb      	str	r3, [r7, #12]
 801340a:	e001      	b.n	8013410 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801340c:	2300      	movs	r3, #0
 801340e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013410:	f001 fcb4 	bl	8014d7c <vPortExitCritical>

	return xReturn;
 8013414:	68fb      	ldr	r3, [r7, #12]
}
 8013416:	4618      	mov	r0, r3
 8013418:	3710      	adds	r7, #16
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801341e:	b580      	push	{r7, lr}
 8013420:	b084      	sub	sp, #16
 8013422:	af00      	add	r7, sp, #0
 8013424:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013426:	f001 fc77 	bl	8014d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013432:	429a      	cmp	r2, r3
 8013434:	d102      	bne.n	801343c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013436:	2301      	movs	r3, #1
 8013438:	60fb      	str	r3, [r7, #12]
 801343a:	e001      	b.n	8013440 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801343c:	2300      	movs	r3, #0
 801343e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013440:	f001 fc9c 	bl	8014d7c <vPortExitCritical>

	return xReturn;
 8013444:	68fb      	ldr	r3, [r7, #12]
}
 8013446:	4618      	mov	r0, r3
 8013448:	3710      	adds	r7, #16
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
	...

08013450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013450:	b480      	push	{r7}
 8013452:	b085      	sub	sp, #20
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
 8013458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801345a:	2300      	movs	r3, #0
 801345c:	60fb      	str	r3, [r7, #12]
 801345e:	e014      	b.n	801348a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013460:	4a0e      	ldr	r2, [pc, #56]	; (801349c <vQueueAddToRegistry+0x4c>)
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d10b      	bne.n	8013484 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801346c:	490b      	ldr	r1, [pc, #44]	; (801349c <vQueueAddToRegistry+0x4c>)
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	683a      	ldr	r2, [r7, #0]
 8013472:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013476:	4a09      	ldr	r2, [pc, #36]	; (801349c <vQueueAddToRegistry+0x4c>)
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	00db      	lsls	r3, r3, #3
 801347c:	4413      	add	r3, r2
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013482:	e005      	b.n	8013490 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	3301      	adds	r3, #1
 8013488:	60fb      	str	r3, [r7, #12]
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	2b07      	cmp	r3, #7
 801348e:	d9e7      	bls.n	8013460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013490:	bf00      	nop
 8013492:	3714      	adds	r7, #20
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr
 801349c:	2000bfcc 	.word	0x2000bfcc

080134a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b086      	sub	sp, #24
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	60f8      	str	r0, [r7, #12]
 80134a8:	60b9      	str	r1, [r7, #8]
 80134aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80134b0:	f001 fc32 	bl	8014d18 <vPortEnterCritical>
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80134ba:	b25b      	sxtb	r3, r3
 80134bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134c0:	d103      	bne.n	80134ca <vQueueWaitForMessageRestricted+0x2a>
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	2200      	movs	r2, #0
 80134c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80134d0:	b25b      	sxtb	r3, r3
 80134d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d6:	d103      	bne.n	80134e0 <vQueueWaitForMessageRestricted+0x40>
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	2200      	movs	r2, #0
 80134dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80134e0:	f001 fc4c 	bl	8014d7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d106      	bne.n	80134fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	3324      	adds	r3, #36	; 0x24
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	68b9      	ldr	r1, [r7, #8]
 80134f4:	4618      	mov	r0, r3
 80134f6:	f000 fce3 	bl	8013ec0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80134fa:	6978      	ldr	r0, [r7, #20]
 80134fc:	f7ff ff27 	bl	801334e <prvUnlockQueue>
	}
 8013500:	bf00      	nop
 8013502:	3718      	adds	r7, #24
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}

08013508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013508:	b580      	push	{r7, lr}
 801350a:	b08e      	sub	sp, #56	; 0x38
 801350c:	af04      	add	r7, sp, #16
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	607a      	str	r2, [r7, #4]
 8013514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013518:	2b00      	cmp	r3, #0
 801351a:	d10b      	bne.n	8013534 <xTaskCreateStatic+0x2c>
	__asm volatile
 801351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013520:	b672      	cpsid	i
 8013522:	f383 8811 	msr	BASEPRI, r3
 8013526:	f3bf 8f6f 	isb	sy
 801352a:	f3bf 8f4f 	dsb	sy
 801352e:	b662      	cpsie	i
 8013530:	623b      	str	r3, [r7, #32]
 8013532:	e7fe      	b.n	8013532 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8013534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013536:	2b00      	cmp	r3, #0
 8013538:	d10b      	bne.n	8013552 <xTaskCreateStatic+0x4a>
 801353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801353e:	b672      	cpsid	i
 8013540:	f383 8811 	msr	BASEPRI, r3
 8013544:	f3bf 8f6f 	isb	sy
 8013548:	f3bf 8f4f 	dsb	sy
 801354c:	b662      	cpsie	i
 801354e:	61fb      	str	r3, [r7, #28]
 8013550:	e7fe      	b.n	8013550 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013552:	2360      	movs	r3, #96	; 0x60
 8013554:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	2b60      	cmp	r3, #96	; 0x60
 801355a:	d00b      	beq.n	8013574 <xTaskCreateStatic+0x6c>
 801355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013560:	b672      	cpsid	i
 8013562:	f383 8811 	msr	BASEPRI, r3
 8013566:	f3bf 8f6f 	isb	sy
 801356a:	f3bf 8f4f 	dsb	sy
 801356e:	b662      	cpsie	i
 8013570:	61bb      	str	r3, [r7, #24]
 8013572:	e7fe      	b.n	8013572 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013574:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013578:	2b00      	cmp	r3, #0
 801357a:	d01e      	beq.n	80135ba <xTaskCreateStatic+0xb2>
 801357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801357e:	2b00      	cmp	r3, #0
 8013580:	d01b      	beq.n	80135ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013584:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801358a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801358e:	2202      	movs	r2, #2
 8013590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013594:	2300      	movs	r3, #0
 8013596:	9303      	str	r3, [sp, #12]
 8013598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801359a:	9302      	str	r3, [sp, #8]
 801359c:	f107 0314 	add.w	r3, r7, #20
 80135a0:	9301      	str	r3, [sp, #4]
 80135a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a4:	9300      	str	r3, [sp, #0]
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	68b9      	ldr	r1, [r7, #8]
 80135ac:	68f8      	ldr	r0, [r7, #12]
 80135ae:	f000 f850 	bl	8013652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80135b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135b4:	f000 f8e0 	bl	8013778 <prvAddNewTaskToReadyList>
 80135b8:	e001      	b.n	80135be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80135ba:	2300      	movs	r3, #0
 80135bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80135be:	697b      	ldr	r3, [r7, #20]
	}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3728      	adds	r7, #40	; 0x28
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b08c      	sub	sp, #48	; 0x30
 80135cc:	af04      	add	r7, sp, #16
 80135ce:	60f8      	str	r0, [r7, #12]
 80135d0:	60b9      	str	r1, [r7, #8]
 80135d2:	603b      	str	r3, [r7, #0]
 80135d4:	4613      	mov	r3, r2
 80135d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80135d8:	88fb      	ldrh	r3, [r7, #6]
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	4618      	mov	r0, r3
 80135de:	f001 fcbd 	bl	8014f5c <pvPortMalloc>
 80135e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d00e      	beq.n	8013608 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80135ea:	2060      	movs	r0, #96	; 0x60
 80135ec:	f001 fcb6 	bl	8014f5c <pvPortMalloc>
 80135f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80135f2:	69fb      	ldr	r3, [r7, #28]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d003      	beq.n	8013600 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	697a      	ldr	r2, [r7, #20]
 80135fc:	631a      	str	r2, [r3, #48]	; 0x30
 80135fe:	e005      	b.n	801360c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013600:	6978      	ldr	r0, [r7, #20]
 8013602:	f001 fd77 	bl	80150f4 <vPortFree>
 8013606:	e001      	b.n	801360c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013608:	2300      	movs	r3, #0
 801360a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d017      	beq.n	8013642 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013612:	69fb      	ldr	r3, [r7, #28]
 8013614:	2200      	movs	r2, #0
 8013616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801361a:	88fa      	ldrh	r2, [r7, #6]
 801361c:	2300      	movs	r3, #0
 801361e:	9303      	str	r3, [sp, #12]
 8013620:	69fb      	ldr	r3, [r7, #28]
 8013622:	9302      	str	r3, [sp, #8]
 8013624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013626:	9301      	str	r3, [sp, #4]
 8013628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362a:	9300      	str	r3, [sp, #0]
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	68b9      	ldr	r1, [r7, #8]
 8013630:	68f8      	ldr	r0, [r7, #12]
 8013632:	f000 f80e 	bl	8013652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013636:	69f8      	ldr	r0, [r7, #28]
 8013638:	f000 f89e 	bl	8013778 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801363c:	2301      	movs	r3, #1
 801363e:	61bb      	str	r3, [r7, #24]
 8013640:	e002      	b.n	8013648 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013642:	f04f 33ff 	mov.w	r3, #4294967295
 8013646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013648:	69bb      	ldr	r3, [r7, #24]
	}
 801364a:	4618      	mov	r0, r3
 801364c:	3720      	adds	r7, #32
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}

08013652 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013652:	b580      	push	{r7, lr}
 8013654:	b088      	sub	sp, #32
 8013656:	af00      	add	r7, sp, #0
 8013658:	60f8      	str	r0, [r7, #12]
 801365a:	60b9      	str	r1, [r7, #8]
 801365c:	607a      	str	r2, [r7, #4]
 801365e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013662:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	461a      	mov	r2, r3
 801366a:	21a5      	movs	r1, #165	; 0xa5
 801366c:	f002 fbc9 	bl	8015e02 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013674:	6879      	ldr	r1, [r7, #4]
 8013676:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801367a:	440b      	add	r3, r1
 801367c:	009b      	lsls	r3, r3, #2
 801367e:	4413      	add	r3, r2
 8013680:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013682:	69bb      	ldr	r3, [r7, #24]
 8013684:	f023 0307 	bic.w	r3, r3, #7
 8013688:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	f003 0307 	and.w	r3, r3, #7
 8013690:	2b00      	cmp	r3, #0
 8013692:	d00b      	beq.n	80136ac <prvInitialiseNewTask+0x5a>
 8013694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013698:	b672      	cpsid	i
 801369a:	f383 8811 	msr	BASEPRI, r3
 801369e:	f3bf 8f6f 	isb	sy
 80136a2:	f3bf 8f4f 	dsb	sy
 80136a6:	b662      	cpsie	i
 80136a8:	617b      	str	r3, [r7, #20]
 80136aa:	e7fe      	b.n	80136aa <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d01f      	beq.n	80136f2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80136b2:	2300      	movs	r3, #0
 80136b4:	61fb      	str	r3, [r7, #28]
 80136b6:	e012      	b.n	80136de <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80136b8:	68ba      	ldr	r2, [r7, #8]
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	4413      	add	r3, r2
 80136be:	7819      	ldrb	r1, [r3, #0]
 80136c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136c2:	69fb      	ldr	r3, [r7, #28]
 80136c4:	4413      	add	r3, r2
 80136c6:	3334      	adds	r3, #52	; 0x34
 80136c8:	460a      	mov	r2, r1
 80136ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80136cc:	68ba      	ldr	r2, [r7, #8]
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	4413      	add	r3, r2
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d006      	beq.n	80136e6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	3301      	adds	r3, #1
 80136dc:	61fb      	str	r3, [r7, #28]
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	2b0f      	cmp	r3, #15
 80136e2:	d9e9      	bls.n	80136b8 <prvInitialiseNewTask+0x66>
 80136e4:	e000      	b.n	80136e8 <prvInitialiseNewTask+0x96>
			{
				break;
 80136e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80136e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ea:	2200      	movs	r2, #0
 80136ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80136f0:	e003      	b.n	80136fa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80136f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f4:	2200      	movs	r2, #0
 80136f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80136fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fc:	2b37      	cmp	r3, #55	; 0x37
 80136fe:	d901      	bls.n	8013704 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013700:	2337      	movs	r3, #55	; 0x37
 8013702:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801370e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013712:	2200      	movs	r2, #0
 8013714:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013718:	3304      	adds	r3, #4
 801371a:	4618      	mov	r0, r3
 801371c:	f7ff f858 	bl	80127d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013722:	3318      	adds	r3, #24
 8013724:	4618      	mov	r0, r3
 8013726:	f7ff f853 	bl	80127d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801372e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801373e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8013740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013742:	2200      	movs	r2, #0
 8013744:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013748:	2200      	movs	r2, #0
 801374a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801374e:	2200      	movs	r2, #0
 8013750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013754:	683a      	ldr	r2, [r7, #0]
 8013756:	68f9      	ldr	r1, [r7, #12]
 8013758:	69b8      	ldr	r0, [r7, #24]
 801375a:	f001 f9d3 	bl	8014b04 <pxPortInitialiseStack>
 801375e:	4602      	mov	r2, r0
 8013760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013762:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013766:	2b00      	cmp	r3, #0
 8013768:	d002      	beq.n	8013770 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801376e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013770:	bf00      	nop
 8013772:	3720      	adds	r7, #32
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013780:	f001 faca 	bl	8014d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013784:	4b2d      	ldr	r3, [pc, #180]	; (801383c <prvAddNewTaskToReadyList+0xc4>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	3301      	adds	r3, #1
 801378a:	4a2c      	ldr	r2, [pc, #176]	; (801383c <prvAddNewTaskToReadyList+0xc4>)
 801378c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801378e:	4b2c      	ldr	r3, [pc, #176]	; (8013840 <prvAddNewTaskToReadyList+0xc8>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d109      	bne.n	80137aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013796:	4a2a      	ldr	r2, [pc, #168]	; (8013840 <prvAddNewTaskToReadyList+0xc8>)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801379c:	4b27      	ldr	r3, [pc, #156]	; (801383c <prvAddNewTaskToReadyList+0xc4>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2b01      	cmp	r3, #1
 80137a2:	d110      	bne.n	80137c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80137a4:	f000 fcbc 	bl	8014120 <prvInitialiseTaskLists>
 80137a8:	e00d      	b.n	80137c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80137aa:	4b26      	ldr	r3, [pc, #152]	; (8013844 <prvAddNewTaskToReadyList+0xcc>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d109      	bne.n	80137c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80137b2:	4b23      	ldr	r3, [pc, #140]	; (8013840 <prvAddNewTaskToReadyList+0xc8>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137bc:	429a      	cmp	r2, r3
 80137be:	d802      	bhi.n	80137c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80137c0:	4a1f      	ldr	r2, [pc, #124]	; (8013840 <prvAddNewTaskToReadyList+0xc8>)
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80137c6:	4b20      	ldr	r3, [pc, #128]	; (8013848 <prvAddNewTaskToReadyList+0xd0>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	3301      	adds	r3, #1
 80137cc:	4a1e      	ldr	r2, [pc, #120]	; (8013848 <prvAddNewTaskToReadyList+0xd0>)
 80137ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80137d0:	4b1d      	ldr	r3, [pc, #116]	; (8013848 <prvAddNewTaskToReadyList+0xd0>)
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137dc:	4b1b      	ldr	r3, [pc, #108]	; (801384c <prvAddNewTaskToReadyList+0xd4>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d903      	bls.n	80137ec <prvAddNewTaskToReadyList+0x74>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137e8:	4a18      	ldr	r2, [pc, #96]	; (801384c <prvAddNewTaskToReadyList+0xd4>)
 80137ea:	6013      	str	r3, [r2, #0]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137f0:	4613      	mov	r3, r2
 80137f2:	009b      	lsls	r3, r3, #2
 80137f4:	4413      	add	r3, r2
 80137f6:	009b      	lsls	r3, r3, #2
 80137f8:	4a15      	ldr	r2, [pc, #84]	; (8013850 <prvAddNewTaskToReadyList+0xd8>)
 80137fa:	441a      	add	r2, r3
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	3304      	adds	r3, #4
 8013800:	4619      	mov	r1, r3
 8013802:	4610      	mov	r0, r2
 8013804:	f7fe fff1 	bl	80127ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013808:	f001 fab8 	bl	8014d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801380c:	4b0d      	ldr	r3, [pc, #52]	; (8013844 <prvAddNewTaskToReadyList+0xcc>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d00e      	beq.n	8013832 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013814:	4b0a      	ldr	r3, [pc, #40]	; (8013840 <prvAddNewTaskToReadyList+0xc8>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801381e:	429a      	cmp	r2, r3
 8013820:	d207      	bcs.n	8013832 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013822:	4b0c      	ldr	r3, [pc, #48]	; (8013854 <prvAddNewTaskToReadyList+0xdc>)
 8013824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013828:	601a      	str	r2, [r3, #0]
 801382a:	f3bf 8f4f 	dsb	sy
 801382e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013832:	bf00      	nop
 8013834:	3708      	adds	r7, #8
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}
 801383a:	bf00      	nop
 801383c:	20001cb4 	.word	0x20001cb4
 8013840:	200017e0 	.word	0x200017e0
 8013844:	20001cc0 	.word	0x20001cc0
 8013848:	20001cd0 	.word	0x20001cd0
 801384c:	20001cbc 	.word	0x20001cbc
 8013850:	200017e4 	.word	0x200017e4
 8013854:	e000ed04 	.word	0xe000ed04

08013858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013858:	b580      	push	{r7, lr}
 801385a:	b084      	sub	sp, #16
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013860:	2300      	movs	r3, #0
 8013862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d018      	beq.n	801389c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801386a:	4b14      	ldr	r3, [pc, #80]	; (80138bc <vTaskDelay+0x64>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00b      	beq.n	801388a <vTaskDelay+0x32>
 8013872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013876:	b672      	cpsid	i
 8013878:	f383 8811 	msr	BASEPRI, r3
 801387c:	f3bf 8f6f 	isb	sy
 8013880:	f3bf 8f4f 	dsb	sy
 8013884:	b662      	cpsie	i
 8013886:	60bb      	str	r3, [r7, #8]
 8013888:	e7fe      	b.n	8013888 <vTaskDelay+0x30>
			vTaskSuspendAll();
 801388a:	f000 f8f9 	bl	8013a80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801388e:	2100      	movs	r1, #0
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f000 fd8f 	bl	80143b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013896:	f000 f901 	bl	8013a9c <xTaskResumeAll>
 801389a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d107      	bne.n	80138b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80138a2:	4b07      	ldr	r3, [pc, #28]	; (80138c0 <vTaskDelay+0x68>)
 80138a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138a8:	601a      	str	r2, [r3, #0]
 80138aa:	f3bf 8f4f 	dsb	sy
 80138ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80138b2:	bf00      	nop
 80138b4:	3710      	adds	r7, #16
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	20001cdc 	.word	0x20001cdc
 80138c0:	e000ed04 	.word	0xe000ed04

080138c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b084      	sub	sp, #16
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80138cc:	f001 fa24 	bl	8014d18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d102      	bne.n	80138dc <vTaskSuspend+0x18>
 80138d6:	4b30      	ldr	r3, [pc, #192]	; (8013998 <vTaskSuspend+0xd4>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	e000      	b.n	80138de <vTaskSuspend+0x1a>
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	3304      	adds	r3, #4
 80138e4:	4618      	mov	r0, r3
 80138e6:	f7fe ffdd 	bl	80128a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d004      	beq.n	80138fc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	3318      	adds	r3, #24
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fe ffd4 	bl	80128a4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	3304      	adds	r3, #4
 8013900:	4619      	mov	r1, r3
 8013902:	4826      	ldr	r0, [pc, #152]	; (801399c <vTaskSuspend+0xd8>)
 8013904:	f7fe ff71 	bl	80127ea <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801390e:	b2db      	uxtb	r3, r3
 8013910:	2b01      	cmp	r3, #1
 8013912:	d103      	bne.n	801391c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2200      	movs	r2, #0
 8013918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801391c:	f001 fa2e 	bl	8014d7c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013920:	4b1f      	ldr	r3, [pc, #124]	; (80139a0 <vTaskSuspend+0xdc>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d005      	beq.n	8013934 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8013928:	f001 f9f6 	bl	8014d18 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801392c:	f000 fc94 	bl	8014258 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013930:	f001 fa24 	bl	8014d7c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013934:	4b18      	ldr	r3, [pc, #96]	; (8013998 <vTaskSuspend+0xd4>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	68fa      	ldr	r2, [r7, #12]
 801393a:	429a      	cmp	r2, r3
 801393c:	d128      	bne.n	8013990 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 801393e:	4b18      	ldr	r3, [pc, #96]	; (80139a0 <vTaskSuspend+0xdc>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d018      	beq.n	8013978 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013946:	4b17      	ldr	r3, [pc, #92]	; (80139a4 <vTaskSuspend+0xe0>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00b      	beq.n	8013966 <vTaskSuspend+0xa2>
 801394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013952:	b672      	cpsid	i
 8013954:	f383 8811 	msr	BASEPRI, r3
 8013958:	f3bf 8f6f 	isb	sy
 801395c:	f3bf 8f4f 	dsb	sy
 8013960:	b662      	cpsie	i
 8013962:	60bb      	str	r3, [r7, #8]
 8013964:	e7fe      	b.n	8013964 <vTaskSuspend+0xa0>
				portYIELD_WITHIN_API();
 8013966:	4b10      	ldr	r3, [pc, #64]	; (80139a8 <vTaskSuspend+0xe4>)
 8013968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801396c:	601a      	str	r2, [r3, #0]
 801396e:	f3bf 8f4f 	dsb	sy
 8013972:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013976:	e00b      	b.n	8013990 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013978:	4b08      	ldr	r3, [pc, #32]	; (801399c <vTaskSuspend+0xd8>)
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	4b0b      	ldr	r3, [pc, #44]	; (80139ac <vTaskSuspend+0xe8>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	429a      	cmp	r2, r3
 8013982:	d103      	bne.n	801398c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8013984:	4b04      	ldr	r3, [pc, #16]	; (8013998 <vTaskSuspend+0xd4>)
 8013986:	2200      	movs	r2, #0
 8013988:	601a      	str	r2, [r3, #0]
	}
 801398a:	e001      	b.n	8013990 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 801398c:	f000 f9ee 	bl	8013d6c <vTaskSwitchContext>
	}
 8013990:	bf00      	nop
 8013992:	3710      	adds	r7, #16
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}
 8013998:	200017e0 	.word	0x200017e0
 801399c:	20001ca0 	.word	0x20001ca0
 80139a0:	20001cc0 	.word	0x20001cc0
 80139a4:	20001cdc 	.word	0x20001cdc
 80139a8:	e000ed04 	.word	0xe000ed04
 80139ac:	20001cb4 	.word	0x20001cb4

080139b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b08a      	sub	sp, #40	; 0x28
 80139b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80139b6:	2300      	movs	r3, #0
 80139b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80139ba:	2300      	movs	r3, #0
 80139bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80139be:	463a      	mov	r2, r7
 80139c0:	1d39      	adds	r1, r7, #4
 80139c2:	f107 0308 	add.w	r3, r7, #8
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fe feae 	bl	8012728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80139cc:	6839      	ldr	r1, [r7, #0]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	68ba      	ldr	r2, [r7, #8]
 80139d2:	9202      	str	r2, [sp, #8]
 80139d4:	9301      	str	r3, [sp, #4]
 80139d6:	2300      	movs	r3, #0
 80139d8:	9300      	str	r3, [sp, #0]
 80139da:	2300      	movs	r3, #0
 80139dc:	460a      	mov	r2, r1
 80139de:	4922      	ldr	r1, [pc, #136]	; (8013a68 <vTaskStartScheduler+0xb8>)
 80139e0:	4822      	ldr	r0, [pc, #136]	; (8013a6c <vTaskStartScheduler+0xbc>)
 80139e2:	f7ff fd91 	bl	8013508 <xTaskCreateStatic>
 80139e6:	4602      	mov	r2, r0
 80139e8:	4b21      	ldr	r3, [pc, #132]	; (8013a70 <vTaskStartScheduler+0xc0>)
 80139ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80139ec:	4b20      	ldr	r3, [pc, #128]	; (8013a70 <vTaskStartScheduler+0xc0>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d002      	beq.n	80139fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80139f4:	2301      	movs	r3, #1
 80139f6:	617b      	str	r3, [r7, #20]
 80139f8:	e001      	b.n	80139fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80139fa:	2300      	movs	r3, #0
 80139fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d102      	bne.n	8013a0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013a04:	f000 fd2a 	bl	801445c <xTimerCreateTimerTask>
 8013a08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	2b01      	cmp	r3, #1
 8013a0e:	d117      	bne.n	8013a40 <vTaskStartScheduler+0x90>
 8013a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a14:	b672      	cpsid	i
 8013a16:	f383 8811 	msr	BASEPRI, r3
 8013a1a:	f3bf 8f6f 	isb	sy
 8013a1e:	f3bf 8f4f 	dsb	sy
 8013a22:	b662      	cpsie	i
 8013a24:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013a26:	4b13      	ldr	r3, [pc, #76]	; (8013a74 <vTaskStartScheduler+0xc4>)
 8013a28:	f04f 32ff 	mov.w	r2, #4294967295
 8013a2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013a2e:	4b12      	ldr	r3, [pc, #72]	; (8013a78 <vTaskStartScheduler+0xc8>)
 8013a30:	2201      	movs	r2, #1
 8013a32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013a34:	4b11      	ldr	r3, [pc, #68]	; (8013a7c <vTaskStartScheduler+0xcc>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013a3a:	f001 f8f1 	bl	8014c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013a3e:	e00f      	b.n	8013a60 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a46:	d10b      	bne.n	8013a60 <vTaskStartScheduler+0xb0>
 8013a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a4c:	b672      	cpsid	i
 8013a4e:	f383 8811 	msr	BASEPRI, r3
 8013a52:	f3bf 8f6f 	isb	sy
 8013a56:	f3bf 8f4f 	dsb	sy
 8013a5a:	b662      	cpsie	i
 8013a5c:	60fb      	str	r3, [r7, #12]
 8013a5e:	e7fe      	b.n	8013a5e <vTaskStartScheduler+0xae>
}
 8013a60:	bf00      	nop
 8013a62:	3718      	adds	r7, #24
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}
 8013a68:	08016ff0 	.word	0x08016ff0
 8013a6c:	080140ed 	.word	0x080140ed
 8013a70:	20001cd8 	.word	0x20001cd8
 8013a74:	20001cd4 	.word	0x20001cd4
 8013a78:	20001cc0 	.word	0x20001cc0
 8013a7c:	20001cb8 	.word	0x20001cb8

08013a80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013a80:	b480      	push	{r7}
 8013a82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013a84:	4b04      	ldr	r3, [pc, #16]	; (8013a98 <vTaskSuspendAll+0x18>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	3301      	adds	r3, #1
 8013a8a:	4a03      	ldr	r2, [pc, #12]	; (8013a98 <vTaskSuspendAll+0x18>)
 8013a8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013a8e:	bf00      	nop
 8013a90:	46bd      	mov	sp, r7
 8013a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a96:	4770      	bx	lr
 8013a98:	20001cdc 	.word	0x20001cdc

08013a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013aaa:	4b42      	ldr	r3, [pc, #264]	; (8013bb4 <xTaskResumeAll+0x118>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d10b      	bne.n	8013aca <xTaskResumeAll+0x2e>
 8013ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab6:	b672      	cpsid	i
 8013ab8:	f383 8811 	msr	BASEPRI, r3
 8013abc:	f3bf 8f6f 	isb	sy
 8013ac0:	f3bf 8f4f 	dsb	sy
 8013ac4:	b662      	cpsie	i
 8013ac6:	603b      	str	r3, [r7, #0]
 8013ac8:	e7fe      	b.n	8013ac8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013aca:	f001 f925 	bl	8014d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013ace:	4b39      	ldr	r3, [pc, #228]	; (8013bb4 <xTaskResumeAll+0x118>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	3b01      	subs	r3, #1
 8013ad4:	4a37      	ldr	r2, [pc, #220]	; (8013bb4 <xTaskResumeAll+0x118>)
 8013ad6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ad8:	4b36      	ldr	r3, [pc, #216]	; (8013bb4 <xTaskResumeAll+0x118>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d162      	bne.n	8013ba6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013ae0:	4b35      	ldr	r3, [pc, #212]	; (8013bb8 <xTaskResumeAll+0x11c>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d05e      	beq.n	8013ba6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ae8:	e02f      	b.n	8013b4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013aea:	4b34      	ldr	r3, [pc, #208]	; (8013bbc <xTaskResumeAll+0x120>)
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	68db      	ldr	r3, [r3, #12]
 8013af0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	3318      	adds	r3, #24
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7fe fed4 	bl	80128a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	3304      	adds	r3, #4
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7fe fecf 	bl	80128a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b0a:	4b2d      	ldr	r3, [pc, #180]	; (8013bc0 <xTaskResumeAll+0x124>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d903      	bls.n	8013b1a <xTaskResumeAll+0x7e>
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b16:	4a2a      	ldr	r2, [pc, #168]	; (8013bc0 <xTaskResumeAll+0x124>)
 8013b18:	6013      	str	r3, [r2, #0]
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b1e:	4613      	mov	r3, r2
 8013b20:	009b      	lsls	r3, r3, #2
 8013b22:	4413      	add	r3, r2
 8013b24:	009b      	lsls	r3, r3, #2
 8013b26:	4a27      	ldr	r2, [pc, #156]	; (8013bc4 <xTaskResumeAll+0x128>)
 8013b28:	441a      	add	r2, r3
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	4619      	mov	r1, r3
 8013b30:	4610      	mov	r0, r2
 8013b32:	f7fe fe5a 	bl	80127ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b3a:	4b23      	ldr	r3, [pc, #140]	; (8013bc8 <xTaskResumeAll+0x12c>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d302      	bcc.n	8013b4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013b44:	4b21      	ldr	r3, [pc, #132]	; (8013bcc <xTaskResumeAll+0x130>)
 8013b46:	2201      	movs	r2, #1
 8013b48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b4a:	4b1c      	ldr	r3, [pc, #112]	; (8013bbc <xTaskResumeAll+0x120>)
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d1cb      	bne.n	8013aea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d001      	beq.n	8013b5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013b58:	f000 fb7e 	bl	8014258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013b5c:	4b1c      	ldr	r3, [pc, #112]	; (8013bd0 <xTaskResumeAll+0x134>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d010      	beq.n	8013b8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013b68:	f000 f846 	bl	8013bf8 <xTaskIncrementTick>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d002      	beq.n	8013b78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013b72:	4b16      	ldr	r3, [pc, #88]	; (8013bcc <xTaskResumeAll+0x130>)
 8013b74:	2201      	movs	r2, #1
 8013b76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	3b01      	subs	r3, #1
 8013b7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1f1      	bne.n	8013b68 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013b84:	4b12      	ldr	r3, [pc, #72]	; (8013bd0 <xTaskResumeAll+0x134>)
 8013b86:	2200      	movs	r2, #0
 8013b88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013b8a:	4b10      	ldr	r3, [pc, #64]	; (8013bcc <xTaskResumeAll+0x130>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d009      	beq.n	8013ba6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013b92:	2301      	movs	r3, #1
 8013b94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013b96:	4b0f      	ldr	r3, [pc, #60]	; (8013bd4 <xTaskResumeAll+0x138>)
 8013b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b9c:	601a      	str	r2, [r3, #0]
 8013b9e:	f3bf 8f4f 	dsb	sy
 8013ba2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013ba6:	f001 f8e9 	bl	8014d7c <vPortExitCritical>

	return xAlreadyYielded;
 8013baa:	68bb      	ldr	r3, [r7, #8]
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3710      	adds	r7, #16
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	20001cdc 	.word	0x20001cdc
 8013bb8:	20001cb4 	.word	0x20001cb4
 8013bbc:	20001c74 	.word	0x20001c74
 8013bc0:	20001cbc 	.word	0x20001cbc
 8013bc4:	200017e4 	.word	0x200017e4
 8013bc8:	200017e0 	.word	0x200017e0
 8013bcc:	20001cc8 	.word	0x20001cc8
 8013bd0:	20001cc4 	.word	0x20001cc4
 8013bd4:	e000ed04 	.word	0xe000ed04

08013bd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b083      	sub	sp, #12
 8013bdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013bde:	4b05      	ldr	r3, [pc, #20]	; (8013bf4 <xTaskGetTickCount+0x1c>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013be4:	687b      	ldr	r3, [r7, #4]
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	370c      	adds	r7, #12
 8013bea:	46bd      	mov	sp, r7
 8013bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf0:	4770      	bx	lr
 8013bf2:	bf00      	nop
 8013bf4:	20001cb8 	.word	0x20001cb8

08013bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b086      	sub	sp, #24
 8013bfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c02:	4b4f      	ldr	r3, [pc, #316]	; (8013d40 <xTaskIncrementTick+0x148>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	f040 808a 	bne.w	8013d20 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013c0c:	4b4d      	ldr	r3, [pc, #308]	; (8013d44 <xTaskIncrementTick+0x14c>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	3301      	adds	r3, #1
 8013c12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013c14:	4a4b      	ldr	r2, [pc, #300]	; (8013d44 <xTaskIncrementTick+0x14c>)
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d121      	bne.n	8013c64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013c20:	4b49      	ldr	r3, [pc, #292]	; (8013d48 <xTaskIncrementTick+0x150>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d00b      	beq.n	8013c42 <xTaskIncrementTick+0x4a>
 8013c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c2e:	b672      	cpsid	i
 8013c30:	f383 8811 	msr	BASEPRI, r3
 8013c34:	f3bf 8f6f 	isb	sy
 8013c38:	f3bf 8f4f 	dsb	sy
 8013c3c:	b662      	cpsie	i
 8013c3e:	603b      	str	r3, [r7, #0]
 8013c40:	e7fe      	b.n	8013c40 <xTaskIncrementTick+0x48>
 8013c42:	4b41      	ldr	r3, [pc, #260]	; (8013d48 <xTaskIncrementTick+0x150>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	60fb      	str	r3, [r7, #12]
 8013c48:	4b40      	ldr	r3, [pc, #256]	; (8013d4c <xTaskIncrementTick+0x154>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	4a3e      	ldr	r2, [pc, #248]	; (8013d48 <xTaskIncrementTick+0x150>)
 8013c4e:	6013      	str	r3, [r2, #0]
 8013c50:	4a3e      	ldr	r2, [pc, #248]	; (8013d4c <xTaskIncrementTick+0x154>)
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	6013      	str	r3, [r2, #0]
 8013c56:	4b3e      	ldr	r3, [pc, #248]	; (8013d50 <xTaskIncrementTick+0x158>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	4a3c      	ldr	r2, [pc, #240]	; (8013d50 <xTaskIncrementTick+0x158>)
 8013c5e:	6013      	str	r3, [r2, #0]
 8013c60:	f000 fafa 	bl	8014258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013c64:	4b3b      	ldr	r3, [pc, #236]	; (8013d54 <xTaskIncrementTick+0x15c>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	693a      	ldr	r2, [r7, #16]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d349      	bcc.n	8013d02 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c6e:	4b36      	ldr	r3, [pc, #216]	; (8013d48 <xTaskIncrementTick+0x150>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d104      	bne.n	8013c82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c78:	4b36      	ldr	r3, [pc, #216]	; (8013d54 <xTaskIncrementTick+0x15c>)
 8013c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c7e:	601a      	str	r2, [r3, #0]
					break;
 8013c80:	e03f      	b.n	8013d02 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c82:	4b31      	ldr	r3, [pc, #196]	; (8013d48 <xTaskIncrementTick+0x150>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	68db      	ldr	r3, [r3, #12]
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013c92:	693a      	ldr	r2, [r7, #16]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d203      	bcs.n	8013ca2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013c9a:	4a2e      	ldr	r2, [pc, #184]	; (8013d54 <xTaskIncrementTick+0x15c>)
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013ca0:	e02f      	b.n	8013d02 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	3304      	adds	r3, #4
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7fe fdfc 	bl	80128a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d004      	beq.n	8013cbe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	3318      	adds	r3, #24
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7fe fdf3 	bl	80128a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cc2:	4b25      	ldr	r3, [pc, #148]	; (8013d58 <xTaskIncrementTick+0x160>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d903      	bls.n	8013cd2 <xTaskIncrementTick+0xda>
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cce:	4a22      	ldr	r2, [pc, #136]	; (8013d58 <xTaskIncrementTick+0x160>)
 8013cd0:	6013      	str	r3, [r2, #0]
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cd6:	4613      	mov	r3, r2
 8013cd8:	009b      	lsls	r3, r3, #2
 8013cda:	4413      	add	r3, r2
 8013cdc:	009b      	lsls	r3, r3, #2
 8013cde:	4a1f      	ldr	r2, [pc, #124]	; (8013d5c <xTaskIncrementTick+0x164>)
 8013ce0:	441a      	add	r2, r3
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	3304      	adds	r3, #4
 8013ce6:	4619      	mov	r1, r3
 8013ce8:	4610      	mov	r0, r2
 8013cea:	f7fe fd7e 	bl	80127ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cf2:	4b1b      	ldr	r3, [pc, #108]	; (8013d60 <xTaskIncrementTick+0x168>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d3b8      	bcc.n	8013c6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d00:	e7b5      	b.n	8013c6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013d02:	4b17      	ldr	r3, [pc, #92]	; (8013d60 <xTaskIncrementTick+0x168>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d08:	4914      	ldr	r1, [pc, #80]	; (8013d5c <xTaskIncrementTick+0x164>)
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	009b      	lsls	r3, r3, #2
 8013d0e:	4413      	add	r3, r2
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	440b      	add	r3, r1
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	2b01      	cmp	r3, #1
 8013d18:	d907      	bls.n	8013d2a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	617b      	str	r3, [r7, #20]
 8013d1e:	e004      	b.n	8013d2a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013d20:	4b10      	ldr	r3, [pc, #64]	; (8013d64 <xTaskIncrementTick+0x16c>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	3301      	adds	r3, #1
 8013d26:	4a0f      	ldr	r2, [pc, #60]	; (8013d64 <xTaskIncrementTick+0x16c>)
 8013d28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013d2a:	4b0f      	ldr	r3, [pc, #60]	; (8013d68 <xTaskIncrementTick+0x170>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d001      	beq.n	8013d36 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013d32:	2301      	movs	r3, #1
 8013d34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013d36:	697b      	ldr	r3, [r7, #20]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3718      	adds	r7, #24
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	20001cdc 	.word	0x20001cdc
 8013d44:	20001cb8 	.word	0x20001cb8
 8013d48:	20001c6c 	.word	0x20001c6c
 8013d4c:	20001c70 	.word	0x20001c70
 8013d50:	20001ccc 	.word	0x20001ccc
 8013d54:	20001cd4 	.word	0x20001cd4
 8013d58:	20001cbc 	.word	0x20001cbc
 8013d5c:	200017e4 	.word	0x200017e4
 8013d60:	200017e0 	.word	0x200017e0
 8013d64:	20001cc4 	.word	0x20001cc4
 8013d68:	20001cc8 	.word	0x20001cc8

08013d6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b086      	sub	sp, #24
 8013d70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013d72:	4b3b      	ldr	r3, [pc, #236]	; (8013e60 <vTaskSwitchContext+0xf4>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d003      	beq.n	8013d82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013d7a:	4b3a      	ldr	r3, [pc, #232]	; (8013e64 <vTaskSwitchContext+0xf8>)
 8013d7c:	2201      	movs	r2, #1
 8013d7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013d80:	e069      	b.n	8013e56 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8013d82:	4b38      	ldr	r3, [pc, #224]	; (8013e64 <vTaskSwitchContext+0xf8>)
 8013d84:	2200      	movs	r2, #0
 8013d86:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013d88:	4b37      	ldr	r3, [pc, #220]	; (8013e68 <vTaskSwitchContext+0xfc>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d8e:	613b      	str	r3, [r7, #16]
 8013d90:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8013d94:	60fb      	str	r3, [r7, #12]
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	68fa      	ldr	r2, [r7, #12]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d111      	bne.n	8013dc4 <vTaskSwitchContext+0x58>
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	3304      	adds	r3, #4
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	68fa      	ldr	r2, [r7, #12]
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d10b      	bne.n	8013dc4 <vTaskSwitchContext+0x58>
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	3308      	adds	r3, #8
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	68fa      	ldr	r2, [r7, #12]
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d105      	bne.n	8013dc4 <vTaskSwitchContext+0x58>
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	330c      	adds	r3, #12
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	68fa      	ldr	r2, [r7, #12]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d008      	beq.n	8013dd6 <vTaskSwitchContext+0x6a>
 8013dc4:	4b28      	ldr	r3, [pc, #160]	; (8013e68 <vTaskSwitchContext+0xfc>)
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	4b27      	ldr	r3, [pc, #156]	; (8013e68 <vTaskSwitchContext+0xfc>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	3334      	adds	r3, #52	; 0x34
 8013dce:	4619      	mov	r1, r3
 8013dd0:	4610      	mov	r0, r2
 8013dd2:	f7ec fe00 	bl	80009d6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013dd6:	4b25      	ldr	r3, [pc, #148]	; (8013e6c <vTaskSwitchContext+0x100>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	617b      	str	r3, [r7, #20]
 8013ddc:	e011      	b.n	8013e02 <vTaskSwitchContext+0x96>
 8013dde:	697b      	ldr	r3, [r7, #20]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d10b      	bne.n	8013dfc <vTaskSwitchContext+0x90>
 8013de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de8:	b672      	cpsid	i
 8013dea:	f383 8811 	msr	BASEPRI, r3
 8013dee:	f3bf 8f6f 	isb	sy
 8013df2:	f3bf 8f4f 	dsb	sy
 8013df6:	b662      	cpsie	i
 8013df8:	607b      	str	r3, [r7, #4]
 8013dfa:	e7fe      	b.n	8013dfa <vTaskSwitchContext+0x8e>
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	617b      	str	r3, [r7, #20]
 8013e02:	491b      	ldr	r1, [pc, #108]	; (8013e70 <vTaskSwitchContext+0x104>)
 8013e04:	697a      	ldr	r2, [r7, #20]
 8013e06:	4613      	mov	r3, r2
 8013e08:	009b      	lsls	r3, r3, #2
 8013e0a:	4413      	add	r3, r2
 8013e0c:	009b      	lsls	r3, r3, #2
 8013e0e:	440b      	add	r3, r1
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d0e3      	beq.n	8013dde <vTaskSwitchContext+0x72>
 8013e16:	697a      	ldr	r2, [r7, #20]
 8013e18:	4613      	mov	r3, r2
 8013e1a:	009b      	lsls	r3, r3, #2
 8013e1c:	4413      	add	r3, r2
 8013e1e:	009b      	lsls	r3, r3, #2
 8013e20:	4a13      	ldr	r2, [pc, #76]	; (8013e70 <vTaskSwitchContext+0x104>)
 8013e22:	4413      	add	r3, r2
 8013e24:	60bb      	str	r3, [r7, #8]
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	685a      	ldr	r2, [r3, #4]
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	605a      	str	r2, [r3, #4]
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	685a      	ldr	r2, [r3, #4]
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	3308      	adds	r3, #8
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d104      	bne.n	8013e46 <vTaskSwitchContext+0xda>
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	685b      	ldr	r3, [r3, #4]
 8013e40:	685a      	ldr	r2, [r3, #4]
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	605a      	str	r2, [r3, #4]
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	68db      	ldr	r3, [r3, #12]
 8013e4c:	4a06      	ldr	r2, [pc, #24]	; (8013e68 <vTaskSwitchContext+0xfc>)
 8013e4e:	6013      	str	r3, [r2, #0]
 8013e50:	4a06      	ldr	r2, [pc, #24]	; (8013e6c <vTaskSwitchContext+0x100>)
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	6013      	str	r3, [r2, #0]
}
 8013e56:	bf00      	nop
 8013e58:	3718      	adds	r7, #24
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	20001cdc 	.word	0x20001cdc
 8013e64:	20001cc8 	.word	0x20001cc8
 8013e68:	200017e0 	.word	0x200017e0
 8013e6c:	20001cbc 	.word	0x20001cbc
 8013e70:	200017e4 	.word	0x200017e4

08013e74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d10b      	bne.n	8013e9c <vTaskPlaceOnEventList+0x28>
 8013e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e88:	b672      	cpsid	i
 8013e8a:	f383 8811 	msr	BASEPRI, r3
 8013e8e:	f3bf 8f6f 	isb	sy
 8013e92:	f3bf 8f4f 	dsb	sy
 8013e96:	b662      	cpsie	i
 8013e98:	60fb      	str	r3, [r7, #12]
 8013e9a:	e7fe      	b.n	8013e9a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013e9c:	4b07      	ldr	r3, [pc, #28]	; (8013ebc <vTaskPlaceOnEventList+0x48>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	3318      	adds	r3, #24
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f7fe fcc4 	bl	8012832 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013eaa:	2101      	movs	r1, #1
 8013eac:	6838      	ldr	r0, [r7, #0]
 8013eae:	f000 fa81 	bl	80143b4 <prvAddCurrentTaskToDelayedList>
}
 8013eb2:	bf00      	nop
 8013eb4:	3710      	adds	r7, #16
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
 8013eba:	bf00      	nop
 8013ebc:	200017e0 	.word	0x200017e0

08013ec0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b086      	sub	sp, #24
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	60f8      	str	r0, [r7, #12]
 8013ec8:	60b9      	str	r1, [r7, #8]
 8013eca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d10b      	bne.n	8013eea <vTaskPlaceOnEventListRestricted+0x2a>
 8013ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed6:	b672      	cpsid	i
 8013ed8:	f383 8811 	msr	BASEPRI, r3
 8013edc:	f3bf 8f6f 	isb	sy
 8013ee0:	f3bf 8f4f 	dsb	sy
 8013ee4:	b662      	cpsie	i
 8013ee6:	617b      	str	r3, [r7, #20]
 8013ee8:	e7fe      	b.n	8013ee8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013eea:	4b0a      	ldr	r3, [pc, #40]	; (8013f14 <vTaskPlaceOnEventListRestricted+0x54>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	3318      	adds	r3, #24
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	68f8      	ldr	r0, [r7, #12]
 8013ef4:	f7fe fc79 	bl	80127ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d002      	beq.n	8013f04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8013efe:	f04f 33ff 	mov.w	r3, #4294967295
 8013f02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013f04:	6879      	ldr	r1, [r7, #4]
 8013f06:	68b8      	ldr	r0, [r7, #8]
 8013f08:	f000 fa54 	bl	80143b4 <prvAddCurrentTaskToDelayedList>
	}
 8013f0c:	bf00      	nop
 8013f0e:	3718      	adds	r7, #24
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	200017e0 	.word	0x200017e0

08013f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b086      	sub	sp, #24
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	68db      	ldr	r3, [r3, #12]
 8013f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d10b      	bne.n	8013f46 <xTaskRemoveFromEventList+0x2e>
 8013f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f32:	b672      	cpsid	i
 8013f34:	f383 8811 	msr	BASEPRI, r3
 8013f38:	f3bf 8f6f 	isb	sy
 8013f3c:	f3bf 8f4f 	dsb	sy
 8013f40:	b662      	cpsie	i
 8013f42:	60fb      	str	r3, [r7, #12]
 8013f44:	e7fe      	b.n	8013f44 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	3318      	adds	r3, #24
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fe fcaa 	bl	80128a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f50:	4b1d      	ldr	r3, [pc, #116]	; (8013fc8 <xTaskRemoveFromEventList+0xb0>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d11d      	bne.n	8013f94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	3304      	adds	r3, #4
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7fe fca1 	bl	80128a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f66:	4b19      	ldr	r3, [pc, #100]	; (8013fcc <xTaskRemoveFromEventList+0xb4>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d903      	bls.n	8013f76 <xTaskRemoveFromEventList+0x5e>
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f72:	4a16      	ldr	r2, [pc, #88]	; (8013fcc <xTaskRemoveFromEventList+0xb4>)
 8013f74:	6013      	str	r3, [r2, #0]
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	009b      	lsls	r3, r3, #2
 8013f7e:	4413      	add	r3, r2
 8013f80:	009b      	lsls	r3, r3, #2
 8013f82:	4a13      	ldr	r2, [pc, #76]	; (8013fd0 <xTaskRemoveFromEventList+0xb8>)
 8013f84:	441a      	add	r2, r3
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	3304      	adds	r3, #4
 8013f8a:	4619      	mov	r1, r3
 8013f8c:	4610      	mov	r0, r2
 8013f8e:	f7fe fc2c 	bl	80127ea <vListInsertEnd>
 8013f92:	e005      	b.n	8013fa0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	3318      	adds	r3, #24
 8013f98:	4619      	mov	r1, r3
 8013f9a:	480e      	ldr	r0, [pc, #56]	; (8013fd4 <xTaskRemoveFromEventList+0xbc>)
 8013f9c:	f7fe fc25 	bl	80127ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fa4:	4b0c      	ldr	r3, [pc, #48]	; (8013fd8 <xTaskRemoveFromEventList+0xc0>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d905      	bls.n	8013fba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013fae:	2301      	movs	r3, #1
 8013fb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013fb2:	4b0a      	ldr	r3, [pc, #40]	; (8013fdc <xTaskRemoveFromEventList+0xc4>)
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	601a      	str	r2, [r3, #0]
 8013fb8:	e001      	b.n	8013fbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013fbe:	697b      	ldr	r3, [r7, #20]
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3718      	adds	r7, #24
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	20001cdc 	.word	0x20001cdc
 8013fcc:	20001cbc 	.word	0x20001cbc
 8013fd0:	200017e4 	.word	0x200017e4
 8013fd4:	20001c74 	.word	0x20001c74
 8013fd8:	200017e0 	.word	0x200017e0
 8013fdc:	20001cc8 	.word	0x20001cc8

08013fe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b083      	sub	sp, #12
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013fe8:	4b06      	ldr	r3, [pc, #24]	; (8014004 <vTaskInternalSetTimeOutState+0x24>)
 8013fea:	681a      	ldr	r2, [r3, #0]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013ff0:	4b05      	ldr	r3, [pc, #20]	; (8014008 <vTaskInternalSetTimeOutState+0x28>)
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	605a      	str	r2, [r3, #4]
}
 8013ff8:	bf00      	nop
 8013ffa:	370c      	adds	r7, #12
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014002:	4770      	bx	lr
 8014004:	20001ccc 	.word	0x20001ccc
 8014008:	20001cb8 	.word	0x20001cb8

0801400c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b088      	sub	sp, #32
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d10b      	bne.n	8014034 <xTaskCheckForTimeOut+0x28>
 801401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014020:	b672      	cpsid	i
 8014022:	f383 8811 	msr	BASEPRI, r3
 8014026:	f3bf 8f6f 	isb	sy
 801402a:	f3bf 8f4f 	dsb	sy
 801402e:	b662      	cpsie	i
 8014030:	613b      	str	r3, [r7, #16]
 8014032:	e7fe      	b.n	8014032 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d10b      	bne.n	8014052 <xTaskCheckForTimeOut+0x46>
 801403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801403e:	b672      	cpsid	i
 8014040:	f383 8811 	msr	BASEPRI, r3
 8014044:	f3bf 8f6f 	isb	sy
 8014048:	f3bf 8f4f 	dsb	sy
 801404c:	b662      	cpsie	i
 801404e:	60fb      	str	r3, [r7, #12]
 8014050:	e7fe      	b.n	8014050 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8014052:	f000 fe61 	bl	8014d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014056:	4b1d      	ldr	r3, [pc, #116]	; (80140cc <xTaskCheckForTimeOut+0xc0>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	69ba      	ldr	r2, [r7, #24]
 8014062:	1ad3      	subs	r3, r2, r3
 8014064:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406e:	d102      	bne.n	8014076 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014070:	2300      	movs	r3, #0
 8014072:	61fb      	str	r3, [r7, #28]
 8014074:	e023      	b.n	80140be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681a      	ldr	r2, [r3, #0]
 801407a:	4b15      	ldr	r3, [pc, #84]	; (80140d0 <xTaskCheckForTimeOut+0xc4>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	429a      	cmp	r2, r3
 8014080:	d007      	beq.n	8014092 <xTaskCheckForTimeOut+0x86>
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	69ba      	ldr	r2, [r7, #24]
 8014088:	429a      	cmp	r2, r3
 801408a:	d302      	bcc.n	8014092 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801408c:	2301      	movs	r3, #1
 801408e:	61fb      	str	r3, [r7, #28]
 8014090:	e015      	b.n	80140be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	697a      	ldr	r2, [r7, #20]
 8014098:	429a      	cmp	r2, r3
 801409a:	d20b      	bcs.n	80140b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	1ad2      	subs	r2, r2, r3
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f7ff ff99 	bl	8013fe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140ae:	2300      	movs	r3, #0
 80140b0:	61fb      	str	r3, [r7, #28]
 80140b2:	e004      	b.n	80140be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	2200      	movs	r2, #0
 80140b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80140ba:	2301      	movs	r3, #1
 80140bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80140be:	f000 fe5d 	bl	8014d7c <vPortExitCritical>

	return xReturn;
 80140c2:	69fb      	ldr	r3, [r7, #28]
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	3720      	adds	r7, #32
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	20001cb8 	.word	0x20001cb8
 80140d0:	20001ccc 	.word	0x20001ccc

080140d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80140d4:	b480      	push	{r7}
 80140d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80140d8:	4b03      	ldr	r3, [pc, #12]	; (80140e8 <vTaskMissedYield+0x14>)
 80140da:	2201      	movs	r2, #1
 80140dc:	601a      	str	r2, [r3, #0]
}
 80140de:	bf00      	nop
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr
 80140e8:	20001cc8 	.word	0x20001cc8

080140ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80140f4:	f000 f854 	bl	80141a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80140f8:	4b07      	ldr	r3, [pc, #28]	; (8014118 <prvIdleTask+0x2c>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d907      	bls.n	8014110 <prvIdleTask+0x24>
			{
				taskYIELD();
 8014100:	4b06      	ldr	r3, [pc, #24]	; (801411c <prvIdleTask+0x30>)
 8014102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014106:	601a      	str	r2, [r3, #0]
 8014108:	f3bf 8f4f 	dsb	sy
 801410c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014110:	f7ec fc5a 	bl	80009c8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014114:	e7ee      	b.n	80140f4 <prvIdleTask+0x8>
 8014116:	bf00      	nop
 8014118:	200017e4 	.word	0x200017e4
 801411c:	e000ed04 	.word	0xe000ed04

08014120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014126:	2300      	movs	r3, #0
 8014128:	607b      	str	r3, [r7, #4]
 801412a:	e00c      	b.n	8014146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801412c:	687a      	ldr	r2, [r7, #4]
 801412e:	4613      	mov	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	4413      	add	r3, r2
 8014134:	009b      	lsls	r3, r3, #2
 8014136:	4a12      	ldr	r2, [pc, #72]	; (8014180 <prvInitialiseTaskLists+0x60>)
 8014138:	4413      	add	r3, r2
 801413a:	4618      	mov	r0, r3
 801413c:	f7fe fb28 	bl	8012790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	3301      	adds	r3, #1
 8014144:	607b      	str	r3, [r7, #4]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2b37      	cmp	r3, #55	; 0x37
 801414a:	d9ef      	bls.n	801412c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801414c:	480d      	ldr	r0, [pc, #52]	; (8014184 <prvInitialiseTaskLists+0x64>)
 801414e:	f7fe fb1f 	bl	8012790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014152:	480d      	ldr	r0, [pc, #52]	; (8014188 <prvInitialiseTaskLists+0x68>)
 8014154:	f7fe fb1c 	bl	8012790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014158:	480c      	ldr	r0, [pc, #48]	; (801418c <prvInitialiseTaskLists+0x6c>)
 801415a:	f7fe fb19 	bl	8012790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801415e:	480c      	ldr	r0, [pc, #48]	; (8014190 <prvInitialiseTaskLists+0x70>)
 8014160:	f7fe fb16 	bl	8012790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014164:	480b      	ldr	r0, [pc, #44]	; (8014194 <prvInitialiseTaskLists+0x74>)
 8014166:	f7fe fb13 	bl	8012790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801416a:	4b0b      	ldr	r3, [pc, #44]	; (8014198 <prvInitialiseTaskLists+0x78>)
 801416c:	4a05      	ldr	r2, [pc, #20]	; (8014184 <prvInitialiseTaskLists+0x64>)
 801416e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014170:	4b0a      	ldr	r3, [pc, #40]	; (801419c <prvInitialiseTaskLists+0x7c>)
 8014172:	4a05      	ldr	r2, [pc, #20]	; (8014188 <prvInitialiseTaskLists+0x68>)
 8014174:	601a      	str	r2, [r3, #0]
}
 8014176:	bf00      	nop
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	200017e4 	.word	0x200017e4
 8014184:	20001c44 	.word	0x20001c44
 8014188:	20001c58 	.word	0x20001c58
 801418c:	20001c74 	.word	0x20001c74
 8014190:	20001c88 	.word	0x20001c88
 8014194:	20001ca0 	.word	0x20001ca0
 8014198:	20001c6c 	.word	0x20001c6c
 801419c:	20001c70 	.word	0x20001c70

080141a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141a6:	e019      	b.n	80141dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80141a8:	f000 fdb6 	bl	8014d18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141ac:	4b0f      	ldr	r3, [pc, #60]	; (80141ec <prvCheckTasksWaitingTermination+0x4c>)
 80141ae:	68db      	ldr	r3, [r3, #12]
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	3304      	adds	r3, #4
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fe fb73 	bl	80128a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80141be:	4b0c      	ldr	r3, [pc, #48]	; (80141f0 <prvCheckTasksWaitingTermination+0x50>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	3b01      	subs	r3, #1
 80141c4:	4a0a      	ldr	r2, [pc, #40]	; (80141f0 <prvCheckTasksWaitingTermination+0x50>)
 80141c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80141c8:	4b0a      	ldr	r3, [pc, #40]	; (80141f4 <prvCheckTasksWaitingTermination+0x54>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	3b01      	subs	r3, #1
 80141ce:	4a09      	ldr	r2, [pc, #36]	; (80141f4 <prvCheckTasksWaitingTermination+0x54>)
 80141d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80141d2:	f000 fdd3 	bl	8014d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f000 f80e 	bl	80141f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141dc:	4b05      	ldr	r3, [pc, #20]	; (80141f4 <prvCheckTasksWaitingTermination+0x54>)
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d1e1      	bne.n	80141a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80141e4:	bf00      	nop
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	20001c88 	.word	0x20001c88
 80141f0:	20001cb4 	.word	0x20001cb4
 80141f4:	20001c9c 	.word	0x20001c9c

080141f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b084      	sub	sp, #16
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014206:	2b00      	cmp	r3, #0
 8014208:	d108      	bne.n	801421c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801420e:	4618      	mov	r0, r3
 8014210:	f000 ff70 	bl	80150f4 <vPortFree>
				vPortFree( pxTCB );
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 ff6d 	bl	80150f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801421a:	e019      	b.n	8014250 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014222:	2b01      	cmp	r3, #1
 8014224:	d103      	bne.n	801422e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f000 ff64 	bl	80150f4 <vPortFree>
	}
 801422c:	e010      	b.n	8014250 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014234:	2b02      	cmp	r3, #2
 8014236:	d00b      	beq.n	8014250 <prvDeleteTCB+0x58>
 8014238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801423c:	b672      	cpsid	i
 801423e:	f383 8811 	msr	BASEPRI, r3
 8014242:	f3bf 8f6f 	isb	sy
 8014246:	f3bf 8f4f 	dsb	sy
 801424a:	b662      	cpsie	i
 801424c:	60fb      	str	r3, [r7, #12]
 801424e:	e7fe      	b.n	801424e <prvDeleteTCB+0x56>
	}
 8014250:	bf00      	nop
 8014252:	3710      	adds	r7, #16
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014258:	b480      	push	{r7}
 801425a:	b083      	sub	sp, #12
 801425c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801425e:	4b0c      	ldr	r3, [pc, #48]	; (8014290 <prvResetNextTaskUnblockTime+0x38>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d104      	bne.n	8014272 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014268:	4b0a      	ldr	r3, [pc, #40]	; (8014294 <prvResetNextTaskUnblockTime+0x3c>)
 801426a:	f04f 32ff 	mov.w	r2, #4294967295
 801426e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014270:	e008      	b.n	8014284 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014272:	4b07      	ldr	r3, [pc, #28]	; (8014290 <prvResetNextTaskUnblockTime+0x38>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	685b      	ldr	r3, [r3, #4]
 8014280:	4a04      	ldr	r2, [pc, #16]	; (8014294 <prvResetNextTaskUnblockTime+0x3c>)
 8014282:	6013      	str	r3, [r2, #0]
}
 8014284:	bf00      	nop
 8014286:	370c      	adds	r7, #12
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	4770      	bx	lr
 8014290:	20001c6c 	.word	0x20001c6c
 8014294:	20001cd4 	.word	0x20001cd4

08014298 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014298:	b480      	push	{r7}
 801429a:	b083      	sub	sp, #12
 801429c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801429e:	4b0b      	ldr	r3, [pc, #44]	; (80142cc <xTaskGetSchedulerState+0x34>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d102      	bne.n	80142ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80142a6:	2301      	movs	r3, #1
 80142a8:	607b      	str	r3, [r7, #4]
 80142aa:	e008      	b.n	80142be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142ac:	4b08      	ldr	r3, [pc, #32]	; (80142d0 <xTaskGetSchedulerState+0x38>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d102      	bne.n	80142ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80142b4:	2302      	movs	r3, #2
 80142b6:	607b      	str	r3, [r7, #4]
 80142b8:	e001      	b.n	80142be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80142ba:	2300      	movs	r3, #0
 80142bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80142be:	687b      	ldr	r3, [r7, #4]
	}
 80142c0:	4618      	mov	r0, r3
 80142c2:	370c      	adds	r7, #12
 80142c4:	46bd      	mov	sp, r7
 80142c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ca:	4770      	bx	lr
 80142cc:	20001cc0 	.word	0x20001cc0
 80142d0:	20001cdc 	.word	0x20001cdc

080142d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b086      	sub	sp, #24
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80142e0:	2300      	movs	r3, #0
 80142e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d058      	beq.n	801439c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80142ea:	4b2f      	ldr	r3, [pc, #188]	; (80143a8 <xTaskPriorityDisinherit+0xd4>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	693a      	ldr	r2, [r7, #16]
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d00b      	beq.n	801430c <xTaskPriorityDisinherit+0x38>
 80142f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f8:	b672      	cpsid	i
 80142fa:	f383 8811 	msr	BASEPRI, r3
 80142fe:	f3bf 8f6f 	isb	sy
 8014302:	f3bf 8f4f 	dsb	sy
 8014306:	b662      	cpsie	i
 8014308:	60fb      	str	r3, [r7, #12]
 801430a:	e7fe      	b.n	801430a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014310:	2b00      	cmp	r3, #0
 8014312:	d10b      	bne.n	801432c <xTaskPriorityDisinherit+0x58>
 8014314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014318:	b672      	cpsid	i
 801431a:	f383 8811 	msr	BASEPRI, r3
 801431e:	f3bf 8f6f 	isb	sy
 8014322:	f3bf 8f4f 	dsb	sy
 8014326:	b662      	cpsie	i
 8014328:	60bb      	str	r3, [r7, #8]
 801432a:	e7fe      	b.n	801432a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014330:	1e5a      	subs	r2, r3, #1
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801433e:	429a      	cmp	r2, r3
 8014340:	d02c      	beq.n	801439c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014346:	2b00      	cmp	r3, #0
 8014348:	d128      	bne.n	801439c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	3304      	adds	r3, #4
 801434e:	4618      	mov	r0, r3
 8014350:	f7fe faa8 	bl	80128a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014360:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801436c:	4b0f      	ldr	r3, [pc, #60]	; (80143ac <xTaskPriorityDisinherit+0xd8>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	429a      	cmp	r2, r3
 8014372:	d903      	bls.n	801437c <xTaskPriorityDisinherit+0xa8>
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014378:	4a0c      	ldr	r2, [pc, #48]	; (80143ac <xTaskPriorityDisinherit+0xd8>)
 801437a:	6013      	str	r3, [r2, #0]
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014380:	4613      	mov	r3, r2
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	4413      	add	r3, r2
 8014386:	009b      	lsls	r3, r3, #2
 8014388:	4a09      	ldr	r2, [pc, #36]	; (80143b0 <xTaskPriorityDisinherit+0xdc>)
 801438a:	441a      	add	r2, r3
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	3304      	adds	r3, #4
 8014390:	4619      	mov	r1, r3
 8014392:	4610      	mov	r0, r2
 8014394:	f7fe fa29 	bl	80127ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014398:	2301      	movs	r3, #1
 801439a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801439c:	697b      	ldr	r3, [r7, #20]
	}
 801439e:	4618      	mov	r0, r3
 80143a0:	3718      	adds	r7, #24
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	200017e0 	.word	0x200017e0
 80143ac:	20001cbc 	.word	0x20001cbc
 80143b0:	200017e4 	.word	0x200017e4

080143b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b084      	sub	sp, #16
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80143be:	4b21      	ldr	r3, [pc, #132]	; (8014444 <prvAddCurrentTaskToDelayedList+0x90>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80143c4:	4b20      	ldr	r3, [pc, #128]	; (8014448 <prvAddCurrentTaskToDelayedList+0x94>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	3304      	adds	r3, #4
 80143ca:	4618      	mov	r0, r3
 80143cc:	f7fe fa6a 	bl	80128a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d6:	d10a      	bne.n	80143ee <prvAddCurrentTaskToDelayedList+0x3a>
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d007      	beq.n	80143ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80143de:	4b1a      	ldr	r3, [pc, #104]	; (8014448 <prvAddCurrentTaskToDelayedList+0x94>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	3304      	adds	r3, #4
 80143e4:	4619      	mov	r1, r3
 80143e6:	4819      	ldr	r0, [pc, #100]	; (801444c <prvAddCurrentTaskToDelayedList+0x98>)
 80143e8:	f7fe f9ff 	bl	80127ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80143ec:	e026      	b.n	801443c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80143ee:	68fa      	ldr	r2, [r7, #12]
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	4413      	add	r3, r2
 80143f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80143f6:	4b14      	ldr	r3, [pc, #80]	; (8014448 <prvAddCurrentTaskToDelayedList+0x94>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	68ba      	ldr	r2, [r7, #8]
 80143fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80143fe:	68ba      	ldr	r2, [r7, #8]
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	429a      	cmp	r2, r3
 8014404:	d209      	bcs.n	801441a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014406:	4b12      	ldr	r3, [pc, #72]	; (8014450 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014408:	681a      	ldr	r2, [r3, #0]
 801440a:	4b0f      	ldr	r3, [pc, #60]	; (8014448 <prvAddCurrentTaskToDelayedList+0x94>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	3304      	adds	r3, #4
 8014410:	4619      	mov	r1, r3
 8014412:	4610      	mov	r0, r2
 8014414:	f7fe fa0d 	bl	8012832 <vListInsert>
}
 8014418:	e010      	b.n	801443c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801441a:	4b0e      	ldr	r3, [pc, #56]	; (8014454 <prvAddCurrentTaskToDelayedList+0xa0>)
 801441c:	681a      	ldr	r2, [r3, #0]
 801441e:	4b0a      	ldr	r3, [pc, #40]	; (8014448 <prvAddCurrentTaskToDelayedList+0x94>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	3304      	adds	r3, #4
 8014424:	4619      	mov	r1, r3
 8014426:	4610      	mov	r0, r2
 8014428:	f7fe fa03 	bl	8012832 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801442c:	4b0a      	ldr	r3, [pc, #40]	; (8014458 <prvAddCurrentTaskToDelayedList+0xa4>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	68ba      	ldr	r2, [r7, #8]
 8014432:	429a      	cmp	r2, r3
 8014434:	d202      	bcs.n	801443c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014436:	4a08      	ldr	r2, [pc, #32]	; (8014458 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	6013      	str	r3, [r2, #0]
}
 801443c:	bf00      	nop
 801443e:	3710      	adds	r7, #16
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	20001cb8 	.word	0x20001cb8
 8014448:	200017e0 	.word	0x200017e0
 801444c:	20001ca0 	.word	0x20001ca0
 8014450:	20001c70 	.word	0x20001c70
 8014454:	20001c6c 	.word	0x20001c6c
 8014458:	20001cd4 	.word	0x20001cd4

0801445c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b08a      	sub	sp, #40	; 0x28
 8014460:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014462:	2300      	movs	r3, #0
 8014464:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014466:	f000 fb0d 	bl	8014a84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801446a:	4b1d      	ldr	r3, [pc, #116]	; (80144e0 <xTimerCreateTimerTask+0x84>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d021      	beq.n	80144b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014472:	2300      	movs	r3, #0
 8014474:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014476:	2300      	movs	r3, #0
 8014478:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801447a:	1d3a      	adds	r2, r7, #4
 801447c:	f107 0108 	add.w	r1, r7, #8
 8014480:	f107 030c 	add.w	r3, r7, #12
 8014484:	4618      	mov	r0, r3
 8014486:	f7fe f969 	bl	801275c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801448a:	6879      	ldr	r1, [r7, #4]
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	68fa      	ldr	r2, [r7, #12]
 8014490:	9202      	str	r2, [sp, #8]
 8014492:	9301      	str	r3, [sp, #4]
 8014494:	2302      	movs	r3, #2
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	2300      	movs	r3, #0
 801449a:	460a      	mov	r2, r1
 801449c:	4911      	ldr	r1, [pc, #68]	; (80144e4 <xTimerCreateTimerTask+0x88>)
 801449e:	4812      	ldr	r0, [pc, #72]	; (80144e8 <xTimerCreateTimerTask+0x8c>)
 80144a0:	f7ff f832 	bl	8013508 <xTaskCreateStatic>
 80144a4:	4602      	mov	r2, r0
 80144a6:	4b11      	ldr	r3, [pc, #68]	; (80144ec <xTimerCreateTimerTask+0x90>)
 80144a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80144aa:	4b10      	ldr	r3, [pc, #64]	; (80144ec <xTimerCreateTimerTask+0x90>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d001      	beq.n	80144b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80144b2:	2301      	movs	r3, #1
 80144b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d10b      	bne.n	80144d4 <xTimerCreateTimerTask+0x78>
 80144bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c0:	b672      	cpsid	i
 80144c2:	f383 8811 	msr	BASEPRI, r3
 80144c6:	f3bf 8f6f 	isb	sy
 80144ca:	f3bf 8f4f 	dsb	sy
 80144ce:	b662      	cpsie	i
 80144d0:	613b      	str	r3, [r7, #16]
 80144d2:	e7fe      	b.n	80144d2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80144d4:	697b      	ldr	r3, [r7, #20]
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	3718      	adds	r7, #24
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}
 80144de:	bf00      	nop
 80144e0:	20001d10 	.word	0x20001d10
 80144e4:	08016ff8 	.word	0x08016ff8
 80144e8:	08014629 	.word	0x08014629
 80144ec:	20001d14 	.word	0x20001d14

080144f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b08a      	sub	sp, #40	; 0x28
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	607a      	str	r2, [r7, #4]
 80144fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80144fe:	2300      	movs	r3, #0
 8014500:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d10b      	bne.n	8014520 <xTimerGenericCommand+0x30>
 8014508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801450c:	b672      	cpsid	i
 801450e:	f383 8811 	msr	BASEPRI, r3
 8014512:	f3bf 8f6f 	isb	sy
 8014516:	f3bf 8f4f 	dsb	sy
 801451a:	b662      	cpsie	i
 801451c:	623b      	str	r3, [r7, #32]
 801451e:	e7fe      	b.n	801451e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014520:	4b19      	ldr	r3, [pc, #100]	; (8014588 <xTimerGenericCommand+0x98>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d02a      	beq.n	801457e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	2b05      	cmp	r3, #5
 8014538:	dc18      	bgt.n	801456c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801453a:	f7ff fead 	bl	8014298 <xTaskGetSchedulerState>
 801453e:	4603      	mov	r3, r0
 8014540:	2b02      	cmp	r3, #2
 8014542:	d109      	bne.n	8014558 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014544:	4b10      	ldr	r3, [pc, #64]	; (8014588 <xTimerGenericCommand+0x98>)
 8014546:	6818      	ldr	r0, [r3, #0]
 8014548:	f107 0110 	add.w	r1, r7, #16
 801454c:	2300      	movs	r3, #0
 801454e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014550:	f7fe fb6a 	bl	8012c28 <xQueueGenericSend>
 8014554:	6278      	str	r0, [r7, #36]	; 0x24
 8014556:	e012      	b.n	801457e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014558:	4b0b      	ldr	r3, [pc, #44]	; (8014588 <xTimerGenericCommand+0x98>)
 801455a:	6818      	ldr	r0, [r3, #0]
 801455c:	f107 0110 	add.w	r1, r7, #16
 8014560:	2300      	movs	r3, #0
 8014562:	2200      	movs	r2, #0
 8014564:	f7fe fb60 	bl	8012c28 <xQueueGenericSend>
 8014568:	6278      	str	r0, [r7, #36]	; 0x24
 801456a:	e008      	b.n	801457e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801456c:	4b06      	ldr	r3, [pc, #24]	; (8014588 <xTimerGenericCommand+0x98>)
 801456e:	6818      	ldr	r0, [r3, #0]
 8014570:	f107 0110 	add.w	r1, r7, #16
 8014574:	2300      	movs	r3, #0
 8014576:	683a      	ldr	r2, [r7, #0]
 8014578:	f7fe fc58 	bl	8012e2c <xQueueGenericSendFromISR>
 801457c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014580:	4618      	mov	r0, r3
 8014582:	3728      	adds	r7, #40	; 0x28
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	20001d10 	.word	0x20001d10

0801458c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b088      	sub	sp, #32
 8014590:	af02      	add	r7, sp, #8
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014596:	4b23      	ldr	r3, [pc, #140]	; (8014624 <prvProcessExpiredTimer+0x98>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	68db      	ldr	r3, [r3, #12]
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80145a0:	697b      	ldr	r3, [r7, #20]
 80145a2:	3304      	adds	r3, #4
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7fe f97d 	bl	80128a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145b0:	f003 0304 	and.w	r3, r3, #4
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d023      	beq.n	8014600 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	699a      	ldr	r2, [r3, #24]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	18d1      	adds	r1, r2, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	683a      	ldr	r2, [r7, #0]
 80145c4:	6978      	ldr	r0, [r7, #20]
 80145c6:	f000 f8d3 	bl	8014770 <prvInsertTimerInActiveList>
 80145ca:	4603      	mov	r3, r0
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d020      	beq.n	8014612 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80145d0:	2300      	movs	r3, #0
 80145d2:	9300      	str	r3, [sp, #0]
 80145d4:	2300      	movs	r3, #0
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	2100      	movs	r1, #0
 80145da:	6978      	ldr	r0, [r7, #20]
 80145dc:	f7ff ff88 	bl	80144f0 <xTimerGenericCommand>
 80145e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d114      	bne.n	8014612 <prvProcessExpiredTimer+0x86>
 80145e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ec:	b672      	cpsid	i
 80145ee:	f383 8811 	msr	BASEPRI, r3
 80145f2:	f3bf 8f6f 	isb	sy
 80145f6:	f3bf 8f4f 	dsb	sy
 80145fa:	b662      	cpsie	i
 80145fc:	60fb      	str	r3, [r7, #12]
 80145fe:	e7fe      	b.n	80145fe <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014606:	f023 0301 	bic.w	r3, r3, #1
 801460a:	b2da      	uxtb	r2, r3
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	6a1b      	ldr	r3, [r3, #32]
 8014616:	6978      	ldr	r0, [r7, #20]
 8014618:	4798      	blx	r3
}
 801461a:	bf00      	nop
 801461c:	3718      	adds	r7, #24
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
 8014622:	bf00      	nop
 8014624:	20001d08 	.word	0x20001d08

08014628 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014630:	f107 0308 	add.w	r3, r7, #8
 8014634:	4618      	mov	r0, r3
 8014636:	f000 f857 	bl	80146e8 <prvGetNextExpireTime>
 801463a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	4619      	mov	r1, r3
 8014640:	68f8      	ldr	r0, [r7, #12]
 8014642:	f000 f803 	bl	801464c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014646:	f000 f8d5 	bl	80147f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801464a:	e7f1      	b.n	8014630 <prvTimerTask+0x8>

0801464c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b084      	sub	sp, #16
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014656:	f7ff fa13 	bl	8013a80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801465a:	f107 0308 	add.w	r3, r7, #8
 801465e:	4618      	mov	r0, r3
 8014660:	f000 f866 	bl	8014730 <prvSampleTimeNow>
 8014664:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d130      	bne.n	80146ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d10a      	bne.n	8014688 <prvProcessTimerOrBlockTask+0x3c>
 8014672:	687a      	ldr	r2, [r7, #4]
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	429a      	cmp	r2, r3
 8014678:	d806      	bhi.n	8014688 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801467a:	f7ff fa0f 	bl	8013a9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801467e:	68f9      	ldr	r1, [r7, #12]
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f7ff ff83 	bl	801458c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014686:	e024      	b.n	80146d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d008      	beq.n	80146a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801468e:	4b13      	ldr	r3, [pc, #76]	; (80146dc <prvProcessTimerOrBlockTask+0x90>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d101      	bne.n	801469c <prvProcessTimerOrBlockTask+0x50>
 8014698:	2301      	movs	r3, #1
 801469a:	e000      	b.n	801469e <prvProcessTimerOrBlockTask+0x52>
 801469c:	2300      	movs	r3, #0
 801469e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80146a0:	4b0f      	ldr	r3, [pc, #60]	; (80146e0 <prvProcessTimerOrBlockTask+0x94>)
 80146a2:	6818      	ldr	r0, [r3, #0]
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	1ad3      	subs	r3, r2, r3
 80146aa:	683a      	ldr	r2, [r7, #0]
 80146ac:	4619      	mov	r1, r3
 80146ae:	f7fe fef7 	bl	80134a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80146b2:	f7ff f9f3 	bl	8013a9c <xTaskResumeAll>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10a      	bne.n	80146d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80146bc:	4b09      	ldr	r3, [pc, #36]	; (80146e4 <prvProcessTimerOrBlockTask+0x98>)
 80146be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146c2:	601a      	str	r2, [r3, #0]
 80146c4:	f3bf 8f4f 	dsb	sy
 80146c8:	f3bf 8f6f 	isb	sy
}
 80146cc:	e001      	b.n	80146d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80146ce:	f7ff f9e5 	bl	8013a9c <xTaskResumeAll>
}
 80146d2:	bf00      	nop
 80146d4:	3710      	adds	r7, #16
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
 80146da:	bf00      	nop
 80146dc:	20001d0c 	.word	0x20001d0c
 80146e0:	20001d10 	.word	0x20001d10
 80146e4:	e000ed04 	.word	0xe000ed04

080146e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80146e8:	b480      	push	{r7}
 80146ea:	b085      	sub	sp, #20
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80146f0:	4b0e      	ldr	r3, [pc, #56]	; (801472c <prvGetNextExpireTime+0x44>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d101      	bne.n	80146fe <prvGetNextExpireTime+0x16>
 80146fa:	2201      	movs	r2, #1
 80146fc:	e000      	b.n	8014700 <prvGetNextExpireTime+0x18>
 80146fe:	2200      	movs	r2, #0
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d105      	bne.n	8014718 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801470c:	4b07      	ldr	r3, [pc, #28]	; (801472c <prvGetNextExpireTime+0x44>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	60fb      	str	r3, [r7, #12]
 8014716:	e001      	b.n	801471c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014718:	2300      	movs	r3, #0
 801471a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801471c:	68fb      	ldr	r3, [r7, #12]
}
 801471e:	4618      	mov	r0, r3
 8014720:	3714      	adds	r7, #20
 8014722:	46bd      	mov	sp, r7
 8014724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014728:	4770      	bx	lr
 801472a:	bf00      	nop
 801472c:	20001d08 	.word	0x20001d08

08014730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014738:	f7ff fa4e 	bl	8013bd8 <xTaskGetTickCount>
 801473c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801473e:	4b0b      	ldr	r3, [pc, #44]	; (801476c <prvSampleTimeNow+0x3c>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	68fa      	ldr	r2, [r7, #12]
 8014744:	429a      	cmp	r2, r3
 8014746:	d205      	bcs.n	8014754 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014748:	f000 f936 	bl	80149b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2201      	movs	r2, #1
 8014750:	601a      	str	r2, [r3, #0]
 8014752:	e002      	b.n	801475a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2200      	movs	r2, #0
 8014758:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801475a:	4a04      	ldr	r2, [pc, #16]	; (801476c <prvSampleTimeNow+0x3c>)
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014760:	68fb      	ldr	r3, [r7, #12]
}
 8014762:	4618      	mov	r0, r3
 8014764:	3710      	adds	r7, #16
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	20001d18 	.word	0x20001d18

08014770 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b086      	sub	sp, #24
 8014774:	af00      	add	r7, sp, #0
 8014776:	60f8      	str	r0, [r7, #12]
 8014778:	60b9      	str	r1, [r7, #8]
 801477a:	607a      	str	r2, [r7, #4]
 801477c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801477e:	2300      	movs	r3, #0
 8014780:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	68ba      	ldr	r2, [r7, #8]
 8014786:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	68fa      	ldr	r2, [r7, #12]
 801478c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801478e:	68ba      	ldr	r2, [r7, #8]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	429a      	cmp	r2, r3
 8014794:	d812      	bhi.n	80147bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	1ad2      	subs	r2, r2, r3
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	699b      	ldr	r3, [r3, #24]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d302      	bcc.n	80147aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80147a4:	2301      	movs	r3, #1
 80147a6:	617b      	str	r3, [r7, #20]
 80147a8:	e01b      	b.n	80147e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80147aa:	4b10      	ldr	r3, [pc, #64]	; (80147ec <prvInsertTimerInActiveList+0x7c>)
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	3304      	adds	r3, #4
 80147b2:	4619      	mov	r1, r3
 80147b4:	4610      	mov	r0, r2
 80147b6:	f7fe f83c 	bl	8012832 <vListInsert>
 80147ba:	e012      	b.n	80147e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d206      	bcs.n	80147d2 <prvInsertTimerInActiveList+0x62>
 80147c4:	68ba      	ldr	r2, [r7, #8]
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d302      	bcc.n	80147d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80147cc:	2301      	movs	r3, #1
 80147ce:	617b      	str	r3, [r7, #20]
 80147d0:	e007      	b.n	80147e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80147d2:	4b07      	ldr	r3, [pc, #28]	; (80147f0 <prvInsertTimerInActiveList+0x80>)
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	3304      	adds	r3, #4
 80147da:	4619      	mov	r1, r3
 80147dc:	4610      	mov	r0, r2
 80147de:	f7fe f828 	bl	8012832 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80147e2:	697b      	ldr	r3, [r7, #20]
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3718      	adds	r7, #24
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	20001d0c 	.word	0x20001d0c
 80147f0:	20001d08 	.word	0x20001d08

080147f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b08e      	sub	sp, #56	; 0x38
 80147f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80147fa:	e0cc      	b.n	8014996 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	da19      	bge.n	8014836 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014802:	1d3b      	adds	r3, r7, #4
 8014804:	3304      	adds	r3, #4
 8014806:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801480a:	2b00      	cmp	r3, #0
 801480c:	d10b      	bne.n	8014826 <prvProcessReceivedCommands+0x32>
 801480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014812:	b672      	cpsid	i
 8014814:	f383 8811 	msr	BASEPRI, r3
 8014818:	f3bf 8f6f 	isb	sy
 801481c:	f3bf 8f4f 	dsb	sy
 8014820:	b662      	cpsie	i
 8014822:	61fb      	str	r3, [r7, #28]
 8014824:	e7fe      	b.n	8014824 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801482c:	6850      	ldr	r0, [r2, #4]
 801482e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014830:	6892      	ldr	r2, [r2, #8]
 8014832:	4611      	mov	r1, r2
 8014834:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2b00      	cmp	r3, #0
 801483a:	f2c0 80ab 	blt.w	8014994 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014844:	695b      	ldr	r3, [r3, #20]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d004      	beq.n	8014854 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484c:	3304      	adds	r3, #4
 801484e:	4618      	mov	r0, r3
 8014850:	f7fe f828 	bl	80128a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014854:	463b      	mov	r3, r7
 8014856:	4618      	mov	r0, r3
 8014858:	f7ff ff6a 	bl	8014730 <prvSampleTimeNow>
 801485c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2b09      	cmp	r3, #9
 8014862:	f200 8098 	bhi.w	8014996 <prvProcessReceivedCommands+0x1a2>
 8014866:	a201      	add	r2, pc, #4	; (adr r2, 801486c <prvProcessReceivedCommands+0x78>)
 8014868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801486c:	08014895 	.word	0x08014895
 8014870:	08014895 	.word	0x08014895
 8014874:	08014895 	.word	0x08014895
 8014878:	0801490b 	.word	0x0801490b
 801487c:	0801491f 	.word	0x0801491f
 8014880:	0801496b 	.word	0x0801496b
 8014884:	08014895 	.word	0x08014895
 8014888:	08014895 	.word	0x08014895
 801488c:	0801490b 	.word	0x0801490b
 8014890:	0801491f 	.word	0x0801491f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801489a:	f043 0301 	orr.w	r3, r3, #1
 801489e:	b2da      	uxtb	r2, r3
 80148a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80148a6:	68ba      	ldr	r2, [r7, #8]
 80148a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148aa:	699b      	ldr	r3, [r3, #24]
 80148ac:	18d1      	adds	r1, r2, r3
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148b4:	f7ff ff5c 	bl	8014770 <prvInsertTimerInActiveList>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d06b      	beq.n	8014996 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80148be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c0:	6a1b      	ldr	r3, [r3, #32]
 80148c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80148c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148cc:	f003 0304 	and.w	r3, r3, #4
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d060      	beq.n	8014996 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80148d4:	68ba      	ldr	r2, [r7, #8]
 80148d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d8:	699b      	ldr	r3, [r3, #24]
 80148da:	441a      	add	r2, r3
 80148dc:	2300      	movs	r3, #0
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	2300      	movs	r3, #0
 80148e2:	2100      	movs	r1, #0
 80148e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148e6:	f7ff fe03 	bl	80144f0 <xTimerGenericCommand>
 80148ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80148ec:	6a3b      	ldr	r3, [r7, #32]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d151      	bne.n	8014996 <prvProcessReceivedCommands+0x1a2>
 80148f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148f6:	b672      	cpsid	i
 80148f8:	f383 8811 	msr	BASEPRI, r3
 80148fc:	f3bf 8f6f 	isb	sy
 8014900:	f3bf 8f4f 	dsb	sy
 8014904:	b662      	cpsie	i
 8014906:	61bb      	str	r3, [r7, #24]
 8014908:	e7fe      	b.n	8014908 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014910:	f023 0301 	bic.w	r3, r3, #1
 8014914:	b2da      	uxtb	r2, r3
 8014916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014918:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801491c:	e03b      	b.n	8014996 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014924:	f043 0301 	orr.w	r3, r3, #1
 8014928:	b2da      	uxtb	r2, r3
 801492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801492c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014930:	68ba      	ldr	r2, [r7, #8]
 8014932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014934:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014938:	699b      	ldr	r3, [r3, #24]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d10b      	bne.n	8014956 <prvProcessReceivedCommands+0x162>
 801493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014942:	b672      	cpsid	i
 8014944:	f383 8811 	msr	BASEPRI, r3
 8014948:	f3bf 8f6f 	isb	sy
 801494c:	f3bf 8f4f 	dsb	sy
 8014950:	b662      	cpsie	i
 8014952:	617b      	str	r3, [r7, #20]
 8014954:	e7fe      	b.n	8014954 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014958:	699a      	ldr	r2, [r3, #24]
 801495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495c:	18d1      	adds	r1, r2, r3
 801495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014964:	f7ff ff04 	bl	8014770 <prvInsertTimerInActiveList>
					break;
 8014968:	e015      	b.n	8014996 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801496c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014970:	f003 0302 	and.w	r3, r3, #2
 8014974:	2b00      	cmp	r3, #0
 8014976:	d103      	bne.n	8014980 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8014978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801497a:	f000 fbbb 	bl	80150f4 <vPortFree>
 801497e:	e00a      	b.n	8014996 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014986:	f023 0301 	bic.w	r3, r3, #1
 801498a:	b2da      	uxtb	r2, r3
 801498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801498e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014992:	e000      	b.n	8014996 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014994:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014996:	4b07      	ldr	r3, [pc, #28]	; (80149b4 <prvProcessReceivedCommands+0x1c0>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	1d39      	adds	r1, r7, #4
 801499c:	2200      	movs	r2, #0
 801499e:	4618      	mov	r0, r3
 80149a0:	f7fe fae0 	bl	8012f64 <xQueueReceive>
 80149a4:	4603      	mov	r3, r0
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	f47f af28 	bne.w	80147fc <prvProcessReceivedCommands+0x8>
	}
}
 80149ac:	bf00      	nop
 80149ae:	3730      	adds	r7, #48	; 0x30
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}
 80149b4:	20001d10 	.word	0x20001d10

080149b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b088      	sub	sp, #32
 80149bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80149be:	e049      	b.n	8014a54 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80149c0:	4b2e      	ldr	r3, [pc, #184]	; (8014a7c <prvSwitchTimerLists+0xc4>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	68db      	ldr	r3, [r3, #12]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149ca:	4b2c      	ldr	r3, [pc, #176]	; (8014a7c <prvSwitchTimerLists+0xc4>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	68db      	ldr	r3, [r3, #12]
 80149d0:	68db      	ldr	r3, [r3, #12]
 80149d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	3304      	adds	r3, #4
 80149d8:	4618      	mov	r0, r3
 80149da:	f7fd ff63 	bl	80128a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	6a1b      	ldr	r3, [r3, #32]
 80149e2:	68f8      	ldr	r0, [r7, #12]
 80149e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149ec:	f003 0304 	and.w	r3, r3, #4
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d02f      	beq.n	8014a54 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	699b      	ldr	r3, [r3, #24]
 80149f8:	693a      	ldr	r2, [r7, #16]
 80149fa:	4413      	add	r3, r2
 80149fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80149fe:	68ba      	ldr	r2, [r7, #8]
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d90e      	bls.n	8014a24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	68ba      	ldr	r2, [r7, #8]
 8014a0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	68fa      	ldr	r2, [r7, #12]
 8014a10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014a12:	4b1a      	ldr	r3, [pc, #104]	; (8014a7c <prvSwitchTimerLists+0xc4>)
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	3304      	adds	r3, #4
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	4610      	mov	r0, r2
 8014a1e:	f7fd ff08 	bl	8012832 <vListInsert>
 8014a22:	e017      	b.n	8014a54 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014a24:	2300      	movs	r3, #0
 8014a26:	9300      	str	r3, [sp, #0]
 8014a28:	2300      	movs	r3, #0
 8014a2a:	693a      	ldr	r2, [r7, #16]
 8014a2c:	2100      	movs	r1, #0
 8014a2e:	68f8      	ldr	r0, [r7, #12]
 8014a30:	f7ff fd5e 	bl	80144f0 <xTimerGenericCommand>
 8014a34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d10b      	bne.n	8014a54 <prvSwitchTimerLists+0x9c>
 8014a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a40:	b672      	cpsid	i
 8014a42:	f383 8811 	msr	BASEPRI, r3
 8014a46:	f3bf 8f6f 	isb	sy
 8014a4a:	f3bf 8f4f 	dsb	sy
 8014a4e:	b662      	cpsie	i
 8014a50:	603b      	str	r3, [r7, #0]
 8014a52:	e7fe      	b.n	8014a52 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014a54:	4b09      	ldr	r3, [pc, #36]	; (8014a7c <prvSwitchTimerLists+0xc4>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d1b0      	bne.n	80149c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014a5e:	4b07      	ldr	r3, [pc, #28]	; (8014a7c <prvSwitchTimerLists+0xc4>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014a64:	4b06      	ldr	r3, [pc, #24]	; (8014a80 <prvSwitchTimerLists+0xc8>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	4a04      	ldr	r2, [pc, #16]	; (8014a7c <prvSwitchTimerLists+0xc4>)
 8014a6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014a6c:	4a04      	ldr	r2, [pc, #16]	; (8014a80 <prvSwitchTimerLists+0xc8>)
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	6013      	str	r3, [r2, #0]
}
 8014a72:	bf00      	nop
 8014a74:	3718      	adds	r7, #24
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	20001d08 	.word	0x20001d08
 8014a80:	20001d0c 	.word	0x20001d0c

08014a84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b082      	sub	sp, #8
 8014a88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014a8a:	f000 f945 	bl	8014d18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014a8e:	4b15      	ldr	r3, [pc, #84]	; (8014ae4 <prvCheckForValidListAndQueue+0x60>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d120      	bne.n	8014ad8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014a96:	4814      	ldr	r0, [pc, #80]	; (8014ae8 <prvCheckForValidListAndQueue+0x64>)
 8014a98:	f7fd fe7a 	bl	8012790 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014a9c:	4813      	ldr	r0, [pc, #76]	; (8014aec <prvCheckForValidListAndQueue+0x68>)
 8014a9e:	f7fd fe77 	bl	8012790 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014aa2:	4b13      	ldr	r3, [pc, #76]	; (8014af0 <prvCheckForValidListAndQueue+0x6c>)
 8014aa4:	4a10      	ldr	r2, [pc, #64]	; (8014ae8 <prvCheckForValidListAndQueue+0x64>)
 8014aa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014aa8:	4b12      	ldr	r3, [pc, #72]	; (8014af4 <prvCheckForValidListAndQueue+0x70>)
 8014aaa:	4a10      	ldr	r2, [pc, #64]	; (8014aec <prvCheckForValidListAndQueue+0x68>)
 8014aac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014aae:	2300      	movs	r3, #0
 8014ab0:	9300      	str	r3, [sp, #0]
 8014ab2:	4b11      	ldr	r3, [pc, #68]	; (8014af8 <prvCheckForValidListAndQueue+0x74>)
 8014ab4:	4a11      	ldr	r2, [pc, #68]	; (8014afc <prvCheckForValidListAndQueue+0x78>)
 8014ab6:	2110      	movs	r1, #16
 8014ab8:	200a      	movs	r0, #10
 8014aba:	f7fd ff87 	bl	80129cc <xQueueGenericCreateStatic>
 8014abe:	4602      	mov	r2, r0
 8014ac0:	4b08      	ldr	r3, [pc, #32]	; (8014ae4 <prvCheckForValidListAndQueue+0x60>)
 8014ac2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014ac4:	4b07      	ldr	r3, [pc, #28]	; (8014ae4 <prvCheckForValidListAndQueue+0x60>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d005      	beq.n	8014ad8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014acc:	4b05      	ldr	r3, [pc, #20]	; (8014ae4 <prvCheckForValidListAndQueue+0x60>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	490b      	ldr	r1, [pc, #44]	; (8014b00 <prvCheckForValidListAndQueue+0x7c>)
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7fe fcbc 	bl	8013450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014ad8:	f000 f950 	bl	8014d7c <vPortExitCritical>
}
 8014adc:	bf00      	nop
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	20001d10 	.word	0x20001d10
 8014ae8:	20001ce0 	.word	0x20001ce0
 8014aec:	20001cf4 	.word	0x20001cf4
 8014af0:	20001d08 	.word	0x20001d08
 8014af4:	20001d0c 	.word	0x20001d0c
 8014af8:	20001dbc 	.word	0x20001dbc
 8014afc:	20001d1c 	.word	0x20001d1c
 8014b00:	08017000 	.word	0x08017000

08014b04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014b04:	b480      	push	{r7}
 8014b06:	b085      	sub	sp, #20
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	60f8      	str	r0, [r7, #12]
 8014b0c:	60b9      	str	r1, [r7, #8]
 8014b0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	3b04      	subs	r3, #4
 8014b14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	3b04      	subs	r3, #4
 8014b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	f023 0201 	bic.w	r2, r3, #1
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	3b04      	subs	r3, #4
 8014b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b34:	4a0c      	ldr	r2, [pc, #48]	; (8014b68 <pxPortInitialiseStack+0x64>)
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	3b14      	subs	r3, #20
 8014b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014b40:	687a      	ldr	r2, [r7, #4]
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	3b04      	subs	r3, #4
 8014b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	f06f 0202 	mvn.w	r2, #2
 8014b52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	3b20      	subs	r3, #32
 8014b58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3714      	adds	r7, #20
 8014b60:	46bd      	mov	sp, r7
 8014b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b66:	4770      	bx	lr
 8014b68:	08014b6d 	.word	0x08014b6d

08014b6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b085      	sub	sp, #20
 8014b70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b72:	2300      	movs	r3, #0
 8014b74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b76:	4b13      	ldr	r3, [pc, #76]	; (8014bc4 <prvTaskExitError+0x58>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b7e:	d00b      	beq.n	8014b98 <prvTaskExitError+0x2c>
 8014b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b84:	b672      	cpsid	i
 8014b86:	f383 8811 	msr	BASEPRI, r3
 8014b8a:	f3bf 8f6f 	isb	sy
 8014b8e:	f3bf 8f4f 	dsb	sy
 8014b92:	b662      	cpsie	i
 8014b94:	60fb      	str	r3, [r7, #12]
 8014b96:	e7fe      	b.n	8014b96 <prvTaskExitError+0x2a>
 8014b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b9c:	b672      	cpsid	i
 8014b9e:	f383 8811 	msr	BASEPRI, r3
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	f3bf 8f4f 	dsb	sy
 8014baa:	b662      	cpsie	i
 8014bac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014bae:	bf00      	nop
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d0fc      	beq.n	8014bb0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014bb6:	bf00      	nop
 8014bb8:	3714      	adds	r7, #20
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc0:	4770      	bx	lr
 8014bc2:	bf00      	nop
 8014bc4:	2000007c 	.word	0x2000007c
	...

08014bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014bd0:	4b07      	ldr	r3, [pc, #28]	; (8014bf0 <pxCurrentTCBConst2>)
 8014bd2:	6819      	ldr	r1, [r3, #0]
 8014bd4:	6808      	ldr	r0, [r1, #0]
 8014bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bda:	f380 8809 	msr	PSP, r0
 8014bde:	f3bf 8f6f 	isb	sy
 8014be2:	f04f 0000 	mov.w	r0, #0
 8014be6:	f380 8811 	msr	BASEPRI, r0
 8014bea:	4770      	bx	lr
 8014bec:	f3af 8000 	nop.w

08014bf0 <pxCurrentTCBConst2>:
 8014bf0:	200017e0 	.word	0x200017e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014bf4:	bf00      	nop
 8014bf6:	bf00      	nop

08014bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014bf8:	4808      	ldr	r0, [pc, #32]	; (8014c1c <prvPortStartFirstTask+0x24>)
 8014bfa:	6800      	ldr	r0, [r0, #0]
 8014bfc:	6800      	ldr	r0, [r0, #0]
 8014bfe:	f380 8808 	msr	MSP, r0
 8014c02:	f04f 0000 	mov.w	r0, #0
 8014c06:	f380 8814 	msr	CONTROL, r0
 8014c0a:	b662      	cpsie	i
 8014c0c:	b661      	cpsie	f
 8014c0e:	f3bf 8f4f 	dsb	sy
 8014c12:	f3bf 8f6f 	isb	sy
 8014c16:	df00      	svc	0
 8014c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014c1a:	bf00      	nop
 8014c1c:	e000ed08 	.word	0xe000ed08

08014c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b084      	sub	sp, #16
 8014c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c26:	4b36      	ldr	r3, [pc, #216]	; (8014d00 <xPortStartScheduler+0xe0>)
 8014c28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	781b      	ldrb	r3, [r3, #0]
 8014c2e:	b2db      	uxtb	r3, r3
 8014c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	22ff      	movs	r2, #255	; 0xff
 8014c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	781b      	ldrb	r3, [r3, #0]
 8014c3c:	b2db      	uxtb	r3, r3
 8014c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c40:	78fb      	ldrb	r3, [r7, #3]
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c48:	b2da      	uxtb	r2, r3
 8014c4a:	4b2e      	ldr	r3, [pc, #184]	; (8014d04 <xPortStartScheduler+0xe4>)
 8014c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c4e:	4b2e      	ldr	r3, [pc, #184]	; (8014d08 <xPortStartScheduler+0xe8>)
 8014c50:	2207      	movs	r2, #7
 8014c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c54:	e009      	b.n	8014c6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014c56:	4b2c      	ldr	r3, [pc, #176]	; (8014d08 <xPortStartScheduler+0xe8>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	3b01      	subs	r3, #1
 8014c5c:	4a2a      	ldr	r2, [pc, #168]	; (8014d08 <xPortStartScheduler+0xe8>)
 8014c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c60:	78fb      	ldrb	r3, [r7, #3]
 8014c62:	b2db      	uxtb	r3, r3
 8014c64:	005b      	lsls	r3, r3, #1
 8014c66:	b2db      	uxtb	r3, r3
 8014c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c6a:	78fb      	ldrb	r3, [r7, #3]
 8014c6c:	b2db      	uxtb	r3, r3
 8014c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c72:	2b80      	cmp	r3, #128	; 0x80
 8014c74:	d0ef      	beq.n	8014c56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c76:	4b24      	ldr	r3, [pc, #144]	; (8014d08 <xPortStartScheduler+0xe8>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	f1c3 0307 	rsb	r3, r3, #7
 8014c7e:	2b04      	cmp	r3, #4
 8014c80:	d00b      	beq.n	8014c9a <xPortStartScheduler+0x7a>
 8014c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c86:	b672      	cpsid	i
 8014c88:	f383 8811 	msr	BASEPRI, r3
 8014c8c:	f3bf 8f6f 	isb	sy
 8014c90:	f3bf 8f4f 	dsb	sy
 8014c94:	b662      	cpsie	i
 8014c96:	60bb      	str	r3, [r7, #8]
 8014c98:	e7fe      	b.n	8014c98 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c9a:	4b1b      	ldr	r3, [pc, #108]	; (8014d08 <xPortStartScheduler+0xe8>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	021b      	lsls	r3, r3, #8
 8014ca0:	4a19      	ldr	r2, [pc, #100]	; (8014d08 <xPortStartScheduler+0xe8>)
 8014ca2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014ca4:	4b18      	ldr	r3, [pc, #96]	; (8014d08 <xPortStartScheduler+0xe8>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014cac:	4a16      	ldr	r2, [pc, #88]	; (8014d08 <xPortStartScheduler+0xe8>)
 8014cae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	b2da      	uxtb	r2, r3
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014cb8:	4b14      	ldr	r3, [pc, #80]	; (8014d0c <xPortStartScheduler+0xec>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	4a13      	ldr	r2, [pc, #76]	; (8014d0c <xPortStartScheduler+0xec>)
 8014cbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014cc2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014cc4:	4b11      	ldr	r3, [pc, #68]	; (8014d0c <xPortStartScheduler+0xec>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	4a10      	ldr	r2, [pc, #64]	; (8014d0c <xPortStartScheduler+0xec>)
 8014cca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014cce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014cd0:	f000 f8d4 	bl	8014e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014cd4:	4b0e      	ldr	r3, [pc, #56]	; (8014d10 <xPortStartScheduler+0xf0>)
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014cda:	f000 f8f3 	bl	8014ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014cde:	4b0d      	ldr	r3, [pc, #52]	; (8014d14 <xPortStartScheduler+0xf4>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	4a0c      	ldr	r2, [pc, #48]	; (8014d14 <xPortStartScheduler+0xf4>)
 8014ce4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014ce8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014cea:	f7ff ff85 	bl	8014bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014cee:	f7ff f83d 	bl	8013d6c <vTaskSwitchContext>
	prvTaskExitError();
 8014cf2:	f7ff ff3b 	bl	8014b6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014cf6:	2300      	movs	r3, #0
}
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3710      	adds	r7, #16
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}
 8014d00:	e000e400 	.word	0xe000e400
 8014d04:	20001e0c 	.word	0x20001e0c
 8014d08:	20001e10 	.word	0x20001e10
 8014d0c:	e000ed20 	.word	0xe000ed20
 8014d10:	2000007c 	.word	0x2000007c
 8014d14:	e000ef34 	.word	0xe000ef34

08014d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b083      	sub	sp, #12
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d22:	b672      	cpsid	i
 8014d24:	f383 8811 	msr	BASEPRI, r3
 8014d28:	f3bf 8f6f 	isb	sy
 8014d2c:	f3bf 8f4f 	dsb	sy
 8014d30:	b662      	cpsie	i
 8014d32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d34:	4b0f      	ldr	r3, [pc, #60]	; (8014d74 <vPortEnterCritical+0x5c>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	3301      	adds	r3, #1
 8014d3a:	4a0e      	ldr	r2, [pc, #56]	; (8014d74 <vPortEnterCritical+0x5c>)
 8014d3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d3e:	4b0d      	ldr	r3, [pc, #52]	; (8014d74 <vPortEnterCritical+0x5c>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	2b01      	cmp	r3, #1
 8014d44:	d110      	bne.n	8014d68 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d46:	4b0c      	ldr	r3, [pc, #48]	; (8014d78 <vPortEnterCritical+0x60>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d00b      	beq.n	8014d68 <vPortEnterCritical+0x50>
 8014d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d54:	b672      	cpsid	i
 8014d56:	f383 8811 	msr	BASEPRI, r3
 8014d5a:	f3bf 8f6f 	isb	sy
 8014d5e:	f3bf 8f4f 	dsb	sy
 8014d62:	b662      	cpsie	i
 8014d64:	603b      	str	r3, [r7, #0]
 8014d66:	e7fe      	b.n	8014d66 <vPortEnterCritical+0x4e>
	}
}
 8014d68:	bf00      	nop
 8014d6a:	370c      	adds	r7, #12
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr
 8014d74:	2000007c 	.word	0x2000007c
 8014d78:	e000ed04 	.word	0xe000ed04

08014d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b083      	sub	sp, #12
 8014d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d82:	4b12      	ldr	r3, [pc, #72]	; (8014dcc <vPortExitCritical+0x50>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d10b      	bne.n	8014da2 <vPortExitCritical+0x26>
 8014d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8e:	b672      	cpsid	i
 8014d90:	f383 8811 	msr	BASEPRI, r3
 8014d94:	f3bf 8f6f 	isb	sy
 8014d98:	f3bf 8f4f 	dsb	sy
 8014d9c:	b662      	cpsie	i
 8014d9e:	607b      	str	r3, [r7, #4]
 8014da0:	e7fe      	b.n	8014da0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8014da2:	4b0a      	ldr	r3, [pc, #40]	; (8014dcc <vPortExitCritical+0x50>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	3b01      	subs	r3, #1
 8014da8:	4a08      	ldr	r2, [pc, #32]	; (8014dcc <vPortExitCritical+0x50>)
 8014daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014dac:	4b07      	ldr	r3, [pc, #28]	; (8014dcc <vPortExitCritical+0x50>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d104      	bne.n	8014dbe <vPortExitCritical+0x42>
 8014db4:	2300      	movs	r3, #0
 8014db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014dbe:	bf00      	nop
 8014dc0:	370c      	adds	r7, #12
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	2000007c 	.word	0x2000007c

08014dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014dd0:	f3ef 8009 	mrs	r0, PSP
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	4b15      	ldr	r3, [pc, #84]	; (8014e30 <pxCurrentTCBConst>)
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	f01e 0f10 	tst.w	lr, #16
 8014de0:	bf08      	it	eq
 8014de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dea:	6010      	str	r0, [r2, #0]
 8014dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014df4:	b672      	cpsid	i
 8014df6:	f380 8811 	msr	BASEPRI, r0
 8014dfa:	f3bf 8f4f 	dsb	sy
 8014dfe:	f3bf 8f6f 	isb	sy
 8014e02:	b662      	cpsie	i
 8014e04:	f7fe ffb2 	bl	8013d6c <vTaskSwitchContext>
 8014e08:	f04f 0000 	mov.w	r0, #0
 8014e0c:	f380 8811 	msr	BASEPRI, r0
 8014e10:	bc09      	pop	{r0, r3}
 8014e12:	6819      	ldr	r1, [r3, #0]
 8014e14:	6808      	ldr	r0, [r1, #0]
 8014e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e1a:	f01e 0f10 	tst.w	lr, #16
 8014e1e:	bf08      	it	eq
 8014e20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e24:	f380 8809 	msr	PSP, r0
 8014e28:	f3bf 8f6f 	isb	sy
 8014e2c:	4770      	bx	lr
 8014e2e:	bf00      	nop

08014e30 <pxCurrentTCBConst>:
 8014e30:	200017e0 	.word	0x200017e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e34:	bf00      	nop
 8014e36:	bf00      	nop

08014e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e42:	b672      	cpsid	i
 8014e44:	f383 8811 	msr	BASEPRI, r3
 8014e48:	f3bf 8f6f 	isb	sy
 8014e4c:	f3bf 8f4f 	dsb	sy
 8014e50:	b662      	cpsie	i
 8014e52:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e54:	f7fe fed0 	bl	8013bf8 <xTaskIncrementTick>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d003      	beq.n	8014e66 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e5e:	4b06      	ldr	r3, [pc, #24]	; (8014e78 <SysTick_Handler+0x40>)
 8014e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e64:	601a      	str	r2, [r3, #0]
 8014e66:	2300      	movs	r3, #0
 8014e68:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e70:	bf00      	nop
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}
 8014e78:	e000ed04 	.word	0xe000ed04

08014e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e80:	4b0b      	ldr	r3, [pc, #44]	; (8014eb0 <vPortSetupTimerInterrupt+0x34>)
 8014e82:	2200      	movs	r2, #0
 8014e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e86:	4b0b      	ldr	r3, [pc, #44]	; (8014eb4 <vPortSetupTimerInterrupt+0x38>)
 8014e88:	2200      	movs	r2, #0
 8014e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e8c:	4b0a      	ldr	r3, [pc, #40]	; (8014eb8 <vPortSetupTimerInterrupt+0x3c>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	4a0a      	ldr	r2, [pc, #40]	; (8014ebc <vPortSetupTimerInterrupt+0x40>)
 8014e92:	fba2 2303 	umull	r2, r3, r2, r3
 8014e96:	099b      	lsrs	r3, r3, #6
 8014e98:	4a09      	ldr	r2, [pc, #36]	; (8014ec0 <vPortSetupTimerInterrupt+0x44>)
 8014e9a:	3b01      	subs	r3, #1
 8014e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e9e:	4b04      	ldr	r3, [pc, #16]	; (8014eb0 <vPortSetupTimerInterrupt+0x34>)
 8014ea0:	2207      	movs	r2, #7
 8014ea2:	601a      	str	r2, [r3, #0]
}
 8014ea4:	bf00      	nop
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr
 8014eae:	bf00      	nop
 8014eb0:	e000e010 	.word	0xe000e010
 8014eb4:	e000e018 	.word	0xe000e018
 8014eb8:	20000000 	.word	0x20000000
 8014ebc:	10624dd3 	.word	0x10624dd3
 8014ec0:	e000e014 	.word	0xe000e014

08014ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014ed4 <vPortEnableVFP+0x10>
 8014ec8:	6801      	ldr	r1, [r0, #0]
 8014eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014ece:	6001      	str	r1, [r0, #0]
 8014ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014ed2:	bf00      	nop
 8014ed4:	e000ed88 	.word	0xe000ed88

08014ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014ed8:	b480      	push	{r7}
 8014eda:	b085      	sub	sp, #20
 8014edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014ede:	f3ef 8305 	mrs	r3, IPSR
 8014ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	2b0f      	cmp	r3, #15
 8014ee8:	d915      	bls.n	8014f16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014eea:	4a18      	ldr	r2, [pc, #96]	; (8014f4c <vPortValidateInterruptPriority+0x74>)
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	4413      	add	r3, r2
 8014ef0:	781b      	ldrb	r3, [r3, #0]
 8014ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014ef4:	4b16      	ldr	r3, [pc, #88]	; (8014f50 <vPortValidateInterruptPriority+0x78>)
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	7afa      	ldrb	r2, [r7, #11]
 8014efa:	429a      	cmp	r2, r3
 8014efc:	d20b      	bcs.n	8014f16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f02:	b672      	cpsid	i
 8014f04:	f383 8811 	msr	BASEPRI, r3
 8014f08:	f3bf 8f6f 	isb	sy
 8014f0c:	f3bf 8f4f 	dsb	sy
 8014f10:	b662      	cpsie	i
 8014f12:	607b      	str	r3, [r7, #4]
 8014f14:	e7fe      	b.n	8014f14 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f16:	4b0f      	ldr	r3, [pc, #60]	; (8014f54 <vPortValidateInterruptPriority+0x7c>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014f1e:	4b0e      	ldr	r3, [pc, #56]	; (8014f58 <vPortValidateInterruptPriority+0x80>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d90b      	bls.n	8014f3e <vPortValidateInterruptPriority+0x66>
 8014f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f2a:	b672      	cpsid	i
 8014f2c:	f383 8811 	msr	BASEPRI, r3
 8014f30:	f3bf 8f6f 	isb	sy
 8014f34:	f3bf 8f4f 	dsb	sy
 8014f38:	b662      	cpsie	i
 8014f3a:	603b      	str	r3, [r7, #0]
 8014f3c:	e7fe      	b.n	8014f3c <vPortValidateInterruptPriority+0x64>
	}
 8014f3e:	bf00      	nop
 8014f40:	3714      	adds	r7, #20
 8014f42:	46bd      	mov	sp, r7
 8014f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f48:	4770      	bx	lr
 8014f4a:	bf00      	nop
 8014f4c:	e000e3f0 	.word	0xe000e3f0
 8014f50:	20001e0c 	.word	0x20001e0c
 8014f54:	e000ed0c 	.word	0xe000ed0c
 8014f58:	20001e10 	.word	0x20001e10

08014f5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b08a      	sub	sp, #40	; 0x28
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f64:	2300      	movs	r3, #0
 8014f66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f68:	f7fe fd8a 	bl	8013a80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f6c:	4b5c      	ldr	r3, [pc, #368]	; (80150e0 <pvPortMalloc+0x184>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d101      	bne.n	8014f78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f74:	f000 f91a 	bl	80151ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f78:	4b5a      	ldr	r3, [pc, #360]	; (80150e4 <pvPortMalloc+0x188>)
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	4013      	ands	r3, r2
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	f040 8090 	bne.w	80150a6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d01e      	beq.n	8014fca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8014f8c:	2208      	movs	r2, #8
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	4413      	add	r3, r2
 8014f92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f003 0307 	and.w	r3, r3, #7
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d015      	beq.n	8014fca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	f023 0307 	bic.w	r3, r3, #7
 8014fa4:	3308      	adds	r3, #8
 8014fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f003 0307 	and.w	r3, r3, #7
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d00b      	beq.n	8014fca <pvPortMalloc+0x6e>
 8014fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb6:	b672      	cpsid	i
 8014fb8:	f383 8811 	msr	BASEPRI, r3
 8014fbc:	f3bf 8f6f 	isb	sy
 8014fc0:	f3bf 8f4f 	dsb	sy
 8014fc4:	b662      	cpsie	i
 8014fc6:	617b      	str	r3, [r7, #20]
 8014fc8:	e7fe      	b.n	8014fc8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d06a      	beq.n	80150a6 <pvPortMalloc+0x14a>
 8014fd0:	4b45      	ldr	r3, [pc, #276]	; (80150e8 <pvPortMalloc+0x18c>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	687a      	ldr	r2, [r7, #4]
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d865      	bhi.n	80150a6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014fda:	4b44      	ldr	r3, [pc, #272]	; (80150ec <pvPortMalloc+0x190>)
 8014fdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014fde:	4b43      	ldr	r3, [pc, #268]	; (80150ec <pvPortMalloc+0x190>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fe4:	e004      	b.n	8014ff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff2:	685b      	ldr	r3, [r3, #4]
 8014ff4:	687a      	ldr	r2, [r7, #4]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d903      	bls.n	8015002 <pvPortMalloc+0xa6>
 8014ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d1f1      	bne.n	8014fe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015002:	4b37      	ldr	r3, [pc, #220]	; (80150e0 <pvPortMalloc+0x184>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015008:	429a      	cmp	r2, r3
 801500a:	d04c      	beq.n	80150a6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801500c:	6a3b      	ldr	r3, [r7, #32]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	2208      	movs	r2, #8
 8015012:	4413      	add	r3, r2
 8015014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	6a3b      	ldr	r3, [r7, #32]
 801501c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015020:	685a      	ldr	r2, [r3, #4]
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	1ad2      	subs	r2, r2, r3
 8015026:	2308      	movs	r3, #8
 8015028:	005b      	lsls	r3, r3, #1
 801502a:	429a      	cmp	r2, r3
 801502c:	d920      	bls.n	8015070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801502e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	4413      	add	r3, r2
 8015034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015036:	69bb      	ldr	r3, [r7, #24]
 8015038:	f003 0307 	and.w	r3, r3, #7
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00b      	beq.n	8015058 <pvPortMalloc+0xfc>
 8015040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015044:	b672      	cpsid	i
 8015046:	f383 8811 	msr	BASEPRI, r3
 801504a:	f3bf 8f6f 	isb	sy
 801504e:	f3bf 8f4f 	dsb	sy
 8015052:	b662      	cpsie	i
 8015054:	613b      	str	r3, [r7, #16]
 8015056:	e7fe      	b.n	8015056 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505a:	685a      	ldr	r2, [r3, #4]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	1ad2      	subs	r2, r2, r3
 8015060:	69bb      	ldr	r3, [r7, #24]
 8015062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801506a:	69b8      	ldr	r0, [r7, #24]
 801506c:	f000 f900 	bl	8015270 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015070:	4b1d      	ldr	r3, [pc, #116]	; (80150e8 <pvPortMalloc+0x18c>)
 8015072:	681a      	ldr	r2, [r3, #0]
 8015074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	1ad3      	subs	r3, r2, r3
 801507a:	4a1b      	ldr	r2, [pc, #108]	; (80150e8 <pvPortMalloc+0x18c>)
 801507c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801507e:	4b1a      	ldr	r3, [pc, #104]	; (80150e8 <pvPortMalloc+0x18c>)
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	4b1b      	ldr	r3, [pc, #108]	; (80150f0 <pvPortMalloc+0x194>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	429a      	cmp	r2, r3
 8015088:	d203      	bcs.n	8015092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801508a:	4b17      	ldr	r3, [pc, #92]	; (80150e8 <pvPortMalloc+0x18c>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	4a18      	ldr	r2, [pc, #96]	; (80150f0 <pvPortMalloc+0x194>)
 8015090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015094:	685a      	ldr	r2, [r3, #4]
 8015096:	4b13      	ldr	r3, [pc, #76]	; (80150e4 <pvPortMalloc+0x188>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	431a      	orrs	r2, r3
 801509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80150a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a2:	2200      	movs	r2, #0
 80150a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80150a6:	f7fe fcf9 	bl	8013a9c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80150aa:	69fb      	ldr	r3, [r7, #28]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d101      	bne.n	80150b4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80150b0:	f7eb fc9c 	bl	80009ec <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80150b4:	69fb      	ldr	r3, [r7, #28]
 80150b6:	f003 0307 	and.w	r3, r3, #7
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d00b      	beq.n	80150d6 <pvPortMalloc+0x17a>
 80150be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c2:	b672      	cpsid	i
 80150c4:	f383 8811 	msr	BASEPRI, r3
 80150c8:	f3bf 8f6f 	isb	sy
 80150cc:	f3bf 8f4f 	dsb	sy
 80150d0:	b662      	cpsie	i
 80150d2:	60fb      	str	r3, [r7, #12]
 80150d4:	e7fe      	b.n	80150d4 <pvPortMalloc+0x178>
	return pvReturn;
 80150d6:	69fb      	ldr	r3, [r7, #28]
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3728      	adds	r7, #40	; 0x28
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	20009e1c 	.word	0x20009e1c
 80150e4:	20009e28 	.word	0x20009e28
 80150e8:	20009e20 	.word	0x20009e20
 80150ec:	20009e14 	.word	0x20009e14
 80150f0:	20009e24 	.word	0x20009e24

080150f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b086      	sub	sp, #24
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d04a      	beq.n	801519c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015106:	2308      	movs	r3, #8
 8015108:	425b      	negs	r3, r3
 801510a:	697a      	ldr	r2, [r7, #20]
 801510c:	4413      	add	r3, r2
 801510e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	685a      	ldr	r2, [r3, #4]
 8015118:	4b22      	ldr	r3, [pc, #136]	; (80151a4 <vPortFree+0xb0>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	4013      	ands	r3, r2
 801511e:	2b00      	cmp	r3, #0
 8015120:	d10b      	bne.n	801513a <vPortFree+0x46>
 8015122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015126:	b672      	cpsid	i
 8015128:	f383 8811 	msr	BASEPRI, r3
 801512c:	f3bf 8f6f 	isb	sy
 8015130:	f3bf 8f4f 	dsb	sy
 8015134:	b662      	cpsie	i
 8015136:	60fb      	str	r3, [r7, #12]
 8015138:	e7fe      	b.n	8015138 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d00b      	beq.n	801515a <vPortFree+0x66>
 8015142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015146:	b672      	cpsid	i
 8015148:	f383 8811 	msr	BASEPRI, r3
 801514c:	f3bf 8f6f 	isb	sy
 8015150:	f3bf 8f4f 	dsb	sy
 8015154:	b662      	cpsie	i
 8015156:	60bb      	str	r3, [r7, #8]
 8015158:	e7fe      	b.n	8015158 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801515a:	693b      	ldr	r3, [r7, #16]
 801515c:	685a      	ldr	r2, [r3, #4]
 801515e:	4b11      	ldr	r3, [pc, #68]	; (80151a4 <vPortFree+0xb0>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	4013      	ands	r3, r2
 8015164:	2b00      	cmp	r3, #0
 8015166:	d019      	beq.n	801519c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015168:	693b      	ldr	r3, [r7, #16]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d115      	bne.n	801519c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	685a      	ldr	r2, [r3, #4]
 8015174:	4b0b      	ldr	r3, [pc, #44]	; (80151a4 <vPortFree+0xb0>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	43db      	mvns	r3, r3
 801517a:	401a      	ands	r2, r3
 801517c:	693b      	ldr	r3, [r7, #16]
 801517e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015180:	f7fe fc7e 	bl	8013a80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	685a      	ldr	r2, [r3, #4]
 8015188:	4b07      	ldr	r3, [pc, #28]	; (80151a8 <vPortFree+0xb4>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4413      	add	r3, r2
 801518e:	4a06      	ldr	r2, [pc, #24]	; (80151a8 <vPortFree+0xb4>)
 8015190:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015192:	6938      	ldr	r0, [r7, #16]
 8015194:	f000 f86c 	bl	8015270 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015198:	f7fe fc80 	bl	8013a9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801519c:	bf00      	nop
 801519e:	3718      	adds	r7, #24
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}
 80151a4:	20009e28 	.word	0x20009e28
 80151a8:	20009e20 	.word	0x20009e20

080151ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80151ac:	b480      	push	{r7}
 80151ae:	b085      	sub	sp, #20
 80151b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80151b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80151b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80151b8:	4b27      	ldr	r3, [pc, #156]	; (8015258 <prvHeapInit+0xac>)
 80151ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f003 0307 	and.w	r3, r3, #7
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d00c      	beq.n	80151e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	3307      	adds	r3, #7
 80151ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f023 0307 	bic.w	r3, r3, #7
 80151d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80151d4:	68ba      	ldr	r2, [r7, #8]
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	1ad3      	subs	r3, r2, r3
 80151da:	4a1f      	ldr	r2, [pc, #124]	; (8015258 <prvHeapInit+0xac>)
 80151dc:	4413      	add	r3, r2
 80151de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80151e4:	4a1d      	ldr	r2, [pc, #116]	; (801525c <prvHeapInit+0xb0>)
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80151ea:	4b1c      	ldr	r3, [pc, #112]	; (801525c <prvHeapInit+0xb0>)
 80151ec:	2200      	movs	r2, #0
 80151ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	68ba      	ldr	r2, [r7, #8]
 80151f4:	4413      	add	r3, r2
 80151f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80151f8:	2208      	movs	r2, #8
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	1a9b      	subs	r3, r3, r2
 80151fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	f023 0307 	bic.w	r3, r3, #7
 8015206:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	4a15      	ldr	r2, [pc, #84]	; (8015260 <prvHeapInit+0xb4>)
 801520c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801520e:	4b14      	ldr	r3, [pc, #80]	; (8015260 <prvHeapInit+0xb4>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2200      	movs	r2, #0
 8015214:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015216:	4b12      	ldr	r3, [pc, #72]	; (8015260 <prvHeapInit+0xb4>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	2200      	movs	r2, #0
 801521c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	68fa      	ldr	r2, [r7, #12]
 8015226:	1ad2      	subs	r2, r2, r3
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801522c:	4b0c      	ldr	r3, [pc, #48]	; (8015260 <prvHeapInit+0xb4>)
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	4a0a      	ldr	r2, [pc, #40]	; (8015264 <prvHeapInit+0xb8>)
 801523a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	685b      	ldr	r3, [r3, #4]
 8015240:	4a09      	ldr	r2, [pc, #36]	; (8015268 <prvHeapInit+0xbc>)
 8015242:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015244:	4b09      	ldr	r3, [pc, #36]	; (801526c <prvHeapInit+0xc0>)
 8015246:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801524a:	601a      	str	r2, [r3, #0]
}
 801524c:	bf00      	nop
 801524e:	3714      	adds	r7, #20
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr
 8015258:	20001e14 	.word	0x20001e14
 801525c:	20009e14 	.word	0x20009e14
 8015260:	20009e1c 	.word	0x20009e1c
 8015264:	20009e24 	.word	0x20009e24
 8015268:	20009e20 	.word	0x20009e20
 801526c:	20009e28 	.word	0x20009e28

08015270 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015270:	b480      	push	{r7}
 8015272:	b085      	sub	sp, #20
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015278:	4b28      	ldr	r3, [pc, #160]	; (801531c <prvInsertBlockIntoFreeList+0xac>)
 801527a:	60fb      	str	r3, [r7, #12]
 801527c:	e002      	b.n	8015284 <prvInsertBlockIntoFreeList+0x14>
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	60fb      	str	r3, [r7, #12]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	429a      	cmp	r2, r3
 801528c:	d8f7      	bhi.n	801527e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	68ba      	ldr	r2, [r7, #8]
 8015298:	4413      	add	r3, r2
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	429a      	cmp	r2, r3
 801529e:	d108      	bne.n	80152b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	685a      	ldr	r2, [r3, #4]
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	441a      	add	r2, r3
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	68ba      	ldr	r2, [r7, #8]
 80152bc:	441a      	add	r2, r3
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d118      	bne.n	80152f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	681a      	ldr	r2, [r3, #0]
 80152ca:	4b15      	ldr	r3, [pc, #84]	; (8015320 <prvInsertBlockIntoFreeList+0xb0>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	429a      	cmp	r2, r3
 80152d0:	d00d      	beq.n	80152ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	685a      	ldr	r2, [r3, #4]
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	685b      	ldr	r3, [r3, #4]
 80152dc:	441a      	add	r2, r3
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	681a      	ldr	r2, [r3, #0]
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	601a      	str	r2, [r3, #0]
 80152ec:	e008      	b.n	8015300 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80152ee:	4b0c      	ldr	r3, [pc, #48]	; (8015320 <prvInsertBlockIntoFreeList+0xb0>)
 80152f0:	681a      	ldr	r2, [r3, #0]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	601a      	str	r2, [r3, #0]
 80152f6:	e003      	b.n	8015300 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	681a      	ldr	r2, [r3, #0]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015300:	68fa      	ldr	r2, [r7, #12]
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	429a      	cmp	r2, r3
 8015306:	d002      	beq.n	801530e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	687a      	ldr	r2, [r7, #4]
 801530c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801530e:	bf00      	nop
 8015310:	3714      	adds	r7, #20
 8015312:	46bd      	mov	sp, r7
 8015314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015318:	4770      	bx	lr
 801531a:	bf00      	nop
 801531c:	20009e14 	.word	0x20009e14
 8015320:	20009e1c 	.word	0x20009e1c

08015324 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015328:	2201      	movs	r2, #1
 801532a:	490e      	ldr	r1, [pc, #56]	; (8015364 <MX_USB_HOST_Init+0x40>)
 801532c:	480e      	ldr	r0, [pc, #56]	; (8015368 <MX_USB_HOST_Init+0x44>)
 801532e:	f7fb f8f1 	bl	8010514 <USBH_Init>
 8015332:	4603      	mov	r3, r0
 8015334:	2b00      	cmp	r3, #0
 8015336:	d001      	beq.n	801533c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015338:	f7ec fee0 	bl	80020fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801533c:	490b      	ldr	r1, [pc, #44]	; (801536c <MX_USB_HOST_Init+0x48>)
 801533e:	480a      	ldr	r0, [pc, #40]	; (8015368 <MX_USB_HOST_Init+0x44>)
 8015340:	f7fb f998 	bl	8010674 <USBH_RegisterClass>
 8015344:	4603      	mov	r3, r0
 8015346:	2b00      	cmp	r3, #0
 8015348:	d001      	beq.n	801534e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801534a:	f7ec fed7 	bl	80020fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801534e:	4806      	ldr	r0, [pc, #24]	; (8015368 <MX_USB_HOST_Init+0x44>)
 8015350:	f7fb fa1c 	bl	801078c <USBH_Start>
 8015354:	4603      	mov	r3, r0
 8015356:	2b00      	cmp	r3, #0
 8015358:	d001      	beq.n	801535e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801535a:	f7ec fecf 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801535e:	bf00      	nop
 8015360:	bd80      	pop	{r7, pc}
 8015362:	bf00      	nop
 8015364:	08015371 	.word	0x08015371
 8015368:	2000c00c 	.word	0x2000c00c
 801536c:	2000005c 	.word	0x2000005c

08015370 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015370:	b480      	push	{r7}
 8015372:	b083      	sub	sp, #12
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	460b      	mov	r3, r1
 801537a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801537c:	78fb      	ldrb	r3, [r7, #3]
 801537e:	3b01      	subs	r3, #1
 8015380:	2b04      	cmp	r3, #4
 8015382:	d819      	bhi.n	80153b8 <USBH_UserProcess+0x48>
 8015384:	a201      	add	r2, pc, #4	; (adr r2, 801538c <USBH_UserProcess+0x1c>)
 8015386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801538a:	bf00      	nop
 801538c:	080153b9 	.word	0x080153b9
 8015390:	080153a9 	.word	0x080153a9
 8015394:	080153b9 	.word	0x080153b9
 8015398:	080153b1 	.word	0x080153b1
 801539c:	080153a1 	.word	0x080153a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80153a0:	4b09      	ldr	r3, [pc, #36]	; (80153c8 <USBH_UserProcess+0x58>)
 80153a2:	2203      	movs	r2, #3
 80153a4:	701a      	strb	r2, [r3, #0]
  break;
 80153a6:	e008      	b.n	80153ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80153a8:	4b07      	ldr	r3, [pc, #28]	; (80153c8 <USBH_UserProcess+0x58>)
 80153aa:	2202      	movs	r2, #2
 80153ac:	701a      	strb	r2, [r3, #0]
  break;
 80153ae:	e004      	b.n	80153ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80153b0:	4b05      	ldr	r3, [pc, #20]	; (80153c8 <USBH_UserProcess+0x58>)
 80153b2:	2201      	movs	r2, #1
 80153b4:	701a      	strb	r2, [r3, #0]
  break;
 80153b6:	e000      	b.n	80153ba <USBH_UserProcess+0x4a>

  default:
  break;
 80153b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80153ba:	bf00      	nop
 80153bc:	370c      	adds	r7, #12
 80153be:	46bd      	mov	sp, r7
 80153c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c4:	4770      	bx	lr
 80153c6:	bf00      	nop
 80153c8:	20009e2c 	.word	0x20009e2c

080153cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b08a      	sub	sp, #40	; 0x28
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80153d4:	f107 0314 	add.w	r3, r7, #20
 80153d8:	2200      	movs	r2, #0
 80153da:	601a      	str	r2, [r3, #0]
 80153dc:	605a      	str	r2, [r3, #4]
 80153de:	609a      	str	r2, [r3, #8]
 80153e0:	60da      	str	r2, [r3, #12]
 80153e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80153ec:	d13c      	bne.n	8015468 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80153ee:	4b20      	ldr	r3, [pc, #128]	; (8015470 <HAL_HCD_MspInit+0xa4>)
 80153f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153f2:	4a1f      	ldr	r2, [pc, #124]	; (8015470 <HAL_HCD_MspInit+0xa4>)
 80153f4:	f043 0301 	orr.w	r3, r3, #1
 80153f8:	6313      	str	r3, [r2, #48]	; 0x30
 80153fa:	4b1d      	ldr	r3, [pc, #116]	; (8015470 <HAL_HCD_MspInit+0xa4>)
 80153fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153fe:	f003 0301 	and.w	r3, r3, #1
 8015402:	613b      	str	r3, [r7, #16]
 8015404:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8015406:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801540a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801540c:	2302      	movs	r3, #2
 801540e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015410:	2300      	movs	r3, #0
 8015412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015414:	2303      	movs	r3, #3
 8015416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015418:	230a      	movs	r3, #10
 801541a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801541c:	f107 0314 	add.w	r3, r7, #20
 8015420:	4619      	mov	r1, r3
 8015422:	4814      	ldr	r0, [pc, #80]	; (8015474 <HAL_HCD_MspInit+0xa8>)
 8015424:	f7f2 fafc 	bl	8007a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015428:	4b11      	ldr	r3, [pc, #68]	; (8015470 <HAL_HCD_MspInit+0xa4>)
 801542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801542c:	4a10      	ldr	r2, [pc, #64]	; (8015470 <HAL_HCD_MspInit+0xa4>)
 801542e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015432:	6353      	str	r3, [r2, #52]	; 0x34
 8015434:	4b0e      	ldr	r3, [pc, #56]	; (8015470 <HAL_HCD_MspInit+0xa4>)
 8015436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801543c:	60fb      	str	r3, [r7, #12]
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	4b0b      	ldr	r3, [pc, #44]	; (8015470 <HAL_HCD_MspInit+0xa4>)
 8015442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015444:	4a0a      	ldr	r2, [pc, #40]	; (8015470 <HAL_HCD_MspInit+0xa4>)
 8015446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801544a:	6453      	str	r3, [r2, #68]	; 0x44
 801544c:	4b08      	ldr	r3, [pc, #32]	; (8015470 <HAL_HCD_MspInit+0xa4>)
 801544e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015454:	60bb      	str	r3, [r7, #8]
 8015456:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015458:	2200      	movs	r2, #0
 801545a:	2100      	movs	r1, #0
 801545c:	2043      	movs	r0, #67	; 0x43
 801545e:	f7f1 f9e1 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015462:	2043      	movs	r0, #67	; 0x43
 8015464:	f7f1 f9fa 	bl	800685c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015468:	bf00      	nop
 801546a:	3728      	adds	r7, #40	; 0x28
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}
 8015470:	40023800 	.word	0x40023800
 8015474:	40020000 	.word	0x40020000

08015478 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b082      	sub	sp, #8
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015486:	4618      	mov	r0, r3
 8015488:	f7fb fe2d 	bl	80110e6 <USBH_LL_IncTimer>
}
 801548c:	bf00      	nop
 801548e:	3708      	adds	r7, #8
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7fb fe71 	bl	801118a <USBH_LL_Connect>
}
 80154a8:	bf00      	nop
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80154be:	4618      	mov	r0, r3
 80154c0:	f7fb fe86 	bl	80111d0 <USBH_LL_Disconnect>
}
 80154c4:	bf00      	nop
 80154c6:	3708      	adds	r7, #8
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	460b      	mov	r3, r1
 80154d6:	70fb      	strb	r3, [r7, #3]
 80154d8:	4613      	mov	r3, r2
 80154da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fb febd 	bl	8011262 <USBH_LL_NotifyURBChange>
#endif
}
 80154e8:	bf00      	nop
 80154ea:	3708      	adds	r7, #8
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}

080154f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b082      	sub	sp, #8
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80154fe:	4618      	mov	r0, r3
 8015500:	f7fb fe1b 	bl	801113a <USBH_LL_PortEnabled>
}
 8015504:	bf00      	nop
 8015506:	3708      	adds	r7, #8
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801551a:	4618      	mov	r0, r3
 801551c:	f7fb fe27 	bl	801116e <USBH_LL_PortDisabled>
}
 8015520:	bf00      	nop
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}

08015528 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b082      	sub	sp, #8
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015536:	2b01      	cmp	r3, #1
 8015538:	d12a      	bne.n	8015590 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801553a:	4a18      	ldr	r2, [pc, #96]	; (801559c <USBH_LL_Init+0x74>)
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	4a15      	ldr	r2, [pc, #84]	; (801559c <USBH_LL_Init+0x74>)
 8015546:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801554a:	4b14      	ldr	r3, [pc, #80]	; (801559c <USBH_LL_Init+0x74>)
 801554c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015550:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015552:	4b12      	ldr	r3, [pc, #72]	; (801559c <USBH_LL_Init+0x74>)
 8015554:	2208      	movs	r2, #8
 8015556:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015558:	4b10      	ldr	r3, [pc, #64]	; (801559c <USBH_LL_Init+0x74>)
 801555a:	2201      	movs	r2, #1
 801555c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801555e:	4b0f      	ldr	r3, [pc, #60]	; (801559c <USBH_LL_Init+0x74>)
 8015560:	2200      	movs	r2, #0
 8015562:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015564:	4b0d      	ldr	r3, [pc, #52]	; (801559c <USBH_LL_Init+0x74>)
 8015566:	2202      	movs	r2, #2
 8015568:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801556a:	4b0c      	ldr	r3, [pc, #48]	; (801559c <USBH_LL_Init+0x74>)
 801556c:	2200      	movs	r2, #0
 801556e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015570:	480a      	ldr	r0, [pc, #40]	; (801559c <USBH_LL_Init+0x74>)
 8015572:	f7f2 fd3c 	bl	8007fee <HAL_HCD_Init>
 8015576:	4603      	mov	r3, r0
 8015578:	2b00      	cmp	r3, #0
 801557a:	d001      	beq.n	8015580 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801557c:	f7ec fdbe 	bl	80020fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015580:	4806      	ldr	r0, [pc, #24]	; (801559c <USBH_LL_Init+0x74>)
 8015582:	f7f3 f93f 	bl	8008804 <HAL_HCD_GetCurrentFrame>
 8015586:	4603      	mov	r3, r0
 8015588:	4619      	mov	r1, r3
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f7fb fd9c 	bl	80110c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015590:	2300      	movs	r3, #0
}
 8015592:	4618      	mov	r0, r3
 8015594:	3708      	adds	r7, #8
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop
 801559c:	2000c3f0 	.word	0x2000c3f0

080155a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b084      	sub	sp, #16
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155a8:	2300      	movs	r3, #0
 80155aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80155ac:	2300      	movs	r3, #0
 80155ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7f3 f8ac 	bl	8008714 <HAL_HCD_Start>
 80155bc:	4603      	mov	r3, r0
 80155be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80155c0:	7bfb      	ldrb	r3, [r7, #15]
 80155c2:	4618      	mov	r0, r3
 80155c4:	f000 f95c 	bl	8015880 <USBH_Get_USB_Status>
 80155c8:	4603      	mov	r3, r0
 80155ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3710      	adds	r7, #16
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}

080155d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80155d6:	b580      	push	{r7, lr}
 80155d8:	b084      	sub	sp, #16
 80155da:	af00      	add	r7, sp, #0
 80155dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155de:	2300      	movs	r3, #0
 80155e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80155e2:	2300      	movs	r3, #0
 80155e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7f3 f8b4 	bl	800875a <HAL_HCD_Stop>
 80155f2:	4603      	mov	r3, r0
 80155f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80155f6:	7bfb      	ldrb	r3, [r7, #15]
 80155f8:	4618      	mov	r0, r3
 80155fa:	f000 f941 	bl	8015880 <USBH_Get_USB_Status>
 80155fe:	4603      	mov	r3, r0
 8015600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015602:	7bbb      	ldrb	r3, [r7, #14]
}
 8015604:	4618      	mov	r0, r3
 8015606:	3710      	adds	r7, #16
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}

0801560c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015614:	2301      	movs	r3, #1
 8015616:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801561e:	4618      	mov	r0, r3
 8015620:	f7f3 f8fe 	bl	8008820 <HAL_HCD_GetCurrentSpeed>
 8015624:	4603      	mov	r3, r0
 8015626:	2b01      	cmp	r3, #1
 8015628:	d007      	beq.n	801563a <USBH_LL_GetSpeed+0x2e>
 801562a:	2b01      	cmp	r3, #1
 801562c:	d302      	bcc.n	8015634 <USBH_LL_GetSpeed+0x28>
 801562e:	2b02      	cmp	r3, #2
 8015630:	d006      	beq.n	8015640 <USBH_LL_GetSpeed+0x34>
 8015632:	e008      	b.n	8015646 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015634:	2300      	movs	r3, #0
 8015636:	73fb      	strb	r3, [r7, #15]
    break;
 8015638:	e008      	b.n	801564c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801563a:	2301      	movs	r3, #1
 801563c:	73fb      	strb	r3, [r7, #15]
    break;
 801563e:	e005      	b.n	801564c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015640:	2302      	movs	r3, #2
 8015642:	73fb      	strb	r3, [r7, #15]
    break;
 8015644:	e002      	b.n	801564c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8015646:	2301      	movs	r3, #1
 8015648:	73fb      	strb	r3, [r7, #15]
    break;
 801564a:	bf00      	nop
  }
  return  speed;
 801564c:	7bfb      	ldrb	r3, [r7, #15]
}
 801564e:	4618      	mov	r0, r3
 8015650:	3710      	adds	r7, #16
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}

08015656 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015656:	b580      	push	{r7, lr}
 8015658:	b084      	sub	sp, #16
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801565e:	2300      	movs	r3, #0
 8015660:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015662:	2300      	movs	r3, #0
 8015664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801566c:	4618      	mov	r0, r3
 801566e:	f7f3 f891 	bl	8008794 <HAL_HCD_ResetPort>
 8015672:	4603      	mov	r3, r0
 8015674:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015676:	7bfb      	ldrb	r3, [r7, #15]
 8015678:	4618      	mov	r0, r3
 801567a:	f000 f901 	bl	8015880 <USBH_Get_USB_Status>
 801567e:	4603      	mov	r3, r0
 8015680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015682:	7bbb      	ldrb	r3, [r7, #14]
}
 8015684:	4618      	mov	r0, r3
 8015686:	3710      	adds	r7, #16
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}

0801568c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b082      	sub	sp, #8
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	460b      	mov	r3, r1
 8015696:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801569e:	78fa      	ldrb	r2, [r7, #3]
 80156a0:	4611      	mov	r1, r2
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7f3 f899 	bl	80087da <HAL_HCD_HC_GetXferCount>
 80156a8:	4603      	mov	r3, r0
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3708      	adds	r7, #8
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}

080156b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80156b2:	b590      	push	{r4, r7, lr}
 80156b4:	b089      	sub	sp, #36	; 0x24
 80156b6:	af04      	add	r7, sp, #16
 80156b8:	6078      	str	r0, [r7, #4]
 80156ba:	4608      	mov	r0, r1
 80156bc:	4611      	mov	r1, r2
 80156be:	461a      	mov	r2, r3
 80156c0:	4603      	mov	r3, r0
 80156c2:	70fb      	strb	r3, [r7, #3]
 80156c4:	460b      	mov	r3, r1
 80156c6:	70bb      	strb	r3, [r7, #2]
 80156c8:	4613      	mov	r3, r2
 80156ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156cc:	2300      	movs	r3, #0
 80156ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80156d0:	2300      	movs	r3, #0
 80156d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80156da:	787c      	ldrb	r4, [r7, #1]
 80156dc:	78ba      	ldrb	r2, [r7, #2]
 80156de:	78f9      	ldrb	r1, [r7, #3]
 80156e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80156e2:	9302      	str	r3, [sp, #8]
 80156e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80156e8:	9301      	str	r3, [sp, #4]
 80156ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80156ee:	9300      	str	r3, [sp, #0]
 80156f0:	4623      	mov	r3, r4
 80156f2:	f7f2 fcde 	bl	80080b2 <HAL_HCD_HC_Init>
 80156f6:	4603      	mov	r3, r0
 80156f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80156fa:	7bfb      	ldrb	r3, [r7, #15]
 80156fc:	4618      	mov	r0, r3
 80156fe:	f000 f8bf 	bl	8015880 <USBH_Get_USB_Status>
 8015702:	4603      	mov	r3, r0
 8015704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015706:	7bbb      	ldrb	r3, [r7, #14]
}
 8015708:	4618      	mov	r0, r3
 801570a:	3714      	adds	r7, #20
 801570c:	46bd      	mov	sp, r7
 801570e:	bd90      	pop	{r4, r7, pc}

08015710 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
 8015718:	460b      	mov	r3, r1
 801571a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801571c:	2300      	movs	r3, #0
 801571e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015720:	2300      	movs	r3, #0
 8015722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801572a:	78fa      	ldrb	r2, [r7, #3]
 801572c:	4611      	mov	r1, r2
 801572e:	4618      	mov	r0, r3
 8015730:	f7f2 fd57 	bl	80081e2 <HAL_HCD_HC_Halt>
 8015734:	4603      	mov	r3, r0
 8015736:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015738:	7bfb      	ldrb	r3, [r7, #15]
 801573a:	4618      	mov	r0, r3
 801573c:	f000 f8a0 	bl	8015880 <USBH_Get_USB_Status>
 8015740:	4603      	mov	r3, r0
 8015742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015744:	7bbb      	ldrb	r3, [r7, #14]
}
 8015746:	4618      	mov	r0, r3
 8015748:	3710      	adds	r7, #16
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}

0801574e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801574e:	b590      	push	{r4, r7, lr}
 8015750:	b089      	sub	sp, #36	; 0x24
 8015752:	af04      	add	r7, sp, #16
 8015754:	6078      	str	r0, [r7, #4]
 8015756:	4608      	mov	r0, r1
 8015758:	4611      	mov	r1, r2
 801575a:	461a      	mov	r2, r3
 801575c:	4603      	mov	r3, r0
 801575e:	70fb      	strb	r3, [r7, #3]
 8015760:	460b      	mov	r3, r1
 8015762:	70bb      	strb	r3, [r7, #2]
 8015764:	4613      	mov	r3, r2
 8015766:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015768:	2300      	movs	r3, #0
 801576a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801576c:	2300      	movs	r3, #0
 801576e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015776:	787c      	ldrb	r4, [r7, #1]
 8015778:	78ba      	ldrb	r2, [r7, #2]
 801577a:	78f9      	ldrb	r1, [r7, #3]
 801577c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015780:	9303      	str	r3, [sp, #12]
 8015782:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015784:	9302      	str	r3, [sp, #8]
 8015786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015788:	9301      	str	r3, [sp, #4]
 801578a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801578e:	9300      	str	r3, [sp, #0]
 8015790:	4623      	mov	r3, r4
 8015792:	f7f2 fd49 	bl	8008228 <HAL_HCD_HC_SubmitRequest>
 8015796:	4603      	mov	r3, r0
 8015798:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801579a:	7bfb      	ldrb	r3, [r7, #15]
 801579c:	4618      	mov	r0, r3
 801579e:	f000 f86f 	bl	8015880 <USBH_Get_USB_Status>
 80157a2:	4603      	mov	r3, r0
 80157a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3714      	adds	r7, #20
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd90      	pop	{r4, r7, pc}

080157b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b082      	sub	sp, #8
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	460b      	mov	r3, r1
 80157ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80157c2:	78fa      	ldrb	r2, [r7, #3]
 80157c4:	4611      	mov	r1, r2
 80157c6:	4618      	mov	r0, r3
 80157c8:	f7f2 fff2 	bl	80087b0 <HAL_HCD_HC_GetURBState>
 80157cc:	4603      	mov	r3, r0
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3708      	adds	r7, #8
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}

080157d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80157d6:	b580      	push	{r7, lr}
 80157d8:	b082      	sub	sp, #8
 80157da:	af00      	add	r7, sp, #0
 80157dc:	6078      	str	r0, [r7, #4]
 80157de:	460b      	mov	r3, r1
 80157e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80157e8:	2b01      	cmp	r3, #1
 80157ea:	d103      	bne.n	80157f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80157ec:	78fb      	ldrb	r3, [r7, #3]
 80157ee:	4618      	mov	r0, r3
 80157f0:	f000 f872 	bl	80158d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80157f4:	20c8      	movs	r0, #200	; 0xc8
 80157f6:	f7f0 fcb3 	bl	8006160 <HAL_Delay>
  return USBH_OK;
 80157fa:	2300      	movs	r3, #0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3708      	adds	r7, #8
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}

08015804 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015804:	b480      	push	{r7}
 8015806:	b085      	sub	sp, #20
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
 801580c:	460b      	mov	r3, r1
 801580e:	70fb      	strb	r3, [r7, #3]
 8015810:	4613      	mov	r3, r2
 8015812:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801581a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801581c:	78fa      	ldrb	r2, [r7, #3]
 801581e:	68f9      	ldr	r1, [r7, #12]
 8015820:	4613      	mov	r3, r2
 8015822:	009b      	lsls	r3, r3, #2
 8015824:	4413      	add	r3, r2
 8015826:	00db      	lsls	r3, r3, #3
 8015828:	440b      	add	r3, r1
 801582a:	333b      	adds	r3, #59	; 0x3b
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d00a      	beq.n	8015848 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015832:	78fa      	ldrb	r2, [r7, #3]
 8015834:	68f9      	ldr	r1, [r7, #12]
 8015836:	4613      	mov	r3, r2
 8015838:	009b      	lsls	r3, r3, #2
 801583a:	4413      	add	r3, r2
 801583c:	00db      	lsls	r3, r3, #3
 801583e:	440b      	add	r3, r1
 8015840:	3350      	adds	r3, #80	; 0x50
 8015842:	78ba      	ldrb	r2, [r7, #2]
 8015844:	701a      	strb	r2, [r3, #0]
 8015846:	e009      	b.n	801585c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015848:	78fa      	ldrb	r2, [r7, #3]
 801584a:	68f9      	ldr	r1, [r7, #12]
 801584c:	4613      	mov	r3, r2
 801584e:	009b      	lsls	r3, r3, #2
 8015850:	4413      	add	r3, r2
 8015852:	00db      	lsls	r3, r3, #3
 8015854:	440b      	add	r3, r1
 8015856:	3351      	adds	r3, #81	; 0x51
 8015858:	78ba      	ldrb	r2, [r7, #2]
 801585a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801585c:	2300      	movs	r3, #0
}
 801585e:	4618      	mov	r0, r3
 8015860:	3714      	adds	r7, #20
 8015862:	46bd      	mov	sp, r7
 8015864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015868:	4770      	bx	lr

0801586a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801586a:	b580      	push	{r7, lr}
 801586c:	b082      	sub	sp, #8
 801586e:	af00      	add	r7, sp, #0
 8015870:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f7f0 fc74 	bl	8006160 <HAL_Delay>
}
 8015878:	bf00      	nop
 801587a:	3708      	adds	r7, #8
 801587c:	46bd      	mov	sp, r7
 801587e:	bd80      	pop	{r7, pc}

08015880 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015880:	b480      	push	{r7}
 8015882:	b085      	sub	sp, #20
 8015884:	af00      	add	r7, sp, #0
 8015886:	4603      	mov	r3, r0
 8015888:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801588a:	2300      	movs	r3, #0
 801588c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801588e:	79fb      	ldrb	r3, [r7, #7]
 8015890:	2b03      	cmp	r3, #3
 8015892:	d817      	bhi.n	80158c4 <USBH_Get_USB_Status+0x44>
 8015894:	a201      	add	r2, pc, #4	; (adr r2, 801589c <USBH_Get_USB_Status+0x1c>)
 8015896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801589a:	bf00      	nop
 801589c:	080158ad 	.word	0x080158ad
 80158a0:	080158b3 	.word	0x080158b3
 80158a4:	080158b9 	.word	0x080158b9
 80158a8:	080158bf 	.word	0x080158bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80158ac:	2300      	movs	r3, #0
 80158ae:	73fb      	strb	r3, [r7, #15]
    break;
 80158b0:	e00b      	b.n	80158ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80158b2:	2302      	movs	r3, #2
 80158b4:	73fb      	strb	r3, [r7, #15]
    break;
 80158b6:	e008      	b.n	80158ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80158b8:	2301      	movs	r3, #1
 80158ba:	73fb      	strb	r3, [r7, #15]
    break;
 80158bc:	e005      	b.n	80158ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80158be:	2302      	movs	r3, #2
 80158c0:	73fb      	strb	r3, [r7, #15]
    break;
 80158c2:	e002      	b.n	80158ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80158c4:	2302      	movs	r3, #2
 80158c6:	73fb      	strb	r3, [r7, #15]
    break;
 80158c8:	bf00      	nop
  }
  return usb_status;
 80158ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80158cc:	4618      	mov	r0, r3
 80158ce:	3714      	adds	r7, #20
 80158d0:	46bd      	mov	sp, r7
 80158d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d6:	4770      	bx	lr

080158d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
 80158de:	4603      	mov	r3, r0
 80158e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80158e2:	79fb      	ldrb	r3, [r7, #7]
 80158e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80158e6:	79fb      	ldrb	r3, [r7, #7]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d102      	bne.n	80158f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80158ec:	2301      	movs	r3, #1
 80158ee:	73fb      	strb	r3, [r7, #15]
 80158f0:	e001      	b.n	80158f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80158f2:	2300      	movs	r3, #0
 80158f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80158f6:	7bfb      	ldrb	r3, [r7, #15]
 80158f8:	461a      	mov	r2, r3
 80158fa:	2120      	movs	r1, #32
 80158fc:	4803      	ldr	r0, [pc, #12]	; (801590c <MX_DriverVbusFS+0x34>)
 80158fe:	f7f2 fb43 	bl	8007f88 <HAL_GPIO_WritePin>
}
 8015902:	bf00      	nop
 8015904:	3710      	adds	r7, #16
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}
 801590a:	bf00      	nop
 801590c:	40020c00 	.word	0x40020c00

08015910 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 8015914:	f000 f806 	bl	8015924 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8015918:	f04f 30ff 	mov.w	r0, #4294967295
 801591c:	f7ef fe38 	bl	8005590 <BSP_LCD_Clear>
}
 8015920:	bf00      	nop
 8015922:	bd80      	pop	{r7, pc}

08015924 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 8015924:	b480      	push	{r7}
 8015926:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8015928:	4b12      	ldr	r3, [pc, #72]	; (8015974 <LCD_LOG_DeInit+0x50>)
 801592a:	4a13      	ldr	r2, [pc, #76]	; (8015978 <LCD_LOG_DeInit+0x54>)
 801592c:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 801592e:	4b13      	ldr	r3, [pc, #76]	; (801597c <LCD_LOG_DeInit+0x58>)
 8015930:	2200      	movs	r2, #0
 8015932:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8015934:	4b12      	ldr	r3, [pc, #72]	; (8015980 <LCD_LOG_DeInit+0x5c>)
 8015936:	2200      	movs	r2, #0
 8015938:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 801593a:	4b12      	ldr	r3, [pc, #72]	; (8015984 <LCD_LOG_DeInit+0x60>)
 801593c:	2200      	movs	r2, #0
 801593e:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8015940:	4b11      	ldr	r3, [pc, #68]	; (8015988 <LCD_LOG_DeInit+0x64>)
 8015942:	2200      	movs	r2, #0
 8015944:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8015946:	4b11      	ldr	r3, [pc, #68]	; (801598c <LCD_LOG_DeInit+0x68>)
 8015948:	2200      	movs	r2, #0
 801594a:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 801594c:	4b10      	ldr	r3, [pc, #64]	; (8015990 <LCD_LOG_DeInit+0x6c>)
 801594e:	2201      	movs	r2, #1
 8015950:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8015952:	4b10      	ldr	r3, [pc, #64]	; (8015994 <LCD_LOG_DeInit+0x70>)
 8015954:	2200      	movs	r2, #0
 8015956:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8015958:	4b0f      	ldr	r3, [pc, #60]	; (8015998 <LCD_LOG_DeInit+0x74>)
 801595a:	2200      	movs	r2, #0
 801595c:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 801595e:	4b0f      	ldr	r3, [pc, #60]	; (801599c <LCD_LOG_DeInit+0x78>)
 8015960:	2200      	movs	r2, #0
 8015962:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8015964:	4b0e      	ldr	r3, [pc, #56]	; (80159a0 <LCD_LOG_DeInit+0x7c>)
 8015966:	2200      	movs	r2, #0
 8015968:	801a      	strh	r2, [r3, #0]
}
 801596a:	bf00      	nop
 801596c:	46bd      	mov	sp, r7
 801596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015972:	4770      	bx	lr
 8015974:	20010318 	.word	0x20010318
 8015978:	ff000080 	.word	0xff000080
 801597c:	2000c6ba 	.word	0x2000c6ba
 8015980:	2000c6c0 	.word	0x2000c6c0
 8015984:	2000c6b8 	.word	0x2000c6b8
 8015988:	2000c6b6 	.word	0x2000c6b6
 801598c:	2000c6b4 	.word	0x2000c6b4
 8015990:	2000c6bc 	.word	0x2000c6bc
 8015994:	2000c6c2 	.word	0x2000c6c2
 8015998:	2000c6bd 	.word	0x2000c6bd
 801599c:	2000c6be 	.word	0x2000c6be
 80159a0:	2001031c 	.word	0x2001031c

080159a4 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80159ac:	4817      	ldr	r0, [pc, #92]	; (8015a0c <LCD_LOG_SetHeader+0x68>)
 80159ae:	f7ef fdbf 	bl	8005530 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80159b2:	4817      	ldr	r0, [pc, #92]	; (8015a10 <LCD_LOG_SetHeader+0x6c>)
 80159b4:	f7ef fd8a 	bl	80054cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 80159b8:	f7ef fd00 	bl	80053bc <BSP_LCD_GetXSize>
 80159bc:	4603      	mov	r3, r0
 80159be:	b29a      	uxth	r2, r3
 80159c0:	4b12      	ldr	r3, [pc, #72]	; (8015a0c <LCD_LOG_SetHeader+0x68>)
 80159c2:	88db      	ldrh	r3, [r3, #6]
 80159c4:	4619      	mov	r1, r3
 80159c6:	0049      	lsls	r1, r1, #1
 80159c8:	440b      	add	r3, r1
 80159ca:	b29b      	uxth	r3, r3
 80159cc:	2100      	movs	r1, #0
 80159ce:	2000      	movs	r0, #0
 80159d0:	f7ef ff6e 	bl	80058b0 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80159d4:	f04f 30ff 	mov.w	r0, #4294967295
 80159d8:	f7ef fd78 	bl	80054cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80159dc:	480c      	ldr	r0, [pc, #48]	; (8015a10 <LCD_LOG_SetHeader+0x6c>)
 80159de:	f7ef fd8d 	bl	80054fc <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 80159e2:	4b0a      	ldr	r3, [pc, #40]	; (8015a0c <LCD_LOG_SetHeader+0x68>)
 80159e4:	88d9      	ldrh	r1, [r3, #6]
 80159e6:	2301      	movs	r3, #1
 80159e8:	687a      	ldr	r2, [r7, #4]
 80159ea:	2000      	movs	r0, #0
 80159ec:	f7ef fe3c 	bl	8005668 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80159f0:	f04f 30ff 	mov.w	r0, #4294967295
 80159f4:	f7ef fd82 	bl	80054fc <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80159f8:	4806      	ldr	r0, [pc, #24]	; (8015a14 <LCD_LOG_SetHeader+0x70>)
 80159fa:	f7ef fd67 	bl	80054cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80159fe:	4806      	ldr	r0, [pc, #24]	; (8015a18 <LCD_LOG_SetHeader+0x74>)
 8015a00:	f7ef fd96 	bl	8005530 <BSP_LCD_SetFont>
}
 8015a04:	bf00      	nop
 8015a06:	3708      	adds	r7, #8
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	20000040 	.word	0x20000040
 8015a10:	ff0000ff 	.word	0xff0000ff
 8015a14:	ff000080 	.word	0xff000080
 8015a18:	20000048 	.word	0x20000048

08015a1c <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8015a1c:	b590      	push	{r4, r7, lr}
 8015a1e:	b083      	sub	sp, #12
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8015a24:	481e      	ldr	r0, [pc, #120]	; (8015aa0 <LCD_LOG_SetFooter+0x84>)
 8015a26:	f7ef fd83 	bl	8005530 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8015a2a:	481e      	ldr	r0, [pc, #120]	; (8015aa4 <LCD_LOG_SetFooter+0x88>)
 8015a2c:	f7ef fd4e 	bl	80054cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8015a30:	f7ef fcd8 	bl	80053e4 <BSP_LCD_GetYSize>
 8015a34:	4603      	mov	r3, r0
 8015a36:	b29a      	uxth	r2, r3
 8015a38:	4b19      	ldr	r3, [pc, #100]	; (8015aa0 <LCD_LOG_SetFooter+0x84>)
 8015a3a:	88db      	ldrh	r3, [r3, #6]
 8015a3c:	1ad3      	subs	r3, r2, r3
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	3b04      	subs	r3, #4
 8015a42:	b29c      	uxth	r4, r3
 8015a44:	f7ef fcba 	bl	80053bc <BSP_LCD_GetXSize>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	b29a      	uxth	r2, r3
 8015a4c:	4b14      	ldr	r3, [pc, #80]	; (8015aa0 <LCD_LOG_SetFooter+0x84>)
 8015a4e:	88db      	ldrh	r3, [r3, #6]
 8015a50:	3304      	adds	r3, #4
 8015a52:	b29b      	uxth	r3, r3
 8015a54:	4621      	mov	r1, r4
 8015a56:	2000      	movs	r0, #0
 8015a58:	f7ef ff2a 	bl	80058b0 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8015a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015a60:	f7ef fd34 	bl	80054cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8015a64:	480f      	ldr	r0, [pc, #60]	; (8015aa4 <LCD_LOG_SetFooter+0x88>)
 8015a66:	f7ef fd49 	bl	80054fc <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 8015a6a:	f7ef fcbb 	bl	80053e4 <BSP_LCD_GetYSize>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	b29a      	uxth	r2, r3
 8015a72:	4b0b      	ldr	r3, [pc, #44]	; (8015aa0 <LCD_LOG_SetFooter+0x84>)
 8015a74:	88db      	ldrh	r3, [r3, #6]
 8015a76:	1ad3      	subs	r3, r2, r3
 8015a78:	b299      	uxth	r1, r3
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	687a      	ldr	r2, [r7, #4]
 8015a7e:	2000      	movs	r0, #0
 8015a80:	f7ef fdf2 	bl	8005668 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8015a84:	f04f 30ff 	mov.w	r0, #4294967295
 8015a88:	f7ef fd38 	bl	80054fc <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8015a8c:	4806      	ldr	r0, [pc, #24]	; (8015aa8 <LCD_LOG_SetFooter+0x8c>)
 8015a8e:	f7ef fd1d 	bl	80054cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8015a92:	4803      	ldr	r0, [pc, #12]	; (8015aa0 <LCD_LOG_SetFooter+0x84>)
 8015a94:	f7ef fd4c 	bl	8005530 <BSP_LCD_SetFont>
}
 8015a98:	bf00      	nop
 8015a9a:	370c      	adds	r7, #12
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd90      	pop	{r4, r7, pc}
 8015aa0:	20000048 	.word	0x20000048
 8015aa4:	ff0000ff 	.word	0xff0000ff
 8015aa8:	ff000080 	.word	0xff000080

08015aac <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 8015aac:	b590      	push	{r4, r7, lr}
 8015aae:	b085      	sub	sp, #20
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8015ab4:	f7ef fd56 	bl	8005564 <BSP_LCD_GetFont>
 8015ab8:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 8015aba:	4b60      	ldr	r3, [pc, #384]	; (8015c3c <__io_putchar+0x190>)
 8015abc:	781b      	ldrb	r3, [r3, #0]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	f040 80b6 	bne.w	8015c30 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 8015ac4:	4b5e      	ldr	r3, [pc, #376]	; (8015c40 <__io_putchar+0x194>)
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	2b01      	cmp	r3, #1
 8015aca:	d110      	bne.n	8015aee <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8015acc:	4b5d      	ldr	r3, [pc, #372]	; (8015c44 <__io_putchar+0x198>)
 8015ace:	881a      	ldrh	r2, [r3, #0]
 8015ad0:	4b5d      	ldr	r3, [pc, #372]	; (8015c48 <__io_putchar+0x19c>)
 8015ad2:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8015ad4:	4b5d      	ldr	r3, [pc, #372]	; (8015c4c <__io_putchar+0x1a0>)
 8015ad6:	881a      	ldrh	r2, [r3, #0]
 8015ad8:	4b5d      	ldr	r3, [pc, #372]	; (8015c50 <__io_putchar+0x1a4>)
 8015ada:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8015adc:	4b58      	ldr	r3, [pc, #352]	; (8015c40 <__io_putchar+0x194>)
 8015ade:	2200      	movs	r2, #0
 8015ae0:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 8015ae2:	4b5c      	ldr	r3, [pc, #368]	; (8015c54 <__io_putchar+0x1a8>)
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8015ae8:	4b5b      	ldr	r3, [pc, #364]	; (8015c58 <__io_putchar+0x1ac>)
 8015aea:	2200      	movs	r2, #0
 8015aec:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8015aee:	4b5b      	ldr	r3, [pc, #364]	; (8015c5c <__io_putchar+0x1b0>)
 8015af0:	881b      	ldrh	r3, [r3, #0]
 8015af2:	461c      	mov	r4, r3
 8015af4:	f7ef fc62 	bl	80053bc <BSP_LCD_GetXSize>
 8015af8:	4602      	mov	r2, r0
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	889b      	ldrh	r3, [r3, #4]
 8015afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b02:	429c      	cmp	r4, r3
 8015b04:	d218      	bcs.n	8015b38 <__io_putchar+0x8c>
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2b0a      	cmp	r3, #10
 8015b0a:	d015      	beq.n	8015b38 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8015b0c:	4b4e      	ldr	r3, [pc, #312]	; (8015c48 <__io_putchar+0x19c>)
 8015b0e:	881b      	ldrh	r3, [r3, #0]
 8015b10:	4619      	mov	r1, r3
 8015b12:	4b52      	ldr	r3, [pc, #328]	; (8015c5c <__io_putchar+0x1b0>)
 8015b14:	881b      	ldrh	r3, [r3, #0]
 8015b16:	1c5a      	adds	r2, r3, #1
 8015b18:	b290      	uxth	r0, r2
 8015b1a:	4a50      	ldr	r2, [pc, #320]	; (8015c5c <__io_putchar+0x1b0>)
 8015b1c:	8010      	strh	r0, [r2, #0]
 8015b1e:	461c      	mov	r4, r3
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	b2d8      	uxtb	r0, r3
 8015b24:	4a4e      	ldr	r2, [pc, #312]	; (8015c60 <__io_putchar+0x1b4>)
 8015b26:	460b      	mov	r3, r1
 8015b28:	015b      	lsls	r3, r3, #5
 8015b2a:	440b      	add	r3, r1
 8015b2c:	009b      	lsls	r3, r3, #2
 8015b2e:	4413      	add	r3, r2
 8015b30:	4423      	add	r3, r4
 8015b32:	4602      	mov	r2, r0
 8015b34:	701a      	strb	r2, [r3, #0]
 8015b36:	e07b      	b.n	8015c30 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8015b38:	4b45      	ldr	r3, [pc, #276]	; (8015c50 <__io_putchar+0x1a4>)
 8015b3a:	881a      	ldrh	r2, [r3, #0]
 8015b3c:	4b42      	ldr	r3, [pc, #264]	; (8015c48 <__io_putchar+0x19c>)
 8015b3e:	881b      	ldrh	r3, [r3, #0]
 8015b40:	429a      	cmp	r2, r3
 8015b42:	d314      	bcc.n	8015b6e <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8015b44:	4b47      	ldr	r3, [pc, #284]	; (8015c64 <__io_putchar+0x1b8>)
 8015b46:	781b      	ldrb	r3, [r3, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d10d      	bne.n	8015b68 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 8015b4c:	4b40      	ldr	r3, [pc, #256]	; (8015c50 <__io_putchar+0x1a4>)
 8015b4e:	881b      	ldrh	r3, [r3, #0]
 8015b50:	3301      	adds	r3, #1
 8015b52:	b29a      	uxth	r2, r3
 8015b54:	4b3e      	ldr	r3, [pc, #248]	; (8015c50 <__io_putchar+0x1a4>)
 8015b56:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8015b58:	4b3d      	ldr	r3, [pc, #244]	; (8015c50 <__io_putchar+0x1a4>)
 8015b5a:	881b      	ldrh	r3, [r3, #0]
 8015b5c:	2b75      	cmp	r3, #117	; 0x75
 8015b5e:	d106      	bne.n	8015b6e <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8015b60:	4b3b      	ldr	r3, [pc, #236]	; (8015c50 <__io_putchar+0x1a4>)
 8015b62:	2200      	movs	r2, #0
 8015b64:	801a      	strh	r2, [r3, #0]
 8015b66:	e002      	b.n	8015b6e <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8015b68:	4b3e      	ldr	r3, [pc, #248]	; (8015c64 <__io_putchar+0x1b8>)
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8015b6e:	4b3b      	ldr	r3, [pc, #236]	; (8015c5c <__io_putchar+0x1b0>)
 8015b70:	881b      	ldrh	r3, [r3, #0]
 8015b72:	60fb      	str	r3, [r7, #12]
 8015b74:	e015      	b.n	8015ba2 <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8015b76:	4b34      	ldr	r3, [pc, #208]	; (8015c48 <__io_putchar+0x19c>)
 8015b78:	881b      	ldrh	r3, [r3, #0]
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	4b37      	ldr	r3, [pc, #220]	; (8015c5c <__io_putchar+0x1b0>)
 8015b7e:	881b      	ldrh	r3, [r3, #0]
 8015b80:	1c5a      	adds	r2, r3, #1
 8015b82:	b290      	uxth	r0, r2
 8015b84:	4a35      	ldr	r2, [pc, #212]	; (8015c5c <__io_putchar+0x1b0>)
 8015b86:	8010      	strh	r0, [r2, #0]
 8015b88:	4618      	mov	r0, r3
 8015b8a:	4a35      	ldr	r2, [pc, #212]	; (8015c60 <__io_putchar+0x1b4>)
 8015b8c:	460b      	mov	r3, r1
 8015b8e:	015b      	lsls	r3, r3, #5
 8015b90:	440b      	add	r3, r1
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	4413      	add	r3, r2
 8015b96:	4403      	add	r3, r0
 8015b98:	2220      	movs	r2, #32
 8015b9a:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	60fb      	str	r3, [r7, #12]
 8015ba2:	f7ef fc0b 	bl	80053bc <BSP_LCD_GetXSize>
 8015ba6:	4602      	mov	r2, r0
 8015ba8:	68bb      	ldr	r3, [r7, #8]
 8015baa:	889b      	ldrh	r3, [r3, #4]
 8015bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8015bb0:	68fa      	ldr	r2, [r7, #12]
 8015bb2:	429a      	cmp	r2, r3
 8015bb4:	d3df      	bcc.n	8015b76 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8015bb6:	4b24      	ldr	r3, [pc, #144]	; (8015c48 <__io_putchar+0x19c>)
 8015bb8:	881b      	ldrh	r3, [r3, #0]
 8015bba:	4618      	mov	r0, r3
 8015bbc:	4b2a      	ldr	r3, [pc, #168]	; (8015c68 <__io_putchar+0x1bc>)
 8015bbe:	681a      	ldr	r2, [r3, #0]
 8015bc0:	4927      	ldr	r1, [pc, #156]	; (8015c60 <__io_putchar+0x1b4>)
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	015b      	lsls	r3, r3, #5
 8015bc6:	4403      	add	r3, r0
 8015bc8:	009b      	lsls	r3, r3, #2
 8015bca:	440b      	add	r3, r1
 8015bcc:	3380      	adds	r3, #128	; 0x80
 8015bce:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 8015bd0:	4b22      	ldr	r3, [pc, #136]	; (8015c5c <__io_putchar+0x1b0>)
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8015bd6:	f000 f849 	bl	8015c6c <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8015bda:	4b1b      	ldr	r3, [pc, #108]	; (8015c48 <__io_putchar+0x19c>)
 8015bdc:	881b      	ldrh	r3, [r3, #0]
 8015bde:	3301      	adds	r3, #1
 8015be0:	b29a      	uxth	r2, r3
 8015be2:	4b19      	ldr	r3, [pc, #100]	; (8015c48 <__io_putchar+0x19c>)
 8015be4:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8015be6:	4b18      	ldr	r3, [pc, #96]	; (8015c48 <__io_putchar+0x19c>)
 8015be8:	881b      	ldrh	r3, [r3, #0]
 8015bea:	2b75      	cmp	r3, #117	; 0x75
 8015bec:	d108      	bne.n	8015c00 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 8015bee:	4b16      	ldr	r3, [pc, #88]	; (8015c48 <__io_putchar+0x19c>)
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8015bf4:	4b16      	ldr	r3, [pc, #88]	; (8015c50 <__io_putchar+0x1a4>)
 8015bf6:	2201      	movs	r2, #1
 8015bf8:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8015bfa:	4b1a      	ldr	r3, [pc, #104]	; (8015c64 <__io_putchar+0x1b8>)
 8015bfc:	2201      	movs	r2, #1
 8015bfe:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2b0a      	cmp	r3, #10
 8015c04:	d014      	beq.n	8015c30 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8015c06:	4b10      	ldr	r3, [pc, #64]	; (8015c48 <__io_putchar+0x19c>)
 8015c08:	881b      	ldrh	r3, [r3, #0]
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	4b13      	ldr	r3, [pc, #76]	; (8015c5c <__io_putchar+0x1b0>)
 8015c0e:	881b      	ldrh	r3, [r3, #0]
 8015c10:	1c5a      	adds	r2, r3, #1
 8015c12:	b290      	uxth	r0, r2
 8015c14:	4a11      	ldr	r2, [pc, #68]	; (8015c5c <__io_putchar+0x1b0>)
 8015c16:	8010      	strh	r0, [r2, #0]
 8015c18:	461c      	mov	r4, r3
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	b2d8      	uxtb	r0, r3
 8015c1e:	4a10      	ldr	r2, [pc, #64]	; (8015c60 <__io_putchar+0x1b4>)
 8015c20:	460b      	mov	r3, r1
 8015c22:	015b      	lsls	r3, r3, #5
 8015c24:	440b      	add	r3, r1
 8015c26:	009b      	lsls	r3, r3, #2
 8015c28:	4413      	add	r3, r2
 8015c2a:	4423      	add	r3, r4
 8015c2c:	4602      	mov	r2, r0
 8015c2e:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 8015c30:	687b      	ldr	r3, [r7, #4]
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3714      	adds	r7, #20
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd90      	pop	{r4, r7, pc}
 8015c3a:	bf00      	nop
 8015c3c:	2000c6bd 	.word	0x2000c6bd
 8015c40:	2000c6c2 	.word	0x2000c6c2
 8015c44:	2000c6b4 	.word	0x2000c6b4
 8015c48:	2000c6b8 	.word	0x2000c6b8
 8015c4c:	2000c6b6 	.word	0x2000c6b6
 8015c50:	2000c6c0 	.word	0x2000c6c0
 8015c54:	2000c6be 	.word	0x2000c6be
 8015c58:	2001031c 	.word	0x2001031c
 8015c5c:	2000c6ba 	.word	0x2000c6ba
 8015c60:	2000c6c4 	.word	0x2000c6c4
 8015c64:	2000c6bc 	.word	0x2000c6bc
 8015c68:	20010318 	.word	0x20010318

08015c6c <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b082      	sub	sp, #8
 8015c70:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 8015c72:	2300      	movs	r3, #0
 8015c74:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8015c76:	2300      	movs	r3, #0
 8015c78:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	807b      	strh	r3, [r7, #2]
 8015c7e:	2300      	movs	r3, #0
 8015c80:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8015c82:	4b39      	ldr	r3, [pc, #228]	; (8015d68 <LCD_LOG_UpdateDisplay+0xfc>)
 8015c84:	881b      	ldrh	r3, [r3, #0]
 8015c86:	2b0f      	cmp	r3, #15
 8015c88:	d826      	bhi.n	8015cd8 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8015c8a:	4b37      	ldr	r3, [pc, #220]	; (8015d68 <LCD_LOG_UpdateDisplay+0xfc>)
 8015c8c:	881a      	ldrh	r2, [r3, #0]
 8015c8e:	4b37      	ldr	r3, [pc, #220]	; (8015d6c <LCD_LOG_UpdateDisplay+0x100>)
 8015c90:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8015c92:	429a      	cmp	r2, r3
 8015c94:	d320      	bcc.n	8015cd8 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8015c96:	79fb      	ldrb	r3, [r7, #7]
 8015c98:	4a33      	ldr	r2, [pc, #204]	; (8015d68 <LCD_LOG_UpdateDisplay+0xfc>)
 8015c9a:	8812      	ldrh	r2, [r2, #0]
 8015c9c:	441a      	add	r2, r3
 8015c9e:	4934      	ldr	r1, [pc, #208]	; (8015d70 <LCD_LOG_UpdateDisplay+0x104>)
 8015ca0:	4613      	mov	r3, r2
 8015ca2:	015b      	lsls	r3, r3, #5
 8015ca4:	4413      	add	r3, r2
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	440b      	add	r3, r1
 8015caa:	3380      	adds	r3, #128	; 0x80
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7ef fc0c 	bl	80054cc <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8015cb4:	4b2c      	ldr	r3, [pc, #176]	; (8015d68 <LCD_LOG_UpdateDisplay+0xfc>)
 8015cb6:	881b      	ldrh	r3, [r3, #0]
 8015cb8:	3304      	adds	r3, #4
 8015cba:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 8015cbc:	79fb      	ldrb	r3, [r7, #7]
 8015cbe:	4a2a      	ldr	r2, [pc, #168]	; (8015d68 <LCD_LOG_UpdateDisplay+0xfc>)
 8015cc0:	8812      	ldrh	r2, [r2, #0]
 8015cc2:	441a      	add	r2, r3
 8015cc4:	4613      	mov	r3, r2
 8015cc6:	015b      	lsls	r3, r3, #5
 8015cc8:	4413      	add	r3, r2
 8015cca:	009b      	lsls	r3, r3, #2
 8015ccc:	4a28      	ldr	r2, [pc, #160]	; (8015d70 <LCD_LOG_UpdateDisplay+0x104>)
 8015cce:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8015cd0:	4619      	mov	r1, r3
 8015cd2:	f7ef fd8d 	bl	80057f0 <BSP_LCD_DisplayStringAtLine>
 8015cd6:	e043      	b.n	8015d60 <LCD_LOG_UpdateDisplay+0xf4>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8015cd8:	4b23      	ldr	r3, [pc, #140]	; (8015d68 <LCD_LOG_UpdateDisplay+0xfc>)
 8015cda:	881a      	ldrh	r2, [r3, #0]
 8015cdc:	4b23      	ldr	r3, [pc, #140]	; (8015d6c <LCD_LOG_UpdateDisplay+0x100>)
 8015cde:	881b      	ldrh	r3, [r3, #0]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d204      	bcs.n	8015cee <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8015ce4:	4b20      	ldr	r3, [pc, #128]	; (8015d68 <LCD_LOG_UpdateDisplay+0xfc>)
 8015ce6:	881b      	ldrh	r3, [r3, #0]
 8015ce8:	3375      	adds	r3, #117	; 0x75
 8015cea:	80bb      	strh	r3, [r7, #4]
 8015cec:	e002      	b.n	8015cf4 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 8015cee:	4b1e      	ldr	r3, [pc, #120]	; (8015d68 <LCD_LOG_UpdateDisplay+0xfc>)
 8015cf0:	881b      	ldrh	r3, [r3, #0]
 8015cf2:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 8015cf4:	88bb      	ldrh	r3, [r7, #4]
 8015cf6:	3b10      	subs	r3, #16
 8015cf8:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	71fb      	strb	r3, [r7, #7]
 8015cfe:	e02c      	b.n	8015d5a <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8015d00:	79fa      	ldrb	r2, [r7, #7]
 8015d02:	887b      	ldrh	r3, [r7, #2]
 8015d04:	4413      	add	r3, r2
 8015d06:	4a1b      	ldr	r2, [pc, #108]	; (8015d74 <LCD_LOG_UpdateDisplay+0x108>)
 8015d08:	fb82 1203 	smull	r1, r2, r2, r3
 8015d0c:	441a      	add	r2, r3
 8015d0e:	1191      	asrs	r1, r2, #6
 8015d10:	17da      	asrs	r2, r3, #31
 8015d12:	1a8a      	subs	r2, r1, r2
 8015d14:	2175      	movs	r1, #117	; 0x75
 8015d16:	fb01 f202 	mul.w	r2, r1, r2
 8015d1a:	1a9a      	subs	r2, r3, r2
 8015d1c:	4613      	mov	r3, r2
 8015d1e:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8015d20:	883a      	ldrh	r2, [r7, #0]
 8015d22:	4913      	ldr	r1, [pc, #76]	; (8015d70 <LCD_LOG_UpdateDisplay+0x104>)
 8015d24:	4613      	mov	r3, r2
 8015d26:	015b      	lsls	r3, r3, #5
 8015d28:	4413      	add	r3, r2
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	440b      	add	r3, r1
 8015d2e:	3380      	adds	r3, #128	; 0x80
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7ef fbca 	bl	80054cc <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8015d38:	79fb      	ldrb	r3, [r7, #7]
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	3304      	adds	r3, #4
 8015d3e:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 8015d40:	883a      	ldrh	r2, [r7, #0]
 8015d42:	4613      	mov	r3, r2
 8015d44:	015b      	lsls	r3, r3, #5
 8015d46:	4413      	add	r3, r2
 8015d48:	009b      	lsls	r3, r3, #2
 8015d4a:	4a09      	ldr	r2, [pc, #36]	; (8015d70 <LCD_LOG_UpdateDisplay+0x104>)
 8015d4c:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8015d4e:	4619      	mov	r1, r3
 8015d50:	f7ef fd4e 	bl	80057f0 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8015d54:	79fb      	ldrb	r3, [r7, #7]
 8015d56:	3301      	adds	r3, #1
 8015d58:	71fb      	strb	r3, [r7, #7]
 8015d5a:	79fb      	ldrb	r3, [r7, #7]
 8015d5c:	2b10      	cmp	r3, #16
 8015d5e:	d9cf      	bls.n	8015d00 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 8015d60:	bf00      	nop
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	2000c6b8 	.word	0x2000c6b8
 8015d6c:	2000c6c0 	.word	0x2000c6c0
 8015d70:	2000c6c4 	.word	0x2000c6c4
 8015d74:	8c08c08d 	.word	0x8c08c08d

08015d78 <__errno>:
 8015d78:	4b01      	ldr	r3, [pc, #4]	; (8015d80 <__errno+0x8>)
 8015d7a:	6818      	ldr	r0, [r3, #0]
 8015d7c:	4770      	bx	lr
 8015d7e:	bf00      	nop
 8015d80:	20000080 	.word	0x20000080

08015d84 <__libc_init_array>:
 8015d84:	b570      	push	{r4, r5, r6, lr}
 8015d86:	4e0d      	ldr	r6, [pc, #52]	; (8015dbc <__libc_init_array+0x38>)
 8015d88:	4c0d      	ldr	r4, [pc, #52]	; (8015dc0 <__libc_init_array+0x3c>)
 8015d8a:	1ba4      	subs	r4, r4, r6
 8015d8c:	10a4      	asrs	r4, r4, #2
 8015d8e:	2500      	movs	r5, #0
 8015d90:	42a5      	cmp	r5, r4
 8015d92:	d109      	bne.n	8015da8 <__libc_init_array+0x24>
 8015d94:	4e0b      	ldr	r6, [pc, #44]	; (8015dc4 <__libc_init_array+0x40>)
 8015d96:	4c0c      	ldr	r4, [pc, #48]	; (8015dc8 <__libc_init_array+0x44>)
 8015d98:	f001 f8e4 	bl	8016f64 <_init>
 8015d9c:	1ba4      	subs	r4, r4, r6
 8015d9e:	10a4      	asrs	r4, r4, #2
 8015da0:	2500      	movs	r5, #0
 8015da2:	42a5      	cmp	r5, r4
 8015da4:	d105      	bne.n	8015db2 <__libc_init_array+0x2e>
 8015da6:	bd70      	pop	{r4, r5, r6, pc}
 8015da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015dac:	4798      	blx	r3
 8015dae:	3501      	adds	r5, #1
 8015db0:	e7ee      	b.n	8015d90 <__libc_init_array+0xc>
 8015db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015db6:	4798      	blx	r3
 8015db8:	3501      	adds	r5, #1
 8015dba:	e7f2      	b.n	8015da2 <__libc_init_array+0x1e>
 8015dbc:	08019c70 	.word	0x08019c70
 8015dc0:	08019c70 	.word	0x08019c70
 8015dc4:	08019c70 	.word	0x08019c70
 8015dc8:	08019c74 	.word	0x08019c74

08015dcc <malloc>:
 8015dcc:	4b02      	ldr	r3, [pc, #8]	; (8015dd8 <malloc+0xc>)
 8015dce:	4601      	mov	r1, r0
 8015dd0:	6818      	ldr	r0, [r3, #0]
 8015dd2:	f000 b86d 	b.w	8015eb0 <_malloc_r>
 8015dd6:	bf00      	nop
 8015dd8:	20000080 	.word	0x20000080

08015ddc <free>:
 8015ddc:	4b02      	ldr	r3, [pc, #8]	; (8015de8 <free+0xc>)
 8015dde:	4601      	mov	r1, r0
 8015de0:	6818      	ldr	r0, [r3, #0]
 8015de2:	f000 b817 	b.w	8015e14 <_free_r>
 8015de6:	bf00      	nop
 8015de8:	20000080 	.word	0x20000080

08015dec <memcpy>:
 8015dec:	b510      	push	{r4, lr}
 8015dee:	1e43      	subs	r3, r0, #1
 8015df0:	440a      	add	r2, r1
 8015df2:	4291      	cmp	r1, r2
 8015df4:	d100      	bne.n	8015df8 <memcpy+0xc>
 8015df6:	bd10      	pop	{r4, pc}
 8015df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015dfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e00:	e7f7      	b.n	8015df2 <memcpy+0x6>

08015e02 <memset>:
 8015e02:	4402      	add	r2, r0
 8015e04:	4603      	mov	r3, r0
 8015e06:	4293      	cmp	r3, r2
 8015e08:	d100      	bne.n	8015e0c <memset+0xa>
 8015e0a:	4770      	bx	lr
 8015e0c:	f803 1b01 	strb.w	r1, [r3], #1
 8015e10:	e7f9      	b.n	8015e06 <memset+0x4>
	...

08015e14 <_free_r>:
 8015e14:	b538      	push	{r3, r4, r5, lr}
 8015e16:	4605      	mov	r5, r0
 8015e18:	2900      	cmp	r1, #0
 8015e1a:	d045      	beq.n	8015ea8 <_free_r+0x94>
 8015e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e20:	1f0c      	subs	r4, r1, #4
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	bfb8      	it	lt
 8015e26:	18e4      	addlt	r4, r4, r3
 8015e28:	f000 f98e 	bl	8016148 <__malloc_lock>
 8015e2c:	4a1f      	ldr	r2, [pc, #124]	; (8015eac <_free_r+0x98>)
 8015e2e:	6813      	ldr	r3, [r2, #0]
 8015e30:	4610      	mov	r0, r2
 8015e32:	b933      	cbnz	r3, 8015e42 <_free_r+0x2e>
 8015e34:	6063      	str	r3, [r4, #4]
 8015e36:	6014      	str	r4, [r2, #0]
 8015e38:	4628      	mov	r0, r5
 8015e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e3e:	f000 b984 	b.w	801614a <__malloc_unlock>
 8015e42:	42a3      	cmp	r3, r4
 8015e44:	d90c      	bls.n	8015e60 <_free_r+0x4c>
 8015e46:	6821      	ldr	r1, [r4, #0]
 8015e48:	1862      	adds	r2, r4, r1
 8015e4a:	4293      	cmp	r3, r2
 8015e4c:	bf04      	itt	eq
 8015e4e:	681a      	ldreq	r2, [r3, #0]
 8015e50:	685b      	ldreq	r3, [r3, #4]
 8015e52:	6063      	str	r3, [r4, #4]
 8015e54:	bf04      	itt	eq
 8015e56:	1852      	addeq	r2, r2, r1
 8015e58:	6022      	streq	r2, [r4, #0]
 8015e5a:	6004      	str	r4, [r0, #0]
 8015e5c:	e7ec      	b.n	8015e38 <_free_r+0x24>
 8015e5e:	4613      	mov	r3, r2
 8015e60:	685a      	ldr	r2, [r3, #4]
 8015e62:	b10a      	cbz	r2, 8015e68 <_free_r+0x54>
 8015e64:	42a2      	cmp	r2, r4
 8015e66:	d9fa      	bls.n	8015e5e <_free_r+0x4a>
 8015e68:	6819      	ldr	r1, [r3, #0]
 8015e6a:	1858      	adds	r0, r3, r1
 8015e6c:	42a0      	cmp	r0, r4
 8015e6e:	d10b      	bne.n	8015e88 <_free_r+0x74>
 8015e70:	6820      	ldr	r0, [r4, #0]
 8015e72:	4401      	add	r1, r0
 8015e74:	1858      	adds	r0, r3, r1
 8015e76:	4282      	cmp	r2, r0
 8015e78:	6019      	str	r1, [r3, #0]
 8015e7a:	d1dd      	bne.n	8015e38 <_free_r+0x24>
 8015e7c:	6810      	ldr	r0, [r2, #0]
 8015e7e:	6852      	ldr	r2, [r2, #4]
 8015e80:	605a      	str	r2, [r3, #4]
 8015e82:	4401      	add	r1, r0
 8015e84:	6019      	str	r1, [r3, #0]
 8015e86:	e7d7      	b.n	8015e38 <_free_r+0x24>
 8015e88:	d902      	bls.n	8015e90 <_free_r+0x7c>
 8015e8a:	230c      	movs	r3, #12
 8015e8c:	602b      	str	r3, [r5, #0]
 8015e8e:	e7d3      	b.n	8015e38 <_free_r+0x24>
 8015e90:	6820      	ldr	r0, [r4, #0]
 8015e92:	1821      	adds	r1, r4, r0
 8015e94:	428a      	cmp	r2, r1
 8015e96:	bf04      	itt	eq
 8015e98:	6811      	ldreq	r1, [r2, #0]
 8015e9a:	6852      	ldreq	r2, [r2, #4]
 8015e9c:	6062      	str	r2, [r4, #4]
 8015e9e:	bf04      	itt	eq
 8015ea0:	1809      	addeq	r1, r1, r0
 8015ea2:	6021      	streq	r1, [r4, #0]
 8015ea4:	605c      	str	r4, [r3, #4]
 8015ea6:	e7c7      	b.n	8015e38 <_free_r+0x24>
 8015ea8:	bd38      	pop	{r3, r4, r5, pc}
 8015eaa:	bf00      	nop
 8015eac:	20009e30 	.word	0x20009e30

08015eb0 <_malloc_r>:
 8015eb0:	b570      	push	{r4, r5, r6, lr}
 8015eb2:	1ccd      	adds	r5, r1, #3
 8015eb4:	f025 0503 	bic.w	r5, r5, #3
 8015eb8:	3508      	adds	r5, #8
 8015eba:	2d0c      	cmp	r5, #12
 8015ebc:	bf38      	it	cc
 8015ebe:	250c      	movcc	r5, #12
 8015ec0:	2d00      	cmp	r5, #0
 8015ec2:	4606      	mov	r6, r0
 8015ec4:	db01      	blt.n	8015eca <_malloc_r+0x1a>
 8015ec6:	42a9      	cmp	r1, r5
 8015ec8:	d903      	bls.n	8015ed2 <_malloc_r+0x22>
 8015eca:	230c      	movs	r3, #12
 8015ecc:	6033      	str	r3, [r6, #0]
 8015ece:	2000      	movs	r0, #0
 8015ed0:	bd70      	pop	{r4, r5, r6, pc}
 8015ed2:	f000 f939 	bl	8016148 <__malloc_lock>
 8015ed6:	4a21      	ldr	r2, [pc, #132]	; (8015f5c <_malloc_r+0xac>)
 8015ed8:	6814      	ldr	r4, [r2, #0]
 8015eda:	4621      	mov	r1, r4
 8015edc:	b991      	cbnz	r1, 8015f04 <_malloc_r+0x54>
 8015ede:	4c20      	ldr	r4, [pc, #128]	; (8015f60 <_malloc_r+0xb0>)
 8015ee0:	6823      	ldr	r3, [r4, #0]
 8015ee2:	b91b      	cbnz	r3, 8015eec <_malloc_r+0x3c>
 8015ee4:	4630      	mov	r0, r6
 8015ee6:	f000 f855 	bl	8015f94 <_sbrk_r>
 8015eea:	6020      	str	r0, [r4, #0]
 8015eec:	4629      	mov	r1, r5
 8015eee:	4630      	mov	r0, r6
 8015ef0:	f000 f850 	bl	8015f94 <_sbrk_r>
 8015ef4:	1c43      	adds	r3, r0, #1
 8015ef6:	d124      	bne.n	8015f42 <_malloc_r+0x92>
 8015ef8:	230c      	movs	r3, #12
 8015efa:	6033      	str	r3, [r6, #0]
 8015efc:	4630      	mov	r0, r6
 8015efe:	f000 f924 	bl	801614a <__malloc_unlock>
 8015f02:	e7e4      	b.n	8015ece <_malloc_r+0x1e>
 8015f04:	680b      	ldr	r3, [r1, #0]
 8015f06:	1b5b      	subs	r3, r3, r5
 8015f08:	d418      	bmi.n	8015f3c <_malloc_r+0x8c>
 8015f0a:	2b0b      	cmp	r3, #11
 8015f0c:	d90f      	bls.n	8015f2e <_malloc_r+0x7e>
 8015f0e:	600b      	str	r3, [r1, #0]
 8015f10:	50cd      	str	r5, [r1, r3]
 8015f12:	18cc      	adds	r4, r1, r3
 8015f14:	4630      	mov	r0, r6
 8015f16:	f000 f918 	bl	801614a <__malloc_unlock>
 8015f1a:	f104 000b 	add.w	r0, r4, #11
 8015f1e:	1d23      	adds	r3, r4, #4
 8015f20:	f020 0007 	bic.w	r0, r0, #7
 8015f24:	1ac3      	subs	r3, r0, r3
 8015f26:	d0d3      	beq.n	8015ed0 <_malloc_r+0x20>
 8015f28:	425a      	negs	r2, r3
 8015f2a:	50e2      	str	r2, [r4, r3]
 8015f2c:	e7d0      	b.n	8015ed0 <_malloc_r+0x20>
 8015f2e:	428c      	cmp	r4, r1
 8015f30:	684b      	ldr	r3, [r1, #4]
 8015f32:	bf16      	itet	ne
 8015f34:	6063      	strne	r3, [r4, #4]
 8015f36:	6013      	streq	r3, [r2, #0]
 8015f38:	460c      	movne	r4, r1
 8015f3a:	e7eb      	b.n	8015f14 <_malloc_r+0x64>
 8015f3c:	460c      	mov	r4, r1
 8015f3e:	6849      	ldr	r1, [r1, #4]
 8015f40:	e7cc      	b.n	8015edc <_malloc_r+0x2c>
 8015f42:	1cc4      	adds	r4, r0, #3
 8015f44:	f024 0403 	bic.w	r4, r4, #3
 8015f48:	42a0      	cmp	r0, r4
 8015f4a:	d005      	beq.n	8015f58 <_malloc_r+0xa8>
 8015f4c:	1a21      	subs	r1, r4, r0
 8015f4e:	4630      	mov	r0, r6
 8015f50:	f000 f820 	bl	8015f94 <_sbrk_r>
 8015f54:	3001      	adds	r0, #1
 8015f56:	d0cf      	beq.n	8015ef8 <_malloc_r+0x48>
 8015f58:	6025      	str	r5, [r4, #0]
 8015f5a:	e7db      	b.n	8015f14 <_malloc_r+0x64>
 8015f5c:	20009e30 	.word	0x20009e30
 8015f60:	20009e34 	.word	0x20009e34

08015f64 <iprintf>:
 8015f64:	b40f      	push	{r0, r1, r2, r3}
 8015f66:	4b0a      	ldr	r3, [pc, #40]	; (8015f90 <iprintf+0x2c>)
 8015f68:	b513      	push	{r0, r1, r4, lr}
 8015f6a:	681c      	ldr	r4, [r3, #0]
 8015f6c:	b124      	cbz	r4, 8015f78 <iprintf+0x14>
 8015f6e:	69a3      	ldr	r3, [r4, #24]
 8015f70:	b913      	cbnz	r3, 8015f78 <iprintf+0x14>
 8015f72:	4620      	mov	r0, r4
 8015f74:	f000 f85e 	bl	8016034 <__sinit>
 8015f78:	ab05      	add	r3, sp, #20
 8015f7a:	9a04      	ldr	r2, [sp, #16]
 8015f7c:	68a1      	ldr	r1, [r4, #8]
 8015f7e:	9301      	str	r3, [sp, #4]
 8015f80:	4620      	mov	r0, r4
 8015f82:	f000 f90d 	bl	80161a0 <_vfiprintf_r>
 8015f86:	b002      	add	sp, #8
 8015f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f8c:	b004      	add	sp, #16
 8015f8e:	4770      	bx	lr
 8015f90:	20000080 	.word	0x20000080

08015f94 <_sbrk_r>:
 8015f94:	b538      	push	{r3, r4, r5, lr}
 8015f96:	4c06      	ldr	r4, [pc, #24]	; (8015fb0 <_sbrk_r+0x1c>)
 8015f98:	2300      	movs	r3, #0
 8015f9a:	4605      	mov	r5, r0
 8015f9c:	4608      	mov	r0, r1
 8015f9e:	6023      	str	r3, [r4, #0]
 8015fa0:	f7ed f8ec 	bl	800317c <_sbrk>
 8015fa4:	1c43      	adds	r3, r0, #1
 8015fa6:	d102      	bne.n	8015fae <_sbrk_r+0x1a>
 8015fa8:	6823      	ldr	r3, [r4, #0]
 8015faa:	b103      	cbz	r3, 8015fae <_sbrk_r+0x1a>
 8015fac:	602b      	str	r3, [r5, #0]
 8015fae:	bd38      	pop	{r3, r4, r5, pc}
 8015fb0:	20010320 	.word	0x20010320

08015fb4 <std>:
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	b510      	push	{r4, lr}
 8015fb8:	4604      	mov	r4, r0
 8015fba:	e9c0 3300 	strd	r3, r3, [r0]
 8015fbe:	6083      	str	r3, [r0, #8]
 8015fc0:	8181      	strh	r1, [r0, #12]
 8015fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8015fc4:	81c2      	strh	r2, [r0, #14]
 8015fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015fca:	6183      	str	r3, [r0, #24]
 8015fcc:	4619      	mov	r1, r3
 8015fce:	2208      	movs	r2, #8
 8015fd0:	305c      	adds	r0, #92	; 0x5c
 8015fd2:	f7ff ff16 	bl	8015e02 <memset>
 8015fd6:	4b05      	ldr	r3, [pc, #20]	; (8015fec <std+0x38>)
 8015fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8015fda:	4b05      	ldr	r3, [pc, #20]	; (8015ff0 <std+0x3c>)
 8015fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8015fde:	4b05      	ldr	r3, [pc, #20]	; (8015ff4 <std+0x40>)
 8015fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015fe2:	4b05      	ldr	r3, [pc, #20]	; (8015ff8 <std+0x44>)
 8015fe4:	6224      	str	r4, [r4, #32]
 8015fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8015fe8:	bd10      	pop	{r4, pc}
 8015fea:	bf00      	nop
 8015fec:	080166dd 	.word	0x080166dd
 8015ff0:	080166ff 	.word	0x080166ff
 8015ff4:	08016737 	.word	0x08016737
 8015ff8:	0801675b 	.word	0x0801675b

08015ffc <_cleanup_r>:
 8015ffc:	4901      	ldr	r1, [pc, #4]	; (8016004 <_cleanup_r+0x8>)
 8015ffe:	f000 b885 	b.w	801610c <_fwalk_reent>
 8016002:	bf00      	nop
 8016004:	08016a35 	.word	0x08016a35

08016008 <__sfmoreglue>:
 8016008:	b570      	push	{r4, r5, r6, lr}
 801600a:	1e4a      	subs	r2, r1, #1
 801600c:	2568      	movs	r5, #104	; 0x68
 801600e:	4355      	muls	r5, r2
 8016010:	460e      	mov	r6, r1
 8016012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016016:	f7ff ff4b 	bl	8015eb0 <_malloc_r>
 801601a:	4604      	mov	r4, r0
 801601c:	b140      	cbz	r0, 8016030 <__sfmoreglue+0x28>
 801601e:	2100      	movs	r1, #0
 8016020:	e9c0 1600 	strd	r1, r6, [r0]
 8016024:	300c      	adds	r0, #12
 8016026:	60a0      	str	r0, [r4, #8]
 8016028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801602c:	f7ff fee9 	bl	8015e02 <memset>
 8016030:	4620      	mov	r0, r4
 8016032:	bd70      	pop	{r4, r5, r6, pc}

08016034 <__sinit>:
 8016034:	6983      	ldr	r3, [r0, #24]
 8016036:	b510      	push	{r4, lr}
 8016038:	4604      	mov	r4, r0
 801603a:	bb33      	cbnz	r3, 801608a <__sinit+0x56>
 801603c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016040:	6503      	str	r3, [r0, #80]	; 0x50
 8016042:	4b12      	ldr	r3, [pc, #72]	; (801608c <__sinit+0x58>)
 8016044:	4a12      	ldr	r2, [pc, #72]	; (8016090 <__sinit+0x5c>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	6282      	str	r2, [r0, #40]	; 0x28
 801604a:	4298      	cmp	r0, r3
 801604c:	bf04      	itt	eq
 801604e:	2301      	moveq	r3, #1
 8016050:	6183      	streq	r3, [r0, #24]
 8016052:	f000 f81f 	bl	8016094 <__sfp>
 8016056:	6060      	str	r0, [r4, #4]
 8016058:	4620      	mov	r0, r4
 801605a:	f000 f81b 	bl	8016094 <__sfp>
 801605e:	60a0      	str	r0, [r4, #8]
 8016060:	4620      	mov	r0, r4
 8016062:	f000 f817 	bl	8016094 <__sfp>
 8016066:	2200      	movs	r2, #0
 8016068:	60e0      	str	r0, [r4, #12]
 801606a:	2104      	movs	r1, #4
 801606c:	6860      	ldr	r0, [r4, #4]
 801606e:	f7ff ffa1 	bl	8015fb4 <std>
 8016072:	2201      	movs	r2, #1
 8016074:	2109      	movs	r1, #9
 8016076:	68a0      	ldr	r0, [r4, #8]
 8016078:	f7ff ff9c 	bl	8015fb4 <std>
 801607c:	2202      	movs	r2, #2
 801607e:	2112      	movs	r1, #18
 8016080:	68e0      	ldr	r0, [r4, #12]
 8016082:	f7ff ff97 	bl	8015fb4 <std>
 8016086:	2301      	movs	r3, #1
 8016088:	61a3      	str	r3, [r4, #24]
 801608a:	bd10      	pop	{r4, pc}
 801608c:	08019bc8 	.word	0x08019bc8
 8016090:	08015ffd 	.word	0x08015ffd

08016094 <__sfp>:
 8016094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016096:	4b1b      	ldr	r3, [pc, #108]	; (8016104 <__sfp+0x70>)
 8016098:	681e      	ldr	r6, [r3, #0]
 801609a:	69b3      	ldr	r3, [r6, #24]
 801609c:	4607      	mov	r7, r0
 801609e:	b913      	cbnz	r3, 80160a6 <__sfp+0x12>
 80160a0:	4630      	mov	r0, r6
 80160a2:	f7ff ffc7 	bl	8016034 <__sinit>
 80160a6:	3648      	adds	r6, #72	; 0x48
 80160a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80160ac:	3b01      	subs	r3, #1
 80160ae:	d503      	bpl.n	80160b8 <__sfp+0x24>
 80160b0:	6833      	ldr	r3, [r6, #0]
 80160b2:	b133      	cbz	r3, 80160c2 <__sfp+0x2e>
 80160b4:	6836      	ldr	r6, [r6, #0]
 80160b6:	e7f7      	b.n	80160a8 <__sfp+0x14>
 80160b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80160bc:	b16d      	cbz	r5, 80160da <__sfp+0x46>
 80160be:	3468      	adds	r4, #104	; 0x68
 80160c0:	e7f4      	b.n	80160ac <__sfp+0x18>
 80160c2:	2104      	movs	r1, #4
 80160c4:	4638      	mov	r0, r7
 80160c6:	f7ff ff9f 	bl	8016008 <__sfmoreglue>
 80160ca:	6030      	str	r0, [r6, #0]
 80160cc:	2800      	cmp	r0, #0
 80160ce:	d1f1      	bne.n	80160b4 <__sfp+0x20>
 80160d0:	230c      	movs	r3, #12
 80160d2:	603b      	str	r3, [r7, #0]
 80160d4:	4604      	mov	r4, r0
 80160d6:	4620      	mov	r0, r4
 80160d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160da:	4b0b      	ldr	r3, [pc, #44]	; (8016108 <__sfp+0x74>)
 80160dc:	6665      	str	r5, [r4, #100]	; 0x64
 80160de:	e9c4 5500 	strd	r5, r5, [r4]
 80160e2:	60a5      	str	r5, [r4, #8]
 80160e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80160e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80160ec:	2208      	movs	r2, #8
 80160ee:	4629      	mov	r1, r5
 80160f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80160f4:	f7ff fe85 	bl	8015e02 <memset>
 80160f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80160fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016100:	e7e9      	b.n	80160d6 <__sfp+0x42>
 8016102:	bf00      	nop
 8016104:	08019bc8 	.word	0x08019bc8
 8016108:	ffff0001 	.word	0xffff0001

0801610c <_fwalk_reent>:
 801610c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016110:	4680      	mov	r8, r0
 8016112:	4689      	mov	r9, r1
 8016114:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016118:	2600      	movs	r6, #0
 801611a:	b914      	cbnz	r4, 8016122 <_fwalk_reent+0x16>
 801611c:	4630      	mov	r0, r6
 801611e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016122:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016126:	3f01      	subs	r7, #1
 8016128:	d501      	bpl.n	801612e <_fwalk_reent+0x22>
 801612a:	6824      	ldr	r4, [r4, #0]
 801612c:	e7f5      	b.n	801611a <_fwalk_reent+0xe>
 801612e:	89ab      	ldrh	r3, [r5, #12]
 8016130:	2b01      	cmp	r3, #1
 8016132:	d907      	bls.n	8016144 <_fwalk_reent+0x38>
 8016134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016138:	3301      	adds	r3, #1
 801613a:	d003      	beq.n	8016144 <_fwalk_reent+0x38>
 801613c:	4629      	mov	r1, r5
 801613e:	4640      	mov	r0, r8
 8016140:	47c8      	blx	r9
 8016142:	4306      	orrs	r6, r0
 8016144:	3568      	adds	r5, #104	; 0x68
 8016146:	e7ee      	b.n	8016126 <_fwalk_reent+0x1a>

08016148 <__malloc_lock>:
 8016148:	4770      	bx	lr

0801614a <__malloc_unlock>:
 801614a:	4770      	bx	lr

0801614c <__sfputc_r>:
 801614c:	6893      	ldr	r3, [r2, #8]
 801614e:	3b01      	subs	r3, #1
 8016150:	2b00      	cmp	r3, #0
 8016152:	b410      	push	{r4}
 8016154:	6093      	str	r3, [r2, #8]
 8016156:	da08      	bge.n	801616a <__sfputc_r+0x1e>
 8016158:	6994      	ldr	r4, [r2, #24]
 801615a:	42a3      	cmp	r3, r4
 801615c:	db01      	blt.n	8016162 <__sfputc_r+0x16>
 801615e:	290a      	cmp	r1, #10
 8016160:	d103      	bne.n	801616a <__sfputc_r+0x1e>
 8016162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016166:	f000 bafd 	b.w	8016764 <__swbuf_r>
 801616a:	6813      	ldr	r3, [r2, #0]
 801616c:	1c58      	adds	r0, r3, #1
 801616e:	6010      	str	r0, [r2, #0]
 8016170:	7019      	strb	r1, [r3, #0]
 8016172:	4608      	mov	r0, r1
 8016174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016178:	4770      	bx	lr

0801617a <__sfputs_r>:
 801617a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801617c:	4606      	mov	r6, r0
 801617e:	460f      	mov	r7, r1
 8016180:	4614      	mov	r4, r2
 8016182:	18d5      	adds	r5, r2, r3
 8016184:	42ac      	cmp	r4, r5
 8016186:	d101      	bne.n	801618c <__sfputs_r+0x12>
 8016188:	2000      	movs	r0, #0
 801618a:	e007      	b.n	801619c <__sfputs_r+0x22>
 801618c:	463a      	mov	r2, r7
 801618e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016192:	4630      	mov	r0, r6
 8016194:	f7ff ffda 	bl	801614c <__sfputc_r>
 8016198:	1c43      	adds	r3, r0, #1
 801619a:	d1f3      	bne.n	8016184 <__sfputs_r+0xa>
 801619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080161a0 <_vfiprintf_r>:
 80161a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a4:	460c      	mov	r4, r1
 80161a6:	b09d      	sub	sp, #116	; 0x74
 80161a8:	4617      	mov	r7, r2
 80161aa:	461d      	mov	r5, r3
 80161ac:	4606      	mov	r6, r0
 80161ae:	b118      	cbz	r0, 80161b8 <_vfiprintf_r+0x18>
 80161b0:	6983      	ldr	r3, [r0, #24]
 80161b2:	b90b      	cbnz	r3, 80161b8 <_vfiprintf_r+0x18>
 80161b4:	f7ff ff3e 	bl	8016034 <__sinit>
 80161b8:	4b7c      	ldr	r3, [pc, #496]	; (80163ac <_vfiprintf_r+0x20c>)
 80161ba:	429c      	cmp	r4, r3
 80161bc:	d158      	bne.n	8016270 <_vfiprintf_r+0xd0>
 80161be:	6874      	ldr	r4, [r6, #4]
 80161c0:	89a3      	ldrh	r3, [r4, #12]
 80161c2:	0718      	lsls	r0, r3, #28
 80161c4:	d55e      	bpl.n	8016284 <_vfiprintf_r+0xe4>
 80161c6:	6923      	ldr	r3, [r4, #16]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d05b      	beq.n	8016284 <_vfiprintf_r+0xe4>
 80161cc:	2300      	movs	r3, #0
 80161ce:	9309      	str	r3, [sp, #36]	; 0x24
 80161d0:	2320      	movs	r3, #32
 80161d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80161d6:	2330      	movs	r3, #48	; 0x30
 80161d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80161dc:	9503      	str	r5, [sp, #12]
 80161de:	f04f 0b01 	mov.w	fp, #1
 80161e2:	46b8      	mov	r8, r7
 80161e4:	4645      	mov	r5, r8
 80161e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80161ea:	b10b      	cbz	r3, 80161f0 <_vfiprintf_r+0x50>
 80161ec:	2b25      	cmp	r3, #37	; 0x25
 80161ee:	d154      	bne.n	801629a <_vfiprintf_r+0xfa>
 80161f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80161f4:	d00b      	beq.n	801620e <_vfiprintf_r+0x6e>
 80161f6:	4653      	mov	r3, sl
 80161f8:	463a      	mov	r2, r7
 80161fa:	4621      	mov	r1, r4
 80161fc:	4630      	mov	r0, r6
 80161fe:	f7ff ffbc 	bl	801617a <__sfputs_r>
 8016202:	3001      	adds	r0, #1
 8016204:	f000 80c2 	beq.w	801638c <_vfiprintf_r+0x1ec>
 8016208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801620a:	4453      	add	r3, sl
 801620c:	9309      	str	r3, [sp, #36]	; 0x24
 801620e:	f898 3000 	ldrb.w	r3, [r8]
 8016212:	2b00      	cmp	r3, #0
 8016214:	f000 80ba 	beq.w	801638c <_vfiprintf_r+0x1ec>
 8016218:	2300      	movs	r3, #0
 801621a:	f04f 32ff 	mov.w	r2, #4294967295
 801621e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016222:	9304      	str	r3, [sp, #16]
 8016224:	9307      	str	r3, [sp, #28]
 8016226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801622a:	931a      	str	r3, [sp, #104]	; 0x68
 801622c:	46a8      	mov	r8, r5
 801622e:	2205      	movs	r2, #5
 8016230:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016234:	485e      	ldr	r0, [pc, #376]	; (80163b0 <_vfiprintf_r+0x210>)
 8016236:	f7e9 ffeb 	bl	8000210 <memchr>
 801623a:	9b04      	ldr	r3, [sp, #16]
 801623c:	bb78      	cbnz	r0, 801629e <_vfiprintf_r+0xfe>
 801623e:	06d9      	lsls	r1, r3, #27
 8016240:	bf44      	itt	mi
 8016242:	2220      	movmi	r2, #32
 8016244:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016248:	071a      	lsls	r2, r3, #28
 801624a:	bf44      	itt	mi
 801624c:	222b      	movmi	r2, #43	; 0x2b
 801624e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016252:	782a      	ldrb	r2, [r5, #0]
 8016254:	2a2a      	cmp	r2, #42	; 0x2a
 8016256:	d02a      	beq.n	80162ae <_vfiprintf_r+0x10e>
 8016258:	9a07      	ldr	r2, [sp, #28]
 801625a:	46a8      	mov	r8, r5
 801625c:	2000      	movs	r0, #0
 801625e:	250a      	movs	r5, #10
 8016260:	4641      	mov	r1, r8
 8016262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016266:	3b30      	subs	r3, #48	; 0x30
 8016268:	2b09      	cmp	r3, #9
 801626a:	d969      	bls.n	8016340 <_vfiprintf_r+0x1a0>
 801626c:	b360      	cbz	r0, 80162c8 <_vfiprintf_r+0x128>
 801626e:	e024      	b.n	80162ba <_vfiprintf_r+0x11a>
 8016270:	4b50      	ldr	r3, [pc, #320]	; (80163b4 <_vfiprintf_r+0x214>)
 8016272:	429c      	cmp	r4, r3
 8016274:	d101      	bne.n	801627a <_vfiprintf_r+0xda>
 8016276:	68b4      	ldr	r4, [r6, #8]
 8016278:	e7a2      	b.n	80161c0 <_vfiprintf_r+0x20>
 801627a:	4b4f      	ldr	r3, [pc, #316]	; (80163b8 <_vfiprintf_r+0x218>)
 801627c:	429c      	cmp	r4, r3
 801627e:	bf08      	it	eq
 8016280:	68f4      	ldreq	r4, [r6, #12]
 8016282:	e79d      	b.n	80161c0 <_vfiprintf_r+0x20>
 8016284:	4621      	mov	r1, r4
 8016286:	4630      	mov	r0, r6
 8016288:	f000 fad0 	bl	801682c <__swsetup_r>
 801628c:	2800      	cmp	r0, #0
 801628e:	d09d      	beq.n	80161cc <_vfiprintf_r+0x2c>
 8016290:	f04f 30ff 	mov.w	r0, #4294967295
 8016294:	b01d      	add	sp, #116	; 0x74
 8016296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801629a:	46a8      	mov	r8, r5
 801629c:	e7a2      	b.n	80161e4 <_vfiprintf_r+0x44>
 801629e:	4a44      	ldr	r2, [pc, #272]	; (80163b0 <_vfiprintf_r+0x210>)
 80162a0:	1a80      	subs	r0, r0, r2
 80162a2:	fa0b f000 	lsl.w	r0, fp, r0
 80162a6:	4318      	orrs	r0, r3
 80162a8:	9004      	str	r0, [sp, #16]
 80162aa:	4645      	mov	r5, r8
 80162ac:	e7be      	b.n	801622c <_vfiprintf_r+0x8c>
 80162ae:	9a03      	ldr	r2, [sp, #12]
 80162b0:	1d11      	adds	r1, r2, #4
 80162b2:	6812      	ldr	r2, [r2, #0]
 80162b4:	9103      	str	r1, [sp, #12]
 80162b6:	2a00      	cmp	r2, #0
 80162b8:	db01      	blt.n	80162be <_vfiprintf_r+0x11e>
 80162ba:	9207      	str	r2, [sp, #28]
 80162bc:	e004      	b.n	80162c8 <_vfiprintf_r+0x128>
 80162be:	4252      	negs	r2, r2
 80162c0:	f043 0302 	orr.w	r3, r3, #2
 80162c4:	9207      	str	r2, [sp, #28]
 80162c6:	9304      	str	r3, [sp, #16]
 80162c8:	f898 3000 	ldrb.w	r3, [r8]
 80162cc:	2b2e      	cmp	r3, #46	; 0x2e
 80162ce:	d10e      	bne.n	80162ee <_vfiprintf_r+0x14e>
 80162d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80162d4:	2b2a      	cmp	r3, #42	; 0x2a
 80162d6:	d138      	bne.n	801634a <_vfiprintf_r+0x1aa>
 80162d8:	9b03      	ldr	r3, [sp, #12]
 80162da:	1d1a      	adds	r2, r3, #4
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	9203      	str	r2, [sp, #12]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	bfb8      	it	lt
 80162e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80162e8:	f108 0802 	add.w	r8, r8, #2
 80162ec:	9305      	str	r3, [sp, #20]
 80162ee:	4d33      	ldr	r5, [pc, #204]	; (80163bc <_vfiprintf_r+0x21c>)
 80162f0:	f898 1000 	ldrb.w	r1, [r8]
 80162f4:	2203      	movs	r2, #3
 80162f6:	4628      	mov	r0, r5
 80162f8:	f7e9 ff8a 	bl	8000210 <memchr>
 80162fc:	b140      	cbz	r0, 8016310 <_vfiprintf_r+0x170>
 80162fe:	2340      	movs	r3, #64	; 0x40
 8016300:	1b40      	subs	r0, r0, r5
 8016302:	fa03 f000 	lsl.w	r0, r3, r0
 8016306:	9b04      	ldr	r3, [sp, #16]
 8016308:	4303      	orrs	r3, r0
 801630a:	f108 0801 	add.w	r8, r8, #1
 801630e:	9304      	str	r3, [sp, #16]
 8016310:	f898 1000 	ldrb.w	r1, [r8]
 8016314:	482a      	ldr	r0, [pc, #168]	; (80163c0 <_vfiprintf_r+0x220>)
 8016316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801631a:	2206      	movs	r2, #6
 801631c:	f108 0701 	add.w	r7, r8, #1
 8016320:	f7e9 ff76 	bl	8000210 <memchr>
 8016324:	2800      	cmp	r0, #0
 8016326:	d037      	beq.n	8016398 <_vfiprintf_r+0x1f8>
 8016328:	4b26      	ldr	r3, [pc, #152]	; (80163c4 <_vfiprintf_r+0x224>)
 801632a:	bb1b      	cbnz	r3, 8016374 <_vfiprintf_r+0x1d4>
 801632c:	9b03      	ldr	r3, [sp, #12]
 801632e:	3307      	adds	r3, #7
 8016330:	f023 0307 	bic.w	r3, r3, #7
 8016334:	3308      	adds	r3, #8
 8016336:	9303      	str	r3, [sp, #12]
 8016338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801633a:	444b      	add	r3, r9
 801633c:	9309      	str	r3, [sp, #36]	; 0x24
 801633e:	e750      	b.n	80161e2 <_vfiprintf_r+0x42>
 8016340:	fb05 3202 	mla	r2, r5, r2, r3
 8016344:	2001      	movs	r0, #1
 8016346:	4688      	mov	r8, r1
 8016348:	e78a      	b.n	8016260 <_vfiprintf_r+0xc0>
 801634a:	2300      	movs	r3, #0
 801634c:	f108 0801 	add.w	r8, r8, #1
 8016350:	9305      	str	r3, [sp, #20]
 8016352:	4619      	mov	r1, r3
 8016354:	250a      	movs	r5, #10
 8016356:	4640      	mov	r0, r8
 8016358:	f810 2b01 	ldrb.w	r2, [r0], #1
 801635c:	3a30      	subs	r2, #48	; 0x30
 801635e:	2a09      	cmp	r2, #9
 8016360:	d903      	bls.n	801636a <_vfiprintf_r+0x1ca>
 8016362:	2b00      	cmp	r3, #0
 8016364:	d0c3      	beq.n	80162ee <_vfiprintf_r+0x14e>
 8016366:	9105      	str	r1, [sp, #20]
 8016368:	e7c1      	b.n	80162ee <_vfiprintf_r+0x14e>
 801636a:	fb05 2101 	mla	r1, r5, r1, r2
 801636e:	2301      	movs	r3, #1
 8016370:	4680      	mov	r8, r0
 8016372:	e7f0      	b.n	8016356 <_vfiprintf_r+0x1b6>
 8016374:	ab03      	add	r3, sp, #12
 8016376:	9300      	str	r3, [sp, #0]
 8016378:	4622      	mov	r2, r4
 801637a:	4b13      	ldr	r3, [pc, #76]	; (80163c8 <_vfiprintf_r+0x228>)
 801637c:	a904      	add	r1, sp, #16
 801637e:	4630      	mov	r0, r6
 8016380:	f3af 8000 	nop.w
 8016384:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016388:	4681      	mov	r9, r0
 801638a:	d1d5      	bne.n	8016338 <_vfiprintf_r+0x198>
 801638c:	89a3      	ldrh	r3, [r4, #12]
 801638e:	065b      	lsls	r3, r3, #25
 8016390:	f53f af7e 	bmi.w	8016290 <_vfiprintf_r+0xf0>
 8016394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016396:	e77d      	b.n	8016294 <_vfiprintf_r+0xf4>
 8016398:	ab03      	add	r3, sp, #12
 801639a:	9300      	str	r3, [sp, #0]
 801639c:	4622      	mov	r2, r4
 801639e:	4b0a      	ldr	r3, [pc, #40]	; (80163c8 <_vfiprintf_r+0x228>)
 80163a0:	a904      	add	r1, sp, #16
 80163a2:	4630      	mov	r0, r6
 80163a4:	f000 f888 	bl	80164b8 <_printf_i>
 80163a8:	e7ec      	b.n	8016384 <_vfiprintf_r+0x1e4>
 80163aa:	bf00      	nop
 80163ac:	08019bec 	.word	0x08019bec
 80163b0:	08019c2c 	.word	0x08019c2c
 80163b4:	08019c0c 	.word	0x08019c0c
 80163b8:	08019bcc 	.word	0x08019bcc
 80163bc:	08019c32 	.word	0x08019c32
 80163c0:	08019c36 	.word	0x08019c36
 80163c4:	00000000 	.word	0x00000000
 80163c8:	0801617b 	.word	0x0801617b

080163cc <_printf_common>:
 80163cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163d0:	4691      	mov	r9, r2
 80163d2:	461f      	mov	r7, r3
 80163d4:	688a      	ldr	r2, [r1, #8]
 80163d6:	690b      	ldr	r3, [r1, #16]
 80163d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80163dc:	4293      	cmp	r3, r2
 80163de:	bfb8      	it	lt
 80163e0:	4613      	movlt	r3, r2
 80163e2:	f8c9 3000 	str.w	r3, [r9]
 80163e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80163ea:	4606      	mov	r6, r0
 80163ec:	460c      	mov	r4, r1
 80163ee:	b112      	cbz	r2, 80163f6 <_printf_common+0x2a>
 80163f0:	3301      	adds	r3, #1
 80163f2:	f8c9 3000 	str.w	r3, [r9]
 80163f6:	6823      	ldr	r3, [r4, #0]
 80163f8:	0699      	lsls	r1, r3, #26
 80163fa:	bf42      	ittt	mi
 80163fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016400:	3302      	addmi	r3, #2
 8016402:	f8c9 3000 	strmi.w	r3, [r9]
 8016406:	6825      	ldr	r5, [r4, #0]
 8016408:	f015 0506 	ands.w	r5, r5, #6
 801640c:	d107      	bne.n	801641e <_printf_common+0x52>
 801640e:	f104 0a19 	add.w	sl, r4, #25
 8016412:	68e3      	ldr	r3, [r4, #12]
 8016414:	f8d9 2000 	ldr.w	r2, [r9]
 8016418:	1a9b      	subs	r3, r3, r2
 801641a:	42ab      	cmp	r3, r5
 801641c:	dc28      	bgt.n	8016470 <_printf_common+0xa4>
 801641e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016422:	6822      	ldr	r2, [r4, #0]
 8016424:	3300      	adds	r3, #0
 8016426:	bf18      	it	ne
 8016428:	2301      	movne	r3, #1
 801642a:	0692      	lsls	r2, r2, #26
 801642c:	d42d      	bmi.n	801648a <_printf_common+0xbe>
 801642e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016432:	4639      	mov	r1, r7
 8016434:	4630      	mov	r0, r6
 8016436:	47c0      	blx	r8
 8016438:	3001      	adds	r0, #1
 801643a:	d020      	beq.n	801647e <_printf_common+0xb2>
 801643c:	6823      	ldr	r3, [r4, #0]
 801643e:	68e5      	ldr	r5, [r4, #12]
 8016440:	f8d9 2000 	ldr.w	r2, [r9]
 8016444:	f003 0306 	and.w	r3, r3, #6
 8016448:	2b04      	cmp	r3, #4
 801644a:	bf08      	it	eq
 801644c:	1aad      	subeq	r5, r5, r2
 801644e:	68a3      	ldr	r3, [r4, #8]
 8016450:	6922      	ldr	r2, [r4, #16]
 8016452:	bf0c      	ite	eq
 8016454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016458:	2500      	movne	r5, #0
 801645a:	4293      	cmp	r3, r2
 801645c:	bfc4      	itt	gt
 801645e:	1a9b      	subgt	r3, r3, r2
 8016460:	18ed      	addgt	r5, r5, r3
 8016462:	f04f 0900 	mov.w	r9, #0
 8016466:	341a      	adds	r4, #26
 8016468:	454d      	cmp	r5, r9
 801646a:	d11a      	bne.n	80164a2 <_printf_common+0xd6>
 801646c:	2000      	movs	r0, #0
 801646e:	e008      	b.n	8016482 <_printf_common+0xb6>
 8016470:	2301      	movs	r3, #1
 8016472:	4652      	mov	r2, sl
 8016474:	4639      	mov	r1, r7
 8016476:	4630      	mov	r0, r6
 8016478:	47c0      	blx	r8
 801647a:	3001      	adds	r0, #1
 801647c:	d103      	bne.n	8016486 <_printf_common+0xba>
 801647e:	f04f 30ff 	mov.w	r0, #4294967295
 8016482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016486:	3501      	adds	r5, #1
 8016488:	e7c3      	b.n	8016412 <_printf_common+0x46>
 801648a:	18e1      	adds	r1, r4, r3
 801648c:	1c5a      	adds	r2, r3, #1
 801648e:	2030      	movs	r0, #48	; 0x30
 8016490:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016494:	4422      	add	r2, r4
 8016496:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801649a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801649e:	3302      	adds	r3, #2
 80164a0:	e7c5      	b.n	801642e <_printf_common+0x62>
 80164a2:	2301      	movs	r3, #1
 80164a4:	4622      	mov	r2, r4
 80164a6:	4639      	mov	r1, r7
 80164a8:	4630      	mov	r0, r6
 80164aa:	47c0      	blx	r8
 80164ac:	3001      	adds	r0, #1
 80164ae:	d0e6      	beq.n	801647e <_printf_common+0xb2>
 80164b0:	f109 0901 	add.w	r9, r9, #1
 80164b4:	e7d8      	b.n	8016468 <_printf_common+0x9c>
	...

080164b8 <_printf_i>:
 80164b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80164c0:	460c      	mov	r4, r1
 80164c2:	7e09      	ldrb	r1, [r1, #24]
 80164c4:	b085      	sub	sp, #20
 80164c6:	296e      	cmp	r1, #110	; 0x6e
 80164c8:	4617      	mov	r7, r2
 80164ca:	4606      	mov	r6, r0
 80164cc:	4698      	mov	r8, r3
 80164ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80164d0:	f000 80b3 	beq.w	801663a <_printf_i+0x182>
 80164d4:	d822      	bhi.n	801651c <_printf_i+0x64>
 80164d6:	2963      	cmp	r1, #99	; 0x63
 80164d8:	d036      	beq.n	8016548 <_printf_i+0x90>
 80164da:	d80a      	bhi.n	80164f2 <_printf_i+0x3a>
 80164dc:	2900      	cmp	r1, #0
 80164de:	f000 80b9 	beq.w	8016654 <_printf_i+0x19c>
 80164e2:	2958      	cmp	r1, #88	; 0x58
 80164e4:	f000 8083 	beq.w	80165ee <_printf_i+0x136>
 80164e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80164ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80164f0:	e032      	b.n	8016558 <_printf_i+0xa0>
 80164f2:	2964      	cmp	r1, #100	; 0x64
 80164f4:	d001      	beq.n	80164fa <_printf_i+0x42>
 80164f6:	2969      	cmp	r1, #105	; 0x69
 80164f8:	d1f6      	bne.n	80164e8 <_printf_i+0x30>
 80164fa:	6820      	ldr	r0, [r4, #0]
 80164fc:	6813      	ldr	r3, [r2, #0]
 80164fe:	0605      	lsls	r5, r0, #24
 8016500:	f103 0104 	add.w	r1, r3, #4
 8016504:	d52a      	bpl.n	801655c <_printf_i+0xa4>
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	6011      	str	r1, [r2, #0]
 801650a:	2b00      	cmp	r3, #0
 801650c:	da03      	bge.n	8016516 <_printf_i+0x5e>
 801650e:	222d      	movs	r2, #45	; 0x2d
 8016510:	425b      	negs	r3, r3
 8016512:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016516:	486f      	ldr	r0, [pc, #444]	; (80166d4 <_printf_i+0x21c>)
 8016518:	220a      	movs	r2, #10
 801651a:	e039      	b.n	8016590 <_printf_i+0xd8>
 801651c:	2973      	cmp	r1, #115	; 0x73
 801651e:	f000 809d 	beq.w	801665c <_printf_i+0x1a4>
 8016522:	d808      	bhi.n	8016536 <_printf_i+0x7e>
 8016524:	296f      	cmp	r1, #111	; 0x6f
 8016526:	d020      	beq.n	801656a <_printf_i+0xb2>
 8016528:	2970      	cmp	r1, #112	; 0x70
 801652a:	d1dd      	bne.n	80164e8 <_printf_i+0x30>
 801652c:	6823      	ldr	r3, [r4, #0]
 801652e:	f043 0320 	orr.w	r3, r3, #32
 8016532:	6023      	str	r3, [r4, #0]
 8016534:	e003      	b.n	801653e <_printf_i+0x86>
 8016536:	2975      	cmp	r1, #117	; 0x75
 8016538:	d017      	beq.n	801656a <_printf_i+0xb2>
 801653a:	2978      	cmp	r1, #120	; 0x78
 801653c:	d1d4      	bne.n	80164e8 <_printf_i+0x30>
 801653e:	2378      	movs	r3, #120	; 0x78
 8016540:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016544:	4864      	ldr	r0, [pc, #400]	; (80166d8 <_printf_i+0x220>)
 8016546:	e055      	b.n	80165f4 <_printf_i+0x13c>
 8016548:	6813      	ldr	r3, [r2, #0]
 801654a:	1d19      	adds	r1, r3, #4
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	6011      	str	r1, [r2, #0]
 8016550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016558:	2301      	movs	r3, #1
 801655a:	e08c      	b.n	8016676 <_printf_i+0x1be>
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	6011      	str	r1, [r2, #0]
 8016560:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016564:	bf18      	it	ne
 8016566:	b21b      	sxthne	r3, r3
 8016568:	e7cf      	b.n	801650a <_printf_i+0x52>
 801656a:	6813      	ldr	r3, [r2, #0]
 801656c:	6825      	ldr	r5, [r4, #0]
 801656e:	1d18      	adds	r0, r3, #4
 8016570:	6010      	str	r0, [r2, #0]
 8016572:	0628      	lsls	r0, r5, #24
 8016574:	d501      	bpl.n	801657a <_printf_i+0xc2>
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	e002      	b.n	8016580 <_printf_i+0xc8>
 801657a:	0668      	lsls	r0, r5, #25
 801657c:	d5fb      	bpl.n	8016576 <_printf_i+0xbe>
 801657e:	881b      	ldrh	r3, [r3, #0]
 8016580:	4854      	ldr	r0, [pc, #336]	; (80166d4 <_printf_i+0x21c>)
 8016582:	296f      	cmp	r1, #111	; 0x6f
 8016584:	bf14      	ite	ne
 8016586:	220a      	movne	r2, #10
 8016588:	2208      	moveq	r2, #8
 801658a:	2100      	movs	r1, #0
 801658c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016590:	6865      	ldr	r5, [r4, #4]
 8016592:	60a5      	str	r5, [r4, #8]
 8016594:	2d00      	cmp	r5, #0
 8016596:	f2c0 8095 	blt.w	80166c4 <_printf_i+0x20c>
 801659a:	6821      	ldr	r1, [r4, #0]
 801659c:	f021 0104 	bic.w	r1, r1, #4
 80165a0:	6021      	str	r1, [r4, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d13d      	bne.n	8016622 <_printf_i+0x16a>
 80165a6:	2d00      	cmp	r5, #0
 80165a8:	f040 808e 	bne.w	80166c8 <_printf_i+0x210>
 80165ac:	4665      	mov	r5, ip
 80165ae:	2a08      	cmp	r2, #8
 80165b0:	d10b      	bne.n	80165ca <_printf_i+0x112>
 80165b2:	6823      	ldr	r3, [r4, #0]
 80165b4:	07db      	lsls	r3, r3, #31
 80165b6:	d508      	bpl.n	80165ca <_printf_i+0x112>
 80165b8:	6923      	ldr	r3, [r4, #16]
 80165ba:	6862      	ldr	r2, [r4, #4]
 80165bc:	429a      	cmp	r2, r3
 80165be:	bfde      	ittt	le
 80165c0:	2330      	movle	r3, #48	; 0x30
 80165c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80165c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80165ca:	ebac 0305 	sub.w	r3, ip, r5
 80165ce:	6123      	str	r3, [r4, #16]
 80165d0:	f8cd 8000 	str.w	r8, [sp]
 80165d4:	463b      	mov	r3, r7
 80165d6:	aa03      	add	r2, sp, #12
 80165d8:	4621      	mov	r1, r4
 80165da:	4630      	mov	r0, r6
 80165dc:	f7ff fef6 	bl	80163cc <_printf_common>
 80165e0:	3001      	adds	r0, #1
 80165e2:	d14d      	bne.n	8016680 <_printf_i+0x1c8>
 80165e4:	f04f 30ff 	mov.w	r0, #4294967295
 80165e8:	b005      	add	sp, #20
 80165ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165ee:	4839      	ldr	r0, [pc, #228]	; (80166d4 <_printf_i+0x21c>)
 80165f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80165f4:	6813      	ldr	r3, [r2, #0]
 80165f6:	6821      	ldr	r1, [r4, #0]
 80165f8:	1d1d      	adds	r5, r3, #4
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	6015      	str	r5, [r2, #0]
 80165fe:	060a      	lsls	r2, r1, #24
 8016600:	d50b      	bpl.n	801661a <_printf_i+0x162>
 8016602:	07ca      	lsls	r2, r1, #31
 8016604:	bf44      	itt	mi
 8016606:	f041 0120 	orrmi.w	r1, r1, #32
 801660a:	6021      	strmi	r1, [r4, #0]
 801660c:	b91b      	cbnz	r3, 8016616 <_printf_i+0x15e>
 801660e:	6822      	ldr	r2, [r4, #0]
 8016610:	f022 0220 	bic.w	r2, r2, #32
 8016614:	6022      	str	r2, [r4, #0]
 8016616:	2210      	movs	r2, #16
 8016618:	e7b7      	b.n	801658a <_printf_i+0xd2>
 801661a:	064d      	lsls	r5, r1, #25
 801661c:	bf48      	it	mi
 801661e:	b29b      	uxthmi	r3, r3
 8016620:	e7ef      	b.n	8016602 <_printf_i+0x14a>
 8016622:	4665      	mov	r5, ip
 8016624:	fbb3 f1f2 	udiv	r1, r3, r2
 8016628:	fb02 3311 	mls	r3, r2, r1, r3
 801662c:	5cc3      	ldrb	r3, [r0, r3]
 801662e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016632:	460b      	mov	r3, r1
 8016634:	2900      	cmp	r1, #0
 8016636:	d1f5      	bne.n	8016624 <_printf_i+0x16c>
 8016638:	e7b9      	b.n	80165ae <_printf_i+0xf6>
 801663a:	6813      	ldr	r3, [r2, #0]
 801663c:	6825      	ldr	r5, [r4, #0]
 801663e:	6961      	ldr	r1, [r4, #20]
 8016640:	1d18      	adds	r0, r3, #4
 8016642:	6010      	str	r0, [r2, #0]
 8016644:	0628      	lsls	r0, r5, #24
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	d501      	bpl.n	801664e <_printf_i+0x196>
 801664a:	6019      	str	r1, [r3, #0]
 801664c:	e002      	b.n	8016654 <_printf_i+0x19c>
 801664e:	066a      	lsls	r2, r5, #25
 8016650:	d5fb      	bpl.n	801664a <_printf_i+0x192>
 8016652:	8019      	strh	r1, [r3, #0]
 8016654:	2300      	movs	r3, #0
 8016656:	6123      	str	r3, [r4, #16]
 8016658:	4665      	mov	r5, ip
 801665a:	e7b9      	b.n	80165d0 <_printf_i+0x118>
 801665c:	6813      	ldr	r3, [r2, #0]
 801665e:	1d19      	adds	r1, r3, #4
 8016660:	6011      	str	r1, [r2, #0]
 8016662:	681d      	ldr	r5, [r3, #0]
 8016664:	6862      	ldr	r2, [r4, #4]
 8016666:	2100      	movs	r1, #0
 8016668:	4628      	mov	r0, r5
 801666a:	f7e9 fdd1 	bl	8000210 <memchr>
 801666e:	b108      	cbz	r0, 8016674 <_printf_i+0x1bc>
 8016670:	1b40      	subs	r0, r0, r5
 8016672:	6060      	str	r0, [r4, #4]
 8016674:	6863      	ldr	r3, [r4, #4]
 8016676:	6123      	str	r3, [r4, #16]
 8016678:	2300      	movs	r3, #0
 801667a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801667e:	e7a7      	b.n	80165d0 <_printf_i+0x118>
 8016680:	6923      	ldr	r3, [r4, #16]
 8016682:	462a      	mov	r2, r5
 8016684:	4639      	mov	r1, r7
 8016686:	4630      	mov	r0, r6
 8016688:	47c0      	blx	r8
 801668a:	3001      	adds	r0, #1
 801668c:	d0aa      	beq.n	80165e4 <_printf_i+0x12c>
 801668e:	6823      	ldr	r3, [r4, #0]
 8016690:	079b      	lsls	r3, r3, #30
 8016692:	d413      	bmi.n	80166bc <_printf_i+0x204>
 8016694:	68e0      	ldr	r0, [r4, #12]
 8016696:	9b03      	ldr	r3, [sp, #12]
 8016698:	4298      	cmp	r0, r3
 801669a:	bfb8      	it	lt
 801669c:	4618      	movlt	r0, r3
 801669e:	e7a3      	b.n	80165e8 <_printf_i+0x130>
 80166a0:	2301      	movs	r3, #1
 80166a2:	464a      	mov	r2, r9
 80166a4:	4639      	mov	r1, r7
 80166a6:	4630      	mov	r0, r6
 80166a8:	47c0      	blx	r8
 80166aa:	3001      	adds	r0, #1
 80166ac:	d09a      	beq.n	80165e4 <_printf_i+0x12c>
 80166ae:	3501      	adds	r5, #1
 80166b0:	68e3      	ldr	r3, [r4, #12]
 80166b2:	9a03      	ldr	r2, [sp, #12]
 80166b4:	1a9b      	subs	r3, r3, r2
 80166b6:	42ab      	cmp	r3, r5
 80166b8:	dcf2      	bgt.n	80166a0 <_printf_i+0x1e8>
 80166ba:	e7eb      	b.n	8016694 <_printf_i+0x1dc>
 80166bc:	2500      	movs	r5, #0
 80166be:	f104 0919 	add.w	r9, r4, #25
 80166c2:	e7f5      	b.n	80166b0 <_printf_i+0x1f8>
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d1ac      	bne.n	8016622 <_printf_i+0x16a>
 80166c8:	7803      	ldrb	r3, [r0, #0]
 80166ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80166ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166d2:	e76c      	b.n	80165ae <_printf_i+0xf6>
 80166d4:	08019c3d 	.word	0x08019c3d
 80166d8:	08019c4e 	.word	0x08019c4e

080166dc <__sread>:
 80166dc:	b510      	push	{r4, lr}
 80166de:	460c      	mov	r4, r1
 80166e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166e4:	f000 fa46 	bl	8016b74 <_read_r>
 80166e8:	2800      	cmp	r0, #0
 80166ea:	bfab      	itete	ge
 80166ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80166ee:	89a3      	ldrhlt	r3, [r4, #12]
 80166f0:	181b      	addge	r3, r3, r0
 80166f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80166f6:	bfac      	ite	ge
 80166f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80166fa:	81a3      	strhlt	r3, [r4, #12]
 80166fc:	bd10      	pop	{r4, pc}

080166fe <__swrite>:
 80166fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016702:	461f      	mov	r7, r3
 8016704:	898b      	ldrh	r3, [r1, #12]
 8016706:	05db      	lsls	r3, r3, #23
 8016708:	4605      	mov	r5, r0
 801670a:	460c      	mov	r4, r1
 801670c:	4616      	mov	r6, r2
 801670e:	d505      	bpl.n	801671c <__swrite+0x1e>
 8016710:	2302      	movs	r3, #2
 8016712:	2200      	movs	r2, #0
 8016714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016718:	f000 f9b6 	bl	8016a88 <_lseek_r>
 801671c:	89a3      	ldrh	r3, [r4, #12]
 801671e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016726:	81a3      	strh	r3, [r4, #12]
 8016728:	4632      	mov	r2, r6
 801672a:	463b      	mov	r3, r7
 801672c:	4628      	mov	r0, r5
 801672e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016732:	f000 b869 	b.w	8016808 <_write_r>

08016736 <__sseek>:
 8016736:	b510      	push	{r4, lr}
 8016738:	460c      	mov	r4, r1
 801673a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801673e:	f000 f9a3 	bl	8016a88 <_lseek_r>
 8016742:	1c43      	adds	r3, r0, #1
 8016744:	89a3      	ldrh	r3, [r4, #12]
 8016746:	bf15      	itete	ne
 8016748:	6560      	strne	r0, [r4, #84]	; 0x54
 801674a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801674e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016752:	81a3      	strheq	r3, [r4, #12]
 8016754:	bf18      	it	ne
 8016756:	81a3      	strhne	r3, [r4, #12]
 8016758:	bd10      	pop	{r4, pc}

0801675a <__sclose>:
 801675a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801675e:	f000 b8d3 	b.w	8016908 <_close_r>
	...

08016764 <__swbuf_r>:
 8016764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016766:	460e      	mov	r6, r1
 8016768:	4614      	mov	r4, r2
 801676a:	4605      	mov	r5, r0
 801676c:	b118      	cbz	r0, 8016776 <__swbuf_r+0x12>
 801676e:	6983      	ldr	r3, [r0, #24]
 8016770:	b90b      	cbnz	r3, 8016776 <__swbuf_r+0x12>
 8016772:	f7ff fc5f 	bl	8016034 <__sinit>
 8016776:	4b21      	ldr	r3, [pc, #132]	; (80167fc <__swbuf_r+0x98>)
 8016778:	429c      	cmp	r4, r3
 801677a:	d12a      	bne.n	80167d2 <__swbuf_r+0x6e>
 801677c:	686c      	ldr	r4, [r5, #4]
 801677e:	69a3      	ldr	r3, [r4, #24]
 8016780:	60a3      	str	r3, [r4, #8]
 8016782:	89a3      	ldrh	r3, [r4, #12]
 8016784:	071a      	lsls	r2, r3, #28
 8016786:	d52e      	bpl.n	80167e6 <__swbuf_r+0x82>
 8016788:	6923      	ldr	r3, [r4, #16]
 801678a:	b363      	cbz	r3, 80167e6 <__swbuf_r+0x82>
 801678c:	6923      	ldr	r3, [r4, #16]
 801678e:	6820      	ldr	r0, [r4, #0]
 8016790:	1ac0      	subs	r0, r0, r3
 8016792:	6963      	ldr	r3, [r4, #20]
 8016794:	b2f6      	uxtb	r6, r6
 8016796:	4283      	cmp	r3, r0
 8016798:	4637      	mov	r7, r6
 801679a:	dc04      	bgt.n	80167a6 <__swbuf_r+0x42>
 801679c:	4621      	mov	r1, r4
 801679e:	4628      	mov	r0, r5
 80167a0:	f000 f948 	bl	8016a34 <_fflush_r>
 80167a4:	bb28      	cbnz	r0, 80167f2 <__swbuf_r+0x8e>
 80167a6:	68a3      	ldr	r3, [r4, #8]
 80167a8:	3b01      	subs	r3, #1
 80167aa:	60a3      	str	r3, [r4, #8]
 80167ac:	6823      	ldr	r3, [r4, #0]
 80167ae:	1c5a      	adds	r2, r3, #1
 80167b0:	6022      	str	r2, [r4, #0]
 80167b2:	701e      	strb	r6, [r3, #0]
 80167b4:	6963      	ldr	r3, [r4, #20]
 80167b6:	3001      	adds	r0, #1
 80167b8:	4283      	cmp	r3, r0
 80167ba:	d004      	beq.n	80167c6 <__swbuf_r+0x62>
 80167bc:	89a3      	ldrh	r3, [r4, #12]
 80167be:	07db      	lsls	r3, r3, #31
 80167c0:	d519      	bpl.n	80167f6 <__swbuf_r+0x92>
 80167c2:	2e0a      	cmp	r6, #10
 80167c4:	d117      	bne.n	80167f6 <__swbuf_r+0x92>
 80167c6:	4621      	mov	r1, r4
 80167c8:	4628      	mov	r0, r5
 80167ca:	f000 f933 	bl	8016a34 <_fflush_r>
 80167ce:	b190      	cbz	r0, 80167f6 <__swbuf_r+0x92>
 80167d0:	e00f      	b.n	80167f2 <__swbuf_r+0x8e>
 80167d2:	4b0b      	ldr	r3, [pc, #44]	; (8016800 <__swbuf_r+0x9c>)
 80167d4:	429c      	cmp	r4, r3
 80167d6:	d101      	bne.n	80167dc <__swbuf_r+0x78>
 80167d8:	68ac      	ldr	r4, [r5, #8]
 80167da:	e7d0      	b.n	801677e <__swbuf_r+0x1a>
 80167dc:	4b09      	ldr	r3, [pc, #36]	; (8016804 <__swbuf_r+0xa0>)
 80167de:	429c      	cmp	r4, r3
 80167e0:	bf08      	it	eq
 80167e2:	68ec      	ldreq	r4, [r5, #12]
 80167e4:	e7cb      	b.n	801677e <__swbuf_r+0x1a>
 80167e6:	4621      	mov	r1, r4
 80167e8:	4628      	mov	r0, r5
 80167ea:	f000 f81f 	bl	801682c <__swsetup_r>
 80167ee:	2800      	cmp	r0, #0
 80167f0:	d0cc      	beq.n	801678c <__swbuf_r+0x28>
 80167f2:	f04f 37ff 	mov.w	r7, #4294967295
 80167f6:	4638      	mov	r0, r7
 80167f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167fa:	bf00      	nop
 80167fc:	08019bec 	.word	0x08019bec
 8016800:	08019c0c 	.word	0x08019c0c
 8016804:	08019bcc 	.word	0x08019bcc

08016808 <_write_r>:
 8016808:	b538      	push	{r3, r4, r5, lr}
 801680a:	4c07      	ldr	r4, [pc, #28]	; (8016828 <_write_r+0x20>)
 801680c:	4605      	mov	r5, r0
 801680e:	4608      	mov	r0, r1
 8016810:	4611      	mov	r1, r2
 8016812:	2200      	movs	r2, #0
 8016814:	6022      	str	r2, [r4, #0]
 8016816:	461a      	mov	r2, r3
 8016818:	f7ec fc5f 	bl	80030da <_write>
 801681c:	1c43      	adds	r3, r0, #1
 801681e:	d102      	bne.n	8016826 <_write_r+0x1e>
 8016820:	6823      	ldr	r3, [r4, #0]
 8016822:	b103      	cbz	r3, 8016826 <_write_r+0x1e>
 8016824:	602b      	str	r3, [r5, #0]
 8016826:	bd38      	pop	{r3, r4, r5, pc}
 8016828:	20010320 	.word	0x20010320

0801682c <__swsetup_r>:
 801682c:	4b32      	ldr	r3, [pc, #200]	; (80168f8 <__swsetup_r+0xcc>)
 801682e:	b570      	push	{r4, r5, r6, lr}
 8016830:	681d      	ldr	r5, [r3, #0]
 8016832:	4606      	mov	r6, r0
 8016834:	460c      	mov	r4, r1
 8016836:	b125      	cbz	r5, 8016842 <__swsetup_r+0x16>
 8016838:	69ab      	ldr	r3, [r5, #24]
 801683a:	b913      	cbnz	r3, 8016842 <__swsetup_r+0x16>
 801683c:	4628      	mov	r0, r5
 801683e:	f7ff fbf9 	bl	8016034 <__sinit>
 8016842:	4b2e      	ldr	r3, [pc, #184]	; (80168fc <__swsetup_r+0xd0>)
 8016844:	429c      	cmp	r4, r3
 8016846:	d10f      	bne.n	8016868 <__swsetup_r+0x3c>
 8016848:	686c      	ldr	r4, [r5, #4]
 801684a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801684e:	b29a      	uxth	r2, r3
 8016850:	0715      	lsls	r5, r2, #28
 8016852:	d42c      	bmi.n	80168ae <__swsetup_r+0x82>
 8016854:	06d0      	lsls	r0, r2, #27
 8016856:	d411      	bmi.n	801687c <__swsetup_r+0x50>
 8016858:	2209      	movs	r2, #9
 801685a:	6032      	str	r2, [r6, #0]
 801685c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016860:	81a3      	strh	r3, [r4, #12]
 8016862:	f04f 30ff 	mov.w	r0, #4294967295
 8016866:	e03e      	b.n	80168e6 <__swsetup_r+0xba>
 8016868:	4b25      	ldr	r3, [pc, #148]	; (8016900 <__swsetup_r+0xd4>)
 801686a:	429c      	cmp	r4, r3
 801686c:	d101      	bne.n	8016872 <__swsetup_r+0x46>
 801686e:	68ac      	ldr	r4, [r5, #8]
 8016870:	e7eb      	b.n	801684a <__swsetup_r+0x1e>
 8016872:	4b24      	ldr	r3, [pc, #144]	; (8016904 <__swsetup_r+0xd8>)
 8016874:	429c      	cmp	r4, r3
 8016876:	bf08      	it	eq
 8016878:	68ec      	ldreq	r4, [r5, #12]
 801687a:	e7e6      	b.n	801684a <__swsetup_r+0x1e>
 801687c:	0751      	lsls	r1, r2, #29
 801687e:	d512      	bpl.n	80168a6 <__swsetup_r+0x7a>
 8016880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016882:	b141      	cbz	r1, 8016896 <__swsetup_r+0x6a>
 8016884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016888:	4299      	cmp	r1, r3
 801688a:	d002      	beq.n	8016892 <__swsetup_r+0x66>
 801688c:	4630      	mov	r0, r6
 801688e:	f7ff fac1 	bl	8015e14 <_free_r>
 8016892:	2300      	movs	r3, #0
 8016894:	6363      	str	r3, [r4, #52]	; 0x34
 8016896:	89a3      	ldrh	r3, [r4, #12]
 8016898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801689c:	81a3      	strh	r3, [r4, #12]
 801689e:	2300      	movs	r3, #0
 80168a0:	6063      	str	r3, [r4, #4]
 80168a2:	6923      	ldr	r3, [r4, #16]
 80168a4:	6023      	str	r3, [r4, #0]
 80168a6:	89a3      	ldrh	r3, [r4, #12]
 80168a8:	f043 0308 	orr.w	r3, r3, #8
 80168ac:	81a3      	strh	r3, [r4, #12]
 80168ae:	6923      	ldr	r3, [r4, #16]
 80168b0:	b94b      	cbnz	r3, 80168c6 <__swsetup_r+0x9a>
 80168b2:	89a3      	ldrh	r3, [r4, #12]
 80168b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80168b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168bc:	d003      	beq.n	80168c6 <__swsetup_r+0x9a>
 80168be:	4621      	mov	r1, r4
 80168c0:	4630      	mov	r0, r6
 80168c2:	f000 f917 	bl	8016af4 <__smakebuf_r>
 80168c6:	89a2      	ldrh	r2, [r4, #12]
 80168c8:	f012 0301 	ands.w	r3, r2, #1
 80168cc:	d00c      	beq.n	80168e8 <__swsetup_r+0xbc>
 80168ce:	2300      	movs	r3, #0
 80168d0:	60a3      	str	r3, [r4, #8]
 80168d2:	6963      	ldr	r3, [r4, #20]
 80168d4:	425b      	negs	r3, r3
 80168d6:	61a3      	str	r3, [r4, #24]
 80168d8:	6923      	ldr	r3, [r4, #16]
 80168da:	b953      	cbnz	r3, 80168f2 <__swsetup_r+0xc6>
 80168dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80168e4:	d1ba      	bne.n	801685c <__swsetup_r+0x30>
 80168e6:	bd70      	pop	{r4, r5, r6, pc}
 80168e8:	0792      	lsls	r2, r2, #30
 80168ea:	bf58      	it	pl
 80168ec:	6963      	ldrpl	r3, [r4, #20]
 80168ee:	60a3      	str	r3, [r4, #8]
 80168f0:	e7f2      	b.n	80168d8 <__swsetup_r+0xac>
 80168f2:	2000      	movs	r0, #0
 80168f4:	e7f7      	b.n	80168e6 <__swsetup_r+0xba>
 80168f6:	bf00      	nop
 80168f8:	20000080 	.word	0x20000080
 80168fc:	08019bec 	.word	0x08019bec
 8016900:	08019c0c 	.word	0x08019c0c
 8016904:	08019bcc 	.word	0x08019bcc

08016908 <_close_r>:
 8016908:	b538      	push	{r3, r4, r5, lr}
 801690a:	4c06      	ldr	r4, [pc, #24]	; (8016924 <_close_r+0x1c>)
 801690c:	2300      	movs	r3, #0
 801690e:	4605      	mov	r5, r0
 8016910:	4608      	mov	r0, r1
 8016912:	6023      	str	r3, [r4, #0]
 8016914:	f7ec fbfd 	bl	8003112 <_close>
 8016918:	1c43      	adds	r3, r0, #1
 801691a:	d102      	bne.n	8016922 <_close_r+0x1a>
 801691c:	6823      	ldr	r3, [r4, #0]
 801691e:	b103      	cbz	r3, 8016922 <_close_r+0x1a>
 8016920:	602b      	str	r3, [r5, #0]
 8016922:	bd38      	pop	{r3, r4, r5, pc}
 8016924:	20010320 	.word	0x20010320

08016928 <__sflush_r>:
 8016928:	898a      	ldrh	r2, [r1, #12]
 801692a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801692e:	4605      	mov	r5, r0
 8016930:	0710      	lsls	r0, r2, #28
 8016932:	460c      	mov	r4, r1
 8016934:	d458      	bmi.n	80169e8 <__sflush_r+0xc0>
 8016936:	684b      	ldr	r3, [r1, #4]
 8016938:	2b00      	cmp	r3, #0
 801693a:	dc05      	bgt.n	8016948 <__sflush_r+0x20>
 801693c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801693e:	2b00      	cmp	r3, #0
 8016940:	dc02      	bgt.n	8016948 <__sflush_r+0x20>
 8016942:	2000      	movs	r0, #0
 8016944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801694a:	2e00      	cmp	r6, #0
 801694c:	d0f9      	beq.n	8016942 <__sflush_r+0x1a>
 801694e:	2300      	movs	r3, #0
 8016950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016954:	682f      	ldr	r7, [r5, #0]
 8016956:	6a21      	ldr	r1, [r4, #32]
 8016958:	602b      	str	r3, [r5, #0]
 801695a:	d032      	beq.n	80169c2 <__sflush_r+0x9a>
 801695c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801695e:	89a3      	ldrh	r3, [r4, #12]
 8016960:	075a      	lsls	r2, r3, #29
 8016962:	d505      	bpl.n	8016970 <__sflush_r+0x48>
 8016964:	6863      	ldr	r3, [r4, #4]
 8016966:	1ac0      	subs	r0, r0, r3
 8016968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801696a:	b10b      	cbz	r3, 8016970 <__sflush_r+0x48>
 801696c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801696e:	1ac0      	subs	r0, r0, r3
 8016970:	2300      	movs	r3, #0
 8016972:	4602      	mov	r2, r0
 8016974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016976:	6a21      	ldr	r1, [r4, #32]
 8016978:	4628      	mov	r0, r5
 801697a:	47b0      	blx	r6
 801697c:	1c43      	adds	r3, r0, #1
 801697e:	89a3      	ldrh	r3, [r4, #12]
 8016980:	d106      	bne.n	8016990 <__sflush_r+0x68>
 8016982:	6829      	ldr	r1, [r5, #0]
 8016984:	291d      	cmp	r1, #29
 8016986:	d848      	bhi.n	8016a1a <__sflush_r+0xf2>
 8016988:	4a29      	ldr	r2, [pc, #164]	; (8016a30 <__sflush_r+0x108>)
 801698a:	40ca      	lsrs	r2, r1
 801698c:	07d6      	lsls	r6, r2, #31
 801698e:	d544      	bpl.n	8016a1a <__sflush_r+0xf2>
 8016990:	2200      	movs	r2, #0
 8016992:	6062      	str	r2, [r4, #4]
 8016994:	04d9      	lsls	r1, r3, #19
 8016996:	6922      	ldr	r2, [r4, #16]
 8016998:	6022      	str	r2, [r4, #0]
 801699a:	d504      	bpl.n	80169a6 <__sflush_r+0x7e>
 801699c:	1c42      	adds	r2, r0, #1
 801699e:	d101      	bne.n	80169a4 <__sflush_r+0x7c>
 80169a0:	682b      	ldr	r3, [r5, #0]
 80169a2:	b903      	cbnz	r3, 80169a6 <__sflush_r+0x7e>
 80169a4:	6560      	str	r0, [r4, #84]	; 0x54
 80169a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80169a8:	602f      	str	r7, [r5, #0]
 80169aa:	2900      	cmp	r1, #0
 80169ac:	d0c9      	beq.n	8016942 <__sflush_r+0x1a>
 80169ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169b2:	4299      	cmp	r1, r3
 80169b4:	d002      	beq.n	80169bc <__sflush_r+0x94>
 80169b6:	4628      	mov	r0, r5
 80169b8:	f7ff fa2c 	bl	8015e14 <_free_r>
 80169bc:	2000      	movs	r0, #0
 80169be:	6360      	str	r0, [r4, #52]	; 0x34
 80169c0:	e7c0      	b.n	8016944 <__sflush_r+0x1c>
 80169c2:	2301      	movs	r3, #1
 80169c4:	4628      	mov	r0, r5
 80169c6:	47b0      	blx	r6
 80169c8:	1c41      	adds	r1, r0, #1
 80169ca:	d1c8      	bne.n	801695e <__sflush_r+0x36>
 80169cc:	682b      	ldr	r3, [r5, #0]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d0c5      	beq.n	801695e <__sflush_r+0x36>
 80169d2:	2b1d      	cmp	r3, #29
 80169d4:	d001      	beq.n	80169da <__sflush_r+0xb2>
 80169d6:	2b16      	cmp	r3, #22
 80169d8:	d101      	bne.n	80169de <__sflush_r+0xb6>
 80169da:	602f      	str	r7, [r5, #0]
 80169dc:	e7b1      	b.n	8016942 <__sflush_r+0x1a>
 80169de:	89a3      	ldrh	r3, [r4, #12]
 80169e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169e4:	81a3      	strh	r3, [r4, #12]
 80169e6:	e7ad      	b.n	8016944 <__sflush_r+0x1c>
 80169e8:	690f      	ldr	r7, [r1, #16]
 80169ea:	2f00      	cmp	r7, #0
 80169ec:	d0a9      	beq.n	8016942 <__sflush_r+0x1a>
 80169ee:	0793      	lsls	r3, r2, #30
 80169f0:	680e      	ldr	r6, [r1, #0]
 80169f2:	bf08      	it	eq
 80169f4:	694b      	ldreq	r3, [r1, #20]
 80169f6:	600f      	str	r7, [r1, #0]
 80169f8:	bf18      	it	ne
 80169fa:	2300      	movne	r3, #0
 80169fc:	eba6 0807 	sub.w	r8, r6, r7
 8016a00:	608b      	str	r3, [r1, #8]
 8016a02:	f1b8 0f00 	cmp.w	r8, #0
 8016a06:	dd9c      	ble.n	8016942 <__sflush_r+0x1a>
 8016a08:	4643      	mov	r3, r8
 8016a0a:	463a      	mov	r2, r7
 8016a0c:	6a21      	ldr	r1, [r4, #32]
 8016a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016a10:	4628      	mov	r0, r5
 8016a12:	47b0      	blx	r6
 8016a14:	2800      	cmp	r0, #0
 8016a16:	dc06      	bgt.n	8016a26 <__sflush_r+0xfe>
 8016a18:	89a3      	ldrh	r3, [r4, #12]
 8016a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a1e:	81a3      	strh	r3, [r4, #12]
 8016a20:	f04f 30ff 	mov.w	r0, #4294967295
 8016a24:	e78e      	b.n	8016944 <__sflush_r+0x1c>
 8016a26:	4407      	add	r7, r0
 8016a28:	eba8 0800 	sub.w	r8, r8, r0
 8016a2c:	e7e9      	b.n	8016a02 <__sflush_r+0xda>
 8016a2e:	bf00      	nop
 8016a30:	20400001 	.word	0x20400001

08016a34 <_fflush_r>:
 8016a34:	b538      	push	{r3, r4, r5, lr}
 8016a36:	690b      	ldr	r3, [r1, #16]
 8016a38:	4605      	mov	r5, r0
 8016a3a:	460c      	mov	r4, r1
 8016a3c:	b1db      	cbz	r3, 8016a76 <_fflush_r+0x42>
 8016a3e:	b118      	cbz	r0, 8016a48 <_fflush_r+0x14>
 8016a40:	6983      	ldr	r3, [r0, #24]
 8016a42:	b90b      	cbnz	r3, 8016a48 <_fflush_r+0x14>
 8016a44:	f7ff faf6 	bl	8016034 <__sinit>
 8016a48:	4b0c      	ldr	r3, [pc, #48]	; (8016a7c <_fflush_r+0x48>)
 8016a4a:	429c      	cmp	r4, r3
 8016a4c:	d109      	bne.n	8016a62 <_fflush_r+0x2e>
 8016a4e:	686c      	ldr	r4, [r5, #4]
 8016a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a54:	b17b      	cbz	r3, 8016a76 <_fflush_r+0x42>
 8016a56:	4621      	mov	r1, r4
 8016a58:	4628      	mov	r0, r5
 8016a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a5e:	f7ff bf63 	b.w	8016928 <__sflush_r>
 8016a62:	4b07      	ldr	r3, [pc, #28]	; (8016a80 <_fflush_r+0x4c>)
 8016a64:	429c      	cmp	r4, r3
 8016a66:	d101      	bne.n	8016a6c <_fflush_r+0x38>
 8016a68:	68ac      	ldr	r4, [r5, #8]
 8016a6a:	e7f1      	b.n	8016a50 <_fflush_r+0x1c>
 8016a6c:	4b05      	ldr	r3, [pc, #20]	; (8016a84 <_fflush_r+0x50>)
 8016a6e:	429c      	cmp	r4, r3
 8016a70:	bf08      	it	eq
 8016a72:	68ec      	ldreq	r4, [r5, #12]
 8016a74:	e7ec      	b.n	8016a50 <_fflush_r+0x1c>
 8016a76:	2000      	movs	r0, #0
 8016a78:	bd38      	pop	{r3, r4, r5, pc}
 8016a7a:	bf00      	nop
 8016a7c:	08019bec 	.word	0x08019bec
 8016a80:	08019c0c 	.word	0x08019c0c
 8016a84:	08019bcc 	.word	0x08019bcc

08016a88 <_lseek_r>:
 8016a88:	b538      	push	{r3, r4, r5, lr}
 8016a8a:	4c07      	ldr	r4, [pc, #28]	; (8016aa8 <_lseek_r+0x20>)
 8016a8c:	4605      	mov	r5, r0
 8016a8e:	4608      	mov	r0, r1
 8016a90:	4611      	mov	r1, r2
 8016a92:	2200      	movs	r2, #0
 8016a94:	6022      	str	r2, [r4, #0]
 8016a96:	461a      	mov	r2, r3
 8016a98:	f7ec fb62 	bl	8003160 <_lseek>
 8016a9c:	1c43      	adds	r3, r0, #1
 8016a9e:	d102      	bne.n	8016aa6 <_lseek_r+0x1e>
 8016aa0:	6823      	ldr	r3, [r4, #0]
 8016aa2:	b103      	cbz	r3, 8016aa6 <_lseek_r+0x1e>
 8016aa4:	602b      	str	r3, [r5, #0]
 8016aa6:	bd38      	pop	{r3, r4, r5, pc}
 8016aa8:	20010320 	.word	0x20010320

08016aac <__swhatbuf_r>:
 8016aac:	b570      	push	{r4, r5, r6, lr}
 8016aae:	460e      	mov	r6, r1
 8016ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ab4:	2900      	cmp	r1, #0
 8016ab6:	b096      	sub	sp, #88	; 0x58
 8016ab8:	4614      	mov	r4, r2
 8016aba:	461d      	mov	r5, r3
 8016abc:	da07      	bge.n	8016ace <__swhatbuf_r+0x22>
 8016abe:	2300      	movs	r3, #0
 8016ac0:	602b      	str	r3, [r5, #0]
 8016ac2:	89b3      	ldrh	r3, [r6, #12]
 8016ac4:	061a      	lsls	r2, r3, #24
 8016ac6:	d410      	bmi.n	8016aea <__swhatbuf_r+0x3e>
 8016ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016acc:	e00e      	b.n	8016aec <__swhatbuf_r+0x40>
 8016ace:	466a      	mov	r2, sp
 8016ad0:	f000 f862 	bl	8016b98 <_fstat_r>
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	dbf2      	blt.n	8016abe <__swhatbuf_r+0x12>
 8016ad8:	9a01      	ldr	r2, [sp, #4]
 8016ada:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016ade:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016ae2:	425a      	negs	r2, r3
 8016ae4:	415a      	adcs	r2, r3
 8016ae6:	602a      	str	r2, [r5, #0]
 8016ae8:	e7ee      	b.n	8016ac8 <__swhatbuf_r+0x1c>
 8016aea:	2340      	movs	r3, #64	; 0x40
 8016aec:	2000      	movs	r0, #0
 8016aee:	6023      	str	r3, [r4, #0]
 8016af0:	b016      	add	sp, #88	; 0x58
 8016af2:	bd70      	pop	{r4, r5, r6, pc}

08016af4 <__smakebuf_r>:
 8016af4:	898b      	ldrh	r3, [r1, #12]
 8016af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016af8:	079d      	lsls	r5, r3, #30
 8016afa:	4606      	mov	r6, r0
 8016afc:	460c      	mov	r4, r1
 8016afe:	d507      	bpl.n	8016b10 <__smakebuf_r+0x1c>
 8016b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b04:	6023      	str	r3, [r4, #0]
 8016b06:	6123      	str	r3, [r4, #16]
 8016b08:	2301      	movs	r3, #1
 8016b0a:	6163      	str	r3, [r4, #20]
 8016b0c:	b002      	add	sp, #8
 8016b0e:	bd70      	pop	{r4, r5, r6, pc}
 8016b10:	ab01      	add	r3, sp, #4
 8016b12:	466a      	mov	r2, sp
 8016b14:	f7ff ffca 	bl	8016aac <__swhatbuf_r>
 8016b18:	9900      	ldr	r1, [sp, #0]
 8016b1a:	4605      	mov	r5, r0
 8016b1c:	4630      	mov	r0, r6
 8016b1e:	f7ff f9c7 	bl	8015eb0 <_malloc_r>
 8016b22:	b948      	cbnz	r0, 8016b38 <__smakebuf_r+0x44>
 8016b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b28:	059a      	lsls	r2, r3, #22
 8016b2a:	d4ef      	bmi.n	8016b0c <__smakebuf_r+0x18>
 8016b2c:	f023 0303 	bic.w	r3, r3, #3
 8016b30:	f043 0302 	orr.w	r3, r3, #2
 8016b34:	81a3      	strh	r3, [r4, #12]
 8016b36:	e7e3      	b.n	8016b00 <__smakebuf_r+0xc>
 8016b38:	4b0d      	ldr	r3, [pc, #52]	; (8016b70 <__smakebuf_r+0x7c>)
 8016b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b3c:	89a3      	ldrh	r3, [r4, #12]
 8016b3e:	6020      	str	r0, [r4, #0]
 8016b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b44:	81a3      	strh	r3, [r4, #12]
 8016b46:	9b00      	ldr	r3, [sp, #0]
 8016b48:	6163      	str	r3, [r4, #20]
 8016b4a:	9b01      	ldr	r3, [sp, #4]
 8016b4c:	6120      	str	r0, [r4, #16]
 8016b4e:	b15b      	cbz	r3, 8016b68 <__smakebuf_r+0x74>
 8016b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b54:	4630      	mov	r0, r6
 8016b56:	f000 f831 	bl	8016bbc <_isatty_r>
 8016b5a:	b128      	cbz	r0, 8016b68 <__smakebuf_r+0x74>
 8016b5c:	89a3      	ldrh	r3, [r4, #12]
 8016b5e:	f023 0303 	bic.w	r3, r3, #3
 8016b62:	f043 0301 	orr.w	r3, r3, #1
 8016b66:	81a3      	strh	r3, [r4, #12]
 8016b68:	89a3      	ldrh	r3, [r4, #12]
 8016b6a:	431d      	orrs	r5, r3
 8016b6c:	81a5      	strh	r5, [r4, #12]
 8016b6e:	e7cd      	b.n	8016b0c <__smakebuf_r+0x18>
 8016b70:	08015ffd 	.word	0x08015ffd

08016b74 <_read_r>:
 8016b74:	b538      	push	{r3, r4, r5, lr}
 8016b76:	4c07      	ldr	r4, [pc, #28]	; (8016b94 <_read_r+0x20>)
 8016b78:	4605      	mov	r5, r0
 8016b7a:	4608      	mov	r0, r1
 8016b7c:	4611      	mov	r1, r2
 8016b7e:	2200      	movs	r2, #0
 8016b80:	6022      	str	r2, [r4, #0]
 8016b82:	461a      	mov	r2, r3
 8016b84:	f7ec fa8c 	bl	80030a0 <_read>
 8016b88:	1c43      	adds	r3, r0, #1
 8016b8a:	d102      	bne.n	8016b92 <_read_r+0x1e>
 8016b8c:	6823      	ldr	r3, [r4, #0]
 8016b8e:	b103      	cbz	r3, 8016b92 <_read_r+0x1e>
 8016b90:	602b      	str	r3, [r5, #0]
 8016b92:	bd38      	pop	{r3, r4, r5, pc}
 8016b94:	20010320 	.word	0x20010320

08016b98 <_fstat_r>:
 8016b98:	b538      	push	{r3, r4, r5, lr}
 8016b9a:	4c07      	ldr	r4, [pc, #28]	; (8016bb8 <_fstat_r+0x20>)
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	4605      	mov	r5, r0
 8016ba0:	4608      	mov	r0, r1
 8016ba2:	4611      	mov	r1, r2
 8016ba4:	6023      	str	r3, [r4, #0]
 8016ba6:	f7ec fac0 	bl	800312a <_fstat>
 8016baa:	1c43      	adds	r3, r0, #1
 8016bac:	d102      	bne.n	8016bb4 <_fstat_r+0x1c>
 8016bae:	6823      	ldr	r3, [r4, #0]
 8016bb0:	b103      	cbz	r3, 8016bb4 <_fstat_r+0x1c>
 8016bb2:	602b      	str	r3, [r5, #0]
 8016bb4:	bd38      	pop	{r3, r4, r5, pc}
 8016bb6:	bf00      	nop
 8016bb8:	20010320 	.word	0x20010320

08016bbc <_isatty_r>:
 8016bbc:	b538      	push	{r3, r4, r5, lr}
 8016bbe:	4c06      	ldr	r4, [pc, #24]	; (8016bd8 <_isatty_r+0x1c>)
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	4605      	mov	r5, r0
 8016bc4:	4608      	mov	r0, r1
 8016bc6:	6023      	str	r3, [r4, #0]
 8016bc8:	f7ec fabf 	bl	800314a <_isatty>
 8016bcc:	1c43      	adds	r3, r0, #1
 8016bce:	d102      	bne.n	8016bd6 <_isatty_r+0x1a>
 8016bd0:	6823      	ldr	r3, [r4, #0]
 8016bd2:	b103      	cbz	r3, 8016bd6 <_isatty_r+0x1a>
 8016bd4:	602b      	str	r3, [r5, #0]
 8016bd6:	bd38      	pop	{r3, r4, r5, pc}
 8016bd8:	20010320 	.word	0x20010320

08016bdc <log10f>:
 8016bdc:	b510      	push	{r4, lr}
 8016bde:	ed2d 8b02 	vpush	{d8}
 8016be2:	b08a      	sub	sp, #40	; 0x28
 8016be4:	eeb0 8a40 	vmov.f32	s16, s0
 8016be8:	f000 f86e 	bl	8016cc8 <__ieee754_log10f>
 8016bec:	4b31      	ldr	r3, [pc, #196]	; (8016cb4 <log10f+0xd8>)
 8016bee:	f993 4000 	ldrsb.w	r4, [r3]
 8016bf2:	1c63      	adds	r3, r4, #1
 8016bf4:	d059      	beq.n	8016caa <log10f+0xce>
 8016bf6:	eeb4 8a48 	vcmp.f32	s16, s16
 8016bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bfe:	d654      	bvs.n	8016caa <log10f+0xce>
 8016c00:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c08:	d84f      	bhi.n	8016caa <log10f+0xce>
 8016c0a:	4b2b      	ldr	r3, [pc, #172]	; (8016cb8 <log10f+0xdc>)
 8016c0c:	9301      	str	r3, [sp, #4]
 8016c0e:	ee18 0a10 	vmov	r0, s16
 8016c12:	2300      	movs	r3, #0
 8016c14:	9308      	str	r3, [sp, #32]
 8016c16:	f7e9 fcaf 	bl	8000578 <__aeabi_f2d>
 8016c1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016c22:	b994      	cbnz	r4, 8016c4a <log10f+0x6e>
 8016c24:	4b25      	ldr	r3, [pc, #148]	; (8016cbc <log10f+0xe0>)
 8016c26:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016c2a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016c36:	d025      	beq.n	8016c84 <log10f+0xa8>
 8016c38:	2301      	movs	r3, #1
 8016c3a:	2c02      	cmp	r4, #2
 8016c3c:	9300      	str	r3, [sp, #0]
 8016c3e:	d116      	bne.n	8016c6e <log10f+0x92>
 8016c40:	f7ff f89a 	bl	8015d78 <__errno>
 8016c44:	2321      	movs	r3, #33	; 0x21
 8016c46:	6003      	str	r3, [r0, #0]
 8016c48:	e016      	b.n	8016c78 <log10f+0x9c>
 8016c4a:	4b1d      	ldr	r3, [pc, #116]	; (8016cc0 <log10f+0xe4>)
 8016c4c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016c50:	2200      	movs	r2, #0
 8016c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016c5a:	d1ed      	bne.n	8016c38 <log10f+0x5c>
 8016c5c:	2302      	movs	r3, #2
 8016c5e:	429c      	cmp	r4, r3
 8016c60:	9300      	str	r3, [sp, #0]
 8016c62:	d111      	bne.n	8016c88 <log10f+0xac>
 8016c64:	f7ff f888 	bl	8015d78 <__errno>
 8016c68:	2322      	movs	r3, #34	; 0x22
 8016c6a:	6003      	str	r3, [r0, #0]
 8016c6c:	e011      	b.n	8016c92 <log10f+0xb6>
 8016c6e:	4668      	mov	r0, sp
 8016c70:	f000 f880 	bl	8016d74 <matherr>
 8016c74:	2800      	cmp	r0, #0
 8016c76:	d0e3      	beq.n	8016c40 <log10f+0x64>
 8016c78:	4812      	ldr	r0, [pc, #72]	; (8016cc4 <log10f+0xe8>)
 8016c7a:	f000 f87d 	bl	8016d78 <nan>
 8016c7e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8016c82:	e006      	b.n	8016c92 <log10f+0xb6>
 8016c84:	2302      	movs	r3, #2
 8016c86:	9300      	str	r3, [sp, #0]
 8016c88:	4668      	mov	r0, sp
 8016c8a:	f000 f873 	bl	8016d74 <matherr>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d0e8      	beq.n	8016c64 <log10f+0x88>
 8016c92:	9b08      	ldr	r3, [sp, #32]
 8016c94:	b11b      	cbz	r3, 8016c9e <log10f+0xc2>
 8016c96:	f7ff f86f 	bl	8015d78 <__errno>
 8016c9a:	9b08      	ldr	r3, [sp, #32]
 8016c9c:	6003      	str	r3, [r0, #0]
 8016c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016ca2:	f7e9 fcc1 	bl	8000628 <__aeabi_d2f>
 8016ca6:	ee00 0a10 	vmov	s0, r0
 8016caa:	b00a      	add	sp, #40	; 0x28
 8016cac:	ecbd 8b02 	vpop	{d8}
 8016cb0:	bd10      	pop	{r4, pc}
 8016cb2:	bf00      	nop
 8016cb4:	200000e4 	.word	0x200000e4
 8016cb8:	08019c5f 	.word	0x08019c5f
 8016cbc:	c7efffff 	.word	0xc7efffff
 8016cc0:	fff00000 	.word	0xfff00000
 8016cc4:	08019c31 	.word	0x08019c31

08016cc8 <__ieee754_log10f>:
 8016cc8:	b508      	push	{r3, lr}
 8016cca:	ee10 2a10 	vmov	r2, s0
 8016cce:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8016cd2:	ed2d 8b02 	vpush	{d8}
 8016cd6:	d108      	bne.n	8016cea <__ieee754_log10f+0x22>
 8016cd8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8016d5c <__ieee754_log10f+0x94>
 8016cdc:	eddf 7a20 	vldr	s15, [pc, #128]	; 8016d60 <__ieee754_log10f+0x98>
 8016ce0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016ce4:	ecbd 8b02 	vpop	{d8}
 8016ce8:	bd08      	pop	{r3, pc}
 8016cea:	2a00      	cmp	r2, #0
 8016cec:	da02      	bge.n	8016cf4 <__ieee754_log10f+0x2c>
 8016cee:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016cf2:	e7f3      	b.n	8016cdc <__ieee754_log10f+0x14>
 8016cf4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016cf8:	db02      	blt.n	8016d00 <__ieee754_log10f+0x38>
 8016cfa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016cfe:	e7f1      	b.n	8016ce4 <__ieee754_log10f+0x1c>
 8016d00:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8016d04:	bfbf      	itttt	lt
 8016d06:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8016d64 <__ieee754_log10f+0x9c>
 8016d0a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016d0e:	f06f 0118 	mvnlt.w	r1, #24
 8016d12:	ee17 2a90 	vmovlt	r2, s15
 8016d16:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8016d1a:	bfa8      	it	ge
 8016d1c:	2100      	movge	r1, #0
 8016d1e:	3b7f      	subs	r3, #127	; 0x7f
 8016d20:	440b      	add	r3, r1
 8016d22:	0fd9      	lsrs	r1, r3, #31
 8016d24:	440b      	add	r3, r1
 8016d26:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8016d2a:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8016d2e:	ee07 3a90 	vmov	s15, r3
 8016d32:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8016d36:	ee00 3a10 	vmov	s0, r3
 8016d3a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016d3e:	f000 f823 	bl	8016d88 <__ieee754_logf>
 8016d42:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016d68 <__ieee754_log10f+0xa0>
 8016d46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016d4a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016d6c <__ieee754_log10f+0xa4>
 8016d4e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016d52:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016d70 <__ieee754_log10f+0xa8>
 8016d56:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016d5a:	e7c3      	b.n	8016ce4 <__ieee754_log10f+0x1c>
 8016d5c:	cc000000 	.word	0xcc000000
 8016d60:	00000000 	.word	0x00000000
 8016d64:	4c000000 	.word	0x4c000000
 8016d68:	3ede5bd9 	.word	0x3ede5bd9
 8016d6c:	355427db 	.word	0x355427db
 8016d70:	3e9a2080 	.word	0x3e9a2080

08016d74 <matherr>:
 8016d74:	2000      	movs	r0, #0
 8016d76:	4770      	bx	lr

08016d78 <nan>:
 8016d78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016d80 <nan+0x8>
 8016d7c:	4770      	bx	lr
 8016d7e:	bf00      	nop
 8016d80:	00000000 	.word	0x00000000
 8016d84:	7ff80000 	.word	0x7ff80000

08016d88 <__ieee754_logf>:
 8016d88:	ee10 3a10 	vmov	r3, s0
 8016d8c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016d90:	d106      	bne.n	8016da0 <__ieee754_logf+0x18>
 8016d92:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8016f28 <__ieee754_logf+0x1a0>
 8016d96:	eddf 7a65 	vldr	s15, [pc, #404]	; 8016f2c <__ieee754_logf+0x1a4>
 8016d9a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016d9e:	4770      	bx	lr
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	da02      	bge.n	8016daa <__ieee754_logf+0x22>
 8016da4:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016da8:	e7f5      	b.n	8016d96 <__ieee754_logf+0xe>
 8016daa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016dae:	db02      	blt.n	8016db6 <__ieee754_logf+0x2e>
 8016db0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016db4:	4770      	bx	lr
 8016db6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016dba:	bfbf      	itttt	lt
 8016dbc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8016f30 <__ieee754_logf+0x1a8>
 8016dc0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016dc4:	f06f 0118 	mvnlt.w	r1, #24
 8016dc8:	ee17 3a90 	vmovlt	r3, s15
 8016dcc:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8016dd0:	bfa8      	it	ge
 8016dd2:	2100      	movge	r1, #0
 8016dd4:	3a7f      	subs	r2, #127	; 0x7f
 8016dd6:	440a      	add	r2, r1
 8016dd8:	4956      	ldr	r1, [pc, #344]	; (8016f34 <__ieee754_logf+0x1ac>)
 8016dda:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016dde:	4419      	add	r1, r3
 8016de0:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8016de4:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8016de8:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8016dec:	4319      	orrs	r1, r3
 8016dee:	ee07 1a90 	vmov	s15, r1
 8016df2:	f103 010f 	add.w	r1, r3, #15
 8016df6:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8016dfa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016dfe:	290f      	cmp	r1, #15
 8016e00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016e04:	dc31      	bgt.n	8016e6a <__ieee754_logf+0xe2>
 8016e06:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e0e:	d10f      	bne.n	8016e30 <__ieee754_logf+0xa8>
 8016e10:	2a00      	cmp	r2, #0
 8016e12:	f000 8085 	beq.w	8016f20 <__ieee754_logf+0x198>
 8016e16:	ee07 2a90 	vmov	s15, r2
 8016e1a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8016f38 <__ieee754_logf+0x1b0>
 8016e1e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8016f3c <__ieee754_logf+0x1b4>
 8016e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e26:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016e2a:	eea7 0a87 	vfma.f32	s0, s15, s14
 8016e2e:	4770      	bx	lr
 8016e30:	eddf 7a43 	vldr	s15, [pc, #268]	; 8016f40 <__ieee754_logf+0x1b8>
 8016e34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016e38:	eea0 7a67 	vfms.f32	s14, s0, s15
 8016e3c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016e44:	b912      	cbnz	r2, 8016e4c <__ieee754_logf+0xc4>
 8016e46:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016e4a:	4770      	bx	lr
 8016e4c:	ee07 2a90 	vmov	s15, r2
 8016e50:	eddf 6a39 	vldr	s13, [pc, #228]	; 8016f38 <__ieee754_logf+0x1b0>
 8016e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e58:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016e5c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8016e60:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8016f3c <__ieee754_logf+0x1b4>
 8016e64:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8016e68:	4770      	bx	lr
 8016e6a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016e6e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016e72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016f44 <__ieee754_logf+0x1bc>
 8016e76:	eddf 4a34 	vldr	s9, [pc, #208]	; 8016f48 <__ieee754_logf+0x1c0>
 8016e7a:	4934      	ldr	r1, [pc, #208]	; (8016f4c <__ieee754_logf+0x1c4>)
 8016e7c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8016e80:	4419      	add	r1, r3
 8016e82:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8016e86:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016e8a:	430b      	orrs	r3, r1
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	ee07 2a90 	vmov	s15, r2
 8016e92:	ee26 5a06 	vmul.f32	s10, s12, s12
 8016e96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016e9a:	ee25 7a05 	vmul.f32	s14, s10, s10
 8016e9e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016f50 <__ieee754_logf+0x1c8>
 8016ea2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016ea6:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8016f54 <__ieee754_logf+0x1cc>
 8016eaa:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016eae:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016f58 <__ieee754_logf+0x1d0>
 8016eb2:	eee7 7a24 	vfma.f32	s15, s14, s9
 8016eb6:	eddf 4a29 	vldr	s9, [pc, #164]	; 8016f5c <__ieee754_logf+0x1d4>
 8016eba:	eee7 4a87 	vfma.f32	s9, s15, s14
 8016ebe:	eddf 7a28 	vldr	s15, [pc, #160]	; 8016f60 <__ieee754_logf+0x1d8>
 8016ec2:	eee4 7a87 	vfma.f32	s15, s9, s14
 8016ec6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016eca:	eee5 7a87 	vfma.f32	s15, s11, s14
 8016ece:	dd1c      	ble.n	8016f0a <__ieee754_logf+0x182>
 8016ed0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016ed4:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016ed8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8016edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016ee0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016ee4:	b922      	cbnz	r2, 8016ef0 <__ieee754_logf+0x168>
 8016ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016eea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016eee:	4770      	bx	lr
 8016ef0:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8016f38 <__ieee754_logf+0x1b0>
 8016ef4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016efc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016f00:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016f3c <__ieee754_logf+0x1b4>
 8016f04:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8016f08:	4770      	bx	lr
 8016f0a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016f0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f12:	2a00      	cmp	r2, #0
 8016f14:	d0e9      	beq.n	8016eea <__ieee754_logf+0x162>
 8016f16:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8016f38 <__ieee754_logf+0x1b0>
 8016f1a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8016f1e:	e7ed      	b.n	8016efc <__ieee754_logf+0x174>
 8016f20:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016f2c <__ieee754_logf+0x1a4>
 8016f24:	4770      	bx	lr
 8016f26:	bf00      	nop
 8016f28:	cc000000 	.word	0xcc000000
 8016f2c:	00000000 	.word	0x00000000
 8016f30:	4c000000 	.word	0x4c000000
 8016f34:	004afb20 	.word	0x004afb20
 8016f38:	3717f7d1 	.word	0x3717f7d1
 8016f3c:	3f317180 	.word	0x3f317180
 8016f40:	3eaaaaab 	.word	0x3eaaaaab
 8016f44:	3e1cd04f 	.word	0x3e1cd04f
 8016f48:	3e178897 	.word	0x3e178897
 8016f4c:	ffcf5c30 	.word	0xffcf5c30
 8016f50:	3e638e29 	.word	0x3e638e29
 8016f54:	3ecccccd 	.word	0x3ecccccd
 8016f58:	3e3a3325 	.word	0x3e3a3325
 8016f5c:	3e924925 	.word	0x3e924925
 8016f60:	3f2aaaab 	.word	0x3f2aaaab

08016f64 <_init>:
 8016f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f66:	bf00      	nop
 8016f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f6a:	bc08      	pop	{r3}
 8016f6c:	469e      	mov	lr, r3
 8016f6e:	4770      	bx	lr

08016f70 <_fini>:
 8016f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f72:	bf00      	nop
 8016f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f76:	bc08      	pop	{r3}
 8016f78:	469e      	mov	lr, r3
 8016f7a:	4770      	bx	lr
