
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018184  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d94  08018354  08018354  00028354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a0e8  0801a0e8  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  0801a0e8  0801a0e8  0002a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a0f0  0801a0f0  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a0f0  0801a0f0  0002a0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a0f4  0801a0f4  0002a0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0801a0f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c01c  20000100  0801a1f8  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c11c  0801a1f8  0003c11c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a903  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000844f  00000000  00000000  0007aa33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000033b8  00000000  00000000  00082e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003018  00000000  00000000  00086240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036a6e  00000000  00000000  00089258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032d19  00000000  00000000  000bfcc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012c24e  00000000  00000000  000f29df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021ec2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df1c  00000000  00000000  0021eca8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801833c 	.word	0x0801833c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	0801833c 	.word	0x0801833c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b972 	b.w	80009c4 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	4604      	mov	r4, r0
 8000700:	4688      	mov	r8, r1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d14b      	bne.n	800079e <__udivmoddi4+0xa6>
 8000706:	428a      	cmp	r2, r1
 8000708:	4615      	mov	r5, r2
 800070a:	d967      	bls.n	80007dc <__udivmoddi4+0xe4>
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	b14a      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000712:	f1c2 0720 	rsb	r7, r2, #32
 8000716:	fa01 f302 	lsl.w	r3, r1, r2
 800071a:	fa20 f707 	lsr.w	r7, r0, r7
 800071e:	4095      	lsls	r5, r2
 8000720:	ea47 0803 	orr.w	r8, r7, r3
 8000724:	4094      	lsls	r4, r2
 8000726:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000730:	fa1f fc85 	uxth.w	ip, r5
 8000734:	fb0e 8817 	mls	r8, lr, r7, r8
 8000738:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800073c:	fb07 f10c 	mul.w	r1, r7, ip
 8000740:	4299      	cmp	r1, r3
 8000742:	d909      	bls.n	8000758 <__udivmoddi4+0x60>
 8000744:	18eb      	adds	r3, r5, r3
 8000746:	f107 30ff 	add.w	r0, r7, #4294967295
 800074a:	f080 811b 	bcs.w	8000984 <__udivmoddi4+0x28c>
 800074e:	4299      	cmp	r1, r3
 8000750:	f240 8118 	bls.w	8000984 <__udivmoddi4+0x28c>
 8000754:	3f02      	subs	r7, #2
 8000756:	442b      	add	r3, r5
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	b2a4      	uxth	r4, r4
 800075c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000760:	fb0e 3310 	mls	r3, lr, r0, r3
 8000764:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000768:	fb00 fc0c 	mul.w	ip, r0, ip
 800076c:	45a4      	cmp	ip, r4
 800076e:	d909      	bls.n	8000784 <__udivmoddi4+0x8c>
 8000770:	192c      	adds	r4, r5, r4
 8000772:	f100 33ff 	add.w	r3, r0, #4294967295
 8000776:	f080 8107 	bcs.w	8000988 <__udivmoddi4+0x290>
 800077a:	45a4      	cmp	ip, r4
 800077c:	f240 8104 	bls.w	8000988 <__udivmoddi4+0x290>
 8000780:	3802      	subs	r0, #2
 8000782:	442c      	add	r4, r5
 8000784:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000788:	eba4 040c 	sub.w	r4, r4, ip
 800078c:	2700      	movs	r7, #0
 800078e:	b11e      	cbz	r6, 8000798 <__udivmoddi4+0xa0>
 8000790:	40d4      	lsrs	r4, r2
 8000792:	2300      	movs	r3, #0
 8000794:	e9c6 4300 	strd	r4, r3, [r6]
 8000798:	4639      	mov	r1, r7
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0xbe>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80eb 	beq.w	800097e <__udivmoddi4+0x286>
 80007a8:	2700      	movs	r7, #0
 80007aa:	e9c6 0100 	strd	r0, r1, [r6]
 80007ae:	4638      	mov	r0, r7
 80007b0:	4639      	mov	r1, r7
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	fab3 f783 	clz	r7, r3
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d147      	bne.n	800084e <__udivmoddi4+0x156>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0xd0>
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f200 80fa 	bhi.w	80009bc <__udivmoddi4+0x2c4>
 80007c8:	1a84      	subs	r4, r0, r2
 80007ca:	eb61 0303 	sbc.w	r3, r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	4698      	mov	r8, r3
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d0e0      	beq.n	8000798 <__udivmoddi4+0xa0>
 80007d6:	e9c6 4800 	strd	r4, r8, [r6]
 80007da:	e7dd      	b.n	8000798 <__udivmoddi4+0xa0>
 80007dc:	b902      	cbnz	r2, 80007e0 <__udivmoddi4+0xe8>
 80007de:	deff      	udf	#255	; 0xff
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f040 808f 	bne.w	8000908 <__udivmoddi4+0x210>
 80007ea:	1b49      	subs	r1, r1, r5
 80007ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007f0:	fa1f f885 	uxth.w	r8, r5
 80007f4:	2701      	movs	r7, #1
 80007f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000804:	fb08 f10c 	mul.w	r1, r8, ip
 8000808:	4299      	cmp	r1, r3
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x124>
 800080c:	18eb      	adds	r3, r5, r3
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4299      	cmp	r1, r3
 8000816:	f200 80cd 	bhi.w	80009b4 <__udivmoddi4+0x2bc>
 800081a:	4684      	mov	ip, r0
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1410 	mls	r4, lr, r0, r1
 8000828:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x14c>
 8000834:	192c      	adds	r4, r5, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x14a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80b6 	bhi.w	80009ae <__udivmoddi4+0x2b6>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e79f      	b.n	800078e <__udivmoddi4+0x96>
 800084e:	f1c7 0c20 	rsb	ip, r7, #32
 8000852:	40bb      	lsls	r3, r7
 8000854:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000858:	ea4e 0e03 	orr.w	lr, lr, r3
 800085c:	fa01 f407 	lsl.w	r4, r1, r7
 8000860:	fa20 f50c 	lsr.w	r5, r0, ip
 8000864:	fa21 f30c 	lsr.w	r3, r1, ip
 8000868:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800086c:	4325      	orrs	r5, r4
 800086e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000872:	0c2c      	lsrs	r4, r5, #16
 8000874:	fb08 3319 	mls	r3, r8, r9, r3
 8000878:	fa1f fa8e 	uxth.w	sl, lr
 800087c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000880:	fb09 f40a 	mul.w	r4, r9, sl
 8000884:	429c      	cmp	r4, r3
 8000886:	fa02 f207 	lsl.w	r2, r2, r7
 800088a:	fa00 f107 	lsl.w	r1, r0, r7
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1e 0303 	adds.w	r3, lr, r3
 8000894:	f109 30ff 	add.w	r0, r9, #4294967295
 8000898:	f080 8087 	bcs.w	80009aa <__udivmoddi4+0x2b2>
 800089c:	429c      	cmp	r4, r3
 800089e:	f240 8084 	bls.w	80009aa <__udivmoddi4+0x2b2>
 80008a2:	f1a9 0902 	sub.w	r9, r9, #2
 80008a6:	4473      	add	r3, lr
 80008a8:	1b1b      	subs	r3, r3, r4
 80008aa:	b2ad      	uxth	r5, r5
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3310 	mls	r3, r8, r0, r3
 80008b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008bc:	45a2      	cmp	sl, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1e 0404 	adds.w	r4, lr, r4
 80008c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008c8:	d26b      	bcs.n	80009a2 <__udivmoddi4+0x2aa>
 80008ca:	45a2      	cmp	sl, r4
 80008cc:	d969      	bls.n	80009a2 <__udivmoddi4+0x2aa>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4474      	add	r4, lr
 80008d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008d6:	fba0 8902 	umull	r8, r9, r0, r2
 80008da:	eba4 040a 	sub.w	r4, r4, sl
 80008de:	454c      	cmp	r4, r9
 80008e0:	46c2      	mov	sl, r8
 80008e2:	464b      	mov	r3, r9
 80008e4:	d354      	bcc.n	8000990 <__udivmoddi4+0x298>
 80008e6:	d051      	beq.n	800098c <__udivmoddi4+0x294>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d069      	beq.n	80009c0 <__udivmoddi4+0x2c8>
 80008ec:	ebb1 050a 	subs.w	r5, r1, sl
 80008f0:	eb64 0403 	sbc.w	r4, r4, r3
 80008f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008f8:	40fd      	lsrs	r5, r7
 80008fa:	40fc      	lsrs	r4, r7
 80008fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000900:	e9c6 5400 	strd	r5, r4, [r6]
 8000904:	2700      	movs	r7, #0
 8000906:	e747      	b.n	8000798 <__udivmoddi4+0xa0>
 8000908:	f1c2 0320 	rsb	r3, r2, #32
 800090c:	fa20 f703 	lsr.w	r7, r0, r3
 8000910:	4095      	lsls	r5, r2
 8000912:	fa01 f002 	lsl.w	r0, r1, r2
 8000916:	fa21 f303 	lsr.w	r3, r1, r3
 800091a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800091e:	4338      	orrs	r0, r7
 8000920:	0c01      	lsrs	r1, r0, #16
 8000922:	fbb3 f7fe 	udiv	r7, r3, lr
 8000926:	fa1f f885 	uxth.w	r8, r5
 800092a:	fb0e 3317 	mls	r3, lr, r7, r3
 800092e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000932:	fb07 f308 	mul.w	r3, r7, r8
 8000936:	428b      	cmp	r3, r1
 8000938:	fa04 f402 	lsl.w	r4, r4, r2
 800093c:	d907      	bls.n	800094e <__udivmoddi4+0x256>
 800093e:	1869      	adds	r1, r5, r1
 8000940:	f107 3cff 	add.w	ip, r7, #4294967295
 8000944:	d22f      	bcs.n	80009a6 <__udivmoddi4+0x2ae>
 8000946:	428b      	cmp	r3, r1
 8000948:	d92d      	bls.n	80009a6 <__udivmoddi4+0x2ae>
 800094a:	3f02      	subs	r7, #2
 800094c:	4429      	add	r1, r5
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	b281      	uxth	r1, r0
 8000952:	fbb3 f0fe 	udiv	r0, r3, lr
 8000956:	fb0e 3310 	mls	r3, lr, r0, r3
 800095a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800095e:	fb00 f308 	mul.w	r3, r0, r8
 8000962:	428b      	cmp	r3, r1
 8000964:	d907      	bls.n	8000976 <__udivmoddi4+0x27e>
 8000966:	1869      	adds	r1, r5, r1
 8000968:	f100 3cff 	add.w	ip, r0, #4294967295
 800096c:	d217      	bcs.n	800099e <__udivmoddi4+0x2a6>
 800096e:	428b      	cmp	r3, r1
 8000970:	d915      	bls.n	800099e <__udivmoddi4+0x2a6>
 8000972:	3802      	subs	r0, #2
 8000974:	4429      	add	r1, r5
 8000976:	1ac9      	subs	r1, r1, r3
 8000978:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800097c:	e73b      	b.n	80007f6 <__udivmoddi4+0xfe>
 800097e:	4637      	mov	r7, r6
 8000980:	4630      	mov	r0, r6
 8000982:	e709      	b.n	8000798 <__udivmoddi4+0xa0>
 8000984:	4607      	mov	r7, r0
 8000986:	e6e7      	b.n	8000758 <__udivmoddi4+0x60>
 8000988:	4618      	mov	r0, r3
 800098a:	e6fb      	b.n	8000784 <__udivmoddi4+0x8c>
 800098c:	4541      	cmp	r1, r8
 800098e:	d2ab      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000990:	ebb8 0a02 	subs.w	sl, r8, r2
 8000994:	eb69 020e 	sbc.w	r2, r9, lr
 8000998:	3801      	subs	r0, #1
 800099a:	4613      	mov	r3, r2
 800099c:	e7a4      	b.n	80008e8 <__udivmoddi4+0x1f0>
 800099e:	4660      	mov	r0, ip
 80009a0:	e7e9      	b.n	8000976 <__udivmoddi4+0x27e>
 80009a2:	4618      	mov	r0, r3
 80009a4:	e795      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a6:	4667      	mov	r7, ip
 80009a8:	e7d1      	b.n	800094e <__udivmoddi4+0x256>
 80009aa:	4681      	mov	r9, r0
 80009ac:	e77c      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009ae:	3802      	subs	r0, #2
 80009b0:	442c      	add	r4, r5
 80009b2:	e747      	b.n	8000844 <__udivmoddi4+0x14c>
 80009b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b8:	442b      	add	r3, r5
 80009ba:	e72f      	b.n	800081c <__udivmoddi4+0x124>
 80009bc:	4638      	mov	r0, r7
 80009be:	e708      	b.n	80007d2 <__udivmoddi4+0xda>
 80009c0:	4637      	mov	r7, r6
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0xa0>

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <TimeDoctor_START>:




void TimeDoctor_START()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80009ce:	f3ef 8310 	mrs	r3, PRIMASK
 80009d2:	607b      	str	r3, [r7, #4]
  return(result);
 80009d4:	687b      	ldr	r3, [r7, #4]
	PROLOG();
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	2301      	movs	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	f383 8810 	msr	PRIMASK, r3
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <TimeDoctor_START+0xc8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d845      	bhi.n	8000a7c <TimeDoctor_START+0xb4>

	buffer_used += sprintf( buffer+buffer_used, "SPEED %lu\r\n", TD_GET_TICK_FREQ() );
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <TimeDoctor_START+0xc8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <TimeDoctor_START+0xcc>)
 80009f8:	18d0      	adds	r0, r2, r3
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <TimeDoctor_START+0xd0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4926      	ldr	r1, [pc, #152]	; (8000a9c <TimeDoctor_START+0xd4>)
 8000a02:	f016 ff93 	bl	801792c <siprintf>
 8000a06:	4602      	mov	r2, r0
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a10:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "MEMSPEED %lu\r\n", TD_GET_TICK_FREQ() );
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <TimeDoctor_START+0xcc>)
 8000a1a:	18d0      	adds	r0, r2, r3
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <TimeDoctor_START+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	491f      	ldr	r1, [pc, #124]	; (8000aa0 <TimeDoctor_START+0xd8>)
 8000a24:	f016 ff82 	bl	801792c <siprintf>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a32:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "TIME %lu\r\n", TD_GET_TICK_FREQ() );
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <TimeDoctor_START+0xcc>)
 8000a3c:	18d0      	adds	r0, r2, r3
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <TimeDoctor_START+0xd0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4917      	ldr	r1, [pc, #92]	; (8000aa4 <TimeDoctor_START+0xdc>)
 8000a46:	f016 ff71 	bl	801792c <siprintf>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a54:	6013      	str	r3, [r2, #0]

	TD_INIT_TICK();
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <TimeDoctor_START+0xe0>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <TimeDoctor_START+0xe0>)
 8000a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a60:	60d3      	str	r3, [r2, #12]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <TimeDoctor_START+0xe8>)
 8000a66:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f383 8810 	msr	PRIMASK, r3

	EPILOG();
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20009e94 	.word	0x20009e94
 8000a94:	20009e98 	.word	0x20009e98
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	08018354 	.word	0x08018354
 8000aa0:	08018360 	.word	0x08018360
 8000aa4:	08018370 	.word	0x08018370
 8000aa8:	e000edf0 	.word	0xe000edf0
 8000aac:	e0001000 	.word	0xe0001000
 8000ab0:	c5acce55 	.word	0xc5acce55

08000ab4 <TimeDoctor_STOP>:

void TimeDoctor_STOP()
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000aba:	f3ef 8310 	mrs	r3, PRIMASK
 8000abe:	603b      	str	r3, [r7, #0]
  return(result);
 8000ac0:	683b      	ldr	r3, [r7, #0]
	PROLOG0();
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f383 8810 	msr	PRIMASK, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	f383 8810 	msr	PRIMASK, r3

	EPILOG();
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <TimeDoctor_SAVE>:

void TimeDoctor_SAVE( int(*putchar_function)(int) )
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	for( int i=0; i<buffer_used; ++i ) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e00a      	b.n	8000b08 <TimeDoctor_SAVE+0x24>
		putchar_function(buffer[i]);
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <TimeDoctor_SAVE+0x50>)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4610      	mov	r0, r2
 8000b00:	4798      	blx	r3
	for( int i=0; i<buffer_used; ++i ) {
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3301      	adds	r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <TimeDoctor_SAVE+0x54>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	dbef      	blt.n	8000af2 <TimeDoctor_SAVE+0xe>
	}
	putchar_function('E');
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2045      	movs	r0, #69	; 0x45
 8000b16:	4798      	blx	r3
	putchar_function('N');
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	204e      	movs	r0, #78	; 0x4e
 8000b1c:	4798      	blx	r3
	putchar_function('D');
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2044      	movs	r0, #68	; 0x44
 8000b22:	4798      	blx	r3
	putchar_function('\n');
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	200a      	movs	r0, #10
 8000b28:	4798      	blx	r3
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20009e98 	.word	0x20009e98
 8000b38:	20009e94 	.word	0x20009e94

08000b3c <TimeDoctor_CREATE>:


/////////////////////// trace functions for task //////////////////////////////////////

void TimeDoctor_CREATE(  uint32_t uxTaskNumber, char* taskName )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000b46:	f3ef 8211 	mrs	r2, BASEPRI
 8000b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4e:	b672      	cpsid	i
 8000b50:	f383 8811 	msr	BASEPRI, r3
 8000b54:	f3bf 8f6f 	isb	sy
 8000b58:	f3bf 8f4f 	dsb	sy
 8000b5c:	b662      	cpsie	i
 8000b5e:	613a      	str	r2, [r7, #16]
 8000b60:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000b62:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d820      	bhi.n	8000bb6 <TimeDoctor_CREATE+0x7a>

	buffer_used += sprintf( buffer+buffer_used, "CRE 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK());
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <TimeDoctor_CREATE+0x90>)
 8000b7c:	18d0      	adds	r0, r2, r3
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <TimeDoctor_CREATE+0x94>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4913      	ldr	r1, [pc, #76]	; (8000bd4 <TimeDoctor_CREATE+0x98>)
 8000b86:	f016 fed1 	bl	801792c <siprintf>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b94:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "NAM 0 %lu %s\r\n", uxTaskNumber, taskName );
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <TimeDoctor_CREATE+0x90>)
 8000b9e:	18d0      	adds	r0, r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <TimeDoctor_CREATE+0x9c>)
 8000ba6:	f016 fec1 	bl	801792c <siprintf>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000bb4:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f383 8811 	msr	BASEPRI, r3
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20009e94 	.word	0x20009e94
 8000bcc:	20009e98 	.word	0x20009e98
 8000bd0:	e0001000 	.word	0xe0001000
 8000bd4:	080183fc 	.word	0x080183fc
 8000bd8:	0801840c 	.word	0x0801840c

08000bdc <TimeDoctor_TASK_SWITCHED_IN>:

void TimeDoctor_TASK_SWITCHED_IN( uint32_t uxTaskNumber )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000be4:	f3ef 8211 	mrs	r2, BASEPRI
 8000be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bec:	b672      	cpsid	i
 8000bee:	f383 8811 	msr	BASEPRI, r3
 8000bf2:	f3bf 8f6f 	isb	sy
 8000bf6:	f3bf 8f4f 	dsb	sy
 8000bfa:	b662      	cpsie	i
 8000bfc:	613a      	str	r2, [r7, #16]
 8000bfe:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000c00:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d810      	bhi.n	8000c34 <TimeDoctor_TASK_SWITCHED_IN+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STA 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <TimeDoctor_TASK_SWITCHED_IN+0x70>)
 8000c1a:	18d0      	adds	r0, r2, r3
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <TimeDoctor_TASK_SWITCHED_IN+0x74>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	490c      	ldr	r1, [pc, #48]	; (8000c54 <TimeDoctor_TASK_SWITCHED_IN+0x78>)
 8000c24:	f016 fe82 	bl	801792c <siprintf>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c32:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f383 8811 	msr	BASEPRI, r3
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20009e94 	.word	0x20009e94
 8000c4c:	20009e98 	.word	0x20009e98
 8000c50:	e0001000 	.word	0xe0001000
 8000c54:	0801841c 	.word	0x0801841c

08000c58 <TimeDoctor_TASK_SWITCHED_OUT>:

void TimeDoctor_TASK_SWITCHED_OUT(uint32_t uxTaskNumber )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000c60:	f3ef 8211 	mrs	r2, BASEPRI
 8000c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c68:	b672      	cpsid	i
 8000c6a:	f383 8811 	msr	BASEPRI, r3
 8000c6e:	f3bf 8f6f 	isb	sy
 8000c72:	f3bf 8f4f 	dsb	sy
 8000c76:	b662      	cpsie	i
 8000c78:	613a      	str	r2, [r7, #16]
 8000c7a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000c7c:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d810      	bhi.n	8000cb0 <TimeDoctor_TASK_SWITCHED_OUT+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STO 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <TimeDoctor_TASK_SWITCHED_OUT+0x70>)
 8000c96:	18d0      	adds	r0, r2, r3
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <TimeDoctor_TASK_SWITCHED_OUT+0x74>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <TimeDoctor_TASK_SWITCHED_OUT+0x78>)
 8000ca0:	f016 fe44 	bl	801792c <siprintf>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000cae:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f383 8811 	msr	BASEPRI, r3
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20009e94 	.word	0x20009e94
 8000cc8:	20009e98 	.word	0x20009e98
 8000ccc:	e0001000 	.word	0xe0001000
 8000cd0:	0801842c 	.word	0x0801842c

08000cd4 <TimeDoctor_TASK_SUSPEND>:

	EPILOG();
}

void TimeDoctor_TASK_SUSPEND ( uint32_t uxTaskNumber)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000cdc:	f3ef 8211 	mrs	r2, BASEPRI
 8000ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce4:	b672      	cpsid	i
 8000ce6:	f383 8811 	msr	BASEPRI, r3
 8000cea:	f3bf 8f6f 	isb	sy
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	b662      	cpsie	i
 8000cf4:	613a      	str	r2, [r7, #16]
 8000cf6:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000cf8:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d810      	bhi.n	8000d2c <TimeDoctor_TASK_SUSPEND+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STO 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <TimeDoctor_TASK_SUSPEND+0x70>)
 8000d12:	18d0      	adds	r0, r2, r3
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <TimeDoctor_TASK_SUSPEND+0x74>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	490c      	ldr	r1, [pc, #48]	; (8000d4c <TimeDoctor_TASK_SUSPEND+0x78>)
 8000d1c:	f016 fe06 	bl	801792c <siprintf>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d2a:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f383 8811 	msr	BASEPRI, r3
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20009e94 	.word	0x20009e94
 8000d44:	20009e98 	.word	0x20009e98
 8000d48:	e0001000 	.word	0xe0001000
 8000d4c:	0801842c 	.word	0x0801842c

08000d50 <TimeDoctor_QUEUE_CREATE>:


/////////////////////// trace functions for queue //////////////////////////////////////

void TimeDoctor_QUEUE_CREATE( uint32_t *uxQueueNumber )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000d58:	f3ef 8211 	mrs	r2, BASEPRI
 8000d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d60:	b672      	cpsid	i
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	b662      	cpsie	i
 8000d70:	613a      	str	r2, [r7, #16]
 8000d72:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000d74:	693b      	ldr	r3, [r7, #16]
	static uint32_t nextQueueNumber = 0;

	PROLOG();
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d818      	bhi.n	8000db8 <TimeDoctor_QUEUE_CREATE+0x68>

	*uxQueueNumber = nextQueueNumber++;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <TimeDoctor_QUEUE_CREATE+0x80>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	4910      	ldr	r1, [pc, #64]	; (8000dd0 <TimeDoctor_QUEUE_CREATE+0x80>)
 8000d8e:	600a      	str	r2, [r1, #0]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6013      	str	r3, [r2, #0]
 	buffer_used += sprintf( buffer+buffer_used, "CRE 3 %lu %lu\r\n", *uxQueueNumber, TD_GET_TICK() );
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <TimeDoctor_QUEUE_CREATE+0x84>)
 8000d9c:	18d0      	adds	r0, r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <TimeDoctor_QUEUE_CREATE+0x88>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <TimeDoctor_QUEUE_CREATE+0x8c>)
 8000da8:	f016 fdc0 	bl	801792c <siprintf>
 8000dac:	4602      	mov	r2, r0
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000db6:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f383 8811 	msr	BASEPRI, r3
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20009e94 	.word	0x20009e94
 8000dd0:	2000011c 	.word	0x2000011c
 8000dd4:	20009e98 	.word	0x20009e98
 8000dd8:	e0001000 	.word	0xe0001000
 8000ddc:	0801844c 	.word	0x0801844c

08000de0 <Timedoctor_QUEUE_REGISTRY_ADD>:

void Timedoctor_QUEUE_REGISTRY_ADD( uint32_t uxQueueNumber, const char *pcQueueName )
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	buffer_used += sprintf( buffer+buffer_used, "NAM 3 %lu %s\r\n", uxQueueNumber, pcQueueName );
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <Timedoctor_QUEUE_REGISTRY_ADD+0x38>)
 8000df2:	18d0      	adds	r0, r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4908      	ldr	r1, [pc, #32]	; (8000e1c <Timedoctor_QUEUE_REGISTRY_ADD+0x3c>)
 8000dfa:	f016 fd97 	bl	801792c <siprintf>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20009e94 	.word	0x20009e94
 8000e18:	20009e98 	.word	0x20009e98
 8000e1c:	0801845c 	.word	0x0801845c

08000e20 <TimeDoctor_QUEUE_SEND>:

void TimeDoctor_QUEUE_SEND(uint32_t uxQueueNumber, uint32_t uxMessagesWaiting)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8000e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e32:	b672      	cpsid	i
 8000e34:	f383 8811 	msr	BASEPRI, r3
 8000e38:	f3bf 8f6f 	isb	sy
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	b662      	cpsie	i
 8000e42:	613a      	str	r2, [r7, #16]
 8000e44:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000e46:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d813      	bhi.n	8000e80 <TimeDoctor_QUEUE_SEND+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STA 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <TimeDoctor_QUEUE_SEND+0x78>)
 8000e60:	18d0      	adds	r0, r2, r3
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <TimeDoctor_QUEUE_SEND+0x7c>)
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	2301      	movs	r3, #1
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <TimeDoctor_QUEUE_SEND+0x80>)
 8000e70:	f016 fd5c 	bl	801792c <siprintf>
 8000e74:	4602      	mov	r2, r0
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e7e:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f383 8811 	msr	BASEPRI, r3
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20009e94 	.word	0x20009e94
 8000e98:	20009e98 	.word	0x20009e98
 8000e9c:	e0001000 	.word	0xe0001000
 8000ea0:	0801846c 	.word	0x0801846c

08000ea4 <TimeDoctor_QUEUE_SEND_FROM_ISR>:

void TimeDoctor_QUEUE_SEND_FROM_ISR( uint32_t uxQueueNumber, uint32_t uxMessagesWaiting)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000eae:	f3ef 8211 	mrs	r2, BASEPRI
 8000eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb6:	b672      	cpsid	i
 8000eb8:	f383 8811 	msr	BASEPRI, r3
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	f3bf 8f4f 	dsb	sy
 8000ec4:	b662      	cpsie	i
 8000ec6:	613a      	str	r2, [r7, #16]
 8000ec8:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000eca:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d813      	bhi.n	8000f04 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STA 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <TimeDoctor_QUEUE_SEND_FROM_ISR+0x78>)
 8000ee4:	18d0      	adds	r0, r2, r3
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x7c>)
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x80>)
 8000ef4:	f016 fd1a 	bl	801792c <siprintf>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000f02:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f383 8811 	msr	BASEPRI, r3
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20009e94 	.word	0x20009e94
 8000f1c:	20009e98 	.word	0x20009e98
 8000f20:	e0001000 	.word	0xe0001000
 8000f24:	0801846c 	.word	0x0801846c

08000f28 <TimeDoctor_QUEUE_RECEIVE>:

void TimeDoctor_QUEUE_RECEIVE(uint32_t uxQueueNumber, uint32_t uxMessagesWaiting) /*The number of items currently in the queue. */
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000f32:	f3ef 8211 	mrs	r2, BASEPRI
 8000f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f3a:	b672      	cpsid	i
 8000f3c:	f383 8811 	msr	BASEPRI, r3
 8000f40:	f3bf 8f6f 	isb	sy
 8000f44:	f3bf 8f4f 	dsb	sy
 8000f48:	b662      	cpsie	i
 8000f4a:	613a      	str	r2, [r7, #16]
 8000f4c:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000f4e:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d813      	bhi.n	8000f88 <TimeDoctor_QUEUE_RECEIVE+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STO 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <TimeDoctor_QUEUE_RECEIVE+0x78>)
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <TimeDoctor_QUEUE_RECEIVE+0x7c>)
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4613      	mov	r3, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <TimeDoctor_QUEUE_RECEIVE+0x80>)
 8000f78:	f016 fcd8 	bl	801792c <siprintf>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f86:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f383 8811 	msr	BASEPRI, r3
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20009e94 	.word	0x20009e94
 8000fa0:	20009e98 	.word	0x20009e98
 8000fa4:	e0001000 	.word	0xe0001000
 8000fa8:	08018480 	.word	0x08018480

08000fac <TimeDoctor_QUEUE_RECEIVE_FROM_ISR>:

void TimeDoctor_QUEUE_RECEIVE_FROM_ISR( uint32_t uxQueueNumber, uint32_t uxMessagesWaiting )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	b672      	cpsid	i
 8000fc0:	f383 8811 	msr	BASEPRI, r3
 8000fc4:	f3bf 8f6f 	isb	sy
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	b662      	cpsie	i
 8000fce:	613a      	str	r2, [r7, #16]
 8000fd0:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000fd2:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d813      	bhi.n	800100c <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STO 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x78>)
 8000fec:	18d0      	adds	r0, r2, r3
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x7c>)
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	490c      	ldr	r1, [pc, #48]	; (800102c <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x80>)
 8000ffc:	f016 fc96 	bl	801792c <siprintf>
 8001000:	4602      	mov	r2, r0
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 800100a:	6013      	str	r3, [r2, #0]

	EPILOG();
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f383 8811 	msr	BASEPRI, r3
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20009e94 	.word	0x20009e94
 8001024:	20009e98 	.word	0x20009e98
 8001028:	e0001000 	.word	0xe0001000
 800102c:	08018480 	.word	0x08018480

08001030 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
#define AUDIO_IN_SAMPLES_RATE 16000
#define AUDIO_IN_SAMPLES (AUDIO_IN_SAMPLES_RATE/10)
int16_t audio_in_buffer[AUDIO_IN_SAMPLES*2]; // L+R interleaved

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[0] , 0 , 0);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x30>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2200      	movs	r2, #0
 8001072:	4909      	ldr	r1, [pc, #36]	; (8001098 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>)
 8001074:	f012 fe84 	bl	8013d80 <osMessageQueuePut>
 8001078:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f113 0f03 	cmn.w	r3, #3
 8001080:	d004      	beq.n	800108c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		Error_Handler();
 8001088:	f001 fc8e 	bl	80029a8 <Error_Handler>
	}
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20019b74 	.word	0x20019b74
 8001098:	20019d9c 	.word	0x20019d9c

0800109c <BSP_AUDIO_IN_TransferComplete_CallBack>:
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[AUDIO_IN_SAMPLES/2] , 0 , 0);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <BSP_AUDIO_IN_TransferComplete_CallBack+0x30>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	2200      	movs	r2, #0
 80010aa:	4909      	ldr	r1, [pc, #36]	; (80010d0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>)
 80010ac:	f012 fe68 	bl	8013d80 <osMessageQueuePut>
 80010b0:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f113 0f03 	cmn.w	r3, #3
 80010b8:	d004      	beq.n	80010c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		Error_Handler();
 80010c0:	f001 fc72 	bl	80029a8 <Error_Handler>
	}
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20019b74 	.word	0x20019b74
 80010d0:	2001a3dc 	.word	0x2001a3dc

080010d4 <BSP_AUDIO_IN_Error_CallBack>:
void BSP_AUDIO_IN_Error_CallBack(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <AudioRecordingFunction>:
void AudioRecordingFunction(void *argument) ///function of AudioReacording thread
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint8_t ok;
	  ok = BSP_AUDIO_IN_Init(AUDIO_IN_SAMPLES_RATE, 16, 2);
 80010ec:	2202      	movs	r2, #2
 80010ee:	2110      	movs	r1, #16
 80010f0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80010f4:	f004 fd93 	bl	8005c1e <BSP_AUDIO_IN_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <AudioRecordingFunction+0x22>
		  Error_Handler();
 8001102:	f001 fc51 	bl	80029a8 <Error_Handler>
	  }
	  ok = BSP_AUDIO_IN_Record(audio_in_buffer, AUDIO_IN_SAMPLES);
 8001106:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <AudioRecordingFunction+0x4c>)
 800110c:	f004 fe06 	bl	8005d1c <BSP_AUDIO_IN_Record>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <AudioRecordingFunction+0x3a>
	  	  Error_Handler();
 800111a:	f001 fc45 	bl	80029a8 <Error_Handler>
	    }
	  osThreadSuspend(audioRecordingHandle);
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <AudioRecordingFunction+0x50>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f012 fbfc 	bl	8013920 <osThreadSuspend>

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20019d9c 	.word	0x20019d9c
 8001134:	2001b71c 	.word	0x2001b71c

08001138 <calcdBFS>:
float calcdBFS(int16_t buffer[], int len){
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	float sum = 0;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
			for (int i=0 ; i < len ; i+=2){
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	e01b      	b.n	8001186 <calcdBFS+0x4e>
				sum += buffer[i]*buffer[i];
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	4619      	mov	r1, r3
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4413      	add	r3, r2
 8001164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001168:	fb03 f301 	mul.w	r3, r3, r1
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	ed97 7a07 	vldr	s14, [r7, #28]
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	edc7 7a07 	vstr	s15, [r7, #28]
			for (int i=0 ; i < len ; i+=2){
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3302      	adds	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	dbdf      	blt.n	800114e <calcdBFS+0x16>
			}
			sum /=  len/2 ;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	da00      	bge.n	8001196 <calcdBFS+0x5e>
 8001194:	3301      	adds	r3, #1
 8001196:	105b      	asrs	r3, r3, #1
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80011a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a8:	edc7 7a07 	vstr	s15, [r7, #28]
			//float moyenne = sum / AUDIO_IN_SAMPLES*2/2;

			float maxSignal = (1<<15)-1;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <calcdBFS+0xbc>)
 80011ae:	617b      	str	r3, [r7, #20]
			float maxMoyenne = maxSignal*maxSignal;
 80011b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80011b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011bc:	edc7 7a04 	vstr	s15, [r7, #16]

			float dBFS = 10 * log10f(sum/maxMoyenne);
 80011c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80011c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011cc:	eeb0 0a66 	vmov.f32	s0, s13
 80011d0:	f016 fef0 	bl	8017fb4 <log10f>
 80011d4:	eeb0 7a40 	vmov.f32	s14, s0
 80011d8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	edc7 7a03 	vstr	s15, [r7, #12]

	    return dBFS;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	ee07 3a90 	vmov	s15, r3
}
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	46fffe00 	.word	0x46fffe00

080011f8 <AudioProcessingFunction>:
void AudioProcessingFunction(void *argument)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b08b      	sub	sp, #44	; 0x2c
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	int x = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
	for (;;){
		static int16_t buffer[AUDIO_IN_SAMPLES*2/2];
		osStatus_t status = osMessageQueueGet(audioQueue, &buffer[0], NULL, 1000);
 8001204:	4b52      	ldr	r3, [pc, #328]	; (8001350 <AudioProcessingFunction+0x158>)
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120c:	2200      	movs	r2, #0
 800120e:	4951      	ldr	r1, [pc, #324]	; (8001354 <AudioProcessingFunction+0x15c>)
 8001210:	f012 fe2a 	bl	8013e68 <osMessageQueueGet>
 8001214:	61b8      	str	r0, [r7, #24]
		if(status != osOK){
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <AudioProcessingFunction+0x28>
			Error_Handler();
 800121c:	f001 fbc4 	bl	80029a8 <Error_Handler>
		}
		float dBFS_A = calcdBFS(&buffer[0], AUDIO_IN_SAMPLES*2/2);
 8001220:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001224:	484b      	ldr	r0, [pc, #300]	; (8001354 <AudioProcessingFunction+0x15c>)
 8001226:	f7ff ff87 	bl	8001138 <calcdBFS>
 800122a:	ed87 0a05 	vstr	s0, [r7, #20]
		float dBFS_B = calcdBFS(&buffer[1], AUDIO_IN_SAMPLES*2/2);
 800122e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001232:	4849      	ldr	r0, [pc, #292]	; (8001358 <AudioProcessingFunction+0x160>)
 8001234:	f7ff ff80 	bl	8001138 <calcdBFS>
 8001238:	ed87 0a04 	vstr	s0, [r7, #16]
		//printf("dBFS= %4d\n", (int)dBFS);
		//BSP_LED_Toggle(LED1);
		if (osMutexAcquire(mutexLCD, osWaitForever) == osOK){
 800123c:	4b47      	ldr	r3, [pc, #284]	; (800135c <AudioProcessingFunction+0x164>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	4618      	mov	r0, r3
 8001246:	f012 fc67 	bl	8013b18 <osMutexAcquire>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1d9      	bne.n	8001204 <AudioProcessingFunction+0xc>
			float min =-60;
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <AudioProcessingFunction+0x168>)
 8001252:	60fb      	str	r3, [r7, #12]
			float max =0;
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]

			int h_A = (int)(BSP_LCD_GetYSize()/2 * (dBFS_A-min)/(max-min));
 800125a:	f004 ff8d 	bl	8006178 <BSP_LCD_GetYSize>
 800125e:	4603      	mov	r3, r0
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800126a:	edd7 6a05 	vldr	s13, [r7, #20]
 800126e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001272:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001276:	ee67 6a27 	vmul.f32	s13, s14, s15
 800127a:	ed97 7a02 	vldr	s14, [r7, #8]
 800127e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001282:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128e:	ee17 3a90 	vmov	r3, s15
 8001292:	623b      	str	r3, [r7, #32]
			if(h_A <= 0 ){
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	2b00      	cmp	r3, #0
 8001298:	dc01      	bgt.n	800129e <AudioProcessingFunction+0xa6>
				h_A = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
			}
			BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800129e:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80012a2:	f004 ffdd 	bl	8006260 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawVLine(x, BSP_LCD_GetYSize()/2,h_A);
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	b29c      	uxth	r4, r3
 80012aa:	f004 ff65 	bl	8006178 <BSP_LCD_GetYSize>
 80012ae:	4603      	mov	r3, r0
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	6a3a      	ldr	r2, [r7, #32]
 80012b6:	b292      	uxth	r2, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	4620      	mov	r0, r4
 80012bc:	f005 f9aa 	bl	8006614 <BSP_LCD_DrawVLine>

			int h_B = (int)(BSP_LCD_GetYSize()/2 * (dBFS_B-min)/(max-min));
 80012c0:	f004 ff5a 	bl	8006178 <BSP_LCD_GetYSize>
 80012c4:	4603      	mov	r3, r0
 80012c6:	085b      	lsrs	r3, r3, #1
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d0:	edd7 6a04 	vldr	s13, [r7, #16]
 80012d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80012e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f4:	ee17 3a90 	vmov	r3, s15
 80012f8:	61fb      	str	r3, [r7, #28]
			if(h_B <= 0 ){
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dc01      	bgt.n	8001304 <AudioProcessingFunction+0x10c>
				h_B = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
			}
			BSP_LCD_DrawVLine(x, BSP_LCD_GetYSize()/2-h_B,h_B);
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	b29c      	uxth	r4, r3
 8001308:	f004 ff36 	bl	8006178 <BSP_LCD_GetYSize>
 800130c:	4603      	mov	r3, r0
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	b29b      	uxth	r3, r3
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	b29b      	uxth	r3, r3
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	b292      	uxth	r2, r2
 800131e:	4619      	mov	r1, r3
 8001320:	4620      	mov	r0, r4
 8001322:	f005 f977 	bl	8006614 <BSP_LCD_DrawVLine>
			x++;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
			if(x == BSP_LCD_GetXSize()){
 800132c:	f004 ff10 	bl	8006150 <BSP_LCD_GetXSize>
 8001330:	4602      	mov	r2, r0
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	429a      	cmp	r2, r3
 8001336:	d104      	bne.n	8001342 <AudioProcessingFunction+0x14a>
				BSP_LCD_Clear(LCD_COLOR_GRAY);
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <AudioProcessingFunction+0x16c>)
 800133a:	f004 ffdd 	bl	80062f8 <BSP_LCD_Clear>
				x = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
			}
			osMutexRelease(mutexLCD);
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <AudioProcessingFunction+0x164>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f012 fc44 	bl	8013bd4 <osMutexRelease>
	for (;;){
 800134c:	e75a      	b.n	8001204 <AudioProcessingFunction+0xc>
 800134e:	bf00      	nop
 8001350:	20019b74 	.word	0x20019b74
 8001354:	20000120 	.word	0x20000120
 8001358:	20000122 	.word	0x20000122
 800135c:	20019aec 	.word	0x20019aec
 8001360:	c2700000 	.word	0xc2700000
 8001364:	ff808080 	.word	0xff808080

08001368 <TouchScreenFunction>:
		}
	}
}
void TouchScreenFunction(void *argument){
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b08f      	sub	sp, #60	; 0x3c
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001370:	f004 feee 	bl	8006150 <BSP_LCD_GetXSize>
 8001374:	4603      	mov	r3, r0
 8001376:	b29c      	uxth	r4, r3
 8001378:	f004 fefe 	bl	8006178 <BSP_LCD_GetYSize>
 800137c:	4603      	mov	r3, r0
 800137e:	b29b      	uxth	r3, r3
 8001380:	4619      	mov	r1, r3
 8001382:	4620      	mov	r0, r4
 8001384:	f005 ff30 	bl	80071e8 <BSP_TS_Init>
	for(;;){
		TS_StateTypeDef state;
		BSP_TS_GetState(&state);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4618      	mov	r0, r3
 800138e:	f005 ff6b 	bl	8007268 <BSP_TS_GetState>
		if(osMutexAcquire(mutexLCD, osWaitForever)== osOK){
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <TouchScreenFunction+0x70>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f04f 31ff 	mov.w	r1, #4294967295
 800139a:	4618      	mov	r0, r3
 800139c:	f012 fbbc 	bl	8013b18 <osMutexAcquire>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <TouchScreenFunction+0x20>
			if ((state.touchDetected > 0) && (state.touchWeight[0]>0)){
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00f      	beq.n	80013cc <TouchScreenFunction+0x64>
 80013ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00b      	beq.n	80013cc <TouchScreenFunction+0x64>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f004 ff52 	bl	8006260 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(state.touchX[0], state.touchY[0], state.touchWeight[0]);
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	8b39      	ldrh	r1, [r7, #24]
 80013c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80013c4:	b292      	uxth	r2, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f005 fabe 	bl	8006948 <BSP_LCD_FillCircle>
			}
			osMutexRelease(mutexLCD);
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <TouchScreenFunction+0x70>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f012 fbff 	bl	8013bd4 <osMutexRelease>
	for(;;){
 80013d6:	e7d7      	b.n	8001388 <TouchScreenFunction+0x20>
 80013d8:	20019aec 	.word	0x20019aec

080013dc <myPutchar>:
		}}
}
int myPutchar(int ch)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80013e4:	1d39      	adds	r1, r7, #4
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	2201      	movs	r2, #1
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <myPutchar+0x20>)
 80013ee:	f00e fb49 	bl	800fa84 <HAL_UART_Transmit>
	return ch;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20019cbc 	.word	0x20019cbc

08001400 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
	TimeDoctor_STOP();
 800140a:	f7ff fb53 	bl	8000ab4 <TimeDoctor_STOP>
	// save output to UART1
	TimeDoctor_SAVE(&myPutchar);
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <HAL_GPIO_EXTI_Callback+0x1c>)
 8001410:	f7ff fb68 	bl	8000ae4 <TimeDoctor_SAVE>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	080013dd 	.word	0x080013dd

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 8001424:	4b52      	ldr	r3, [pc, #328]	; (8001570 <main+0x150>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a51      	ldr	r2, [pc, #324]	; (8001570 <main+0x150>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f006 f93a 	bl	80076a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f8c2 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f001 f89c 	bl	8002574 <MX_GPIO_Init>
  MX_ADC3_Init();
 800143c:	f000 f97c 	bl	8001738 <MX_ADC3_Init>
  MX_CRC_Init();
 8001440:	f000 f9cc 	bl	80017dc <MX_CRC_Init>
  MX_DCMI_Init();
 8001444:	f000 f9ec 	bl	8001820 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001448:	f000 fa1e 	bl	8001888 <MX_DMA2D_Init>
  MX_ETH_Init();
 800144c:	f000 fa4e 	bl	80018ec <MX_ETH_Init>
  MX_FMC_Init();
 8001450:	f001 f840 	bl	80024d4 <MX_FMC_Init>
  MX_I2C1_Init();
 8001454:	f000 fa52 	bl	80018fc <MX_I2C1_Init>
  MX_I2C3_Init();
 8001458:	f000 fa90 	bl	800197c <MX_I2C3_Init>
  MX_LTDC_Init();
 800145c:	f000 face 	bl	80019fc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001460:	f000 fb82 	bl	8001b68 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001464:	f000 fbac 	bl	8001bc0 <MX_RTC_Init>
  MX_SAI2_Init();
 8001468:	f000 fc50 	bl	8001d0c <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800146c:	f000 fcf6 	bl	8001e5c <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8001470:	f000 fd24 	bl	8001ebc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001474:	f000 fdce 	bl	8002014 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001478:	f000 fe42 	bl	8002100 <MX_TIM3_Init>
  MX_TIM5_Init();
 800147c:	f000 feb8 	bl	80021f0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001480:	f000 ff2e 	bl	80022e0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001484:	f000 ff80 	bl	8002388 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001488:	f000 ffc4 	bl	8002414 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800148c:	f000 fff2 	bl	8002474 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001490:	f004 fdee 	bl	8006070 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001494:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001498:	2000      	movs	r0, #0
 800149a:	f004 fe81 	bl	80061a0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_GRAY);
 800149e:	4835      	ldr	r0, [pc, #212]	; (8001574 <main+0x154>)
 80014a0:	f004 ff2a 	bl	80062f8 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80014a4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80014a8:	f004 feda 	bl	8006260 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 80014ac:	4831      	ldr	r0, [pc, #196]	; (8001574 <main+0x154>)
 80014ae:	f004 feef 	bl	8006290 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 80014b2:	f004 fe61 	bl	8006178 <BSP_LCD_GetYSize>
 80014b6:	4603      	mov	r3, r0
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	b299      	uxth	r1, r3
 80014bc:	2301      	movs	r3, #1
 80014be:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <main+0x158>)
 80014c0:	2000      	movs	r0, #0
 80014c2:	f004 ff85 	bl	80063d0 <BSP_LCD_DisplayStringAt>
  //LCD_LOG_Init();
  //LCD_LOG_SetHeader("Header");
  //LCD_LOG_SetFooter("Footer");


  TimeDoctor_START();
 80014c6:	f7ff fa7f 	bl	80009c8 <TimeDoctor_START>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014ca:	f012 f919 	bl	8013700 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  mutexLCD = osMutexNew (&mutexLCD_attributes);
 80014ce:	482b      	ldr	r0, [pc, #172]	; (800157c <main+0x15c>)
 80014d0:	f012 fa88 	bl	80139e4 <osMutexNew>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <main+0x160>)
 80014d8:	601a      	str	r2, [r3, #0]
  if (mutexLCD == NULL){
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <main+0x160>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <main+0xc6>
	  Error_Handler();
 80014e2:	f001 fa61 	bl	80029a8 <Error_Handler>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  audioQueue = osMessageQueueNew(2, sizeof(audio_in_buffer)/2 , &audioQueue_attributes);
 80014e6:	4a27      	ldr	r2, [pc, #156]	; (8001584 <main+0x164>)
 80014e8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80014ec:	2002      	movs	r0, #2
 80014ee:	f012 fbc1 	bl	8013c74 <osMessageQueueNew>
 80014f2:	4602      	mov	r2, r0
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <main+0x168>)
 80014f6:	601a      	str	r2, [r3, #0]
  if (audioQueue == NULL){
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <main+0x168>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <main+0xe4>
	  Error_Handler();
 8001500:	f001 fa52 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <main+0x16c>)
 8001506:	2100      	movs	r1, #0
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <main+0x170>)
 800150a:	f012 f963 	bl	80137d4 <osThreadNew>
 800150e:	4602      	mov	r2, r0
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <main+0x174>)
 8001512:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  audioRecordingHandle = osThreadNew(&AudioRecordingFunction, NULL, &audioRecording_attributes);
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <main+0x178>)
 8001516:	2100      	movs	r1, #0
 8001518:	4820      	ldr	r0, [pc, #128]	; (800159c <main+0x17c>)
 800151a:	f012 f95b 	bl	80137d4 <osThreadNew>
 800151e:	4602      	mov	r2, r0
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <main+0x180>)
 8001522:	601a      	str	r2, [r3, #0]
  if (audioRecordingHandle == NULL){
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <main+0x180>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <main+0x110>
	  Error_Handler();
 800152c:	f001 fa3c 	bl	80029a8 <Error_Handler>
  }
  audioProcessingHandle = osThreadNew(&AudioProcessingFunction, NULL, &audioProcessing_attributes);
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <main+0x184>)
 8001532:	2100      	movs	r1, #0
 8001534:	481c      	ldr	r0, [pc, #112]	; (80015a8 <main+0x188>)
 8001536:	f012 f94d 	bl	80137d4 <osThreadNew>
 800153a:	4602      	mov	r2, r0
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <main+0x18c>)
 800153e:	601a      	str	r2, [r3, #0]
  if (audioProcessingHandle == NULL){
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <main+0x18c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <main+0x12c>
	  Error_Handler();
 8001548:	f001 fa2e 	bl	80029a8 <Error_Handler>
  }

  touchScreenHandle = osThreadNew(&TouchScreenFunction, NULL, &touchScreen_attributes);
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <main+0x190>)
 800154e:	2100      	movs	r1, #0
 8001550:	4818      	ldr	r0, [pc, #96]	; (80015b4 <main+0x194>)
 8001552:	f012 f93f 	bl	80137d4 <osThreadNew>
 8001556:	4602      	mov	r2, r0
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <main+0x198>)
 800155a:	601a      	str	r2, [r3, #0]
    if (touchScreenHandle == NULL){
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <main+0x198>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <main+0x148>
  	  Error_Handler();
 8001564:	f001 fa20 	bl	80029a8 <Error_Handler>
    }

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001568:	f012 f8fe 	bl	8013768 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800156c:	e7fe      	b.n	800156c <main+0x14c>
 800156e:	bf00      	nop
 8001570:	e0042000 	.word	0xe0042000
 8001574:	ff808080 	.word	0xff808080
 8001578:	080184e4 	.word	0x080184e4
 800157c:	080185ac 	.word	0x080185ac
 8001580:	20019aec 	.word	0x20019aec
 8001584:	080185bc 	.word	0x080185bc
 8001588:	20019b74 	.word	0x20019b74
 800158c:	0801851c 	.word	0x0801851c
 8001590:	08002971 	.word	0x08002971
 8001594:	2001991c 	.word	0x2001991c
 8001598:	08018540 	.word	0x08018540
 800159c:	080010e5 	.word	0x080010e5
 80015a0:	2001b71c 	.word	0x2001b71c
 80015a4:	08018564 	.word	0x08018564
 80015a8:	080011f9 	.word	0x080011f9
 80015ac:	20019af0 	.word	0x20019af0
 80015b0:	08018588 	.word	0x08018588
 80015b4:	08001369 	.word	0x08001369
 80015b8:	20019cb8 	.word	0x20019cb8

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0b4      	sub	sp, #208	; 0xd0
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f016 f8ed 	bl	80177aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	2284      	movs	r2, #132	; 0x84
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f016 f8de 	bl	80177aa <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015ee:	f00a fde9 	bl	800c1c4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b4e      	ldr	r3, [pc, #312]	; (800172c <SystemClock_Config+0x170>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a4d      	ldr	r2, [pc, #308]	; (800172c <SystemClock_Config+0x170>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b4b      	ldr	r3, [pc, #300]	; (800172c <SystemClock_Config+0x170>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800160a:	4b49      	ldr	r3, [pc, #292]	; (8001730 <SystemClock_Config+0x174>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <SystemClock_Config+0x174>)
 8001610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b46      	ldr	r3, [pc, #280]	; (8001730 <SystemClock_Config+0x174>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001622:	2309      	movs	r3, #9
 8001624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001644:	2319      	movs	r3, #25
 8001646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800164a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800164e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001658:	2309      	movs	r3, #9
 800165a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001662:	4618      	mov	r0, r3
 8001664:	f00a fed0 	bl	800c408 <HAL_RCC_OscConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800166e:	f001 f99b 	bl	80029a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001672:	f00a fdb7 	bl	800c1e4 <HAL_PWREx_EnableOverDrive>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800167c:	f001 f994 	bl	80029a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001680:	230f      	movs	r3, #15
 8001682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2302      	movs	r3, #2
 8001688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001692:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016a6:	2106      	movs	r1, #6
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00b f951 	bl	800c950 <HAL_RCC_ClockConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80016b4:	f001 f978 	bl	80029a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <SystemClock_Config+0x178>)
 80016ba:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80016bc:	2364      	movs	r3, #100	; 0x64
 80016be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80016cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80016d2:	2305      	movs	r3, #5
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80016da:	2303      	movs	r3, #3
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80016e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80016f2:	2300      	movs	r3, #0
 80016f4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016f6:	2300      	movs	r3, #0
 80016f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80016fa:	2300      	movs	r3, #0
 80016fc:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016fe:	2300      	movs	r3, #0
 8001700:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001702:	2300      	movs	r3, #0
 8001704:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800170a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	4618      	mov	r0, r3
 8001714:	f00b fb20 	bl	800cd58 <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x166>
  {
    Error_Handler();
 800171e:	f001 f943 	bl	80029a8 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	37d0      	adds	r7, #208	; 0xd0
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000
 8001734:	01314868 	.word	0x01314868

08001738 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800173e:	463b      	mov	r3, r7
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <MX_ADC3_Init+0x98>)
 800174c:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <MX_ADC3_Init+0x9c>)
 800174e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MX_ADC3_Init+0x98>)
 8001752:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001756:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_ADC3_Init+0x98>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_ADC3_Init+0x98>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_ADC3_Init+0x98>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <MX_ADC3_Init+0x98>)
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <MX_ADC3_Init+0x98>)
 8001774:	2200      	movs	r2, #0
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <MX_ADC3_Init+0x98>)
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <MX_ADC3_Init+0xa0>)
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_ADC3_Init+0x98>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_ADC3_Init+0x98>)
 8001786:	2201      	movs	r2, #1
 8001788:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_ADC3_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_ADC3_Init+0x98>)
 8001794:	2201      	movs	r2, #1
 8001796:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <MX_ADC3_Init+0x98>)
 800179a:	f005 ffd5 	bl	8007748 <HAL_ADC_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80017a4:	f001 f900 	bl	80029a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017a8:	2304      	movs	r3, #4
 80017aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017b4:	463b      	mov	r3, r7
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_ADC3_Init+0x98>)
 80017ba:	f006 f809 	bl	80077d0 <HAL_ADC_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80017c4:	f001 f8f0 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20019c20 	.word	0x20019c20
 80017d4:	40012200 	.word	0x40012200
 80017d8:	0f000001 	.word	0x0f000001

080017dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <MX_CRC_Init+0x3c>)
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <MX_CRC_Init+0x40>)
 80017e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_CRC_Init+0x3c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <MX_CRC_Init+0x3c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_CRC_Init+0x3c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <MX_CRC_Init+0x3c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_CRC_Init+0x3c>)
 8001800:	2201      	movs	r2, #1
 8001802:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_CRC_Init+0x3c>)
 8001806:	f006 fb09 	bl	8007e1c <HAL_CRC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001810:	f001 f8ca 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20019ac8 	.word	0x20019ac8
 800181c:	40023000 	.word	0x40023000

08001820 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_DCMI_Init+0x60>)
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <MX_DCMI_Init+0x64>)
 8001828:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_DCMI_Init+0x60>)
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_DCMI_Init+0x60>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_DCMI_Init+0x60>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_DCMI_Init+0x60>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_DCMI_Init+0x60>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <MX_DCMI_Init+0x60>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_DCMI_Init+0x60>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <MX_DCMI_Init+0x60>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_DCMI_Init+0x60>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <MX_DCMI_Init+0x60>)
 8001862:	2200      	movs	r2, #0
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_DCMI_Init+0x60>)
 8001868:	2200      	movs	r2, #0
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_DCMI_Init+0x60>)
 800186e:	f006 fbbf 	bl	8007ff0 <HAL_DCMI_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001878:	f001 f896 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20019c68 	.word	0x20019c68
 8001884:	50050000 	.word	0x50050000

08001888 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 800188e:	4a16      	ldr	r2, [pc, #88]	; (80018e8 <MX_DMA2D_Init+0x60>)
 8001890:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 80018be:	f006 ffe5 	bl	800888c <HAL_DMA2D_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80018c8:	f001 f86e 	bl	80029a8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80018cc:	2101      	movs	r1, #1
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_DMA2D_Init+0x5c>)
 80018d0:	f007 fa4a 	bl	8008d68 <HAL_DMA2D_ConfigLayer>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80018da:	f001 f865 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2001b720 	.word	0x2001b720
 80018e8:	4002b000 	.word	0x4002b000

080018ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_Init 0 */

  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */
return;
 80018f0:	bf00      	nop
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_I2C1_Init+0x74>)
 8001902:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <MX_I2C1_Init+0x78>)
 8001904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <MX_I2C1_Init+0x74>)
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <MX_I2C1_Init+0x7c>)
 800190a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_I2C1_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <MX_I2C1_Init+0x74>)
 8001914:	2201      	movs	r2, #1
 8001916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <MX_I2C1_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_I2C1_Init+0x74>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <MX_I2C1_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_I2C1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_I2C1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001936:	480e      	ldr	r0, [pc, #56]	; (8001970 <MX_I2C1_Init+0x74>)
 8001938:	f009 fb1c 	bl	800af74 <HAL_I2C_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001942:	f001 f831 	bl	80029a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001946:	2100      	movs	r1, #0
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <MX_I2C1_Init+0x74>)
 800194a:	f00a f82b 	bl	800b9a4 <HAL_I2CEx_ConfigAnalogFilter>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001954:	f001 f828 	bl	80029a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001958:	2100      	movs	r1, #0
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_I2C1_Init+0x74>)
 800195c:	f00a f86d 	bl	800ba3a <HAL_I2CEx_ConfigDigitalFilter>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001966:	f001 f81f 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20019a7c 	.word	0x20019a7c
 8001974:	40005400 	.word	0x40005400
 8001978:	00c0eaff 	.word	0x00c0eaff

0800197c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <MX_I2C3_Init+0x74>)
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <MX_I2C3_Init+0x78>)
 8001984:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <MX_I2C3_Init+0x74>)
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <MX_I2C3_Init+0x7c>)
 800198a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <MX_I2C3_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <MX_I2C3_Init+0x74>)
 8001994:	2201      	movs	r2, #1
 8001996:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <MX_I2C3_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_I2C3_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_I2C3_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_I2C3_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_I2C3_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019b6:	480e      	ldr	r0, [pc, #56]	; (80019f0 <MX_I2C3_Init+0x74>)
 80019b8:	f009 fadc 	bl	800af74 <HAL_I2C_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80019c2:	f000 fff1 	bl	80029a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019c6:	2100      	movs	r1, #0
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <MX_I2C3_Init+0x74>)
 80019ca:	f009 ffeb 	bl	800b9a4 <HAL_I2CEx_ConfigAnalogFilter>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80019d4:	f000 ffe8 	bl	80029a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80019d8:	2100      	movs	r1, #0
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_I2C3_Init+0x74>)
 80019dc:	f00a f82d 	bl	800ba3a <HAL_I2CEx_ConfigDigitalFilter>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80019e6:	f000 ffdf 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20019920 	.word	0x20019920
 80019f4:	40005c00 	.word	0x40005c00
 80019f8:	00c0eaff 	.word	0x00c0eaff

080019fc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b09a      	sub	sp, #104	; 0x68
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a06:	2234      	movs	r2, #52	; 0x34
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f015 fecd 	bl	80177aa <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	2234      	movs	r2, #52	; 0x34
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f015 fec7 	bl	80177aa <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a1e:	4a51      	ldr	r2, [pc, #324]	; (8001b64 <MX_LTDC_Init+0x168>)
 8001a20:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a22:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a3c:	2228      	movs	r2, #40	; 0x28
 8001a3e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001a40:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a42:	2209      	movs	r2, #9
 8001a44:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001a46:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a48:	2235      	movs	r2, #53	; 0x35
 8001a4a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001a4c:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a4e:	220b      	movs	r2, #11
 8001a50:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a54:	f240 2215 	movw	r2, #533	; 0x215
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a5c:	f240 121b 	movw	r2, #283	; 0x11b
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a64:	f240 2235 	movw	r2, #565	; 0x235
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a6c:	f240 121d 	movw	r2, #285	; 0x11d
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a8a:	4835      	ldr	r0, [pc, #212]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001a8c:	f00a f822 	bl	800bad4 <HAL_LTDC_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001a96:	f000 ff87 	bl	80029a8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8001a9e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8001aa8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001aac:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001ab2:	23ff      	movs	r3, #255	; 0xff
 8001ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001aba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001abe:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001ac4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8001aca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001ace:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001ad0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ad4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001ae8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aec:	2200      	movs	r2, #0
 8001aee:	4619      	mov	r1, r3
 8001af0:	481b      	ldr	r0, [pc, #108]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001af2:	f00a f981 	bl	800bdf8 <HAL_LTDC_ConfigLayer>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001afc:	f000 ff54 	bl	80029a8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b1e:	2305      	movs	r3, #5
 8001b20:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	2201      	movs	r2, #1
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_LTDC_Init+0x164>)
 8001b48:	f00a f956 	bl	800bdf8 <HAL_LTDC_ConfigLayer>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8001b52:	f000 ff29 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3768      	adds	r7, #104	; 0x68
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20019b78 	.word	0x20019b78
 8001b64:	40016800 	.word	0x40016800

08001b68 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001b6e:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <MX_QUADSPI_Init+0x54>)
 8001b70:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001b74:	22ff      	movs	r2, #255	; 0xff
 8001b76:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_QUADSPI_Init+0x50>)
 8001ba4:	f00a fb6e 	bl	800c284 <HAL_QSPI_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001bae:	f000 fefb 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2001b85c 	.word	0x2001b85c
 8001bbc:	a0001000 	.word	0xa0001000

08001bc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b092      	sub	sp, #72	; 0x48
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
 8001bd6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001bdc:	463b      	mov	r3, r7
 8001bde:	222c      	movs	r2, #44	; 0x2c
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f015 fde1 	bl	80177aa <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001be8:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <MX_RTC_Init+0x144>)
 8001bea:	4a47      	ldr	r2, [pc, #284]	; (8001d08 <MX_RTC_Init+0x148>)
 8001bec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bee:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <MX_RTC_Init+0x144>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bf4:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <MX_RTC_Init+0x144>)
 8001bf6:	227f      	movs	r2, #127	; 0x7f
 8001bf8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bfa:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <MX_RTC_Init+0x144>)
 8001bfc:	22ff      	movs	r2, #255	; 0xff
 8001bfe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c00:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <MX_RTC_Init+0x144>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c06:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <MX_RTC_Init+0x144>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <MX_RTC_Init+0x144>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c12:	483c      	ldr	r0, [pc, #240]	; (8001d04 <MX_RTC_Init+0x144>)
 8001c14:	f00b fece 	bl	800d9b4 <HAL_RTC_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001c1e:	f000 fec3 	bl	80029a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c40:	2201      	movs	r2, #1
 8001c42:	4619      	mov	r1, r3
 8001c44:	482f      	ldr	r0, [pc, #188]	; (8001d04 <MX_RTC_Init+0x144>)
 8001c46:	f00b ff31 	bl	800daac <HAL_RTC_SetTime>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c50:	f000 feaa 	bl	80029a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c70:	2201      	movs	r2, #1
 8001c72:	4619      	mov	r1, r3
 8001c74:	4823      	ldr	r0, [pc, #140]	; (8001d04 <MX_RTC_Init+0x144>)
 8001c76:	f00b ffd7 	bl	800dc28 <HAL_RTC_SetDate>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001c80:	f000 fe92 	bl	80029a8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <MX_RTC_Init+0x144>)
 8001cbc:	f00c f85c 	bl	800dd78 <HAL_RTC_SetAlarm>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001cc6:	f000 fe6f 	bl	80029a8 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480b      	ldr	r0, [pc, #44]	; (8001d04 <MX_RTC_Init+0x144>)
 8001cd8:	f00c f84e 	bl	800dd78 <HAL_RTC_SetAlarm>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001ce2:	f000 fe61 	bl	80029a8 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <MX_RTC_Init+0x144>)
 8001cec:	f00c f9ce 	bl	800e08c <HAL_RTCEx_SetTimeStamp>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001cf6:	f000 fe57 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	3748      	adds	r7, #72	; 0x48
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20019d3c 	.word	0x20019d3c
 8001d08:	40002800 	.word	0x40002800

08001d0c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001d10:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d12:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <MX_SAI2_Init+0x140>)
 8001d14:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d16:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d1c:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001d22:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d28:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d34:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001d40:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001d4c:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d4e:	4a40      	ldr	r2, [pc, #256]	; (8001e50 <MX_SAI2_Init+0x144>)
 8001d50:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001d64:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001d70:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001d7c:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001d94:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001da0:	4829      	ldr	r0, [pc, #164]	; (8001e48 <MX_SAI2_Init+0x13c>)
 8001da2:	f00c f9c9 	bl	800e138 <HAL_SAI_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001dac:	f000 fdfc 	bl	80029a8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001db2:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <MX_SAI2_Init+0x14c>)
 8001db4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001db6:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001dc4:	2240      	movs	r2, #64	; 0x40
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e00:	2208      	movs	r2, #8
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001e34:	4807      	ldr	r0, [pc, #28]	; (8001e54 <MX_SAI2_Init+0x148>)
 8001e36:	f00c f97f 	bl	800e138 <HAL_SAI_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001e40:	f000 fdb2 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200199f8 	.word	0x200199f8
 8001e4c:	40015c04 	.word	0x40015c04
 8001e50:	0002ee00 	.word	0x0002ee00
 8001e54:	20019898 	.word	0x20019898
 8001e58:	40015c24 	.word	0x40015c24

08001e5c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e62:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e66:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MX_SPDIFRX_Init+0x5c>)
 8001ea6:	f00c fce7 	bl	800e878 <HAL_SPDIFRX_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001eb0:	f000 fd7a 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200199ac 	.word	0x200199ac

08001ebc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b09a      	sub	sp, #104	; 0x68
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001edc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	615a      	str	r2, [r3, #20]
 8001eee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	222c      	movs	r2, #44	; 0x2c
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f015 fc57 	bl	80177aa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001efc:	4b43      	ldr	r3, [pc, #268]	; (800200c <MX_TIM1_Init+0x150>)
 8001efe:	4a44      	ldr	r2, [pc, #272]	; (8002010 <MX_TIM1_Init+0x154>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f02:	4b42      	ldr	r3, [pc, #264]	; (800200c <MX_TIM1_Init+0x150>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b40      	ldr	r3, [pc, #256]	; (800200c <MX_TIM1_Init+0x150>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f0e:	4b3f      	ldr	r3, [pc, #252]	; (800200c <MX_TIM1_Init+0x150>)
 8001f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <MX_TIM1_Init+0x150>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <MX_TIM1_Init+0x150>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <MX_TIM1_Init+0x150>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f28:	4838      	ldr	r0, [pc, #224]	; (800200c <MX_TIM1_Init+0x150>)
 8001f2a:	f00c fd01 	bl	800e930 <HAL_TIM_Base_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001f34:	f000 fd38 	bl	80029a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f42:	4619      	mov	r1, r3
 8001f44:	4831      	ldr	r0, [pc, #196]	; (800200c <MX_TIM1_Init+0x150>)
 8001f46:	f00c ffab 	bl	800eea0 <HAL_TIM_ConfigClockSource>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f50:	f000 fd2a 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f54:	482d      	ldr	r0, [pc, #180]	; (800200c <MX_TIM1_Init+0x150>)
 8001f56:	f00c fd41 	bl	800e9dc <HAL_TIM_PWM_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001f60:	f000 fd22 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f74:	4619      	mov	r1, r3
 8001f76:	4825      	ldr	r0, [pc, #148]	; (800200c <MX_TIM1_Init+0x150>)
 8001f78:	f00d fc0c 	bl	800f794 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001f82:	f000 fd11 	bl	80029a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f86:	2360      	movs	r3, #96	; 0x60
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f92:	2300      	movs	r3, #0
 8001f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4818      	ldr	r0, [pc, #96]	; (800200c <MX_TIM1_Init+0x150>)
 8001fac:	f00c fe60 	bl	800ec70 <HAL_TIM_PWM_ConfigChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001fb6:	f000 fcf7 	bl	80029a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4807      	ldr	r0, [pc, #28]	; (800200c <MX_TIM1_Init+0x150>)
 8001ff0:	f00d fc5e 	bl	800f8b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001ffa:	f000 fcd5 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ffe:	4803      	ldr	r0, [pc, #12]	; (800200c <MX_TIM1_Init+0x150>)
 8002000:	f001 f952 	bl	80032a8 <HAL_TIM_MspPostInit>

}
 8002004:	bf00      	nop
 8002006:	3768      	adds	r7, #104	; 0x68
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20019d5c 	.word	0x20019d5c
 8002010:	40010000 	.word	0x40010000

08002014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	; 0x38
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002034:	463b      	mov	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	615a      	str	r2, [r3, #20]
 8002044:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <MX_TIM2_Init+0xe8>)
 8002048:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800204c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800204e:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <MX_TIM2_Init+0xe8>)
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <MX_TIM2_Init+0xe8>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <MX_TIM2_Init+0xe8>)
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <MX_TIM2_Init+0xe8>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <MX_TIM2_Init+0xe8>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800206e:	4823      	ldr	r0, [pc, #140]	; (80020fc <MX_TIM2_Init+0xe8>)
 8002070:	f00c fc5e 	bl	800e930 <HAL_TIM_Base_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800207a:	f000 fc95 	bl	80029a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002088:	4619      	mov	r1, r3
 800208a:	481c      	ldr	r0, [pc, #112]	; (80020fc <MX_TIM2_Init+0xe8>)
 800208c:	f00c ff08 	bl	800eea0 <HAL_TIM_ConfigClockSource>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002096:	f000 fc87 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800209a:	4818      	ldr	r0, [pc, #96]	; (80020fc <MX_TIM2_Init+0xe8>)
 800209c:	f00c fc9e 	bl	800e9dc <HAL_TIM_PWM_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80020a6:	f000 fc7f 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	4810      	ldr	r0, [pc, #64]	; (80020fc <MX_TIM2_Init+0xe8>)
 80020ba:	f00d fb6b 	bl	800f794 <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80020c4:	f000 fc70 	bl	80029a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c8:	2360      	movs	r3, #96	; 0x60
 80020ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <MX_TIM2_Init+0xe8>)
 80020e0:	f00c fdc6 	bl	800ec70 <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80020ea:	f000 fc5d 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <MX_TIM2_Init+0xe8>)
 80020f0:	f001 f8da 	bl	80032a8 <HAL_TIM_MspPostInit>

}
 80020f4:	bf00      	nop
 80020f6:	3738      	adds	r7, #56	; 0x38
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	2001b760 	.word	0x2001b760

08002100 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002120:	463b      	mov	r3, r7
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	615a      	str	r2, [r3, #20]
 8002130:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <MX_TIM3_Init+0xe8>)
 8002134:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <MX_TIM3_Init+0xec>)
 8002136:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <MX_TIM3_Init+0xe8>)
 800213a:	2200      	movs	r2, #0
 800213c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <MX_TIM3_Init+0xe8>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <MX_TIM3_Init+0xe8>)
 8002146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <MX_TIM3_Init+0xe8>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <MX_TIM3_Init+0xe8>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002158:	4823      	ldr	r0, [pc, #140]	; (80021e8 <MX_TIM3_Init+0xe8>)
 800215a:	f00c fbe9 	bl	800e930 <HAL_TIM_Base_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002164:	f000 fc20 	bl	80029a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800216e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002172:	4619      	mov	r1, r3
 8002174:	481c      	ldr	r0, [pc, #112]	; (80021e8 <MX_TIM3_Init+0xe8>)
 8002176:	f00c fe93 	bl	800eea0 <HAL_TIM_ConfigClockSource>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002180:	f000 fc12 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <MX_TIM3_Init+0xe8>)
 8002186:	f00c fc29 	bl	800e9dc <HAL_TIM_PWM_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002190:	f000 fc0a 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	4811      	ldr	r0, [pc, #68]	; (80021e8 <MX_TIM3_Init+0xe8>)
 80021a4:	f00d faf6 	bl	800f794 <HAL_TIMEx_MasterConfigSynchronization>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021ae:	f000 fbfb 	bl	80029a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b2:	2360      	movs	r3, #96	; 0x60
 80021b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c2:	463b      	mov	r3, r7
 80021c4:	2200      	movs	r2, #0
 80021c6:	4619      	mov	r1, r3
 80021c8:	4807      	ldr	r0, [pc, #28]	; (80021e8 <MX_TIM3_Init+0xe8>)
 80021ca:	f00c fd51 	bl	800ec70 <HAL_TIM_PWM_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80021d4:	f000 fbe8 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <MX_TIM3_Init+0xe8>)
 80021da:	f001 f865 	bl	80032a8 <HAL_TIM_MspPostInit>

}
 80021de:	bf00      	nop
 80021e0:	3738      	adds	r7, #56	; 0x38
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20019b34 	.word	0x20019b34
 80021ec:	40000400 	.word	0x40000400

080021f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002210:	463b      	mov	r3, r7
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
 800221e:	615a      	str	r2, [r3, #20]
 8002220:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <MX_TIM5_Init+0xe8>)
 8002224:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <MX_TIM5_Init+0xec>)
 8002226:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <MX_TIM5_Init+0xe8>)
 800222a:	2200      	movs	r2, #0
 800222c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <MX_TIM5_Init+0xe8>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <MX_TIM5_Init+0xe8>)
 8002236:	f04f 32ff 	mov.w	r2, #4294967295
 800223a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <MX_TIM5_Init+0xe8>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <MX_TIM5_Init+0xe8>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002248:	4823      	ldr	r0, [pc, #140]	; (80022d8 <MX_TIM5_Init+0xe8>)
 800224a:	f00c fb71 	bl	800e930 <HAL_TIM_Base_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002254:	f000 fba8 	bl	80029a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800225e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002262:	4619      	mov	r1, r3
 8002264:	481c      	ldr	r0, [pc, #112]	; (80022d8 <MX_TIM5_Init+0xe8>)
 8002266:	f00c fe1b 	bl	800eea0 <HAL_TIM_ConfigClockSource>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002270:	f000 fb9a 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002274:	4818      	ldr	r0, [pc, #96]	; (80022d8 <MX_TIM5_Init+0xe8>)
 8002276:	f00c fbb1 	bl	800e9dc <HAL_TIM_PWM_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002280:	f000 fb92 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	4811      	ldr	r0, [pc, #68]	; (80022d8 <MX_TIM5_Init+0xe8>)
 8002294:	f00d fa7e 	bl	800f794 <HAL_TIMEx_MasterConfigSynchronization>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800229e:	f000 fb83 	bl	80029a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a2:	2360      	movs	r3, #96	; 0x60
 80022a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022b2:	463b      	mov	r3, r7
 80022b4:	220c      	movs	r2, #12
 80022b6:	4619      	mov	r1, r3
 80022b8:	4807      	ldr	r0, [pc, #28]	; (80022d8 <MX_TIM5_Init+0xe8>)
 80022ba:	f00c fcd9 	bl	800ec70 <HAL_TIM_PWM_ConfigChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80022c4:	f000 fb70 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022c8:	4803      	ldr	r0, [pc, #12]	; (80022d8 <MX_TIM5_Init+0xe8>)
 80022ca:	f000 ffed 	bl	80032a8 <HAL_TIM_MspPostInit>

}
 80022ce:	bf00      	nop
 80022d0:	3738      	adds	r7, #56	; 0x38
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20019af4 	.word	0x20019af4
 80022dc:	40000c00 	.word	0x40000c00

080022e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e6:	f107 0310 	add.w	r3, r7, #16
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <MX_TIM8_Init+0xa0>)
 8002300:	4a20      	ldr	r2, [pc, #128]	; (8002384 <MX_TIM8_Init+0xa4>)
 8002302:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <MX_TIM8_Init+0xa0>)
 8002306:	2200      	movs	r2, #0
 8002308:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <MX_TIM8_Init+0xa0>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <MX_TIM8_Init+0xa0>)
 8002312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002316:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <MX_TIM8_Init+0xa0>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <MX_TIM8_Init+0xa0>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <MX_TIM8_Init+0xa0>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800232a:	4815      	ldr	r0, [pc, #84]	; (8002380 <MX_TIM8_Init+0xa0>)
 800232c:	f00c fb00 	bl	800e930 <HAL_TIM_Base_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002336:	f000 fb37 	bl	80029a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	4619      	mov	r1, r3
 8002346:	480e      	ldr	r0, [pc, #56]	; (8002380 <MX_TIM8_Init+0xa0>)
 8002348:	f00c fdaa 	bl	800eea0 <HAL_TIM_ConfigClockSource>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002352:	f000 fb29 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4806      	ldr	r0, [pc, #24]	; (8002380 <MX_TIM8_Init+0xa0>)
 8002368:	f00d fa14 	bl	800f794 <HAL_TIMEx_MasterConfigSynchronization>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002372:	f000 fb19 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2001996c 	.word	0x2001996c
 8002384:	40010400 	.word	0x40010400

08002388 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
 800239c:	615a      	str	r2, [r3, #20]
 800239e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_TIM12_Init+0x84>)
 80023a2:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <MX_TIM12_Init+0x88>)
 80023a4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <MX_TIM12_Init+0x84>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <MX_TIM12_Init+0x84>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <MX_TIM12_Init+0x84>)
 80023b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <MX_TIM12_Init+0x84>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <MX_TIM12_Init+0x84>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80023c6:	4811      	ldr	r0, [pc, #68]	; (800240c <MX_TIM12_Init+0x84>)
 80023c8:	f00c fb08 	bl	800e9dc <HAL_TIM_PWM_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80023d2:	f000 fae9 	bl	80029a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d6:	2360      	movs	r3, #96	; 0x60
 80023d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	4619      	mov	r1, r3
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <MX_TIM12_Init+0x84>)
 80023ee:	f00c fc3f 	bl	800ec70 <HAL_TIM_PWM_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80023f8:	f000 fad6 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <MX_TIM12_Init+0x84>)
 80023fe:	f000 ff53 	bl	80032a8 <HAL_TIM_MspPostInit>

}
 8002402:	bf00      	nop
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2001b7a0 	.word	0x2001b7a0
 8002410:	40001800 	.word	0x40001800

08002414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_USART1_UART_Init+0x58>)
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <MX_USART1_UART_Init+0x5c>)
 800241c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <MX_USART1_UART_Init+0x58>)
 8002420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_USART1_UART_Init+0x58>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MX_USART1_UART_Init+0x58>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_USART1_UART_Init+0x58>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_USART1_UART_Init+0x58>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <MX_USART1_UART_Init+0x58>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_USART1_UART_Init+0x58>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <MX_USART1_UART_Init+0x58>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_USART1_UART_Init+0x58>)
 8002452:	2200      	movs	r2, #0
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_USART1_UART_Init+0x58>)
 8002458:	f00d fac6 	bl	800f9e8 <HAL_UART_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002462:	f000 faa1 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20019cbc 	.word	0x20019cbc
 8002470:	40011000 	.word	0x40011000

08002474 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MX_USART6_UART_Init+0x58>)
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <MX_USART6_UART_Init+0x5c>)
 800247c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <MX_USART6_UART_Init+0x58>)
 8002480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002484:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_USART6_UART_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_USART6_UART_Init+0x58>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_USART6_UART_Init+0x58>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_USART6_UART_Init+0x58>)
 800249a:	220c      	movs	r2, #12
 800249c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_USART6_UART_Init+0x58>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_USART6_UART_Init+0x58>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_USART6_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_USART6_UART_Init+0x58>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_USART6_UART_Init+0x58>)
 80024b8:	f00d fa96 	bl	800f9e8 <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80024c2:	f000 fa71 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2001b69c 	.word	0x2001b69c
 80024d0:	40011400 	.word	0x40011400

080024d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
 80024e8:	615a      	str	r2, [r3, #20]
 80024ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <MX_FMC_Init+0x98>)
 80024ee:	4a20      	ldr	r2, [pc, #128]	; (8002570 <MX_FMC_Init+0x9c>)
 80024f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <MX_FMC_Init+0x98>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <MX_FMC_Init+0x98>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <MX_FMC_Init+0x98>)
 8002500:	2204      	movs	r2, #4
 8002502:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <MX_FMC_Init+0x98>)
 8002506:	2210      	movs	r2, #16
 8002508:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <MX_FMC_Init+0x98>)
 800250c:	2240      	movs	r2, #64	; 0x40
 800250e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <MX_FMC_Init+0x98>)
 8002512:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002516:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_FMC_Init+0x98>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <MX_FMC_Init+0x98>)
 8002520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002524:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_FMC_Init+0x98>)
 8002528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_FMC_Init+0x98>)
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002534:	2302      	movs	r3, #2
 8002536:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002538:	2307      	movs	r3, #7
 800253a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800253c:	2304      	movs	r3, #4
 800253e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002540:	2307      	movs	r3, #7
 8002542:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002544:	2303      	movs	r3, #3
 8002546:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002548:	2302      	movs	r3, #2
 800254a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800254c:	2302      	movs	r3, #2
 800254e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	4619      	mov	r1, r3
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_FMC_Init+0x98>)
 8002556:	f00c f910 	bl	800e77a <HAL_SDRAM_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002560:	f000 fa22 	bl	80029a8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002564:	bf00      	nop
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	2001b7e0 	.word	0x2001b7e0
 8002570:	a0000140 	.word	0xa0000140

08002574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b090      	sub	sp, #64	; 0x40
 8002578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800258a:	4baf      	ldr	r3, [pc, #700]	; (8002848 <MX_GPIO_Init+0x2d4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4aae      	ldr	r2, [pc, #696]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4bac      	ldr	r3, [pc, #688]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025a2:	4ba9      	ldr	r3, [pc, #676]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4aa8      	ldr	r2, [pc, #672]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4ba6      	ldr	r3, [pc, #664]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	4ba3      	ldr	r3, [pc, #652]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4aa2      	ldr	r2, [pc, #648]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4ba0      	ldr	r3, [pc, #640]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d2:	4b9d      	ldr	r3, [pc, #628]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a9c      	ldr	r2, [pc, #624]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b9a      	ldr	r3, [pc, #616]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ea:	4b97      	ldr	r3, [pc, #604]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a96      	ldr	r2, [pc, #600]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b94      	ldr	r3, [pc, #592]	; (8002848 <MX_GPIO_Init+0x2d4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b91      	ldr	r3, [pc, #580]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a90      	ldr	r2, [pc, #576]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b8e      	ldr	r3, [pc, #568]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800261a:	4b8b      	ldr	r3, [pc, #556]	; (8002848 <MX_GPIO_Init+0x2d4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a8a      	ldr	r2, [pc, #552]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002632:	4b85      	ldr	r3, [pc, #532]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a84      	ldr	r2, [pc, #528]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b82      	ldr	r3, [pc, #520]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800264a:	4b7f      	ldr	r3, [pc, #508]	; (8002848 <MX_GPIO_Init+0x2d4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a7e      	ldr	r2, [pc, #504]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b7c      	ldr	r3, [pc, #496]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002662:	4b79      	ldr	r3, [pc, #484]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a78      	ldr	r2, [pc, #480]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002668:	f043 0320 	orr.w	r3, r3, #32
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b76      	ldr	r3, [pc, #472]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267a:	4b73      	ldr	r3, [pc, #460]	; (8002848 <MX_GPIO_Init+0x2d4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a72      	ldr	r2, [pc, #456]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b70      	ldr	r3, [pc, #448]	; (8002848 <MX_GPIO_Init+0x2d4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002692:	2201      	movs	r2, #1
 8002694:	2120      	movs	r1, #32
 8002696:	486d      	ldr	r0, [pc, #436]	; (800284c <MX_GPIO_Init+0x2d8>)
 8002698:	f006 ff48 	bl	800952c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 800269c:	2200      	movs	r2, #0
 800269e:	210e      	movs	r1, #14
 80026a0:	486b      	ldr	r0, [pc, #428]	; (8002850 <MX_GPIO_Init+0x2dc>)
 80026a2:	f006 ff43 	bl	800952c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80026a6:	2201      	movs	r2, #1
 80026a8:	2108      	movs	r1, #8
 80026aa:	486a      	ldr	r0, [pc, #424]	; (8002854 <MX_GPIO_Init+0x2e0>)
 80026ac:	f006 ff3e 	bl	800952c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026b6:	4866      	ldr	r0, [pc, #408]	; (8002850 <MX_GPIO_Init+0x2dc>)
 80026b8:	f006 ff38 	bl	800952c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80026bc:	2200      	movs	r2, #0
 80026be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026c2:	4865      	ldr	r0, [pc, #404]	; (8002858 <MX_GPIO_Init+0x2e4>)
 80026c4:	f006 ff32 	bl	800952c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80026c8:	2200      	movs	r2, #0
 80026ca:	21c8      	movs	r1, #200	; 0xc8
 80026cc:	4863      	ldr	r0, [pc, #396]	; (800285c <MX_GPIO_Init+0x2e8>)
 80026ce:	f006 ff2d 	bl	800952c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80026d2:	2308      	movs	r3, #8
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d6:	2300      	movs	r3, #0
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e2:	4619      	mov	r1, r3
 80026e4:	485e      	ldr	r0, [pc, #376]	; (8002860 <MX_GPIO_Init+0x2ec>)
 80026e6:	f006 fc6d 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80026ea:	f643 4323 	movw	r3, #15395	; 0x3c23
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026fc:	230a      	movs	r3, #10
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002704:	4619      	mov	r1, r3
 8002706:	4857      	ldr	r0, [pc, #348]	; (8002864 <MX_GPIO_Init+0x2f0>)
 8002708:	f006 fc5c 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800270c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800271e:	230c      	movs	r3, #12
 8002720:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002726:	4619      	mov	r1, r3
 8002728:	484f      	ldr	r0, [pc, #316]	; (8002868 <MX_GPIO_Init+0x2f4>)
 800272a:	f006 fc4b 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800272e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002734:	2300      	movs	r3, #0
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800273c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002740:	4619      	mov	r1, r3
 8002742:	484a      	ldr	r0, [pc, #296]	; (800286c <MX_GPIO_Init+0x2f8>)
 8002744:	f006 fc3e 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800274c:	4b48      	ldr	r3, [pc, #288]	; (8002870 <MX_GPIO_Init+0x2fc>)
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002758:	4619      	mov	r1, r3
 800275a:	483c      	ldr	r0, [pc, #240]	; (800284c <MX_GPIO_Init+0x2d8>)
 800275c:	f006 fc32 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002760:	2320      	movs	r3, #32
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002764:	2301      	movs	r3, #1
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002774:	4619      	mov	r1, r3
 8002776:	4835      	ldr	r0, [pc, #212]	; (800284c <MX_GPIO_Init+0x2d8>)
 8002778:	f006 fc24 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 800277c:	f241 030e 	movw	r3, #4110	; 0x100e
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	2301      	movs	r3, #1
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800278e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002792:	4619      	mov	r1, r3
 8002794:	482e      	ldr	r0, [pc, #184]	; (8002850 <MX_GPIO_Init+0x2dc>)
 8002796:	f006 fc15 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800279a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a0:	2300      	movs	r3, #0
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80027a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ac:	4619      	mov	r1, r3
 80027ae:	482e      	ldr	r0, [pc, #184]	; (8002868 <MX_GPIO_Init+0x2f4>)
 80027b0:	f006 fc08 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80027b4:	2308      	movs	r3, #8
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b8:	2301      	movs	r3, #1
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80027c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c8:	4619      	mov	r1, r3
 80027ca:	4822      	ldr	r0, [pc, #136]	; (8002854 <MX_GPIO_Init+0x2e0>)
 80027cc:	f006 fbfa 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80027d0:	2310      	movs	r3, #16
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80027dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e0:	4619      	mov	r1, r3
 80027e2:	481a      	ldr	r0, [pc, #104]	; (800284c <MX_GPIO_Init+0x2d8>)
 80027e4:	f006 fbee 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80027e8:	f248 0304 	movw	r3, #32772	; 0x8004
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ee:	2300      	movs	r3, #0
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027fa:	4619      	mov	r1, r3
 80027fc:	4816      	ldr	r0, [pc, #88]	; (8002858 <MX_GPIO_Init+0x2e4>)
 80027fe:	f006 fbe1 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002808:	2301      	movs	r3, #1
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002818:	4619      	mov	r1, r3
 800281a:	480f      	ldr	r0, [pc, #60]	; (8002858 <MX_GPIO_Init+0x2e4>)
 800281c:	f006 fbd2 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8002820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <MX_GPIO_Init+0x300>)
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800282e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002832:	4619      	mov	r1, r3
 8002834:	4806      	ldr	r0, [pc, #24]	; (8002850 <MX_GPIO_Init+0x2dc>)
 8002836:	f006 fbc5 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800283a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <MX_GPIO_Init+0x2fc>)
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
 8002844:	e018      	b.n	8002878 <MX_GPIO_Init+0x304>
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40022000 	.word	0x40022000
 8002854:	40022800 	.word	0x40022800
 8002858:	40021c00 	.word	0x40021c00
 800285c:	40021800 	.word	0x40021800
 8002860:	40021000 	.word	0x40021000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40022400 	.word	0x40022400
 8002870:	10120000 	.word	0x10120000
 8002874:	10110000 	.word	0x10110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800287c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002880:	4619      	mov	r1, r3
 8002882:	4835      	ldr	r0, [pc, #212]	; (8002958 <MX_GPIO_Init+0x3e4>)
 8002884:	f006 fb9e 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002888:	2310      	movs	r3, #16
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002894:	2303      	movs	r3, #3
 8002896:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002898:	230a      	movs	r3, #10
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a0:	4619      	mov	r1, r3
 80028a2:	482e      	ldr	r0, [pc, #184]	; (800295c <MX_GPIO_Init+0x3e8>)
 80028a4:	f006 fb8e 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80028a8:	23c8      	movs	r3, #200	; 0xc8
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	2301      	movs	r3, #1
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028bc:	4619      	mov	r1, r3
 80028be:	4828      	ldr	r0, [pc, #160]	; (8002960 <MX_GPIO_Init+0x3ec>)
 80028c0:	f006 fb80 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80028c4:	2305      	movs	r3, #5
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028d4:	230a      	movs	r3, #10
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028dc:	4619      	mov	r1, r3
 80028de:	4821      	ldr	r0, [pc, #132]	; (8002964 <MX_GPIO_Init+0x3f0>)
 80028e0:	f006 fb70 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80028e4:	2304      	movs	r3, #4
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e8:	2300      	movs	r3, #0
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f4:	4619      	mov	r1, r3
 80028f6:	481a      	ldr	r0, [pc, #104]	; (8002960 <MX_GPIO_Init+0x3ec>)
 80028f8:	f006 fb64 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80028fc:	2328      	movs	r3, #40	; 0x28
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800290c:	230a      	movs	r3, #10
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002914:	4619      	mov	r1, r3
 8002916:	4814      	ldr	r0, [pc, #80]	; (8002968 <MX_GPIO_Init+0x3f4>)
 8002918:	f006 fb54 	bl	8008fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800291c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800292e:	2305      	movs	r3, #5
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <MX_GPIO_Init+0x3f8>)
 800293a:	f006 fb43 	bl	8008fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2028      	movs	r0, #40	; 0x28
 8002944:	f005 fa40 	bl	8007dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002948:	2028      	movs	r0, #40	; 0x28
 800294a:	f005 fa59 	bl	8007e00 <HAL_NVIC_EnableIRQ>

}
 800294e:	bf00      	nop
 8002950:	3740      	adds	r7, #64	; 0x40
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40022000 	.word	0x40022000
 800295c:	40021c00 	.word	0x40021c00
 8002960:	40021800 	.word	0x40021800
 8002964:	40020800 	.word	0x40020800
 8002968:	40020000 	.word	0x40020000
 800296c:	40020400 	.word	0x40020400

08002970 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002978:	f014 fbdc 	bl	8017134 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800297c:	2001      	movs	r0, #1
 800297e:	f011 f803 	bl	8013988 <osDelay>
 8002982:	e7fb      	b.n	800297c <StartDefaultTask+0xc>

08002984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002996:	f004 fe95 	bl	80076c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40001000 	.word	0x40001000

080029a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1);
 80029ac:	e7fe      	b.n	80029ac <Error_Handler+0x4>
	...

080029b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_MspInit+0x4c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <HAL_MspInit+0x4c>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_MspInit+0x4c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_MspInit+0x4c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <HAL_MspInit+0x4c>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_MspInit+0x4c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	210f      	movs	r1, #15
 80029ea:	f06f 0001 	mvn.w	r0, #1
 80029ee:	f005 f9eb 	bl	8007dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800

08002a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <HAL_ADC_MspInit+0xa4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d13c      	bne.n	8002a9c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_ADC_MspInit+0xa8>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <HAL_ADC_MspInit+0xa8>)
 8002a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_ADC_MspInit+0xa8>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_ADC_MspInit+0xa8>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <HAL_ADC_MspInit+0xa8>)
 8002a40:	f043 0320 	orr.w	r3, r3, #32
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <HAL_ADC_MspInit+0xa8>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <HAL_ADC_MspInit+0xa8>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_ADC_MspInit+0xa8>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_ADC_MspInit+0xa8>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002a6a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002a6e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a70:	2303      	movs	r3, #3
 8002a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480b      	ldr	r0, [pc, #44]	; (8002aac <HAL_ADC_MspInit+0xac>)
 8002a80:	f006 faa0 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002a84:	2301      	movs	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <HAL_ADC_MspInit+0xb0>)
 8002a98:	f006 fa94 	bl	8008fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40012200 	.word	0x40012200
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40021400 	.word	0x40021400
 8002ab0:	40020000 	.word	0x40020000

08002ab4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <HAL_CRC_MspInit+0x38>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10b      	bne.n	8002ade <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_CRC_MspInit+0x3c>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_CRC_MspInit+0x3c>)
 8002acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_CRC_MspInit+0x3c>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40023000 	.word	0x40023000
 8002af0:	40023800 	.word	0x40023800

08002af4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a50      	ldr	r2, [pc, #320]	; (8002c54 <HAL_DCMI_MspInit+0x160>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	f040 809a 	bne.w	8002c4c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002b18:	4b4f      	ldr	r3, [pc, #316]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6353      	str	r3, [r2, #52]	; 0x34
 8002b24:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	623b      	str	r3, [r7, #32]
 8002b2e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b30:	4b49      	ldr	r3, [pc, #292]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	4a48      	ldr	r2, [pc, #288]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b36:	f043 0310 	orr.w	r3, r3, #16
 8002b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3c:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	6313      	str	r3, [r2, #48]	; 0x30
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b60:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4a3c      	ldr	r2, [pc, #240]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b78:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4a36      	ldr	r2, [pc, #216]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b82:	6313      	str	r3, [r2, #48]	; 0x30
 8002b84:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4a30      	ldr	r2, [pc, #192]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9c:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <HAL_DCMI_MspInit+0x164>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002ba8:	2360      	movs	r3, #96	; 0x60
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bb8:	230d      	movs	r3, #13
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4826      	ldr	r0, [pc, #152]	; (8002c5c <HAL_DCMI_MspInit+0x168>)
 8002bc4:	f006 f9fe 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002bc8:	2308      	movs	r3, #8
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bd8:	230d      	movs	r3, #13
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be0:	4619      	mov	r1, r3
 8002be2:	481f      	ldr	r0, [pc, #124]	; (8002c60 <HAL_DCMI_MspInit+0x16c>)
 8002be4:	f006 f9ee 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bfa:	230d      	movs	r3, #13
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c02:	4619      	mov	r1, r3
 8002c04:	4817      	ldr	r0, [pc, #92]	; (8002c64 <HAL_DCMI_MspInit+0x170>)
 8002c06:	f006 f9dd 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002c0a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c1c:	230d      	movs	r3, #13
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c24:	4619      	mov	r1, r3
 8002c26:	4810      	ldr	r0, [pc, #64]	; (8002c68 <HAL_DCMI_MspInit+0x174>)
 8002c28:	f006 f9cc 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002c2c:	2350      	movs	r3, #80	; 0x50
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c3c:	230d      	movs	r3, #13
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c44:	4619      	mov	r1, r3
 8002c46:	4809      	ldr	r0, [pc, #36]	; (8002c6c <HAL_DCMI_MspInit+0x178>)
 8002c48:	f006 f9bc 	bl	8008fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3738      	adds	r7, #56	; 0x38
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	50050000 	.word	0x50050000
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40021800 	.word	0x40021800
 8002c68:	40021c00 	.word	0x40021c00
 8002c6c:	40020000 	.word	0x40020000

08002c70 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_DMA2D_MspInit+0x44>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d113      	bne.n	8002caa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_DMA2D_MspInit+0x48>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <HAL_DMA2D_MspInit+0x48>)
 8002c88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_DMA2D_MspInit+0x48>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	205a      	movs	r0, #90	; 0x5a
 8002ca0:	f005 f892 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002ca4:	205a      	movs	r0, #90	; 0x5a
 8002ca6:	f005 f8ab 	bl	8007e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	4002b000 	.word	0x4002b000
 8002cb8:	40023800 	.word	0x40023800

08002cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08c      	sub	sp, #48	; 0x30
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 031c 	add.w	r3, r7, #28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2f      	ldr	r2, [pc, #188]	; (8002d98 <HAL_I2C_MspInit+0xdc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d129      	bne.n	8002d32 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a2e      	ldr	r2, [pc, #184]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cfc:	2312      	movs	r3, #18
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d00:	2301      	movs	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d08:	2304      	movs	r3, #4
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	4619      	mov	r1, r3
 8002d12:	4823      	ldr	r0, [pc, #140]	; (8002da0 <HAL_I2C_MspInit+0xe4>)
 8002d14:	f006 f956 	bl	8008fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d30:	e02d      	b.n	8002d8e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_I2C_MspInit+0xe8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d128      	bne.n	8002d8e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d46:	6313      	str	r3, [r2, #48]	; 0x30
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002d54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d5a:	2312      	movs	r3, #18
 8002d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d66:	2304      	movs	r3, #4
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	4619      	mov	r1, r3
 8002d70:	480d      	ldr	r0, [pc, #52]	; (8002da8 <HAL_I2C_MspInit+0xec>)
 8002d72:	f006 f927 	bl	8008fc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_I2C_MspInit+0xe0>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	bf00      	nop
 8002d90:	3730      	adds	r7, #48	; 0x30
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40005400 	.word	0x40005400
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40005c00 	.word	0x40005c00
 8002da8:	40021c00 	.word	0x40021c00

08002dac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <HAL_I2C_MspDeInit+0x64>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d110      	bne.n	8002de0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_I2C_MspDeInit+0x68>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <HAL_I2C_MspDeInit+0x68>)
 8002dc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dce:	4812      	ldr	r0, [pc, #72]	; (8002e18 <HAL_I2C_MspDeInit+0x6c>)
 8002dd0:	f006 faa2 	bl	8009318 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dd8:	480f      	ldr	r0, [pc, #60]	; (8002e18 <HAL_I2C_MspDeInit+0x6c>)
 8002dda:	f006 fa9d 	bl	8009318 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002dde:	e013      	b.n	8002e08 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <HAL_I2C_MspDeInit+0x70>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10e      	bne.n	8002e08 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_I2C_MspDeInit+0x68>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_I2C_MspDeInit+0x68>)
 8002df0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	4809      	ldr	r0, [pc, #36]	; (8002e20 <HAL_I2C_MspDeInit+0x74>)
 8002dfa:	f006 fa8d 	bl	8009318 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e02:	4807      	ldr	r0, [pc, #28]	; (8002e20 <HAL_I2C_MspDeInit+0x74>)
 8002e04:	f006 fa88 	bl	8009318 <HAL_GPIO_DeInit>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40005400 	.word	0x40005400
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40005c00 	.word	0x40005c00
 8002e20:	40021c00 	.word	0x40021c00

08002e24 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08e      	sub	sp, #56	; 0x38
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a55      	ldr	r2, [pc, #340]	; (8002f98 <HAL_LTDC_MspInit+0x174>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	f040 80a3 	bne.w	8002f8e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e48:	4b54      	ldr	r3, [pc, #336]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	4a53      	ldr	r2, [pc, #332]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e52:	6453      	str	r3, [r2, #68]	; 0x44
 8002e54:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e60:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	4a4d      	ldr	r2, [pc, #308]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e66:	f043 0310 	orr.w	r3, r3, #16
 8002e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6c:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e78:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4a47      	ldr	r2, [pc, #284]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e82:	6313      	str	r3, [r2, #48]	; 0x30
 8002e84:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4a41      	ldr	r2, [pc, #260]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9c:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ea8:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	4a3b      	ldr	r2, [pc, #236]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb4:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ec0:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	4a35      	ldr	r2, [pc, #212]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eca:	6313      	str	r3, [r2, #48]	; 0x30
 8002ecc:	4b33      	ldr	r3, [pc, #204]	; (8002f9c <HAL_LTDC_MspInit+0x178>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ed8:	2310      	movs	r3, #16
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ee8:	230e      	movs	r3, #14
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	482b      	ldr	r0, [pc, #172]	; (8002fa0 <HAL_LTDC_MspInit+0x17c>)
 8002ef4:	f006 f866 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002ef8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f06:	2300      	movs	r3, #0
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f0a:	230e      	movs	r3, #14
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f12:	4619      	mov	r1, r3
 8002f14:	4823      	ldr	r0, [pc, #140]	; (8002fa4 <HAL_LTDC_MspInit+0x180>)
 8002f16:	f006 f855 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002f1a:	23f7      	movs	r3, #247	; 0xf7
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f2a:	230e      	movs	r3, #14
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f32:	4619      	mov	r1, r3
 8002f34:	481c      	ldr	r0, [pc, #112]	; (8002fa8 <HAL_LTDC_MspInit+0x184>)
 8002f36:	f006 f845 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f4c:	2309      	movs	r3, #9
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f54:	4619      	mov	r1, r3
 8002f56:	4815      	ldr	r0, [pc, #84]	; (8002fac <HAL_LTDC_MspInit+0x188>)
 8002f58:	f006 f834 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002f5c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f6e:	230e      	movs	r3, #14
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f76:	4619      	mov	r1, r3
 8002f78:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <HAL_LTDC_MspInit+0x18c>)
 8002f7a:	f006 f823 	bl	8008fc4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	2058      	movs	r0, #88	; 0x58
 8002f84:	f004 ff20 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002f88:	2058      	movs	r0, #88	; 0x58
 8002f8a:	f004 ff39 	bl	8007e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f8e:	bf00      	nop
 8002f90:	3738      	adds	r7, #56	; 0x38
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40016800 	.word	0x40016800
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40022400 	.word	0x40022400
 8002fa8:	40022800 	.word	0x40022800
 8002fac:	40021800 	.word	0x40021800
 8002fb0:	40022000 	.word	0x40022000

08002fb4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a3b      	ldr	r2, [pc, #236]	; (80030c0 <HAL_QSPI_MspInit+0x10c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d170      	bne.n	80030b8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6393      	str	r3, [r2, #56]	; 0x38
 8002fe2:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fee:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002ff4:	f043 0310 	orr.w	r3, r3, #16
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003006:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a2e      	ldr	r2, [pc, #184]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800301e:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_QSPI_MspInit+0x110>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003036:	2304      	movs	r3, #4
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003042:	2303      	movs	r3, #3
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003046:	2309      	movs	r3, #9
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800304a:	f107 031c 	add.w	r3, r7, #28
 800304e:	4619      	mov	r1, r3
 8003050:	481d      	ldr	r0, [pc, #116]	; (80030c8 <HAL_QSPI_MspInit+0x114>)
 8003052:	f005 ffb7 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003056:	2340      	movs	r3, #64	; 0x40
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003066:	230a      	movs	r3, #10
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800306a:	f107 031c 	add.w	r3, r7, #28
 800306e:	4619      	mov	r1, r3
 8003070:	4816      	ldr	r0, [pc, #88]	; (80030cc <HAL_QSPI_MspInit+0x118>)
 8003072:	f005 ffa7 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003076:	2304      	movs	r3, #4
 8003078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003082:	2303      	movs	r3, #3
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003086:	2309      	movs	r3, #9
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	4619      	mov	r1, r3
 8003090:	480e      	ldr	r0, [pc, #56]	; (80030cc <HAL_QSPI_MspInit+0x118>)
 8003092:	f005 ff97 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003096:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030a8:	2309      	movs	r3, #9
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ac:	f107 031c 	add.w	r3, r7, #28
 80030b0:	4619      	mov	r1, r3
 80030b2:	4807      	ldr	r0, [pc, #28]	; (80030d0 <HAL_QSPI_MspInit+0x11c>)
 80030b4:	f005 ff86 	bl	8008fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80030b8:	bf00      	nop
 80030ba:	3730      	adds	r7, #48	; 0x30
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	a0001000 	.word	0xa0001000
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40020400 	.word	0x40020400
 80030d0:	40020c00 	.word	0x40020c00

080030d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a07      	ldr	r2, [pc, #28]	; (8003100 <HAL_RTC_MspInit+0x2c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d105      	bne.n	80030f2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_RTC_MspInit+0x30>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a06      	ldr	r2, [pc, #24]	; (8003104 <HAL_RTC_MspInit+0x30>)
 80030ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40002800 	.word	0x40002800
 8003104:	40023800 	.word	0x40023800

08003108 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003128:	d127      	bne.n	800317a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a15      	ldr	r2, [pc, #84]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315e:	2302      	movs	r3, #2
 8003160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003166:	2300      	movs	r3, #0
 8003168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800316a:	2308      	movs	r3, #8
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800316e:	f107 0314 	add.w	r3, r7, #20
 8003172:	4619      	mov	r1, r3
 8003174:	4804      	ldr	r0, [pc, #16]	; (8003188 <HAL_SPDIFRX_MspInit+0x80>)
 8003176:	f005 ff25 	bl	8008fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800317a:	bf00      	nop
 800317c:	3728      	adds	r7, #40	; 0x28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40020c00 	.word	0x40020c00

0800318c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2e      	ldr	r2, [pc, #184]	; (8003254 <HAL_TIM_Base_MspInit+0xc8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d10c      	bne.n	80031b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80031b6:	e046      	b.n	8003246 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d10c      	bne.n	80031dc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031c2:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a24      	ldr	r2, [pc, #144]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	69bb      	ldr	r3, [r7, #24]
}
 80031da:	e034      	b.n	8003246 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1e      	ldr	r2, [pc, #120]	; (800325c <HAL_TIM_Base_MspInit+0xd0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10c      	bne.n	8003200 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	697b      	ldr	r3, [r7, #20]
}
 80031fe:	e022      	b.n	8003246 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a16      	ldr	r2, [pc, #88]	; (8003260 <HAL_TIM_Base_MspInit+0xd4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10c      	bne.n	8003224 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
}
 8003222:	e010      	b.n	8003246 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <HAL_TIM_Base_MspInit+0xd8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10b      	bne.n	8003246 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	6453      	str	r3, [r2, #68]	; 0x44
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_TIM_Base_MspInit+0xcc>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
}
 8003246:	bf00      	nop
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	40023800 	.word	0x40023800
 800325c:	40000400 	.word	0x40000400
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40010400 	.word	0x40010400

08003268 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_TIM_PWM_MspInit+0x38>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10b      	bne.n	8003292 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40001800 	.word	0x40001800
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 031c 	add.w	r3, r7, #28
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a56      	ldr	r2, [pc, #344]	; (8003420 <HAL_TIM_MspPostInit+0x178>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d11d      	bne.n	8003306 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	4b56      	ldr	r3, [pc, #344]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a55      	ldr	r2, [pc, #340]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80032e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e8:	2302      	movs	r3, #2
 80032ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f0:	2300      	movs	r3, #0
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032f4:	2301      	movs	r3, #1
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4619      	mov	r1, r3
 80032fe:	484a      	ldr	r0, [pc, #296]	; (8003428 <HAL_TIM_MspPostInit+0x180>)
 8003300:	f005 fe60 	bl	8008fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003304:	e087      	b.n	8003416 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d11d      	bne.n	800334c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003310:	4b44      	ldr	r3, [pc, #272]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	4a43      	ldr	r2, [pc, #268]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6313      	str	r3, [r2, #48]	; 0x30
 800331c:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800332c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800333a:	2301      	movs	r3, #1
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800333e:	f107 031c 	add.w	r3, r7, #28
 8003342:	4619      	mov	r1, r3
 8003344:	4838      	ldr	r0, [pc, #224]	; (8003428 <HAL_TIM_MspPostInit+0x180>)
 8003346:	f005 fe3d 	bl	8008fc4 <HAL_GPIO_Init>
}
 800334a:	e064      	b.n	8003416 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a36      	ldr	r2, [pc, #216]	; (800342c <HAL_TIM_MspPostInit+0x184>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d11c      	bne.n	8003390 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a32      	ldr	r2, [pc, #200]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b30      	ldr	r3, [pc, #192]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800336e:	2310      	movs	r3, #16
 8003370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800337e:	2302      	movs	r3, #2
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003382:	f107 031c 	add.w	r3, r7, #28
 8003386:	4619      	mov	r1, r3
 8003388:	4829      	ldr	r0, [pc, #164]	; (8003430 <HAL_TIM_MspPostInit+0x188>)
 800338a:	f005 fe1b 	bl	8008fc4 <HAL_GPIO_Init>
}
 800338e:	e042      	b.n	8003416 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a27      	ldr	r2, [pc, #156]	; (8003434 <HAL_TIM_MspPostInit+0x18c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d11c      	bne.n	80033d4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a21      	ldr	r2, [pc, #132]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80033b2:	2301      	movs	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80033c2:	2302      	movs	r3, #2
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80033c6:	f107 031c 	add.w	r3, r7, #28
 80033ca:	4619      	mov	r1, r3
 80033cc:	481a      	ldr	r0, [pc, #104]	; (8003438 <HAL_TIM_MspPostInit+0x190>)
 80033ce:	f005 fdf9 	bl	8008fc4 <HAL_GPIO_Init>
}
 80033d2:	e020      	b.n	8003416 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_TIM_MspPostInit+0x194>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d11b      	bne.n	8003416 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a10      	ldr	r2, [pc, #64]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 80033e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_TIM_MspPostInit+0x17c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80033f6:	2340      	movs	r3, #64	; 0x40
 80033f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003406:	2309      	movs	r3, #9
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800340a:	f107 031c 	add.w	r3, r7, #28
 800340e:	4619      	mov	r1, r3
 8003410:	480b      	ldr	r0, [pc, #44]	; (8003440 <HAL_TIM_MspPostInit+0x198>)
 8003412:	f005 fdd7 	bl	8008fc4 <HAL_GPIO_Init>
}
 8003416:	bf00      	nop
 8003418:	3730      	adds	r7, #48	; 0x30
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40010000 	.word	0x40010000
 8003424:	40023800 	.word	0x40023800
 8003428:	40020000 	.word	0x40020000
 800342c:	40000400 	.word	0x40000400
 8003430:	40020400 	.word	0x40020400
 8003434:	40000c00 	.word	0x40000c00
 8003438:	40022000 	.word	0x40022000
 800343c:	40001800 	.word	0x40001800
 8003440:	40021c00 	.word	0x40021c00

08003444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	; 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a3c      	ldr	r2, [pc, #240]	; (8003554 <HAL_UART_MspInit+0x110>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d145      	bne.n	80034f2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003466:	4b3c      	ldr	r3, [pc, #240]	; (8003558 <HAL_UART_MspInit+0x114>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	4a3b      	ldr	r2, [pc, #236]	; (8003558 <HAL_UART_MspInit+0x114>)
 800346c:	f043 0310 	orr.w	r3, r3, #16
 8003470:	6453      	str	r3, [r2, #68]	; 0x44
 8003472:	4b39      	ldr	r3, [pc, #228]	; (8003558 <HAL_UART_MspInit+0x114>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347e:	4b36      	ldr	r3, [pc, #216]	; (8003558 <HAL_UART_MspInit+0x114>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a35      	ldr	r2, [pc, #212]	; (8003558 <HAL_UART_MspInit+0x114>)
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
 800348a:	4b33      	ldr	r3, [pc, #204]	; (8003558 <HAL_UART_MspInit+0x114>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_UART_MspInit+0x114>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a2f      	ldr	r2, [pc, #188]	; (8003558 <HAL_UART_MspInit+0x114>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_UART_MspInit+0x114>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	2300      	movs	r3, #0
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034be:	2307      	movs	r3, #7
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80034c2:	f107 031c 	add.w	r3, r7, #28
 80034c6:	4619      	mov	r1, r3
 80034c8:	4824      	ldr	r0, [pc, #144]	; (800355c <HAL_UART_MspInit+0x118>)
 80034ca:	f005 fd7b 	bl	8008fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80034ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034dc:	2300      	movs	r3, #0
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034e0:	2307      	movs	r3, #7
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80034e4:	f107 031c 	add.w	r3, r7, #28
 80034e8:	4619      	mov	r1, r3
 80034ea:	481d      	ldr	r0, [pc, #116]	; (8003560 <HAL_UART_MspInit+0x11c>)
 80034ec:	f005 fd6a 	bl	8008fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80034f0:	e02c      	b.n	800354c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_UART_MspInit+0x120>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d127      	bne.n	800354c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80034fc:	4b16      	ldr	r3, [pc, #88]	; (8003558 <HAL_UART_MspInit+0x114>)
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	4a15      	ldr	r2, [pc, #84]	; (8003558 <HAL_UART_MspInit+0x114>)
 8003502:	f043 0320 	orr.w	r3, r3, #32
 8003506:	6453      	str	r3, [r2, #68]	; 0x44
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_UART_MspInit+0x114>)
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_UART_MspInit+0x114>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <HAL_UART_MspInit+0x114>)
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_UART_MspInit+0x114>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800352c:	23c0      	movs	r3, #192	; 0xc0
 800352e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800353c:	2308      	movs	r3, #8
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	4619      	mov	r1, r3
 8003546:	4808      	ldr	r0, [pc, #32]	; (8003568 <HAL_UART_MspInit+0x124>)
 8003548:	f005 fd3c 	bl	8008fc4 <HAL_GPIO_Init>
}
 800354c:	bf00      	nop
 800354e:	3730      	adds	r7, #48	; 0x30
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40011000 	.word	0x40011000
 8003558:	40023800 	.word	0x40023800
 800355c:	40020400 	.word	0x40020400
 8003560:	40020000 	.word	0x40020000
 8003564:	40011400 	.word	0x40011400
 8003568:	40020800 	.word	0x40020800

0800356c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003580:	4b3a      	ldr	r3, [pc, #232]	; (800366c <HAL_FMC_MspInit+0x100>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d16d      	bne.n	8003664 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003588:	4b38      	ldr	r3, [pc, #224]	; (800366c <HAL_FMC_MspInit+0x100>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_FMC_MspInit+0x104>)
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	4a37      	ldr	r2, [pc, #220]	; (8003670 <HAL_FMC_MspInit+0x104>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6393      	str	r3, [r2, #56]	; 0x38
 800359a:	4b35      	ldr	r3, [pc, #212]	; (8003670 <HAL_FMC_MspInit+0x104>)
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80035a6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80035aa:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ac:	2302      	movs	r3, #2
 80035ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b4:	2303      	movs	r3, #3
 80035b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035b8:	230c      	movs	r3, #12
 80035ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	482c      	ldr	r0, [pc, #176]	; (8003674 <HAL_FMC_MspInit+0x108>)
 80035c2:	f005 fcff 	bl	8008fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80035c6:	f248 1333 	movw	r3, #33075	; 0x8133
 80035ca:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d4:	2303      	movs	r3, #3
 80035d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035d8:	230c      	movs	r3, #12
 80035da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4825      	ldr	r0, [pc, #148]	; (8003678 <HAL_FMC_MspInit+0x10c>)
 80035e2:	f005 fcef 	bl	8008fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80035e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80035ea:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ec:	2302      	movs	r3, #2
 80035ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f4:	2303      	movs	r3, #3
 80035f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035f8:	230c      	movs	r3, #12
 80035fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	481e      	ldr	r0, [pc, #120]	; (800367c <HAL_FMC_MspInit+0x110>)
 8003602:	f005 fcdf 	bl	8008fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003606:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800360a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003614:	2303      	movs	r3, #3
 8003616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003618:	230c      	movs	r3, #12
 800361a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	4619      	mov	r1, r3
 8003620:	4817      	ldr	r0, [pc, #92]	; (8003680 <HAL_FMC_MspInit+0x114>)
 8003622:	f005 fccf 	bl	8008fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003626:	2328      	movs	r3, #40	; 0x28
 8003628:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003632:	2303      	movs	r3, #3
 8003634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003636:	230c      	movs	r3, #12
 8003638:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4811      	ldr	r0, [pc, #68]	; (8003684 <HAL_FMC_MspInit+0x118>)
 8003640:	f005 fcc0 	bl	8008fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003644:	2308      	movs	r3, #8
 8003646:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003650:	2303      	movs	r3, #3
 8003652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003654:	230c      	movs	r3, #12
 8003656:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	4619      	mov	r1, r3
 800365c:	480a      	ldr	r0, [pc, #40]	; (8003688 <HAL_FMC_MspInit+0x11c>)
 800365e:	f005 fcb1 	bl	8008fc4 <HAL_GPIO_Init>
 8003662:	e000      	b.n	8003666 <HAL_FMC_MspInit+0xfa>
    return;
 8003664:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000da0 	.word	0x20000da0
 8003670:	40023800 	.word	0x40023800
 8003674:	40021000 	.word	0x40021000
 8003678:	40021800 	.word	0x40021800
 800367c:	40020c00 	.word	0x40020c00
 8003680:	40021400 	.word	0x40021400
 8003684:	40021c00 	.word	0x40021c00
 8003688:	40020800 	.word	0x40020800

0800368c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003694:	f7ff ff6a 	bl	800356c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2b      	ldr	r2, [pc, #172]	; (800375c <HAL_SAI_MspInit+0xbc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d124      	bne.n	80036fc <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80036b2:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_SAI_MspInit+0xc0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80036ba:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <HAL_SAI_MspInit+0xc4>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	4a29      	ldr	r2, [pc, #164]	; (8003764 <HAL_SAI_MspInit+0xc4>)
 80036c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c4:	6453      	str	r3, [r2, #68]	; 0x44
 80036c6:	4b27      	ldr	r3, [pc, #156]	; (8003764 <HAL_SAI_MspInit+0xc4>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_SAI_MspInit+0xc0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	4a21      	ldr	r2, [pc, #132]	; (8003760 <HAL_SAI_MspInit+0xc0>)
 80036da:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80036dc:	23f0      	movs	r3, #240	; 0xf0
 80036de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e8:	2300      	movs	r3, #0
 80036ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036ec:	230a      	movs	r3, #10
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4619      	mov	r1, r3
 80036f6:	481c      	ldr	r0, [pc, #112]	; (8003768 <HAL_SAI_MspInit+0xc8>)
 80036f8:	f005 fc64 	bl	8008fc4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1a      	ldr	r2, [pc, #104]	; (800376c <HAL_SAI_MspInit+0xcc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d125      	bne.n	8003752 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <HAL_SAI_MspInit+0xc0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_SAI_MspInit+0xc4>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a14      	ldr	r2, [pc, #80]	; (8003764 <HAL_SAI_MspInit+0xc4>)
 8003714:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_SAI_MspInit+0xc4>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_SAI_MspInit+0xc0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3301      	adds	r3, #1
 800372c:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <HAL_SAI_MspInit+0xc0>)
 800372e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003736:	2302      	movs	r3, #2
 8003738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003742:	230a      	movs	r3, #10
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003746:	f107 0314 	add.w	r3, r7, #20
 800374a:	4619      	mov	r1, r3
 800374c:	4808      	ldr	r0, [pc, #32]	; (8003770 <HAL_SAI_MspInit+0xd0>)
 800374e:	f005 fc39 	bl	8008fc4 <HAL_GPIO_Init>

    }
}
 8003752:	bf00      	nop
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40015c04 	.word	0x40015c04
 8003760:	20000da4 	.word	0x20000da4
 8003764:	40023800 	.word	0x40023800
 8003768:	40022000 	.word	0x40022000
 800376c:	40015c24 	.word	0x40015c24
 8003770:	40021800 	.word	0x40021800

08003774 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_SAI_MspDeInit+0x74>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d112      	bne.n	80037ac <HAL_SAI_MspDeInit+0x38>
    {
    SAI2_client --;
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <HAL_SAI_MspDeInit+0x78>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3b01      	subs	r3, #1
 800378c:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_SAI_MspDeInit+0x78>)
 800378e:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <HAL_SAI_MspDeInit+0x78>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_SAI_MspDeInit+0x7c>)
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <HAL_SAI_MspDeInit+0x7c>)
 800379e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037a2:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 80037a4:	21f0      	movs	r1, #240	; 0xf0
 80037a6:	4813      	ldr	r0, [pc, #76]	; (80037f4 <HAL_SAI_MspDeInit+0x80>)
 80037a8:	f005 fdb6 	bl	8009318 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <HAL_SAI_MspDeInit+0x84>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d113      	bne.n	80037de <HAL_SAI_MspDeInit+0x6a>
    {
    SAI2_client --;
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_SAI_MspDeInit+0x78>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <HAL_SAI_MspDeInit+0x78>)
 80037be:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_SAI_MspDeInit+0x78>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <HAL_SAI_MspDeInit+0x60>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_SAI_MspDeInit+0x7c>)
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	4a08      	ldr	r2, [pc, #32]	; (80037f0 <HAL_SAI_MspDeInit+0x7c>)
 80037ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037d2:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 80037d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037d8:	4808      	ldr	r0, [pc, #32]	; (80037fc <HAL_SAI_MspDeInit+0x88>)
 80037da:	f005 fd9d 	bl	8009318 <HAL_GPIO_DeInit>

    }
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40015c04 	.word	0x40015c04
 80037ec:	20000da4 	.word	0x20000da4
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40015c24 	.word	0x40015c24
 80037fc:	40021800 	.word	0x40021800

08003800 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	; 0x30
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003810:	2200      	movs	r2, #0
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	2036      	movs	r0, #54	; 0x36
 8003816:	f004 fad7 	bl	8007dc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800381a:	2036      	movs	r0, #54	; 0x36
 800381c:	f004 faf0 	bl	8007e00 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003820:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <HAL_InitTick+0xa0>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_InitTick+0xa0>)
 8003826:	f043 0310 	orr.w	r3, r3, #16
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <HAL_InitTick+0xa0>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003838:	f107 0210 	add.w	r2, r7, #16
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f009 fa56 	bl	800ccf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003848:	f009 fa2c 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
 800384c:	4603      	mov	r3, r0
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <HAL_InitTick+0xa4>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	0c9b      	lsrs	r3, r3, #18
 800385c:	3b01      	subs	r3, #1
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <HAL_InitTick+0xa8>)
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <HAL_InitTick+0xac>)
 8003864:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_InitTick+0xa8>)
 8003868:	f240 32e7 	movw	r2, #999	; 0x3e7
 800386c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800386e:	4a0e      	ldr	r2, [pc, #56]	; (80038a8 <HAL_InitTick+0xa8>)
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_InitTick+0xa8>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_InitTick+0xa8>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003880:	4809      	ldr	r0, [pc, #36]	; (80038a8 <HAL_InitTick+0xa8>)
 8003882:	f00b f855 	bl	800e930 <HAL_TIM_Base_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d104      	bne.n	8003896 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800388c:	4806      	ldr	r0, [pc, #24]	; (80038a8 <HAL_InitTick+0xa8>)
 800388e:	f00b f87b 	bl	800e988 <HAL_TIM_Base_Start_IT>
 8003892:	4603      	mov	r3, r0
 8003894:	e000      	b.n	8003898 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	3730      	adds	r7, #48	; 0x30
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	431bde83 	.word	0x431bde83
 80038a8:	2001b8a8 	.word	0x2001b8a8
 80038ac:	40001000 	.word	0x40001000

080038b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <HardFault_Handler+0x4>

080038c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <MemManage_Handler+0x4>

080038ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ce:	e7fe      	b.n	80038ce <BusFault_Handler+0x4>

080038d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <UsageFault_Handler+0x4>

080038d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80038e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80038ec:	f005 fe38 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <TIM6_DAC_IRQHandler+0x10>)
 80038fa:	f00b f89a 	bl	800ea32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2001b8a8 	.word	0x2001b8a8

08003908 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <OTG_FS_IRQHandler+0x10>)
 800390e:	f006 f8cf 	bl	8009ab0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	2001be54 	.word	0x2001be54

0800391c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <LTDC_IRQHandler+0x10>)
 8003922:	f008 f9a7 	bl	800bc74 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20019b78 	.word	0x20019b78

08003930 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <DMA2D_IRQHandler+0x10>)
 8003936:	f005 f907 	bl	8008b48 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2001b720 	.word	0x2001b720

08003944 <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
#include "stm32746g_discovery_audio.h"
extern SAI_HandleTypeDef haudio_in_sai;
 void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
 {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
	 HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <DMA2_Stream7_IRQHandler+0x14>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4618      	mov	r0, r3
 800394e:	f004 fd35 	bl	80083bc <HAL_DMA_IRQHandler>
 }
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000e8c 	.word	0x20000e8c

0800395c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <_sbrk+0x5c>)
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <_sbrk+0x60>)
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <_sbrk+0x64>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <_sbrk+0x64>)
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <_sbrk+0x68>)
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <_sbrk+0x64>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800398c:	f013 fec8 	bl	8017720 <__errno>
 8003990:	4602      	mov	r2, r0
 8003992:	230c      	movs	r3, #12
 8003994:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	e009      	b.n	80039b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <_sbrk+0x64>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <_sbrk+0x64>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <_sbrk+0x64>)
 80039ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20050000 	.word	0x20050000
 80039bc:	00000400 	.word	0x00000400
 80039c0:	20000da8 	.word	0x20000da8
 80039c4:	2001c120 	.word	0x2001c120

080039c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <SystemInit+0x28>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <SystemInit+0x28>)
 80039d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <SystemInit+0x28>)
 80039de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039e2:	609a      	str	r2, [r3, #8]
#endif
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039fa:	e003      	b.n	8003a04 <LoopCopyDataInit>

080039fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a02:	3104      	adds	r1, #4

08003a04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a04:	480b      	ldr	r0, [pc, #44]	; (8003a34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a0c:	d3f6      	bcc.n	80039fc <CopyDataInit>
  ldr  r2, =_sbss
 8003a0e:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a10:	e002      	b.n	8003a18 <LoopFillZerobss>

08003a12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a14:	f842 3b04 	str.w	r3, [r2], #4

08003a18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a1c:	d3f9      	bcc.n	8003a12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a1e:	f7ff ffd3 	bl	80039c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a22:	f013 fe83 	bl	801772c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a26:	f7fd fcfb 	bl	8001420 <main>
  bx  lr    
 8003a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a2c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003a30:	0801a0f8 	.word	0x0801a0f8
  ldr  r0, =_sdata
 8003a34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a38:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8003a3c:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8003a40:	2001c11c 	.word	0x2001c11c

08003a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a44:	e7fe      	b.n	8003a44 <ADC_IRQHandler>

08003a46 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8003a50:	20c8      	movs	r0, #200	; 0xc8
 8003a52:	f001 ff91 	bl	8005978 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003a56:	f000 fa7b 	bl	8003f50 <ft5336_I2C_InitializeIfRequired>
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	4603      	mov	r3, r0
 8003a6a:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003a8e:	f000 fa5f 	bl	8003f50 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
 8003a96:	e010      	b.n	8003aba <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	21a8      	movs	r1, #168	; 0xa8
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 ff4c 	bl	800593c <TS_IO_Read>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8003aa8:	7b7b      	ldrb	r3, [r7, #13]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b51      	cmp	r3, #81	; 0x51
 8003aae:	d101      	bne.n	8003ab4 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d802      	bhi.n	8003ac6 <ft5336_ReadID+0x4e>
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0e8      	beq.n	8003a98 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8003ac6:	7b7b      	ldrb	r3, [r7, #13]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	b29b      	uxth	r3, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fa45 	bl	8003f70 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f933 	bl	8003d54 <ft5336_TS_DisableIT>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 ff15 	bl	800593c <TS_IO_Read>
 8003b12:	4603      	mov	r3, r0
 8003b14:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d901      	bls.n	8003b2e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <ft5336_TS_DetectTouch+0x50>)
 8003b34:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <ft5336_TS_DetectTouch+0x50>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	b2db      	uxtb	r3, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000dac 	.word	0x20000dac

08003b4c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <ft5336_TS_GetXY+0x1d8>)
 8003b70:	789a      	ldrb	r2, [r3, #2]
 8003b72:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <ft5336_TS_GetXY+0x1d8>)
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	f080 80cf 	bcs.w	8003d1a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8003b7c:	4b69      	ldr	r3, [pc, #420]	; (8003d24 <ft5336_TS_GetXY+0x1d8>)
 8003b7e:	789b      	ldrb	r3, [r3, #2]
 8003b80:	2b09      	cmp	r3, #9
 8003b82:	d871      	bhi.n	8003c68 <ft5336_TS_GetXY+0x11c>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <ft5336_TS_GetXY+0x40>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bb5 	.word	0x08003bb5
 8003b90:	08003bc7 	.word	0x08003bc7
 8003b94:	08003bd9 	.word	0x08003bd9
 8003b98:	08003beb 	.word	0x08003beb
 8003b9c:	08003bfd 	.word	0x08003bfd
 8003ba0:	08003c0f 	.word	0x08003c0f
 8003ba4:	08003c21 	.word	0x08003c21
 8003ba8:	08003c33 	.word	0x08003c33
 8003bac:	08003c45 	.word	0x08003c45
 8003bb0:	08003c57 	.word	0x08003c57
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8003bbc:	2306      	movs	r3, #6
 8003bbe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8003bc0:	2305      	movs	r3, #5
 8003bc2:	753b      	strb	r3, [r7, #20]
      break;
 8003bc4:	e051      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8003bc6:	230a      	movs	r3, #10
 8003bc8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8003bca:	2309      	movs	r3, #9
 8003bcc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8003bce:	230c      	movs	r3, #12
 8003bd0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8003bd2:	230b      	movs	r3, #11
 8003bd4:	753b      	strb	r3, [r7, #20]
      break;
 8003bd6:	e048      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8003bd8:	2310      	movs	r3, #16
 8003bda:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8003bdc:	230f      	movs	r3, #15
 8003bde:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8003be0:	2312      	movs	r3, #18
 8003be2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8003be4:	2311      	movs	r3, #17
 8003be6:	753b      	strb	r3, [r7, #20]
      break;
 8003be8:	e03f      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8003bea:	2316      	movs	r3, #22
 8003bec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8003bee:	2315      	movs	r3, #21
 8003bf0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8003bf2:	2318      	movs	r3, #24
 8003bf4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8003bf6:	2317      	movs	r3, #23
 8003bf8:	753b      	strb	r3, [r7, #20]
      break;
 8003bfa:	e036      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8003bfc:	231c      	movs	r3, #28
 8003bfe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8003c00:	231b      	movs	r3, #27
 8003c02:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8003c04:	231e      	movs	r3, #30
 8003c06:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8003c08:	231d      	movs	r3, #29
 8003c0a:	753b      	strb	r3, [r7, #20]
      break;
 8003c0c:	e02d      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8003c0e:	2322      	movs	r3, #34	; 0x22
 8003c10:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8003c12:	2321      	movs	r3, #33	; 0x21
 8003c14:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8003c16:	2324      	movs	r3, #36	; 0x24
 8003c18:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8003c1a:	2323      	movs	r3, #35	; 0x23
 8003c1c:	753b      	strb	r3, [r7, #20]
      break;
 8003c1e:	e024      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8003c20:	2328      	movs	r3, #40	; 0x28
 8003c22:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8003c24:	2327      	movs	r3, #39	; 0x27
 8003c26:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8003c28:	232a      	movs	r3, #42	; 0x2a
 8003c2a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8003c2c:	2329      	movs	r3, #41	; 0x29
 8003c2e:	753b      	strb	r3, [r7, #20]
      break;
 8003c30:	e01b      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8003c32:	232e      	movs	r3, #46	; 0x2e
 8003c34:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8003c36:	232d      	movs	r3, #45	; 0x2d
 8003c38:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8003c3a:	2330      	movs	r3, #48	; 0x30
 8003c3c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8003c3e:	232f      	movs	r3, #47	; 0x2f
 8003c40:	753b      	strb	r3, [r7, #20]
      break;
 8003c42:	e012      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8003c44:	2334      	movs	r3, #52	; 0x34
 8003c46:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8003c48:	2333      	movs	r3, #51	; 0x33
 8003c4a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8003c4c:	2336      	movs	r3, #54	; 0x36
 8003c4e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8003c50:	2335      	movs	r3, #53	; 0x35
 8003c52:	753b      	strb	r3, [r7, #20]
      break;
 8003c54:	e009      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8003c56:	233a      	movs	r3, #58	; 0x3a
 8003c58:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8003c5a:	2339      	movs	r3, #57	; 0x39
 8003c5c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8003c5e:	233c      	movs	r3, #60	; 0x3c
 8003c60:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8003c62:	233b      	movs	r3, #59	; 0x3b
 8003c64:	753b      	strb	r3, [r7, #20]
      break;
 8003c66:	e000      	b.n	8003c6a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8003c68:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003c6a:	89fb      	ldrh	r3, [r7, #14]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	7dfa      	ldrb	r2, [r7, #23]
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 fe62 	bl	800593c <TS_IO_Read>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <ft5336_TS_GetXY+0x1dc>)
 8003c84:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003c86:	89fb      	ldrh	r3, [r7, #14]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	7dba      	ldrb	r2, [r7, #22]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fe54 	bl	800593c <TS_IO_Read>
 8003c94:	4603      	mov	r3, r0
 8003c96:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <ft5336_TS_GetXY+0x1dc>)
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <ft5336_TS_GetXY+0x1dc>)
 8003cb2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <ft5336_TS_GetXY+0x1dc>)
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003cbc:	89fb      	ldrh	r3, [r7, #14]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	7d7a      	ldrb	r2, [r7, #21]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 fe39 	bl	800593c <TS_IO_Read>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <ft5336_TS_GetXY+0x1dc>)
 8003cd6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003cd8:	89fb      	ldrh	r3, [r7, #14]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	7d3a      	ldrb	r2, [r7, #20]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fe2b 	bl	800593c <TS_IO_Read>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cf4:	b21a      	sxth	r2, r3
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <ft5336_TS_GetXY+0x1dc>)
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b21b      	sxth	r3, r3
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	b21b      	sxth	r3, r3
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <ft5336_TS_GetXY+0x1dc>)
 8003d04:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <ft5336_TS_GetXY+0x1dc>)
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <ft5336_TS_GetXY+0x1d8>)
 8003d10:	789b      	ldrb	r3, [r3, #2]
 8003d12:	3301      	adds	r3, #1
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <ft5336_TS_GetXY+0x1d8>)
 8003d18:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000dac 	.word	0x20000dac
 8003d28:	20000db0 	.word	0x20000db0

08003d2c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	21a4      	movs	r1, #164	; 0xa4
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 fdde 	bl	8005908 <TS_IO_Write>
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	21a4      	movs	r1, #164	; 0xa4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 fdca 	bl	8005908 <TS_IO_Write>
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	6039      	str	r1, [r7, #0]
 8003db4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fdbb 	bl	800593c <TS_IO_Read>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4603      	mov	r3, r0
 8003dea:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8003dfc:	4b4d      	ldr	r3, [pc, #308]	; (8003f34 <ft5336_TS_GetTouchInfo+0x158>)
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	4293      	cmp	r3, r2
 8003e06:	f080 8090 	bcs.w	8003f2a <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d85d      	bhi.n	8003ecc <ft5336_TS_GetTouchInfo+0xf0>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <ft5336_TS_GetTouchInfo+0x3c>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e41 	.word	0x08003e41
 8003e1c:	08003e4f 	.word	0x08003e4f
 8003e20:	08003e5d 	.word	0x08003e5d
 8003e24:	08003e6b 	.word	0x08003e6b
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e87 	.word	0x08003e87
 8003e30:	08003e95 	.word	0x08003e95
 8003e34:	08003ea3 	.word	0x08003ea3
 8003e38:	08003eb1 	.word	0x08003eb1
 8003e3c:	08003ebf 	.word	0x08003ebf
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8003e40:	2303      	movs	r3, #3
 8003e42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8003e44:	2307      	movs	r3, #7
 8003e46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8003e48:	2308      	movs	r3, #8
 8003e4a:	757b      	strb	r3, [r7, #21]
      break;
 8003e4c:	e03f      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8003e4e:	2309      	movs	r3, #9
 8003e50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8003e52:	230d      	movs	r3, #13
 8003e54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8003e56:	230e      	movs	r3, #14
 8003e58:	757b      	strb	r3, [r7, #21]
      break;
 8003e5a:	e038      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8003e60:	2313      	movs	r3, #19
 8003e62:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8003e64:	2314      	movs	r3, #20
 8003e66:	757b      	strb	r3, [r7, #21]
      break;
 8003e68:	e031      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8003e6a:	2315      	movs	r3, #21
 8003e6c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8003e6e:	2319      	movs	r3, #25
 8003e70:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8003e72:	231a      	movs	r3, #26
 8003e74:	757b      	strb	r3, [r7, #21]
      break;
 8003e76:	e02a      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8003e78:	231b      	movs	r3, #27
 8003e7a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8003e7c:	231f      	movs	r3, #31
 8003e7e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8003e80:	2320      	movs	r3, #32
 8003e82:	757b      	strb	r3, [r7, #21]
      break;
 8003e84:	e023      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8003e86:	2321      	movs	r3, #33	; 0x21
 8003e88:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8003e8a:	2325      	movs	r3, #37	; 0x25
 8003e8c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8003e8e:	2326      	movs	r3, #38	; 0x26
 8003e90:	757b      	strb	r3, [r7, #21]
      break;
 8003e92:	e01c      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8003e94:	2327      	movs	r3, #39	; 0x27
 8003e96:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8003e98:	232b      	movs	r3, #43	; 0x2b
 8003e9a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8003e9c:	232c      	movs	r3, #44	; 0x2c
 8003e9e:	757b      	strb	r3, [r7, #21]
      break;
 8003ea0:	e015      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8003ea2:	232d      	movs	r3, #45	; 0x2d
 8003ea4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8003ea6:	2331      	movs	r3, #49	; 0x31
 8003ea8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8003eaa:	2332      	movs	r3, #50	; 0x32
 8003eac:	757b      	strb	r3, [r7, #21]
      break;
 8003eae:	e00e      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8003eb0:	2333      	movs	r3, #51	; 0x33
 8003eb2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8003eb4:	2337      	movs	r3, #55	; 0x37
 8003eb6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8003eb8:	2338      	movs	r3, #56	; 0x38
 8003eba:	757b      	strb	r3, [r7, #21]
      break;
 8003ebc:	e007      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8003ebe:	2339      	movs	r3, #57	; 0x39
 8003ec0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8003ec2:	233d      	movs	r3, #61	; 0x3d
 8003ec4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8003ec6:	233e      	movs	r3, #62	; 0x3e
 8003ec8:	757b      	strb	r3, [r7, #21]
      break;
 8003eca:	e000      	b.n	8003ece <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8003ecc:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003ece:	89fb      	ldrh	r3, [r7, #14]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	7dfa      	ldrb	r2, [r7, #23]
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 fd30 	bl	800593c <TS_IO_Read>
 8003edc:	4603      	mov	r3, r0
 8003ede:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8003ee0:	7d3b      	ldrb	r3, [r7, #20]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	119b      	asrs	r3, r3, #6
 8003ee6:	f003 0203 	and.w	r2, r3, #3
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8003eee:	89fb      	ldrh	r3, [r7, #14]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	7dba      	ldrb	r2, [r7, #22]
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fd20 	bl	800593c <TS_IO_Read>
 8003efc:	4603      	mov	r3, r0
 8003efe:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8003f00:	7d3b      	ldrb	r3, [r7, #20]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8003f0a:	89fb      	ldrh	r3, [r7, #14]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	7d7a      	ldrb	r2, [r7, #21]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 fd12 	bl	800593c <TS_IO_Read>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8003f1c:	7d3b      	ldrb	r3, [r7, #20]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	111b      	asrs	r3, r3, #4
 8003f22:	f003 0204 	and.w	r2, r3, #4
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000dac 	.word	0x20000dac

08003f38 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <ft5336_Get_I2C_InitializedStatus+0x14>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000dac 	.word	0x20000dac

08003f50 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003f54:	f7ff fff0 	bl	8003f38 <ft5336_Get_I2C_InitializedStatus>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8003f5e:	f001 fcc9 	bl	80058f4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003f62:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
  }
}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000dac 	.word	0x20000dac

08003f70 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	4603      	mov	r3, r0
 8003f96:	81fb      	strh	r3, [r7, #14]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	81bb      	strh	r3, [r7, #12]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8003fa4:	89bb      	ldrh	r3, [r7, #12]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8003faa:	89bb      	ldrh	r3, [r7, #12]
 8003fac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fb0:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003fb6:	f001 fc29 	bl	800580c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8003fba:	89fb      	ldrh	r3, [r7, #14]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fab3 	bl	8005530 <CODEC_IO_Write>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	461a      	mov	r2, r3
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8003fd4:	89fb      	ldrh	r3, [r7, #14]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f640 0117 	movw	r1, #2071	; 0x817
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 faa6 	bl	8005530 <CODEC_IO_Write>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 fa99 	bl	8005530 <CODEC_IO_Write>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461a      	mov	r2, r3
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	226c      	movs	r2, #108	; 0x6c
 800400e:	2139      	movs	r1, #57	; 0x39
 8004010:	4618      	mov	r0, r3
 8004012:	f001 fa8d 	bl	8005530 <CODEC_IO_Write>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004020:	8afb      	ldrh	r3, [r7, #22]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8004026:	89fb      	ldrh	r3, [r7, #14]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2213      	movs	r2, #19
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fa7e 	bl	8005530 <CODEC_IO_Write>
 8004034:	4603      	mov	r3, r0
 8004036:	461a      	mov	r2, r3
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e00b      	b.n	8004058 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8004040:	89fb      	ldrh	r3, [r7, #14]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2203      	movs	r2, #3
 8004046:	2101      	movs	r1, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fa71 	bl	8005530 <CODEC_IO_Write>
 800404e:	4603      	mov	r3, r0
 8004050:	461a      	mov	r2, r3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8004058:	2032      	movs	r0, #50	; 0x32
 800405a:	f001 fc3f 	bl	80058dc <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800405e:	8b3b      	ldrh	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 815b 	beq.w	800431c <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 8004066:	4bbc      	ldr	r3, [pc, #752]	; (8004358 <wm8994_Init+0x3cc>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 800406c:	8b3b      	ldrh	r3, [r7, #24]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d047      	beq.n	8004102 <wm8994_Init+0x176>
 8004072:	2b03      	cmp	r3, #3
 8004074:	f000 8087 	beq.w	8004186 <wm8994_Init+0x1fa>
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 810c 	bne.w	8004296 <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800407e:	89fb      	ldrh	r3, [r7, #14]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004086:	2105      	movs	r1, #5
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fa51 	bl	8005530 <CODEC_IO_Write>
 800408e:	4603      	mov	r3, r0
 8004090:	461a      	mov	r2, r3
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004098:	89fb      	ldrh	r3, [r7, #14]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2200      	movs	r2, #0
 800409e:	f240 6101 	movw	r1, #1537	; 0x601
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fa44 	bl	8005530 <CODEC_IO_Write>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80040b2:	89fb      	ldrh	r3, [r7, #14]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2200      	movs	r2, #0
 80040b8:	f240 6102 	movw	r1, #1538	; 0x602
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fa37 	bl	8005530 <CODEC_IO_Write>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80040cc:	89fb      	ldrh	r3, [r7, #14]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2202      	movs	r2, #2
 80040d2:	f240 6104 	movw	r1, #1540	; 0x604
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 fa2a 	bl	8005530 <CODEC_IO_Write>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80040e6:	89fb      	ldrh	r3, [r7, #14]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2202      	movs	r2, #2
 80040ec:	f240 6105 	movw	r1, #1541	; 0x605
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fa1d 	bl	8005530 <CODEC_IO_Write>
 80040f6:	4603      	mov	r3, r0
 80040f8:	461a      	mov	r2, r3
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	61fb      	str	r3, [r7, #28]
      break;
 8004100:	e10f      	b.n	8004322 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004102:	89fb      	ldrh	r3, [r7, #14]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f240 3203 	movw	r2, #771	; 0x303
 800410a:	2105      	movs	r1, #5
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fa0f 	bl	8005530 <CODEC_IO_Write>
 8004112:	4603      	mov	r3, r0
 8004114:	461a      	mov	r2, r3
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800411c:	89fb      	ldrh	r3, [r7, #14]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2201      	movs	r2, #1
 8004122:	f240 6101 	movw	r1, #1537	; 0x601
 8004126:	4618      	mov	r0, r3
 8004128:	f001 fa02 	bl	8005530 <CODEC_IO_Write>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004136:	89fb      	ldrh	r3, [r7, #14]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2201      	movs	r2, #1
 800413c:	f240 6102 	movw	r1, #1538	; 0x602
 8004140:	4618      	mov	r0, r3
 8004142:	f001 f9f5 	bl	8005530 <CODEC_IO_Write>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004150:	89fb      	ldrh	r3, [r7, #14]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2200      	movs	r2, #0
 8004156:	f240 6104 	movw	r1, #1540	; 0x604
 800415a:	4618      	mov	r0, r3
 800415c:	f001 f9e8 	bl	8005530 <CODEC_IO_Write>
 8004160:	4603      	mov	r3, r0
 8004162:	461a      	mov	r2, r3
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800416a:	89fb      	ldrh	r3, [r7, #14]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2200      	movs	r2, #0
 8004170:	f240 6105 	movw	r1, #1541	; 0x605
 8004174:	4618      	mov	r0, r3
 8004176:	f001 f9db 	bl	8005530 <CODEC_IO_Write>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	61fb      	str	r3, [r7, #28]
      break;
 8004184:	e0cd      	b.n	8004322 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004186:	8afb      	ldrh	r3, [r7, #22]
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418c:	d141      	bne.n	8004212 <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800418e:	89fb      	ldrh	r3, [r7, #14]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004196:	2105      	movs	r1, #5
 8004198:	4618      	mov	r0, r3
 800419a:	f001 f9c9 	bl	8005530 <CODEC_IO_Write>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2203      	movs	r2, #3
 80041ae:	f240 6101 	movw	r1, #1537	; 0x601
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f9bc 	bl	8005530 <CODEC_IO_Write>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80041c2:	89fb      	ldrh	r3, [r7, #14]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2203      	movs	r2, #3
 80041c8:	f240 6102 	movw	r1, #1538	; 0x602
 80041cc:	4618      	mov	r0, r3
 80041ce:	f001 f9af 	bl	8005530 <CODEC_IO_Write>
 80041d2:	4603      	mov	r3, r0
 80041d4:	461a      	mov	r2, r3
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80041dc:	89fb      	ldrh	r3, [r7, #14]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2203      	movs	r2, #3
 80041e2:	f240 6104 	movw	r1, #1540	; 0x604
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 f9a2 	bl	8005530 <CODEC_IO_Write>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80041f6:	89fb      	ldrh	r3, [r7, #14]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2203      	movs	r2, #3
 80041fc:	f240 6105 	movw	r1, #1541	; 0x605
 8004200:	4618      	mov	r0, r3
 8004202:	f001 f995 	bl	8005530 <CODEC_IO_Write>
 8004206:	4603      	mov	r3, r0
 8004208:	461a      	mov	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8004210:	e087      	b.n	8004322 <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004212:	89fb      	ldrh	r3, [r7, #14]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f640 720f 	movw	r2, #3855	; 0xf0f
 800421a:	2105      	movs	r1, #5
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f987 	bl	8005530 <CODEC_IO_Write>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800422c:	89fb      	ldrh	r3, [r7, #14]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2201      	movs	r2, #1
 8004232:	f240 6101 	movw	r1, #1537	; 0x601
 8004236:	4618      	mov	r0, r3
 8004238:	f001 f97a 	bl	8005530 <CODEC_IO_Write>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004246:	89fb      	ldrh	r3, [r7, #14]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2201      	movs	r2, #1
 800424c:	f240 6102 	movw	r1, #1538	; 0x602
 8004250:	4618      	mov	r0, r3
 8004252:	f001 f96d 	bl	8005530 <CODEC_IO_Write>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004260:	89fb      	ldrh	r3, [r7, #14]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2202      	movs	r2, #2
 8004266:	f240 6104 	movw	r1, #1540	; 0x604
 800426a:	4618      	mov	r0, r3
 800426c:	f001 f960 	bl	8005530 <CODEC_IO_Write>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800427a:	89fb      	ldrh	r3, [r7, #14]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2202      	movs	r2, #2
 8004280:	f240 6105 	movw	r1, #1541	; 0x605
 8004284:	4618      	mov	r0, r3
 8004286:	f001 f953 	bl	8005530 <CODEC_IO_Write>
 800428a:	4603      	mov	r3, r0
 800428c:	461a      	mov	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	61fb      	str	r3, [r7, #28]
      break;
 8004294:	e045      	b.n	8004322 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004296:	89fb      	ldrh	r3, [r7, #14]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f240 3203 	movw	r2, #771	; 0x303
 800429e:	2105      	movs	r1, #5
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 f945 	bl	8005530 <CODEC_IO_Write>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80042b0:	89fb      	ldrh	r3, [r7, #14]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2201      	movs	r2, #1
 80042b6:	f240 6101 	movw	r1, #1537	; 0x601
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f938 	bl	8005530 <CODEC_IO_Write>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	4413      	add	r3, r2
 80042c8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80042ca:	89fb      	ldrh	r3, [r7, #14]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2201      	movs	r2, #1
 80042d0:	f240 6102 	movw	r1, #1538	; 0x602
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 f92b 	bl	8005530 <CODEC_IO_Write>
 80042da:	4603      	mov	r3, r0
 80042dc:	461a      	mov	r2, r3
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80042e4:	89fb      	ldrh	r3, [r7, #14]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	f240 6104 	movw	r1, #1540	; 0x604
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f91e 	bl	8005530 <CODEC_IO_Write>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2200      	movs	r2, #0
 8004304:	f240 6105 	movw	r1, #1541	; 0x605
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f911 	bl	8005530 <CODEC_IO_Write>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	61fb      	str	r3, [r7, #28]
      break;
 8004318:	bf00      	nop
 800431a:	e002      	b.n	8004322 <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <wm8994_Init+0x3cc>)
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8004322:	8afb      	ldrh	r3, [r7, #22]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 81a7 	beq.w	8004678 <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <wm8994_Init+0x3d0>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004330:	8afb      	ldrh	r3, [r7, #22]
 8004332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004336:	d013      	beq.n	8004360 <wm8994_Init+0x3d4>
 8004338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433c:	dc04      	bgt.n	8004348 <wm8994_Init+0x3bc>
 800433e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004342:	f000 80cf 	beq.w	80044e4 <wm8994_Init+0x558>
 8004346:	e192      	b.n	800466e <wm8994_Init+0x6e2>
 8004348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434c:	d057      	beq.n	80043fe <wm8994_Init+0x472>
 800434e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004352:	f000 8116 	beq.w	8004582 <wm8994_Init+0x5f6>
 8004356:	e18a      	b.n	800466e <wm8994_Init+0x6e2>
 8004358:	20000db4 	.word	0x20000db4
 800435c:	20000db8 	.word	0x20000db8
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8004360:	89fb      	ldrh	r3, [r7, #14]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8004368:	2104      	movs	r1, #4
 800436a:	4618      	mov	r0, r3
 800436c:	f001 f8e0 	bl	8005530 <CODEC_IO_Write>
 8004370:	4603      	mov	r3, r0
 8004372:	461a      	mov	r2, r3
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800437a:	89fb      	ldrh	r3, [r7, #14]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	22db      	movs	r2, #219	; 0xdb
 8004380:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004384:	4618      	mov	r0, r3
 8004386:	f001 f8d3 	bl	8005530 <CODEC_IO_Write>
 800438a:	4603      	mov	r3, r0
 800438c:	461a      	mov	r2, r3
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8004394:	89fb      	ldrh	r3, [r7, #14]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 f8c6 	bl	8005530 <CODEC_IO_Write>
 80043a4:	4603      	mov	r3, r0
 80043a6:	461a      	mov	r2, r3
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80043ae:	89fb      	ldrh	r3, [r7, #14]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2202      	movs	r2, #2
 80043b4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80043b8:	4618      	mov	r0, r3
 80043ba:	f001 f8b9 	bl	8005530 <CODEC_IO_Write>
 80043be:	4603      	mov	r3, r0
 80043c0:	461a      	mov	r2, r3
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80043c8:	89fb      	ldrh	r3, [r7, #14]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2202      	movs	r2, #2
 80043ce:	f240 6109 	movw	r1, #1545	; 0x609
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 f8ac 	bl	8005530 <CODEC_IO_Write>
 80043d8:	4603      	mov	r3, r0
 80043da:	461a      	mov	r2, r3
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80043e2:	89fb      	ldrh	r3, [r7, #14]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	220e      	movs	r2, #14
 80043e8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 f89f 	bl	8005530 <CODEC_IO_Write>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	61fb      	str	r3, [r7, #28]
      break;
 80043fc:	e13f      	b.n	800467e <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80043fe:	89fb      	ldrh	r3, [r7, #14]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2211      	movs	r2, #17
 8004404:	2128      	movs	r1, #40	; 0x28
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f892 	bl	8005530 <CODEC_IO_Write>
 800440c:	4603      	mov	r3, r0
 800440e:	461a      	mov	r2, r3
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8004416:	89fb      	ldrh	r3, [r7, #14]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2235      	movs	r2, #53	; 0x35
 800441c:	2129      	movs	r1, #41	; 0x29
 800441e:	4618      	mov	r0, r3
 8004420:	f001 f886 	bl	8005530 <CODEC_IO_Write>
 8004424:	4603      	mov	r3, r0
 8004426:	461a      	mov	r2, r3
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800442e:	89fb      	ldrh	r3, [r7, #14]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2235      	movs	r2, #53	; 0x35
 8004434:	212a      	movs	r1, #42	; 0x2a
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f87a 	bl	8005530 <CODEC_IO_Write>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8004446:	89fb      	ldrh	r3, [r7, #14]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f240 3203 	movw	r2, #771	; 0x303
 800444e:	2104      	movs	r1, #4
 8004450:	4618      	mov	r0, r3
 8004452:	f001 f86d 	bl	8005530 <CODEC_IO_Write>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004460:	89fb      	ldrh	r3, [r7, #14]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	22db      	movs	r2, #219	; 0xdb
 8004466:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800446a:	4618      	mov	r0, r3
 800446c:	f001 f860 	bl	8005530 <CODEC_IO_Write>
 8004470:	4603      	mov	r3, r0
 8004472:	461a      	mov	r2, r3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800447a:	89fb      	ldrh	r3, [r7, #14]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f246 3250 	movw	r2, #25424	; 0x6350
 8004482:	2102      	movs	r1, #2
 8004484:	4618      	mov	r0, r3
 8004486:	f001 f853 	bl	8005530 <CODEC_IO_Write>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004494:	89fb      	ldrh	r3, [r7, #14]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2202      	movs	r2, #2
 800449a:	f240 6106 	movw	r1, #1542	; 0x606
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 f846 	bl	8005530 <CODEC_IO_Write>
 80044a4:	4603      	mov	r3, r0
 80044a6:	461a      	mov	r2, r3
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	4413      	add	r3, r2
 80044ac:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80044ae:	89fb      	ldrh	r3, [r7, #14]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2202      	movs	r2, #2
 80044b4:	f240 6107 	movw	r1, #1543	; 0x607
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f839 	bl	8005530 <CODEC_IO_Write>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	4413      	add	r3, r2
 80044c6:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80044c8:	89fb      	ldrh	r3, [r7, #14]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	220d      	movs	r2, #13
 80044ce:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 f82c 	bl	8005530 <CODEC_IO_Write>
 80044d8:	4603      	mov	r3, r0
 80044da:	461a      	mov	r2, r3
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	61fb      	str	r3, [r7, #28]
      break;
 80044e2:	e0cc      	b.n	800467e <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80044e4:	89fb      	ldrh	r3, [r7, #14]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80044ec:	2104      	movs	r1, #4
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f81e 	bl	8005530 <CODEC_IO_Write>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80044fe:	89fb      	ldrh	r3, [r7, #14]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	22db      	movs	r2, #219	; 0xdb
 8004504:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004508:	4618      	mov	r0, r3
 800450a:	f001 f811 	bl	8005530 <CODEC_IO_Write>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004518:	89fb      	ldrh	r3, [r7, #14]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f246 3250 	movw	r2, #25424	; 0x6350
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f001 f804 	bl	8005530 <CODEC_IO_Write>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004532:	89fb      	ldrh	r3, [r7, #14]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2202      	movs	r2, #2
 8004538:	f240 6106 	movw	r1, #1542	; 0x606
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fff7 	bl	8005530 <CODEC_IO_Write>
 8004542:	4603      	mov	r3, r0
 8004544:	461a      	mov	r2, r3
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800454c:	89fb      	ldrh	r3, [r7, #14]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2202      	movs	r2, #2
 8004552:	f240 6107 	movw	r1, #1543	; 0x607
 8004556:	4618      	mov	r0, r3
 8004558:	f000 ffea 	bl	8005530 <CODEC_IO_Write>
 800455c:	4603      	mov	r3, r0
 800455e:	461a      	mov	r2, r3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004566:	89fb      	ldrh	r3, [r7, #14]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	220d      	movs	r2, #13
 800456c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004570:	4618      	mov	r0, r3
 8004572:	f000 ffdd 	bl	8005530 <CODEC_IO_Write>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	61fb      	str	r3, [r7, #28]
      break; 
 8004580:	e07d      	b.n	800467e <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f640 723c 	movw	r2, #3900	; 0xf3c
 800458a:	2104      	movs	r1, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f000 ffcf 	bl	8005530 <CODEC_IO_Write>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800459c:	89fb      	ldrh	r3, [r7, #14]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	22db      	movs	r2, #219	; 0xdb
 80045a2:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 ffc2 	bl	8005530 <CODEC_IO_Write>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80045b6:	89fb      	ldrh	r3, [r7, #14]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	22db      	movs	r2, #219	; 0xdb
 80045bc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 ffb5 	bl	8005530 <CODEC_IO_Write>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80045d0:	89fb      	ldrh	r3, [r7, #14]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80045d8:	2102      	movs	r1, #2
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 ffa8 	bl	8005530 <CODEC_IO_Write>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	4413      	add	r3, r2
 80045e8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2202      	movs	r2, #2
 80045f0:	f240 6106 	movw	r1, #1542	; 0x606
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 ff9b 	bl	8005530 <CODEC_IO_Write>
 80045fa:	4603      	mov	r3, r0
 80045fc:	461a      	mov	r2, r3
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2202      	movs	r2, #2
 800460a:	f240 6107 	movw	r1, #1543	; 0x607
 800460e:	4618      	mov	r0, r3
 8004610:	f000 ff8e 	bl	8005530 <CODEC_IO_Write>
 8004614:	4603      	mov	r3, r0
 8004616:	461a      	mov	r2, r3
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800461e:	89fb      	ldrh	r3, [r7, #14]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2202      	movs	r2, #2
 8004624:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004628:	4618      	mov	r0, r3
 800462a:	f000 ff81 	bl	8005530 <CODEC_IO_Write>
 800462e:	4603      	mov	r3, r0
 8004630:	461a      	mov	r2, r3
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004638:	89fb      	ldrh	r3, [r7, #14]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2202      	movs	r2, #2
 800463e:	f240 6109 	movw	r1, #1545	; 0x609
 8004642:	4618      	mov	r0, r3
 8004644:	f000 ff74 	bl	8005530 <CODEC_IO_Write>
 8004648:	4603      	mov	r3, r0
 800464a:	461a      	mov	r2, r3
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	4413      	add	r3, r2
 8004650:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	220d      	movs	r2, #13
 8004658:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800465c:	4618      	mov	r0, r3
 800465e:	f000 ff67 	bl	8005530 <CODEC_IO_Write>
 8004662:	4603      	mov	r3, r0
 8004664:	461a      	mov	r2, r3
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	61fb      	str	r3, [r7, #28]
      break;    
 800466c:	e007      	b.n	800467e <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	3301      	adds	r3, #1
 8004672:	61fb      	str	r3, [r7, #28]
      break;
 8004674:	bf00      	nop
 8004676:	e002      	b.n	800467e <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 8004678:	4b95      	ldr	r3, [pc, #596]	; (80048d0 <wm8994_Init+0x944>)
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f245 6222 	movw	r2, #22050	; 0x5622
 8004684:	4293      	cmp	r3, r2
 8004686:	d076      	beq.n	8004776 <wm8994_Init+0x7ea>
 8004688:	f245 6222 	movw	r2, #22050	; 0x5622
 800468c:	4293      	cmp	r3, r2
 800468e:	d80a      	bhi.n	80046a6 <wm8994_Init+0x71a>
 8004690:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004694:	4293      	cmp	r3, r2
 8004696:	d060      	beq.n	800475a <wm8994_Init+0x7ce>
 8004698:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800469c:	d025      	beq.n	80046ea <wm8994_Init+0x75e>
 800469e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80046a2:	d014      	beq.n	80046ce <wm8994_Init+0x742>
 80046a4:	e083      	b.n	80047ae <wm8994_Init+0x822>
 80046a6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d071      	beq.n	8004792 <wm8994_Init+0x806>
 80046ae:	f64a 4244 	movw	r2, #44100	; 0xac44
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d803      	bhi.n	80046be <wm8994_Init+0x732>
 80046b6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80046ba:	d024      	beq.n	8004706 <wm8994_Init+0x77a>
 80046bc:	e077      	b.n	80047ae <wm8994_Init+0x822>
 80046be:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02d      	beq.n	8004722 <wm8994_Init+0x796>
 80046c6:	4a83      	ldr	r2, [pc, #524]	; (80048d4 <wm8994_Init+0x948>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d038      	beq.n	800473e <wm8994_Init+0x7b2>
 80046cc:	e06f      	b.n	80047ae <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80046ce:	89fb      	ldrh	r3, [r7, #14]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2203      	movs	r2, #3
 80046d4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 ff29 	bl	8005530 <CODEC_IO_Write>
 80046de:	4603      	mov	r3, r0
 80046e0:	461a      	mov	r2, r3
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	61fb      	str	r3, [r7, #28]
    break;
 80046e8:	e06f      	b.n	80047ca <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80046ea:	89fb      	ldrh	r3, [r7, #14]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2233      	movs	r2, #51	; 0x33
 80046f0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 ff1b 	bl	8005530 <CODEC_IO_Write>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	61fb      	str	r3, [r7, #28]
    break;
 8004704:	e061      	b.n	80047ca <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004706:	89fb      	ldrh	r3, [r7, #14]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2263      	movs	r2, #99	; 0x63
 800470c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004710:	4618      	mov	r0, r3
 8004712:	f000 ff0d 	bl	8005530 <CODEC_IO_Write>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	61fb      	str	r3, [r7, #28]
    break;
 8004720:	e053      	b.n	80047ca <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004722:	89fb      	ldrh	r3, [r7, #14]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2283      	movs	r2, #131	; 0x83
 8004728:	f44f 7104 	mov.w	r1, #528	; 0x210
 800472c:	4618      	mov	r0, r3
 800472e:	f000 feff 	bl	8005530 <CODEC_IO_Write>
 8004732:	4603      	mov	r3, r0
 8004734:	461a      	mov	r2, r3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	61fb      	str	r3, [r7, #28]
    break;
 800473c:	e045      	b.n	80047ca <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800473e:	89fb      	ldrh	r3, [r7, #14]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	22a3      	movs	r2, #163	; 0xa3
 8004744:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fef1 	bl	8005530 <CODEC_IO_Write>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	61fb      	str	r3, [r7, #28]
    break;
 8004758:	e037      	b.n	80047ca <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800475a:	89fb      	ldrh	r3, [r7, #14]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2213      	movs	r2, #19
 8004760:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fee3 	bl	8005530 <CODEC_IO_Write>
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	61fb      	str	r3, [r7, #28]
    break;
 8004774:	e029      	b.n	80047ca <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004776:	89fb      	ldrh	r3, [r7, #14]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2243      	movs	r2, #67	; 0x43
 800477c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fed5 	bl	8005530 <CODEC_IO_Write>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	61fb      	str	r3, [r7, #28]
    break;
 8004790:	e01b      	b.n	80047ca <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004792:	89fb      	ldrh	r3, [r7, #14]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2273      	movs	r2, #115	; 0x73
 8004798:	f44f 7104 	mov.w	r1, #528	; 0x210
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fec7 	bl	8005530 <CODEC_IO_Write>
 80047a2:	4603      	mov	r3, r0
 80047a4:	461a      	mov	r2, r3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	61fb      	str	r3, [r7, #28]
    break; 
 80047ac:	e00d      	b.n	80047ca <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80047ae:	89fb      	ldrh	r3, [r7, #14]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2283      	movs	r2, #131	; 0x83
 80047b4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 feb9 	bl	8005530 <CODEC_IO_Write>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	61fb      	str	r3, [r7, #28]
    break; 
 80047c8:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80047ca:	8afb      	ldrh	r3, [r7, #22]
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	d10e      	bne.n	80047f0 <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80047d2:	89fb      	ldrh	r3, [r7, #14]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f244 0218 	movw	r2, #16408	; 0x4018
 80047da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fea6 	bl	8005530 <CODEC_IO_Write>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461a      	mov	r2, r3
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e00d      	b.n	800480c <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80047f0:	89fb      	ldrh	r3, [r7, #14]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f244 0210 	movw	r2, #16400	; 0x4010
 80047f8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fe97 	bl	8005530 <CODEC_IO_Write>
 8004802:	4603      	mov	r3, r0
 8004804:	461a      	mov	r2, r3
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 800480c:	89fb      	ldrh	r3, [r7, #14]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2200      	movs	r2, #0
 8004812:	f240 3102 	movw	r1, #770	; 0x302
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fe8a 	bl	8005530 <CODEC_IO_Write>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8004826:	89fb      	ldrh	r3, [r7, #14]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	220a      	movs	r2, #10
 800482c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fe7d 	bl	8005530 <CODEC_IO_Write>
 8004836:	4603      	mov	r3, r0
 8004838:	461a      	mov	r2, r3
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8004840:	89fb      	ldrh	r3, [r7, #14]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2201      	movs	r2, #1
 8004846:	f44f 7100 	mov.w	r1, #512	; 0x200
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fe70 	bl	8005530 <CODEC_IO_Write>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800485a:	8b3b      	ldrh	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 817b 	beq.w	8004b58 <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8004862:	8b3b      	ldrh	r3, [r7, #24]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d157      	bne.n	8004918 <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004868:	89fb      	ldrh	r3, [r7, #14]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004870:	212d      	movs	r1, #45	; 0x2d
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fe5c 	bl	8005530 <CODEC_IO_Write>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	4413      	add	r3, r2
 8004880:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8004882:	89fb      	ldrh	r3, [r7, #14]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800488a:	212e      	movs	r1, #46	; 0x2e
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fe4f 	bl	8005530 <CODEC_IO_Write>
 8004892:	4603      	mov	r3, r0
 8004894:	461a      	mov	r2, r3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <wm8994_Init+0x94c>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01b      	beq.n	80048dc <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80048a4:	89fb      	ldrh	r3, [r7, #14]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80048ac:	f44f 7188 	mov.w	r1, #272	; 0x110
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fe3d 	bl	8005530 <CODEC_IO_Write>
 80048b6:	4603      	mov	r3, r0
 80048b8:	461a      	mov	r2, r3
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <wm8994_Init+0x94c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80048c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80048ca:	f001 f807 	bl	80058dc <AUDIO_IO_Delay>
 80048ce:	e016      	b.n	80048fe <wm8994_Init+0x972>
 80048d0:	20000db8 	.word	0x20000db8
 80048d4:	00017700 	.word	0x00017700
 80048d8:	2000005c 	.word	0x2000005c
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80048dc:	89fb      	ldrh	r3, [r7, #14]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f248 1208 	movw	r2, #33032	; 0x8108
 80048e4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fe21 	bl	8005530 <CODEC_IO_Write>
 80048ee:	4603      	mov	r3, r0
 80048f0:	461a      	mov	r2, r3
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80048f8:	2032      	movs	r0, #50	; 0x32
 80048fa:	f000 ffef 	bl	80058dc <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80048fe:	89fb      	ldrh	r3, [r7, #14]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2200      	movs	r2, #0
 8004904:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fe11 	bl	8005530 <CODEC_IO_Write>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004920:	2103      	movs	r1, #3
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fe04 	bl	8005530 <CODEC_IO_Write>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8004932:	89fb      	ldrh	r3, [r7, #14]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2200      	movs	r2, #0
 8004938:	2122      	movs	r1, #34	; 0x22
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fdf8 	bl	8005530 <CODEC_IO_Write>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800494a:	89fb      	ldrh	r3, [r7, #14]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2200      	movs	r2, #0
 8004950:	2123      	movs	r1, #35	; 0x23
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fdec 	bl	8005530 <CODEC_IO_Write>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f44f 7240 	mov.w	r2, #768	; 0x300
 800496a:	2136      	movs	r1, #54	; 0x36
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fddf 	bl	8005530 <CODEC_IO_Write>
 8004972:	4603      	mov	r3, r0
 8004974:	461a      	mov	r2, r3
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800497c:	89fb      	ldrh	r3, [r7, #14]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f243 0203 	movw	r2, #12291	; 0x3003
 8004984:	2101      	movs	r1, #1
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fdd2 	bl	8005530 <CODEC_IO_Write>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004996:	8afb      	ldrh	r3, [r7, #22]
 8004998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800499c:	d10d      	bne.n	80049ba <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800499e:	89fb      	ldrh	r3, [r7, #14]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f240 2205 	movw	r2, #517	; 0x205
 80049a6:	2151      	movs	r1, #81	; 0x51
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fdc1 	bl	8005530 <CODEC_IO_Write>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461a      	mov	r2, r3
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	e00b      	b.n	80049d2 <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80049ba:	89fb      	ldrh	r3, [r7, #14]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2205      	movs	r2, #5
 80049c0:	2151      	movs	r1, #81	; 0x51
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fdb4 	bl	8005530 <CODEC_IO_Write>
 80049c8:	4603      	mov	r3, r0
 80049ca:	461a      	mov	r2, r3
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80049d2:	8b7b      	ldrh	r3, [r7, #26]
 80049d4:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80049d8:	f043 0303 	orr.w	r3, r3, #3
 80049dc:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80049de:	89fb      	ldrh	r3, [r7, #14]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	8b7a      	ldrh	r2, [r7, #26]
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fda2 	bl	8005530 <CODEC_IO_Write>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80049f6:	89fb      	ldrh	r3, [r7, #14]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2222      	movs	r2, #34	; 0x22
 80049fc:	2160      	movs	r1, #96	; 0x60
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fd96 	bl	8005530 <CODEC_IO_Write>
 8004a04:	4603      	mov	r3, r0
 8004a06:	461a      	mov	r2, r3
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8004a0e:	89fb      	ldrh	r3, [r7, #14]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f649 7225 	movw	r2, #40741	; 0x9f25
 8004a16:	214c      	movs	r1, #76	; 0x4c
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fd89 	bl	8005530 <CODEC_IO_Write>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	461a      	mov	r2, r3
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8004a28:	200f      	movs	r0, #15
 8004a2a:	f000 ff57 	bl	80058dc <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8004a2e:	89fb      	ldrh	r3, [r7, #14]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2201      	movs	r2, #1
 8004a34:	212d      	movs	r1, #45	; 0x2d
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fd7a 	bl	8005530 <CODEC_IO_Write>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	461a      	mov	r2, r3
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8004a46:	89fb      	ldrh	r3, [r7, #14]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	212e      	movs	r1, #46	; 0x2e
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fd6e 	bl	8005530 <CODEC_IO_Write>
 8004a54:	4603      	mov	r3, r0
 8004a56:	461a      	mov	r2, r3
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8004a5e:	89fb      	ldrh	r3, [r7, #14]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004a66:	2103      	movs	r1, #3
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fd61 	bl	8005530 <CODEC_IO_Write>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8004a78:	89fb      	ldrh	r3, [r7, #14]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2233      	movs	r2, #51	; 0x33
 8004a7e:	2154      	movs	r1, #84	; 0x54
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fd55 	bl	8005530 <CODEC_IO_Write>
 8004a86:	4603      	mov	r3, r0
 8004a88:	461a      	mov	r2, r3
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8004a90:	f240 1001 	movw	r0, #257	; 0x101
 8004a94:	f000 ff22 	bl	80058dc <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8004a98:	89fb      	ldrh	r3, [r7, #14]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	22ee      	movs	r2, #238	; 0xee
 8004a9e:	2160      	movs	r1, #96	; 0x60
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fd45 	bl	8005530 <CODEC_IO_Write>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8004ab0:	89fb      	ldrh	r3, [r7, #14]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	22c0      	movs	r2, #192	; 0xc0
 8004ab6:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fd38 	bl	8005530 <CODEC_IO_Write>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8004aca:	89fb      	ldrh	r3, [r7, #14]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	22c0      	movs	r2, #192	; 0xc0
 8004ad0:	f240 6111 	movw	r1, #1553	; 0x611
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fd2b 	bl	8005530 <CODEC_IO_Write>
 8004ada:	4603      	mov	r3, r0
 8004adc:	461a      	mov	r2, r3
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8004ae4:	89fb      	ldrh	r3, [r7, #14]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2210      	movs	r2, #16
 8004aea:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fd1e 	bl	8005530 <CODEC_IO_Write>
 8004af4:	4603      	mov	r3, r0
 8004af6:	461a      	mov	r2, r3
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8004afe:	89fb      	ldrh	r3, [r7, #14]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	22c0      	movs	r2, #192	; 0xc0
 8004b04:	f240 6112 	movw	r1, #1554	; 0x612
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fd11 	bl	8005530 <CODEC_IO_Write>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	461a      	mov	r2, r3
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8004b18:	89fb      	ldrh	r3, [r7, #14]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	22c0      	movs	r2, #192	; 0xc0
 8004b1e:	f240 6113 	movw	r1, #1555	; 0x613
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fd04 	bl	8005530 <CODEC_IO_Write>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8004b32:	89fb      	ldrh	r3, [r7, #14]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2210      	movs	r2, #16
 8004b38:	f240 4122 	movw	r1, #1058	; 0x422
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fcf7 	bl	8005530 <CODEC_IO_Write>
 8004b42:	4603      	mov	r3, r0
 8004b44:	461a      	mov	r2, r3
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004b4c:	7afa      	ldrb	r2, [r7, #11]
 8004b4e:	89fb      	ldrh	r3, [r7, #14]
 8004b50:	4611      	mov	r1, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f984 	bl	8004e60 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8004b58:	8afb      	ldrh	r3, [r7, #22]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80a6 	beq.w	8004cac <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004b60:	8afb      	ldrh	r3, [r7, #22]
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d003      	beq.n	8004b70 <wm8994_Init+0xbe4>
 8004b68:	8afb      	ldrh	r3, [r7, #22]
 8004b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6e:	d12b      	bne.n	8004bc8 <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004b70:	8b7b      	ldrh	r3, [r7, #26]
 8004b72:	f043 0313 	orr.w	r3, r3, #19
 8004b76:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	8b7a      	ldrh	r2, [r7, #26]
 8004b7e:	2101      	movs	r1, #1
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fcd5 	bl	8005530 <CODEC_IO_Write>
 8004b86:	4603      	mov	r3, r0
 8004b88:	461a      	mov	r2, r3
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004b90:	89fb      	ldrh	r3, [r7, #14]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2202      	movs	r2, #2
 8004b96:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fcc8 	bl	8005530 <CODEC_IO_Write>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8004baa:	89fb      	ldrh	r3, [r7, #14]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004bb2:	f240 4111 	movw	r1, #1041	; 0x411
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fcba 	bl	8005530 <CODEC_IO_Write>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	e06b      	b.n	8004ca0 <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004bc8:	8afb      	ldrh	r3, [r7, #22]
 8004bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bce:	d139      	bne.n	8004c44 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004bd0:	8b7b      	ldrh	r3, [r7, #26]
 8004bd2:	f043 0313 	orr.w	r3, r3, #19
 8004bd6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	8b7a      	ldrh	r2, [r7, #26]
 8004bde:	2101      	movs	r1, #1
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fca5 	bl	8005530 <CODEC_IO_Write>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461a      	mov	r2, r3
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fc98 	bl	8005530 <CODEC_IO_Write>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004c0a:	89fb      	ldrh	r3, [r7, #14]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004c12:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fc8a 	bl	8005530 <CODEC_IO_Write>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8004c26:	89fb      	ldrh	r3, [r7, #14]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004c2e:	f240 4111 	movw	r1, #1041	; 0x411
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fc7c 	bl	8005530 <CODEC_IO_Write>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e02d      	b.n	8004ca0 <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8004c44:	8afb      	ldrh	r3, [r7, #22]
 8004c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4a:	d003      	beq.n	8004c54 <wm8994_Init+0xcc8>
 8004c4c:	8afb      	ldrh	r3, [r7, #22]
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c52:	d125      	bne.n	8004ca0 <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	220b      	movs	r2, #11
 8004c5a:	2118      	movs	r1, #24
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fc67 	bl	8005530 <CODEC_IO_Write>
 8004c62:	4603      	mov	r3, r0
 8004c64:	461a      	mov	r2, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8004c6c:	89fb      	ldrh	r3, [r7, #14]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	220b      	movs	r2, #11
 8004c72:	211a      	movs	r1, #26
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fc5b 	bl	8005530 <CODEC_IO_Write>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004c84:	89fb      	ldrh	r3, [r7, #14]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004c8c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fc4d 	bl	8005530 <CODEC_IO_Write>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004ca0:	7afa      	ldrb	r2, [r7, #11]
 8004ca2:	89fb      	ldrh	r3, [r7, #14]
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f8da 	bl	8004e60 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8004cac:	69fb      	ldr	r3, [r7, #28]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop

08004cb8 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8004cbc:	f000 fdb0 	bl	8005820 <AUDIO_IO_DeInit>
}
 8004cc0:	bf00      	nop
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8004cce:	f000 fd9d 	bl	800580c <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fdd3 	bl	8005884 <AUDIO_IO_Read>
 8004cde:	4603      	mov	r3, r0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	80fb      	strh	r3, [r7, #6]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f9d1 	bl	80050a8 <wm8994_SetMute>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f9bc 	bl	80050a8 <wm8994_SetMute>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4413      	add	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	2102      	movs	r1, #2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fbf5 	bl	8005530 <CODEC_IO_Write>
 8004d46:	4603      	mov	r3, r0
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8004d50:	68fb      	ldr	r3, [r7, #12]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 f99b 	bl	80050a8 <wm8994_SetMute>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004d94:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <wm8994_Stop+0xd8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d05a      	beq.n	8004e52 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 f981 	bl	80050a8 <wm8994_SetMute>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d04e      	beq.n	8004e52 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dbc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fbb5 	bl	8005530 <CODEC_IO_Write>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dd8:	f240 4122 	movw	r1, #1058	; 0x422
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fba7 	bl	8005530 <CODEC_IO_Write>
 8004de2:	4603      	mov	r3, r0
 8004de4:	461a      	mov	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2200      	movs	r2, #0
 8004df2:	212d      	movs	r1, #45	; 0x2d
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fb9b 	bl	8005530 <CODEC_IO_Write>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2200      	movs	r2, #0
 8004e0a:	212e      	movs	r1, #46	; 0x2e
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fb8f 	bl	8005530 <CODEC_IO_Write>
 8004e12:	4603      	mov	r3, r0
 8004e14:	461a      	mov	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2200      	movs	r2, #0
 8004e22:	2105      	movs	r1, #5
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fb83 	bl	8005530 <CODEC_IO_Write>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fb77 	bl	8005530 <CODEC_IO_Write>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8004e4c:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <wm8994_Stop+0xd8>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000db4 	.word	0x20000db4

08004e60 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	460a      	mov	r2, r1
 8004e6a:	80fb      	strh	r3, [r7, #6]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004e74:	797b      	ldrb	r3, [r7, #5]
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d80b      	bhi.n	8004e92 <wm8994_SetVolume+0x32>
 8004e7a:	797a      	ldrb	r2, [r7, #5]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	019b      	lsls	r3, r3, #6
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	4a86      	ldr	r2, [pc, #536]	; (800509c <wm8994_SetVolume+0x23c>)
 8004e84:	fb82 1203 	smull	r1, r2, r2, r3
 8004e88:	1152      	asrs	r2, r2, #5
 8004e8a:	17db      	asrs	r3, r3, #31
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	e000      	b.n	8004e94 <wm8994_SetVolume+0x34>
 8004e92:	2364      	movs	r3, #100	; 0x64
 8004e94:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004e96:	4b82      	ldr	r3, [pc, #520]	; (80050a0 <wm8994_SetVolume+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 809b 	beq.w	8004fd6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004ea0:	7afb      	ldrb	r3, [r7, #11]
 8004ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ea4:	d93d      	bls.n	8004f22 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f8fc 	bl	80050a8 <wm8994_SetMute>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f240 127f 	movw	r2, #383	; 0x17f
 8004ec0:	211c      	movs	r1, #28
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fb34 	bl	8005530 <CODEC_IO_Write>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f240 127f 	movw	r2, #383	; 0x17f
 8004eda:	211d      	movs	r1, #29
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fb27 	bl	8005530 <CODEC_IO_Write>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f240 127f 	movw	r2, #383	; 0x17f
 8004ef4:	2126      	movs	r1, #38	; 0x26
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fb1a 	bl	8005530 <CODEC_IO_Write>
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f240 127f 	movw	r2, #383	; 0x17f
 8004f0e:	2127      	movs	r1, #39	; 0x27
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fb0d 	bl	8005530 <CODEC_IO_Write>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e059      	b.n	8004fd6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8004f22:	797b      	ldrb	r3, [r7, #5]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f8bb 	bl	80050a8 <wm8994_SetMute>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e04c      	b.n	8004fd6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f8b1 	bl	80050a8 <wm8994_SetMute>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	b2d8      	uxtb	r0, r3
 8004f52:	7afb      	ldrb	r3, [r7, #11]
 8004f54:	b21b      	sxth	r3, r3
 8004f56:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004f5a:	b21b      	sxth	r3, r3
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	211c      	movs	r1, #28
 8004f62:	f000 fae5 	bl	8005530 <CODEC_IO_Write>
 8004f66:	4603      	mov	r3, r0
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8004f70:	88fb      	ldrh	r3, [r7, #6]
 8004f72:	b2d8      	uxtb	r0, r3
 8004f74:	7afb      	ldrb	r3, [r7, #11]
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004f7c:	b21b      	sxth	r3, r3
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	211d      	movs	r1, #29
 8004f84:	f000 fad4 	bl	8005530 <CODEC_IO_Write>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	b2d8      	uxtb	r0, r3
 8004f96:	7afb      	ldrb	r3, [r7, #11]
 8004f98:	b21b      	sxth	r3, r3
 8004f9a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004f9e:	b21b      	sxth	r3, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	2126      	movs	r1, #38	; 0x26
 8004fa6:	f000 fac3 	bl	8005530 <CODEC_IO_Write>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	b2d8      	uxtb	r0, r3
 8004fb8:	7afb      	ldrb	r3, [r7, #11]
 8004fba:	b21b      	sxth	r3, r3
 8004fbc:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004fc0:	b21b      	sxth	r3, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2127      	movs	r1, #39	; 0x27
 8004fc8:	f000 fab2 	bl	8005530 <CODEC_IO_Write>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8004fd6:	4b33      	ldr	r3, [pc, #204]	; (80050a4 <wm8994_SetVolume+0x244>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d059      	beq.n	8005092 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8004fde:	797b      	ldrb	r3, [r7, #5]
 8004fe0:	2b63      	cmp	r3, #99	; 0x63
 8004fe2:	d80c      	bhi.n	8004ffe <wm8994_SetVolume+0x19e>
 8004fe4:	797a      	ldrb	r2, [r7, #5]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	4a2b      	ldr	r2, [pc, #172]	; (800509c <wm8994_SetVolume+0x23c>)
 8004ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8004ff4:	1152      	asrs	r2, r2, #5
 8004ff6:	17db      	asrs	r3, r3, #31
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	e000      	b.n	8005000 <wm8994_SetVolume+0x1a0>
 8004ffe:	23ef      	movs	r3, #239	; 0xef
 8005000:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	b2d8      	uxtb	r0, r3
 8005006:	7afb      	ldrb	r3, [r7, #11]
 8005008:	b21b      	sxth	r3, r3
 800500a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500e:	b21b      	sxth	r3, r3
 8005010:	b29b      	uxth	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005018:	f000 fa8a 	bl	8005530 <CODEC_IO_Write>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	b2d8      	uxtb	r0, r3
 800502a:	7afb      	ldrb	r3, [r7, #11]
 800502c:	b21b      	sxth	r3, r3
 800502e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005032:	b21b      	sxth	r3, r3
 8005034:	b29b      	uxth	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	f240 4101 	movw	r1, #1025	; 0x401
 800503c:	f000 fa78 	bl	8005530 <CODEC_IO_Write>
 8005040:	4603      	mov	r3, r0
 8005042:	461a      	mov	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	b2d8      	uxtb	r0, r3
 800504e:	7afb      	ldrb	r3, [r7, #11]
 8005050:	b21b      	sxth	r3, r3
 8005052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005056:	b21b      	sxth	r3, r3
 8005058:	b29b      	uxth	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	f240 4104 	movw	r1, #1028	; 0x404
 8005060:	f000 fa66 	bl	8005530 <CODEC_IO_Write>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	b2d8      	uxtb	r0, r3
 8005072:	7afb      	ldrb	r3, [r7, #11]
 8005074:	b21b      	sxth	r3, r3
 8005076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507a:	b21b      	sxth	r3, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	f240 4105 	movw	r1, #1029	; 0x405
 8005084:	f000 fa54 	bl	8005530 <CODEC_IO_Write>
 8005088:	4603      	mov	r3, r0
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005092:	68fb      	ldr	r3, [r7, #12]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	51eb851f 	.word	0x51eb851f
 80050a0:	20000db4 	.word	0x20000db4
 80050a4:	20000db8 	.word	0x20000db8

080050a8 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80050b8:	4b21      	ldr	r3, [pc, #132]	; (8005140 <wm8994_SetMute+0x98>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d039      	beq.n	8005134 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d11c      	bne.n	8005100 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ce:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fa2c 	bl	8005530 <CODEC_IO_Write>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ea:	f240 4122 	movw	r1, #1058	; 0x422
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fa1e 	bl	8005530 <CODEC_IO_Write>
 80050f4:	4603      	mov	r3, r0
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	e019      	b.n	8005134 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2210      	movs	r2, #16
 8005106:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fa10 	bl	8005530 <CODEC_IO_Write>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2210      	movs	r2, #16
 8005120:	f240 4122 	movw	r1, #1058	; 0x422
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fa03 	bl	8005530 <CODEC_IO_Write>
 800512a:	4603      	mov	r3, r0
 800512c:	461a      	mov	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005134:	68fb      	ldr	r3, [r7, #12]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000db4 	.word	0x20000db4

08005144 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	460a      	mov	r2, r1
 800514e:	80fb      	strh	r3, [r7, #6]
 8005150:	4613      	mov	r3, r2
 8005152:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8005158:	797b      	ldrb	r3, [r7, #5]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d047      	beq.n	80051ee <wm8994_SetOutputMode+0xaa>
 800515e:	2b03      	cmp	r3, #3
 8005160:	f000 8087 	beq.w	8005272 <wm8994_SetOutputMode+0x12e>
 8005164:	2b01      	cmp	r3, #1
 8005166:	f040 80c6 	bne.w	80052f6 <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005172:	2105      	movs	r1, #5
 8005174:	4618      	mov	r0, r3
 8005176:	f000 f9db 	bl	8005530 <CODEC_IO_Write>
 800517a:	4603      	mov	r3, r0
 800517c:	461a      	mov	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2200      	movs	r2, #0
 800518a:	f240 6101 	movw	r1, #1537	; 0x601
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f9ce 	bl	8005530 <CODEC_IO_Write>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2200      	movs	r2, #0
 80051a4:	f240 6102 	movw	r1, #1538	; 0x602
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 f9c1 	bl	8005530 <CODEC_IO_Write>
 80051ae:	4603      	mov	r3, r0
 80051b0:	461a      	mov	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80051b8:	88fb      	ldrh	r3, [r7, #6]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2202      	movs	r2, #2
 80051be:	f240 6104 	movw	r1, #1540	; 0x604
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f9b4 	bl	8005530 <CODEC_IO_Write>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461a      	mov	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2202      	movs	r2, #2
 80051d8:	f240 6105 	movw	r1, #1541	; 0x605
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 f9a7 	bl	8005530 <CODEC_IO_Write>
 80051e2:	4603      	mov	r3, r0
 80051e4:	461a      	mov	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
    break;
 80051ec:	e0c5      	b.n	800537a <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f240 3203 	movw	r2, #771	; 0x303
 80051f6:	2105      	movs	r1, #5
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 f999 	bl	8005530 <CODEC_IO_Write>
 80051fe:	4603      	mov	r3, r0
 8005200:	461a      	mov	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2201      	movs	r2, #1
 800520e:	f240 6101 	movw	r1, #1537	; 0x601
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f98c 	bl	8005530 <CODEC_IO_Write>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2201      	movs	r2, #1
 8005228:	f240 6102 	movw	r1, #1538	; 0x602
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f97f 	bl	8005530 <CODEC_IO_Write>
 8005232:	4603      	mov	r3, r0
 8005234:	461a      	mov	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2200      	movs	r2, #0
 8005242:	f240 6104 	movw	r1, #1540	; 0x604
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f972 	bl	8005530 <CODEC_IO_Write>
 800524c:	4603      	mov	r3, r0
 800524e:	461a      	mov	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2200      	movs	r2, #0
 800525c:	f240 6105 	movw	r1, #1541	; 0x605
 8005260:	4618      	mov	r0, r3
 8005262:	f000 f965 	bl	8005530 <CODEC_IO_Write>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
    break;
 8005270:	e083      	b.n	800537a <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f640 720f 	movw	r2, #3855	; 0xf0f
 800527a:	2105      	movs	r1, #5
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f957 	bl	8005530 <CODEC_IO_Write>
 8005282:	4603      	mov	r3, r0
 8005284:	461a      	mov	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2201      	movs	r2, #1
 8005292:	f240 6101 	movw	r1, #1537	; 0x601
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f94a 	bl	8005530 <CODEC_IO_Write>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2201      	movs	r2, #1
 80052ac:	f240 6102 	movw	r1, #1538	; 0x602
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 f93d 	bl	8005530 <CODEC_IO_Write>
 80052b6:	4603      	mov	r3, r0
 80052b8:	461a      	mov	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2202      	movs	r2, #2
 80052c6:	f240 6104 	movw	r1, #1540	; 0x604
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f930 	bl	8005530 <CODEC_IO_Write>
 80052d0:	4603      	mov	r3, r0
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2202      	movs	r2, #2
 80052e0:	f240 6105 	movw	r1, #1541	; 0x605
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f923 	bl	8005530 <CODEC_IO_Write>
 80052ea:	4603      	mov	r3, r0
 80052ec:	461a      	mov	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
    break;
 80052f4:	e041      	b.n	800537a <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f240 3203 	movw	r2, #771	; 0x303
 80052fe:	2105      	movs	r1, #5
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f915 	bl	8005530 <CODEC_IO_Write>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2201      	movs	r2, #1
 8005316:	f240 6101 	movw	r1, #1537	; 0x601
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f908 	bl	8005530 <CODEC_IO_Write>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2201      	movs	r2, #1
 8005330:	f240 6102 	movw	r1, #1538	; 0x602
 8005334:	4618      	mov	r0, r3
 8005336:	f000 f8fb 	bl	8005530 <CODEC_IO_Write>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2200      	movs	r2, #0
 800534a:	f240 6104 	movw	r1, #1540	; 0x604
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f8ee 	bl	8005530 <CODEC_IO_Write>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2200      	movs	r2, #0
 8005364:	f240 6105 	movw	r1, #1541	; 0x605
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f8e1 	bl	8005530 <CODEC_IO_Write>
 800536e:	4603      	mov	r3, r0
 8005370:	461a      	mov	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
    break;    
 8005378:	bf00      	nop
  }  
  return counter;
 800537a:	68fb      	ldr	r3, [r7, #12]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	6039      	str	r1, [r7, #0]
 800538e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f245 6222 	movw	r2, #22050	; 0x5622
 800539a:	4293      	cmp	r3, r2
 800539c:	d076      	beq.n	800548c <wm8994_SetFrequency+0x108>
 800539e:	f245 6222 	movw	r2, #22050	; 0x5622
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d80a      	bhi.n	80053bc <wm8994_SetFrequency+0x38>
 80053a6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d060      	beq.n	8005470 <wm8994_SetFrequency+0xec>
 80053ae:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80053b2:	d025      	beq.n	8005400 <wm8994_SetFrequency+0x7c>
 80053b4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80053b8:	d014      	beq.n	80053e4 <wm8994_SetFrequency+0x60>
 80053ba:	e083      	b.n	80054c4 <wm8994_SetFrequency+0x140>
 80053bc:	f64a 4244 	movw	r2, #44100	; 0xac44
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d071      	beq.n	80054a8 <wm8994_SetFrequency+0x124>
 80053c4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d803      	bhi.n	80053d4 <wm8994_SetFrequency+0x50>
 80053cc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80053d0:	d024      	beq.n	800541c <wm8994_SetFrequency+0x98>
 80053d2:	e077      	b.n	80054c4 <wm8994_SetFrequency+0x140>
 80053d4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80053d8:	4293      	cmp	r3, r2
 80053da:	d02d      	beq.n	8005438 <wm8994_SetFrequency+0xb4>
 80053dc:	4a43      	ldr	r2, [pc, #268]	; (80054ec <wm8994_SetFrequency+0x168>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d038      	beq.n	8005454 <wm8994_SetFrequency+0xd0>
 80053e2:	e06f      	b.n	80054c4 <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2203      	movs	r2, #3
 80053ea:	f44f 7104 	mov.w	r1, #528	; 0x210
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f89e 	bl	8005530 <CODEC_IO_Write>
 80053f4:	4603      	mov	r3, r0
 80053f6:	461a      	mov	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
    break;
 80053fe:	e06f      	b.n	80054e0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2233      	movs	r2, #51	; 0x33
 8005406:	f44f 7104 	mov.w	r1, #528	; 0x210
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f890 	bl	8005530 <CODEC_IO_Write>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
    break;
 800541a:	e061      	b.n	80054e0 <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2263      	movs	r2, #99	; 0x63
 8005422:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f882 	bl	8005530 <CODEC_IO_Write>
 800542c:	4603      	mov	r3, r0
 800542e:	461a      	mov	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
    break;
 8005436:	e053      	b.n	80054e0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2283      	movs	r2, #131	; 0x83
 800543e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f874 	bl	8005530 <CODEC_IO_Write>
 8005448:	4603      	mov	r3, r0
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
    break;
 8005452:	e045      	b.n	80054e0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	22a3      	movs	r2, #163	; 0xa3
 800545a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f866 	bl	8005530 <CODEC_IO_Write>
 8005464:	4603      	mov	r3, r0
 8005466:	461a      	mov	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
    break;
 800546e:	e037      	b.n	80054e0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8005470:	88fb      	ldrh	r3, [r7, #6]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2213      	movs	r2, #19
 8005476:	f44f 7104 	mov.w	r1, #528	; 0x210
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f858 	bl	8005530 <CODEC_IO_Write>
 8005480:	4603      	mov	r3, r0
 8005482:	461a      	mov	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
    break;
 800548a:	e029      	b.n	80054e0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2243      	movs	r2, #67	; 0x43
 8005492:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f84a 	bl	8005530 <CODEC_IO_Write>
 800549c:	4603      	mov	r3, r0
 800549e:	461a      	mov	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
    break;
 80054a6:	e01b      	b.n	80054e0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2273      	movs	r2, #115	; 0x73
 80054ae:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f83c 	bl	8005530 <CODEC_IO_Write>
 80054b8:	4603      	mov	r3, r0
 80054ba:	461a      	mov	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
    break; 
 80054c2:	e00d      	b.n	80054e0 <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2283      	movs	r2, #131	; 0x83
 80054ca:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f82e 	bl	8005530 <CODEC_IO_Write>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
    break; 
 80054de:	bf00      	nop
  }
  return counter;
 80054e0:	68fb      	ldr	r3, [r7, #12]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	00017700 	.word	0x00017700

080054f0 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2200      	movs	r2, #0
 8005504:	2100      	movs	r1, #0
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f812 	bl	8005530 <CODEC_IO_Write>
 800550c:	4603      	mov	r3, r0
 800550e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <wm8994_Reset+0x38>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005516:	4b05      	ldr	r3, [pc, #20]	; (800552c <wm8994_Reset+0x3c>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

  return counter;
 800551c:	68fb      	ldr	r3, [r7, #12]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000db4 	.word	0x20000db4
 800552c:	20000db8 	.word	0x20000db8

08005530 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
 800553a:	460b      	mov	r3, r1
 800553c:	80bb      	strh	r3, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8005546:	887a      	ldrh	r2, [r7, #2]
 8005548:	88b9      	ldrh	r1, [r7, #4]
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 f96f 	bl	8005830 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	b2db      	uxtb	r3, r3
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	; 0x30
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a51      	ldr	r2, [pc, #324]	; (80056b0 <I2Cx_MspInit+0x150>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d14d      	bne.n	800560c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005570:	4b50      	ldr	r3, [pc, #320]	; (80056b4 <I2Cx_MspInit+0x154>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	4a4f      	ldr	r2, [pc, #316]	; (80056b4 <I2Cx_MspInit+0x154>)
 8005576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557a:	6313      	str	r3, [r2, #48]	; 0x30
 800557c:	4b4d      	ldr	r3, [pc, #308]	; (80056b4 <I2Cx_MspInit+0x154>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800558c:	2312      	movs	r3, #18
 800558e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005594:	2302      	movs	r3, #2
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8005598:	2304      	movs	r3, #4
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	4619      	mov	r1, r3
 80055a2:	4845      	ldr	r0, [pc, #276]	; (80056b8 <I2Cx_MspInit+0x158>)
 80055a4:	f003 fd0e 	bl	8008fc4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80055a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80055ae:	f107 031c 	add.w	r3, r7, #28
 80055b2:	4619      	mov	r1, r3
 80055b4:	4840      	ldr	r0, [pc, #256]	; (80056b8 <I2Cx_MspInit+0x158>)
 80055b6:	f003 fd05 	bl	8008fc4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80055ba:	4b3e      	ldr	r3, [pc, #248]	; (80056b4 <I2Cx_MspInit+0x154>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	4a3d      	ldr	r2, [pc, #244]	; (80056b4 <I2Cx_MspInit+0x154>)
 80055c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055c4:	6413      	str	r3, [r2, #64]	; 0x40
 80055c6:	4b3b      	ldr	r3, [pc, #236]	; (80056b4 <I2Cx_MspInit+0x154>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80055d2:	4b38      	ldr	r3, [pc, #224]	; (80056b4 <I2Cx_MspInit+0x154>)
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	4a37      	ldr	r2, [pc, #220]	; (80056b4 <I2Cx_MspInit+0x154>)
 80055d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055dc:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80055de:	4b35      	ldr	r3, [pc, #212]	; (80056b4 <I2Cx_MspInit+0x154>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	4a34      	ldr	r2, [pc, #208]	; (80056b4 <I2Cx_MspInit+0x154>)
 80055e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055e8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80055ea:	2200      	movs	r2, #0
 80055ec:	210f      	movs	r1, #15
 80055ee:	2048      	movs	r0, #72	; 0x48
 80055f0:	f002 fbea 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80055f4:	2048      	movs	r0, #72	; 0x48
 80055f6:	f002 fc03 	bl	8007e00 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80055fa:	2200      	movs	r2, #0
 80055fc:	210f      	movs	r1, #15
 80055fe:	2049      	movs	r0, #73	; 0x49
 8005600:	f002 fbe2 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005604:	2049      	movs	r0, #73	; 0x49
 8005606:	f002 fbfb 	bl	8007e00 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800560a:	e04d      	b.n	80056a8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800560c:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <I2Cx_MspInit+0x154>)
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	4a28      	ldr	r2, [pc, #160]	; (80056b4 <I2Cx_MspInit+0x154>)
 8005612:	f043 0302 	orr.w	r3, r3, #2
 8005616:	6313      	str	r3, [r2, #48]	; 0x30
 8005618:	4b26      	ldr	r3, [pc, #152]	; (80056b4 <I2Cx_MspInit+0x154>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005628:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800562a:	2312      	movs	r3, #18
 800562c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800562e:	2300      	movs	r3, #0
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005632:	2302      	movs	r3, #2
 8005634:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8005636:	2304      	movs	r3, #4
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800563a:	f107 031c 	add.w	r3, r7, #28
 800563e:	4619      	mov	r1, r3
 8005640:	481e      	ldr	r0, [pc, #120]	; (80056bc <I2Cx_MspInit+0x15c>)
 8005642:	f003 fcbf 	bl	8008fc4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8005646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800564a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800564c:	f107 031c 	add.w	r3, r7, #28
 8005650:	4619      	mov	r1, r3
 8005652:	481a      	ldr	r0, [pc, #104]	; (80056bc <I2Cx_MspInit+0x15c>)
 8005654:	f003 fcb6 	bl	8008fc4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8005658:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <I2Cx_MspInit+0x154>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <I2Cx_MspInit+0x154>)
 800565e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005662:	6413      	str	r3, [r2, #64]	; 0x40
 8005664:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <I2Cx_MspInit+0x154>)
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8005670:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <I2Cx_MspInit+0x154>)
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	4a0f      	ldr	r2, [pc, #60]	; (80056b4 <I2Cx_MspInit+0x154>)
 8005676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800567a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800567c:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <I2Cx_MspInit+0x154>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <I2Cx_MspInit+0x154>)
 8005682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005686:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8005688:	2200      	movs	r2, #0
 800568a:	210f      	movs	r1, #15
 800568c:	201f      	movs	r0, #31
 800568e:	f002 fb9b 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8005692:	201f      	movs	r0, #31
 8005694:	f002 fbb4 	bl	8007e00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8005698:	2200      	movs	r2, #0
 800569a:	210f      	movs	r1, #15
 800569c:	2020      	movs	r0, #32
 800569e:	f002 fb93 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80056a2:	2020      	movs	r0, #32
 80056a4:	f002 fbac 	bl	8007e00 <HAL_NVIC_EnableIRQ>
}
 80056a8:	bf00      	nop
 80056aa:	3730      	adds	r7, #48	; 0x30
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000dbc 	.word	0x20000dbc
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40021c00 	.word	0x40021c00
 80056bc:	40020400 	.word	0x40020400

080056c0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f005 ff41 	bl	800b550 <HAL_I2C_GetState>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d125      	bne.n	8005720 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a14      	ldr	r2, [pc, #80]	; (8005728 <I2Cx_Init+0x68>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d103      	bne.n	80056e4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a13      	ldr	r2, [pc, #76]	; (800572c <I2Cx_Init+0x6c>)
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e002      	b.n	80056ea <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a12      	ldr	r2, [pc, #72]	; (8005730 <I2Cx_Init+0x70>)
 80056e8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a11      	ldr	r2, [pc, #68]	; (8005734 <I2Cx_Init+0x74>)
 80056ee:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ff23 	bl	8005560 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f005 fc2a 	bl	800af74 <HAL_I2C_Init>
  }
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000dbc 	.word	0x20000dbc
 800572c:	40005c00 	.word	0x40005c00
 8005730:	40005400 	.word	0x40005400
 8005734:	40912732 	.word	0x40912732

08005738 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af04      	add	r7, sp, #16
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	4608      	mov	r0, r1
 8005742:	4611      	mov	r1, r2
 8005744:	461a      	mov	r2, r3
 8005746:	4603      	mov	r3, r0
 8005748:	72fb      	strb	r3, [r7, #11]
 800574a:	460b      	mov	r3, r1
 800574c:	813b      	strh	r3, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005756:	7afb      	ldrb	r3, [r7, #11]
 8005758:	b299      	uxth	r1, r3
 800575a:	88f8      	ldrh	r0, [r7, #6]
 800575c:	893a      	ldrh	r2, [r7, #8]
 800575e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005762:	9302      	str	r3, [sp, #8]
 8005764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	4603      	mov	r3, r0
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f005 fdd4 	bl	800b31c <HAL_I2C_Mem_Read>
 8005774:	4603      	mov	r3, r0
 8005776:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005778:	7dfb      	ldrb	r3, [r7, #23]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800577e:	7afb      	ldrb	r3, [r7, #11]
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f832 	bl	80057ec <I2Cx_Error>
  }
  return status;    
 8005788:	7dfb      	ldrb	r3, [r7, #23]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b08a      	sub	sp, #40	; 0x28
 8005796:	af04      	add	r7, sp, #16
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	4608      	mov	r0, r1
 800579c:	4611      	mov	r1, r2
 800579e:	461a      	mov	r2, r3
 80057a0:	4603      	mov	r3, r0
 80057a2:	72fb      	strb	r3, [r7, #11]
 80057a4:	460b      	mov	r3, r1
 80057a6:	813b      	strh	r3, [r7, #8]
 80057a8:	4613      	mov	r3, r2
 80057aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	b299      	uxth	r1, r3
 80057b4:	88f8      	ldrh	r0, [r7, #6]
 80057b6:	893a      	ldrh	r2, [r7, #8]
 80057b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057bc:	9302      	str	r3, [sp, #8]
 80057be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	4603      	mov	r3, r0
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f005 fc93 	bl	800b0f4 <HAL_I2C_Mem_Write>
 80057ce:	4603      	mov	r3, r0
 80057d0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	4619      	mov	r1, r3
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f805 	bl	80057ec <I2Cx_Error>
  }
  return status;
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f005 fc4b 	bl	800b094 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff ff5e 	bl	80056c0 <I2Cx_Init>
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8005810:	4802      	ldr	r0, [pc, #8]	; (800581c <AUDIO_IO_Init+0x10>)
 8005812:	f7ff ff55 	bl	80056c0 <I2Cx_Init>
}
 8005816:	bf00      	nop
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000dbc 	.word	0x20000dbc

08005820 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
}
 8005824:	bf00      	nop
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af02      	add	r7, sp, #8
 8005836:	4603      	mov	r3, r0
 8005838:	71fb      	strb	r3, [r7, #7]
 800583a:	460b      	mov	r3, r1
 800583c:	80bb      	strh	r3, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8005842:	887b      	ldrh	r3, [r7, #2]
 8005844:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8005846:	89fb      	ldrh	r3, [r7, #14]
 8005848:	0a1b      	lsrs	r3, r3, #8
 800584a:	b29b      	uxth	r3, r3
 800584c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800584e:	89fb      	ldrh	r3, [r7, #14]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	b29b      	uxth	r3, r3
 8005854:	b21a      	sxth	r2, r3
 8005856:	887b      	ldrh	r3, [r7, #2]
 8005858:	b21b      	sxth	r3, r3
 800585a:	4313      	orrs	r3, r2
 800585c:	b21b      	sxth	r3, r3
 800585e:	b29b      	uxth	r3, r3
 8005860:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8005862:	88ba      	ldrh	r2, [r7, #4]
 8005864:	79f9      	ldrb	r1, [r7, #7]
 8005866:	2302      	movs	r3, #2
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	1cbb      	adds	r3, r7, #2
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	2302      	movs	r3, #2
 8005870:	4803      	ldr	r0, [pc, #12]	; (8005880 <AUDIO_IO_Write+0x50>)
 8005872:	f7ff ff8e 	bl	8005792 <I2Cx_WriteMultiple>
}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000dbc 	.word	0x20000dbc

08005884 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af02      	add	r7, sp, #8
 800588a:	4603      	mov	r3, r0
 800588c:	460a      	mov	r2, r1
 800588e:	71fb      	strb	r3, [r7, #7]
 8005890:	4613      	mov	r3, r2
 8005892:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	81bb      	strh	r3, [r7, #12]
 8005898:	2300      	movs	r3, #0
 800589a:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800589c:	88ba      	ldrh	r2, [r7, #4]
 800589e:	79f9      	ldrb	r1, [r7, #7]
 80058a0:	2302      	movs	r3, #2
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	2302      	movs	r3, #2
 80058ac:	480a      	ldr	r0, [pc, #40]	; (80058d8 <AUDIO_IO_Read+0x54>)
 80058ae:	f7ff ff43 	bl	8005738 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80058b2:	89bb      	ldrh	r3, [r7, #12]
 80058b4:	0a1b      	lsrs	r3, r3, #8
 80058b6:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80058b8:	89bb      	ldrh	r3, [r7, #12]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	b29b      	uxth	r3, r3
 80058be:	b21a      	sxth	r2, r3
 80058c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80058ca:	89fb      	ldrh	r3, [r7, #14]
 80058cc:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80058ce:	89bb      	ldrh	r3, [r7, #12]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000dbc 	.word	0x20000dbc

080058dc <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 ff0d 	bl	8007704 <HAL_Delay>
}
 80058ea:	bf00      	nop
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80058f8:	4802      	ldr	r0, [pc, #8]	; (8005904 <TS_IO_Init+0x10>)
 80058fa:	f7ff fee1 	bl	80056c0 <I2Cx_Init>
}
 80058fe:	bf00      	nop
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000dbc 	.word	0x20000dbc

08005908 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af02      	add	r7, sp, #8
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
 8005912:	460b      	mov	r3, r1
 8005914:	71bb      	strb	r3, [r7, #6]
 8005916:	4613      	mov	r3, r2
 8005918:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800591a:	79bb      	ldrb	r3, [r7, #6]
 800591c:	b29a      	uxth	r2, r3
 800591e:	79f9      	ldrb	r1, [r7, #7]
 8005920:	2301      	movs	r3, #1
 8005922:	9301      	str	r3, [sp, #4]
 8005924:	1d7b      	adds	r3, r7, #5
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	2301      	movs	r3, #1
 800592a:	4803      	ldr	r0, [pc, #12]	; (8005938 <TS_IO_Write+0x30>)
 800592c:	f7ff ff31 	bl	8005792 <I2Cx_WriteMultiple>
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000dbc 	.word	0x20000dbc

0800593c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af02      	add	r7, sp, #8
 8005942:	4603      	mov	r3, r0
 8005944:	460a      	mov	r2, r1
 8005946:	71fb      	strb	r3, [r7, #7]
 8005948:	4613      	mov	r3, r2
 800594a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8005950:	79bb      	ldrb	r3, [r7, #6]
 8005952:	b29a      	uxth	r2, r3
 8005954:	79f9      	ldrb	r1, [r7, #7]
 8005956:	2301      	movs	r3, #1
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	f107 030f 	add.w	r3, r7, #15
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2301      	movs	r3, #1
 8005962:	4804      	ldr	r0, [pc, #16]	; (8005974 <TS_IO_Read+0x38>)
 8005964:	f7ff fee8 	bl	8005738 <I2Cx_ReadMultiple>

  return read_value;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000dbc 	.word	0x20000dbc

08005978 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 febf 	bl	8007704 <HAL_Delay>
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8005998:	480e      	ldr	r0, [pc, #56]	; (80059d4 <HAL_SAI_ErrorCallback+0x44>)
 800599a:	f008 fe03 	bl	800e5a4 <HAL_SAI_GetState>
 800599e:	4603      	mov	r3, r0
 80059a0:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80059a2:	480d      	ldr	r0, [pc, #52]	; (80059d8 <HAL_SAI_ErrorCallback+0x48>)
 80059a4:	f008 fdfe 	bl	800e5a4 <HAL_SAI_GetState>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d002      	beq.n	80059b8 <HAL_SAI_ErrorCallback+0x28>
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b12      	cmp	r3, #18
 80059b6:	d101      	bne.n	80059bc <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80059b8:	f000 f810 	bl	80059dc <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d002      	beq.n	80059c8 <HAL_SAI_ErrorCallback+0x38>
 80059c2:	7bbb      	ldrb	r3, [r7, #14]
 80059c4:	2b22      	cmp	r3, #34	; 0x22
 80059c6:	d101      	bne.n	80059cc <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 80059c8:	f7fb fb84 	bl	80010d4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20000e08 	.word	0x20000e08
 80059d8:	20000e8c 	.word	0x20000e8c

080059dc <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
}
 80059e0:	bf00      	nop
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08c      	sub	sp, #48	; 0x30
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80059f6:	4b63      	ldr	r3, [pc, #396]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	4a62      	ldr	r2, [pc, #392]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 80059fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a00:	6453      	str	r3, [r2, #68]	; 0x44
 8005a02:	4b60      	ldr	r3, [pc, #384]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8005a0e:	4b5d      	ldr	r3, [pc, #372]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	4a5c      	ldr	r2, [pc, #368]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a18:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1a:	4b5a      	ldr	r3, [pc, #360]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8005a26:	4b57      	ldr	r3, [pc, #348]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	4a56      	ldr	r2, [pc, #344]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a30:	6313      	str	r3, [r2, #48]	; 0x30
 8005a32:	4b54      	ldr	r3, [pc, #336]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8005a3e:	4b51      	ldr	r3, [pc, #324]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	4a50      	ldr	r2, [pc, #320]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a48:	6313      	str	r3, [r2, #48]	; 0x30
 8005a4a:	4b4e      	ldr	r3, [pc, #312]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005a62:	2303      	movs	r3, #3
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005a66:	230a      	movs	r3, #10
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8005a6a:	f107 031c 	add.w	r3, r7, #28
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4845      	ldr	r0, [pc, #276]	; (8005b88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005a72:	f003 faa7 	bl	8008fc4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8005a76:	2320      	movs	r3, #32
 8005a78:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005a82:	2303      	movs	r3, #3
 8005a84:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8005a86:	230a      	movs	r3, #10
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8005a8a:	f107 031c 	add.w	r3, r7, #28
 8005a8e:	4619      	mov	r1, r3
 8005a90:	483d      	ldr	r0, [pc, #244]	; (8005b88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005a92:	f003 fa97 	bl	8008fc4 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8005a96:	2340      	movs	r3, #64	; 0x40
 8005a98:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005aa6:	230a      	movs	r3, #10
 8005aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8005aaa:	f107 031c 	add.w	r3, r7, #28
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4835      	ldr	r0, [pc, #212]	; (8005b88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005ab2:	f003 fa87 	bl	8008fc4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8005ab6:	2310      	movs	r3, #16
 8005ab8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005aba:	2302      	movs	r3, #2
 8005abc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005ac6:	230a      	movs	r3, #10
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8005aca:	f107 031c 	add.w	r3, r7, #28
 8005ace:	4619      	mov	r1, r3
 8005ad0:	482d      	ldr	r0, [pc, #180]	; (8005b88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005ad2:	f003 fa77 	bl	8008fc4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8005ad6:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ae2:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d138      	bne.n	8005b6a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8005af8:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005afa:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005afe:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005b00:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b02:	2240      	movs	r2, #64	; 0x40
 8005b04:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005b06:	4b22      	ldr	r3, [pc, #136]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005b0c:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b12:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005b14:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b1a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8005b1c:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b22:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8005b24:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b2a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005b2c:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b32:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8005b34:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b36:	2204      	movs	r2, #4
 8005b38:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005b3a:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005b40:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8005b4c:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b4e:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8005b50:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a0e      	ldr	r2, [pc, #56]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b56:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b58:	4a0d      	ldr	r2, [pc, #52]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8005b5e:	480c      	ldr	r0, [pc, #48]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b60:	f002 fb6e 	bl	8008240 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8005b64:	480a      	ldr	r0, [pc, #40]	; (8005b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b66:	f002 fabd 	bl	80080e4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	210e      	movs	r1, #14
 8005b6e:	203c      	movs	r0, #60	; 0x3c
 8005b70:	f002 f92a 	bl	8007dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8005b74:	203c      	movs	r0, #60	; 0x3c
 8005b76:	f002 f943 	bl	8007e00 <HAL_NVIC_EnableIRQ>
}
 8005b7a:	bf00      	nop
 8005b7c:	3730      	adds	r7, #48	; 0x30
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40023800 	.word	0x40023800
 8005b88:	40022000 	.word	0x40022000
 8005b8c:	40015c04 	.word	0x40015c04
 8005b90:	20000f10 	.word	0x20000f10
 8005b94:	40026470 	.word	0x40026470

08005b98 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b0a6      	sub	sp, #152	; 0x98
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005ba4:	f107 0314 	add.w	r3, r7, #20
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f007 fcc3 	bl	800d534 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f245 6222 	movw	r2, #22050	; 0x5622
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d112      	bne.n	8005bf2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8005bcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005bd0:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bd6:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8005bd8:	f240 13ad 	movw	r3, #429	; 0x1ad
 8005bdc:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8005bde:	2302      	movs	r3, #2
 8005be0:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8005be2:	2313      	movs	r3, #19
 8005be4:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005be6:	f107 0314 	add.w	r3, r7, #20
 8005bea:	4618      	mov	r0, r3
 8005bec:	f007 f8b4 	bl	800cd58 <HAL_RCCEx_PeriphCLKConfig>
 8005bf0:	e011      	b.n	8005c16 <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8005bf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005bf6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005bf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bfc:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8005bfe:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8005c02:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8005c04:	2307      	movs	r3, #7
 8005c06:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	4618      	mov	r0, r3
 8005c12:	f007 f8a1 	bl	800cd58 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8005c16:	bf00      	nop
 8005c18:	3798      	adds	r7, #152	; 0x98
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005c34:	f000 f806 	bl	8005c44 <BSP_AUDIO_IN_InitEx>
 8005c38:	4603      	mov	r3, r0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b089      	sub	sp, #36	; 0x24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4603      	mov	r3, r0
 8005c52:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8005c5c:	89fb      	ldrh	r3, [r7, #14]
 8005c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c62:	d006      	beq.n	8005c72 <BSP_AUDIO_IN_InitEx+0x2e>
 8005c64:	89fb      	ldrh	r3, [r7, #14]
 8005c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6a:	d002      	beq.n	8005c72 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	e046      	b.n	8005d00 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8005c72:	f000 f9e7 	bl	8006044 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8005c76:	2200      	movs	r2, #0
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	4824      	ldr	r0, [pc, #144]	; (8005d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005c7c:	f7ff ff8c 	bl	8005b98 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005c80:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005c82:	4a23      	ldr	r2, [pc, #140]	; (8005d10 <BSP_AUDIO_IN_InitEx+0xcc>)
 8005c84:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8005c86:	4821      	ldr	r0, [pc, #132]	; (8005d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005c88:	f008 fc8c 	bl	800e5a4 <HAL_SAI_GetState>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d107      	bne.n	8005ca2 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8005c92:	2100      	movs	r1, #0
 8005c94:	481d      	ldr	r0, [pc, #116]	; (8005d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005c96:	f7ff fea9 	bl	80059ec <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	481b      	ldr	r0, [pc, #108]	; (8005d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005c9e:	f000 f869 	bl	8005d74 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8005ca2:	89fb      	ldrh	r3, [r7, #14]
 8005ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ca8:	d102      	bne.n	8005cb0 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8005caa:	230a      	movs	r3, #10
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	e001      	b.n	8005cb4 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8005cb0:	2305      	movs	r3, #5
 8005cb2:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	69b9      	ldr	r1, [r7, #24]
 8005cb8:	2001      	movs	r0, #1
 8005cba:	f000 f90d 	bl	8005ed8 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8005cbe:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2034      	movs	r0, #52	; 0x34
 8005cc4:	4798      	blx	r3
 8005cc6:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f648 1294 	movw	r2, #35220	; 0x8994
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d109      	bne.n	8005ce6 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8005cd2:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	2034      	movs	r0, #52	; 0x34
 8005cd8:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8005cda:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <BSP_AUDIO_IN_InitEx+0xd4>)
 8005cdc:	4a0d      	ldr	r2, [pc, #52]	; (8005d14 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005cde:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e001      	b.n	8005cea <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d107      	bne.n	8005d00 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <BSP_AUDIO_IN_InitEx+0xd4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681c      	ldr	r4, [r3, #0]
 8005cf6:	89f9      	ldrh	r1, [r7, #14]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2264      	movs	r2, #100	; 0x64
 8005cfc:	2034      	movs	r0, #52	; 0x34
 8005cfe:	47a0      	blx	r4
    }
  }
  return ret;
 8005d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3724      	adds	r7, #36	; 0x24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000e8c 	.word	0x20000e8c
 8005d10:	40015c24 	.word	0x40015c24
 8005d14:	2000002c 	.word	0x2000002c
 8005d18:	2001b928 	.word	0x2001b928

08005d1c <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4805      	ldr	r0, [pc, #20]	; (8005d48 <BSP_AUDIO_IN_Record+0x2c>)
 8005d34:	f008 fba8 	bl	800e488 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	b2db      	uxtb	r3, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000e8c 	.word	0x20000e8c

08005d4c <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8005d54:	f7fb f9a2 	bl	800109c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8005d58:	bf00      	nop
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8005d68:	f7fb f97c 	bl	8001064 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08c      	sub	sp, #48	; 0x30
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8005d7e:	4b50      	ldr	r3, [pc, #320]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	4a4f      	ldr	r2, [pc, #316]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005d84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d88:	6453      	str	r3, [r2, #68]	; 0x44
 8005d8a:	4b4d      	ldr	r3, [pc, #308]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8005d96:	4b4a      	ldr	r3, [pc, #296]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	4a49      	ldr	r2, [pc, #292]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da0:	6313      	str	r3, [r2, #48]	; 0x30
 8005da2:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8005dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005db2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005db4:	2302      	movs	r3, #2
 8005db6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8005dc0:	230a      	movs	r3, #10
 8005dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8005dc4:	f107 031c 	add.w	r3, r7, #28
 8005dc8:	4619      	mov	r1, r3
 8005dca:	483e      	ldr	r0, [pc, #248]	; (8005ec4 <BSP_AUDIO_IN_MspInit+0x150>)
 8005dcc:	f003 f8fa 	bl	8008fc4 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	4a3a      	ldr	r2, [pc, #232]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dda:	6313      	str	r3, [r2, #48]	; 0x30
 8005ddc:	4b38      	ldr	r3, [pc, #224]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8005de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005dee:	2300      	movs	r3, #0
 8005df0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005df6:	2302      	movs	r3, #2
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8005dfa:	f107 031c 	add.w	r3, r7, #28
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4831      	ldr	r0, [pc, #196]	; (8005ec8 <BSP_AUDIO_IN_MspInit+0x154>)
 8005e02:	f003 f8df 	bl	8008fc4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8005e06:	4b2e      	ldr	r3, [pc, #184]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	4a2d      	ldr	r2, [pc, #180]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e10:	6313      	str	r3, [r2, #48]	; 0x30
 8005e12:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2a      	ldr	r2, [pc, #168]	; (8005ecc <BSP_AUDIO_IN_MspInit+0x158>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d137      	bne.n	8005e98 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8005e28:	4b29      	ldr	r3, [pc, #164]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005e2e:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005e34:	4b26      	ldr	r3, [pc, #152]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8005e3a:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e40:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005e42:	4b23      	ldr	r3, [pc, #140]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e48:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8005e4a:	4b21      	ldr	r3, [pc, #132]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e50:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8005e52:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e58:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e60:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005e62:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005e68:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005e6e:	4b18      	ldr	r3, [pc, #96]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8005e74:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e7c:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <BSP_AUDIO_IN_MspInit+0x160>)
 8005e7e:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e84:	671a      	str	r2, [r3, #112]	; 0x70
 8005e86:	4a12      	ldr	r2, [pc, #72]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8005e8c:	4810      	ldr	r0, [pc, #64]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e8e:	f002 f9d7 	bl	8008240 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8005e92:	480f      	ldr	r0, [pc, #60]	; (8005ed0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e94:	f002 f926 	bl	80080e4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005e98:	2200      	movs	r2, #0
 8005e9a:	210f      	movs	r1, #15
 8005e9c:	2046      	movs	r0, #70	; 0x46
 8005e9e:	f001 ff93 	bl	8007dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8005ea2:	2046      	movs	r0, #70	; 0x46
 8005ea4:	f001 ffac 	bl	8007e00 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	210f      	movs	r1, #15
 8005eac:	2028      	movs	r0, #40	; 0x28
 8005eae:	f001 ff8b 	bl	8007dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8005eb2:	2028      	movs	r0, #40	; 0x28
 8005eb4:	f001 ffa4 	bl	8007e00 <HAL_NVIC_EnableIRQ>
}
 8005eb8:	bf00      	nop
 8005eba:	3730      	adds	r7, #48	; 0x30
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40021800 	.word	0x40021800
 8005ec8:	40021c00 	.word	0x40021c00
 8005ecc:	40015c24 	.word	0x40015c24
 8005ed0:	20000f70 	.word	0x20000f70
 8005ed4:	400264b8 	.word	0x400264b8

08005ed8 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005ee4:	4b53      	ldr	r3, [pc, #332]	; (8006034 <SAIx_In_Init+0x15c>)
 8005ee6:	4a54      	ldr	r2, [pc, #336]	; (8006038 <SAIx_In_Init+0x160>)
 8005ee8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8005eea:	4b52      	ldr	r3, [pc, #328]	; (8006034 <SAIx_In_Init+0x15c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b50      	ldr	r3, [pc, #320]	; (8006034 <SAIx_In_Init+0x15c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8005efa:	4a4e      	ldr	r2, [pc, #312]	; (8006034 <SAIx_In_Init+0x15c>)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8005f00:	4a4c      	ldr	r2, [pc, #304]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005f06:	4b4b      	ldr	r3, [pc, #300]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8005f0c:	4b49      	ldr	r3, [pc, #292]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8005f12:	4b48      	ldr	r3, [pc, #288]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f14:	2280      	movs	r2, #128	; 0x80
 8005f16:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005f18:	4b46      	ldr	r3, [pc, #280]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8005f1e:	4b45      	ldr	r3, [pc, #276]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8005f24:	4b43      	ldr	r3, [pc, #268]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8005f2a:	4b42      	ldr	r3, [pc, #264]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f30:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005f32:	4b40      	ldr	r3, [pc, #256]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8005f38:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f3a:	2240      	movs	r2, #64	; 0x40
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8005f3e:	4b3d      	ldr	r3, [pc, #244]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f40:	2220      	movs	r2, #32
 8005f42:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005f44:	4b3b      	ldr	r3, [pc, #236]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f4a:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005f4c:	4b39      	ldr	r3, [pc, #228]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005f52:	4b38      	ldr	r3, [pc, #224]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005f58:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8005f5a:	4b36      	ldr	r3, [pc, #216]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005f60:	4b34      	ldr	r3, [pc, #208]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8005f66:	4b33      	ldr	r3, [pc, #204]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f68:	2204      	movs	r2, #4
 8005f6a:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8005f6c:	4a31      	ldr	r2, [pc, #196]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8005f72:	4830      	ldr	r0, [pc, #192]	; (8006034 <SAIx_In_Init+0x15c>)
 8005f74:	f008 f8e0 	bl	800e138 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005f78:	4b30      	ldr	r3, [pc, #192]	; (800603c <SAIx_In_Init+0x164>)
 8005f7a:	4a31      	ldr	r2, [pc, #196]	; (8006040 <SAIx_In_Init+0x168>)
 8005f7c:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8005f7e:	4b2f      	ldr	r3, [pc, #188]	; (800603c <SAIx_In_Init+0x164>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b2d      	ldr	r3, [pc, #180]	; (800603c <SAIx_In_Init+0x164>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f8c:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8005f8e:	4a2b      	ldr	r2, [pc, #172]	; (800603c <SAIx_In_Init+0x164>)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8005f94:	4b29      	ldr	r3, [pc, #164]	; (800603c <SAIx_In_Init+0x164>)
 8005f96:	2203      	movs	r2, #3
 8005f98:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005f9a:	4b28      	ldr	r3, [pc, #160]	; (800603c <SAIx_In_Init+0x164>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8005fa0:	4b26      	ldr	r3, [pc, #152]	; (800603c <SAIx_In_Init+0x164>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8005fa6:	4b25      	ldr	r3, [pc, #148]	; (800603c <SAIx_In_Init+0x164>)
 8005fa8:	2280      	movs	r2, #128	; 0x80
 8005faa:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005fac:	4b23      	ldr	r3, [pc, #140]	; (800603c <SAIx_In_Init+0x164>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8005fb2:	4b22      	ldr	r3, [pc, #136]	; (800603c <SAIx_In_Init+0x164>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8005fb8:	4b20      	ldr	r3, [pc, #128]	; (800603c <SAIx_In_Init+0x164>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <SAIx_In_Init+0x164>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005fc4:	4b1d      	ldr	r3, [pc, #116]	; (800603c <SAIx_In_Init+0x164>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8005fca:	4b1c      	ldr	r3, [pc, #112]	; (800603c <SAIx_In_Init+0x164>)
 8005fcc:	2240      	movs	r2, #64	; 0x40
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <SAIx_In_Init+0x164>)
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005fd6:	4b19      	ldr	r3, [pc, #100]	; (800603c <SAIx_In_Init+0x164>)
 8005fd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005fdc:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005fde:	4b17      	ldr	r3, [pc, #92]	; (800603c <SAIx_In_Init+0x164>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005fe4:	4b15      	ldr	r3, [pc, #84]	; (800603c <SAIx_In_Init+0x164>)
 8005fe6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005fea:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8005fec:	4b13      	ldr	r3, [pc, #76]	; (800603c <SAIx_In_Init+0x164>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005ff2:	4b12      	ldr	r3, [pc, #72]	; (800603c <SAIx_In_Init+0x164>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8005ff8:	4b10      	ldr	r3, [pc, #64]	; (800603c <SAIx_In_Init+0x164>)
 8005ffa:	2204      	movs	r2, #4
 8005ffc:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8005ffe:	4a0f      	ldr	r2, [pc, #60]	; (800603c <SAIx_In_Init+0x164>)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8006004:	480d      	ldr	r0, [pc, #52]	; (800603c <SAIx_In_Init+0x164>)
 8006006:	f008 f897 	bl	800e138 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <SAIx_In_Init+0x15c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b08      	ldr	r3, [pc, #32]	; (8006034 <SAIx_In_Init+0x15c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006018:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800601a:	4b08      	ldr	r3, [pc, #32]	; (800603c <SAIx_In_Init+0x164>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <SAIx_In_Init+0x164>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006028:	601a      	str	r2, [r3, #0]
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000e08 	.word	0x20000e08
 8006038:	40015c04 	.word	0x40015c04
 800603c:	20000e8c 	.word	0x20000e8c
 8006040:	40015c24 	.word	0x40015c24

08006044 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006048:	4b07      	ldr	r3, [pc, #28]	; (8006068 <SAIx_In_DeInit+0x24>)
 800604a:	4a08      	ldr	r2, [pc, #32]	; (800606c <SAIx_In_DeInit+0x28>)
 800604c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <SAIx_In_DeInit+0x24>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	4b04      	ldr	r3, [pc, #16]	; (8006068 <SAIx_In_DeInit+0x24>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800605c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800605e:	4802      	ldr	r0, [pc, #8]	; (8006068 <SAIx_In_DeInit+0x24>)
 8006060:	f008 f9dc 	bl	800e41c <HAL_SAI_DeInit>
}
 8006064:	bf00      	nop
 8006066:	bd80      	pop	{r7, pc}
 8006068:	20000e8c 	.word	0x20000e8c
 800606c:	40015c24 	.word	0x40015c24

08006070 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006074:	4b31      	ldr	r3, [pc, #196]	; (800613c <BSP_LCD_Init+0xcc>)
 8006076:	2228      	movs	r2, #40	; 0x28
 8006078:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800607a:	4b30      	ldr	r3, [pc, #192]	; (800613c <BSP_LCD_Init+0xcc>)
 800607c:	2209      	movs	r2, #9
 800607e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006080:	4b2e      	ldr	r3, [pc, #184]	; (800613c <BSP_LCD_Init+0xcc>)
 8006082:	2235      	movs	r2, #53	; 0x35
 8006084:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006086:	4b2d      	ldr	r3, [pc, #180]	; (800613c <BSP_LCD_Init+0xcc>)
 8006088:	220b      	movs	r2, #11
 800608a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800608c:	4b2b      	ldr	r3, [pc, #172]	; (800613c <BSP_LCD_Init+0xcc>)
 800608e:	f240 121b 	movw	r2, #283	; 0x11b
 8006092:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006094:	4b29      	ldr	r3, [pc, #164]	; (800613c <BSP_LCD_Init+0xcc>)
 8006096:	f240 2215 	movw	r2, #533	; 0x215
 800609a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800609c:	4b27      	ldr	r3, [pc, #156]	; (800613c <BSP_LCD_Init+0xcc>)
 800609e:	f240 121d 	movw	r2, #285	; 0x11d
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80060a4:	4b25      	ldr	r3, [pc, #148]	; (800613c <BSP_LCD_Init+0xcc>)
 80060a6:	f240 2235 	movw	r2, #565	; 0x235
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80060ac:	2100      	movs	r1, #0
 80060ae:	4823      	ldr	r0, [pc, #140]	; (800613c <BSP_LCD_Init+0xcc>)
 80060b0:	f000 fdc4 	bl	8006c3c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80060b4:	4b21      	ldr	r3, [pc, #132]	; (800613c <BSP_LCD_Init+0xcc>)
 80060b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80060ba:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80060bc:	4b1f      	ldr	r3, [pc, #124]	; (800613c <BSP_LCD_Init+0xcc>)
 80060be:	f44f 7288 	mov.w	r2, #272	; 0x110
 80060c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80060c4:	4b1d      	ldr	r3, [pc, #116]	; (800613c <BSP_LCD_Init+0xcc>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <BSP_LCD_Init+0xcc>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80060d4:	4b19      	ldr	r3, [pc, #100]	; (800613c <BSP_LCD_Init+0xcc>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80060dc:	4b17      	ldr	r3, [pc, #92]	; (800613c <BSP_LCD_Init+0xcc>)
 80060de:	2200      	movs	r2, #0
 80060e0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80060e2:	4b16      	ldr	r3, [pc, #88]	; (800613c <BSP_LCD_Init+0xcc>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <BSP_LCD_Init+0xcc>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <BSP_LCD_Init+0xcc>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80060f4:	4b11      	ldr	r3, [pc, #68]	; (800613c <BSP_LCD_Init+0xcc>)
 80060f6:	4a12      	ldr	r2, [pc, #72]	; (8006140 <BSP_LCD_Init+0xd0>)
 80060f8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80060fa:	4810      	ldr	r0, [pc, #64]	; (800613c <BSP_LCD_Init+0xcc>)
 80060fc:	f005 feba 	bl	800be74 <HAL_LTDC_GetState>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006106:	2100      	movs	r1, #0
 8006108:	480c      	ldr	r0, [pc, #48]	; (800613c <BSP_LCD_Init+0xcc>)
 800610a:	f000 fcbd 	bl	8006a88 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800610e:	480b      	ldr	r0, [pc, #44]	; (800613c <BSP_LCD_Init+0xcc>)
 8006110:	f005 fce0 	bl	800bad4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006114:	2201      	movs	r2, #1
 8006116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800611a:	480a      	ldr	r0, [pc, #40]	; (8006144 <BSP_LCD_Init+0xd4>)
 800611c:	f003 fa06 	bl	800952c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006120:	2201      	movs	r2, #1
 8006122:	2108      	movs	r1, #8
 8006124:	4808      	ldr	r0, [pc, #32]	; (8006148 <BSP_LCD_Init+0xd8>)
 8006126:	f003 fa01 	bl	800952c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800612a:	f000 fea7 	bl	8006e7c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800612e:	4807      	ldr	r0, [pc, #28]	; (800614c <BSP_LCD_Init+0xdc>)
 8006130:	f000 f8c8 	bl	80062c4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	2001b92c 	.word	0x2001b92c
 8006140:	40016800 	.word	0x40016800
 8006144:	40022000 	.word	0x40022000
 8006148:	40022800 	.word	0x40022800
 800614c:	20000060 	.word	0x20000060

08006150 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006154:	4b06      	ldr	r3, [pc, #24]	; (8006170 <BSP_LCD_GetXSize+0x20>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a06      	ldr	r2, [pc, #24]	; (8006174 <BSP_LCD_GetXSize+0x24>)
 800615a:	2134      	movs	r1, #52	; 0x34
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	4413      	add	r3, r2
 8006162:	3360      	adds	r3, #96	; 0x60
 8006164:	681b      	ldr	r3, [r3, #0]
}
 8006166:	4618      	mov	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20001010 	.word	0x20001010
 8006174:	2001b92c 	.word	0x2001b92c

08006178 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800617c:	4b06      	ldr	r3, [pc, #24]	; (8006198 <BSP_LCD_GetYSize+0x20>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a06      	ldr	r2, [pc, #24]	; (800619c <BSP_LCD_GetYSize+0x24>)
 8006182:	2134      	movs	r1, #52	; 0x34
 8006184:	fb01 f303 	mul.w	r3, r1, r3
 8006188:	4413      	add	r3, r2
 800618a:	3364      	adds	r3, #100	; 0x64
 800618c:	681b      	ldr	r3, [r3, #0]
}
 800618e:	4618      	mov	r0, r3
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20001010 	.word	0x20001010
 800619c:	2001b92c 	.word	0x2001b92c

080061a0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b090      	sub	sp, #64	; 0x40
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	6039      	str	r1, [r7, #0]
 80061aa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80061b0:	f7ff ffce 	bl	8006150 <BSP_LCD_GetXSize>
 80061b4:	4603      	mov	r3, r0
 80061b6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80061bc:	f7ff ffdc 	bl	8006178 <BSP_LCD_GetYSize>
 80061c0:	4603      	mov	r3, r0
 80061c2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80061cc:	23ff      	movs	r3, #255	; 0xff
 80061ce:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80061e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80061ec:	2307      	movs	r3, #7
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80061f0:	f7ff ffae 	bl	8006150 <BSP_LCD_GetXSize>
 80061f4:	4603      	mov	r3, r0
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80061f8:	f7ff ffbe 	bl	8006178 <BSP_LCD_GetYSize>
 80061fc:	4603      	mov	r3, r0
 80061fe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006200:	88fa      	ldrh	r2, [r7, #6]
 8006202:	f107 030c 	add.w	r3, r7, #12
 8006206:	4619      	mov	r1, r3
 8006208:	4812      	ldr	r0, [pc, #72]	; (8006254 <BSP_LCD_LayerDefaultInit+0xb4>)
 800620a:	f005 fdf5 	bl	800bdf8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	4911      	ldr	r1, [pc, #68]	; (8006258 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006212:	4613      	mov	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	3304      	adds	r3, #4
 800621e:	f04f 32ff 	mov.w	r2, #4294967295
 8006222:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006224:	88fa      	ldrh	r2, [r7, #6]
 8006226:	490c      	ldr	r1, [pc, #48]	; (8006258 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006228:	4613      	mov	r3, r2
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	3308      	adds	r3, #8
 8006234:	4a09      	ldr	r2, [pc, #36]	; (800625c <BSP_LCD_LayerDefaultInit+0xbc>)
 8006236:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006238:	88fa      	ldrh	r2, [r7, #6]
 800623a:	4907      	ldr	r1, [pc, #28]	; (8006258 <BSP_LCD_LayerDefaultInit+0xb8>)
 800623c:	4613      	mov	r3, r2
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800624a:	601a      	str	r2, [r3, #0]
}
 800624c:	bf00      	nop
 800624e:	3740      	adds	r7, #64	; 0x40
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	2001b92c 	.word	0x2001b92c
 8006258:	20001014 	.word	0x20001014
 800625c:	20000060 	.word	0x20000060

08006260 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <BSP_LCD_SetTextColor+0x28>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4907      	ldr	r1, [pc, #28]	; (800628c <BSP_LCD_SetTextColor+0x2c>)
 800626e:	4613      	mov	r3, r2
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	20001010 	.word	0x20001010
 800628c:	20001014 	.word	0x20001014

08006290 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8006298:	4b08      	ldr	r3, [pc, #32]	; (80062bc <BSP_LCD_SetBackColor+0x2c>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4908      	ldr	r1, [pc, #32]	; (80062c0 <BSP_LCD_SetBackColor+0x30>)
 800629e:	4613      	mov	r3, r2
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	3304      	adds	r3, #4
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	601a      	str	r2, [r3, #0]
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20001010 	.word	0x20001010
 80062c0:	20001014 	.word	0x20001014

080062c4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80062cc:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <BSP_LCD_SetFont+0x2c>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4908      	ldr	r1, [pc, #32]	; (80062f4 <BSP_LCD_SetFont+0x30>)
 80062d2:	4613      	mov	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	3308      	adds	r3, #8
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20001010 	.word	0x20001010
 80062f4:	20001014 	.word	0x20001014

080062f8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80062f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <BSP_LCD_Clear+0x48>)
 8006302:	681c      	ldr	r4, [r3, #0]
 8006304:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <BSP_LCD_Clear+0x48>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <BSP_LCD_Clear+0x4c>)
 800630a:	2134      	movs	r1, #52	; 0x34
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	4413      	add	r3, r2
 8006312:	335c      	adds	r3, #92	; 0x5c
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461d      	mov	r5, r3
 8006318:	f7ff ff1a 	bl	8006150 <BSP_LCD_GetXSize>
 800631c:	4606      	mov	r6, r0
 800631e:	f7ff ff2b 	bl	8006178 <BSP_LCD_GetYSize>
 8006322:	4602      	mov	r2, r0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	2300      	movs	r3, #0
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	4632      	mov	r2, r6
 8006330:	4629      	mov	r1, r5
 8006332:	4620      	mov	r0, r4
 8006334:	f000 fd56 	bl	8006de4 <LL_FillBuffer>
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006340:	20001010 	.word	0x20001010
 8006344:	2001b92c 	.word	0x2001b92c

08006348 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006348:	b590      	push	{r4, r7, lr}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	80fb      	strh	r3, [r7, #6]
 8006352:	460b      	mov	r3, r1
 8006354:	80bb      	strh	r3, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800635a:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <BSP_LCD_DisplayChar+0x80>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	491b      	ldr	r1, [pc, #108]	; (80063cc <BSP_LCD_DisplayChar+0x84>)
 8006360:	4613      	mov	r3, r2
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	3308      	adds	r3, #8
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6819      	ldr	r1, [r3, #0]
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <BSP_LCD_DisplayChar+0x80>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4c14      	ldr	r4, [pc, #80]	; (80063cc <BSP_LCD_DisplayChar+0x84>)
 800637c:	4613      	mov	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4423      	add	r3, r4
 8006386:	3308      	adds	r3, #8
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800638c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006390:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <BSP_LCD_DisplayChar+0x80>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4c0d      	ldr	r4, [pc, #52]	; (80063cc <BSP_LCD_DisplayChar+0x84>)
 8006396:	4613      	mov	r3, r2
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4423      	add	r3, r4
 80063a0:	3308      	adds	r3, #8
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	889b      	ldrh	r3, [r3, #4]
 80063a6:	3307      	adds	r3, #7
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da00      	bge.n	80063ae <BSP_LCD_DisplayChar+0x66>
 80063ac:	3307      	adds	r3, #7
 80063ae:	10db      	asrs	r3, r3, #3
 80063b0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80063b4:	18ca      	adds	r2, r1, r3
 80063b6:	88b9      	ldrh	r1, [r7, #4]
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fc5a 	bl	8006c74 <DrawChar>
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd90      	pop	{r4, r7, pc}
 80063c8:	20001010 	.word	0x20001010
 80063cc:	20001014 	.word	0x20001014

080063d0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80063d0:	b5b0      	push	{r4, r5, r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60ba      	str	r2, [r7, #8]
 80063d8:	461a      	mov	r2, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	81fb      	strh	r3, [r7, #14]
 80063de:	460b      	mov	r3, r1
 80063e0:	81bb      	strh	r3, [r7, #12]
 80063e2:	4613      	mov	r3, r2
 80063e4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80063e6:	2301      	movs	r3, #1
 80063e8:	83fb      	strh	r3, [r7, #30]
 80063ea:	2300      	movs	r3, #0
 80063ec:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80063fa:	e002      	b.n	8006402 <BSP_LCD_DisplayStringAt+0x32>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	3301      	adds	r3, #1
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	617a      	str	r2, [r7, #20]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f6      	bne.n	80063fc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800640e:	f7ff fe9f 	bl	8006150 <BSP_LCD_GetXSize>
 8006412:	4b4f      	ldr	r3, [pc, #316]	; (8006550 <BSP_LCD_DisplayStringAt+0x180>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	494f      	ldr	r1, [pc, #316]	; (8006554 <BSP_LCD_DisplayStringAt+0x184>)
 8006418:	4613      	mov	r3, r2
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	3308      	adds	r3, #8
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	889b      	ldrh	r3, [r3, #4]
 8006428:	fbb0 f3f3 	udiv	r3, r0, r3
 800642c:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	2b02      	cmp	r3, #2
 8006432:	d01c      	beq.n	800646e <BSP_LCD_DisplayStringAt+0x9e>
 8006434:	2b03      	cmp	r3, #3
 8006436:	d017      	beq.n	8006468 <BSP_LCD_DisplayStringAt+0x98>
 8006438:	2b01      	cmp	r3, #1
 800643a:	d12e      	bne.n	800649a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	1ad1      	subs	r1, r2, r3
 8006442:	4b43      	ldr	r3, [pc, #268]	; (8006550 <BSP_LCD_DisplayStringAt+0x180>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4843      	ldr	r0, [pc, #268]	; (8006554 <BSP_LCD_DisplayStringAt+0x184>)
 8006448:	4613      	mov	r3, r2
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4403      	add	r3, r0
 8006452:	3308      	adds	r3, #8
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	889b      	ldrh	r3, [r3, #4]
 8006458:	fb03 f301 	mul.w	r3, r3, r1
 800645c:	085b      	lsrs	r3, r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	89fb      	ldrh	r3, [r7, #14]
 8006462:	4413      	add	r3, r2
 8006464:	83fb      	strh	r3, [r7, #30]
      break;
 8006466:	e01b      	b.n	80064a0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8006468:	89fb      	ldrh	r3, [r7, #14]
 800646a:	83fb      	strh	r3, [r7, #30]
      break;
 800646c:	e018      	b.n	80064a0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	b299      	uxth	r1, r3
 8006476:	4b36      	ldr	r3, [pc, #216]	; (8006550 <BSP_LCD_DisplayStringAt+0x180>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4836      	ldr	r0, [pc, #216]	; (8006554 <BSP_LCD_DisplayStringAt+0x184>)
 800647c:	4613      	mov	r3, r2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4403      	add	r3, r0
 8006486:	3308      	adds	r3, #8
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	889b      	ldrh	r3, [r3, #4]
 800648c:	fb11 f303 	smulbb	r3, r1, r3
 8006490:	b29a      	uxth	r2, r3
 8006492:	89fb      	ldrh	r3, [r7, #14]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	83fb      	strh	r3, [r7, #30]
      break;
 8006498:	e002      	b.n	80064a0 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800649a:	89fb      	ldrh	r3, [r7, #14]
 800649c:	83fb      	strh	r3, [r7, #30]
      break;
 800649e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80064a0:	8bfb      	ldrh	r3, [r7, #30]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <BSP_LCD_DisplayStringAt+0xde>
 80064a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da1d      	bge.n	80064ea <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80064ae:	2301      	movs	r3, #1
 80064b0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80064b2:	e01a      	b.n	80064ea <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	781a      	ldrb	r2, [r3, #0]
 80064b8:	89b9      	ldrh	r1, [r7, #12]
 80064ba:	8bfb      	ldrh	r3, [r7, #30]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff ff43 	bl	8006348 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80064c2:	4b23      	ldr	r3, [pc, #140]	; (8006550 <BSP_LCD_DisplayStringAt+0x180>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4923      	ldr	r1, [pc, #140]	; (8006554 <BSP_LCD_DisplayStringAt+0x184>)
 80064c8:	4613      	mov	r3, r2
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	3308      	adds	r3, #8
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	889a      	ldrh	r2, [r3, #4]
 80064d8:	8bfb      	ldrh	r3, [r7, #30]
 80064da:	4413      	add	r3, r2
 80064dc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60bb      	str	r3, [r7, #8]
    i++;
 80064e4:	8bbb      	ldrh	r3, [r7, #28]
 80064e6:	3301      	adds	r3, #1
 80064e8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bf14      	ite	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	2300      	moveq	r3, #0
 80064f6:	b2dc      	uxtb	r4, r3
 80064f8:	f7ff fe2a 	bl	8006150 <BSP_LCD_GetXSize>
 80064fc:	4605      	mov	r5, r0
 80064fe:	8bb9      	ldrh	r1, [r7, #28]
 8006500:	4b13      	ldr	r3, [pc, #76]	; (8006550 <BSP_LCD_DisplayStringAt+0x180>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	4813      	ldr	r0, [pc, #76]	; (8006554 <BSP_LCD_DisplayStringAt+0x184>)
 8006506:	4613      	mov	r3, r2
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4403      	add	r3, r0
 8006510:	3308      	adds	r3, #8
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	889b      	ldrh	r3, [r3, #4]
 8006516:	fb03 f301 	mul.w	r3, r3, r1
 800651a:	1aeb      	subs	r3, r5, r3
 800651c:	b299      	uxth	r1, r3
 800651e:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <BSP_LCD_DisplayStringAt+0x180>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	480c      	ldr	r0, [pc, #48]	; (8006554 <BSP_LCD_DisplayStringAt+0x184>)
 8006524:	4613      	mov	r3, r2
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4403      	add	r3, r0
 800652e:	3308      	adds	r3, #8
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	889b      	ldrh	r3, [r3, #4]
 8006534:	4299      	cmp	r1, r3
 8006536:	bf2c      	ite	cs
 8006538:	2301      	movcs	r3, #1
 800653a:	2300      	movcc	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	4023      	ands	r3, r4
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1b6      	bne.n	80064b4 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8006546:	bf00      	nop
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bdb0      	pop	{r4, r5, r7, pc}
 800654e:	bf00      	nop
 8006550:	20001010 	.word	0x20001010
 8006554:	20001014 	.word	0x20001014

08006558 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006558:	b5b0      	push	{r4, r5, r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af02      	add	r7, sp, #8
 800655e:	4603      	mov	r3, r0
 8006560:	80fb      	strh	r3, [r7, #6]
 8006562:	460b      	mov	r3, r1
 8006564:	80bb      	strh	r3, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800656e:	4b26      	ldr	r3, [pc, #152]	; (8006608 <BSP_LCD_DrawHLine+0xb0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a26      	ldr	r2, [pc, #152]	; (800660c <BSP_LCD_DrawHLine+0xb4>)
 8006574:	2134      	movs	r1, #52	; 0x34
 8006576:	fb01 f303 	mul.w	r3, r1, r3
 800657a:	4413      	add	r3, r2
 800657c:	3348      	adds	r3, #72	; 0x48
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d114      	bne.n	80065ae <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006584:	4b20      	ldr	r3, [pc, #128]	; (8006608 <BSP_LCD_DrawHLine+0xb0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a20      	ldr	r2, [pc, #128]	; (800660c <BSP_LCD_DrawHLine+0xb4>)
 800658a:	2134      	movs	r1, #52	; 0x34
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	4413      	add	r3, r2
 8006592:	335c      	adds	r3, #92	; 0x5c
 8006594:	681c      	ldr	r4, [r3, #0]
 8006596:	f7ff fddb 	bl	8006150 <BSP_LCD_GetXSize>
 800659a:	4602      	mov	r2, r0
 800659c:	88bb      	ldrh	r3, [r7, #4]
 800659e:	fb03 f202 	mul.w	r2, r3, r2
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	4413      	add	r3, r2
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	4423      	add	r3, r4
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e013      	b.n	80065d6 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80065ae:	4b16      	ldr	r3, [pc, #88]	; (8006608 <BSP_LCD_DrawHLine+0xb0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a16      	ldr	r2, [pc, #88]	; (800660c <BSP_LCD_DrawHLine+0xb4>)
 80065b4:	2134      	movs	r1, #52	; 0x34
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	335c      	adds	r3, #92	; 0x5c
 80065be:	681c      	ldr	r4, [r3, #0]
 80065c0:	f7ff fdc6 	bl	8006150 <BSP_LCD_GetXSize>
 80065c4:	4602      	mov	r2, r0
 80065c6:	88bb      	ldrh	r3, [r7, #4]
 80065c8:	fb03 f202 	mul.w	r2, r3, r2
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4423      	add	r3, r4
 80065d4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80065d6:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <BSP_LCD_DrawHLine+0xb0>)
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	68fc      	ldr	r4, [r7, #12]
 80065dc:	887d      	ldrh	r5, [r7, #2]
 80065de:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <BSP_LCD_DrawHLine+0xb0>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	490b      	ldr	r1, [pc, #44]	; (8006610 <BSP_LCD_DrawHLine+0xb8>)
 80065e4:	4613      	mov	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	2301      	movs	r3, #1
 80065f8:	462a      	mov	r2, r5
 80065fa:	4621      	mov	r1, r4
 80065fc:	f000 fbf2 	bl	8006de4 <LL_FillBuffer>
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bdb0      	pop	{r4, r5, r7, pc}
 8006608:	20001010 	.word	0x20001010
 800660c:	2001b92c 	.word	0x2001b92c
 8006610:	20001014 	.word	0x20001014

08006614 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006616:	b087      	sub	sp, #28
 8006618:	af02      	add	r7, sp, #8
 800661a:	4603      	mov	r3, r0
 800661c:	80fb      	strh	r3, [r7, #6]
 800661e:	460b      	mov	r3, r1
 8006620:	80bb      	strh	r3, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800662a:	4b28      	ldr	r3, [pc, #160]	; (80066cc <BSP_LCD_DrawVLine+0xb8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a28      	ldr	r2, [pc, #160]	; (80066d0 <BSP_LCD_DrawVLine+0xbc>)
 8006630:	2134      	movs	r1, #52	; 0x34
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	4413      	add	r3, r2
 8006638:	3348      	adds	r3, #72	; 0x48
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d114      	bne.n	800666a <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006640:	4b22      	ldr	r3, [pc, #136]	; (80066cc <BSP_LCD_DrawVLine+0xb8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a22      	ldr	r2, [pc, #136]	; (80066d0 <BSP_LCD_DrawVLine+0xbc>)
 8006646:	2134      	movs	r1, #52	; 0x34
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	335c      	adds	r3, #92	; 0x5c
 8006650:	681c      	ldr	r4, [r3, #0]
 8006652:	f7ff fd7d 	bl	8006150 <BSP_LCD_GetXSize>
 8006656:	4602      	mov	r2, r0
 8006658:	88bb      	ldrh	r3, [r7, #4]
 800665a:	fb03 f202 	mul.w	r2, r3, r2
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	4413      	add	r3, r2
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	4423      	add	r3, r4
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e013      	b.n	8006692 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800666a:	4b18      	ldr	r3, [pc, #96]	; (80066cc <BSP_LCD_DrawVLine+0xb8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <BSP_LCD_DrawVLine+0xbc>)
 8006670:	2134      	movs	r1, #52	; 0x34
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	335c      	adds	r3, #92	; 0x5c
 800667a:	681c      	ldr	r4, [r3, #0]
 800667c:	f7ff fd68 	bl	8006150 <BSP_LCD_GetXSize>
 8006680:	4602      	mov	r2, r0
 8006682:	88bb      	ldrh	r3, [r7, #4]
 8006684:	fb03 f202 	mul.w	r2, r3, r2
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4423      	add	r3, r4
 8006690:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8006692:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <BSP_LCD_DrawVLine+0xb8>)
 8006694:	681c      	ldr	r4, [r3, #0]
 8006696:	68fd      	ldr	r5, [r7, #12]
 8006698:	887e      	ldrh	r6, [r7, #2]
 800669a:	f7ff fd59 	bl	8006150 <BSP_LCD_GetXSize>
 800669e:	4603      	mov	r3, r0
 80066a0:	1e59      	subs	r1, r3, #1
 80066a2:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <BSP_LCD_DrawVLine+0xb8>)
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	480b      	ldr	r0, [pc, #44]	; (80066d4 <BSP_LCD_DrawVLine+0xc0>)
 80066a8:	4613      	mov	r3, r2
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4403      	add	r3, r0
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	9100      	str	r1, [sp, #0]
 80066b8:	4633      	mov	r3, r6
 80066ba:	2201      	movs	r2, #1
 80066bc:	4629      	mov	r1, r5
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 fb90 	bl	8006de4 <LL_FillBuffer>
}
 80066c4:	bf00      	nop
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066cc:	20001010 	.word	0x20001010
 80066d0:	2001b92c 	.word	0x2001b92c
 80066d4:	20001014 	.word	0x20001014

080066d8 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80066d8:	b590      	push	{r4, r7, lr}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	80fb      	strh	r3, [r7, #6]
 80066e2:	460b      	mov	r3, r1
 80066e4:	80bb      	strh	r3, [r7, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80066ea:	887b      	ldrh	r3, [r7, #2]
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	f1c3 0303 	rsb	r3, r3, #3
 80066f2:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80066f8:	887b      	ldrh	r3, [r7, #2]
 80066fa:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80066fc:	e0cf      	b.n	800689e <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	b29a      	uxth	r2, r3
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	4413      	add	r3, r2
 8006706:	b298      	uxth	r0, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	b29b      	uxth	r3, r3
 800670c:	88ba      	ldrh	r2, [r7, #4]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	b29c      	uxth	r4, r3
 8006712:	4b67      	ldr	r3, [pc, #412]	; (80068b0 <BSP_LCD_DrawCircle+0x1d8>)
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	4967      	ldr	r1, [pc, #412]	; (80068b4 <BSP_LCD_DrawCircle+0x1dc>)
 8006718:	4613      	mov	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	4621      	mov	r1, r4
 8006728:	f000 f8c6 	bl	80068b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	b29b      	uxth	r3, r3
 8006730:	88fa      	ldrh	r2, [r7, #6]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	b298      	uxth	r0, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	b29b      	uxth	r3, r3
 800673a:	88ba      	ldrh	r2, [r7, #4]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	b29c      	uxth	r4, r3
 8006740:	4b5b      	ldr	r3, [pc, #364]	; (80068b0 <BSP_LCD_DrawCircle+0x1d8>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	495b      	ldr	r1, [pc, #364]	; (80068b4 <BSP_LCD_DrawCircle+0x1dc>)
 8006746:	4613      	mov	r3, r2
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	4621      	mov	r1, r4
 8006756:	f000 f8af 	bl	80068b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	b29a      	uxth	r2, r3
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	4413      	add	r3, r2
 8006762:	b298      	uxth	r0, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	b29b      	uxth	r3, r3
 8006768:	88ba      	ldrh	r2, [r7, #4]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	b29c      	uxth	r4, r3
 800676e:	4b50      	ldr	r3, [pc, #320]	; (80068b0 <BSP_LCD_DrawCircle+0x1d8>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4950      	ldr	r1, [pc, #320]	; (80068b4 <BSP_LCD_DrawCircle+0x1dc>)
 8006774:	4613      	mov	r3, r2
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	4621      	mov	r1, r4
 8006784:	f000 f898 	bl	80068b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	b29b      	uxth	r3, r3
 800678c:	88fa      	ldrh	r2, [r7, #6]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	b298      	uxth	r0, r3
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	b29b      	uxth	r3, r3
 8006796:	88ba      	ldrh	r2, [r7, #4]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	b29c      	uxth	r4, r3
 800679c:	4b44      	ldr	r3, [pc, #272]	; (80068b0 <BSP_LCD_DrawCircle+0x1d8>)
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	4944      	ldr	r1, [pc, #272]	; (80068b4 <BSP_LCD_DrawCircle+0x1dc>)
 80067a2:	4613      	mov	r3, r2
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	4621      	mov	r1, r4
 80067b2:	f000 f881 	bl	80068b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	4413      	add	r3, r2
 80067be:	b298      	uxth	r0, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	88bb      	ldrh	r3, [r7, #4]
 80067c6:	4413      	add	r3, r2
 80067c8:	b29c      	uxth	r4, r3
 80067ca:	4b39      	ldr	r3, [pc, #228]	; (80068b0 <BSP_LCD_DrawCircle+0x1d8>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4939      	ldr	r1, [pc, #228]	; (80068b4 <BSP_LCD_DrawCircle+0x1dc>)
 80067d0:	4613      	mov	r3, r2
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	4621      	mov	r1, r4
 80067e0:	f000 f86a 	bl	80068b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	88fa      	ldrh	r2, [r7, #6]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	b298      	uxth	r0, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	88bb      	ldrh	r3, [r7, #4]
 80067f4:	4413      	add	r3, r2
 80067f6:	b29c      	uxth	r4, r3
 80067f8:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <BSP_LCD_DrawCircle+0x1d8>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	492d      	ldr	r1, [pc, #180]	; (80068b4 <BSP_LCD_DrawCircle+0x1dc>)
 80067fe:	4613      	mov	r3, r2
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	4621      	mov	r1, r4
 800680e:	f000 f853 	bl	80068b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	b29a      	uxth	r2, r3
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	4413      	add	r3, r2
 800681a:	b298      	uxth	r0, r3
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	b29a      	uxth	r2, r3
 8006820:	88bb      	ldrh	r3, [r7, #4]
 8006822:	4413      	add	r3, r2
 8006824:	b29c      	uxth	r4, r3
 8006826:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <BSP_LCD_DrawCircle+0x1d8>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4922      	ldr	r1, [pc, #136]	; (80068b4 <BSP_LCD_DrawCircle+0x1dc>)
 800682c:	4613      	mov	r3, r2
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	4621      	mov	r1, r4
 800683c:	f000 f83c 	bl	80068b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	b29b      	uxth	r3, r3
 8006844:	88fa      	ldrh	r2, [r7, #6]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	b298      	uxth	r0, r3
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	b29a      	uxth	r2, r3
 800684e:	88bb      	ldrh	r3, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	b29c      	uxth	r4, r3
 8006854:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <BSP_LCD_DrawCircle+0x1d8>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	4916      	ldr	r1, [pc, #88]	; (80068b4 <BSP_LCD_DrawCircle+0x1dc>)
 800685a:	4613      	mov	r3, r2
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	4621      	mov	r1, r4
 800686a:	f000 f825 	bl	80068b8 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	da06      	bge.n	8006882 <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	009a      	lsls	r2, r3, #2
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	3306      	adds	r3, #6
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	e00a      	b.n	8006898 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	009a      	lsls	r2, r3, #2
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	4413      	add	r3, r2
 800688e:	330a      	adds	r3, #10
 8006890:	617b      	str	r3, [r7, #20]
      current_y--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3b01      	subs	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3301      	adds	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	f67f af2b 	bls.w	80066fe <BSP_LCD_DrawCircle+0x26>
  } 
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd90      	pop	{r4, r7, pc}
 80068b0:	20001010 	.word	0x20001010
 80068b4:	20001014 	.word	0x20001014

080068b8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80068b8:	b5b0      	push	{r4, r5, r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	603a      	str	r2, [r7, #0]
 80068c2:	80fb      	strh	r3, [r7, #6]
 80068c4:	460b      	mov	r3, r1
 80068c6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <BSP_LCD_DrawPixel+0x88>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <BSP_LCD_DrawPixel+0x8c>)
 80068ce:	2134      	movs	r1, #52	; 0x34
 80068d0:	fb01 f303 	mul.w	r3, r1, r3
 80068d4:	4413      	add	r3, r2
 80068d6:	3348      	adds	r3, #72	; 0x48
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d116      	bne.n	800690c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80068de:	4b18      	ldr	r3, [pc, #96]	; (8006940 <BSP_LCD_DrawPixel+0x88>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a18      	ldr	r2, [pc, #96]	; (8006944 <BSP_LCD_DrawPixel+0x8c>)
 80068e4:	2134      	movs	r1, #52	; 0x34
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	4413      	add	r3, r2
 80068ec:	335c      	adds	r3, #92	; 0x5c
 80068ee:	681c      	ldr	r4, [r3, #0]
 80068f0:	88bd      	ldrh	r5, [r7, #4]
 80068f2:	f7ff fc2d 	bl	8006150 <BSP_LCD_GetXSize>
 80068f6:	4603      	mov	r3, r0
 80068f8:	fb03 f205 	mul.w	r2, r3, r5
 80068fc:	88fb      	ldrh	r3, [r7, #6]
 80068fe:	4413      	add	r3, r2
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	4423      	add	r3, r4
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	b292      	uxth	r2, r2
 8006908:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800690a:	e015      	b.n	8006938 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800690c:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <BSP_LCD_DrawPixel+0x88>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0c      	ldr	r2, [pc, #48]	; (8006944 <BSP_LCD_DrawPixel+0x8c>)
 8006912:	2134      	movs	r1, #52	; 0x34
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	4413      	add	r3, r2
 800691a:	335c      	adds	r3, #92	; 0x5c
 800691c:	681c      	ldr	r4, [r3, #0]
 800691e:	88bd      	ldrh	r5, [r7, #4]
 8006920:	f7ff fc16 	bl	8006150 <BSP_LCD_GetXSize>
 8006924:	4603      	mov	r3, r0
 8006926:	fb03 f205 	mul.w	r2, r3, r5
 800692a:	88fb      	ldrh	r3, [r7, #6]
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4423      	add	r3, r4
 8006932:	461a      	mov	r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6013      	str	r3, [r2, #0]
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bdb0      	pop	{r4, r5, r7, pc}
 8006940:	20001010 	.word	0x20001010
 8006944:	2001b92c 	.word	0x2001b92c

08006948 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	80fb      	strh	r3, [r7, #6]
 8006952:	460b      	mov	r3, r1
 8006954:	80bb      	strh	r3, [r7, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800695a:	887b      	ldrh	r3, [r7, #2]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	f1c3 0303 	rsb	r3, r3, #3
 8006962:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8006968:	887b      	ldrh	r3, [r7, #2]
 800696a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800696c:	4b44      	ldr	r3, [pc, #272]	; (8006a80 <BSP_LCD_FillCircle+0x138>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4944      	ldr	r1, [pc, #272]	; (8006a84 <BSP_LCD_FillCircle+0x13c>)
 8006972:	4613      	mov	r3, r2
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	440b      	add	r3, r1
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fc6e 	bl	8006260 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8006984:	e061      	b.n	8006a4a <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d021      	beq.n	80069d0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	b29b      	uxth	r3, r3
 8006990:	88fa      	ldrh	r2, [r7, #6]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	b298      	uxth	r0, r3
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	b29a      	uxth	r2, r3
 800699a:	88bb      	ldrh	r3, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	b299      	uxth	r1, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	f7ff fdd5 	bl	8006558 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	b298      	uxth	r0, r3
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	88ba      	ldrh	r2, [r7, #4]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	b299      	uxth	r1, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	f7ff fdc4 	bl	8006558 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d021      	beq.n	8006a1a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	88fa      	ldrh	r2, [r7, #6]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	b298      	uxth	r0, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	88ba      	ldrh	r2, [r7, #4]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	b299      	uxth	r1, r3
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	f7ff fdb0 	bl	8006558 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	88fa      	ldrh	r2, [r7, #6]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	b298      	uxth	r0, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	88bb      	ldrh	r3, [r7, #4]
 8006a08:	4413      	add	r3, r2
 8006a0a:	b299      	uxth	r1, r3
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	f7ff fd9f 	bl	8006558 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	da06      	bge.n	8006a2e <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	009a      	lsls	r2, r3, #2
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	4413      	add	r3, r2
 8006a28:	3306      	adds	r3, #6
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e00a      	b.n	8006a44 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	009a      	lsls	r2, r3, #2
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	4413      	add	r3, r2
 8006a3a:	330a      	adds	r3, #10
 8006a3c:	617b      	str	r3, [r7, #20]
      current_y--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	3301      	adds	r3, #1
 8006a48:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d999      	bls.n	8006986 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006a52:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <BSP_LCD_FillCircle+0x138>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	490b      	ldr	r1, [pc, #44]	; (8006a84 <BSP_LCD_FillCircle+0x13c>)
 8006a58:	4613      	mov	r3, r2
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	4413      	add	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fbfb 	bl	8006260 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8006a6a:	887a      	ldrh	r2, [r7, #2]
 8006a6c:	88b9      	ldrh	r1, [r7, #4]
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff fe31 	bl	80066d8 <BSP_LCD_DrawCircle>
}
 8006a76:	bf00      	nop
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20001010 	.word	0x20001010
 8006a84:	20001014 	.word	0x20001014

08006a88 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b090      	sub	sp, #64	; 0x40
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006a92:	4b64      	ldr	r3, [pc, #400]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a96:	4a63      	ldr	r2, [pc, #396]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a9e:	4b61      	ldr	r3, [pc, #388]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006aaa:	4b5e      	ldr	r3, [pc, #376]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	4a5d      	ldr	r2, [pc, #372]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ab6:	4b5b      	ldr	r3, [pc, #364]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ac2:	4b58      	ldr	r3, [pc, #352]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	4a57      	ldr	r2, [pc, #348]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006ac8:	f043 0310 	orr.w	r3, r3, #16
 8006acc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ace:	4b55      	ldr	r3, [pc, #340]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	f003 0310 	and.w	r3, r3, #16
 8006ad6:	623b      	str	r3, [r7, #32]
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ada:	4b52      	ldr	r3, [pc, #328]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	4a51      	ldr	r2, [pc, #324]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ae6:	4b4f      	ldr	r3, [pc, #316]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006af2:	4b4c      	ldr	r3, [pc, #304]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	4a4b      	ldr	r2, [pc, #300]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006afc:	6313      	str	r3, [r2, #48]	; 0x30
 8006afe:	4b49      	ldr	r3, [pc, #292]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006b0a:	4b46      	ldr	r3, [pc, #280]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	4a45      	ldr	r2, [pc, #276]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b14:	6313      	str	r3, [r2, #48]	; 0x30
 8006b16:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006b22:	4b40      	ldr	r3, [pc, #256]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	4a3f      	ldr	r2, [pc, #252]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b2e:	4b3d      	ldr	r3, [pc, #244]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8006b3a:	4b3a      	ldr	r3, [pc, #232]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	4a39      	ldr	r2, [pc, #228]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b44:	6313      	str	r3, [r2, #48]	; 0x30
 8006b46:	4b37      	ldr	r3, [pc, #220]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006b52:	4b34      	ldr	r3, [pc, #208]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	4a33      	ldr	r2, [pc, #204]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b5e:	4b31      	ldr	r3, [pc, #196]	; (8006c24 <BSP_LCD_MspInit+0x19c>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b66:	60bb      	str	r3, [r7, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006b6a:	2310      	movs	r3, #16
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006b76:	2302      	movs	r3, #2
 8006b78:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006b7a:	230e      	movs	r3, #14
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b82:	4619      	mov	r1, r3
 8006b84:	4828      	ldr	r0, [pc, #160]	; (8006c28 <BSP_LCD_MspInit+0x1a0>)
 8006b86:	f002 fa1d 	bl	8008fc4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006b90:	2302      	movs	r3, #2
 8006b92:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006b94:	2309      	movs	r3, #9
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4823      	ldr	r0, [pc, #140]	; (8006c2c <BSP_LCD_MspInit+0x1a4>)
 8006ba0:	f002 fa10 	bl	8008fc4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006ba4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006baa:	2302      	movs	r3, #2
 8006bac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006bae:	230e      	movs	r3, #14
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	481d      	ldr	r0, [pc, #116]	; (8006c30 <BSP_LCD_MspInit+0x1a8>)
 8006bba:	f002 fa03 	bl	8008fc4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006bbe:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006bc8:	230e      	movs	r3, #14
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8006bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4818      	ldr	r0, [pc, #96]	; (8006c34 <BSP_LCD_MspInit+0x1ac>)
 8006bd4:	f002 f9f6 	bl	8008fc4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006bd8:	23f7      	movs	r3, #247	; 0xf7
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006be0:	230e      	movs	r3, #14
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006be8:	4619      	mov	r1, r3
 8006bea:	4813      	ldr	r0, [pc, #76]	; (8006c38 <BSP_LCD_MspInit+0x1b0>)
 8006bec:	f002 f9ea 	bl	8008fc4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bfe:	4619      	mov	r1, r3
 8006c00:	480b      	ldr	r0, [pc, #44]	; (8006c30 <BSP_LCD_MspInit+0x1a8>)
 8006c02:	f002 f9df 	bl	8008fc4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006c06:	2308      	movs	r3, #8
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c12:	4619      	mov	r1, r3
 8006c14:	4808      	ldr	r0, [pc, #32]	; (8006c38 <BSP_LCD_MspInit+0x1b0>)
 8006c16:	f002 f9d5 	bl	8008fc4 <HAL_GPIO_Init>
}
 8006c1a:	bf00      	nop
 8006c1c:	3740      	adds	r7, #64	; 0x40
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40023800 	.word	0x40023800
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	40021800 	.word	0x40021800
 8006c30:	40022000 	.word	0x40022000
 8006c34:	40022400 	.word	0x40022400
 8006c38:	40022800 	.word	0x40022800

08006c3c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006c46:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <BSP_LCD_ClockConfig+0x34>)
 8006c48:	2208      	movs	r2, #8
 8006c4a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006c4c:	4b08      	ldr	r3, [pc, #32]	; (8006c70 <BSP_LCD_ClockConfig+0x34>)
 8006c4e:	22c0      	movs	r2, #192	; 0xc0
 8006c50:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006c52:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <BSP_LCD_ClockConfig+0x34>)
 8006c54:	2205      	movs	r2, #5
 8006c56:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <BSP_LCD_ClockConfig+0x34>)
 8006c5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006c60:	4803      	ldr	r0, [pc, #12]	; (8006c70 <BSP_LCD_ClockConfig+0x34>)
 8006c62:	f006 f879 	bl	800cd58 <HAL_RCCEx_PeriphCLKConfig>
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	2000102c 	.word	0x2000102c

08006c74 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	603a      	str	r2, [r7, #0]
 8006c7e:	80fb      	strh	r3, [r7, #6]
 8006c80:	460b      	mov	r3, r1
 8006c82:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8006c8c:	4b53      	ldr	r3, [pc, #332]	; (8006ddc <DrawChar+0x168>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4953      	ldr	r1, [pc, #332]	; (8006de0 <DrawChar+0x16c>)
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006ca4:	4b4d      	ldr	r3, [pc, #308]	; (8006ddc <DrawChar+0x168>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	494d      	ldr	r1, [pc, #308]	; (8006de0 <DrawChar+0x16c>)
 8006caa:	4613      	mov	r3, r2
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	889b      	ldrh	r3, [r3, #4]
 8006cba:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8006cbc:	8a3b      	ldrh	r3, [r7, #16]
 8006cbe:	3307      	adds	r3, #7
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	da00      	bge.n	8006cc6 <DrawChar+0x52>
 8006cc4:	3307      	adds	r3, #7
 8006cc6:	10db      	asrs	r3, r3, #3
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	8a3b      	ldrh	r3, [r7, #16]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	e076      	b.n	8006dca <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006cdc:	8a3b      	ldrh	r3, [r7, #16]
 8006cde:	3307      	adds	r3, #7
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	da00      	bge.n	8006ce6 <DrawChar+0x72>
 8006ce4:	3307      	adds	r3, #7
 8006ce6:	10db      	asrs	r3, r3, #3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	fb03 f302 	mul.w	r3, r3, r2
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8006cf6:	8a3b      	ldrh	r3, [r7, #16]
 8006cf8:	3307      	adds	r3, #7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da00      	bge.n	8006d00 <DrawChar+0x8c>
 8006cfe:	3307      	adds	r3, #7
 8006d00:	10db      	asrs	r3, r3, #3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d002      	beq.n	8006d0c <DrawChar+0x98>
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d004      	beq.n	8006d14 <DrawChar+0xa0>
 8006d0a:	e00c      	b.n	8006d26 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	617b      	str	r3, [r7, #20]
      break;
 8006d12:	e016      	b.n	8006d42 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	3201      	adds	r2, #1
 8006d1e:	7812      	ldrb	r2, [r2, #0]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
      break;
 8006d24:	e00d      	b.n	8006d42 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	041a      	lsls	r2, r3, #16
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	4313      	orrs	r3, r2
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	3202      	adds	r2, #2
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
      break;
 8006d40:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8006d42:	2300      	movs	r3, #0
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	e036      	b.n	8006db6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8006d48:	8a3a      	ldrh	r2, [r7, #16]
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	1ad2      	subs	r2, r2, r3
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	4413      	add	r3, r2
 8006d52:	3b01      	subs	r3, #1
 8006d54:	2201      	movs	r2, #1
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d012      	beq.n	8006d8a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	b298      	uxth	r0, r3
 8006d6e:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <DrawChar+0x168>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	491b      	ldr	r1, [pc, #108]	; (8006de0 <DrawChar+0x16c>)
 8006d74:	4613      	mov	r3, r2
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	88bb      	ldrh	r3, [r7, #4]
 8006d82:	4619      	mov	r1, r3
 8006d84:	f7ff fd98 	bl	80068b8 <BSP_LCD_DrawPixel>
 8006d88:	e012      	b.n	8006db0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	4413      	add	r3, r2
 8006d92:	b298      	uxth	r0, r3
 8006d94:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <DrawChar+0x168>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4911      	ldr	r1, [pc, #68]	; (8006de0 <DrawChar+0x16c>)
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	3304      	adds	r3, #4
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	88bb      	ldrh	r3, [r7, #4]
 8006daa:	4619      	mov	r1, r3
 8006dac:	f7ff fd84 	bl	80068b8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	8a3b      	ldrh	r3, [r7, #16]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d3c4      	bcc.n	8006d48 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8006dbe:	88bb      	ldrh	r3, [r7, #4]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	8a7b      	ldrh	r3, [r7, #18]
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d384      	bcc.n	8006cdc <DrawChar+0x68>
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20001010 	.word	0x20001010
 8006de0:	20001014 	.word	0x20001014

08006de4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006df2:	4b1e      	ldr	r3, [pc, #120]	; (8006e6c <LL_FillBuffer+0x88>)
 8006df4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006df8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006dfa:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <LL_FillBuffer+0x8c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <LL_FillBuffer+0x90>)
 8006e00:	2134      	movs	r1, #52	; 0x34
 8006e02:	fb01 f303 	mul.w	r3, r1, r3
 8006e06:	4413      	add	r3, r2
 8006e08:	3348      	adds	r3, #72	; 0x48
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d103      	bne.n	8006e18 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006e10:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <LL_FillBuffer+0x88>)
 8006e12:	2202      	movs	r2, #2
 8006e14:	609a      	str	r2, [r3, #8]
 8006e16:	e002      	b.n	8006e1e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006e18:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <LL_FillBuffer+0x88>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8006e1e:	4a13      	ldr	r2, [pc, #76]	; (8006e6c <LL_FillBuffer+0x88>)
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8006e24:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <LL_FillBuffer+0x88>)
 8006e26:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <LL_FillBuffer+0x94>)
 8006e28:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8006e2a:	4810      	ldr	r0, [pc, #64]	; (8006e6c <LL_FillBuffer+0x88>)
 8006e2c:	f001 fd2e 	bl	800888c <HAL_DMA2D_Init>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d115      	bne.n	8006e62 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	480c      	ldr	r0, [pc, #48]	; (8006e6c <LL_FillBuffer+0x88>)
 8006e3a:	f001 ff95 	bl	8008d68 <HAL_DMA2D_ConfigLayer>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10e      	bne.n	8006e62 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69f9      	ldr	r1, [r7, #28]
 8006e4e:	4807      	ldr	r0, [pc, #28]	; (8006e6c <LL_FillBuffer+0x88>)
 8006e50:	f001 fd66 	bl	8008920 <HAL_DMA2D_Start>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8006e5a:	210a      	movs	r1, #10
 8006e5c:	4803      	ldr	r0, [pc, #12]	; (8006e6c <LL_FillBuffer+0x88>)
 8006e5e:	f001 fd8a 	bl	8008976 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000fd0 	.word	0x20000fd0
 8006e70:	20001010 	.word	0x20001010
 8006e74:	2001b92c 	.word	0x2001b92c
 8006e78:	4002b000 	.word	0x4002b000

08006e7c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006e80:	4b29      	ldr	r3, [pc, #164]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006e82:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <BSP_SDRAM_Init+0xb0>)
 8006e84:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006e86:	4b2a      	ldr	r3, [pc, #168]	; (8006f30 <BSP_SDRAM_Init+0xb4>)
 8006e88:	2202      	movs	r2, #2
 8006e8a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006e8c:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <BSP_SDRAM_Init+0xb4>)
 8006e8e:	2207      	movs	r2, #7
 8006e90:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006e92:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <BSP_SDRAM_Init+0xb4>)
 8006e94:	2204      	movs	r2, #4
 8006e96:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006e98:	4b25      	ldr	r3, [pc, #148]	; (8006f30 <BSP_SDRAM_Init+0xb4>)
 8006e9a:	2207      	movs	r2, #7
 8006e9c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8006e9e:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <BSP_SDRAM_Init+0xb4>)
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006ea4:	4b22      	ldr	r3, [pc, #136]	; (8006f30 <BSP_SDRAM_Init+0xb4>)
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8006eaa:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <BSP_SDRAM_Init+0xb4>)
 8006eac:	2202      	movs	r2, #2
 8006eae:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006eb0:	4b1d      	ldr	r3, [pc, #116]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006eb6:	4b1c      	ldr	r3, [pc, #112]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006ebc:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006ebe:	2204      	movs	r2, #4
 8006ec0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006ec2:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006ec8:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006eca:	2240      	movs	r2, #64	; 0x40
 8006ecc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006ece:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006edc:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006ee4:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006ee6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006eea:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006eec:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	480c      	ldr	r0, [pc, #48]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006ef6:	f000 f87f 	bl	8006ff8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006efa:	490d      	ldr	r1, [pc, #52]	; (8006f30 <BSP_SDRAM_Init+0xb4>)
 8006efc:	480a      	ldr	r0, [pc, #40]	; (8006f28 <BSP_SDRAM_Init+0xac>)
 8006efe:	f007 fc3c 	bl	800e77a <HAL_SDRAM_Init>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <BSP_SDRAM_Init+0xb8>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e002      	b.n	8006f16 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006f10:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <BSP_SDRAM_Init+0xb8>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006f16:	f240 6003 	movw	r0, #1539	; 0x603
 8006f1a:	f000 f80d 	bl	8006f38 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8006f1e:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <BSP_SDRAM_Init+0xb8>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	2001b9d4 	.word	0x2001b9d4
 8006f2c:	a0000140 	.word	0xa0000140
 8006f30:	200010b0 	.word	0x200010b0
 8006f34:	20000068 	.word	0x20000068

08006f38 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006f44:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006f4a:	4b29      	ldr	r3, [pc, #164]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f4c:	2210      	movs	r2, #16
 8006f4e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006f50:	4b27      	ldr	r3, [pc, #156]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006f56:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f60:	4923      	ldr	r1, [pc, #140]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f62:	4824      	ldr	r0, [pc, #144]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006f64:	f007 fc3d 	bl	800e7e2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006f68:	2001      	movs	r0, #1
 8006f6a:	f000 fbcb 	bl	8007704 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006f6e:	4b20      	ldr	r3, [pc, #128]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f70:	2202      	movs	r2, #2
 8006f72:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006f74:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f76:	2210      	movs	r2, #16
 8006f78:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006f7a:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006f80:	4b1b      	ldr	r3, [pc, #108]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f8a:	4919      	ldr	r1, [pc, #100]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f8c:	4819      	ldr	r0, [pc, #100]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006f8e:	f007 fc28 	bl	800e7e2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006f92:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f94:	2203      	movs	r2, #3
 8006f96:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006f98:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f9a:	2210      	movs	r2, #16
 8006f9c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8006f9e:	4b14      	ldr	r3, [pc, #80]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006fa4:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fae:	4910      	ldr	r1, [pc, #64]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fb0:	4810      	ldr	r0, [pc, #64]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006fb2:	f007 fc16 	bl	800e7e2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006fb6:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006fba:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006fbc:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fc4:	2210      	movs	r2, #16
 8006fc6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006fc8:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4a07      	ldr	r2, [pc, #28]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fd2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fd8:	4905      	ldr	r1, [pc, #20]	; (8006ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fda:	4806      	ldr	r0, [pc, #24]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006fdc:	f007 fc01 	bl	800e7e2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	4804      	ldr	r0, [pc, #16]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006fe4:	f007 fc28 	bl	800e838 <HAL_SDRAM_ProgramRefreshRate>
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	200010cc 	.word	0x200010cc
 8006ff4:	2001b9d4 	.word	0x2001b9d4

08006ff8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b090      	sub	sp, #64	; 0x40
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007002:	4b70      	ldr	r3, [pc, #448]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	4a6f      	ldr	r2, [pc, #444]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	6393      	str	r3, [r2, #56]	; 0x38
 800700e:	4b6d      	ldr	r3, [pc, #436]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800701a:	4b6a      	ldr	r3, [pc, #424]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	4a69      	ldr	r2, [pc, #420]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007024:	6313      	str	r3, [r2, #48]	; 0x30
 8007026:	4b67      	ldr	r3, [pc, #412]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007032:	4b64      	ldr	r3, [pc, #400]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	4a63      	ldr	r2, [pc, #396]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007038:	f043 0304 	orr.w	r3, r3, #4
 800703c:	6313      	str	r3, [r2, #48]	; 0x30
 800703e:	4b61      	ldr	r3, [pc, #388]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	623b      	str	r3, [r7, #32]
 8007048:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800704a:	4b5e      	ldr	r3, [pc, #376]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	4a5d      	ldr	r2, [pc, #372]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007050:	f043 0308 	orr.w	r3, r3, #8
 8007054:	6313      	str	r3, [r2, #48]	; 0x30
 8007056:	4b5b      	ldr	r3, [pc, #364]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007062:	4b58      	ldr	r3, [pc, #352]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	4a57      	ldr	r2, [pc, #348]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007068:	f043 0310 	orr.w	r3, r3, #16
 800706c:	6313      	str	r3, [r2, #48]	; 0x30
 800706e:	4b55      	ldr	r3, [pc, #340]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800707a:	4b52      	ldr	r3, [pc, #328]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	4a51      	ldr	r2, [pc, #324]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007080:	f043 0320 	orr.w	r3, r3, #32
 8007084:	6313      	str	r3, [r2, #48]	; 0x30
 8007086:	4b4f      	ldr	r3, [pc, #316]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007092:	4b4c      	ldr	r3, [pc, #304]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007096:	4a4b      	ldr	r2, [pc, #300]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 8007098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800709c:	6313      	str	r3, [r2, #48]	; 0x30
 800709e:	4b49      	ldr	r3, [pc, #292]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80070aa:	4b46      	ldr	r3, [pc, #280]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	4a45      	ldr	r2, [pc, #276]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	6313      	str	r3, [r2, #48]	; 0x30
 80070b6:	4b43      	ldr	r3, [pc, #268]	; (80071c4 <BSP_SDRAM_MspInit+0x1cc>)
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80070c2:	2302      	movs	r3, #2
 80070c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80070c6:	2301      	movs	r3, #1
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80070ca:	2302      	movs	r3, #2
 80070cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80070ce:	230c      	movs	r3, #12
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80070d2:	2308      	movs	r3, #8
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80070d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070da:	4619      	mov	r1, r3
 80070dc:	483a      	ldr	r0, [pc, #232]	; (80071c8 <BSP_SDRAM_MspInit+0x1d0>)
 80070de:	f001 ff71 	bl	8008fc4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80070e2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80070e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070ec:	4619      	mov	r1, r3
 80070ee:	4837      	ldr	r0, [pc, #220]	; (80071cc <BSP_SDRAM_MspInit+0x1d4>)
 80070f0:	f001 ff68 	bl	8008fc4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80070f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80070fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070fe:	4619      	mov	r1, r3
 8007100:	4833      	ldr	r0, [pc, #204]	; (80071d0 <BSP_SDRAM_MspInit+0x1d8>)
 8007102:	f001 ff5f 	bl	8008fc4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007106:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800710a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800710c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007110:	4619      	mov	r1, r3
 8007112:	4830      	ldr	r0, [pc, #192]	; (80071d4 <BSP_SDRAM_MspInit+0x1dc>)
 8007114:	f001 ff56 	bl	8008fc4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007118:	f248 1333 	movw	r3, #33075	; 0x8133
 800711c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800711e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007122:	4619      	mov	r1, r3
 8007124:	482c      	ldr	r0, [pc, #176]	; (80071d8 <BSP_SDRAM_MspInit+0x1e0>)
 8007126:	f001 ff4d 	bl	8008fc4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800712a:	2328      	movs	r3, #40	; 0x28
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800712e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007132:	4619      	mov	r1, r3
 8007134:	4829      	ldr	r0, [pc, #164]	; (80071dc <BSP_SDRAM_MspInit+0x1e4>)
 8007136:	f001 ff45 	bl	8008fc4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800713a:	4b29      	ldr	r3, [pc, #164]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 800713c:	2200      	movs	r2, #0
 800713e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007140:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007142:	2280      	movs	r2, #128	; 0x80
 8007144:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007146:	4b26      	ldr	r3, [pc, #152]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800714c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800714e:	4b24      	ldr	r3, [pc, #144]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007154:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007156:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007158:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800715c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800715e:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007160:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007164:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8007166:	4b1e      	ldr	r3, [pc, #120]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007168:	2200      	movs	r2, #0
 800716a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800716c:	4b1c      	ldr	r3, [pc, #112]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 800716e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007172:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007174:	4b1a      	ldr	r3, [pc, #104]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007176:	2200      	movs	r2, #0
 8007178:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800717a:	4b19      	ldr	r3, [pc, #100]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 800717c:	2203      	movs	r2, #3
 800717e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007180:	4b17      	ldr	r3, [pc, #92]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007182:	2200      	movs	r2, #0
 8007184:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007186:	4b16      	ldr	r3, [pc, #88]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007188:	2200      	movs	r2, #0
 800718a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800718c:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 800718e:	4a15      	ldr	r2, [pc, #84]	; (80071e4 <BSP_SDRAM_MspInit+0x1ec>)
 8007190:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 8007196:	631a      	str	r2, [r3, #48]	; 0x30
 8007198:	4a11      	ldr	r2, [pc, #68]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800719e:	4810      	ldr	r0, [pc, #64]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 80071a0:	f001 f84e 	bl	8008240 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80071a4:	480e      	ldr	r0, [pc, #56]	; (80071e0 <BSP_SDRAM_MspInit+0x1e8>)
 80071a6:	f000 ff9d 	bl	80080e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80071aa:	2200      	movs	r2, #0
 80071ac:	210f      	movs	r1, #15
 80071ae:	2038      	movs	r0, #56	; 0x38
 80071b0:	f000 fe0a 	bl	8007dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80071b4:	2038      	movs	r0, #56	; 0x38
 80071b6:	f000 fe23 	bl	8007e00 <HAL_NVIC_EnableIRQ>
}
 80071ba:	bf00      	nop
 80071bc:	3740      	adds	r7, #64	; 0x40
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40023800 	.word	0x40023800
 80071c8:	40020800 	.word	0x40020800
 80071cc:	40020c00 	.word	0x40020c00
 80071d0:	40021000 	.word	0x40021000
 80071d4:	40021400 	.word	0x40021400
 80071d8:	40021800 	.word	0x40021800
 80071dc:	40021c00 	.word	0x40021c00
 80071e0:	200010dc 	.word	0x200010dc
 80071e4:	40026410 	.word	0x40026410

080071e8 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	460a      	mov	r2, r1
 80071f2:	80fb      	strh	r3, [r7, #6]
 80071f4:	4613      	mov	r3, r2
 80071f6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80071fc:	4a14      	ldr	r2, [pc, #80]	; (8007250 <BSP_TS_Init+0x68>)
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007202:	4a14      	ldr	r2, [pc, #80]	; (8007254 <BSP_TS_Init+0x6c>)
 8007204:	88bb      	ldrh	r3, [r7, #4]
 8007206:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007208:	4b13      	ldr	r3, [pc, #76]	; (8007258 <BSP_TS_Init+0x70>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2070      	movs	r0, #112	; 0x70
 800720e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007210:	4b11      	ldr	r3, [pc, #68]	; (8007258 <BSP_TS_Init+0x70>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2070      	movs	r0, #112	; 0x70
 8007216:	4798      	blx	r3
 8007218:	4603      	mov	r3, r0
 800721a:	2b51      	cmp	r3, #81	; 0x51
 800721c:	d111      	bne.n	8007242 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <BSP_TS_Init+0x74>)
 8007220:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <BSP_TS_Init+0x70>)
 8007222:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <BSP_TS_Init+0x78>)
 8007226:	2270      	movs	r2, #112	; 0x70
 8007228:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800722a:	4b0e      	ldr	r3, [pc, #56]	; (8007264 <BSP_TS_Init+0x7c>)
 800722c:	2208      	movs	r2, #8
 800722e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <BSP_TS_Init+0x74>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <BSP_TS_Init+0x78>)
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	b292      	uxth	r2, r2
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	e001      	b.n	8007246 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007242:	2303      	movs	r3, #3
 8007244:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20001140 	.word	0x20001140
 8007254:	20001142 	.word	0x20001142
 8007258:	20000004 	.word	0x20000004
 800725c:	2000113c 	.word	0x2000113c
 8007260:	20001145 	.word	0x20001145
 8007264:	20001144 	.word	0x20001144

08007268 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8007268:	b590      	push	{r4, r7, lr}
 800726a:	b097      	sub	sp, #92	; 0x5c
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8007282:	4b97      	ldr	r3, [pc, #604]	; (80074e0 <BSP_TS_GetState+0x278>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	4a96      	ldr	r2, [pc, #600]	; (80074e4 <BSP_TS_GetState+0x27c>)
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	b292      	uxth	r2, r2
 800728e:	4610      	mov	r0, r2
 8007290:	4798      	blx	r3
 8007292:	4603      	mov	r3, r0
 8007294:	461a      	mov	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 81a8 	beq.w	80075f4 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80072a4:	2300      	movs	r3, #0
 80072a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072a8:	e197      	b.n	80075da <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80072aa:	4b8d      	ldr	r3, [pc, #564]	; (80074e0 <BSP_TS_GetState+0x278>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	4a8c      	ldr	r2, [pc, #560]	; (80074e4 <BSP_TS_GetState+0x27c>)
 80072b2:	7812      	ldrb	r2, [r2, #0]
 80072b4:	b290      	uxth	r0, r2
 80072b6:	f107 0120 	add.w	r1, r7, #32
 80072ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072bc:	0052      	lsls	r2, r2, #1
 80072be:	188c      	adds	r4, r1, r2
 80072c0:	f107 0114 	add.w	r1, r7, #20
 80072c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c6:	0052      	lsls	r2, r2, #1
 80072c8:	440a      	add	r2, r1
 80072ca:	4621      	mov	r1, r4
 80072cc:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80072ce:	4b86      	ldr	r3, [pc, #536]	; (80074e8 <BSP_TS_GetState+0x280>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d11b      	bne.n	800730e <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80072d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80072de:	4413      	add	r3, r2
 80072e0:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80072e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80072ec:	440b      	add	r3, r1
 80072ee:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80072f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80072fa:	4413      	add	r3, r2
 80072fc:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007308:	440b      	add	r3, r1
 800730a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800730e:	4b76      	ldr	r3, [pc, #472]	; (80074e8 <BSP_TS_GetState+0x280>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d010      	beq.n	800733c <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800731a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007322:	4413      	add	r3, r2
 8007324:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8007328:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800732c:	b29a      	uxth	r2, r3
 800732e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007336:	440b      	add	r3, r1
 8007338:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800733c:	4b6a      	ldr	r3, [pc, #424]	; (80074e8 <BSP_TS_GetState+0x280>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d010      	beq.n	800736a <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8007348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007350:	4413      	add	r3, r2
 8007352:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8007356:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800735a:	b29a      	uxth	r2, r3
 800735c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007364:	440b      	add	r3, r1
 8007366:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800736a:	4b5f      	ldr	r3, [pc, #380]	; (80074e8 <BSP_TS_GetState+0x280>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01b      	beq.n	80073ae <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8007376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800737e:	4413      	add	r3, r2
 8007380:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800738c:	440b      	add	r3, r1
 800738e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8007392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800739a:	4413      	add	r3, r2
 800739c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80073a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80073a8:	440b      	add	r3, r1
 80073aa:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80073ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073b6:	4413      	add	r3, r2
 80073b8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80073bc:	4619      	mov	r1, r3
 80073be:	4a4b      	ldr	r2, [pc, #300]	; (80074ec <BSP_TS_GetState+0x284>)
 80073c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c6:	4299      	cmp	r1, r3
 80073c8:	d90e      	bls.n	80073e8 <BSP_TS_GetState+0x180>
 80073ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073d2:	4413      	add	r3, r2
 80073d4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80073d8:	4944      	ldr	r1, [pc, #272]	; (80074ec <BSP_TS_GetState+0x284>)
 80073da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	e00d      	b.n	8007404 <BSP_TS_GetState+0x19c>
 80073e8:	4a40      	ldr	r2, [pc, #256]	; (80074ec <BSP_TS_GetState+0x284>)
 80073ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80073fa:	440b      	add	r3, r1
 80073fc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	b29b      	uxth	r3, r3
 8007404:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007410:	4413      	add	r3, r2
 8007412:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007416:	4619      	mov	r1, r3
 8007418:	4a35      	ldr	r2, [pc, #212]	; (80074f0 <BSP_TS_GetState+0x288>)
 800741a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800741c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007420:	4299      	cmp	r1, r3
 8007422:	d90e      	bls.n	8007442 <BSP_TS_GetState+0x1da>
 8007424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800742c:	4413      	add	r3, r2
 800742e:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007432:	492f      	ldr	r1, [pc, #188]	; (80074f0 <BSP_TS_GetState+0x288>)
 8007434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007436:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800743a:	b29b      	uxth	r3, r3
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	b29b      	uxth	r3, r3
 8007440:	e00d      	b.n	800745e <BSP_TS_GetState+0x1f6>
 8007442:	4a2b      	ldr	r2, [pc, #172]	; (80074f0 <BSP_TS_GetState+0x288>)
 8007444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744a:	b29a      	uxth	r2, r3
 800744c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007454:	440b      	add	r3, r1
 8007456:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	b29b      	uxth	r3, r3
 800745e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8007462:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007466:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800746a:	4413      	add	r3, r2
 800746c:	2b05      	cmp	r3, #5
 800746e:	dd17      	ble.n	80074a0 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8007470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007478:	4413      	add	r3, r2
 800747a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800747e:	4619      	mov	r1, r3
 8007480:	4a1a      	ldr	r2, [pc, #104]	; (80074ec <BSP_TS_GetState+0x284>)
 8007482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8007488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007490:	4413      	add	r3, r2
 8007492:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007496:	4619      	mov	r1, r3
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <BSP_TS_GetState+0x288>)
 800749a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80074a0:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <BSP_TS_GetState+0x27c>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b70      	cmp	r3, #112	; 0x70
 80074a6:	d125      	bne.n	80074f4 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80074a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80074b0:	4413      	add	r3, r2
 80074b2:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	4413      	add	r3, r2
 80074be:	460a      	mov	r2, r1
 80074c0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80074c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80074ca:	4413      	add	r3, r2
 80074cc:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d4:	3304      	adds	r3, #4
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	4413      	add	r3, r2
 80074da:	460a      	mov	r2, r1
 80074dc:	809a      	strh	r2, [r3, #4]
 80074de:	e02c      	b.n	800753a <BSP_TS_GetState+0x2d2>
 80074e0:	2000113c 	.word	0x2000113c
 80074e4:	20001145 	.word	0x20001145
 80074e8:	20001144 	.word	0x20001144
 80074ec:	20001148 	.word	0x20001148
 80074f0:	2000115c 	.word	0x2000115c
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80074f4:	4b42      	ldr	r3, [pc, #264]	; (8007600 <BSP_TS_GetState+0x398>)
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	4619      	mov	r1, r3
 80074fa:	4a42      	ldr	r2, [pc, #264]	; (8007604 <BSP_TS_GetState+0x39c>)
 80074fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007502:	fb03 f301 	mul.w	r3, r3, r1
 8007506:	0b1b      	lsrs	r3, r3, #12
 8007508:	b299      	uxth	r1, r3
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	4413      	add	r3, r2
 8007512:	460a      	mov	r2, r1
 8007514:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007516:	4b3c      	ldr	r3, [pc, #240]	; (8007608 <BSP_TS_GetState+0x3a0>)
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	4619      	mov	r1, r3
 800751c:	4a3b      	ldr	r2, [pc, #236]	; (800760c <BSP_TS_GetState+0x3a4>)
 800751e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007524:	fb03 f301 	mul.w	r3, r3, r1
 8007528:	0b1b      	lsrs	r3, r3, #12
 800752a:	b299      	uxth	r1, r3
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007530:	3304      	adds	r3, #4
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	4413      	add	r3, r2
 8007536:	460a      	mov	r2, r1
 8007538:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800753a:	4b35      	ldr	r3, [pc, #212]	; (8007610 <BSP_TS_GetState+0x3a8>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b298      	uxth	r0, r3
 8007540:	f107 010c 	add.w	r1, r7, #12
 8007544:	f107 0210 	add.w	r2, r7, #16
 8007548:	f107 0308 	add.w	r3, r7, #8
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	460b      	mov	r3, r1
 8007550:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007552:	f7fc fc43 	bl	8003ddc <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	b2d9      	uxtb	r1, r3
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800755e:	4413      	add	r3, r2
 8007560:	3316      	adds	r3, #22
 8007562:	460a      	mov	r2, r1
 8007564:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	b2d9      	uxtb	r1, r3
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800756e:	4413      	add	r3, r2
 8007570:	3320      	adds	r3, #32
 8007572:	460a      	mov	r2, r1
 8007574:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b03      	cmp	r3, #3
 800757a:	d827      	bhi.n	80075cc <BSP_TS_GetState+0x364>
 800757c:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <BSP_TS_GetState+0x31c>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	08007595 	.word	0x08007595
 8007588:	080075a3 	.word	0x080075a3
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075bf 	.word	0x080075bf
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007598:	4413      	add	r3, r2
 800759a:	331b      	adds	r3, #27
 800759c:	2201      	movs	r2, #1
 800759e:	701a      	strb	r2, [r3, #0]
          break;
 80075a0:	e018      	b.n	80075d4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a6:	4413      	add	r3, r2
 80075a8:	331b      	adds	r3, #27
 80075aa:	2202      	movs	r2, #2
 80075ac:	701a      	strb	r2, [r3, #0]
          break;
 80075ae:	e011      	b.n	80075d4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075b4:	4413      	add	r3, r2
 80075b6:	331b      	adds	r3, #27
 80075b8:	2203      	movs	r2, #3
 80075ba:	701a      	strb	r2, [r3, #0]
          break;
 80075bc:	e00a      	b.n	80075d4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c2:	4413      	add	r3, r2
 80075c4:	331b      	adds	r3, #27
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
          break;
 80075ca:	e003      	b.n	80075d4 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80075d2:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80075d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d6:	3301      	adds	r3, #1
 80075d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e2:	4293      	cmp	r3, r2
 80075e4:	f4ff ae61 	bcc.w	80072aa <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f813 	bl	8007614 <BSP_TS_Get_GestureId>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80075f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3754      	adds	r7, #84	; 0x54
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd90      	pop	{r4, r7, pc}
 8007600:	20001140 	.word	0x20001140
 8007604:	20001148 	.word	0x20001148
 8007608:	20001142 	.word	0x20001142
 800760c:	2000115c 	.word	0x2000115c
 8007610:	20001145 	.word	0x20001145

08007614 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8007624:	4b1f      	ldr	r3, [pc, #124]	; (80076a4 <BSP_TS_Get_GestureId+0x90>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	f107 0208 	add.w	r2, r7, #8
 800762e:	4611      	mov	r1, r2
 8007630:	4618      	mov	r0, r3
 8007632:	f7fc fbba 	bl	8003daa <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b18      	cmp	r3, #24
 800763a:	d01b      	beq.n	8007674 <BSP_TS_Get_GestureId+0x60>
 800763c:	2b18      	cmp	r3, #24
 800763e:	d806      	bhi.n	800764e <BSP_TS_Get_GestureId+0x3a>
 8007640:	2b10      	cmp	r3, #16
 8007642:	d00f      	beq.n	8007664 <BSP_TS_Get_GestureId+0x50>
 8007644:	2b14      	cmp	r3, #20
 8007646:	d011      	beq.n	800766c <BSP_TS_Get_GestureId+0x58>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <BSP_TS_Get_GestureId+0x48>
 800764c:	e022      	b.n	8007694 <BSP_TS_Get_GestureId+0x80>
 800764e:	2b40      	cmp	r3, #64	; 0x40
 8007650:	d018      	beq.n	8007684 <BSP_TS_Get_GestureId+0x70>
 8007652:	2b49      	cmp	r3, #73	; 0x49
 8007654:	d01a      	beq.n	800768c <BSP_TS_Get_GestureId+0x78>
 8007656:	2b1c      	cmp	r3, #28
 8007658:	d010      	beq.n	800767c <BSP_TS_Get_GestureId+0x68>
 800765a:	e01b      	b.n	8007694 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007662:	e01a      	b.n	800769a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800766a:	e016      	b.n	800769a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007672:	e012      	b.n	800769a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2203      	movs	r2, #3
 8007678:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800767a:	e00e      	b.n	800769a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2204      	movs	r2, #4
 8007680:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007682:	e00a      	b.n	800769a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2205      	movs	r2, #5
 8007688:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800768a:	e006      	b.n	800769a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2206      	movs	r2, #6
 8007690:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007692:	e002      	b.n	800769a <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800769a:	7bfb      	ldrb	r3, [r7, #15]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20001145 	.word	0x20001145

080076a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076ac:	2003      	movs	r0, #3
 80076ae:	f000 fb80 	bl	8007db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076b2:	2000      	movs	r0, #0
 80076b4:	f7fc f8a4 	bl	8003800 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80076b8:	f7fb f97a 	bl	80029b0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <HAL_IncTick+0x20>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <HAL_IncTick+0x24>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4413      	add	r3, r2
 80076d4:	4a04      	ldr	r2, [pc, #16]	; (80076e8 <HAL_IncTick+0x24>)
 80076d6:	6013      	str	r3, [r2, #0]
}
 80076d8:	bf00      	nop
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000070 	.word	0x20000070
 80076e8:	2001ba08 	.word	0x2001ba08

080076ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  return uwTick;
 80076f0:	4b03      	ldr	r3, [pc, #12]	; (8007700 <HAL_GetTick+0x14>)
 80076f2:	681b      	ldr	r3, [r3, #0]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	2001ba08 	.word	0x2001ba08

08007704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800770c:	f7ff ffee 	bl	80076ec <HAL_GetTick>
 8007710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d005      	beq.n	800772a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800771e:	4b09      	ldr	r3, [pc, #36]	; (8007744 <HAL_Delay+0x40>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800772a:	bf00      	nop
 800772c:	f7ff ffde 	bl	80076ec <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	429a      	cmp	r2, r3
 800773a:	d8f7      	bhi.n	800772c <HAL_Delay+0x28>
  {
  }
}
 800773c:	bf00      	nop
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000070 	.word	0x20000070

08007748 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e031      	b.n	80077c2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fb f94a 	bl	8002a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b00      	cmp	r3, #0
 8007784:	d116      	bne.n	80077b4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800778a:	4b10      	ldr	r3, [pc, #64]	; (80077cc <HAL_ADC_Init+0x84>)
 800778c:	4013      	ands	r3, r2
 800778e:	f043 0202 	orr.w	r2, r3, #2
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f964 	bl	8007a64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	f043 0201 	orr.w	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	641a      	str	r2, [r3, #64]	; 0x40
 80077b2:	e001      	b.n	80077b8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	ffffeefd 	.word	0xffffeefd

080077d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_ADC_ConfigChannel+0x1c>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e12a      	b.n	8007a42 <HAL_ADC_ConfigChannel+0x272>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	d93a      	bls.n	8007872 <HAL_ADC_ConfigChannel+0xa2>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007804:	d035      	beq.n	8007872 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68d9      	ldr	r1, [r3, #12]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	4613      	mov	r3, r2
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	4413      	add	r3, r2
 800781a:	3b1e      	subs	r3, #30
 800781c:	2207      	movs	r2, #7
 800781e:	fa02 f303 	lsl.w	r3, r2, r3
 8007822:	43da      	mvns	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	400a      	ands	r2, r1
 800782a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a87      	ldr	r2, [pc, #540]	; (8007a50 <HAL_ADC_ConfigChannel+0x280>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d10a      	bne.n	800784c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68d9      	ldr	r1, [r3, #12]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	061a      	lsls	r2, r3, #24
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800784a:	e035      	b.n	80078b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68d9      	ldr	r1, [r3, #12]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	b29b      	uxth	r3, r3
 800785c:	4618      	mov	r0, r3
 800785e:	4603      	mov	r3, r0
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	4403      	add	r3, r0
 8007864:	3b1e      	subs	r3, #30
 8007866:	409a      	lsls	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007870:	e022      	b.n	80078b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6919      	ldr	r1, [r3, #16]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	b29b      	uxth	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	4613      	mov	r3, r2
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	4413      	add	r3, r2
 8007886:	2207      	movs	r2, #7
 8007888:	fa02 f303 	lsl.w	r3, r2, r3
 800788c:	43da      	mvns	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	400a      	ands	r2, r1
 8007894:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6919      	ldr	r1, [r3, #16]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4618      	mov	r0, r3
 80078a8:	4603      	mov	r3, r0
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	4403      	add	r3, r0
 80078ae:	409a      	lsls	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2b06      	cmp	r3, #6
 80078be:	d824      	bhi.n	800790a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	3b05      	subs	r3, #5
 80078d2:	221f      	movs	r2, #31
 80078d4:	fa02 f303 	lsl.w	r3, r2, r3
 80078d8:	43da      	mvns	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	400a      	ands	r2, r1
 80078e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	4618      	mov	r0, r3
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	3b05      	subs	r3, #5
 80078fc:	fa00 f203 	lsl.w	r2, r0, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	635a      	str	r2, [r3, #52]	; 0x34
 8007908:	e04c      	b.n	80079a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b0c      	cmp	r3, #12
 8007910:	d824      	bhi.n	800795c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	3b23      	subs	r3, #35	; 0x23
 8007924:	221f      	movs	r2, #31
 8007926:	fa02 f303 	lsl.w	r3, r2, r3
 800792a:	43da      	mvns	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	400a      	ands	r2, r1
 8007932:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	4618      	mov	r0, r3
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	3b23      	subs	r3, #35	; 0x23
 800794e:	fa00 f203 	lsl.w	r2, r0, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	631a      	str	r2, [r3, #48]	; 0x30
 800795a:	e023      	b.n	80079a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	3b41      	subs	r3, #65	; 0x41
 800796e:	221f      	movs	r2, #31
 8007970:	fa02 f303 	lsl.w	r3, r2, r3
 8007974:	43da      	mvns	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	400a      	ands	r2, r1
 800797c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	4618      	mov	r0, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	3b41      	subs	r3, #65	; 0x41
 8007998:	fa00 f203 	lsl.w	r2, r0, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2a      	ldr	r2, [pc, #168]	; (8007a54 <HAL_ADC_ConfigChannel+0x284>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d10a      	bne.n	80079c4 <HAL_ADC_ConfigChannel+0x1f4>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b6:	d105      	bne.n	80079c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80079b8:	4b27      	ldr	r3, [pc, #156]	; (8007a58 <HAL_ADC_ConfigChannel+0x288>)
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <HAL_ADC_ConfigChannel+0x288>)
 80079be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80079c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a22      	ldr	r2, [pc, #136]	; (8007a54 <HAL_ADC_ConfigChannel+0x284>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d109      	bne.n	80079e2 <HAL_ADC_ConfigChannel+0x212>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b12      	cmp	r3, #18
 80079d4:	d105      	bne.n	80079e2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80079d6:	4b20      	ldr	r3, [pc, #128]	; (8007a58 <HAL_ADC_ConfigChannel+0x288>)
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <HAL_ADC_ConfigChannel+0x288>)
 80079dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1b      	ldr	r2, [pc, #108]	; (8007a54 <HAL_ADC_ConfigChannel+0x284>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d125      	bne.n	8007a38 <HAL_ADC_ConfigChannel+0x268>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <HAL_ADC_ConfigChannel+0x280>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d003      	beq.n	80079fe <HAL_ADC_ConfigChannel+0x22e>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b11      	cmp	r3, #17
 80079fc:	d11c      	bne.n	8007a38 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80079fe:	4b16      	ldr	r3, [pc, #88]	; (8007a58 <HAL_ADC_ConfigChannel+0x288>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <HAL_ADC_ConfigChannel+0x288>)
 8007a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a08:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a10      	ldr	r2, [pc, #64]	; (8007a50 <HAL_ADC_ConfigChannel+0x280>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d111      	bne.n	8007a38 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <HAL_ADC_ConfigChannel+0x28c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a11      	ldr	r2, [pc, #68]	; (8007a60 <HAL_ADC_ConfigChannel+0x290>)
 8007a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1e:	0c9a      	lsrs	r2, r3, #18
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007a2a:	e002      	b.n	8007a32 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f9      	bne.n	8007a2c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	10000012 	.word	0x10000012
 8007a54:	40012000 	.word	0x40012000
 8007a58:	40012300 	.word	0x40012300
 8007a5c:	20000000 	.word	0x20000000
 8007a60:	431bde83 	.word	0x431bde83

08007a64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007a6c:	4b78      	ldr	r3, [pc, #480]	; (8007c50 <ADC_Init+0x1ec>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4a77      	ldr	r2, [pc, #476]	; (8007c50 <ADC_Init+0x1ec>)
 8007a72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007a76:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007a78:	4b75      	ldr	r3, [pc, #468]	; (8007c50 <ADC_Init+0x1ec>)
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4973      	ldr	r1, [pc, #460]	; (8007c50 <ADC_Init+0x1ec>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6859      	ldr	r1, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	021a      	lsls	r2, r3, #8
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007ab8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6859      	ldr	r1, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6899      	ldr	r1, [r3, #8]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	4a58      	ldr	r2, [pc, #352]	; (8007c54 <ADC_Init+0x1f0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d022      	beq.n	8007b3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689a      	ldr	r2, [r3, #8]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6899      	ldr	r1, [r3, #8]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6899      	ldr	r1, [r3, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	609a      	str	r2, [r3, #8]
 8007b3c:	e00f      	b.n	8007b5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0202 	bic.w	r2, r2, #2
 8007b6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6899      	ldr	r1, [r3, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	005a      	lsls	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01b      	beq.n	8007bc4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007baa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6859      	ldr	r1, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	035a      	lsls	r2, r3, #13
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	e007      	b.n	8007bd4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	051a      	lsls	r2, r3, #20
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6899      	ldr	r1, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c16:	025a      	lsls	r2, r3, #9
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6899      	ldr	r1, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	029a      	lsls	r2, r3, #10
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	609a      	str	r2, [r3, #8]
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	40012300 	.word	0x40012300
 8007c54:	0f000001 	.word	0x0f000001

08007c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c68:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <__NVIC_SetPriorityGrouping+0x40>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c74:	4013      	ands	r3, r2
 8007c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007c80:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <__NVIC_SetPriorityGrouping+0x44>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c86:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <__NVIC_SetPriorityGrouping+0x40>)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	60d3      	str	r3, [r2, #12]
}
 8007c8c:	bf00      	nop
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	e000ed00 	.word	0xe000ed00
 8007c9c:	05fa0000 	.word	0x05fa0000

08007ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ca4:	4b04      	ldr	r3, [pc, #16]	; (8007cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	0a1b      	lsrs	r3, r3, #8
 8007caa:	f003 0307 	and.w	r3, r3, #7
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	e000ed00 	.word	0xe000ed00

08007cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	db0b      	blt.n	8007ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	f003 021f 	and.w	r2, r3, #31
 8007cd4:	4907      	ldr	r1, [pc, #28]	; (8007cf4 <__NVIC_EnableIRQ+0x38>)
 8007cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	2001      	movs	r0, #1
 8007cde:	fa00 f202 	lsl.w	r2, r0, r2
 8007ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	e000e100 	.word	0xe000e100

08007cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	6039      	str	r1, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	db0a      	blt.n	8007d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	490c      	ldr	r1, [pc, #48]	; (8007d44 <__NVIC_SetPriority+0x4c>)
 8007d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d16:	0112      	lsls	r2, r2, #4
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d20:	e00a      	b.n	8007d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	4908      	ldr	r1, [pc, #32]	; (8007d48 <__NVIC_SetPriority+0x50>)
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	0112      	lsls	r2, r2, #4
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	440b      	add	r3, r1
 8007d36:	761a      	strb	r2, [r3, #24]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	e000e100 	.word	0xe000e100
 8007d48:	e000ed00 	.word	0xe000ed00

08007d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b089      	sub	sp, #36	; 0x24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f1c3 0307 	rsb	r3, r3, #7
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	bf28      	it	cs
 8007d6a:	2304      	movcs	r3, #4
 8007d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	3304      	adds	r3, #4
 8007d72:	2b06      	cmp	r3, #6
 8007d74:	d902      	bls.n	8007d7c <NVIC_EncodePriority+0x30>
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	3b03      	subs	r3, #3
 8007d7a:	e000      	b.n	8007d7e <NVIC_EncodePriority+0x32>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d80:	f04f 32ff 	mov.w	r2, #4294967295
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8a:	43da      	mvns	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	401a      	ands	r2, r3
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d94:	f04f 31ff 	mov.w	r1, #4294967295
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9e:	43d9      	mvns	r1, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007da4:	4313      	orrs	r3, r2
         );
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3724      	adds	r7, #36	; 0x24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff ff4c 	bl	8007c58 <__NVIC_SetPriorityGrouping>
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007dda:	f7ff ff61 	bl	8007ca0 <__NVIC_GetPriorityGrouping>
 8007dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	6978      	ldr	r0, [r7, #20]
 8007de6:	f7ff ffb1 	bl	8007d4c <NVIC_EncodePriority>
 8007dea:	4602      	mov	r2, r0
 8007dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df0:	4611      	mov	r1, r2
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff ff80 	bl	8007cf8 <__NVIC_SetPriority>
}
 8007df8:	bf00      	nop
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff ff54 	bl	8007cbc <__NVIC_EnableIRQ>
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e054      	b.n	8007ed8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	7f5b      	ldrb	r3, [r3, #29]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fa fe38 	bl	8002ab4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	791b      	ldrb	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10c      	bne.n	8007e6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a22      	ldr	r2, [pc, #136]	; (8007ee0 <HAL_CRC_Init+0xc4>)
 8007e58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0218 	bic.w	r2, r2, #24
 8007e68:	609a      	str	r2, [r3, #8]
 8007e6a:	e00c      	b.n	8007e86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6899      	ldr	r1, [r3, #8]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f834 	bl	8007ee4 <HAL_CRCEx_Polynomial_Set>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e028      	b.n	8007ed8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	795b      	ldrb	r3, [r3, #5]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295
 8007e96:	611a      	str	r2, [r3, #16]
 8007e98:	e004      	b.n	8007ea4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6912      	ldr	r2, [r2, #16]
 8007ea2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695a      	ldr	r2, [r3, #20]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699a      	ldr	r2, [r3, #24]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	04c11db7 	.word	0x04c11db7

08007ee4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007ef4:	231f      	movs	r3, #31
 8007ef6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007ef8:	bf00      	nop
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1e5a      	subs	r2, r3, #1
 8007efe:	613a      	str	r2, [r7, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d009      	beq.n	8007f18 <HAL_CRCEx_Polynomial_Set+0x34>
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f003 031f 	and.w	r3, r3, #31
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0f0      	beq.n	8007efa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b18      	cmp	r3, #24
 8007f1c:	d846      	bhi.n	8007fac <HAL_CRCEx_Polynomial_Set+0xc8>
 8007f1e:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007fb3 	.word	0x08007fb3
 8007f28:	08007fad 	.word	0x08007fad
 8007f2c:	08007fad 	.word	0x08007fad
 8007f30:	08007fad 	.word	0x08007fad
 8007f34:	08007fad 	.word	0x08007fad
 8007f38:	08007fad 	.word	0x08007fad
 8007f3c:	08007fad 	.word	0x08007fad
 8007f40:	08007fad 	.word	0x08007fad
 8007f44:	08007fa1 	.word	0x08007fa1
 8007f48:	08007fad 	.word	0x08007fad
 8007f4c:	08007fad 	.word	0x08007fad
 8007f50:	08007fad 	.word	0x08007fad
 8007f54:	08007fad 	.word	0x08007fad
 8007f58:	08007fad 	.word	0x08007fad
 8007f5c:	08007fad 	.word	0x08007fad
 8007f60:	08007fad 	.word	0x08007fad
 8007f64:	08007f95 	.word	0x08007f95
 8007f68:	08007fad 	.word	0x08007fad
 8007f6c:	08007fad 	.word	0x08007fad
 8007f70:	08007fad 	.word	0x08007fad
 8007f74:	08007fad 	.word	0x08007fad
 8007f78:	08007fad 	.word	0x08007fad
 8007f7c:	08007fad 	.word	0x08007fad
 8007f80:	08007fad 	.word	0x08007fad
 8007f84:	08007f89 	.word	0x08007f89
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2b06      	cmp	r3, #6
 8007f8c:	d913      	bls.n	8007fb6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007f92:	e010      	b.n	8007fb6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	2b07      	cmp	r3, #7
 8007f98:	d90f      	bls.n	8007fba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007f9e:	e00c      	b.n	8007fba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	2b0f      	cmp	r3, #15
 8007fa4:	d90b      	bls.n	8007fbe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007faa:	e008      	b.n	8007fbe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb0:	e006      	b.n	8007fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007fb2:	bf00      	nop
 8007fb4:	e004      	b.n	8007fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007fb6:	bf00      	nop
 8007fb8:	e002      	b.n	8007fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007fba:	bf00      	nop
 8007fbc:	e000      	b.n	8007fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007fbe:	bf00      	nop
  }
  if (status == HAL_OK)
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10d      	bne.n	8007fe2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f023 0118 	bic.w	r1, r3, #24
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e069      	b.n	80080d6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fa fd70 	bl	8002af4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6819      	ldr	r1, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	4b2a      	ldr	r3, [pc, #168]	; (80080e0 <HAL_DCMI_Init+0xf0>)
 8008036:	400b      	ands	r3, r1
 8008038:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6819      	ldr	r1, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800804e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800805a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8008066:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8008072:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800807e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b10      	cmp	r3, #16
 800808e:	d112      	bne.n	80080b6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	7f1b      	ldrb	r3, [r3, #28]
 8008094:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	7f5b      	ldrb	r3, [r3, #29]
 800809a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800809c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7f9b      	ldrb	r3, [r3, #30]
 80080a2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80080a4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	7fdb      	ldrb	r3, [r3, #31]
 80080ac:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80080b2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80080b4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f042 021e 	orr.w	r2, r2, #30
 80080c4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	ffe0f007 	.word	0xffe0f007

080080e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80080f0:	f7ff fafc 	bl	80076ec <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e099      	b.n	8008234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0201 	bic.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008120:	e00f      	b.n	8008142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008122:	f7ff fae3 	bl	80076ec <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b05      	cmp	r3, #5
 800812e:	d908      	bls.n	8008142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2203      	movs	r2, #3
 800813a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e078      	b.n	8008234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e8      	bne.n	8008122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4b38      	ldr	r3, [pc, #224]	; (800823c <HAL_DMA_Init+0x158>)
 800815c:	4013      	ands	r3, r2
 800815e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800816e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800817a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	2b04      	cmp	r3, #4
 800819a:	d107      	bne.n	80081ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a4:	4313      	orrs	r3, r2
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f023 0307 	bic.w	r3, r3, #7
 80081c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d117      	bne.n	8008206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00e      	beq.n	8008206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fad5 	bl	8008798 <DMA_CheckFifoParam>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d008      	beq.n	8008206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2240      	movs	r2, #64	; 0x40
 80081f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008202:	2301      	movs	r3, #1
 8008204:	e016      	b.n	8008234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa8c 	bl	800872c <DMA_CalcBaseAndBitshift>
 8008214:	4603      	mov	r3, r0
 8008216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800821c:	223f      	movs	r2, #63	; 0x3f
 800821e:	409a      	lsls	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	f010803f 	.word	0xf010803f

08008240 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e050      	b.n	80082f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d101      	bne.n	8008262 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800825e:	2302      	movs	r3, #2
 8008260:	e048      	b.n	80082f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0201 	bic.w	r2, r2, #1
 8008270:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2200      	movs	r2, #0
 8008280:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2200      	movs	r2, #0
 8008288:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2200      	movs	r2, #0
 8008290:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2200      	movs	r2, #0
 8008298:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2221      	movs	r2, #33	; 0x21
 80082a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa42 	bl	800872c <DMA_CalcBaseAndBitshift>
 80082a8:	4603      	mov	r3, r0
 80082aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b0:	223f      	movs	r2, #63	; 0x3f
 80082b2:	409a      	lsls	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800831a:	2b01      	cmp	r3, #1
 800831c:	d101      	bne.n	8008322 <HAL_DMA_Start_IT+0x26>
 800831e:	2302      	movs	r3, #2
 8008320:	e048      	b.n	80083b4 <HAL_DMA_Start_IT+0xb8>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b01      	cmp	r3, #1
 8008334:	d137      	bne.n	80083a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2202      	movs	r2, #2
 800833a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f9c0 	bl	80086d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008354:	223f      	movs	r2, #63	; 0x3f
 8008356:	409a      	lsls	r2, r3
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0216 	orr.w	r2, r2, #22
 800836a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	695a      	ldr	r2, [r3, #20]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800837a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0208 	orr.w	r2, r2, #8
 8008392:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0201 	orr.w	r2, r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	e005      	b.n	80083b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80083ae:	2302      	movs	r3, #2
 80083b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80083c8:	4b92      	ldr	r3, [pc, #584]	; (8008614 <HAL_DMA_IRQHandler+0x258>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a92      	ldr	r2, [pc, #584]	; (8008618 <HAL_DMA_IRQHandler+0x25c>)
 80083ce:	fba2 2303 	umull	r2, r3, r2, r3
 80083d2:	0a9b      	lsrs	r3, r3, #10
 80083d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e6:	2208      	movs	r2, #8
 80083e8:	409a      	lsls	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4013      	ands	r3, r2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d01a      	beq.n	8008428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d013      	beq.n	8008428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0204 	bic.w	r2, r2, #4
 800840e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008414:	2208      	movs	r2, #8
 8008416:	409a      	lsls	r2, r3
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008420:	f043 0201 	orr.w	r2, r3, #1
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842c:	2201      	movs	r2, #1
 800842e:	409a      	lsls	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4013      	ands	r3, r2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d012      	beq.n	800845e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800844a:	2201      	movs	r2, #1
 800844c:	409a      	lsls	r2, r3
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008456:	f043 0202 	orr.w	r2, r3, #2
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008462:	2204      	movs	r2, #4
 8008464:	409a      	lsls	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4013      	ands	r3, r2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d012      	beq.n	8008494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008480:	2204      	movs	r2, #4
 8008482:	409a      	lsls	r2, r3
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848c:	f043 0204 	orr.w	r2, r3, #4
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008498:	2210      	movs	r2, #16
 800849a:	409a      	lsls	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4013      	ands	r3, r2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d043      	beq.n	800852c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d03c      	beq.n	800852c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b6:	2210      	movs	r2, #16
 80084b8:	409a      	lsls	r2, r3
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d018      	beq.n	80084fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d108      	bne.n	80084ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d024      	beq.n	800852c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
 80084ea:	e01f      	b.n	800852c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01b      	beq.n	800852c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	4798      	blx	r3
 80084fc:	e016      	b.n	800852c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008508:	2b00      	cmp	r3, #0
 800850a:	d107      	bne.n	800851c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0208 	bic.w	r2, r2, #8
 800851a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008530:	2220      	movs	r2, #32
 8008532:	409a      	lsls	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4013      	ands	r3, r2
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 808e 	beq.w	800865a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 8086 	beq.w	800865a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008552:	2220      	movs	r2, #32
 8008554:	409a      	lsls	r2, r3
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b05      	cmp	r3, #5
 8008564:	d136      	bne.n	80085d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0216 	bic.w	r2, r2, #22
 8008574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	695a      	ldr	r2, [r3, #20]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <HAL_DMA_IRQHandler+0x1da>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008592:	2b00      	cmp	r3, #0
 8008594:	d007      	beq.n	80085a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0208 	bic.w	r2, r2, #8
 80085a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085aa:	223f      	movs	r2, #63	; 0x3f
 80085ac:	409a      	lsls	r2, r3
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d07d      	beq.n	80086c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
        }
        return;
 80085d2:	e078      	b.n	80086c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d01c      	beq.n	800861c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d108      	bne.n	8008602 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d030      	beq.n	800865a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4798      	blx	r3
 8008600:	e02b      	b.n	800865a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d027      	beq.n	800865a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
 8008612:	e022      	b.n	800865a <HAL_DMA_IRQHandler+0x29e>
 8008614:	20000000 	.word	0x20000000
 8008618:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10f      	bne.n	800864a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0210 	bic.w	r2, r2, #16
 8008638:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865e:	2b00      	cmp	r3, #0
 8008660:	d032      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d022      	beq.n	80086b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2205      	movs	r2, #5
 8008672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0201 	bic.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	3301      	adds	r3, #1
 800868a:	60bb      	str	r3, [r7, #8]
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	429a      	cmp	r2, r3
 8008690:	d307      	bcc.n	80086a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1f2      	bne.n	8008686 <HAL_DMA_IRQHandler+0x2ca>
 80086a0:	e000      	b.n	80086a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80086a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	4798      	blx	r3
 80086c4:	e000      	b.n	80086c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80086c6:	bf00      	nop
    }
  }
}
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop

080086d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	d108      	bne.n	8008710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800870e:	e007      	b.n	8008720 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	60da      	str	r2, [r3, #12]
}
 8008720:	bf00      	nop
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	b2db      	uxtb	r3, r3
 800873a:	3b10      	subs	r3, #16
 800873c:	4a13      	ldr	r2, [pc, #76]	; (800878c <DMA_CalcBaseAndBitshift+0x60>)
 800873e:	fba2 2303 	umull	r2, r3, r2, r3
 8008742:	091b      	lsrs	r3, r3, #4
 8008744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008746:	4a12      	ldr	r2, [pc, #72]	; (8008790 <DMA_CalcBaseAndBitshift+0x64>)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b03      	cmp	r3, #3
 8008758:	d908      	bls.n	800876c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <DMA_CalcBaseAndBitshift+0x68>)
 8008762:	4013      	ands	r3, r2
 8008764:	1d1a      	adds	r2, r3, #4
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	659a      	str	r2, [r3, #88]	; 0x58
 800876a:	e006      	b.n	800877a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	4b08      	ldr	r3, [pc, #32]	; (8008794 <DMA_CalcBaseAndBitshift+0x68>)
 8008774:	4013      	ands	r3, r2
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	aaaaaaab 	.word	0xaaaaaaab
 8008790:	0801a0a4 	.word	0x0801a0a4
 8008794:	fffffc00 	.word	0xfffffc00

08008798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d11f      	bne.n	80087f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d855      	bhi.n	8008864 <DMA_CheckFifoParam+0xcc>
 80087b8:	a201      	add	r2, pc, #4	; (adr r2, 80087c0 <DMA_CheckFifoParam+0x28>)
 80087ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087be:	bf00      	nop
 80087c0:	080087d1 	.word	0x080087d1
 80087c4:	080087e3 	.word	0x080087e3
 80087c8:	080087d1 	.word	0x080087d1
 80087cc:	08008865 	.word	0x08008865
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d045      	beq.n	8008868 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087e0:	e042      	b.n	8008868 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087ea:	d13f      	bne.n	800886c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087f0:	e03c      	b.n	800886c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087fa:	d121      	bne.n	8008840 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d836      	bhi.n	8008870 <DMA_CheckFifoParam+0xd8>
 8008802:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <DMA_CheckFifoParam+0x70>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008819 	.word	0x08008819
 800880c:	0800881f 	.word	0x0800881f
 8008810:	08008819 	.word	0x08008819
 8008814:	08008831 	.word	0x08008831
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
      break;
 800881c:	e02f      	b.n	800887e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d024      	beq.n	8008874 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800882e:	e021      	b.n	8008874 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008838:	d11e      	bne.n	8008878 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800883e:	e01b      	b.n	8008878 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d902      	bls.n	800884c <DMA_CheckFifoParam+0xb4>
 8008846:	2b03      	cmp	r3, #3
 8008848:	d003      	beq.n	8008852 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800884a:	e018      	b.n	800887e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
      break;
 8008850:	e015      	b.n	800887e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00e      	beq.n	800887c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	73fb      	strb	r3, [r7, #15]
      break;
 8008862:	e00b      	b.n	800887c <DMA_CheckFifoParam+0xe4>
      break;
 8008864:	bf00      	nop
 8008866:	e00a      	b.n	800887e <DMA_CheckFifoParam+0xe6>
      break;
 8008868:	bf00      	nop
 800886a:	e008      	b.n	800887e <DMA_CheckFifoParam+0xe6>
      break;
 800886c:	bf00      	nop
 800886e:	e006      	b.n	800887e <DMA_CheckFifoParam+0xe6>
      break;
 8008870:	bf00      	nop
 8008872:	e004      	b.n	800887e <DMA_CheckFifoParam+0xe6>
      break;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <DMA_CheckFifoParam+0xe6>
      break;   
 8008878:	bf00      	nop
 800887a:	e000      	b.n	800887e <DMA_CheckFifoParam+0xe6>
      break;
 800887c:	bf00      	nop
    }
  } 
  
  return status; 
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e039      	b.n	8008912 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d106      	bne.n	80088b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fa f9dc 	bl	8002c70 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088dc:	f023 0107 	bic.w	r1, r3, #7
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689a      	ldr	r2, [r3, #8]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088f2:	4b0a      	ldr	r3, [pc, #40]	; (800891c <HAL_DMA2D_Init+0x90>)
 80088f4:	4013      	ands	r3, r2
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68d1      	ldr	r1, [r2, #12]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	6812      	ldr	r2, [r2, #0]
 80088fe:	430b      	orrs	r3, r1
 8008900:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	ffffc000 	.word	0xffffc000

08008920 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af02      	add	r7, sp, #8
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008934:	2b01      	cmp	r3, #1
 8008936:	d101      	bne.n	800893c <HAL_DMA2D_Start+0x1c>
 8008938:	2302      	movs	r3, #2
 800893a:	e018      	b.n	800896e <HAL_DMA2D_Start+0x4e>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fa98 	bl	8008e8c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0201 	orr.w	r2, r2, #1
 800896a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b086      	sub	sp, #24
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d056      	beq.n	8008a40 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8008992:	f7fe feab 	bl	80076ec <HAL_GetTick>
 8008996:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008998:	e04b      	b.n	8008a32 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d023      	beq.n	80089f4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d005      	beq.n	80089c2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	f043 0202 	orr.w	r2, r3, #2
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d0:	f043 0201 	orr.w	r2, r3, #1
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2221      	movs	r2, #33	; 0x21
 80089de:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2204      	movs	r2, #4
 80089e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e0a5      	b.n	8008b40 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fa:	d01a      	beq.n	8008a32 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80089fc:	f7fe fe76 	bl	80076ec <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d302      	bcc.n	8008a12 <HAL_DMA2D_PollForTransfer+0x9c>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10f      	bne.n	8008a32 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a16:	f043 0220 	orr.w	r2, r3, #32
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2203      	movs	r2, #3
 8008a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e086      	b.n	8008b40 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0ac      	beq.n	800899a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d061      	beq.n	8008b26 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a62:	f7fe fe43 	bl	80076ec <HAL_GetTick>
 8008a66:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008a68:	e056      	b.n	8008b18 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d02e      	beq.n	8008ada <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f003 0308 	and.w	r3, r3, #8
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8a:	f043 0204 	orr.w	r2, r3, #4
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa0:	f043 0202 	orr.w	r2, r3, #2
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab6:	f043 0201 	orr.w	r2, r3, #1
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2229      	movs	r2, #41	; 0x29
 8008ac4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2204      	movs	r2, #4
 8008aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e032      	b.n	8008b40 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae0:	d01a      	beq.n	8008b18 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8008ae2:	f7fe fe03 	bl	80076ec <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d302      	bcc.n	8008af8 <HAL_DMA2D_PollForTransfer+0x182>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10f      	bne.n	8008b18 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afc:	f043 0220 	orr.w	r2, r3, #32
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2203      	movs	r2, #3
 8008b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e013      	b.n	8008b40 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f003 0310 	and.w	r3, r3, #16
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0a1      	beq.n	8008a6a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2212      	movs	r2, #18
 8008b2c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d026      	beq.n	8008bb8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d021      	beq.n	8008bb8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b82:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b88:	f043 0201 	orr.w	r2, r3, #1
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2201      	movs	r2, #1
 8008b96:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2204      	movs	r2, #4
 8008b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d026      	beq.n	8008c10 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d021      	beq.n	8008c10 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bda:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2220      	movs	r2, #32
 8008be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be8:	f043 0202 	orr.w	r2, r3, #2
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d026      	beq.n	8008c68 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d021      	beq.n	8008c68 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c32:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2208      	movs	r2, #8
 8008c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c40:	f043 0204 	orr.w	r2, r3, #4
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2204      	movs	r2, #4
 8008c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d013      	beq.n	8008c9a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00e      	beq.n	8008c9a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c8a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2204      	movs	r2, #4
 8008c92:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f853 	bl	8008d40 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d024      	beq.n	8008cee <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d01f      	beq.n	8008cee <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008cbc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f003 0310 	and.w	r3, r3, #16
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01f      	beq.n	8008d38 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01a      	beq.n	8008d38 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d10:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2210      	movs	r2, #16
 8008d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f80e 	bl	8008d54 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008d38:	bf00      	nop
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d101      	bne.n	8008d88 <HAL_DMA2D_ConfigLayer+0x20>
 8008d84:	2302      	movs	r3, #2
 8008d86:	e079      	b.n	8008e7c <HAL_DMA2D_ConfigLayer+0x114>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	3318      	adds	r3, #24
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	4413      	add	r3, r2
 8008da2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	041b      	lsls	r3, r3, #16
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008db2:	4b35      	ldr	r3, [pc, #212]	; (8008e88 <HAL_DMA2D_ConfigLayer+0x120>)
 8008db4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2b0a      	cmp	r3, #10
 8008dbc:	d003      	beq.n	8008dc6 <HAL_DMA2D_ConfigLayer+0x5e>
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	2b09      	cmp	r3, #9
 8008dc4:	d107      	bne.n	8008dd6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e005      	b.n	8008de2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	061b      	lsls	r3, r3, #24
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d120      	bne.n	8008e2a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	43db      	mvns	r3, r3
 8008df2:	ea02 0103 	and.w	r1, r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	6812      	ldr	r2, [r2, #0]
 8008e08:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2b0a      	cmp	r3, #10
 8008e10:	d003      	beq.n	8008e1a <HAL_DMA2D_ConfigLayer+0xb2>
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	2b09      	cmp	r3, #9
 8008e18:	d127      	bne.n	8008e6a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008e26:	629a      	str	r2, [r3, #40]	; 0x28
 8008e28:	e01f      	b.n	8008e6a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69da      	ldr	r2, [r3, #28]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	43db      	mvns	r3, r3
 8008e34:	ea02 0103 	and.w	r1, r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	6812      	ldr	r2, [r2, #0]
 8008e4a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2b0a      	cmp	r3, #10
 8008e52:	d003      	beq.n	8008e5c <HAL_DMA2D_ConfigLayer+0xf4>
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b09      	cmp	r3, #9
 8008e5a:	d106      	bne.n	8008e6a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008e68:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	ff03000f 	.word	0xff03000f

08008e8c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b08b      	sub	sp, #44	; 0x2c
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	041a      	lsls	r2, r3, #16
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ec4:	d174      	bne.n	8008fb0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ecc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ed4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008edc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d108      	bne.n	8008efe <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
 8008efc:	e053      	b.n	8008fa6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d106      	bne.n	8008f14 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
 8008f12:	e048      	b.n	8008fa6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d111      	bne.n	8008f40 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	0cdb      	lsrs	r3, r3, #19
 8008f20:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	0a9b      	lsrs	r3, r3, #10
 8008f26:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	08db      	lsrs	r3, r3, #3
 8008f2c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	02db      	lsls	r3, r3, #11
 8008f36:	4313      	orrs	r3, r2
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3e:	e032      	b.n	8008fa6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d117      	bne.n	8008f78 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	0fdb      	lsrs	r3, r3, #31
 8008f4c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	0cdb      	lsrs	r3, r3, #19
 8008f52:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	0adb      	lsrs	r3, r3, #11
 8008f58:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	08db      	lsrs	r3, r3, #3
 8008f5e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	029b      	lsls	r3, r3, #10
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	03db      	lsls	r3, r3, #15
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
 8008f76:	e016      	b.n	8008fa6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	0f1b      	lsrs	r3, r3, #28
 8008f7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	0d1b      	lsrs	r3, r3, #20
 8008f82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	0b1b      	lsrs	r3, r3, #12
 8008f88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	091b      	lsrs	r3, r3, #4
 8008f8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	011a      	lsls	r2, r3, #4
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	031b      	lsls	r3, r3, #12
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008fae:	e003      	b.n	8008fb8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	60da      	str	r2, [r3, #12]
}
 8008fb8:	bf00      	nop
 8008fba:	372c      	adds	r7, #44	; 0x2c
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b089      	sub	sp, #36	; 0x24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61fb      	str	r3, [r7, #28]
 8008fe2:	e175      	b.n	80092d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	f040 8164 	bne.w	80092ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d00b      	beq.n	8009022 <HAL_GPIO_Init+0x5e>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d007      	beq.n	8009022 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009016:	2b11      	cmp	r3, #17
 8009018:	d003      	beq.n	8009022 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	2b12      	cmp	r3, #18
 8009020:	d130      	bne.n	8009084 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	2203      	movs	r2, #3
 800902e:	fa02 f303 	lsl.w	r3, r2, r3
 8009032:	43db      	mvns	r3, r3
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	4013      	ands	r3, r2
 8009038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	005b      	lsls	r3, r3, #1
 8009042:	fa02 f303 	lsl.w	r3, r2, r3
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	4313      	orrs	r3, r2
 800904a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009058:	2201      	movs	r2, #1
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	fa02 f303 	lsl.w	r3, r2, r3
 8009060:	43db      	mvns	r3, r3
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	4013      	ands	r3, r2
 8009066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	091b      	lsrs	r3, r3, #4
 800906e:	f003 0201 	and.w	r2, r3, #1
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	fa02 f303 	lsl.w	r3, r2, r3
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	4313      	orrs	r3, r2
 800907c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	2203      	movs	r2, #3
 8009090:	fa02 f303 	lsl.w	r3, r2, r3
 8009094:	43db      	mvns	r3, r3
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	4013      	ands	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	69ba      	ldr	r2, [r7, #24]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d003      	beq.n	80090c4 <HAL_GPIO_Init+0x100>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2b12      	cmp	r3, #18
 80090c2:	d123      	bne.n	800910c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	08da      	lsrs	r2, r3, #3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3208      	adds	r2, #8
 80090cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	220f      	movs	r2, #15
 80090dc:	fa02 f303 	lsl.w	r3, r2, r3
 80090e0:	43db      	mvns	r3, r3
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	4013      	ands	r3, r2
 80090e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	fa02 f303 	lsl.w	r3, r2, r3
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	08da      	lsrs	r2, r3, #3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3208      	adds	r2, #8
 8009106:	69b9      	ldr	r1, [r7, #24]
 8009108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	2203      	movs	r2, #3
 8009118:	fa02 f303 	lsl.w	r3, r2, r3
 800911c:	43db      	mvns	r3, r3
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	4013      	ands	r3, r2
 8009122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f003 0203 	and.w	r2, r3, #3
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	fa02 f303 	lsl.w	r3, r2, r3
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	4313      	orrs	r3, r2
 8009138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 80be 	beq.w	80092ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800914e:	4b65      	ldr	r3, [pc, #404]	; (80092e4 <HAL_GPIO_Init+0x320>)
 8009150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009152:	4a64      	ldr	r2, [pc, #400]	; (80092e4 <HAL_GPIO_Init+0x320>)
 8009154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009158:	6453      	str	r3, [r2, #68]	; 0x44
 800915a:	4b62      	ldr	r3, [pc, #392]	; (80092e4 <HAL_GPIO_Init+0x320>)
 800915c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009166:	4a60      	ldr	r2, [pc, #384]	; (80092e8 <HAL_GPIO_Init+0x324>)
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	089b      	lsrs	r3, r3, #2
 800916c:	3302      	adds	r3, #2
 800916e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009172:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	220f      	movs	r2, #15
 800917e:	fa02 f303 	lsl.w	r3, r2, r3
 8009182:	43db      	mvns	r3, r3
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	4013      	ands	r3, r2
 8009188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a57      	ldr	r2, [pc, #348]	; (80092ec <HAL_GPIO_Init+0x328>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d037      	beq.n	8009202 <HAL_GPIO_Init+0x23e>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a56      	ldr	r2, [pc, #344]	; (80092f0 <HAL_GPIO_Init+0x32c>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d031      	beq.n	80091fe <HAL_GPIO_Init+0x23a>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a55      	ldr	r2, [pc, #340]	; (80092f4 <HAL_GPIO_Init+0x330>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d02b      	beq.n	80091fa <HAL_GPIO_Init+0x236>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a54      	ldr	r2, [pc, #336]	; (80092f8 <HAL_GPIO_Init+0x334>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d025      	beq.n	80091f6 <HAL_GPIO_Init+0x232>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a53      	ldr	r2, [pc, #332]	; (80092fc <HAL_GPIO_Init+0x338>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d01f      	beq.n	80091f2 <HAL_GPIO_Init+0x22e>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a52      	ldr	r2, [pc, #328]	; (8009300 <HAL_GPIO_Init+0x33c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d019      	beq.n	80091ee <HAL_GPIO_Init+0x22a>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a51      	ldr	r2, [pc, #324]	; (8009304 <HAL_GPIO_Init+0x340>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d013      	beq.n	80091ea <HAL_GPIO_Init+0x226>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a50      	ldr	r2, [pc, #320]	; (8009308 <HAL_GPIO_Init+0x344>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00d      	beq.n	80091e6 <HAL_GPIO_Init+0x222>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a4f      	ldr	r2, [pc, #316]	; (800930c <HAL_GPIO_Init+0x348>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d007      	beq.n	80091e2 <HAL_GPIO_Init+0x21e>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a4e      	ldr	r2, [pc, #312]	; (8009310 <HAL_GPIO_Init+0x34c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d101      	bne.n	80091de <HAL_GPIO_Init+0x21a>
 80091da:	2309      	movs	r3, #9
 80091dc:	e012      	b.n	8009204 <HAL_GPIO_Init+0x240>
 80091de:	230a      	movs	r3, #10
 80091e0:	e010      	b.n	8009204 <HAL_GPIO_Init+0x240>
 80091e2:	2308      	movs	r3, #8
 80091e4:	e00e      	b.n	8009204 <HAL_GPIO_Init+0x240>
 80091e6:	2307      	movs	r3, #7
 80091e8:	e00c      	b.n	8009204 <HAL_GPIO_Init+0x240>
 80091ea:	2306      	movs	r3, #6
 80091ec:	e00a      	b.n	8009204 <HAL_GPIO_Init+0x240>
 80091ee:	2305      	movs	r3, #5
 80091f0:	e008      	b.n	8009204 <HAL_GPIO_Init+0x240>
 80091f2:	2304      	movs	r3, #4
 80091f4:	e006      	b.n	8009204 <HAL_GPIO_Init+0x240>
 80091f6:	2303      	movs	r3, #3
 80091f8:	e004      	b.n	8009204 <HAL_GPIO_Init+0x240>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e002      	b.n	8009204 <HAL_GPIO_Init+0x240>
 80091fe:	2301      	movs	r3, #1
 8009200:	e000      	b.n	8009204 <HAL_GPIO_Init+0x240>
 8009202:	2300      	movs	r3, #0
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	f002 0203 	and.w	r2, r2, #3
 800920a:	0092      	lsls	r2, r2, #2
 800920c:	4093      	lsls	r3, r2
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	4313      	orrs	r3, r2
 8009212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009214:	4934      	ldr	r1, [pc, #208]	; (80092e8 <HAL_GPIO_Init+0x324>)
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	089b      	lsrs	r3, r3, #2
 800921a:	3302      	adds	r3, #2
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009222:	4b3c      	ldr	r3, [pc, #240]	; (8009314 <HAL_GPIO_Init+0x350>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	43db      	mvns	r3, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4013      	ands	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	4313      	orrs	r3, r2
 8009244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009246:	4a33      	ldr	r2, [pc, #204]	; (8009314 <HAL_GPIO_Init+0x350>)
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800924c:	4b31      	ldr	r3, [pc, #196]	; (8009314 <HAL_GPIO_Init+0x350>)
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	43db      	mvns	r3, r3
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	4013      	ands	r3, r2
 800925a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009270:	4a28      	ldr	r2, [pc, #160]	; (8009314 <HAL_GPIO_Init+0x350>)
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009276:	4b27      	ldr	r3, [pc, #156]	; (8009314 <HAL_GPIO_Init+0x350>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	43db      	mvns	r3, r3
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	4013      	ands	r3, r2
 8009284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	4313      	orrs	r3, r2
 8009298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800929a:	4a1e      	ldr	r2, [pc, #120]	; (8009314 <HAL_GPIO_Init+0x350>)
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80092a0:	4b1c      	ldr	r3, [pc, #112]	; (8009314 <HAL_GPIO_Init+0x350>)
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	43db      	mvns	r3, r3
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	4013      	ands	r3, r2
 80092ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80092c4:	4a13      	ldr	r2, [pc, #76]	; (8009314 <HAL_GPIO_Init+0x350>)
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	3301      	adds	r3, #1
 80092ce:	61fb      	str	r3, [r7, #28]
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	2b0f      	cmp	r3, #15
 80092d4:	f67f ae86 	bls.w	8008fe4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80092d8:	bf00      	nop
 80092da:	3724      	adds	r7, #36	; 0x24
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	40023800 	.word	0x40023800
 80092e8:	40013800 	.word	0x40013800
 80092ec:	40020000 	.word	0x40020000
 80092f0:	40020400 	.word	0x40020400
 80092f4:	40020800 	.word	0x40020800
 80092f8:	40020c00 	.word	0x40020c00
 80092fc:	40021000 	.word	0x40021000
 8009300:	40021400 	.word	0x40021400
 8009304:	40021800 	.word	0x40021800
 8009308:	40021c00 	.word	0x40021c00
 800930c:	40022000 	.word	0x40022000
 8009310:	40022400 	.word	0x40022400
 8009314:	40013c00 	.word	0x40013c00

08009318 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009322:	2300      	movs	r3, #0
 8009324:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800932a:	2300      	movs	r3, #0
 800932c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800932e:	2300      	movs	r3, #0
 8009330:	617b      	str	r3, [r7, #20]
 8009332:	e0d9      	b.n	80094e8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009334:	2201      	movs	r2, #1
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	fa02 f303 	lsl.w	r3, r2, r3
 800933c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	4013      	ands	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	429a      	cmp	r2, r3
 800934c:	f040 80c9 	bne.w	80094e2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009350:	4a6a      	ldr	r2, [pc, #424]	; (80094fc <HAL_GPIO_DeInit+0x1e4>)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	089b      	lsrs	r3, r3, #2
 8009356:	3302      	adds	r3, #2
 8009358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800935c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f003 0303 	and.w	r3, r3, #3
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	220f      	movs	r2, #15
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	4013      	ands	r3, r2
 8009370:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a62      	ldr	r2, [pc, #392]	; (8009500 <HAL_GPIO_DeInit+0x1e8>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d037      	beq.n	80093ea <HAL_GPIO_DeInit+0xd2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a61      	ldr	r2, [pc, #388]	; (8009504 <HAL_GPIO_DeInit+0x1ec>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d031      	beq.n	80093e6 <HAL_GPIO_DeInit+0xce>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a60      	ldr	r2, [pc, #384]	; (8009508 <HAL_GPIO_DeInit+0x1f0>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d02b      	beq.n	80093e2 <HAL_GPIO_DeInit+0xca>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a5f      	ldr	r2, [pc, #380]	; (800950c <HAL_GPIO_DeInit+0x1f4>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d025      	beq.n	80093de <HAL_GPIO_DeInit+0xc6>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a5e      	ldr	r2, [pc, #376]	; (8009510 <HAL_GPIO_DeInit+0x1f8>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d01f      	beq.n	80093da <HAL_GPIO_DeInit+0xc2>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a5d      	ldr	r2, [pc, #372]	; (8009514 <HAL_GPIO_DeInit+0x1fc>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d019      	beq.n	80093d6 <HAL_GPIO_DeInit+0xbe>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a5c      	ldr	r2, [pc, #368]	; (8009518 <HAL_GPIO_DeInit+0x200>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d013      	beq.n	80093d2 <HAL_GPIO_DeInit+0xba>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a5b      	ldr	r2, [pc, #364]	; (800951c <HAL_GPIO_DeInit+0x204>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00d      	beq.n	80093ce <HAL_GPIO_DeInit+0xb6>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a5a      	ldr	r2, [pc, #360]	; (8009520 <HAL_GPIO_DeInit+0x208>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d007      	beq.n	80093ca <HAL_GPIO_DeInit+0xb2>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a59      	ldr	r2, [pc, #356]	; (8009524 <HAL_GPIO_DeInit+0x20c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d101      	bne.n	80093c6 <HAL_GPIO_DeInit+0xae>
 80093c2:	2309      	movs	r3, #9
 80093c4:	e012      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093c6:	230a      	movs	r3, #10
 80093c8:	e010      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093ca:	2308      	movs	r3, #8
 80093cc:	e00e      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093ce:	2307      	movs	r3, #7
 80093d0:	e00c      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093d2:	2306      	movs	r3, #6
 80093d4:	e00a      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093d6:	2305      	movs	r3, #5
 80093d8:	e008      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093da:	2304      	movs	r3, #4
 80093dc:	e006      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093de:	2303      	movs	r3, #3
 80093e0:	e004      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093e2:	2302      	movs	r3, #2
 80093e4:	e002      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <HAL_GPIO_DeInit+0xd4>
 80093ea:	2300      	movs	r3, #0
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	f002 0203 	and.w	r2, r2, #3
 80093f2:	0092      	lsls	r2, r2, #2
 80093f4:	4093      	lsls	r3, r2
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d132      	bne.n	8009462 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80093fc:	4b4a      	ldr	r3, [pc, #296]	; (8009528 <HAL_GPIO_DeInit+0x210>)
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	43db      	mvns	r3, r3
 8009404:	4948      	ldr	r1, [pc, #288]	; (8009528 <HAL_GPIO_DeInit+0x210>)
 8009406:	4013      	ands	r3, r2
 8009408:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800940a:	4b47      	ldr	r3, [pc, #284]	; (8009528 <HAL_GPIO_DeInit+0x210>)
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	43db      	mvns	r3, r3
 8009412:	4945      	ldr	r1, [pc, #276]	; (8009528 <HAL_GPIO_DeInit+0x210>)
 8009414:	4013      	ands	r3, r2
 8009416:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009418:	4b43      	ldr	r3, [pc, #268]	; (8009528 <HAL_GPIO_DeInit+0x210>)
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	43db      	mvns	r3, r3
 8009420:	4941      	ldr	r1, [pc, #260]	; (8009528 <HAL_GPIO_DeInit+0x210>)
 8009422:	4013      	ands	r3, r2
 8009424:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009426:	4b40      	ldr	r3, [pc, #256]	; (8009528 <HAL_GPIO_DeInit+0x210>)
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	43db      	mvns	r3, r3
 800942e:	493e      	ldr	r1, [pc, #248]	; (8009528 <HAL_GPIO_DeInit+0x210>)
 8009430:	4013      	ands	r3, r2
 8009432:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	220f      	movs	r2, #15
 800943e:	fa02 f303 	lsl.w	r3, r2, r3
 8009442:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009444:	4a2d      	ldr	r2, [pc, #180]	; (80094fc <HAL_GPIO_DeInit+0x1e4>)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	089b      	lsrs	r3, r3, #2
 800944a:	3302      	adds	r3, #2
 800944c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	43da      	mvns	r2, r3
 8009454:	4829      	ldr	r0, [pc, #164]	; (80094fc <HAL_GPIO_DeInit+0x1e4>)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	089b      	lsrs	r3, r3, #2
 800945a:	400a      	ands	r2, r1
 800945c:	3302      	adds	r3, #2
 800945e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	2103      	movs	r1, #3
 800946c:	fa01 f303 	lsl.w	r3, r1, r3
 8009470:	43db      	mvns	r3, r3
 8009472:	401a      	ands	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	08da      	lsrs	r2, r3, #3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3208      	adds	r2, #8
 8009480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	220f      	movs	r2, #15
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	43db      	mvns	r3, r3
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	08d2      	lsrs	r2, r2, #3
 8009498:	4019      	ands	r1, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	3208      	adds	r2, #8
 800949e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68da      	ldr	r2, [r3, #12]
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	2103      	movs	r1, #3
 80094ac:	fa01 f303 	lsl.w	r3, r1, r3
 80094b0:	43db      	mvns	r3, r3
 80094b2:	401a      	ands	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	2101      	movs	r1, #1
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	fa01 f303 	lsl.w	r3, r1, r3
 80094c4:	43db      	mvns	r3, r3
 80094c6:	401a      	ands	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	2103      	movs	r1, #3
 80094d6:	fa01 f303 	lsl.w	r3, r1, r3
 80094da:	43db      	mvns	r3, r3
 80094dc:	401a      	ands	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	3301      	adds	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2b0f      	cmp	r3, #15
 80094ec:	f67f af22 	bls.w	8009334 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80094f0:	bf00      	nop
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	40013800 	.word	0x40013800
 8009500:	40020000 	.word	0x40020000
 8009504:	40020400 	.word	0x40020400
 8009508:	40020800 	.word	0x40020800
 800950c:	40020c00 	.word	0x40020c00
 8009510:	40021000 	.word	0x40021000
 8009514:	40021400 	.word	0x40021400
 8009518:	40021800 	.word	0x40021800
 800951c:	40021c00 	.word	0x40021c00
 8009520:	40022000 	.word	0x40022000
 8009524:	40022400 	.word	0x40022400
 8009528:	40013c00 	.word	0x40013c00

0800952c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	807b      	strh	r3, [r7, #2]
 8009538:	4613      	mov	r3, r2
 800953a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800953c:	787b      	ldrb	r3, [r7, #1]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009542:	887a      	ldrh	r2, [r7, #2]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009548:	e003      	b.n	8009552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800954a:	887b      	ldrh	r3, [r7, #2]
 800954c:	041a      	lsls	r2, r3, #16
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	619a      	str	r2, [r3, #24]
}
 8009552:	bf00      	nop
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
	...

08009560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800956a:	4b08      	ldr	r3, [pc, #32]	; (800958c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800956c:	695a      	ldr	r2, [r3, #20]
 800956e:	88fb      	ldrh	r3, [r7, #6]
 8009570:	4013      	ands	r3, r2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d006      	beq.n	8009584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009576:	4a05      	ldr	r2, [pc, #20]	; (800958c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800957c:	88fb      	ldrh	r3, [r7, #6]
 800957e:	4618      	mov	r0, r3
 8009580:	f7f7 ff3e 	bl	8001400 <HAL_GPIO_EXTI_Callback>
  }
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	40013c00 	.word	0x40013c00

08009590 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009592:	b08f      	sub	sp, #60	; 0x3c
 8009594:	af0a      	add	r7, sp, #40	; 0x28
 8009596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e054      	b.n	800964c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f00d fe0d 	bl	80171dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2203      	movs	r2, #3
 80095c6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d102      	bne.n	80095dc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f007 f866 	bl	80106b2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	687e      	ldr	r6, [r7, #4]
 80095ee:	466d      	mov	r5, sp
 80095f0:	f106 0410 	add.w	r4, r6, #16
 80095f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009600:	e885 0003 	stmia.w	r5, {r0, r1}
 8009604:	1d33      	adds	r3, r6, #4
 8009606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009608:	6838      	ldr	r0, [r7, #0]
 800960a:	f006 ffe9 	bl	80105e0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2101      	movs	r1, #1
 8009614:	4618      	mov	r0, r3
 8009616:	f007 f85d 	bl	80106d4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	687e      	ldr	r6, [r7, #4]
 8009622:	466d      	mov	r5, sp
 8009624:	f106 0410 	add.w	r4, r6, #16
 8009628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800962a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800962c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800962e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009630:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009634:	e885 0003 	stmia.w	r5, {r0, r1}
 8009638:	1d33      	adds	r3, r6, #4
 800963a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800963c:	6838      	ldr	r0, [r7, #0]
 800963e:	f007 f96f 	bl	8010920 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009654 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8009654:	b590      	push	{r4, r7, lr}
 8009656:	b089      	sub	sp, #36	; 0x24
 8009658:	af04      	add	r7, sp, #16
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	4608      	mov	r0, r1
 800965e:	4611      	mov	r1, r2
 8009660:	461a      	mov	r2, r3
 8009662:	4603      	mov	r3, r0
 8009664:	70fb      	strb	r3, [r7, #3]
 8009666:	460b      	mov	r3, r1
 8009668:	70bb      	strb	r3, [r7, #2]
 800966a:	4613      	mov	r3, r2
 800966c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009674:	2b01      	cmp	r3, #1
 8009676:	d101      	bne.n	800967c <HAL_HCD_HC_Init+0x28>
 8009678:	2302      	movs	r3, #2
 800967a:	e07f      	b.n	800977c <HAL_HCD_HC_Init+0x128>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8009684:	78fa      	ldrb	r2, [r7, #3]
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	4613      	mov	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	440b      	add	r3, r1
 8009692:	333d      	adds	r3, #61	; 0x3d
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009698:	78fa      	ldrb	r2, [r7, #3]
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	4613      	mov	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	440b      	add	r3, r1
 80096a6:	3338      	adds	r3, #56	; 0x38
 80096a8:	787a      	ldrb	r2, [r7, #1]
 80096aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	440b      	add	r3, r1
 80096ba:	3340      	adds	r3, #64	; 0x40
 80096bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80096be:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80096c0:	78fa      	ldrb	r2, [r7, #3]
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	440b      	add	r3, r1
 80096ce:	3339      	adds	r3, #57	; 0x39
 80096d0:	78fa      	ldrb	r2, [r7, #3]
 80096d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80096d4:	78fa      	ldrb	r2, [r7, #3]
 80096d6:	6879      	ldr	r1, [r7, #4]
 80096d8:	4613      	mov	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	440b      	add	r3, r1
 80096e2:	333f      	adds	r3, #63	; 0x3f
 80096e4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80096e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80096ea:	78fa      	ldrb	r2, [r7, #3]
 80096ec:	78bb      	ldrb	r3, [r7, #2]
 80096ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f2:	b2d8      	uxtb	r0, r3
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	440b      	add	r3, r1
 8009700:	333a      	adds	r3, #58	; 0x3a
 8009702:	4602      	mov	r2, r0
 8009704:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009706:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800970a:	2b00      	cmp	r3, #0
 800970c:	da0a      	bge.n	8009724 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800970e:	78fa      	ldrb	r2, [r7, #3]
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	4613      	mov	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	440b      	add	r3, r1
 800971c:	333b      	adds	r3, #59	; 0x3b
 800971e:	2201      	movs	r2, #1
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	e009      	b.n	8009738 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	440b      	add	r3, r1
 8009732:	333b      	adds	r3, #59	; 0x3b
 8009734:	2200      	movs	r2, #0
 8009736:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009738:	78fa      	ldrb	r2, [r7, #3]
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	440b      	add	r3, r1
 8009746:	333c      	adds	r3, #60	; 0x3c
 8009748:	f897 2020 	ldrb.w	r2, [r7, #32]
 800974c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	787c      	ldrb	r4, [r7, #1]
 8009754:	78ba      	ldrb	r2, [r7, #2]
 8009756:	78f9      	ldrb	r1, [r7, #3]
 8009758:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800975a:	9302      	str	r3, [sp, #8]
 800975c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	4623      	mov	r3, r4
 800976a:	f007 fa4f 	bl	8010c0c <USB_HC_Init>
 800976e:	4603      	mov	r3, r0
 8009770:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800977a:	7bfb      	ldrb	r3, [r7, #15]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	bd90      	pop	{r4, r7, pc}

08009784 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800979a:	2b01      	cmp	r3, #1
 800979c:	d101      	bne.n	80097a2 <HAL_HCD_HC_Halt+0x1e>
 800979e:	2302      	movs	r3, #2
 80097a0:	e00f      	b.n	80097c2 <HAL_HCD_HC_Halt+0x3e>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	4611      	mov	r1, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f007 fc89 	bl	80110ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	4608      	mov	r0, r1
 80097d6:	4611      	mov	r1, r2
 80097d8:	461a      	mov	r2, r3
 80097da:	4603      	mov	r3, r0
 80097dc:	70fb      	strb	r3, [r7, #3]
 80097de:	460b      	mov	r3, r1
 80097e0:	70bb      	strb	r3, [r7, #2]
 80097e2:	4613      	mov	r3, r2
 80097e4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80097e6:	78fa      	ldrb	r2, [r7, #3]
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	440b      	add	r3, r1
 80097f4:	333b      	adds	r3, #59	; 0x3b
 80097f6:	78ba      	ldrb	r2, [r7, #2]
 80097f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	440b      	add	r3, r1
 8009808:	333f      	adds	r3, #63	; 0x3f
 800980a:	787a      	ldrb	r2, [r7, #1]
 800980c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800980e:	7c3b      	ldrb	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d114      	bne.n	800983e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	440b      	add	r3, r1
 8009822:	3342      	adds	r3, #66	; 0x42
 8009824:	2203      	movs	r2, #3
 8009826:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009828:	78fa      	ldrb	r2, [r7, #3]
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	440b      	add	r3, r1
 8009836:	333d      	adds	r3, #61	; 0x3d
 8009838:	7f3a      	ldrb	r2, [r7, #28]
 800983a:	701a      	strb	r2, [r3, #0]
 800983c:	e009      	b.n	8009852 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800983e:	78fa      	ldrb	r2, [r7, #3]
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	440b      	add	r3, r1
 800984c:	3342      	adds	r3, #66	; 0x42
 800984e:	2202      	movs	r2, #2
 8009850:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009852:	787b      	ldrb	r3, [r7, #1]
 8009854:	2b03      	cmp	r3, #3
 8009856:	f200 80d6 	bhi.w	8009a06 <HAL_HCD_HC_SubmitRequest+0x23a>
 800985a:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <HAL_HCD_HC_SubmitRequest+0x94>)
 800985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009860:	08009871 	.word	0x08009871
 8009864:	080099f1 	.word	0x080099f1
 8009868:	080098dd 	.word	0x080098dd
 800986c:	08009967 	.word	0x08009967
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009870:	7c3b      	ldrb	r3, [r7, #16]
 8009872:	2b01      	cmp	r3, #1
 8009874:	f040 80c9 	bne.w	8009a0a <HAL_HCD_HC_SubmitRequest+0x23e>
 8009878:	78bb      	ldrb	r3, [r7, #2]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f040 80c5 	bne.w	8009a0a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8009880:	8b3b      	ldrh	r3, [r7, #24]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d109      	bne.n	800989a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	4613      	mov	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	440b      	add	r3, r1
 8009894:	3351      	adds	r3, #81	; 0x51
 8009896:	2201      	movs	r2, #1
 8009898:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	440b      	add	r3, r1
 80098a8:	3351      	adds	r3, #81	; 0x51
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10a      	bne.n	80098c6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80098b0:	78fa      	ldrb	r2, [r7, #3]
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	4613      	mov	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	440b      	add	r3, r1
 80098be:	3342      	adds	r3, #66	; 0x42
 80098c0:	2200      	movs	r2, #0
 80098c2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80098c4:	e0a1      	b.n	8009a0a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80098c6:	78fa      	ldrb	r2, [r7, #3]
 80098c8:	6879      	ldr	r1, [r7, #4]
 80098ca:	4613      	mov	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	440b      	add	r3, r1
 80098d4:	3342      	adds	r3, #66	; 0x42
 80098d6:	2202      	movs	r2, #2
 80098d8:	701a      	strb	r2, [r3, #0]
      break;
 80098da:	e096      	b.n	8009a0a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80098dc:	78bb      	ldrb	r3, [r7, #2]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d120      	bne.n	8009924 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80098e2:	78fa      	ldrb	r2, [r7, #3]
 80098e4:	6879      	ldr	r1, [r7, #4]
 80098e6:	4613      	mov	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	440b      	add	r3, r1
 80098f0:	3351      	adds	r3, #81	; 0x51
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80098f8:	78fa      	ldrb	r2, [r7, #3]
 80098fa:	6879      	ldr	r1, [r7, #4]
 80098fc:	4613      	mov	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	440b      	add	r3, r1
 8009906:	3342      	adds	r3, #66	; 0x42
 8009908:	2200      	movs	r2, #0
 800990a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800990c:	e07e      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800990e:	78fa      	ldrb	r2, [r7, #3]
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	00db      	lsls	r3, r3, #3
 800991a:	440b      	add	r3, r1
 800991c:	3342      	adds	r3, #66	; 0x42
 800991e:	2202      	movs	r2, #2
 8009920:	701a      	strb	r2, [r3, #0]
      break;
 8009922:	e073      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009924:	78fa      	ldrb	r2, [r7, #3]
 8009926:	6879      	ldr	r1, [r7, #4]
 8009928:	4613      	mov	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	00db      	lsls	r3, r3, #3
 8009930:	440b      	add	r3, r1
 8009932:	3350      	adds	r3, #80	; 0x50
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	440b      	add	r3, r1
 8009948:	3342      	adds	r3, #66	; 0x42
 800994a:	2200      	movs	r2, #0
 800994c:	701a      	strb	r2, [r3, #0]
      break;
 800994e:	e05d      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009950:	78fa      	ldrb	r2, [r7, #3]
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	4613      	mov	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	440b      	add	r3, r1
 800995e:	3342      	adds	r3, #66	; 0x42
 8009960:	2202      	movs	r2, #2
 8009962:	701a      	strb	r2, [r3, #0]
      break;
 8009964:	e052      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009966:	78bb      	ldrb	r3, [r7, #2]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d120      	bne.n	80099ae <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800996c:	78fa      	ldrb	r2, [r7, #3]
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	440b      	add	r3, r1
 800997a:	3351      	adds	r3, #81	; 0x51
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10a      	bne.n	8009998 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009982:	78fa      	ldrb	r2, [r7, #3]
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	00db      	lsls	r3, r3, #3
 800998e:	440b      	add	r3, r1
 8009990:	3342      	adds	r3, #66	; 0x42
 8009992:	2200      	movs	r2, #0
 8009994:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009996:	e039      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009998:	78fa      	ldrb	r2, [r7, #3]
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	4613      	mov	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	440b      	add	r3, r1
 80099a6:	3342      	adds	r3, #66	; 0x42
 80099a8:	2202      	movs	r2, #2
 80099aa:	701a      	strb	r2, [r3, #0]
      break;
 80099ac:	e02e      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80099ae:	78fa      	ldrb	r2, [r7, #3]
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	4613      	mov	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	440b      	add	r3, r1
 80099bc:	3350      	adds	r3, #80	; 0x50
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099c4:	78fa      	ldrb	r2, [r7, #3]
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	4613      	mov	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	440b      	add	r3, r1
 80099d2:	3342      	adds	r3, #66	; 0x42
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
      break;
 80099d8:	e018      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099da:	78fa      	ldrb	r2, [r7, #3]
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	00db      	lsls	r3, r3, #3
 80099e6:	440b      	add	r3, r1
 80099e8:	3342      	adds	r3, #66	; 0x42
 80099ea:	2202      	movs	r2, #2
 80099ec:	701a      	strb	r2, [r3, #0]
      break;
 80099ee:	e00d      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099f0:	78fa      	ldrb	r2, [r7, #3]
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	4613      	mov	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	00db      	lsls	r3, r3, #3
 80099fc:	440b      	add	r3, r1
 80099fe:	3342      	adds	r3, #66	; 0x42
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]
      break;
 8009a04:	e002      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8009a06:	bf00      	nop
 8009a08:	e000      	b.n	8009a0c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8009a0a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	4613      	mov	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	440b      	add	r3, r1
 8009a1a:	3344      	adds	r3, #68	; 0x44
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009a20:	78fa      	ldrb	r2, [r7, #3]
 8009a22:	8b39      	ldrh	r1, [r7, #24]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	4613      	mov	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	4403      	add	r3, r0
 8009a30:	3348      	adds	r3, #72	; 0x48
 8009a32:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	440b      	add	r3, r1
 8009a42:	335c      	adds	r3, #92	; 0x5c
 8009a44:	2200      	movs	r2, #0
 8009a46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009a48:	78fa      	ldrb	r2, [r7, #3]
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	440b      	add	r3, r1
 8009a56:	334c      	adds	r3, #76	; 0x4c
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009a5c:	78fa      	ldrb	r2, [r7, #3]
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	440b      	add	r3, r1
 8009a6a:	3339      	adds	r3, #57	; 0x39
 8009a6c:	78fa      	ldrb	r2, [r7, #3]
 8009a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	440b      	add	r3, r1
 8009a7e:	335d      	adds	r3, #93	; 0x5d
 8009a80:	2200      	movs	r2, #0
 8009a82:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6818      	ldr	r0, [r3, #0]
 8009a88:	78fa      	ldrb	r2, [r7, #3]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	3338      	adds	r3, #56	; 0x38
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	18d1      	adds	r1, r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f007 f9be 	bl	8010e20 <USB_HC_StartXfer>
 8009aa4:	4603      	mov	r3, r0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop

08009ab0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f006 fee7 	bl	801089a <USB_GetMode>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	f040 80ef 	bne.w	8009cb2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f006 fecb 	bl	8010874 <USB_ReadInterrupts>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 80e5 	beq.w	8009cb0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f006 fec2 	bl	8010874 <USB_ReadInterrupts>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009afa:	d104      	bne.n	8009b06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009b04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f006 feb2 	bl	8010874 <USB_ReadInterrupts>
 8009b10:	4603      	mov	r3, r0
 8009b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b1a:	d104      	bne.n	8009b26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f006 fea2 	bl	8010874 <USB_ReadInterrupts>
 8009b30:	4603      	mov	r3, r0
 8009b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b3a:	d104      	bne.n	8009b46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f006 fe92 	bl	8010874 <USB_ReadInterrupts>
 8009b50:	4603      	mov	r3, r0
 8009b52:	f003 0302 	and.w	r3, r3, #2
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d103      	bne.n	8009b62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f006 fe84 	bl	8010874 <USB_ReadInterrupts>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b76:	d115      	bne.n	8009ba4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009b80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d108      	bne.n	8009ba4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f00d fb94 	bl	80172c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f006 ff6e 	bl	8010a80 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f006 fe63 	bl	8010874 <USB_ReadInterrupts>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bb8:	d102      	bne.n	8009bc0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 f966 	bl	800ae8c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f006 fe55 	bl	8010874 <USB_ReadInterrupts>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f003 0308 	and.w	r3, r3, #8
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d106      	bne.n	8009be2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f00d fb57 	bl	8017288 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2208      	movs	r2, #8
 8009be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f006 fe44 	bl	8010874 <USB_ReadInterrupts>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bf6:	d138      	bne.n	8009c6a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f007 fa53 	bl	80110a8 <USB_HC_ReadInterrupt>
 8009c02:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009c04:	2300      	movs	r3, #0
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	e025      	b.n	8009c56 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	fa22 f303 	lsr.w	r3, r2, r3
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d018      	beq.n	8009c50 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c34:	d106      	bne.n	8009c44 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f8cf 	bl	8009de0 <HCD_HC_IN_IRQHandler>
 8009c42:	e005      	b.n	8009c50 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fcfd 	bl	800a64a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	3301      	adds	r3, #1
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d3d4      	bcc.n	8009c0a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f006 fe00 	bl	8010874 <USB_ReadInterrupts>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f003 0310 	and.w	r3, r3, #16
 8009c7a:	2b10      	cmp	r3, #16
 8009c7c:	d101      	bne.n	8009c82 <HAL_HCD_IRQHandler+0x1d2>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e000      	b.n	8009c84 <HAL_HCD_IRQHandler+0x1d4>
 8009c82:	2300      	movs	r3, #0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d014      	beq.n	8009cb2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0210 	bic.w	r2, r2, #16
 8009c96:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 f84b 	bl	800ad34 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	699a      	ldr	r2, [r3, #24]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f042 0210 	orr.w	r2, r2, #16
 8009cac:	619a      	str	r2, [r3, #24]
 8009cae:	e000      	b.n	8009cb2 <HAL_HCD_IRQHandler+0x202>
      return;
 8009cb0:	bf00      	nop
    }
  }
}
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <HAL_HCD_Start+0x16>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	e013      	b.n	8009cf6 <HAL_HCD_Start+0x3e>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f006 fcd8 	bl	8010690 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f006 ff2e 	bl	8010b48 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d101      	bne.n	8009d14 <HAL_HCD_Stop+0x16>
 8009d10:	2302      	movs	r3, #2
 8009d12:	e00d      	b.n	8009d30 <HAL_HCD_Stop+0x32>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f007 fb0d 	bl	8011340 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f006 fed5 	bl	8010af4 <USB_ResetPort>
 8009d4a:	4603      	mov	r3, r0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009d60:	78fa      	ldrb	r2, [r7, #3]
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	440b      	add	r3, r1
 8009d6e:	335c      	adds	r3, #92	; 0x5c
 8009d70:	781b      	ldrb	r3, [r3, #0]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b083      	sub	sp, #12
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	460b      	mov	r3, r1
 8009d88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009d8a:	78fa      	ldrb	r2, [r7, #3]
 8009d8c:	6879      	ldr	r1, [r7, #4]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	00db      	lsls	r3, r3, #3
 8009d96:	440b      	add	r3, r1
 8009d98:	334c      	adds	r3, #76	; 0x4c
 8009d9a:	681b      	ldr	r3, [r3, #0]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f006 ff17 	bl	8010be8 <USB_GetCurrentFrame>
 8009dba:	4603      	mov	r3, r0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f006 fef2 	bl	8010bba <USB_GetHostSpeed>
 8009dd6:	4603      	mov	r3, r0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f003 0304 	and.w	r3, r3, #4
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	d119      	bne.n	8009e44 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	2304      	movs	r3, #4
 8009e20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	0151      	lsls	r1, r2, #5
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	440a      	add	r2, r1
 8009e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e3c:	f043 0302 	orr.w	r3, r3, #2
 8009e40:	60d3      	str	r3, [r2, #12]
 8009e42:	e0ce      	b.n	8009fe2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5a:	d12c      	bne.n	8009eb6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009e70:	6879      	ldr	r1, [r7, #4]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	4613      	mov	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	440b      	add	r3, r1
 8009e7e:	335d      	adds	r3, #93	; 0x5d
 8009e80:	2207      	movs	r2, #7
 8009e82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	0151      	lsls	r1, r2, #5
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	440a      	add	r2, r1
 8009e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e9e:	f043 0302 	orr.w	r3, r3, #2
 8009ea2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	b2d2      	uxtb	r2, r2
 8009eac:	4611      	mov	r1, r2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f007 f90b 	bl	80110ca <USB_HC_Halt>
 8009eb4:	e095      	b.n	8009fe2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f003 0320 	and.w	r3, r3, #32
 8009ec8:	2b20      	cmp	r3, #32
 8009eca:	d109      	bne.n	8009ee0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ed8:	461a      	mov	r2, r3
 8009eda:	2320      	movs	r3, #32
 8009edc:	6093      	str	r3, [r2, #8]
 8009ede:	e080      	b.n	8009fe2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f003 0308 	and.w	r3, r3, #8
 8009ef2:	2b08      	cmp	r3, #8
 8009ef4:	d134      	bne.n	8009f60 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f10:	f043 0302 	orr.w	r3, r3, #2
 8009f14:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	440b      	add	r3, r1
 8009f24:	335d      	adds	r3, #93	; 0x5d
 8009f26:	2205      	movs	r2, #5
 8009f28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f36:	461a      	mov	r2, r3
 8009f38:	2310      	movs	r3, #16
 8009f3a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2308      	movs	r3, #8
 8009f4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	b2d2      	uxtb	r2, r2
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f007 f8b6 	bl	80110ca <USB_HC_Halt>
 8009f5e:	e040      	b.n	8009fe2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	015a      	lsls	r2, r3, #5
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	4413      	add	r3, r2
 8009f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f76:	d134      	bne.n	8009fe2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	0151      	lsls	r1, r2, #5
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	440a      	add	r2, r1
 8009f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f92:	f043 0302 	orr.w	r3, r3, #2
 8009f96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f007 f891 	bl	80110ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	2310      	movs	r3, #16
 8009fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	00db      	lsls	r3, r3, #3
 8009fc6:	440b      	add	r3, r1
 8009fc8:	335d      	adds	r3, #93	; 0x5d
 8009fca:	2208      	movs	r2, #8
 8009fcc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fe0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff8:	d122      	bne.n	800a040 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	4413      	add	r3, r2
 800a002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a014:	f043 0302 	orr.w	r3, r3, #2
 800a018:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	b2d2      	uxtb	r2, r2
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f007 f850 	bl	80110ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	4413      	add	r3, r2
 800a032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a036:	461a      	mov	r2, r3
 800a038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a03c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800a03e:	e300      	b.n	800a642 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	4413      	add	r3, r2
 800a048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b01      	cmp	r3, #1
 800a054:	f040 80fd 	bne.w	800a252 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d01b      	beq.n	800a098 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	4613      	mov	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	00db      	lsls	r3, r3, #3
 800a06c:	440b      	add	r3, r1
 800a06e:	3348      	adds	r3, #72	; 0x48
 800a070:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	0159      	lsls	r1, r3, #5
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	440b      	add	r3, r1
 800a07a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a084:	1ad1      	subs	r1, r2, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	00db      	lsls	r3, r3, #3
 800a092:	4403      	add	r3, r0
 800a094:	334c      	adds	r3, #76	; 0x4c
 800a096:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	4613      	mov	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	440b      	add	r3, r1
 800a0a6:	335d      	adds	r3, #93	; 0x5d
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	440b      	add	r3, r1
 800a0ba:	3358      	adds	r3, #88	; 0x58
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a0d2:	6879      	ldr	r1, [r7, #4]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	440b      	add	r3, r1
 800a0e0:	333f      	adds	r3, #63	; 0x3f
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00a      	beq.n	800a0fe <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	440b      	add	r3, r1
 800a0f6:	333f      	adds	r3, #63	; 0x3f
 800a0f8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d121      	bne.n	800a142 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	4413      	add	r3, r2
 800a106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	0151      	lsls	r1, r2, #5
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	440a      	add	r2, r1
 800a114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a118:	f043 0302 	orr.w	r3, r3, #2
 800a11c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	b2d2      	uxtb	r2, r2
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f006 ffce 	bl	80110ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	4413      	add	r3, r2
 800a136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a13a:	461a      	mov	r2, r3
 800a13c:	2310      	movs	r3, #16
 800a13e:	6093      	str	r3, [r2, #8]
 800a140:	e070      	b.n	800a224 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a142:	6879      	ldr	r1, [r7, #4]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	4613      	mov	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	00db      	lsls	r3, r3, #3
 800a14e:	440b      	add	r3, r1
 800a150:	333f      	adds	r3, #63	; 0x3f
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b03      	cmp	r3, #3
 800a156:	d12a      	bne.n	800a1ae <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	0151      	lsls	r1, r2, #5
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	440a      	add	r2, r1
 800a16e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a176:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4613      	mov	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	440b      	add	r3, r1
 800a186:	335c      	adds	r3, #92	; 0x5c
 800a188:	2201      	movs	r2, #1
 800a18a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	b2d8      	uxtb	r0, r3
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	440b      	add	r3, r1
 800a19e:	335c      	adds	r3, #92	; 0x5c
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f00d f898 	bl	80172dc <HAL_HCD_HC_NotifyURBChange_Callback>
 800a1ac:	e03a      	b.n	800a224 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	440b      	add	r3, r1
 800a1bc:	333f      	adds	r3, #63	; 0x3f
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d12f      	bne.n	800a224 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a1c4:	6879      	ldr	r1, [r7, #4]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	440b      	add	r3, r1
 800a1d2:	335c      	adds	r3, #92	; 0x5c
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	440b      	add	r3, r1
 800a1e6:	3350      	adds	r3, #80	; 0x50
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	f083 0301 	eor.w	r3, r3, #1
 800a1ee:	b2d8      	uxtb	r0, r3
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	440b      	add	r3, r1
 800a1fe:	3350      	adds	r3, #80	; 0x50
 800a200:	4602      	mov	r2, r0
 800a202:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	b2d8      	uxtb	r0, r3
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4613      	mov	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	440b      	add	r3, r1
 800a216:	335c      	adds	r3, #92	; 0x5c
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	4601      	mov	r1, r0
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f00d f85c 	bl	80172dc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	440b      	add	r3, r1
 800a232:	3350      	adds	r3, #80	; 0x50
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	f083 0301 	eor.w	r3, r3, #1
 800a23a:	b2d8      	uxtb	r0, r3
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	440b      	add	r3, r1
 800a24a:	3350      	adds	r3, #80	; 0x50
 800a24c:	4602      	mov	r2, r0
 800a24e:	701a      	strb	r2, [r3, #0]
}
 800a250:	e1f7      	b.n	800a642 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b02      	cmp	r3, #2
 800a266:	f040 811a 	bne.w	800a49e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	4413      	add	r3, r2
 800a272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	0151      	lsls	r1, r2, #5
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	440a      	add	r2, r1
 800a280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a284:	f023 0302 	bic.w	r3, r3, #2
 800a288:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	440b      	add	r3, r1
 800a298:	335d      	adds	r3, #93	; 0x5d
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d10a      	bne.n	800a2b6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a2a0:	6879      	ldr	r1, [r7, #4]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	440b      	add	r3, r1
 800a2ae:	335c      	adds	r3, #92	; 0x5c
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	701a      	strb	r2, [r3, #0]
 800a2b4:	e0d9      	b.n	800a46a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	440b      	add	r3, r1
 800a2c4:	335d      	adds	r3, #93	; 0x5d
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b05      	cmp	r3, #5
 800a2ca:	d10a      	bne.n	800a2e2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	440b      	add	r3, r1
 800a2da:	335c      	adds	r3, #92	; 0x5c
 800a2dc:	2205      	movs	r2, #5
 800a2de:	701a      	strb	r2, [r3, #0]
 800a2e0:	e0c3      	b.n	800a46a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	00db      	lsls	r3, r3, #3
 800a2ee:	440b      	add	r3, r1
 800a2f0:	335d      	adds	r3, #93	; 0x5d
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	2b06      	cmp	r3, #6
 800a2f6:	d00a      	beq.n	800a30e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	00db      	lsls	r3, r3, #3
 800a304:	440b      	add	r3, r1
 800a306:	335d      	adds	r3, #93	; 0x5d
 800a308:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a30a:	2b08      	cmp	r3, #8
 800a30c:	d156      	bne.n	800a3bc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800a30e:	6879      	ldr	r1, [r7, #4]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	440b      	add	r3, r1
 800a31c:	3358      	adds	r3, #88	; 0x58
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	1c59      	adds	r1, r3, #1
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4613      	mov	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	00db      	lsls	r3, r3, #3
 800a32e:	4403      	add	r3, r0
 800a330:	3358      	adds	r3, #88	; 0x58
 800a332:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800a334:	6879      	ldr	r1, [r7, #4]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	4613      	mov	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	440b      	add	r3, r1
 800a342:	3358      	adds	r3, #88	; 0x58
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b03      	cmp	r3, #3
 800a348:	d914      	bls.n	800a374 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	00db      	lsls	r3, r3, #3
 800a356:	440b      	add	r3, r1
 800a358:	3358      	adds	r3, #88	; 0x58
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	440b      	add	r3, r1
 800a36c:	335c      	adds	r3, #92	; 0x5c
 800a36e:	2204      	movs	r2, #4
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	e009      	b.n	800a388 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a374:	6879      	ldr	r1, [r7, #4]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	440b      	add	r3, r1
 800a382:	335c      	adds	r3, #92	; 0x5c
 800a384:	2202      	movs	r2, #2
 800a386:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a39e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3a6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	6013      	str	r3, [r2, #0]
 800a3ba:	e056      	b.n	800a46a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	440b      	add	r3, r1
 800a3ca:	335d      	adds	r3, #93	; 0x5d
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	d123      	bne.n	800a41a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a3d2:	6879      	ldr	r1, [r7, #4]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	440b      	add	r3, r1
 800a3e0:	335c      	adds	r3, #92	; 0x5c
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3fc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a404:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a412:	461a      	mov	r2, r3
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	e027      	b.n	800a46a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	4613      	mov	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	00db      	lsls	r3, r3, #3
 800a426:	440b      	add	r3, r1
 800a428:	335d      	adds	r3, #93	; 0x5d
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b07      	cmp	r3, #7
 800a42e:	d11c      	bne.n	800a46a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800a430:	6879      	ldr	r1, [r7, #4]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	440b      	add	r3, r1
 800a43e:	3358      	adds	r3, #88	; 0x58
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	1c59      	adds	r1, r3, #1
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	4403      	add	r3, r0
 800a452:	3358      	adds	r3, #88	; 0x58
 800a454:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	4613      	mov	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	440b      	add	r3, r1
 800a464:	335c      	adds	r3, #92	; 0x5c
 800a466:	2204      	movs	r2, #4
 800a468:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	4413      	add	r3, r2
 800a472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a476:	461a      	mov	r2, r3
 800a478:	2302      	movs	r3, #2
 800a47a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	b2d8      	uxtb	r0, r3
 800a480:	6879      	ldr	r1, [r7, #4]
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	4613      	mov	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4413      	add	r3, r2
 800a48a:	00db      	lsls	r3, r3, #3
 800a48c:	440b      	add	r3, r1
 800a48e:	335c      	adds	r3, #92	; 0x5c
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	461a      	mov	r2, r3
 800a494:	4601      	mov	r1, r0
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f00c ff20 	bl	80172dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a49c:	e0d1      	b.n	800a642 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b0:	2b80      	cmp	r3, #128	; 0x80
 800a4b2:	d13e      	bne.n	800a532 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	0151      	lsls	r1, r2, #5
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	440a      	add	r2, r1
 800a4ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ce:	f043 0302 	orr.w	r3, r3, #2
 800a4d2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	440b      	add	r3, r1
 800a4e2:	3358      	adds	r3, #88	; 0x58
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	1c59      	adds	r1, r3, #1
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	4403      	add	r3, r0
 800a4f6:	3358      	adds	r3, #88	; 0x58
 800a4f8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	440b      	add	r3, r1
 800a508:	335d      	adds	r3, #93	; 0x5d
 800a50a:	2206      	movs	r2, #6
 800a50c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	b2d2      	uxtb	r2, r2
 800a516:	4611      	mov	r1, r2
 800a518:	4618      	mov	r0, r3
 800a51a:	f006 fdd6 	bl	80110ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	4413      	add	r3, r2
 800a526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a52a:	461a      	mov	r2, r3
 800a52c:	2380      	movs	r3, #128	; 0x80
 800a52e:	6093      	str	r3, [r2, #8]
}
 800a530:	e087      	b.n	800a642 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f003 0310 	and.w	r3, r3, #16
 800a544:	2b10      	cmp	r3, #16
 800a546:	d17c      	bne.n	800a642 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	4613      	mov	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	00db      	lsls	r3, r3, #3
 800a554:	440b      	add	r3, r1
 800a556:	333f      	adds	r3, #63	; 0x3f
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d122      	bne.n	800a5a4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a55e:	6879      	ldr	r1, [r7, #4]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4613      	mov	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	00db      	lsls	r3, r3, #3
 800a56a:	440b      	add	r3, r1
 800a56c:	3358      	adds	r3, #88	; 0x58
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	0151      	lsls	r1, r2, #5
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	440a      	add	r2, r1
 800a588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a58c:	f043 0302 	orr.w	r3, r3, #2
 800a590:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	b2d2      	uxtb	r2, r2
 800a59a:	4611      	mov	r1, r2
 800a59c:	4618      	mov	r0, r3
 800a59e:	f006 fd94 	bl	80110ca <USB_HC_Halt>
 800a5a2:	e045      	b.n	800a630 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a5a4:	6879      	ldr	r1, [r7, #4]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	440b      	add	r3, r1
 800a5b2:	333f      	adds	r3, #63	; 0x3f
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a5ba:	6879      	ldr	r1, [r7, #4]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	00db      	lsls	r3, r3, #3
 800a5c6:	440b      	add	r3, r1
 800a5c8:	333f      	adds	r3, #63	; 0x3f
 800a5ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d12f      	bne.n	800a630 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a5d0:	6879      	ldr	r1, [r7, #4]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	440b      	add	r3, r1
 800a5de:	3358      	adds	r3, #88	; 0x58
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d121      	bne.n	800a630 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	00db      	lsls	r3, r3, #3
 800a5f8:	440b      	add	r3, r1
 800a5fa:	335d      	adds	r3, #93	; 0x5d
 800a5fc:	2203      	movs	r2, #3
 800a5fe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	4413      	add	r3, r2
 800a608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	0151      	lsls	r1, r2, #5
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	440a      	add	r2, r1
 800a616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a61a:	f043 0302 	orr.w	r3, r3, #2
 800a61e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	4611      	mov	r1, r2
 800a62a:	4618      	mov	r0, r3
 800a62c:	f006 fd4d 	bl	80110ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	4413      	add	r3, r2
 800a638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a63c:	461a      	mov	r2, r3
 800a63e:	2310      	movs	r3, #16
 800a640:	6093      	str	r3, [r2, #8]
}
 800a642:	bf00      	nop
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b086      	sub	sp, #24
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	2b04      	cmp	r3, #4
 800a678:	d119      	bne.n	800a6ae <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	4413      	add	r3, r2
 800a682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a686:	461a      	mov	r2, r3
 800a688:	2304      	movs	r3, #4
 800a68a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	4413      	add	r3, r2
 800a694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6a6:	f043 0302 	orr.w	r3, r3, #2
 800a6aa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800a6ac:	e33e      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f003 0320 	and.w	r3, r3, #32
 800a6c0:	2b20      	cmp	r3, #32
 800a6c2:	d141      	bne.n	800a748 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2320      	movs	r3, #32
 800a6d4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	440b      	add	r3, r1
 800a6e4:	333d      	adds	r3, #61	; 0x3d
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	f040 831f 	bne.w	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	440b      	add	r3, r1
 800a6fc:	333d      	adds	r3, #61	; 0x3d
 800a6fe:	2200      	movs	r2, #0
 800a700:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	440b      	add	r3, r1
 800a710:	335c      	adds	r3, #92	; 0x5c
 800a712:	2202      	movs	r2, #2
 800a714:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a730:	f043 0302 	orr.w	r3, r3, #2
 800a734:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	b2d2      	uxtb	r2, r2
 800a73e:	4611      	mov	r1, r2
 800a740:	4618      	mov	r0, r3
 800a742:	f006 fcc2 	bl	80110ca <USB_HC_Halt>
}
 800a746:	e2f1      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75a:	2b40      	cmp	r3, #64	; 0x40
 800a75c:	d13f      	bne.n	800a7de <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4613      	mov	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	00db      	lsls	r3, r3, #3
 800a76a:	440b      	add	r3, r1
 800a76c:	335d      	adds	r3, #93	; 0x5d
 800a76e:	2204      	movs	r2, #4
 800a770:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	4613      	mov	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	00db      	lsls	r3, r3, #3
 800a77e:	440b      	add	r3, r1
 800a780:	333d      	adds	r3, #61	; 0x3d
 800a782:	2201      	movs	r2, #1
 800a784:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	4613      	mov	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	00db      	lsls	r3, r3, #3
 800a792:	440b      	add	r3, r1
 800a794:	3358      	adds	r3, #88	; 0x58
 800a796:	2200      	movs	r2, #0
 800a798:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	0151      	lsls	r1, r2, #5
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	440a      	add	r2, r1
 800a7b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7b4:	f043 0302 	orr.w	r3, r3, #2
 800a7b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	b2d2      	uxtb	r2, r2
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f006 fc80 	bl	80110ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	2340      	movs	r3, #64	; 0x40
 800a7da:	6093      	str	r3, [r2, #8]
}
 800a7dc:	e2a6      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7f4:	d122      	bne.n	800a83c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	0151      	lsls	r1, r2, #5
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	440a      	add	r2, r1
 800a80c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a810:	f043 0302 	orr.w	r3, r3, #2
 800a814:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	b2d2      	uxtb	r2, r2
 800a81e:	4611      	mov	r1, r2
 800a820:	4618      	mov	r0, r3
 800a822:	f006 fc52 	bl	80110ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a832:	461a      	mov	r2, r3
 800a834:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a838:	6093      	str	r3, [r2, #8]
}
 800a83a:	e277      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	4413      	add	r3, r2
 800a844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d135      	bne.n	800a8be <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	4613      	mov	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	00db      	lsls	r3, r3, #3
 800a85e:	440b      	add	r3, r1
 800a860:	3358      	adds	r3, #88	; 0x58
 800a862:	2200      	movs	r2, #0
 800a864:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	015a      	lsls	r2, r3, #5
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	4413      	add	r3, r2
 800a86e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	0151      	lsls	r1, r2, #5
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	440a      	add	r2, r1
 800a87c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a880:	f043 0302 	orr.w	r3, r3, #2
 800a884:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	b2d2      	uxtb	r2, r2
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f006 fc1a 	bl	80110ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a8a8:	6879      	ldr	r1, [r7, #4]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	440b      	add	r3, r1
 800a8b6:	335d      	adds	r3, #93	; 0x5d
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	701a      	strb	r2, [r3, #0]
}
 800a8bc:	e236      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f003 0308 	and.w	r3, r3, #8
 800a8d0:	2b08      	cmp	r3, #8
 800a8d2:	d12b      	bne.n	800a92c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	2308      	movs	r3, #8
 800a8e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	0151      	lsls	r1, r2, #5
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	440a      	add	r2, r1
 800a8fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a900:	f043 0302 	orr.w	r3, r3, #2
 800a904:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	b2d2      	uxtb	r2, r2
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f006 fbda 	bl	80110ca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800a916:	6879      	ldr	r1, [r7, #4]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	00db      	lsls	r3, r3, #3
 800a922:	440b      	add	r3, r1
 800a924:	335d      	adds	r3, #93	; 0x5d
 800a926:	2205      	movs	r2, #5
 800a928:	701a      	strb	r2, [r3, #0]
}
 800a92a:	e1ff      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	4413      	add	r3, r2
 800a934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f003 0310 	and.w	r3, r3, #16
 800a93e:	2b10      	cmp	r3, #16
 800a940:	d155      	bne.n	800a9ee <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a942:	6879      	ldr	r1, [r7, #4]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	4613      	mov	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	440b      	add	r3, r1
 800a950:	3358      	adds	r3, #88	; 0x58
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	4613      	mov	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	00db      	lsls	r3, r3, #3
 800a962:	440b      	add	r3, r1
 800a964:	335d      	adds	r3, #93	; 0x5d
 800a966:	2203      	movs	r2, #3
 800a968:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a96a:	6879      	ldr	r1, [r7, #4]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	00db      	lsls	r3, r3, #3
 800a976:	440b      	add	r3, r1
 800a978:	333d      	adds	r3, #61	; 0x3d
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d114      	bne.n	800a9aa <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800a980:	6879      	ldr	r1, [r7, #4]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4613      	mov	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4413      	add	r3, r2
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	440b      	add	r3, r1
 800a98e:	333c      	adds	r3, #60	; 0x3c
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d109      	bne.n	800a9aa <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800a996:	6879      	ldr	r1, [r7, #4]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	00db      	lsls	r3, r3, #3
 800a9a2:	440b      	add	r3, r1
 800a9a4:	333d      	adds	r3, #61	; 0x3d
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	0151      	lsls	r1, r2, #5
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	440a      	add	r2, r1
 800a9c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9c4:	f043 0302 	orr.w	r3, r3, #2
 800a9c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	b2d2      	uxtb	r2, r2
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f006 fb78 	bl	80110ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	6093      	str	r3, [r2, #8]
}
 800a9ec:	e19e      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	015a      	lsls	r2, r3, #5
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa00:	2b80      	cmp	r3, #128	; 0x80
 800aa02:	d12b      	bne.n	800aa5c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa1e:	f043 0302 	orr.w	r3, r3, #2
 800aa22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	b2d2      	uxtb	r2, r2
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f006 fb4b 	bl	80110ca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	440b      	add	r3, r1
 800aa42:	335d      	adds	r3, #93	; 0x5d
 800aa44:	2206      	movs	r2, #6
 800aa46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa54:	461a      	mov	r2, r3
 800aa56:	2380      	movs	r3, #128	; 0x80
 800aa58:	6093      	str	r3, [r2, #8]
}
 800aa5a:	e167      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa72:	d135      	bne.n	800aae0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	0151      	lsls	r1, r2, #5
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	440a      	add	r2, r1
 800aa8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa8e:	f043 0302 	orr.w	r3, r3, #2
 800aa92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	b2d2      	uxtb	r2, r2
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f006 fb13 	bl	80110ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab0:	461a      	mov	r2, r3
 800aab2:	2310      	movs	r3, #16
 800aab4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	015a      	lsls	r2, r3, #5
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	4413      	add	r3, r2
 800aabe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aac2:	461a      	mov	r2, r3
 800aac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aac8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	440b      	add	r3, r1
 800aad8:	335d      	adds	r3, #93	; 0x5d
 800aada:	2208      	movs	r2, #8
 800aadc:	701a      	strb	r2, [r3, #0]
}
 800aade:	e125      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	4413      	add	r3, r2
 800aae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	f040 811a 	bne.w	800ad2c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	015a      	lsls	r2, r3, #5
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	4413      	add	r3, r2
 800ab00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	0151      	lsls	r1, r2, #5
 800ab0a:	693a      	ldr	r2, [r7, #16]
 800ab0c:	440a      	add	r2, r1
 800ab0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab12:	f023 0302 	bic.w	r3, r3, #2
 800ab16:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800ab18:	6879      	ldr	r1, [r7, #4]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	440b      	add	r3, r1
 800ab26:	335d      	adds	r3, #93	; 0x5d
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d137      	bne.n	800ab9e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4613      	mov	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	00db      	lsls	r3, r3, #3
 800ab3a:	440b      	add	r3, r1
 800ab3c:	335c      	adds	r3, #92	; 0x5c
 800ab3e:	2201      	movs	r2, #1
 800ab40:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	4613      	mov	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	00db      	lsls	r3, r3, #3
 800ab4e:	440b      	add	r3, r1
 800ab50:	333f      	adds	r3, #63	; 0x3f
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d00b      	beq.n	800ab70 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	440b      	add	r3, r1
 800ab66:	333f      	adds	r3, #63	; 0x3f
 800ab68:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	f040 80c5 	bne.w	800acfa <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800ab70:	6879      	ldr	r1, [r7, #4]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	4613      	mov	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	00db      	lsls	r3, r3, #3
 800ab7c:	440b      	add	r3, r1
 800ab7e:	3351      	adds	r3, #81	; 0x51
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	f083 0301 	eor.w	r3, r3, #1
 800ab86:	b2d8      	uxtb	r0, r3
 800ab88:	6879      	ldr	r1, [r7, #4]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	440b      	add	r3, r1
 800ab96:	3351      	adds	r3, #81	; 0x51
 800ab98:	4602      	mov	r2, r0
 800ab9a:	701a      	strb	r2, [r3, #0]
 800ab9c:	e0ad      	b.n	800acfa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	440b      	add	r3, r1
 800abac:	335d      	adds	r3, #93	; 0x5d
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d10a      	bne.n	800abca <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800abb4:	6879      	ldr	r1, [r7, #4]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	440b      	add	r3, r1
 800abc2:	335c      	adds	r3, #92	; 0x5c
 800abc4:	2202      	movs	r2, #2
 800abc6:	701a      	strb	r2, [r3, #0]
 800abc8:	e097      	b.n	800acfa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800abca:	6879      	ldr	r1, [r7, #4]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	4613      	mov	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	440b      	add	r3, r1
 800abd8:	335d      	adds	r3, #93	; 0x5d
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b04      	cmp	r3, #4
 800abde:	d10a      	bne.n	800abf6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	4613      	mov	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	440b      	add	r3, r1
 800abee:	335c      	adds	r3, #92	; 0x5c
 800abf0:	2202      	movs	r2, #2
 800abf2:	701a      	strb	r2, [r3, #0]
 800abf4:	e081      	b.n	800acfa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	4613      	mov	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	00db      	lsls	r3, r3, #3
 800ac02:	440b      	add	r3, r1
 800ac04:	335d      	adds	r3, #93	; 0x5d
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b05      	cmp	r3, #5
 800ac0a:	d10a      	bne.n	800ac22 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	00db      	lsls	r3, r3, #3
 800ac18:	440b      	add	r3, r1
 800ac1a:	335c      	adds	r3, #92	; 0x5c
 800ac1c:	2205      	movs	r2, #5
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	e06b      	b.n	800acfa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	00db      	lsls	r3, r3, #3
 800ac2e:	440b      	add	r3, r1
 800ac30:	335d      	adds	r3, #93	; 0x5d
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	2b06      	cmp	r3, #6
 800ac36:	d00a      	beq.n	800ac4e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	440b      	add	r3, r1
 800ac46:	335d      	adds	r3, #93	; 0x5d
 800ac48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ac4a:	2b08      	cmp	r3, #8
 800ac4c:	d155      	bne.n	800acfa <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	440b      	add	r3, r1
 800ac5c:	3358      	adds	r3, #88	; 0x58
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	1c59      	adds	r1, r3, #1
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	4613      	mov	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	4403      	add	r3, r0
 800ac70:	3358      	adds	r3, #88	; 0x58
 800ac72:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800ac74:	6879      	ldr	r1, [r7, #4]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	440b      	add	r3, r1
 800ac82:	3358      	adds	r3, #88	; 0x58
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	d914      	bls.n	800acb4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800ac8a:	6879      	ldr	r1, [r7, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	440b      	add	r3, r1
 800ac98:	3358      	adds	r3, #88	; 0x58
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4613      	mov	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	440b      	add	r3, r1
 800acac:	335c      	adds	r3, #92	; 0x5c
 800acae:	2204      	movs	r2, #4
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	e009      	b.n	800acc8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	4613      	mov	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	00db      	lsls	r3, r3, #3
 800acc0:	440b      	add	r3, r1
 800acc2:	335c      	adds	r3, #92	; 0x5c
 800acc4:	2202      	movs	r2, #2
 800acc6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	015a      	lsls	r2, r3, #5
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	4413      	add	r3, r2
 800acd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800acde:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ace6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	015a      	lsls	r2, r3, #5
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	4413      	add	r3, r2
 800acf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf4:	461a      	mov	r2, r3
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	015a      	lsls	r2, r3, #5
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	4413      	add	r3, r2
 800ad02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad06:	461a      	mov	r2, r3
 800ad08:	2302      	movs	r3, #2
 800ad0a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	b2d8      	uxtb	r0, r3
 800ad10:	6879      	ldr	r1, [r7, #4]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	440b      	add	r3, r1
 800ad1e:	335c      	adds	r3, #92	; 0x5c
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	4601      	mov	r1, r0
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f00c fad8 	bl	80172dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800ad2c:	bf00      	nop
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08a      	sub	sp, #40	; 0x28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6a1b      	ldr	r3, [r3, #32]
 800ad4c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	f003 030f 	and.w	r3, r3, #15
 800ad54:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	0c5b      	lsrs	r3, r3, #17
 800ad5a:	f003 030f 	and.w	r3, r3, #15
 800ad5e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	091b      	lsrs	r3, r3, #4
 800ad64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad68:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d003      	beq.n	800ad78 <HCD_RXQLVL_IRQHandler+0x44>
 800ad70:	2b05      	cmp	r3, #5
 800ad72:	f000 8082 	beq.w	800ae7a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800ad76:	e083      	b.n	800ae80 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d07f      	beq.n	800ae7e <HCD_RXQLVL_IRQHandler+0x14a>
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	440b      	add	r3, r1
 800ad8c:	3344      	adds	r3, #68	; 0x44
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d074      	beq.n	800ae7e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4413      	add	r3, r2
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	440b      	add	r3, r1
 800ada6:	3344      	adds	r3, #68	; 0x44
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	693a      	ldr	r2, [r7, #16]
 800adac:	b292      	uxth	r2, r2
 800adae:	4619      	mov	r1, r3
 800adb0:	f005 fd37 	bl	8010822 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	69ba      	ldr	r2, [r7, #24]
 800adb8:	4613      	mov	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	440b      	add	r3, r1
 800adc2:	3344      	adds	r3, #68	; 0x44
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	18d1      	adds	r1, r2, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	69ba      	ldr	r2, [r7, #24]
 800adce:	4613      	mov	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	4403      	add	r3, r0
 800add8:	3344      	adds	r3, #68	; 0x44
 800adda:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	440b      	add	r3, r1
 800adea:	334c      	adds	r3, #76	; 0x4c
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	18d1      	adds	r1, r2, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	4403      	add	r3, r0
 800ae00:	334c      	adds	r3, #76	; 0x4c
 800ae02:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae10:	691a      	ldr	r2, [r3, #16]
 800ae12:	4b1d      	ldr	r3, [pc, #116]	; (800ae88 <HCD_RXQLVL_IRQHandler+0x154>)
 800ae14:	4013      	ands	r3, r2
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d031      	beq.n	800ae7e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	015a      	lsls	r2, r3, #5
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	4413      	add	r3, r2
 800ae22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae30:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae38:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	015a      	lsls	r2, r3, #5
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	4413      	add	r3, r2
 800ae42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae46:	461a      	mov	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	4613      	mov	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	00db      	lsls	r3, r3, #3
 800ae58:	440b      	add	r3, r1
 800ae5a:	3350      	adds	r3, #80	; 0x50
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	f083 0301 	eor.w	r3, r3, #1
 800ae62:	b2d8      	uxtb	r0, r3
 800ae64:	6879      	ldr	r1, [r7, #4]
 800ae66:	69ba      	ldr	r2, [r7, #24]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	440b      	add	r3, r1
 800ae72:	3350      	adds	r3, #80	; 0x50
 800ae74:	4602      	mov	r2, r0
 800ae76:	701a      	strb	r2, [r3, #0]
      break;
 800ae78:	e001      	b.n	800ae7e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800ae7a:	bf00      	nop
 800ae7c:	e000      	b.n	800ae80 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800ae7e:	bf00      	nop
  }
}
 800ae80:	bf00      	nop
 800ae82:	3728      	adds	r7, #40	; 0x28
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	1ff80000 	.word	0x1ff80000

0800ae8c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aeb8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f003 0302 	and.w	r3, r3, #2
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d10b      	bne.n	800aedc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d102      	bne.n	800aed4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f00c f9e8 	bl	80172a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	f043 0302 	orr.w	r3, r3, #2
 800aeda:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f003 0308 	and.w	r3, r3, #8
 800aee2:	2b08      	cmp	r3, #8
 800aee4:	d132      	bne.n	800af4c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	f043 0308 	orr.w	r3, r3, #8
 800aeec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	d126      	bne.n	800af46 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d113      	bne.n	800af28 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800af06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af0a:	d106      	bne.n	800af1a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2102      	movs	r1, #2
 800af12:	4618      	mov	r0, r3
 800af14:	f005 fdb4 	bl	8010a80 <USB_InitFSLSPClkSel>
 800af18:	e011      	b.n	800af3e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2101      	movs	r1, #1
 800af20:	4618      	mov	r0, r3
 800af22:	f005 fdad 	bl	8010a80 <USB_InitFSLSPClkSel>
 800af26:	e00a      	b.n	800af3e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d106      	bne.n	800af3e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af36:	461a      	mov	r2, r3
 800af38:	f64e 2360 	movw	r3, #60000	; 0xea60
 800af3c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f00c f9de 	bl	8017300 <HAL_HCD_PortEnabled_Callback>
 800af44:	e002      	b.n	800af4c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f00c f9e8 	bl	801731c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f003 0320 	and.w	r3, r3, #32
 800af52:	2b20      	cmp	r3, #32
 800af54:	d103      	bne.n	800af5e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f043 0320 	orr.w	r3, r3, #32
 800af5c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800af64:	461a      	mov	r2, r3
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	6013      	str	r3, [r2, #0]
}
 800af6a:	bf00      	nop
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
	...

0800af74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e07f      	b.n	800b086 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7f7 fe8e 	bl	8002cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2224      	movs	r2, #36	; 0x24
 800afa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f022 0201 	bic.w	r2, r2, #1
 800afb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800afc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d107      	bne.n	800afee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	689a      	ldr	r2, [r3, #8]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afea:	609a      	str	r2, [r3, #8]
 800afec:	e006      	b.n	800affc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	689a      	ldr	r2, [r3, #8]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800affa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	2b02      	cmp	r3, #2
 800b002:	d104      	bne.n	800b00e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b00c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6859      	ldr	r1, [r3, #4]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	4b1d      	ldr	r3, [pc, #116]	; (800b090 <HAL_I2C_Init+0x11c>)
 800b01a:	430b      	orrs	r3, r1
 800b01c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68da      	ldr	r2, [r3, #12]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b02c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	691a      	ldr	r2, [r3, #16]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	ea42 0103 	orr.w	r1, r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	699b      	ldr	r3, [r3, #24]
 800b03e:	021a      	lsls	r2, r3, #8
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	430a      	orrs	r2, r1
 800b046:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	69d9      	ldr	r1, [r3, #28]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a1a      	ldr	r2, [r3, #32]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	430a      	orrs	r2, r1
 800b056:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f042 0201 	orr.w	r2, r2, #1
 800b066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2220      	movs	r2, #32
 800b072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	02008000 	.word	0x02008000

0800b094 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e021      	b.n	800b0ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2224      	movs	r2, #36	; 0x24
 800b0aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f022 0201 	bic.w	r2, r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7f7 fe74 	bl	8002dac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af02      	add	r7, sp, #8
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	4611      	mov	r1, r2
 800b100:	461a      	mov	r2, r3
 800b102:	4603      	mov	r3, r0
 800b104:	817b      	strh	r3, [r7, #10]
 800b106:	460b      	mov	r3, r1
 800b108:	813b      	strh	r3, [r7, #8]
 800b10a:	4613      	mov	r3, r2
 800b10c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b20      	cmp	r3, #32
 800b118:	f040 80f9 	bne.w	800b30e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <HAL_I2C_Mem_Write+0x34>
 800b122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b124:	2b00      	cmp	r3, #0
 800b126:	d105      	bne.n	800b134 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b12e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e0ed      	b.n	800b310 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d101      	bne.n	800b142 <HAL_I2C_Mem_Write+0x4e>
 800b13e:	2302      	movs	r3, #2
 800b140:	e0e6      	b.n	800b310 <HAL_I2C_Mem_Write+0x21c>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b14a:	f7fc facf 	bl	80076ec <HAL_GetTick>
 800b14e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	2319      	movs	r3, #25
 800b156:	2201      	movs	r2, #1
 800b158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 fad1 	bl	800b704 <I2C_WaitOnFlagUntilTimeout>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e0d1      	b.n	800b310 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2221      	movs	r2, #33	; 0x21
 800b170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2240      	movs	r2, #64	; 0x40
 800b178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6a3a      	ldr	r2, [r7, #32]
 800b186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b18c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b194:	88f8      	ldrh	r0, [r7, #6]
 800b196:	893a      	ldrh	r2, [r7, #8]
 800b198:	8979      	ldrh	r1, [r7, #10]
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f000 f9e1 	bl	800b56c <I2C_RequestMemoryWrite>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e0a9      	b.n	800b310 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	2bff      	cmp	r3, #255	; 0xff
 800b1c4:	d90e      	bls.n	800b1e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	22ff      	movs	r2, #255	; 0xff
 800b1ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1d0:	b2da      	uxtb	r2, r3
 800b1d2:	8979      	ldrh	r1, [r7, #10]
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f000 fbb3 	bl	800b948 <I2C_TransferConfig>
 800b1e2:	e00f      	b.n	800b204 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	8979      	ldrh	r1, [r7, #10]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f000 fba2 	bl	800b948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 fabb 	bl	800b784 <I2C_WaitOnTXISFlagUntilTimeout>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	e07b      	b.n	800b310 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21c:	781a      	ldrb	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b232:	b29b      	uxth	r3, r3
 800b234:	3b01      	subs	r3, #1
 800b236:	b29a      	uxth	r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b240:	3b01      	subs	r3, #1
 800b242:	b29a      	uxth	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d034      	beq.n	800b2bc <HAL_I2C_Mem_Write+0x1c8>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b256:	2b00      	cmp	r3, #0
 800b258:	d130      	bne.n	800b2bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	2200      	movs	r2, #0
 800b262:	2180      	movs	r1, #128	; 0x80
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 fa4d 	bl	800b704 <I2C_WaitOnFlagUntilTimeout>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e04d      	b.n	800b310 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b278:	b29b      	uxth	r3, r3
 800b27a:	2bff      	cmp	r3, #255	; 0xff
 800b27c:	d90e      	bls.n	800b29c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	22ff      	movs	r2, #255	; 0xff
 800b282:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	8979      	ldrh	r1, [r7, #10]
 800b28c:	2300      	movs	r3, #0
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 fb57 	bl	800b948 <I2C_TransferConfig>
 800b29a:	e00f      	b.n	800b2bc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	8979      	ldrh	r1, [r7, #10]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 fb46 	bl	800b948 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d19e      	bne.n	800b204 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 fa9a 	bl	800b804 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e01a      	b.n	800b310 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6859      	ldr	r1, [r3, #4]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <HAL_I2C_Mem_Write+0x224>)
 800b2ee:	400b      	ands	r3, r1
 800b2f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2220      	movs	r2, #32
 800b2f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	e000      	b.n	800b310 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b30e:	2302      	movs	r3, #2
  }
}
 800b310:	4618      	mov	r0, r3
 800b312:	3718      	adds	r7, #24
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	fe00e800 	.word	0xfe00e800

0800b31c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b088      	sub	sp, #32
 800b320:	af02      	add	r7, sp, #8
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	4608      	mov	r0, r1
 800b326:	4611      	mov	r1, r2
 800b328:	461a      	mov	r2, r3
 800b32a:	4603      	mov	r3, r0
 800b32c:	817b      	strh	r3, [r7, #10]
 800b32e:	460b      	mov	r3, r1
 800b330:	813b      	strh	r3, [r7, #8]
 800b332:	4613      	mov	r3, r2
 800b334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b20      	cmp	r3, #32
 800b340:	f040 80fd 	bne.w	800b53e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d002      	beq.n	800b350 <HAL_I2C_Mem_Read+0x34>
 800b34a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d105      	bne.n	800b35c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b356:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e0f1      	b.n	800b540 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b362:	2b01      	cmp	r3, #1
 800b364:	d101      	bne.n	800b36a <HAL_I2C_Mem_Read+0x4e>
 800b366:	2302      	movs	r3, #2
 800b368:	e0ea      	b.n	800b540 <HAL_I2C_Mem_Read+0x224>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2201      	movs	r2, #1
 800b36e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b372:	f7fc f9bb 	bl	80076ec <HAL_GetTick>
 800b376:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	2319      	movs	r3, #25
 800b37e:	2201      	movs	r2, #1
 800b380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 f9bd 	bl	800b704 <I2C_WaitOnFlagUntilTimeout>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	e0d5      	b.n	800b540 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2222      	movs	r2, #34	; 0x22
 800b398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2240      	movs	r2, #64	; 0x40
 800b3a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6a3a      	ldr	r2, [r7, #32]
 800b3ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3bc:	88f8      	ldrh	r0, [r7, #6]
 800b3be:	893a      	ldrh	r2, [r7, #8]
 800b3c0:	8979      	ldrh	r1, [r7, #10]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f000 f921 	bl	800b614 <I2C_RequestMemoryRead>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d005      	beq.n	800b3e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e0ad      	b.n	800b540 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	2bff      	cmp	r3, #255	; 0xff
 800b3ec:	d90e      	bls.n	800b40c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	22ff      	movs	r2, #255	; 0xff
 800b3f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	8979      	ldrh	r1, [r7, #10]
 800b3fc:	4b52      	ldr	r3, [pc, #328]	; (800b548 <HAL_I2C_Mem_Read+0x22c>)
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f000 fa9f 	bl	800b948 <I2C_TransferConfig>
 800b40a:	e00f      	b.n	800b42c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b410:	b29a      	uxth	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	8979      	ldrh	r1, [r7, #10]
 800b41e:	4b4a      	ldr	r3, [pc, #296]	; (800b548 <HAL_I2C_Mem_Read+0x22c>)
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f000 fa8e 	bl	800b948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	2200      	movs	r2, #0
 800b434:	2104      	movs	r1, #4
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 f964 	bl	800b704 <I2C_WaitOnFlagUntilTimeout>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e07c      	b.n	800b540 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b450:	b2d2      	uxtb	r2, r2
 800b452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b462:	3b01      	subs	r3, #1
 800b464:	b29a      	uxth	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b46e:	b29b      	uxth	r3, r3
 800b470:	3b01      	subs	r3, #1
 800b472:	b29a      	uxth	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d034      	beq.n	800b4ec <HAL_I2C_Mem_Read+0x1d0>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b486:	2b00      	cmp	r3, #0
 800b488:	d130      	bne.n	800b4ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b490:	2200      	movs	r2, #0
 800b492:	2180      	movs	r1, #128	; 0x80
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f000 f935 	bl	800b704 <I2C_WaitOnFlagUntilTimeout>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d001      	beq.n	800b4a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e04d      	b.n	800b540 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	2bff      	cmp	r3, #255	; 0xff
 800b4ac:	d90e      	bls.n	800b4cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	22ff      	movs	r2, #255	; 0xff
 800b4b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	8979      	ldrh	r1, [r7, #10]
 800b4bc:	2300      	movs	r3, #0
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f000 fa3f 	bl	800b948 <I2C_TransferConfig>
 800b4ca:	e00f      	b.n	800b4ec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	8979      	ldrh	r1, [r7, #10]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f000 fa2e 	bl	800b948 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d19a      	bne.n	800b42c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 f982 	bl	800b804 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d001      	beq.n	800b50a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e01a      	b.n	800b540 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2220      	movs	r2, #32
 800b510:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6859      	ldr	r1, [r3, #4]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	4b0b      	ldr	r3, [pc, #44]	; (800b54c <HAL_I2C_Mem_Read+0x230>)
 800b51e:	400b      	ands	r3, r1
 800b520:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2220      	movs	r2, #32
 800b526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e000      	b.n	800b540 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b53e:	2302      	movs	r3, #2
  }
}
 800b540:	4618      	mov	r0, r3
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	80002400 	.word	0x80002400
 800b54c:	fe00e800 	.word	0xfe00e800

0800b550 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b55e:	b2db      	uxtb	r3, r3
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af02      	add	r7, sp, #8
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	4608      	mov	r0, r1
 800b576:	4611      	mov	r1, r2
 800b578:	461a      	mov	r2, r3
 800b57a:	4603      	mov	r3, r0
 800b57c:	817b      	strh	r3, [r7, #10]
 800b57e:	460b      	mov	r3, r1
 800b580:	813b      	strh	r3, [r7, #8]
 800b582:	4613      	mov	r3, r2
 800b584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	8979      	ldrh	r1, [r7, #10]
 800b58c:	4b20      	ldr	r3, [pc, #128]	; (800b610 <I2C_RequestMemoryWrite+0xa4>)
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f000 f9d7 	bl	800b948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b59a:	69fa      	ldr	r2, [r7, #28]
 800b59c:	69b9      	ldr	r1, [r7, #24]
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 f8f0 	bl	800b784 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e02c      	b.n	800b608 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b5ae:	88fb      	ldrh	r3, [r7, #6]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d105      	bne.n	800b5c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5b4:	893b      	ldrh	r3, [r7, #8]
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	629a      	str	r2, [r3, #40]	; 0x28
 800b5be:	e015      	b.n	800b5ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b5c0:	893b      	ldrh	r3, [r7, #8]
 800b5c2:	0a1b      	lsrs	r3, r3, #8
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	69b9      	ldr	r1, [r7, #24]
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 f8d6 	bl	800b784 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e012      	b.n	800b608 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5e2:	893b      	ldrh	r3, [r7, #8]
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2180      	movs	r1, #128	; 0x80
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 f884 	bl	800b704 <I2C_WaitOnFlagUntilTimeout>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e000      	b.n	800b608 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	80002000 	.word	0x80002000

0800b614 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af02      	add	r7, sp, #8
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	4608      	mov	r0, r1
 800b61e:	4611      	mov	r1, r2
 800b620:	461a      	mov	r2, r3
 800b622:	4603      	mov	r3, r0
 800b624:	817b      	strh	r3, [r7, #10]
 800b626:	460b      	mov	r3, r1
 800b628:	813b      	strh	r3, [r7, #8]
 800b62a:	4613      	mov	r3, r2
 800b62c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b62e:	88fb      	ldrh	r3, [r7, #6]
 800b630:	b2da      	uxtb	r2, r3
 800b632:	8979      	ldrh	r1, [r7, #10]
 800b634:	4b20      	ldr	r3, [pc, #128]	; (800b6b8 <I2C_RequestMemoryRead+0xa4>)
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	2300      	movs	r3, #0
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 f984 	bl	800b948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b640:	69fa      	ldr	r2, [r7, #28]
 800b642:	69b9      	ldr	r1, [r7, #24]
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 f89d 	bl	800b784 <I2C_WaitOnTXISFlagUntilTimeout>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d001      	beq.n	800b654 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	e02c      	b.n	800b6ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b654:	88fb      	ldrh	r3, [r7, #6]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d105      	bne.n	800b666 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b65a:	893b      	ldrh	r3, [r7, #8]
 800b65c:	b2da      	uxtb	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	629a      	str	r2, [r3, #40]	; 0x28
 800b664:	e015      	b.n	800b692 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b666:	893b      	ldrh	r3, [r7, #8]
 800b668:	0a1b      	lsrs	r3, r3, #8
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b674:	69fa      	ldr	r2, [r7, #28]
 800b676:	69b9      	ldr	r1, [r7, #24]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f883 	bl	800b784 <I2C_WaitOnTXISFlagUntilTimeout>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e012      	b.n	800b6ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b688:	893b      	ldrh	r3, [r7, #8]
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	9300      	str	r3, [sp, #0]
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	2200      	movs	r2, #0
 800b69a:	2140      	movs	r1, #64	; 0x40
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 f831 	bl	800b704 <I2C_WaitOnFlagUntilTimeout>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e000      	b.n	800b6ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	80002000 	.word	0x80002000

0800b6bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	f003 0302 	and.w	r3, r3, #2
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d103      	bne.n	800b6da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	f003 0301 	and.w	r3, r3, #1
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d007      	beq.n	800b6f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	699a      	ldr	r2, [r3, #24]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f042 0201 	orr.w	r2, r2, #1
 800b6f6:	619a      	str	r2, [r3, #24]
  }
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	603b      	str	r3, [r7, #0]
 800b710:	4613      	mov	r3, r2
 800b712:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b714:	e022      	b.n	800b75c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b71c:	d01e      	beq.n	800b75c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b71e:	f7fb ffe5 	bl	80076ec <HAL_GetTick>
 800b722:	4602      	mov	r2, r0
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d302      	bcc.n	800b734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d113      	bne.n	800b75c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b738:	f043 0220 	orr.w	r2, r3, #32
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2220      	movs	r2, #32
 800b744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	e00f      	b.n	800b77c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	699a      	ldr	r2, [r3, #24]
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	4013      	ands	r3, r2
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	429a      	cmp	r2, r3
 800b76a:	bf0c      	ite	eq
 800b76c:	2301      	moveq	r3, #1
 800b76e:	2300      	movne	r3, #0
 800b770:	b2db      	uxtb	r3, r3
 800b772:	461a      	mov	r2, r3
 800b774:	79fb      	ldrb	r3, [r7, #7]
 800b776:	429a      	cmp	r2, r3
 800b778:	d0cd      	beq.n	800b716 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b790:	e02c      	b.n	800b7ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	68b9      	ldr	r1, [r7, #8]
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 f870 	bl	800b87c <I2C_IsAcknowledgeFailed>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e02a      	b.n	800b7fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ac:	d01e      	beq.n	800b7ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7ae:	f7fb ff9d 	bl	80076ec <HAL_GetTick>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d302      	bcc.n	800b7c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d113      	bne.n	800b7ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c8:	f043 0220 	orr.w	r2, r3, #32
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e007      	b.n	800b7fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d1cb      	bne.n	800b792 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b810:	e028      	b.n	800b864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 f830 	bl	800b87c <I2C_IsAcknowledgeFailed>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e026      	b.n	800b874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b826:	f7fb ff61 	bl	80076ec <HAL_GetTick>
 800b82a:	4602      	mov	r2, r0
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	429a      	cmp	r2, r3
 800b834:	d302      	bcc.n	800b83c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d113      	bne.n	800b864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b840:	f043 0220 	orr.w	r2, r3, #32
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2220      	movs	r2, #32
 800b84c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e007      	b.n	800b874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	699b      	ldr	r3, [r3, #24]
 800b86a:	f003 0320 	and.w	r3, r3, #32
 800b86e:	2b20      	cmp	r3, #32
 800b870:	d1cf      	bne.n	800b812 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	f003 0310 	and.w	r3, r3, #16
 800b892:	2b10      	cmp	r3, #16
 800b894:	d151      	bne.n	800b93a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b896:	e022      	b.n	800b8de <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d01e      	beq.n	800b8de <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8a0:	f7fb ff24 	bl	80076ec <HAL_GetTick>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d302      	bcc.n	800b8b6 <I2C_IsAcknowledgeFailed+0x3a>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d113      	bne.n	800b8de <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ba:	f043 0220 	orr.w	r2, r3, #32
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e02e      	b.n	800b93c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	699b      	ldr	r3, [r3, #24]
 800b8e4:	f003 0320 	and.w	r3, r3, #32
 800b8e8:	2b20      	cmp	r3, #32
 800b8ea:	d1d5      	bne.n	800b898 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2210      	movs	r2, #16
 800b8f2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fedd 	bl	800b6bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6859      	ldr	r1, [r3, #4]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <I2C_IsAcknowledgeFailed+0xc8>)
 800b90e:	400b      	ands	r3, r1
 800b910:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b916:	f043 0204 	orr.w	r2, r3, #4
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2220      	movs	r2, #32
 800b922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	e000      	b.n	800b93c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	fe00e800 	.word	0xfe00e800

0800b948 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	607b      	str	r3, [r7, #4]
 800b952:	460b      	mov	r3, r1
 800b954:	817b      	strh	r3, [r7, #10]
 800b956:	4613      	mov	r3, r2
 800b958:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	0d5b      	lsrs	r3, r3, #21
 800b964:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b968:	4b0d      	ldr	r3, [pc, #52]	; (800b9a0 <I2C_TransferConfig+0x58>)
 800b96a:	430b      	orrs	r3, r1
 800b96c:	43db      	mvns	r3, r3
 800b96e:	ea02 0103 	and.w	r1, r2, r3
 800b972:	897b      	ldrh	r3, [r7, #10]
 800b974:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b978:	7a7b      	ldrb	r3, [r7, #9]
 800b97a:	041b      	lsls	r3, r3, #16
 800b97c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b980:	431a      	orrs	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	431a      	orrs	r2, r3
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	431a      	orrs	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b992:	bf00      	nop
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	03ff63ff 	.word	0x03ff63ff

0800b9a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b20      	cmp	r3, #32
 800b9b8:	d138      	bne.n	800ba2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d101      	bne.n	800b9c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	e032      	b.n	800ba2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2224      	movs	r2, #36	; 0x24
 800b9d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f022 0201 	bic.w	r2, r2, #1
 800b9e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b9f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6819      	ldr	r1, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	430a      	orrs	r2, r1
 800ba06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f042 0201 	orr.w	r2, r2, #1
 800ba16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e000      	b.n	800ba2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ba2c:	2302      	movs	r3, #2
  }
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b085      	sub	sp, #20
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	2b20      	cmp	r3, #32
 800ba4e:	d139      	bne.n	800bac4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d101      	bne.n	800ba5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ba5a:	2302      	movs	r3, #2
 800ba5c:	e033      	b.n	800bac6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2201      	movs	r2, #1
 800ba62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2224      	movs	r2, #36	; 0x24
 800ba6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f022 0201 	bic.w	r2, r2, #1
 800ba7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ba8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	021b      	lsls	r3, r3, #8
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f042 0201 	orr.w	r2, r2, #1
 800baae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2220      	movs	r2, #32
 800bab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	e000      	b.n	800bac6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bac4:	2302      	movs	r3, #2
  }
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
	...

0800bad4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	e0bf      	b.n	800bc66 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d106      	bne.n	800bb00 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7f7 f992 	bl	8002e24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2202      	movs	r2, #2
 800bb04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800bb16:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6999      	ldr	r1, [r3, #24]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bb2c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	430a      	orrs	r2, r1
 800bb3a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6899      	ldr	r1, [r3, #8]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	4b4a      	ldr	r3, [pc, #296]	; (800bc70 <HAL_LTDC_Init+0x19c>)
 800bb48:	400b      	ands	r3, r1
 800bb4a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	041b      	lsls	r3, r3, #16
 800bb52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	6899      	ldr	r1, [r3, #8]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	699a      	ldr	r2, [r3, #24]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	431a      	orrs	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	68d9      	ldr	r1, [r3, #12]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	4b3e      	ldr	r3, [pc, #248]	; (800bc70 <HAL_LTDC_Init+0x19c>)
 800bb76:	400b      	ands	r3, r1
 800bb78:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	041b      	lsls	r3, r3, #16
 800bb80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68d9      	ldr	r1, [r3, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a1a      	ldr	r2, [r3, #32]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	431a      	orrs	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	430a      	orrs	r2, r1
 800bb96:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6919      	ldr	r1, [r3, #16]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	4b33      	ldr	r3, [pc, #204]	; (800bc70 <HAL_LTDC_Init+0x19c>)
 800bba4:	400b      	ands	r3, r1
 800bba6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbac:	041b      	lsls	r3, r3, #16
 800bbae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6919      	ldr	r1, [r3, #16]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	431a      	orrs	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	430a      	orrs	r2, r1
 800bbc4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	6959      	ldr	r1, [r3, #20]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	4b27      	ldr	r3, [pc, #156]	; (800bc70 <HAL_LTDC_Init+0x19c>)
 800bbd2:	400b      	ands	r3, r1
 800bbd4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbda:	041b      	lsls	r3, r3, #16
 800bbdc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6959      	ldr	r1, [r3, #20]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	431a      	orrs	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bbfa:	021b      	lsls	r3, r3, #8
 800bbfc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bc04:	041b      	lsls	r3, r3, #16
 800bc06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800bc16:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	430a      	orrs	r2, r1
 800bc32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f042 0206 	orr.w	r2, r2, #6
 800bc42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	699a      	ldr	r2, [r3, #24]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f042 0201 	orr.w	r2, r2, #1
 800bc52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	f000f800 	.word	0xf000f800

0800bc74 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f003 0304 	and.w	r3, r3, #4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d023      	beq.n	800bcde <HAL_LTDC_IRQHandler+0x6a>
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	f003 0304 	and.w	r3, r3, #4
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d01e      	beq.n	800bcde <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f022 0204 	bic.w	r2, r2, #4
 800bcae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2204      	movs	r2, #4
 800bcb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bcbe:	f043 0201 	orr.w	r2, r3, #1
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2204      	movs	r2, #4
 800bccc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f86f 	bl	800bdbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f003 0302 	and.w	r3, r3, #2
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d023      	beq.n	800bd30 <HAL_LTDC_IRQHandler+0xbc>
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f003 0302 	and.w	r3, r3, #2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d01e      	beq.n	800bd30 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f022 0202 	bic.w	r2, r2, #2
 800bd00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2202      	movs	r2, #2
 800bd08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd10:	f043 0202 	orr.w	r2, r3, #2
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2204      	movs	r2, #4
 800bd1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f846 	bl	800bdbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d01b      	beq.n	800bd72 <HAL_LTDC_IRQHandler+0xfe>
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d016      	beq.n	800bd72 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f022 0201 	bic.w	r2, r2, #1
 800bd52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 f82f 	bl	800bdd0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f003 0308 	and.w	r3, r3, #8
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d01b      	beq.n	800bdb4 <HAL_LTDC_IRQHandler+0x140>
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	f003 0308 	and.w	r3, r3, #8
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d016      	beq.n	800bdb4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f022 0208 	bic.w	r2, r2, #8
 800bd94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2208      	movs	r2, #8
 800bd9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 f818 	bl	800bde4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800bdb4:	bf00      	nop
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bdf8:	b5b0      	push	{r4, r5, r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d101      	bne.n	800be12 <HAL_LTDC_ConfigLayer+0x1a>
 800be0e:	2302      	movs	r3, #2
 800be10:	e02c      	b.n	800be6c <HAL_LTDC_ConfigLayer+0x74>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2202      	movs	r2, #2
 800be1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2134      	movs	r1, #52	; 0x34
 800be28:	fb01 f303 	mul.w	r3, r1, r3
 800be2c:	4413      	add	r3, r2
 800be2e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	4614      	mov	r4, r2
 800be36:	461d      	mov	r5, r3
 800be38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be44:	682b      	ldr	r3, [r5, #0]
 800be46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f000 f81f 	bl	800be90 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2201      	movs	r2, #1
 800be58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bdb0      	pop	{r4, r5, r7, pc}

0800be74 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800be82:	b2db      	uxtb	r3, r3
}
 800be84:	4618      	mov	r0, r3
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800be90:	b480      	push	{r7}
 800be92:	b089      	sub	sp, #36	; 0x24
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	0c1b      	lsrs	r3, r3, #16
 800bea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800beac:	4413      	add	r3, r2
 800beae:	041b      	lsls	r3, r3, #16
 800beb0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	461a      	mov	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	01db      	lsls	r3, r3, #7
 800bebc:	4413      	add	r3, r2
 800bebe:	3384      	adds	r3, #132	; 0x84
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	6812      	ldr	r2, [r2, #0]
 800bec6:	4611      	mov	r1, r2
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	01d2      	lsls	r2, r2, #7
 800becc:	440a      	add	r2, r1
 800bece:	3284      	adds	r2, #132	; 0x84
 800bed0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bed4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	0c1b      	lsrs	r3, r3, #16
 800bee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bee6:	4413      	add	r3, r2
 800bee8:	1c5a      	adds	r2, r3, #1
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4619      	mov	r1, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	01db      	lsls	r3, r3, #7
 800bef4:	440b      	add	r3, r1
 800bef6:	3384      	adds	r3, #132	; 0x84
 800bef8:	4619      	mov	r1, r3
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	4313      	orrs	r3, r2
 800befe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	68da      	ldr	r2, [r3, #12]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf0e:	4413      	add	r3, r2
 800bf10:	041b      	lsls	r3, r3, #16
 800bf12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	461a      	mov	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	01db      	lsls	r3, r3, #7
 800bf1e:	4413      	add	r3, r2
 800bf20:	3384      	adds	r3, #132	; 0x84
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	6812      	ldr	r2, [r2, #0]
 800bf28:	4611      	mov	r1, r2
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	01d2      	lsls	r2, r2, #7
 800bf2e:	440a      	add	r2, r1
 800bf30:	3284      	adds	r2, #132	; 0x84
 800bf32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bf36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf46:	4413      	add	r3, r2
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4619      	mov	r1, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	01db      	lsls	r3, r3, #7
 800bf54:	440b      	add	r3, r1
 800bf56:	3384      	adds	r3, #132	; 0x84
 800bf58:	4619      	mov	r1, r3
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	461a      	mov	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	01db      	lsls	r3, r3, #7
 800bf6a:	4413      	add	r3, r2
 800bf6c:	3384      	adds	r3, #132	; 0x84
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	6812      	ldr	r2, [r2, #0]
 800bf74:	4611      	mov	r1, r2
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	01d2      	lsls	r2, r2, #7
 800bf7a:	440a      	add	r2, r1
 800bf7c:	3284      	adds	r2, #132	; 0x84
 800bf7e:	f023 0307 	bic.w	r3, r3, #7
 800bf82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	01db      	lsls	r3, r3, #7
 800bf8e:	4413      	add	r3, r2
 800bf90:	3384      	adds	r3, #132	; 0x84
 800bf92:	461a      	mov	r2, r3
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bfa0:	021b      	lsls	r3, r3, #8
 800bfa2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bfaa:	041b      	lsls	r3, r3, #16
 800bfac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	061b      	lsls	r3, r3, #24
 800bfb4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	01db      	lsls	r3, r3, #7
 800bfc0:	4413      	add	r3, r2
 800bfc2:	3384      	adds	r3, #132	; 0x84
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	01db      	lsls	r3, r3, #7
 800bfd0:	4413      	add	r3, r2
 800bfd2:	3384      	adds	r3, #132	; 0x84
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4619      	mov	r1, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	01db      	lsls	r3, r3, #7
 800bff4:	440b      	add	r3, r1
 800bff6:	3384      	adds	r3, #132	; 0x84
 800bff8:	4619      	mov	r1, r3
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	461a      	mov	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	01db      	lsls	r3, r3, #7
 800c00a:	4413      	add	r3, r2
 800c00c:	3384      	adds	r3, #132	; 0x84
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	6812      	ldr	r2, [r2, #0]
 800c014:	4611      	mov	r1, r2
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	01d2      	lsls	r2, r2, #7
 800c01a:	440a      	add	r2, r1
 800c01c:	3284      	adds	r2, #132	; 0x84
 800c01e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c022:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	461a      	mov	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	01db      	lsls	r3, r3, #7
 800c02e:	4413      	add	r3, r2
 800c030:	3384      	adds	r3, #132	; 0x84
 800c032:	461a      	mov	r2, r3
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	695b      	ldr	r3, [r3, #20]
 800c038:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	461a      	mov	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	01db      	lsls	r3, r3, #7
 800c044:	4413      	add	r3, r2
 800c046:	3384      	adds	r3, #132	; 0x84
 800c048:	69da      	ldr	r2, [r3, #28]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4619      	mov	r1, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	01db      	lsls	r3, r3, #7
 800c054:	440b      	add	r3, r1
 800c056:	3384      	adds	r3, #132	; 0x84
 800c058:	4619      	mov	r1, r3
 800c05a:	4b58      	ldr	r3, [pc, #352]	; (800c1bc <LTDC_SetConfig+0x32c>)
 800c05c:	4013      	ands	r3, r2
 800c05e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	69da      	ldr	r2, [r3, #28]
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	6a1b      	ldr	r3, [r3, #32]
 800c068:	68f9      	ldr	r1, [r7, #12]
 800c06a:	6809      	ldr	r1, [r1, #0]
 800c06c:	4608      	mov	r0, r1
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	01c9      	lsls	r1, r1, #7
 800c072:	4401      	add	r1, r0
 800c074:	3184      	adds	r1, #132	; 0x84
 800c076:	4313      	orrs	r3, r2
 800c078:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	461a      	mov	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	01db      	lsls	r3, r3, #7
 800c084:	4413      	add	r3, r2
 800c086:	3384      	adds	r3, #132	; 0x84
 800c088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	461a      	mov	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	01db      	lsls	r3, r3, #7
 800c094:	4413      	add	r3, r2
 800c096:	3384      	adds	r3, #132	; 0x84
 800c098:	461a      	mov	r2, r3
 800c09a:	2300      	movs	r3, #0
 800c09c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	01db      	lsls	r3, r3, #7
 800c0a8:	4413      	add	r3, r2
 800c0aa:	3384      	adds	r3, #132	; 0x84
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d102      	bne.n	800c0c2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800c0bc:	2304      	movs	r3, #4
 800c0be:	61fb      	str	r3, [r7, #28]
 800c0c0:	e01b      	b.n	800c0fa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d102      	bne.n	800c0d0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	61fb      	str	r3, [r7, #28]
 800c0ce:	e014      	b.n	800c0fa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	2b04      	cmp	r3, #4
 800c0d6:	d00b      	beq.n	800c0f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d007      	beq.n	800c0f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c0e4:	2b03      	cmp	r3, #3
 800c0e6:	d003      	beq.n	800c0f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c0ec:	2b07      	cmp	r3, #7
 800c0ee:	d102      	bne.n	800c0f6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	61fb      	str	r3, [r7, #28]
 800c0f4:	e001      	b.n	800c0fa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	01db      	lsls	r3, r3, #7
 800c104:	4413      	add	r3, r2
 800c106:	3384      	adds	r3, #132	; 0x84
 800c108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	6812      	ldr	r2, [r2, #0]
 800c10e:	4611      	mov	r1, r2
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	01d2      	lsls	r2, r2, #7
 800c114:	440a      	add	r2, r1
 800c116:	3284      	adds	r2, #132	; 0x84
 800c118:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c11c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	fb02 f303 	mul.w	r3, r2, r3
 800c128:	041a      	lsls	r2, r3, #16
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	6859      	ldr	r1, [r3, #4]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	1acb      	subs	r3, r1, r3
 800c134:	69f9      	ldr	r1, [r7, #28]
 800c136:	fb01 f303 	mul.w	r3, r1, r3
 800c13a:	3303      	adds	r3, #3
 800c13c:	68f9      	ldr	r1, [r7, #12]
 800c13e:	6809      	ldr	r1, [r1, #0]
 800c140:	4608      	mov	r0, r1
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	01c9      	lsls	r1, r1, #7
 800c146:	4401      	add	r1, r0
 800c148:	3184      	adds	r1, #132	; 0x84
 800c14a:	4313      	orrs	r3, r2
 800c14c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	461a      	mov	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	01db      	lsls	r3, r3, #7
 800c158:	4413      	add	r3, r2
 800c15a:	3384      	adds	r3, #132	; 0x84
 800c15c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4619      	mov	r1, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	01db      	lsls	r3, r3, #7
 800c168:	440b      	add	r3, r1
 800c16a:	3384      	adds	r3, #132	; 0x84
 800c16c:	4619      	mov	r1, r3
 800c16e:	4b14      	ldr	r3, [pc, #80]	; (800c1c0 <LTDC_SetConfig+0x330>)
 800c170:	4013      	ands	r3, r2
 800c172:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	461a      	mov	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	01db      	lsls	r3, r3, #7
 800c17e:	4413      	add	r3, r2
 800c180:	3384      	adds	r3, #132	; 0x84
 800c182:	461a      	mov	r2, r3
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	01db      	lsls	r3, r3, #7
 800c194:	4413      	add	r3, r2
 800c196:	3384      	adds	r3, #132	; 0x84
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	6812      	ldr	r2, [r2, #0]
 800c19e:	4611      	mov	r1, r2
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	01d2      	lsls	r2, r2, #7
 800c1a4:	440a      	add	r2, r1
 800c1a6:	3284      	adds	r2, #132	; 0x84
 800c1a8:	f043 0301 	orr.w	r3, r3, #1
 800c1ac:	6013      	str	r3, [r2, #0]
}
 800c1ae:	bf00      	nop
 800c1b0:	3724      	adds	r7, #36	; 0x24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	fffff8f8 	.word	0xfffff8f8
 800c1c0:	fffff800 	.word	0xfffff800

0800c1c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c1c8:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a04      	ldr	r2, [pc, #16]	; (800c1e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c1ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1d2:	6013      	str	r3, [r2, #0]
}
 800c1d4:	bf00      	nop
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	40007000 	.word	0x40007000

0800c1e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c1ee:	4b23      	ldr	r3, [pc, #140]	; (800c27c <HAL_PWREx_EnableOverDrive+0x98>)
 800c1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f2:	4a22      	ldr	r2, [pc, #136]	; (800c27c <HAL_PWREx_EnableOverDrive+0x98>)
 800c1f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1f8:	6413      	str	r3, [r2, #64]	; 0x40
 800c1fa:	4b20      	ldr	r3, [pc, #128]	; (800c27c <HAL_PWREx_EnableOverDrive+0x98>)
 800c1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c202:	603b      	str	r3, [r7, #0]
 800c204:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c206:	4b1e      	ldr	r3, [pc, #120]	; (800c280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a1d      	ldr	r2, [pc, #116]	; (800c280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c20c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c210:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c212:	f7fb fa6b 	bl	80076ec <HAL_GetTick>
 800c216:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c218:	e009      	b.n	800c22e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c21a:	f7fb fa67 	bl	80076ec <HAL_GetTick>
 800c21e:	4602      	mov	r2, r0
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c228:	d901      	bls.n	800c22e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c22a:	2303      	movs	r3, #3
 800c22c:	e022      	b.n	800c274 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c22e:	4b14      	ldr	r3, [pc, #80]	; (800c280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c23a:	d1ee      	bne.n	800c21a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c23c:	4b10      	ldr	r3, [pc, #64]	; (800c280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a0f      	ldr	r2, [pc, #60]	; (800c280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c246:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c248:	f7fb fa50 	bl	80076ec <HAL_GetTick>
 800c24c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c24e:	e009      	b.n	800c264 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c250:	f7fb fa4c 	bl	80076ec <HAL_GetTick>
 800c254:	4602      	mov	r2, r0
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c25e:	d901      	bls.n	800c264 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c260:	2303      	movs	r3, #3
 800c262:	e007      	b.n	800c274 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c264:	4b06      	ldr	r3, [pc, #24]	; (800c280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c26c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c270:	d1ee      	bne.n	800c250 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	40023800 	.word	0x40023800
 800c280:	40007000 	.word	0x40007000

0800c284 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af02      	add	r7, sp, #8
 800c28a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c28c:	f7fb fa2e 	bl	80076ec <HAL_GetTick>
 800c290:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e067      	b.n	800c36c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10b      	bne.n	800c2c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7f6 fe7f 	bl	8002fb4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c2b6:	f241 3188 	movw	r1, #5000	; 0x1388
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f85e 	bl	800c37c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	021a      	lsls	r2, r3, #8
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	430a      	orrs	r2, r1
 800c2d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	2120      	movs	r1, #32
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 f856 	bl	800c398 <QSPI_WaitFlagStateUntilTimeout>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c2f0:	7afb      	ldrb	r3, [r7, #11]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d135      	bne.n	800c362 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	4b1d      	ldr	r3, [pc, #116]	; (800c374 <HAL_QSPI_Init+0xf0>)
 800c2fe:	4013      	ands	r3, r2
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	6852      	ldr	r2, [r2, #4]
 800c304:	0611      	lsls	r1, r2, #24
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	68d2      	ldr	r2, [r2, #12]
 800c30a:	4311      	orrs	r1, r2
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	69d2      	ldr	r2, [r2, #28]
 800c310:	4311      	orrs	r1, r2
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	6a12      	ldr	r2, [r2, #32]
 800c316:	4311      	orrs	r1, r2
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	6812      	ldr	r2, [r2, #0]
 800c31c:	430b      	orrs	r3, r1
 800c31e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	685a      	ldr	r2, [r3, #4]
 800c326:	4b14      	ldr	r3, [pc, #80]	; (800c378 <HAL_QSPI_Init+0xf4>)
 800c328:	4013      	ands	r3, r2
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	6912      	ldr	r2, [r2, #16]
 800c32e:	0411      	lsls	r1, r2, #16
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	6952      	ldr	r2, [r2, #20]
 800c334:	4311      	orrs	r1, r2
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	6992      	ldr	r2, [r2, #24]
 800c33a:	4311      	orrs	r1, r2
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	6812      	ldr	r2, [r2, #0]
 800c340:	430b      	orrs	r3, r1
 800c342:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f042 0201 	orr.w	r2, r2, #1
 800c352:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c36a:	7afb      	ldrb	r3, [r7, #11]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	00ffff2f 	.word	0x00ffff2f
 800c378:	ffe0f8fe 	.word	0xffe0f8fe

0800c37c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c38c:	bf00      	nop
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	603b      	str	r3, [r7, #0]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c3a8:	e01a      	b.n	800c3e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b0:	d016      	beq.n	800c3e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3b2:	f7fb f99b 	bl	80076ec <HAL_GetTick>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d302      	bcc.n	800c3c8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10b      	bne.n	800c3e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2204      	movs	r2, #4
 800c3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d4:	f043 0201 	orr.w	r2, r3, #1
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e00e      	b.n	800c3fe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	689a      	ldr	r2, [r3, #8]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bf14      	ite	ne
 800c3ee:	2301      	movne	r3, #1
 800c3f0:	2300      	moveq	r3, #0
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	79fb      	ldrb	r3, [r7, #7]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d1d6      	bne.n	800c3aa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
	...

0800c408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c410:	2300      	movs	r3, #0
 800c412:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e291      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 8087 	beq.w	800c53a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c42c:	4b96      	ldr	r3, [pc, #600]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	f003 030c 	and.w	r3, r3, #12
 800c434:	2b04      	cmp	r3, #4
 800c436:	d00c      	beq.n	800c452 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c438:	4b93      	ldr	r3, [pc, #588]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	f003 030c 	and.w	r3, r3, #12
 800c440:	2b08      	cmp	r3, #8
 800c442:	d112      	bne.n	800c46a <HAL_RCC_OscConfig+0x62>
 800c444:	4b90      	ldr	r3, [pc, #576]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c44c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c450:	d10b      	bne.n	800c46a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c452:	4b8d      	ldr	r3, [pc, #564]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d06c      	beq.n	800c538 <HAL_RCC_OscConfig+0x130>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d168      	bne.n	800c538 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e26b      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c472:	d106      	bne.n	800c482 <HAL_RCC_OscConfig+0x7a>
 800c474:	4b84      	ldr	r3, [pc, #528]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a83      	ldr	r2, [pc, #524]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c47a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	e02e      	b.n	800c4e0 <HAL_RCC_OscConfig+0xd8>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10c      	bne.n	800c4a4 <HAL_RCC_OscConfig+0x9c>
 800c48a:	4b7f      	ldr	r3, [pc, #508]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a7e      	ldr	r2, [pc, #504]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	4b7c      	ldr	r3, [pc, #496]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a7b      	ldr	r2, [pc, #492]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c49c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	e01d      	b.n	800c4e0 <HAL_RCC_OscConfig+0xd8>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4ac:	d10c      	bne.n	800c4c8 <HAL_RCC_OscConfig+0xc0>
 800c4ae:	4b76      	ldr	r3, [pc, #472]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a75      	ldr	r2, [pc, #468]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4b8:	6013      	str	r3, [r2, #0]
 800c4ba:	4b73      	ldr	r3, [pc, #460]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a72      	ldr	r2, [pc, #456]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	e00b      	b.n	800c4e0 <HAL_RCC_OscConfig+0xd8>
 800c4c8:	4b6f      	ldr	r3, [pc, #444]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a6e      	ldr	r2, [pc, #440]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4d2:	6013      	str	r3, [r2, #0]
 800c4d4:	4b6c      	ldr	r3, [pc, #432]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a6b      	ldr	r2, [pc, #428]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d013      	beq.n	800c510 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4e8:	f7fb f900 	bl	80076ec <HAL_GetTick>
 800c4ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4ee:	e008      	b.n	800c502 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4f0:	f7fb f8fc 	bl	80076ec <HAL_GetTick>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	2b64      	cmp	r3, #100	; 0x64
 800c4fc:	d901      	bls.n	800c502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e21f      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c502:	4b61      	ldr	r3, [pc, #388]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d0f0      	beq.n	800c4f0 <HAL_RCC_OscConfig+0xe8>
 800c50e:	e014      	b.n	800c53a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c510:	f7fb f8ec 	bl	80076ec <HAL_GetTick>
 800c514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c516:	e008      	b.n	800c52a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c518:	f7fb f8e8 	bl	80076ec <HAL_GetTick>
 800c51c:	4602      	mov	r2, r0
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	2b64      	cmp	r3, #100	; 0x64
 800c524:	d901      	bls.n	800c52a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c526:	2303      	movs	r3, #3
 800c528:	e20b      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c52a:	4b57      	ldr	r3, [pc, #348]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1f0      	bne.n	800c518 <HAL_RCC_OscConfig+0x110>
 800c536:	e000      	b.n	800c53a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 0302 	and.w	r3, r3, #2
 800c542:	2b00      	cmp	r3, #0
 800c544:	d069      	beq.n	800c61a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c546:	4b50      	ldr	r3, [pc, #320]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f003 030c 	and.w	r3, r3, #12
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00b      	beq.n	800c56a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c552:	4b4d      	ldr	r3, [pc, #308]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f003 030c 	and.w	r3, r3, #12
 800c55a:	2b08      	cmp	r3, #8
 800c55c:	d11c      	bne.n	800c598 <HAL_RCC_OscConfig+0x190>
 800c55e:	4b4a      	ldr	r3, [pc, #296]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c566:	2b00      	cmp	r3, #0
 800c568:	d116      	bne.n	800c598 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c56a:	4b47      	ldr	r3, [pc, #284]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 0302 	and.w	r3, r3, #2
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <HAL_RCC_OscConfig+0x17a>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d001      	beq.n	800c582 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e1df      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c582:	4b41      	ldr	r3, [pc, #260]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	00db      	lsls	r3, r3, #3
 800c590:	493d      	ldr	r1, [pc, #244]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c592:	4313      	orrs	r3, r2
 800c594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c596:	e040      	b.n	800c61a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d023      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5a0:	4b39      	ldr	r3, [pc, #228]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a38      	ldr	r2, [pc, #224]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5a6:	f043 0301 	orr.w	r3, r3, #1
 800c5aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5ac:	f7fb f89e 	bl	80076ec <HAL_GetTick>
 800c5b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5b2:	e008      	b.n	800c5c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5b4:	f7fb f89a 	bl	80076ec <HAL_GetTick>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d901      	bls.n	800c5c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c5c2:	2303      	movs	r3, #3
 800c5c4:	e1bd      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5c6:	4b30      	ldr	r3, [pc, #192]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f003 0302 	and.w	r3, r3, #2
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0f0      	beq.n	800c5b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5d2:	4b2d      	ldr	r3, [pc, #180]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	4929      	ldr	r1, [pc, #164]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	600b      	str	r3, [r1, #0]
 800c5e6:	e018      	b.n	800c61a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c5e8:	4b27      	ldr	r3, [pc, #156]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a26      	ldr	r2, [pc, #152]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5ee:	f023 0301 	bic.w	r3, r3, #1
 800c5f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5f4:	f7fb f87a 	bl	80076ec <HAL_GetTick>
 800c5f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c5fa:	e008      	b.n	800c60e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5fc:	f7fb f876 	bl	80076ec <HAL_GetTick>
 800c600:	4602      	mov	r2, r0
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	2b02      	cmp	r3, #2
 800c608:	d901      	bls.n	800c60e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c60a:	2303      	movs	r3, #3
 800c60c:	e199      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c60e:	4b1e      	ldr	r3, [pc, #120]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 0302 	and.w	r3, r3, #2
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1f0      	bne.n	800c5fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 0308 	and.w	r3, r3, #8
 800c622:	2b00      	cmp	r3, #0
 800c624:	d038      	beq.n	800c698 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d019      	beq.n	800c662 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c62e:	4b16      	ldr	r3, [pc, #88]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c632:	4a15      	ldr	r2, [pc, #84]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c634:	f043 0301 	orr.w	r3, r3, #1
 800c638:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c63a:	f7fb f857 	bl	80076ec <HAL_GetTick>
 800c63e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c640:	e008      	b.n	800c654 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c642:	f7fb f853 	bl	80076ec <HAL_GetTick>
 800c646:	4602      	mov	r2, r0
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d901      	bls.n	800c654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e176      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c654:	4b0c      	ldr	r3, [pc, #48]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c658:	f003 0302 	and.w	r3, r3, #2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d0f0      	beq.n	800c642 <HAL_RCC_OscConfig+0x23a>
 800c660:	e01a      	b.n	800c698 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c662:	4b09      	ldr	r3, [pc, #36]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c666:	4a08      	ldr	r2, [pc, #32]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c668:	f023 0301 	bic.w	r3, r3, #1
 800c66c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c66e:	f7fb f83d 	bl	80076ec <HAL_GetTick>
 800c672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c674:	e00a      	b.n	800c68c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c676:	f7fb f839 	bl	80076ec <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	2b02      	cmp	r3, #2
 800c682:	d903      	bls.n	800c68c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e15c      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
 800c688:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c68c:	4b91      	ldr	r3, [pc, #580]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c68e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c690:	f003 0302 	and.w	r3, r3, #2
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1ee      	bne.n	800c676 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 0304 	and.w	r3, r3, #4
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 80a4 	beq.w	800c7ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c6a6:	4b8b      	ldr	r3, [pc, #556]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10d      	bne.n	800c6ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6b2:	4b88      	ldr	r3, [pc, #544]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b6:	4a87      	ldr	r2, [pc, #540]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c6b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6bc:	6413      	str	r3, [r2, #64]	; 0x40
 800c6be:	4b85      	ldr	r3, [pc, #532]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6c6:	60bb      	str	r3, [r7, #8]
 800c6c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6ce:	4b82      	ldr	r3, [pc, #520]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d118      	bne.n	800c70c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c6da:	4b7f      	ldr	r3, [pc, #508]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a7e      	ldr	r2, [pc, #504]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c6e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c6e6:	f7fb f801 	bl	80076ec <HAL_GetTick>
 800c6ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6ec:	e008      	b.n	800c700 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6ee:	f7fa fffd 	bl	80076ec <HAL_GetTick>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	2b64      	cmp	r3, #100	; 0x64
 800c6fa:	d901      	bls.n	800c700 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	e120      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c700:	4b75      	ldr	r3, [pc, #468]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d0f0      	beq.n	800c6ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d106      	bne.n	800c722 <HAL_RCC_OscConfig+0x31a>
 800c714:	4b6f      	ldr	r3, [pc, #444]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c718:	4a6e      	ldr	r2, [pc, #440]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c71a:	f043 0301 	orr.w	r3, r3, #1
 800c71e:	6713      	str	r3, [r2, #112]	; 0x70
 800c720:	e02d      	b.n	800c77e <HAL_RCC_OscConfig+0x376>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10c      	bne.n	800c744 <HAL_RCC_OscConfig+0x33c>
 800c72a:	4b6a      	ldr	r3, [pc, #424]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c72e:	4a69      	ldr	r2, [pc, #420]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c730:	f023 0301 	bic.w	r3, r3, #1
 800c734:	6713      	str	r3, [r2, #112]	; 0x70
 800c736:	4b67      	ldr	r3, [pc, #412]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73a:	4a66      	ldr	r2, [pc, #408]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c73c:	f023 0304 	bic.w	r3, r3, #4
 800c740:	6713      	str	r3, [r2, #112]	; 0x70
 800c742:	e01c      	b.n	800c77e <HAL_RCC_OscConfig+0x376>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	2b05      	cmp	r3, #5
 800c74a:	d10c      	bne.n	800c766 <HAL_RCC_OscConfig+0x35e>
 800c74c:	4b61      	ldr	r3, [pc, #388]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c74e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c750:	4a60      	ldr	r2, [pc, #384]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c752:	f043 0304 	orr.w	r3, r3, #4
 800c756:	6713      	str	r3, [r2, #112]	; 0x70
 800c758:	4b5e      	ldr	r3, [pc, #376]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c75c:	4a5d      	ldr	r2, [pc, #372]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c75e:	f043 0301 	orr.w	r3, r3, #1
 800c762:	6713      	str	r3, [r2, #112]	; 0x70
 800c764:	e00b      	b.n	800c77e <HAL_RCC_OscConfig+0x376>
 800c766:	4b5b      	ldr	r3, [pc, #364]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c76a:	4a5a      	ldr	r2, [pc, #360]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c76c:	f023 0301 	bic.w	r3, r3, #1
 800c770:	6713      	str	r3, [r2, #112]	; 0x70
 800c772:	4b58      	ldr	r3, [pc, #352]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c776:	4a57      	ldr	r2, [pc, #348]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c778:	f023 0304 	bic.w	r3, r3, #4
 800c77c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d015      	beq.n	800c7b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c786:	f7fa ffb1 	bl	80076ec <HAL_GetTick>
 800c78a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c78c:	e00a      	b.n	800c7a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c78e:	f7fa ffad 	bl	80076ec <HAL_GetTick>
 800c792:	4602      	mov	r2, r0
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	f241 3288 	movw	r2, #5000	; 0x1388
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d901      	bls.n	800c7a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e0ce      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7a4:	4b4b      	ldr	r3, [pc, #300]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c7a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7a8:	f003 0302 	and.w	r3, r3, #2
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d0ee      	beq.n	800c78e <HAL_RCC_OscConfig+0x386>
 800c7b0:	e014      	b.n	800c7dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7b2:	f7fa ff9b 	bl	80076ec <HAL_GetTick>
 800c7b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7b8:	e00a      	b.n	800c7d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7ba:	f7fa ff97 	bl	80076ec <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d901      	bls.n	800c7d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e0b8      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7d0:	4b40      	ldr	r3, [pc, #256]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d4:	f003 0302 	and.w	r3, r3, #2
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1ee      	bne.n	800c7ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c7dc:	7dfb      	ldrb	r3, [r7, #23]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d105      	bne.n	800c7ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7e2:	4b3c      	ldr	r3, [pc, #240]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	4a3b      	ldr	r2, [pc, #236]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c7e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 80a4 	beq.w	800c940 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c7f8:	4b36      	ldr	r3, [pc, #216]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	f003 030c 	and.w	r3, r3, #12
 800c800:	2b08      	cmp	r3, #8
 800c802:	d06b      	beq.n	800c8dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d149      	bne.n	800c8a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c80c:	4b31      	ldr	r3, [pc, #196]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a30      	ldr	r2, [pc, #192]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c818:	f7fa ff68 	bl	80076ec <HAL_GetTick>
 800c81c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c81e:	e008      	b.n	800c832 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c820:	f7fa ff64 	bl	80076ec <HAL_GetTick>
 800c824:	4602      	mov	r2, r0
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d901      	bls.n	800c832 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c82e:	2303      	movs	r3, #3
 800c830:	e087      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c832:	4b28      	ldr	r3, [pc, #160]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1f0      	bne.n	800c820 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	69da      	ldr	r2, [r3, #28]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	431a      	orrs	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84c:	019b      	lsls	r3, r3, #6
 800c84e:	431a      	orrs	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c854:	085b      	lsrs	r3, r3, #1
 800c856:	3b01      	subs	r3, #1
 800c858:	041b      	lsls	r3, r3, #16
 800c85a:	431a      	orrs	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	061b      	lsls	r3, r3, #24
 800c862:	4313      	orrs	r3, r2
 800c864:	4a1b      	ldr	r2, [pc, #108]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c866:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c86a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c86c:	4b19      	ldr	r3, [pc, #100]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a18      	ldr	r2, [pc, #96]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c878:	f7fa ff38 	bl	80076ec <HAL_GetTick>
 800c87c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c87e:	e008      	b.n	800c892 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c880:	f7fa ff34 	bl	80076ec <HAL_GetTick>
 800c884:	4602      	mov	r2, r0
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d901      	bls.n	800c892 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c88e:	2303      	movs	r3, #3
 800c890:	e057      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c892:	4b10      	ldr	r3, [pc, #64]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d0f0      	beq.n	800c880 <HAL_RCC_OscConfig+0x478>
 800c89e:	e04f      	b.n	800c940 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8a0:	4b0c      	ldr	r3, [pc, #48]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a0b      	ldr	r2, [pc, #44]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c8a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8ac:	f7fa ff1e 	bl	80076ec <HAL_GetTick>
 800c8b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8b2:	e008      	b.n	800c8c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8b4:	f7fa ff1a 	bl	80076ec <HAL_GetTick>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d901      	bls.n	800c8c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e03d      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8c6:	4b03      	ldr	r3, [pc, #12]	; (800c8d4 <HAL_RCC_OscConfig+0x4cc>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1f0      	bne.n	800c8b4 <HAL_RCC_OscConfig+0x4ac>
 800c8d2:	e035      	b.n	800c940 <HAL_RCC_OscConfig+0x538>
 800c8d4:	40023800 	.word	0x40023800
 800c8d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c8dc:	4b1b      	ldr	r3, [pc, #108]	; (800c94c <HAL_RCC_OscConfig+0x544>)
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d028      	beq.n	800c93c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d121      	bne.n	800c93c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c902:	429a      	cmp	r2, r3
 800c904:	d11a      	bne.n	800c93c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c90c:	4013      	ands	r3, r2
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c912:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c914:	4293      	cmp	r3, r2
 800c916:	d111      	bne.n	800c93c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c922:	085b      	lsrs	r3, r3, #1
 800c924:	3b01      	subs	r3, #1
 800c926:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c928:	429a      	cmp	r2, r3
 800c92a:	d107      	bne.n	800c93c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c936:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c938:	429a      	cmp	r2, r3
 800c93a:	d001      	beq.n	800c940 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e000      	b.n	800c942 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	40023800 	.word	0x40023800

0800c950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d101      	bne.n	800c968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	e0d0      	b.n	800cb0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c968:	4b6a      	ldr	r3, [pc, #424]	; (800cb14 <HAL_RCC_ClockConfig+0x1c4>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 030f 	and.w	r3, r3, #15
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	429a      	cmp	r2, r3
 800c974:	d910      	bls.n	800c998 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c976:	4b67      	ldr	r3, [pc, #412]	; (800cb14 <HAL_RCC_ClockConfig+0x1c4>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f023 020f 	bic.w	r2, r3, #15
 800c97e:	4965      	ldr	r1, [pc, #404]	; (800cb14 <HAL_RCC_ClockConfig+0x1c4>)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	4313      	orrs	r3, r2
 800c984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c986:	4b63      	ldr	r3, [pc, #396]	; (800cb14 <HAL_RCC_ClockConfig+0x1c4>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f003 030f 	and.w	r3, r3, #15
 800c98e:	683a      	ldr	r2, [r7, #0]
 800c990:	429a      	cmp	r2, r3
 800c992:	d001      	beq.n	800c998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e0b8      	b.n	800cb0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0302 	and.w	r3, r3, #2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d020      	beq.n	800c9e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0304 	and.w	r3, r3, #4
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c9b0:	4b59      	ldr	r3, [pc, #356]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	4a58      	ldr	r2, [pc, #352]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800c9b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c9ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 0308 	and.w	r3, r3, #8
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d005      	beq.n	800c9d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c9c8:	4b53      	ldr	r3, [pc, #332]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	4a52      	ldr	r2, [pc, #328]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800c9ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c9d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c9d4:	4b50      	ldr	r3, [pc, #320]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	494d      	ldr	r1, [pc, #308]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d040      	beq.n	800ca74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d107      	bne.n	800ca0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9fa:	4b47      	ldr	r3, [pc, #284]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d115      	bne.n	800ca32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e07f      	b.n	800cb0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d107      	bne.n	800ca22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca12:	4b41      	ldr	r3, [pc, #260]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d109      	bne.n	800ca32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e073      	b.n	800cb0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca22:	4b3d      	ldr	r3, [pc, #244]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f003 0302 	and.w	r3, r3, #2
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e06b      	b.n	800cb0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ca32:	4b39      	ldr	r3, [pc, #228]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	f023 0203 	bic.w	r2, r3, #3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	4936      	ldr	r1, [pc, #216]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800ca40:	4313      	orrs	r3, r2
 800ca42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca44:	f7fa fe52 	bl	80076ec <HAL_GetTick>
 800ca48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca4a:	e00a      	b.n	800ca62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca4c:	f7fa fe4e 	bl	80076ec <HAL_GetTick>
 800ca50:	4602      	mov	r2, r0
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d901      	bls.n	800ca62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	e053      	b.n	800cb0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca62:	4b2d      	ldr	r3, [pc, #180]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	f003 020c 	and.w	r2, r3, #12
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d1eb      	bne.n	800ca4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ca74:	4b27      	ldr	r3, [pc, #156]	; (800cb14 <HAL_RCC_ClockConfig+0x1c4>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 030f 	and.w	r3, r3, #15
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d210      	bcs.n	800caa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca82:	4b24      	ldr	r3, [pc, #144]	; (800cb14 <HAL_RCC_ClockConfig+0x1c4>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f023 020f 	bic.w	r2, r3, #15
 800ca8a:	4922      	ldr	r1, [pc, #136]	; (800cb14 <HAL_RCC_ClockConfig+0x1c4>)
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca92:	4b20      	ldr	r3, [pc, #128]	; (800cb14 <HAL_RCC_ClockConfig+0x1c4>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 030f 	and.w	r3, r3, #15
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d001      	beq.n	800caa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	e032      	b.n	800cb0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 0304 	and.w	r3, r3, #4
 800caac:	2b00      	cmp	r3, #0
 800caae:	d008      	beq.n	800cac2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cab0:	4b19      	ldr	r3, [pc, #100]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	4916      	ldr	r1, [pc, #88]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800cabe:	4313      	orrs	r3, r2
 800cac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 0308 	and.w	r3, r3, #8
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d009      	beq.n	800cae2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cace:	4b12      	ldr	r3, [pc, #72]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	490e      	ldr	r1, [pc, #56]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800cade:	4313      	orrs	r3, r2
 800cae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cae2:	f000 f821 	bl	800cb28 <HAL_RCC_GetSysClockFreq>
 800cae6:	4601      	mov	r1, r0
 800cae8:	4b0b      	ldr	r3, [pc, #44]	; (800cb18 <HAL_RCC_ClockConfig+0x1c8>)
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	091b      	lsrs	r3, r3, #4
 800caee:	f003 030f 	and.w	r3, r3, #15
 800caf2:	4a0a      	ldr	r2, [pc, #40]	; (800cb1c <HAL_RCC_ClockConfig+0x1cc>)
 800caf4:	5cd3      	ldrb	r3, [r2, r3]
 800caf6:	fa21 f303 	lsr.w	r3, r1, r3
 800cafa:	4a09      	ldr	r2, [pc, #36]	; (800cb20 <HAL_RCC_ClockConfig+0x1d0>)
 800cafc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cafe:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <HAL_RCC_ClockConfig+0x1d4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7f6 fe7c 	bl	8003800 <HAL_InitTick>

  return HAL_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	40023c00 	.word	0x40023c00
 800cb18:	40023800 	.word	0x40023800
 800cb1c:	080185d4 	.word	0x080185d4
 800cb20:	20000000 	.word	0x20000000
 800cb24:	2000006c 	.word	0x2000006c

0800cb28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	607b      	str	r3, [r7, #4]
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	2300      	movs	r3, #0
 800cb38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cb3e:	4b50      	ldr	r3, [pc, #320]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	f003 030c 	and.w	r3, r3, #12
 800cb46:	2b04      	cmp	r3, #4
 800cb48:	d007      	beq.n	800cb5a <HAL_RCC_GetSysClockFreq+0x32>
 800cb4a:	2b08      	cmp	r3, #8
 800cb4c:	d008      	beq.n	800cb60 <HAL_RCC_GetSysClockFreq+0x38>
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f040 808d 	bne.w	800cc6e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cb54:	4b4b      	ldr	r3, [pc, #300]	; (800cc84 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cb56:	60bb      	str	r3, [r7, #8]
      break;
 800cb58:	e08c      	b.n	800cc74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cb5a:	4b4b      	ldr	r3, [pc, #300]	; (800cc88 <HAL_RCC_GetSysClockFreq+0x160>)
 800cb5c:	60bb      	str	r3, [r7, #8]
      break;
 800cb5e:	e089      	b.n	800cc74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cb60:	4b47      	ldr	r3, [pc, #284]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb68:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cb6a:	4b45      	ldr	r3, [pc, #276]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d023      	beq.n	800cbbe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb76:	4b42      	ldr	r3, [pc, #264]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	099b      	lsrs	r3, r3, #6
 800cb7c:	f04f 0400 	mov.w	r4, #0
 800cb80:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cb84:	f04f 0200 	mov.w	r2, #0
 800cb88:	ea03 0501 	and.w	r5, r3, r1
 800cb8c:	ea04 0602 	and.w	r6, r4, r2
 800cb90:	4a3d      	ldr	r2, [pc, #244]	; (800cc88 <HAL_RCC_GetSysClockFreq+0x160>)
 800cb92:	fb02 f106 	mul.w	r1, r2, r6
 800cb96:	2200      	movs	r2, #0
 800cb98:	fb02 f205 	mul.w	r2, r2, r5
 800cb9c:	440a      	add	r2, r1
 800cb9e:	493a      	ldr	r1, [pc, #232]	; (800cc88 <HAL_RCC_GetSysClockFreq+0x160>)
 800cba0:	fba5 0101 	umull	r0, r1, r5, r1
 800cba4:	1853      	adds	r3, r2, r1
 800cba6:	4619      	mov	r1, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f04f 0400 	mov.w	r4, #0
 800cbae:	461a      	mov	r2, r3
 800cbb0:	4623      	mov	r3, r4
 800cbb2:	f7f3 fd89 	bl	80006c8 <__aeabi_uldivmod>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	460c      	mov	r4, r1
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	e049      	b.n	800cc52 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cbbe:	4b30      	ldr	r3, [pc, #192]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x158>)
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	099b      	lsrs	r3, r3, #6
 800cbc4:	f04f 0400 	mov.w	r4, #0
 800cbc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cbcc:	f04f 0200 	mov.w	r2, #0
 800cbd0:	ea03 0501 	and.w	r5, r3, r1
 800cbd4:	ea04 0602 	and.w	r6, r4, r2
 800cbd8:	4629      	mov	r1, r5
 800cbda:	4632      	mov	r2, r6
 800cbdc:	f04f 0300 	mov.w	r3, #0
 800cbe0:	f04f 0400 	mov.w	r4, #0
 800cbe4:	0154      	lsls	r4, r2, #5
 800cbe6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cbea:	014b      	lsls	r3, r1, #5
 800cbec:	4619      	mov	r1, r3
 800cbee:	4622      	mov	r2, r4
 800cbf0:	1b49      	subs	r1, r1, r5
 800cbf2:	eb62 0206 	sbc.w	r2, r2, r6
 800cbf6:	f04f 0300 	mov.w	r3, #0
 800cbfa:	f04f 0400 	mov.w	r4, #0
 800cbfe:	0194      	lsls	r4, r2, #6
 800cc00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cc04:	018b      	lsls	r3, r1, #6
 800cc06:	1a5b      	subs	r3, r3, r1
 800cc08:	eb64 0402 	sbc.w	r4, r4, r2
 800cc0c:	f04f 0100 	mov.w	r1, #0
 800cc10:	f04f 0200 	mov.w	r2, #0
 800cc14:	00e2      	lsls	r2, r4, #3
 800cc16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cc1a:	00d9      	lsls	r1, r3, #3
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4614      	mov	r4, r2
 800cc20:	195b      	adds	r3, r3, r5
 800cc22:	eb44 0406 	adc.w	r4, r4, r6
 800cc26:	f04f 0100 	mov.w	r1, #0
 800cc2a:	f04f 0200 	mov.w	r2, #0
 800cc2e:	02a2      	lsls	r2, r4, #10
 800cc30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cc34:	0299      	lsls	r1, r3, #10
 800cc36:	460b      	mov	r3, r1
 800cc38:	4614      	mov	r4, r2
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f04f 0400 	mov.w	r4, #0
 800cc44:	461a      	mov	r2, r3
 800cc46:	4623      	mov	r3, r4
 800cc48:	f7f3 fd3e 	bl	80006c8 <__aeabi_uldivmod>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	460c      	mov	r4, r1
 800cc50:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cc52:	4b0b      	ldr	r3, [pc, #44]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x158>)
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	0c1b      	lsrs	r3, r3, #16
 800cc58:	f003 0303 	and.w	r3, r3, #3
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc6a:	60bb      	str	r3, [r7, #8]
      break;
 800cc6c:	e002      	b.n	800cc74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cc6e:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cc70:	60bb      	str	r3, [r7, #8]
      break;
 800cc72:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cc74:	68bb      	ldr	r3, [r7, #8]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	40023800 	.word	0x40023800
 800cc84:	00f42400 	.word	0x00f42400
 800cc88:	017d7840 	.word	0x017d7840

0800cc8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc90:	4b03      	ldr	r3, [pc, #12]	; (800cca0 <HAL_RCC_GetHCLKFreq+0x14>)
 800cc92:	681b      	ldr	r3, [r3, #0]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	20000000 	.word	0x20000000

0800cca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cca8:	f7ff fff0 	bl	800cc8c <HAL_RCC_GetHCLKFreq>
 800ccac:	4601      	mov	r1, r0
 800ccae:	4b05      	ldr	r3, [pc, #20]	; (800ccc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	0a9b      	lsrs	r3, r3, #10
 800ccb4:	f003 0307 	and.w	r3, r3, #7
 800ccb8:	4a03      	ldr	r2, [pc, #12]	; (800ccc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccba:	5cd3      	ldrb	r3, [r2, r3]
 800ccbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	40023800 	.word	0x40023800
 800ccc8:	080185e4 	.word	0x080185e4

0800cccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ccd0:	f7ff ffdc 	bl	800cc8c <HAL_RCC_GetHCLKFreq>
 800ccd4:	4601      	mov	r1, r0
 800ccd6:	4b05      	ldr	r3, [pc, #20]	; (800ccec <HAL_RCC_GetPCLK2Freq+0x20>)
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	0b5b      	lsrs	r3, r3, #13
 800ccdc:	f003 0307 	and.w	r3, r3, #7
 800cce0:	4a03      	ldr	r2, [pc, #12]	; (800ccf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cce2:	5cd3      	ldrb	r3, [r2, r3]
 800cce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	40023800 	.word	0x40023800
 800ccf0:	080185e4 	.word	0x080185e4

0800ccf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	220f      	movs	r2, #15
 800cd02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cd04:	4b12      	ldr	r3, [pc, #72]	; (800cd50 <HAL_RCC_GetClockConfig+0x5c>)
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	f003 0203 	and.w	r2, r3, #3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cd10:	4b0f      	ldr	r3, [pc, #60]	; (800cd50 <HAL_RCC_GetClockConfig+0x5c>)
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cd1c:	4b0c      	ldr	r3, [pc, #48]	; (800cd50 <HAL_RCC_GetClockConfig+0x5c>)
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cd28:	4b09      	ldr	r3, [pc, #36]	; (800cd50 <HAL_RCC_GetClockConfig+0x5c>)
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	08db      	lsrs	r3, r3, #3
 800cd2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd36:	4b07      	ldr	r3, [pc, #28]	; (800cd54 <HAL_RCC_GetClockConfig+0x60>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 020f 	and.w	r2, r3, #15
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	601a      	str	r2, [r3, #0]
}
 800cd42:	bf00      	nop
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	40023800 	.word	0x40023800
 800cd54:	40023c00 	.word	0x40023c00

0800cd58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b088      	sub	sp, #32
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cd70:	2300      	movs	r3, #0
 800cd72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d012      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cd80:	4b69      	ldr	r3, [pc, #420]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	4a68      	ldr	r2, [pc, #416]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cd8a:	6093      	str	r3, [r2, #8]
 800cd8c:	4b66      	ldr	r3, [pc, #408]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd8e:	689a      	ldr	r2, [r3, #8]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd94:	4964      	ldr	r1, [pc, #400]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd96:	4313      	orrs	r3, r2
 800cd98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cda2:	2301      	movs	r3, #1
 800cda4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d017      	beq.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cdb2:	4b5d      	ldr	r3, [pc, #372]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc0:	4959      	ldr	r1, [pc, #356]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdd0:	d101      	bne.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d101      	bne.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cdde:	2301      	movs	r3, #1
 800cde0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d017      	beq.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cdee:	4b4e      	ldr	r3, [pc, #312]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfc:	494a      	ldr	r1, [pc, #296]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce0c:	d101      	bne.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d101      	bne.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d001      	beq.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 0320 	and.w	r3, r3, #32
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 808b 	beq.w	800cf52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ce3c:	4b3a      	ldr	r3, [pc, #232]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce40:	4a39      	ldr	r2, [pc, #228]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce46:	6413      	str	r3, [r2, #64]	; 0x40
 800ce48:	4b37      	ldr	r3, [pc, #220]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce50:	60bb      	str	r3, [r7, #8]
 800ce52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ce54:	4b35      	ldr	r3, [pc, #212]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a34      	ldr	r2, [pc, #208]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce60:	f7fa fc44 	bl	80076ec <HAL_GetTick>
 800ce64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce66:	e008      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce68:	f7fa fc40 	bl	80076ec <HAL_GetTick>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	2b64      	cmp	r3, #100	; 0x64
 800ce74:	d901      	bls.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ce76:	2303      	movs	r3, #3
 800ce78:	e355      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce7a:	4b2c      	ldr	r3, [pc, #176]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0f0      	beq.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ce86:	4b28      	ldr	r3, [pc, #160]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d035      	beq.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce9e:	693a      	ldr	r2, [r7, #16]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d02e      	beq.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cea4:	4b20      	ldr	r3, [pc, #128]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ceae:	4b1e      	ldr	r3, [pc, #120]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb2:	4a1d      	ldr	r2, [pc, #116]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ceb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ceba:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebe:	4a1a      	ldr	r2, [pc, #104]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cec4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cec6:	4a18      	ldr	r2, [pc, #96]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cecc:	4b16      	ldr	r3, [pc, #88]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced0:	f003 0301 	and.w	r3, r3, #1
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d114      	bne.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ced8:	f7fa fc08 	bl	80076ec <HAL_GetTick>
 800cedc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cede:	e00a      	b.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cee0:	f7fa fc04 	bl	80076ec <HAL_GetTick>
 800cee4:	4602      	mov	r2, r0
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d901      	bls.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cef2:	2303      	movs	r3, #3
 800cef4:	e317      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cef6:	4b0c      	ldr	r3, [pc, #48]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cefa:	f003 0302 	and.w	r3, r3, #2
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d0ee      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf0e:	d111      	bne.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cf10:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cf1c:	4b04      	ldr	r3, [pc, #16]	; (800cf30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cf1e:	400b      	ands	r3, r1
 800cf20:	4901      	ldr	r1, [pc, #4]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf22:	4313      	orrs	r3, r2
 800cf24:	608b      	str	r3, [r1, #8]
 800cf26:	e00b      	b.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cf28:	40023800 	.word	0x40023800
 800cf2c:	40007000 	.word	0x40007000
 800cf30:	0ffffcff 	.word	0x0ffffcff
 800cf34:	4bb0      	ldr	r3, [pc, #704]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	4aaf      	ldr	r2, [pc, #700]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cf3e:	6093      	str	r3, [r2, #8]
 800cf40:	4bad      	ldr	r3, [pc, #692]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf4c:	49aa      	ldr	r1, [pc, #680]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 0310 	and.w	r3, r3, #16
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d010      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cf5e:	4ba6      	ldr	r3, [pc, #664]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf64:	4aa4      	ldr	r2, [pc, #656]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cf6e:	4ba2      	ldr	r3, [pc, #648]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf78:	499f      	ldr	r1, [pc, #636]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00a      	beq.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf8c:	4b9a      	ldr	r3, [pc, #616]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf9a:	4997      	ldr	r1, [pc, #604]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00a      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cfae:	4b92      	ldr	r3, [pc, #584]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfbc:	498e      	ldr	r1, [pc, #568]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00a      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cfd0:	4b89      	ldr	r3, [pc, #548]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cfd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfde:	4986      	ldr	r1, [pc, #536]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00a      	beq.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cff2:	4b81      	ldr	r3, [pc, #516]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800cff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d000:	497d      	ldr	r1, [pc, #500]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d002:	4313      	orrs	r3, r2
 800d004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00a      	beq.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d014:	4b78      	ldr	r3, [pc, #480]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d01a:	f023 0203 	bic.w	r2, r3, #3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d022:	4975      	ldr	r1, [pc, #468]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d024:	4313      	orrs	r3, r2
 800d026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00a      	beq.n	800d04c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d036:	4b70      	ldr	r3, [pc, #448]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d03c:	f023 020c 	bic.w	r2, r3, #12
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d044:	496c      	ldr	r1, [pc, #432]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d046:	4313      	orrs	r3, r2
 800d048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00a      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d058:	4b67      	ldr	r3, [pc, #412]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d05e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d066:	4964      	ldr	r1, [pc, #400]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d068:	4313      	orrs	r3, r2
 800d06a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00a      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d07a:	4b5f      	ldr	r3, [pc, #380]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d080:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d088:	495b      	ldr	r1, [pc, #364]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d08a:	4313      	orrs	r3, r2
 800d08c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00a      	beq.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d09c:	4b56      	ldr	r3, [pc, #344]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0aa:	4953      	ldr	r1, [pc, #332]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00a      	beq.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d0be:	4b4e      	ldr	r3, [pc, #312]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0cc:	494a      	ldr	r1, [pc, #296]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00a      	beq.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d0e0:	4b45      	ldr	r3, [pc, #276]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0ee:	4942      	ldr	r1, [pc, #264]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00a      	beq.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d102:	4b3d      	ldr	r3, [pc, #244]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d110:	4939      	ldr	r1, [pc, #228]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d112:	4313      	orrs	r3, r2
 800d114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00a      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d124:	4b34      	ldr	r3, [pc, #208]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d12a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d132:	4931      	ldr	r1, [pc, #196]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d134:	4313      	orrs	r3, r2
 800d136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d011      	beq.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d146:	4b2c      	ldr	r3, [pc, #176]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d14c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d154:	4928      	ldr	r1, [pc, #160]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d156:	4313      	orrs	r3, r2
 800d158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d164:	d101      	bne.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d166:	2301      	movs	r3, #1
 800d168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 0308 	and.w	r3, r3, #8
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d176:	2301      	movs	r3, #1
 800d178:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00a      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d186:	4b1c      	ldr	r3, [pc, #112]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d18c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d194:	4918      	ldr	r1, [pc, #96]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d196:	4313      	orrs	r3, r2
 800d198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00b      	beq.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d1a8:	4b13      	ldr	r3, [pc, #76]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1b8:	490f      	ldr	r1, [pc, #60]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d005      	beq.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1ce:	f040 80d8 	bne.w	800d382 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d1d2:	4b09      	ldr	r3, [pc, #36]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a08      	ldr	r2, [pc, #32]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1de:	f7fa fa85 	bl	80076ec <HAL_GetTick>
 800d1e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1e4:	e00a      	b.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d1e6:	f7fa fa81 	bl	80076ec <HAL_GetTick>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	2b64      	cmp	r3, #100	; 0x64
 800d1f2:	d903      	bls.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	e196      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800d1f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1fc:	4b6c      	ldr	r3, [pc, #432]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1ee      	bne.n	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 0301 	and.w	r3, r3, #1
 800d210:	2b00      	cmp	r3, #0
 800d212:	d021      	beq.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d11d      	bne.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d21c:	4b64      	ldr	r3, [pc, #400]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d222:	0c1b      	lsrs	r3, r3, #16
 800d224:	f003 0303 	and.w	r3, r3, #3
 800d228:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d22a:	4b61      	ldr	r3, [pc, #388]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d230:	0e1b      	lsrs	r3, r3, #24
 800d232:	f003 030f 	and.w	r3, r3, #15
 800d236:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	019a      	lsls	r2, r3, #6
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	041b      	lsls	r3, r3, #16
 800d242:	431a      	orrs	r2, r3
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	061b      	lsls	r3, r3, #24
 800d248:	431a      	orrs	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	071b      	lsls	r3, r3, #28
 800d250:	4957      	ldr	r1, [pc, #348]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d252:	4313      	orrs	r3, r2
 800d254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d004      	beq.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x516>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d26c:	d00a      	beq.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d276:	2b00      	cmp	r3, #0
 800d278:	d02e      	beq.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d282:	d129      	bne.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d284:	4b4a      	ldr	r3, [pc, #296]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d28a:	0c1b      	lsrs	r3, r3, #16
 800d28c:	f003 0303 	and.w	r3, r3, #3
 800d290:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d292:	4b47      	ldr	r3, [pc, #284]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d298:	0f1b      	lsrs	r3, r3, #28
 800d29a:	f003 0307 	and.w	r3, r3, #7
 800d29e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	019a      	lsls	r2, r3, #6
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	041b      	lsls	r3, r3, #16
 800d2aa:	431a      	orrs	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	061b      	lsls	r3, r3, #24
 800d2b2:	431a      	orrs	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	071b      	lsls	r3, r3, #28
 800d2b8:	493d      	ldr	r1, [pc, #244]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d2c0:	4b3b      	ldr	r3, [pc, #236]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2c6:	f023 021f 	bic.w	r2, r3, #31
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	4937      	ldr	r1, [pc, #220]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d01d      	beq.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d2e4:	4b32      	ldr	r3, [pc, #200]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2ea:	0e1b      	lsrs	r3, r3, #24
 800d2ec:	f003 030f 	and.w	r3, r3, #15
 800d2f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d2f2:	4b2f      	ldr	r3, [pc, #188]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2f8:	0f1b      	lsrs	r3, r3, #28
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	019a      	lsls	r2, r3, #6
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	041b      	lsls	r3, r3, #16
 800d30c:	431a      	orrs	r2, r3
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	061b      	lsls	r3, r3, #24
 800d312:	431a      	orrs	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	071b      	lsls	r3, r3, #28
 800d318:	4925      	ldr	r1, [pc, #148]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d31a:	4313      	orrs	r3, r2
 800d31c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d011      	beq.n	800d350 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	019a      	lsls	r2, r3, #6
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	041b      	lsls	r3, r3, #16
 800d338:	431a      	orrs	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	061b      	lsls	r3, r3, #24
 800d340:	431a      	orrs	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	071b      	lsls	r3, r3, #28
 800d348:	4919      	ldr	r1, [pc, #100]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d34a:	4313      	orrs	r3, r2
 800d34c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d350:	4b17      	ldr	r3, [pc, #92]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a16      	ldr	r2, [pc, #88]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d356:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d35a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d35c:	f7fa f9c6 	bl	80076ec <HAL_GetTick>
 800d360:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d362:	e008      	b.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d364:	f7fa f9c2 	bl	80076ec <HAL_GetTick>
 800d368:	4602      	mov	r2, r0
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	2b64      	cmp	r3, #100	; 0x64
 800d370:	d901      	bls.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d372:	2303      	movs	r3, #3
 800d374:	e0d7      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d376:	4b0e      	ldr	r3, [pc, #56]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0f0      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	2b01      	cmp	r3, #1
 800d386:	f040 80cd 	bne.w	800d524 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d38a:	4b09      	ldr	r3, [pc, #36]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a08      	ldr	r2, [pc, #32]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d396:	f7fa f9a9 	bl	80076ec <HAL_GetTick>
 800d39a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d39c:	e00a      	b.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d39e:	f7fa f9a5 	bl	80076ec <HAL_GetTick>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	2b64      	cmp	r3, #100	; 0x64
 800d3aa:	d903      	bls.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e0ba      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800d3b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3b4:	4b5e      	ldr	r3, [pc, #376]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3c0:	d0ed      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d009      	beq.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d02e      	beq.n	800d440 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d12a      	bne.n	800d440 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d3ea:	4b51      	ldr	r3, [pc, #324]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d3ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3f0:	0c1b      	lsrs	r3, r3, #16
 800d3f2:	f003 0303 	and.w	r3, r3, #3
 800d3f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d3f8:	4b4d      	ldr	r3, [pc, #308]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3fe:	0f1b      	lsrs	r3, r3, #28
 800d400:	f003 0307 	and.w	r3, r3, #7
 800d404:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	019a      	lsls	r2, r3, #6
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	041b      	lsls	r3, r3, #16
 800d410:	431a      	orrs	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	061b      	lsls	r3, r3, #24
 800d418:	431a      	orrs	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	071b      	lsls	r3, r3, #28
 800d41e:	4944      	ldr	r1, [pc, #272]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d420:	4313      	orrs	r3, r2
 800d422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d426:	4b42      	ldr	r3, [pc, #264]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d42c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d434:	3b01      	subs	r3, #1
 800d436:	021b      	lsls	r3, r3, #8
 800d438:	493d      	ldr	r1, [pc, #244]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d43a:	4313      	orrs	r3, r2
 800d43c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d022      	beq.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d454:	d11d      	bne.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d456:	4b36      	ldr	r3, [pc, #216]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d45c:	0e1b      	lsrs	r3, r3, #24
 800d45e:	f003 030f 	and.w	r3, r3, #15
 800d462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d464:	4b32      	ldr	r3, [pc, #200]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d46a:	0f1b      	lsrs	r3, r3, #28
 800d46c:	f003 0307 	and.w	r3, r3, #7
 800d470:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	695b      	ldr	r3, [r3, #20]
 800d476:	019a      	lsls	r2, r3, #6
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a1b      	ldr	r3, [r3, #32]
 800d47c:	041b      	lsls	r3, r3, #16
 800d47e:	431a      	orrs	r2, r3
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	061b      	lsls	r3, r3, #24
 800d484:	431a      	orrs	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	071b      	lsls	r3, r3, #28
 800d48a:	4929      	ldr	r1, [pc, #164]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d48c:	4313      	orrs	r3, r2
 800d48e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f003 0308 	and.w	r3, r3, #8
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d028      	beq.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d49e:	4b24      	ldr	r3, [pc, #144]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4a4:	0e1b      	lsrs	r3, r3, #24
 800d4a6:	f003 030f 	and.w	r3, r3, #15
 800d4aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d4ac:	4b20      	ldr	r3, [pc, #128]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b2:	0c1b      	lsrs	r3, r3, #16
 800d4b4:	f003 0303 	and.w	r3, r3, #3
 800d4b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	019a      	lsls	r2, r3, #6
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	041b      	lsls	r3, r3, #16
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	061b      	lsls	r3, r3, #24
 800d4ca:	431a      	orrs	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	69db      	ldr	r3, [r3, #28]
 800d4d0:	071b      	lsls	r3, r3, #28
 800d4d2:	4917      	ldr	r1, [pc, #92]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d4da:	4b15      	ldr	r3, [pc, #84]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	4911      	ldr	r1, [pc, #68]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d4f0:	4b0f      	ldr	r3, [pc, #60]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a0e      	ldr	r2, [pc, #56]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4fc:	f7fa f8f6 	bl	80076ec <HAL_GetTick>
 800d500:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d502:	e008      	b.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d504:	f7fa f8f2 	bl	80076ec <HAL_GetTick>
 800d508:	4602      	mov	r2, r0
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	2b64      	cmp	r3, #100	; 0x64
 800d510:	d901      	bls.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d512:	2303      	movs	r3, #3
 800d514:	e007      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d516:	4b06      	ldr	r3, [pc, #24]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d51e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d522:	d1ef      	bne.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3720      	adds	r7, #32
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	40023800 	.word	0x40023800

0800d534 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a80      	ldr	r2, [pc, #512]	; (800d744 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800d544:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800d546:	4b80      	ldr	r3, [pc, #512]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d54c:	099b      	lsrs	r3, r3, #6
 800d54e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d556:	4b7c      	ldr	r3, [pc, #496]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d55c:	0c1b      	lsrs	r3, r3, #16
 800d55e:	f003 0203 	and.w	r2, r3, #3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d566:	4b78      	ldr	r3, [pc, #480]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d56c:	0e1b      	lsrs	r3, r3, #24
 800d56e:	f003 020f 	and.w	r2, r3, #15
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d576:	4b74      	ldr	r3, [pc, #464]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d57c:	0f1b      	lsrs	r3, r3, #28
 800d57e:	f003 0207 	and.w	r2, r3, #7
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800d586:	4b70      	ldr	r3, [pc, #448]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d58c:	099b      	lsrs	r3, r3, #6
 800d58e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d596:	4b6c      	ldr	r3, [pc, #432]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d59c:	0c1b      	lsrs	r3, r3, #16
 800d59e:	f003 0203 	and.w	r2, r3, #3
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d5a6:	4b68      	ldr	r3, [pc, #416]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ac:	0e1b      	lsrs	r3, r3, #24
 800d5ae:	f003 020f 	and.w	r2, r3, #15
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d5b6:	4b64      	ldr	r3, [pc, #400]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5bc:	0f1b      	lsrs	r3, r3, #28
 800d5be:	f003 0207 	and.w	r2, r3, #7
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800d5c6:	4b60      	ldr	r3, [pc, #384]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5cc:	f003 021f 	and.w	r2, r3, #31
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800d5d4:	4b5c      	ldr	r3, [pc, #368]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d5d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5da:	0a1b      	lsrs	r3, r3, #8
 800d5dc:	f003 021f 	and.w	r2, r3, #31
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800d5e4:	4b58      	ldr	r3, [pc, #352]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d5e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5ea:	0c1b      	lsrs	r3, r3, #16
 800d5ec:	f003 0203 	and.w	r2, r3, #3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800d5f4:	4b54      	ldr	r3, [pc, #336]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d5f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5fa:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800d602:	4b51      	ldr	r3, [pc, #324]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d608:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800d610:	4b4d      	ldr	r3, [pc, #308]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800d61c:	4b4a      	ldr	r3, [pc, #296]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800d62a:	4b47      	ldr	r3, [pc, #284]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d630:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800d638:	4b43      	ldr	r3, [pc, #268]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d63e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800d646:	4b40      	ldr	r3, [pc, #256]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d64c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800d654:	4b3c      	ldr	r3, [pc, #240]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d65a:	f003 0203 	and.w	r2, r3, #3
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800d662:	4b39      	ldr	r3, [pc, #228]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d668:	f003 020c 	and.w	r2, r3, #12
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800d670:	4b35      	ldr	r3, [pc, #212]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d676:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800d67e:	4b32      	ldr	r3, [pc, #200]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d684:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800d68c:	4b2e      	ldr	r3, [pc, #184]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d692:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800d69a:	4b2b      	ldr	r3, [pc, #172]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6a0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800d6a8:	4b27      	ldr	r3, [pc, #156]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ae:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800d6b6:	4b24      	ldr	r3, [pc, #144]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6bc:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d6c4:	4b20      	ldr	r3, [pc, #128]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ca:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800d6d2:	4b1d      	ldr	r3, [pc, #116]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6d8:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800d6e0:	4b19      	ldr	r3, [pc, #100]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6e6:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800d6ee:	4b16      	ldr	r3, [pc, #88]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800d6fe:	4b12      	ldr	r3, [pc, #72]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d706:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800d708:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d70a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d70c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	431a      	orrs	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800d718:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d71a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d71e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d722:	2b00      	cmp	r3, #0
 800d724:	d103      	bne.n	800d72e <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800d72c:	e003      	b.n	800d736 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d734:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d736:	bf00      	nop
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	00fffff1 	.word	0x00fffff1
 800d748:	40023800 	.word	0x40023800

0800d74c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b087      	sub	sp, #28
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800d758:	2300      	movs	r3, #0
 800d75a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d76a:	f040 8086 	bne.w	800d87a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d76e:	4b8d      	ldr	r3, [pc, #564]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d774:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d77c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d784:	d03e      	beq.n	800d804 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800d786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d78a:	d073      	beq.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d000      	beq.n	800d792 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d790:	e074      	b.n	800d87c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d792:	4b84      	ldr	r3, [pc, #528]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d108      	bne.n	800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d79e:	4b81      	ldr	r3, [pc, #516]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7a6:	4a80      	ldr	r2, [pc, #512]	; (800d9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800d7a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ac:	613b      	str	r3, [r7, #16]
 800d7ae:	e007      	b.n	800d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d7b0:	4b7c      	ldr	r3, [pc, #496]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7b8:	4a7c      	ldr	r2, [pc, #496]	; (800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800d7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7be:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d7c0:	4b78      	ldr	r3, [pc, #480]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7c6:	0e1b      	lsrs	r3, r3, #24
 800d7c8:	f003 030f 	and.w	r3, r3, #15
 800d7cc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d7ce:	4b75      	ldr	r3, [pc, #468]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7d4:	099b      	lsrs	r3, r3, #6
 800d7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7da:	693a      	ldr	r2, [r7, #16]
 800d7dc:	fb02 f203 	mul.w	r2, r2, r3
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d7e8:	4b6e      	ldr	r3, [pc, #440]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d7ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7ee:	0a1b      	lsrs	r3, r3, #8
 800d7f0:	f003 031f 	and.w	r3, r3, #31
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d7f8:	697a      	ldr	r2, [r7, #20]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d800:	617b      	str	r3, [r7, #20]
        break;
 800d802:	e03b      	b.n	800d87c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d804:	4b67      	ldr	r3, [pc, #412]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d108      	bne.n	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d810:	4b64      	ldr	r3, [pc, #400]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d818:	4a63      	ldr	r2, [pc, #396]	; (800d9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800d81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d81e:	613b      	str	r3, [r7, #16]
 800d820:	e007      	b.n	800d832 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d822:	4b60      	ldr	r3, [pc, #384]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d82a:	4a60      	ldr	r2, [pc, #384]	; (800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800d82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d830:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d832:	4b5c      	ldr	r3, [pc, #368]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d838:	0e1b      	lsrs	r3, r3, #24
 800d83a:	f003 030f 	and.w	r3, r3, #15
 800d83e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d840:	4b58      	ldr	r3, [pc, #352]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d846:	099b      	lsrs	r3, r3, #6
 800d848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d84c:	693a      	ldr	r2, [r7, #16]
 800d84e:	fb02 f203 	mul.w	r2, r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	fbb2 f3f3 	udiv	r3, r2, r3
 800d858:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d85a:	4b52      	ldr	r3, [pc, #328]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d860:	f003 031f 	and.w	r3, r3, #31
 800d864:	3301      	adds	r3, #1
 800d866:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d868:	697a      	ldr	r2, [r7, #20]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d870:	617b      	str	r3, [r7, #20]
        break;
 800d872:	e003      	b.n	800d87c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d874:	4b4e      	ldr	r3, [pc, #312]	; (800d9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800d876:	617b      	str	r3, [r7, #20]
        break;
 800d878:	e000      	b.n	800d87c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800d87a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d882:	f040 8086 	bne.w	800d992 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d886:	4b47      	ldr	r3, [pc, #284]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d88c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800d894:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d89c:	d03e      	beq.n	800d91c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800d89e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d8a2:	d073      	beq.n	800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d000      	beq.n	800d8aa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d8a8:	e074      	b.n	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d8aa:	4b3e      	ldr	r3, [pc, #248]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d108      	bne.n	800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d8b6:	4b3b      	ldr	r3, [pc, #236]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8be:	4a3a      	ldr	r2, [pc, #232]	; (800d9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800d8c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8c4:	613b      	str	r3, [r7, #16]
 800d8c6:	e007      	b.n	800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d8c8:	4b36      	ldr	r3, [pc, #216]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8d0:	4a36      	ldr	r2, [pc, #216]	; (800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800d8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8d6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d8d8:	4b32      	ldr	r3, [pc, #200]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8de:	0e1b      	lsrs	r3, r3, #24
 800d8e0:	f003 030f 	and.w	r3, r3, #15
 800d8e4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d8e6:	4b2f      	ldr	r3, [pc, #188]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8ec:	099b      	lsrs	r3, r3, #6
 800d8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	fb02 f203 	mul.w	r2, r2, r3
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8fe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d900:	4b28      	ldr	r3, [pc, #160]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d906:	0a1b      	lsrs	r3, r3, #8
 800d908:	f003 031f 	and.w	r3, r3, #31
 800d90c:	3301      	adds	r3, #1
 800d90e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d910:	697a      	ldr	r2, [r7, #20]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	fbb2 f3f3 	udiv	r3, r2, r3
 800d918:	617b      	str	r3, [r7, #20]
        break;
 800d91a:	e03b      	b.n	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d91c:	4b21      	ldr	r3, [pc, #132]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d108      	bne.n	800d93a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d928:	4b1e      	ldr	r3, [pc, #120]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d930:	4a1d      	ldr	r2, [pc, #116]	; (800d9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800d932:	fbb2 f3f3 	udiv	r3, r2, r3
 800d936:	613b      	str	r3, [r7, #16]
 800d938:	e007      	b.n	800d94a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d93a:	4b1a      	ldr	r3, [pc, #104]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d942:	4a1a      	ldr	r2, [pc, #104]	; (800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800d944:	fbb2 f3f3 	udiv	r3, r2, r3
 800d948:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d94a:	4b16      	ldr	r3, [pc, #88]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d94c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d950:	0e1b      	lsrs	r3, r3, #24
 800d952:	f003 030f 	and.w	r3, r3, #15
 800d956:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d958:	4b12      	ldr	r3, [pc, #72]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d95a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d95e:	099b      	lsrs	r3, r3, #6
 800d960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	fb02 f203 	mul.w	r2, r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d970:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d972:	4b0c      	ldr	r3, [pc, #48]	; (800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d978:	f003 031f 	and.w	r3, r3, #31
 800d97c:	3301      	adds	r3, #1
 800d97e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d980:	697a      	ldr	r2, [r7, #20]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	fbb2 f3f3 	udiv	r3, r2, r3
 800d988:	617b      	str	r3, [r7, #20]
        break;
 800d98a:	e003      	b.n	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d98c:	4b08      	ldr	r3, [pc, #32]	; (800d9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800d98e:	617b      	str	r3, [r7, #20]
        break;
 800d990:	e000      	b.n	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800d992:	bf00      	nop

  return frequency;
 800d994:	697b      	ldr	r3, [r7, #20]
}
 800d996:	4618      	mov	r0, r3
 800d998:	371c      	adds	r7, #28
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	40023800 	.word	0x40023800
 800d9a8:	00f42400 	.word	0x00f42400
 800d9ac:	017d7840 	.word	0x017d7840
 800d9b0:	00bb8000 	.word	0x00bb8000

0800d9b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d101      	bne.n	800d9c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e06b      	b.n	800da9e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	7f5b      	ldrb	r3, [r3, #29]
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d105      	bne.n	800d9dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7f5 fb7c 	bl	80030d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2202      	movs	r2, #2
 800d9e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	22ca      	movs	r2, #202	; 0xca
 800d9e8:	625a      	str	r2, [r3, #36]	; 0x24
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2253      	movs	r2, #83	; 0x53
 800d9f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fb00 	bl	800dff8 <RTC_EnterInitMode>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d008      	beq.n	800da10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	22ff      	movs	r2, #255	; 0xff
 800da04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2204      	movs	r2, #4
 800da0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	e046      	b.n	800da9e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6899      	ldr	r1, [r3, #8]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	4b23      	ldr	r3, [pc, #140]	; (800daa8 <HAL_RTC_Init+0xf4>)
 800da1c:	400b      	ands	r3, r1
 800da1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6899      	ldr	r1, [r3, #8]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685a      	ldr	r2, [r3, #4]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	691b      	ldr	r3, [r3, #16]
 800da2e:	431a      	orrs	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	695b      	ldr	r3, [r3, #20]
 800da34:	431a      	orrs	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	430a      	orrs	r2, r1
 800da3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	68d2      	ldr	r2, [r2, #12]
 800da46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6919      	ldr	r1, [r3, #16]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	041a      	lsls	r2, r3, #16
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	430a      	orrs	r2, r1
 800da5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68da      	ldr	r2, [r3, #12]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da6a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f022 0208 	bic.w	r2, r2, #8
 800da7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	699a      	ldr	r2, [r3, #24]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	430a      	orrs	r2, r1
 800da8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	22ff      	movs	r2, #255	; 0xff
 800da94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2201      	movs	r2, #1
 800da9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800da9c:	2300      	movs	r3, #0
  }
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	ff8fffbf 	.word	0xff8fffbf

0800daac <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800daac:	b590      	push	{r4, r7, lr}
 800daae:	b087      	sub	sp, #28
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800dab8:	2300      	movs	r3, #0
 800daba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	7f1b      	ldrb	r3, [r3, #28]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d101      	bne.n	800dac8 <HAL_RTC_SetTime+0x1c>
 800dac4:	2302      	movs	r3, #2
 800dac6:	e0a8      	b.n	800dc1a <HAL_RTC_SetTime+0x16e>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2201      	movs	r2, #1
 800dacc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2202      	movs	r2, #2
 800dad2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d126      	bne.n	800db28 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d102      	bne.n	800daee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	2200      	movs	r2, #0
 800daec:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 faac 	bl	800e050 <RTC_ByteToBcd2>
 800daf8:	4603      	mov	r3, r0
 800dafa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	785b      	ldrb	r3, [r3, #1]
 800db00:	4618      	mov	r0, r3
 800db02:	f000 faa5 	bl	800e050 <RTC_ByteToBcd2>
 800db06:	4603      	mov	r3, r0
 800db08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800db0a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	789b      	ldrb	r3, [r3, #2]
 800db10:	4618      	mov	r0, r3
 800db12:	f000 fa9d 	bl	800e050 <RTC_ByteToBcd2>
 800db16:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800db18:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	7b1b      	ldrb	r3, [r3, #12]
 800db20:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800db22:	4313      	orrs	r3, r2
 800db24:	617b      	str	r3, [r7, #20]
 800db26:	e018      	b.n	800db5a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db32:	2b00      	cmp	r3, #0
 800db34:	d102      	bne.n	800db3c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	2200      	movs	r2, #0
 800db3a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	785b      	ldrb	r3, [r3, #1]
 800db46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800db48:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800db4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	7b1b      	ldrb	r3, [r3, #12]
 800db54:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800db56:	4313      	orrs	r3, r2
 800db58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	22ca      	movs	r2, #202	; 0xca
 800db60:	625a      	str	r2, [r3, #36]	; 0x24
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2253      	movs	r2, #83	; 0x53
 800db68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f000 fa44 	bl	800dff8 <RTC_EnterInitMode>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00b      	beq.n	800db8e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	22ff      	movs	r2, #255	; 0xff
 800db7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2204      	movs	r2, #4
 800db82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2200      	movs	r2, #0
 800db88:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	e045      	b.n	800dc1a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	6979      	ldr	r1, [r7, #20]
 800db94:	4b23      	ldr	r3, [pc, #140]	; (800dc24 <HAL_RTC_SetTime+0x178>)
 800db96:	400b      	ands	r3, r1
 800db98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	689a      	ldr	r2, [r3, #8]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dba8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6899      	ldr	r1, [r3, #8]
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	691a      	ldr	r2, [r3, #16]
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	695b      	ldr	r3, [r3, #20]
 800dbb8:	431a      	orrs	r2, r3
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	430a      	orrs	r2, r1
 800dbc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68da      	ldr	r2, [r3, #12]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	f003 0320 	and.w	r3, r3, #32
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d111      	bne.n	800dc04 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f000 f9e1 	bl	800dfa8 <HAL_RTC_WaitForSynchro>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00b      	beq.n	800dc04 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	22ff      	movs	r2, #255	; 0xff
 800dbf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2204      	movs	r2, #4
 800dbf8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e00a      	b.n	800dc1a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	22ff      	movs	r2, #255	; 0xff
 800dc0a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800dc18:	2300      	movs	r3, #0
  }
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	371c      	adds	r7, #28
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd90      	pop	{r4, r7, pc}
 800dc22:	bf00      	nop
 800dc24:	007f7f7f 	.word	0x007f7f7f

0800dc28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc28:	b590      	push	{r4, r7, lr}
 800dc2a:	b087      	sub	sp, #28
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	7f1b      	ldrb	r3, [r3, #28]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d101      	bne.n	800dc44 <HAL_RTC_SetDate+0x1c>
 800dc40:	2302      	movs	r3, #2
 800dc42:	e092      	b.n	800dd6a <HAL_RTC_SetDate+0x142>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2201      	movs	r2, #1
 800dc48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2202      	movs	r2, #2
 800dc4e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d10e      	bne.n	800dc74 <HAL_RTC_SetDate+0x4c>
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	785b      	ldrb	r3, [r3, #1]
 800dc5a:	f003 0310 	and.w	r3, r3, #16
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d008      	beq.n	800dc74 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	785b      	ldrb	r3, [r3, #1]
 800dc66:	f023 0310 	bic.w	r3, r3, #16
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	330a      	adds	r3, #10
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d11c      	bne.n	800dcb4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	78db      	ldrb	r3, [r3, #3]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f000 f9e6 	bl	800e050 <RTC_ByteToBcd2>
 800dc84:	4603      	mov	r3, r0
 800dc86:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	785b      	ldrb	r3, [r3, #1]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f000 f9df 	bl	800e050 <RTC_ByteToBcd2>
 800dc92:	4603      	mov	r3, r0
 800dc94:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800dc96:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	789b      	ldrb	r3, [r3, #2]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 f9d7 	bl	800e050 <RTC_ByteToBcd2>
 800dca2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800dca4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	e00e      	b.n	800dcd2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	78db      	ldrb	r3, [r3, #3]
 800dcb8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	785b      	ldrb	r3, [r3, #1]
 800dcbe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800dcc0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800dcc6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	22ca      	movs	r2, #202	; 0xca
 800dcd8:	625a      	str	r2, [r3, #36]	; 0x24
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2253      	movs	r2, #83	; 0x53
 800dce0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f000 f988 	bl	800dff8 <RTC_EnterInitMode>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00b      	beq.n	800dd06 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	22ff      	movs	r2, #255	; 0xff
 800dcf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2204      	movs	r2, #4
 800dcfa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800dd02:	2301      	movs	r3, #1
 800dd04:	e031      	b.n	800dd6a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	6979      	ldr	r1, [r7, #20]
 800dd0c:	4b19      	ldr	r3, [pc, #100]	; (800dd74 <HAL_RTC_SetDate+0x14c>)
 800dd0e:	400b      	ands	r3, r1
 800dd10:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	68da      	ldr	r2, [r3, #12]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd20:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	f003 0320 	and.w	r3, r3, #32
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d111      	bne.n	800dd54 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f000 f939 	bl	800dfa8 <HAL_RTC_WaitForSynchro>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00b      	beq.n	800dd54 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	22ff      	movs	r2, #255	; 0xff
 800dd42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2204      	movs	r2, #4
 800dd48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	e00a      	b.n	800dd6a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	22ff      	movs	r2, #255	; 0xff
 800dd5a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800dd68:	2300      	movs	r3, #0
  }
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	371c      	adds	r7, #28
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd90      	pop	{r4, r7, pc}
 800dd72:	bf00      	nop
 800dd74:	00ffff3f 	.word	0x00ffff3f

0800dd78 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800dd78:	b590      	push	{r4, r7, lr}
 800dd7a:	b089      	sub	sp, #36	; 0x24
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	61fb      	str	r3, [r7, #28]
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	7f1b      	ldrb	r3, [r3, #28]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d101      	bne.n	800dd9c <HAL_RTC_SetAlarm+0x24>
 800dd98:	2302      	movs	r3, #2
 800dd9a:	e101      	b.n	800dfa0 <HAL_RTC_SetAlarm+0x228>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2202      	movs	r2, #2
 800dda6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d137      	bne.n	800de1e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f000 f942 	bl	800e050 <RTC_ByteToBcd2>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	785b      	ldrb	r3, [r3, #1]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f000 f93b 	bl	800e050 <RTC_ByteToBcd2>
 800ddda:	4603      	mov	r3, r0
 800dddc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ddde:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	789b      	ldrb	r3, [r3, #2]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 f933 	bl	800e050 <RTC_ByteToBcd2>
 800ddea:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ddec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	7b1b      	ldrb	r3, [r3, #12]
 800ddf4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ddf6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de00:	4618      	mov	r0, r3
 800de02:	f000 f925 	bl	800e050 <RTC_ByteToBcd2>
 800de06:	4603      	mov	r3, r0
 800de08:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800de0a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800de12:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800de18:	4313      	orrs	r3, r2
 800de1a:	61fb      	str	r3, [r7, #28]
 800de1c:	e023      	b.n	800de66 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d102      	bne.n	800de32 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	2200      	movs	r2, #0
 800de30:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	785b      	ldrb	r3, [r3, #1]
 800de3c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800de3e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800de40:	68ba      	ldr	r2, [r7, #8]
 800de42:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800de44:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	7b1b      	ldrb	r3, [r3, #12]
 800de4a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800de4c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de54:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800de56:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800de5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800de62:	4313      	orrs	r3, r2
 800de64:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	69db      	ldr	r3, [r3, #28]
 800de6e:	4313      	orrs	r3, r2
 800de70:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	22ca      	movs	r2, #202	; 0xca
 800de78:	625a      	str	r2, [r3, #36]	; 0x24
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2253      	movs	r2, #83	; 0x53
 800de80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de8a:	d13f      	bne.n	800df0c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	689a      	ldr	r2, [r3, #8]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de9a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	689a      	ldr	r2, [r3, #8]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800deaa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800deac:	f7f9 fc1e 	bl	80076ec <HAL_GetTick>
 800deb0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800deb2:	e013      	b.n	800dedc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800deb4:	f7f9 fc1a 	bl	80076ec <HAL_GetTick>
 800deb8:	4602      	mov	r2, r0
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dec2:	d90b      	bls.n	800dedc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	22ff      	movs	r2, #255	; 0xff
 800deca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2203      	movs	r2, #3
 800ded0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ded8:	2303      	movs	r3, #3
 800deda:	e061      	b.n	800dfa0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	f003 0301 	and.w	r3, r3, #1
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0e4      	beq.n	800deb4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	69fa      	ldr	r2, [r7, #28]
 800def0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	689a      	ldr	r2, [r3, #8]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df08:	609a      	str	r2, [r3, #8]
 800df0a:	e03e      	b.n	800df8a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	689a      	ldr	r2, [r3, #8]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800df1a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	689a      	ldr	r2, [r3, #8]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df2a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800df2c:	f7f9 fbde 	bl	80076ec <HAL_GetTick>
 800df30:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800df32:	e013      	b.n	800df5c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800df34:	f7f9 fbda 	bl	80076ec <HAL_GetTick>
 800df38:	4602      	mov	r2, r0
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df42:	d90b      	bls.n	800df5c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	22ff      	movs	r2, #255	; 0xff
 800df4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2203      	movs	r2, #3
 800df50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2200      	movs	r2, #0
 800df56:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800df58:	2303      	movs	r3, #3
 800df5a:	e021      	b.n	800dfa0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f003 0302 	and.w	r3, r3, #2
 800df66:	2b00      	cmp	r3, #0
 800df68:	d0e4      	beq.n	800df34 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	69fa      	ldr	r2, [r7, #28]
 800df70:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	697a      	ldr	r2, [r7, #20]
 800df78:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	689a      	ldr	r2, [r3, #8]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df88:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	22ff      	movs	r2, #255	; 0xff
 800df90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2201      	movs	r2, #1
 800df96:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2200      	movs	r2, #0
 800df9c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3724      	adds	r7, #36	; 0x24
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd90      	pop	{r4, r7, pc}

0800dfa8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68da      	ldr	r2, [r3, #12]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dfc2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800dfc4:	f7f9 fb92 	bl	80076ec <HAL_GetTick>
 800dfc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800dfca:	e009      	b.n	800dfe0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dfcc:	f7f9 fb8e 	bl	80076ec <HAL_GetTick>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfda:	d901      	bls.n	800dfe0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	e007      	b.n	800dff0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	f003 0320 	and.w	r3, r3, #32
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d0ee      	beq.n	800dfcc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e000:	2300      	movs	r3, #0
 800e002:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d119      	bne.n	800e046 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f04f 32ff 	mov.w	r2, #4294967295
 800e01a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e01c:	f7f9 fb66 	bl	80076ec <HAL_GetTick>
 800e020:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e022:	e009      	b.n	800e038 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e024:	f7f9 fb62 	bl	80076ec <HAL_GetTick>
 800e028:	4602      	mov	r2, r0
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e032:	d901      	bls.n	800e038 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800e034:	2303      	movs	r3, #3
 800e036:	e007      	b.n	800e048 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e042:	2b00      	cmp	r3, #0
 800e044:	d0ee      	beq.n	800e024 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800e046:	2300      	movs	r3, #0
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	4603      	mov	r3, r0
 800e058:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800e05a:	2300      	movs	r3, #0
 800e05c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800e05e:	e005      	b.n	800e06c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	3301      	adds	r3, #1
 800e064:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	3b0a      	subs	r3, #10
 800e06a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	2b09      	cmp	r3, #9
 800e070:	d8f6      	bhi.n	800e060 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	b2db      	uxtb	r3, r3
 800e076:	011b      	lsls	r3, r3, #4
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	4313      	orrs	r3, r2
 800e07e:	b2db      	uxtb	r3, r3
}
 800e080:	4618      	mov	r0, r3
 800e082:	3714      	adds	r7, #20
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b087      	sub	sp, #28
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	7f1b      	ldrb	r3, [r3, #28]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d101      	bne.n	800e0a8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800e0a4:	2302      	movs	r3, #2
 800e0a6:	e03e      	b.n	800e126 <HAL_RTCEx_SetTimeStamp+0x9a>
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2202      	movs	r2, #2
 800e0b2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	689a      	ldr	r2, [r3, #8]
 800e0ba:	4b1e      	ldr	r3, [pc, #120]	; (800e134 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800e0bc:	4013      	ands	r3, r2
 800e0be:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800e0c0:	697a      	ldr	r2, [r7, #20]
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	22ca      	movs	r2, #202	; 0xca
 800e0ce:	625a      	str	r2, [r3, #36]	; 0x24
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2253      	movs	r2, #83	; 0x53
 800e0d6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f022 0206 	bic.w	r2, r2, #6
 800e0e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	697a      	ldr	r2, [r7, #20]
 800e0fe:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	689a      	ldr	r2, [r3, #8]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e10e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	22ff      	movs	r2, #255	; 0xff
 800e116:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2201      	movs	r2, #1
 800e11c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2200      	movs	r2, #0
 800e122:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	371c      	adds	r7, #28
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop
 800e134:	fffff7f7 	.word	0xfffff7f7

0800e138 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800e140:	2300      	movs	r3, #0
 800e142:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800e144:	2300      	movs	r3, #0
 800e146:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800e148:	2300      	movs	r3, #0
 800e14a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	e149      	b.n	800e3ea <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d106      	bne.n	800e170 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f7f5 fa98 	bl	80036a0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2202      	movs	r2, #2
 800e174:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 fa57 	bl	800e62c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d007      	beq.n	800e196 <HAL_SAI_Init+0x5e>
 800e186:	2b01      	cmp	r3, #1
 800e188:	d302      	bcc.n	800e190 <HAL_SAI_Init+0x58>
 800e18a:	2b02      	cmp	r3, #2
 800e18c:	d006      	beq.n	800e19c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800e18e:	e008      	b.n	800e1a2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800e190:	2300      	movs	r3, #0
 800e192:	61fb      	str	r3, [r7, #28]
      break;
 800e194:	e005      	b.n	800e1a2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e196:	2310      	movs	r3, #16
 800e198:	61fb      	str	r3, [r7, #28]
      break;
 800e19a:	e002      	b.n	800e1a2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e19c:	2320      	movs	r3, #32
 800e19e:	61fb      	str	r3, [r7, #28]
      break;
 800e1a0:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	2b03      	cmp	r3, #3
 800e1a8:	d81d      	bhi.n	800e1e6 <HAL_SAI_Init+0xae>
 800e1aa:	a201      	add	r2, pc, #4	; (adr r2, 800e1b0 <HAL_SAI_Init+0x78>)
 800e1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b0:	0800e1c1 	.word	0x0800e1c1
 800e1b4:	0800e1c7 	.word	0x0800e1c7
 800e1b8:	0800e1cf 	.word	0x0800e1cf
 800e1bc:	0800e1d7 	.word	0x0800e1d7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	617b      	str	r3, [r7, #20]
      }
      break;
 800e1c4:	e010      	b.n	800e1e8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800e1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1ca:	617b      	str	r3, [r7, #20]
      }
      break;
 800e1cc:	e00c      	b.n	800e1e8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800e1ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1d2:	617b      	str	r3, [r7, #20]
      }
      break;
 800e1d4:	e008      	b.n	800e1e8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800e1d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1da:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	f043 0301 	orr.w	r3, r3, #1
 800e1e2:	61fb      	str	r3, [r7, #28]
      }
      break;
 800e1e4:	e000      	b.n	800e1e8 <HAL_SAI_Init+0xb0>
  default:
    break;
 800e1e6:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a81      	ldr	r2, [pc, #516]	; (800e3f4 <HAL_SAI_Init+0x2bc>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d004      	beq.n	800e1fc <HAL_SAI_Init+0xc4>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a80      	ldr	r2, [pc, #512]	; (800e3f8 <HAL_SAI_Init+0x2c0>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d103      	bne.n	800e204 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800e1fc:	4a7f      	ldr	r2, [pc, #508]	; (800e3fc <HAL_SAI_Init+0x2c4>)
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	6013      	str	r3, [r2, #0]
 800e202:	e002      	b.n	800e20a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e204:	4a7e      	ldr	r2, [pc, #504]	; (800e400 <HAL_SAI_Init+0x2c8>)
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	69db      	ldr	r3, [r3, #28]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d043      	beq.n	800e29a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4a76      	ldr	r2, [pc, #472]	; (800e3f4 <HAL_SAI_Init+0x2bc>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d004      	beq.n	800e22a <HAL_SAI_Init+0xf2>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a74      	ldr	r2, [pc, #464]	; (800e3f8 <HAL_SAI_Init+0x2c0>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d104      	bne.n	800e234 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e22a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e22e:	f7ff fa8d 	bl	800d74c <HAL_RCCEx_GetPeriphCLKFreq>
 800e232:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a72      	ldr	r2, [pc, #456]	; (800e404 <HAL_SAI_Init+0x2cc>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d004      	beq.n	800e248 <HAL_SAI_Init+0x110>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a71      	ldr	r2, [pc, #452]	; (800e408 <HAL_SAI_Init+0x2d0>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d104      	bne.n	800e252 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e248:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e24c:	f7ff fa7e 	bl	800d74c <HAL_RCCEx_GetPeriphCLKFreq>
 800e250:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800e252:	693a      	ldr	r2, [r7, #16]
 800e254:	4613      	mov	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4413      	add	r3, r2
 800e25a:	005b      	lsls	r3, r3, #1
 800e25c:	461a      	mov	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	69db      	ldr	r3, [r3, #28]
 800e262:	025b      	lsls	r3, r3, #9
 800e264:	fbb2 f3f3 	udiv	r3, r2, r3
 800e268:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	4a67      	ldr	r2, [pc, #412]	; (800e40c <HAL_SAI_Init+0x2d4>)
 800e26e:	fba2 2303 	umull	r2, r3, r2, r3
 800e272:	08da      	lsrs	r2, r3, #3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800e278:	68f9      	ldr	r1, [r7, #12]
 800e27a:	4b64      	ldr	r3, [pc, #400]	; (800e40c <HAL_SAI_Init+0x2d4>)
 800e27c:	fba3 2301 	umull	r2, r3, r3, r1
 800e280:	08da      	lsrs	r2, r3, #3
 800e282:	4613      	mov	r3, r2
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	4413      	add	r3, r2
 800e288:	005b      	lsls	r3, r3, #1
 800e28a:	1aca      	subs	r2, r1, r3
 800e28c:	2a08      	cmp	r2, #8
 800e28e:	d904      	bls.n	800e29a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a1b      	ldr	r3, [r3, #32]
 800e294:	1c5a      	adds	r2, r3, #1
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <HAL_SAI_Init+0x172>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d109      	bne.n	800e2be <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d101      	bne.n	800e2b6 <HAL_SAI_Init+0x17e>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	e001      	b.n	800e2ba <HAL_SAI_Init+0x182>
 800e2b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2ba:	61bb      	str	r3, [r7, #24]
 800e2bc:	e008      	b.n	800e2d0 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d102      	bne.n	800e2cc <HAL_SAI_Init+0x194>
 800e2c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2ca:	e000      	b.n	800e2ce <HAL_SAI_Init+0x196>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	6819      	ldr	r1, [r3, #0]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	4b4d      	ldr	r3, [pc, #308]	; (800e410 <HAL_SAI_Init+0x2d8>)
 800e2dc:	400b      	ands	r3, r1
 800e2de:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6819      	ldr	r1, [r3, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ee:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e2f4:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fa:	431a      	orrs	r2, r3
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800e308:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	691b      	ldr	r3, [r3, #16]
 800e30e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e314:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6a1b      	ldr	r3, [r3, #32]
 800e31a:	051b      	lsls	r3, r3, #20
 800e31c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	430a      	orrs	r2, r1
 800e324:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	6859      	ldr	r1, [r3, #4]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	4b38      	ldr	r3, [pc, #224]	; (800e414 <HAL_SAI_Init+0x2dc>)
 800e332:	400b      	ands	r3, r1
 800e334:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	6859      	ldr	r1, [r3, #4]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	699a      	ldr	r2, [r3, #24]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e344:	431a      	orrs	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e34a:	431a      	orrs	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	430a      	orrs	r2, r1
 800e352:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	6899      	ldr	r1, [r3, #8]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	4b2e      	ldr	r3, [pc, #184]	; (800e418 <HAL_SAI_Init+0x2e0>)
 800e360:	400b      	ands	r3, r1
 800e362:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6899      	ldr	r1, [r3, #8]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e36e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800e374:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800e37a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800e380:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e386:	3b01      	subs	r3, #1
 800e388:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800e38a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	430a      	orrs	r2, r1
 800e392:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	68d9      	ldr	r1, [r3, #12]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800e3a2:	400b      	ands	r3, r1
 800e3a4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68d9      	ldr	r1, [r3, #12]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3b4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3ba:	041b      	lsls	r3, r3, #16
 800e3bc:	431a      	orrs	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	021b      	lsls	r3, r3, #8
 800e3c6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	430a      	orrs	r2, r1
 800e3ce:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3720      	adds	r7, #32
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	40015804 	.word	0x40015804
 800e3f8:	40015824 	.word	0x40015824
 800e3fc:	40015800 	.word	0x40015800
 800e400:	40015c00 	.word	0x40015c00
 800e404:	40015c04 	.word	0x40015c04
 800e408:	40015c24 	.word	0x40015c24
 800e40c:	cccccccd 	.word	0xcccccccd
 800e410:	ff05c010 	.word	0xff05c010
 800e414:	ffff1ff0 	.word	0xffff1ff0
 800e418:	fff88000 	.word	0xfff88000

0800e41c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d101      	bne.n	800e42e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	e027      	b.n	800e47e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2202      	movs	r2, #2
 800e432:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2200      	movs	r2, #0
 800e43c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f04f 32ff 	mov.w	r2, #4294967295
 800e446:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f8ef 	bl	800e62c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	685a      	ldr	r2, [r3, #4]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f042 0208 	orr.w	r2, r2, #8
 800e45c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7f5 f988 	bl	8003774 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3708      	adds	r7, #8
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
	...

0800e488 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	4613      	mov	r3, r2
 800e494:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d002      	beq.n	800e4a2 <HAL_SAI_Receive_DMA+0x1a>
 800e49c:	88fb      	ldrh	r3, [r7, #6]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e074      	b.n	800e590 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d16d      	bne.n	800e58e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d101      	bne.n	800e4c0 <HAL_SAI_Receive_DMA+0x38>
 800e4bc:	2302      	movs	r3, #2
 800e4be:	e067      	b.n	800e590 <HAL_SAI_Receive_DMA+0x108>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	88fa      	ldrh	r2, [r7, #6]
 800e4d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	88fa      	ldrh	r2, [r7, #6]
 800e4da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2222      	movs	r2, #34	; 0x22
 800e4ea:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4f2:	4a29      	ldr	r2, [pc, #164]	; (800e598 <HAL_SAI_Receive_DMA+0x110>)
 800e4f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4fa:	4a28      	ldr	r2, [pc, #160]	; (800e59c <HAL_SAI_Receive_DMA+0x114>)
 800e4fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e502:	4a27      	ldr	r2, [pc, #156]	; (800e5a0 <HAL_SAI_Receive_DMA+0x118>)
 800e504:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e50a:	2200      	movs	r2, #0
 800e50c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	331c      	adds	r3, #28
 800e518:	4619      	mov	r1, r3
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e51e:	461a      	mov	r2, r3
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e526:	f7f9 fee9 	bl	80082fc <HAL_DMA_Start_IT>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d005      	beq.n	800e53c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	e029      	b.n	800e590 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e546:	2b00      	cmp	r3, #0
 800e548:	d107      	bne.n	800e55a <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e558:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e55a:	2100      	movs	r1, #0
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f000 f82f 	bl	800e5c0 <SAI_InterruptFlag>
 800e562:	4601      	mov	r1, r0
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	691a      	ldr	r2, [r3, #16]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	430a      	orrs	r2, r1
 800e570:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e580:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e58a:	2300      	movs	r3, #0
 800e58c:	e000      	b.n	800e590 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800e58e:	2302      	movs	r3, #2
  }
}
 800e590:	4618      	mov	r0, r3
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	0800e6f9 	.word	0x0800e6f9
 800e59c:	0800e699 	.word	0x0800e699
 800e5a0:	0800e715 	.word	0x0800e715

0800e5a4 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e5b2:	b2db      	uxtb	r3, r3
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d103      	bne.n	800e5dc <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f043 0308 	orr.w	r3, r3, #8
 800e5da:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e0:	2b08      	cmp	r3, #8
 800e5e2:	d10b      	bne.n	800e5fc <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e5e8:	2b03      	cmp	r3, #3
 800e5ea:	d003      	beq.n	800e5f4 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d103      	bne.n	800e5fc <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f043 0310 	orr.w	r3, r3, #16
 800e5fa:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	2b03      	cmp	r3, #3
 800e602:	d003      	beq.n	800e60c <SAI_InterruptFlag+0x4c>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	2b02      	cmp	r3, #2
 800e60a:	d104      	bne.n	800e616 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e612:	60fb      	str	r3, [r7, #12]
 800e614:	e003      	b.n	800e61e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f043 0304 	orr.w	r3, r3, #4
 800e61c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e61e:	68fb      	ldr	r3, [r7, #12]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e62c:	b490      	push	{r4, r7}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800e634:	4b16      	ldr	r3, [pc, #88]	; (800e690 <SAI_Disable+0x64>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a16      	ldr	r2, [pc, #88]	; (800e694 <SAI_Disable+0x68>)
 800e63a:	fba2 2303 	umull	r2, r3, r2, r3
 800e63e:	0b1b      	lsrs	r3, r3, #12
 800e640:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800e642:	2300      	movs	r3, #0
 800e644:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e654:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800e656:	4623      	mov	r3, r4
 800e658:	1e5c      	subs	r4, r3, #1
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d10a      	bne.n	800e674 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e664:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800e66e:	2303      	movs	r3, #3
 800e670:	73fb      	strb	r3, [r7, #15]
      break;
 800e672:	e006      	b.n	800e682 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1e9      	bne.n	800e656 <SAI_Disable+0x2a>

  return status;
 800e682:	7bfb      	ldrb	r3, [r7, #15]
}
 800e684:	4618      	mov	r0, r3
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bc90      	pop	{r4, r7}
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	20000000 	.word	0x20000000
 800e694:	95cbec1b 	.word	0x95cbec1b

0800e698 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	69db      	ldr	r3, [r3, #28]
 800e6aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6ae:	d01c      	beq.n	800e6ea <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e6be:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e6c8:	2100      	movs	r1, #0
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f7ff ff78 	bl	800e5c0 <SAI_InterruptFlag>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	43d9      	mvns	r1, r3
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	691a      	ldr	r2, [r3, #16]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	400a      	ands	r2, r1
 800e6e0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f7f7 fb2e 	bl	8005d4c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e6f0:	bf00      	nop
 800e6f2:	3710      	adds	r7, #16
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e704:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e706:	68f8      	ldr	r0, [r7, #12]
 800e708:	f7f7 fb2a 	bl	8005d60 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e70c:	bf00      	nop
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e720:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e728:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d004      	beq.n	800e746 <SAI_DMAError+0x32>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e742:	2b01      	cmp	r3, #1
 800e744:	d112      	bne.n	800e76c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e754:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f7ff ff68 	bl	800e62c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2201      	movs	r2, #1
 800e760:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f7f7 f90f 	bl	8005990 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e772:	bf00      	nop
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b082      	sub	sp, #8
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
 800e782:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e025      	b.n	800e7da <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e794:	b2db      	uxtb	r3, r3
 800e796:	2b00      	cmp	r3, #0
 800e798:	d106      	bne.n	800e7a8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f7f4 ff72 	bl	800368c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2202      	movs	r2, #2
 800e7ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	f001 fdea 	bl	8010394 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6818      	ldr	r0, [r3, #0]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	6839      	ldr	r1, [r7, #0]
 800e7cc:	f001 fe54 	bl	8010478 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	60f8      	str	r0, [r7, #12]
 800e7ea:	60b9      	str	r1, [r7, #8]
 800e7ec:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d101      	bne.n	800e7fe <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800e7fa:	2302      	movs	r3, #2
 800e7fc:	e018      	b.n	800e830 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2202      	movs	r2, #2
 800e802:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	68b9      	ldr	r1, [r7, #8]
 800e80e:	4618      	mov	r0, r3
 800e810:	f001 feb2 	bl	8010578 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2b02      	cmp	r3, #2
 800e81a:	d104      	bne.n	800e826 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2205      	movs	r2, #5
 800e820:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e824:	e003      	b.n	800e82e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2201      	movs	r2, #1
 800e82a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3710      	adds	r7, #16
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	2b02      	cmp	r3, #2
 800e84c:	d101      	bne.n	800e852 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800e84e:	2302      	movs	r3, #2
 800e850:	e00e      	b.n	800e870 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2202      	movs	r2, #2
 800e856:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	4618      	mov	r0, r3
 800e862:	f001 feaa 	bl	80105ba <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2201      	movs	r2, #1
 800e86a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800e86e:	2300      	movs	r3, #0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e04c      	b.n	800e924 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d106      	bne.n	800e8a4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7f4 fc32 	bl	8003108 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2202      	movs	r2, #2
 800e8a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f022 0203 	bic.w	r2, r2, #3
 800e8ba:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	4b19      	ldr	r3, [pc, #100]	; (800e92c <HAL_SPDIFRX_Init+0xb4>)
 800e8c8:	4013      	ands	r3, r2
 800e8ca:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800e8d4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800e8da:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800e8e0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800e8e6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800e8ec:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800e8f2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800e8f8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800e8fe:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800e904:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	4313      	orrs	r3, r2
 800e90a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2201      	movs	r2, #1
 800e91e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800e922:	2300      	movs	r3, #0
}
 800e924:	4618      	mov	r0, r3
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	fff88407 	.word	0xfff88407

0800e930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e93e:	2301      	movs	r3, #1
 800e940:	e01d      	b.n	800e97e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7f4 fc18 	bl	800318c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2202      	movs	r2, #2
 800e960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	3304      	adds	r3, #4
 800e96c:	4619      	mov	r1, r3
 800e96e:	4610      	mov	r0, r2
 800e970:	f000 fb78 	bl	800f064 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
	...

0800e988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	68da      	ldr	r2, [r3, #12]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f042 0201 	orr.w	r2, r2, #1
 800e99e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	689a      	ldr	r2, [r3, #8]
 800e9a6:	4b0c      	ldr	r3, [pc, #48]	; (800e9d8 <HAL_TIM_Base_Start_IT+0x50>)
 800e9a8:	4013      	ands	r3, r2
 800e9aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2b06      	cmp	r3, #6
 800e9b0:	d00b      	beq.n	800e9ca <HAL_TIM_Base_Start_IT+0x42>
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9b8:	d007      	beq.n	800e9ca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f042 0201 	orr.w	r2, r2, #1
 800e9c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3714      	adds	r7, #20
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr
 800e9d8:	00010007 	.word	0x00010007

0800e9dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d101      	bne.n	800e9ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e01d      	b.n	800ea2a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d106      	bne.n	800ea08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7f4 fc30 	bl	8003268 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3304      	adds	r3, #4
 800ea18:	4619      	mov	r1, r3
 800ea1a:	4610      	mov	r0, r2
 800ea1c:	f000 fb22 	bl	800f064 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b082      	sub	sp, #8
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	691b      	ldr	r3, [r3, #16]
 800ea40:	f003 0302 	and.w	r3, r3, #2
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d122      	bne.n	800ea8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	f003 0302 	and.w	r3, r3, #2
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d11b      	bne.n	800ea8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f06f 0202 	mvn.w	r2, #2
 800ea5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2201      	movs	r2, #1
 800ea64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	699b      	ldr	r3, [r3, #24]
 800ea6c:	f003 0303 	and.w	r3, r3, #3
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d003      	beq.n	800ea7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fad7 	bl	800f028 <HAL_TIM_IC_CaptureCallback>
 800ea7a:	e005      	b.n	800ea88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 fac9 	bl	800f014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fada 	bl	800f03c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	691b      	ldr	r3, [r3, #16]
 800ea94:	f003 0304 	and.w	r3, r3, #4
 800ea98:	2b04      	cmp	r3, #4
 800ea9a:	d122      	bne.n	800eae2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	f003 0304 	and.w	r3, r3, #4
 800eaa6:	2b04      	cmp	r3, #4
 800eaa8:	d11b      	bne.n	800eae2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f06f 0204 	mvn.w	r2, #4
 800eab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2202      	movs	r2, #2
 800eab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d003      	beq.n	800ead0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 faad 	bl	800f028 <HAL_TIM_IC_CaptureCallback>
 800eace:	e005      	b.n	800eadc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f000 fa9f 	bl	800f014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 fab0 	bl	800f03c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	f003 0308 	and.w	r3, r3, #8
 800eaec:	2b08      	cmp	r3, #8
 800eaee:	d122      	bne.n	800eb36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	f003 0308 	and.w	r3, r3, #8
 800eafa:	2b08      	cmp	r3, #8
 800eafc:	d11b      	bne.n	800eb36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f06f 0208 	mvn.w	r2, #8
 800eb06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2204      	movs	r2, #4
 800eb0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	69db      	ldr	r3, [r3, #28]
 800eb14:	f003 0303 	and.w	r3, r3, #3
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d003      	beq.n	800eb24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 fa83 	bl	800f028 <HAL_TIM_IC_CaptureCallback>
 800eb22:	e005      	b.n	800eb30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fa75 	bl	800f014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 fa86 	bl	800f03c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	f003 0310 	and.w	r3, r3, #16
 800eb40:	2b10      	cmp	r3, #16
 800eb42:	d122      	bne.n	800eb8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	f003 0310 	and.w	r3, r3, #16
 800eb4e:	2b10      	cmp	r3, #16
 800eb50:	d11b      	bne.n	800eb8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f06f 0210 	mvn.w	r2, #16
 800eb5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2208      	movs	r2, #8
 800eb60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	69db      	ldr	r3, [r3, #28]
 800eb68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d003      	beq.n	800eb78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f000 fa59 	bl	800f028 <HAL_TIM_IC_CaptureCallback>
 800eb76:	e005      	b.n	800eb84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 fa4b 	bl	800f014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 fa5c 	bl	800f03c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	f003 0301 	and.w	r3, r3, #1
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d10e      	bne.n	800ebb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	f003 0301 	and.w	r3, r3, #1
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d107      	bne.n	800ebb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f06f 0201 	mvn.w	r2, #1
 800ebae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7f3 fee7 	bl	8002984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebc0:	2b80      	cmp	r3, #128	; 0x80
 800ebc2:	d10e      	bne.n	800ebe2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebce:	2b80      	cmp	r3, #128	; 0x80
 800ebd0:	d107      	bne.n	800ebe2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ebda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 feef 	bl	800f9c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebf0:	d10e      	bne.n	800ec10 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebfc:	2b80      	cmp	r3, #128	; 0x80
 800ebfe:	d107      	bne.n	800ec10 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ec08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 fee2 	bl	800f9d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec1a:	2b40      	cmp	r3, #64	; 0x40
 800ec1c:	d10e      	bne.n	800ec3c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec28:	2b40      	cmp	r3, #64	; 0x40
 800ec2a:	d107      	bne.n	800ec3c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 fa0a 	bl	800f050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	691b      	ldr	r3, [r3, #16]
 800ec42:	f003 0320 	and.w	r3, r3, #32
 800ec46:	2b20      	cmp	r3, #32
 800ec48:	d10e      	bne.n	800ec68 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	f003 0320 	and.w	r3, r3, #32
 800ec54:	2b20      	cmp	r3, #32
 800ec56:	d107      	bne.n	800ec68 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f06f 0220 	mvn.w	r2, #32
 800ec60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 fea2 	bl	800f9ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ec68:	bf00      	nop
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d101      	bne.n	800ec8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ec86:	2302      	movs	r3, #2
 800ec88:	e105      	b.n	800ee96 <HAL_TIM_PWM_ConfigChannel+0x226>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2202      	movs	r2, #2
 800ec96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2b14      	cmp	r3, #20
 800ec9e:	f200 80f0 	bhi.w	800ee82 <HAL_TIM_PWM_ConfigChannel+0x212>
 800eca2:	a201      	add	r2, pc, #4	; (adr r2, 800eca8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800eca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca8:	0800ecfd 	.word	0x0800ecfd
 800ecac:	0800ee83 	.word	0x0800ee83
 800ecb0:	0800ee83 	.word	0x0800ee83
 800ecb4:	0800ee83 	.word	0x0800ee83
 800ecb8:	0800ed3d 	.word	0x0800ed3d
 800ecbc:	0800ee83 	.word	0x0800ee83
 800ecc0:	0800ee83 	.word	0x0800ee83
 800ecc4:	0800ee83 	.word	0x0800ee83
 800ecc8:	0800ed7f 	.word	0x0800ed7f
 800eccc:	0800ee83 	.word	0x0800ee83
 800ecd0:	0800ee83 	.word	0x0800ee83
 800ecd4:	0800ee83 	.word	0x0800ee83
 800ecd8:	0800edbf 	.word	0x0800edbf
 800ecdc:	0800ee83 	.word	0x0800ee83
 800ece0:	0800ee83 	.word	0x0800ee83
 800ece4:	0800ee83 	.word	0x0800ee83
 800ece8:	0800ee01 	.word	0x0800ee01
 800ecec:	0800ee83 	.word	0x0800ee83
 800ecf0:	0800ee83 	.word	0x0800ee83
 800ecf4:	0800ee83 	.word	0x0800ee83
 800ecf8:	0800ee41 	.word	0x0800ee41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68b9      	ldr	r1, [r7, #8]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 fa4e 	bl	800f1a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	699a      	ldr	r2, [r3, #24]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f042 0208 	orr.w	r2, r2, #8
 800ed16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	699a      	ldr	r2, [r3, #24]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f022 0204 	bic.w	r2, r2, #4
 800ed26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6999      	ldr	r1, [r3, #24]
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	691a      	ldr	r2, [r3, #16]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	430a      	orrs	r2, r1
 800ed38:	619a      	str	r2, [r3, #24]
      break;
 800ed3a:	e0a3      	b.n	800ee84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68b9      	ldr	r1, [r7, #8]
 800ed42:	4618      	mov	r0, r3
 800ed44:	f000 faa0 	bl	800f288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	699a      	ldr	r2, [r3, #24]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	699a      	ldr	r2, [r3, #24]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	6999      	ldr	r1, [r3, #24]
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	021a      	lsls	r2, r3, #8
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	430a      	orrs	r2, r1
 800ed7a:	619a      	str	r2, [r3, #24]
      break;
 800ed7c:	e082      	b.n	800ee84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	68b9      	ldr	r1, [r7, #8]
 800ed84:	4618      	mov	r0, r3
 800ed86:	f000 faf7 	bl	800f378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	69da      	ldr	r2, [r3, #28]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f042 0208 	orr.w	r2, r2, #8
 800ed98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	69da      	ldr	r2, [r3, #28]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f022 0204 	bic.w	r2, r2, #4
 800eda8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	69d9      	ldr	r1, [r3, #28]
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	691a      	ldr	r2, [r3, #16]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	430a      	orrs	r2, r1
 800edba:	61da      	str	r2, [r3, #28]
      break;
 800edbc:	e062      	b.n	800ee84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	68b9      	ldr	r1, [r7, #8]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f000 fb4d 	bl	800f464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	69da      	ldr	r2, [r3, #28]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800edd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	69da      	ldr	r2, [r3, #28]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ede8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	69d9      	ldr	r1, [r3, #28]
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	691b      	ldr	r3, [r3, #16]
 800edf4:	021a      	lsls	r2, r3, #8
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	430a      	orrs	r2, r1
 800edfc:	61da      	str	r2, [r3, #28]
      break;
 800edfe:	e041      	b.n	800ee84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	68b9      	ldr	r1, [r7, #8]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 fb84 	bl	800f514 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f042 0208 	orr.w	r2, r2, #8
 800ee1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f022 0204 	bic.w	r2, r2, #4
 800ee2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	691a      	ldr	r2, [r3, #16]
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	430a      	orrs	r2, r1
 800ee3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ee3e:	e021      	b.n	800ee84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68b9      	ldr	r1, [r7, #8]
 800ee46:	4618      	mov	r0, r3
 800ee48:	f000 fbb6 	bl	800f5b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	691b      	ldr	r3, [r3, #16]
 800ee76:	021a      	lsls	r2, r3, #8
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	430a      	orrs	r2, r1
 800ee7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ee80:	e000      	b.n	800ee84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800ee82:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2201      	movs	r2, #1
 800ee88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop

0800eea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d101      	bne.n	800eeb8 <HAL_TIM_ConfigClockSource+0x18>
 800eeb4:	2302      	movs	r3, #2
 800eeb6:	e0a6      	b.n	800f006 <HAL_TIM_ConfigClockSource+0x166>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2202      	movs	r2, #2
 800eec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	4b4f      	ldr	r3, [pc, #316]	; (800f010 <HAL_TIM_ConfigClockSource+0x170>)
 800eed4:	4013      	ands	r3, r2
 800eed6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eede:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	68fa      	ldr	r2, [r7, #12]
 800eee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b40      	cmp	r3, #64	; 0x40
 800eeee:	d067      	beq.n	800efc0 <HAL_TIM_ConfigClockSource+0x120>
 800eef0:	2b40      	cmp	r3, #64	; 0x40
 800eef2:	d80b      	bhi.n	800ef0c <HAL_TIM_ConfigClockSource+0x6c>
 800eef4:	2b10      	cmp	r3, #16
 800eef6:	d073      	beq.n	800efe0 <HAL_TIM_ConfigClockSource+0x140>
 800eef8:	2b10      	cmp	r3, #16
 800eefa:	d802      	bhi.n	800ef02 <HAL_TIM_ConfigClockSource+0x62>
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d06f      	beq.n	800efe0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ef00:	e078      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ef02:	2b20      	cmp	r3, #32
 800ef04:	d06c      	beq.n	800efe0 <HAL_TIM_ConfigClockSource+0x140>
 800ef06:	2b30      	cmp	r3, #48	; 0x30
 800ef08:	d06a      	beq.n	800efe0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ef0a:	e073      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ef0c:	2b70      	cmp	r3, #112	; 0x70
 800ef0e:	d00d      	beq.n	800ef2c <HAL_TIM_ConfigClockSource+0x8c>
 800ef10:	2b70      	cmp	r3, #112	; 0x70
 800ef12:	d804      	bhi.n	800ef1e <HAL_TIM_ConfigClockSource+0x7e>
 800ef14:	2b50      	cmp	r3, #80	; 0x50
 800ef16:	d033      	beq.n	800ef80 <HAL_TIM_ConfigClockSource+0xe0>
 800ef18:	2b60      	cmp	r3, #96	; 0x60
 800ef1a:	d041      	beq.n	800efa0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ef1c:	e06a      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ef1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef22:	d066      	beq.n	800eff2 <HAL_TIM_ConfigClockSource+0x152>
 800ef24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef28:	d017      	beq.n	800ef5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ef2a:	e063      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6818      	ldr	r0, [r3, #0]
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	6899      	ldr	r1, [r3, #8]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	685a      	ldr	r2, [r3, #4]
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	f000 fc0a 	bl	800f754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ef4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	68fa      	ldr	r2, [r7, #12]
 800ef56:	609a      	str	r2, [r3, #8]
      break;
 800ef58:	e04c      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6818      	ldr	r0, [r3, #0]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	6899      	ldr	r1, [r3, #8]
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	685a      	ldr	r2, [r3, #4]
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	f000 fbf3 	bl	800f754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	689a      	ldr	r2, [r3, #8]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef7c:	609a      	str	r2, [r3, #8]
      break;
 800ef7e:	e039      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6818      	ldr	r0, [r3, #0]
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	6859      	ldr	r1, [r3, #4]
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	f000 fb67 	bl	800f660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2150      	movs	r1, #80	; 0x50
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f000 fbc0 	bl	800f71e <TIM_ITRx_SetConfig>
      break;
 800ef9e:	e029      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6818      	ldr	r0, [r3, #0]
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	6859      	ldr	r1, [r3, #4]
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	461a      	mov	r2, r3
 800efae:	f000 fb86 	bl	800f6be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2160      	movs	r1, #96	; 0x60
 800efb8:	4618      	mov	r0, r3
 800efba:	f000 fbb0 	bl	800f71e <TIM_ITRx_SetConfig>
      break;
 800efbe:	e019      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6818      	ldr	r0, [r3, #0]
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	6859      	ldr	r1, [r3, #4]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	461a      	mov	r2, r3
 800efce:	f000 fb47 	bl	800f660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2140      	movs	r1, #64	; 0x40
 800efd8:	4618      	mov	r0, r3
 800efda:	f000 fba0 	bl	800f71e <TIM_ITRx_SetConfig>
      break;
 800efde:	e009      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4619      	mov	r1, r3
 800efea:	4610      	mov	r0, r2
 800efec:	f000 fb97 	bl	800f71e <TIM_ITRx_SetConfig>
      break;
 800eff0:	e000      	b.n	800eff4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800eff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f004:	2300      	movs	r3, #0
}
 800f006:	4618      	mov	r0, r3
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	fffeff88 	.word	0xfffeff88

0800f014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f01c:	bf00      	nop
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f030:	bf00      	nop
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f044:	bf00      	nop
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f058:	bf00      	nop
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f064:	b480      	push	{r7}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a40      	ldr	r2, [pc, #256]	; (800f178 <TIM_Base_SetConfig+0x114>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d013      	beq.n	800f0a4 <TIM_Base_SetConfig+0x40>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f082:	d00f      	beq.n	800f0a4 <TIM_Base_SetConfig+0x40>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a3d      	ldr	r2, [pc, #244]	; (800f17c <TIM_Base_SetConfig+0x118>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d00b      	beq.n	800f0a4 <TIM_Base_SetConfig+0x40>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a3c      	ldr	r2, [pc, #240]	; (800f180 <TIM_Base_SetConfig+0x11c>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d007      	beq.n	800f0a4 <TIM_Base_SetConfig+0x40>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a3b      	ldr	r2, [pc, #236]	; (800f184 <TIM_Base_SetConfig+0x120>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d003      	beq.n	800f0a4 <TIM_Base_SetConfig+0x40>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a3a      	ldr	r2, [pc, #232]	; (800f188 <TIM_Base_SetConfig+0x124>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d108      	bne.n	800f0b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4a2f      	ldr	r2, [pc, #188]	; (800f178 <TIM_Base_SetConfig+0x114>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d02b      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0c4:	d027      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a2c      	ldr	r2, [pc, #176]	; (800f17c <TIM_Base_SetConfig+0x118>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d023      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a2b      	ldr	r2, [pc, #172]	; (800f180 <TIM_Base_SetConfig+0x11c>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d01f      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a2a      	ldr	r2, [pc, #168]	; (800f184 <TIM_Base_SetConfig+0x120>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d01b      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a29      	ldr	r2, [pc, #164]	; (800f188 <TIM_Base_SetConfig+0x124>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d017      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4a28      	ldr	r2, [pc, #160]	; (800f18c <TIM_Base_SetConfig+0x128>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d013      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4a27      	ldr	r2, [pc, #156]	; (800f190 <TIM_Base_SetConfig+0x12c>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d00f      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	4a26      	ldr	r2, [pc, #152]	; (800f194 <TIM_Base_SetConfig+0x130>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d00b      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4a25      	ldr	r2, [pc, #148]	; (800f198 <TIM_Base_SetConfig+0x134>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d007      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4a24      	ldr	r2, [pc, #144]	; (800f19c <TIM_Base_SetConfig+0x138>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d003      	beq.n	800f116 <TIM_Base_SetConfig+0xb2>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4a23      	ldr	r2, [pc, #140]	; (800f1a0 <TIM_Base_SetConfig+0x13c>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d108      	bne.n	800f128 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f11c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	4313      	orrs	r3, r2
 800f126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	4313      	orrs	r3, r2
 800f134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	689a      	ldr	r2, [r3, #8]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a0a      	ldr	r2, [pc, #40]	; (800f178 <TIM_Base_SetConfig+0x114>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d003      	beq.n	800f15c <TIM_Base_SetConfig+0xf8>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a0c      	ldr	r2, [pc, #48]	; (800f188 <TIM_Base_SetConfig+0x124>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d103      	bne.n	800f164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	691a      	ldr	r2, [r3, #16]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2201      	movs	r2, #1
 800f168:	615a      	str	r2, [r3, #20]
}
 800f16a:	bf00      	nop
 800f16c:	3714      	adds	r7, #20
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	40010000 	.word	0x40010000
 800f17c:	40000400 	.word	0x40000400
 800f180:	40000800 	.word	0x40000800
 800f184:	40000c00 	.word	0x40000c00
 800f188:	40010400 	.word	0x40010400
 800f18c:	40014000 	.word	0x40014000
 800f190:	40014400 	.word	0x40014400
 800f194:	40014800 	.word	0x40014800
 800f198:	40001800 	.word	0x40001800
 800f19c:	40001c00 	.word	0x40001c00
 800f1a0:	40002000 	.word	0x40002000

0800f1a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b087      	sub	sp, #28
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a1b      	ldr	r3, [r3, #32]
 800f1b2:	f023 0201 	bic.w	r2, r3, #1
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6a1b      	ldr	r3, [r3, #32]
 800f1be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	699b      	ldr	r3, [r3, #24]
 800f1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	4b2b      	ldr	r3, [pc, #172]	; (800f27c <TIM_OC1_SetConfig+0xd8>)
 800f1d0:	4013      	ands	r3, r2
 800f1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f023 0303 	bic.w	r3, r3, #3
 800f1da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	f023 0302 	bic.w	r3, r3, #2
 800f1ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	697a      	ldr	r2, [r7, #20]
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4a21      	ldr	r2, [pc, #132]	; (800f280 <TIM_OC1_SetConfig+0xdc>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d003      	beq.n	800f208 <TIM_OC1_SetConfig+0x64>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4a20      	ldr	r2, [pc, #128]	; (800f284 <TIM_OC1_SetConfig+0xe0>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d10c      	bne.n	800f222 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	f023 0308 	bic.w	r3, r3, #8
 800f20e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	697a      	ldr	r2, [r7, #20]
 800f216:	4313      	orrs	r3, r2
 800f218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	f023 0304 	bic.w	r3, r3, #4
 800f220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4a16      	ldr	r2, [pc, #88]	; (800f280 <TIM_OC1_SetConfig+0xdc>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d003      	beq.n	800f232 <TIM_OC1_SetConfig+0x8e>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4a15      	ldr	r2, [pc, #84]	; (800f284 <TIM_OC1_SetConfig+0xe0>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d111      	bne.n	800f256 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	695b      	ldr	r3, [r3, #20]
 800f246:	693a      	ldr	r2, [r7, #16]
 800f248:	4313      	orrs	r3, r2
 800f24a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	699b      	ldr	r3, [r3, #24]
 800f250:	693a      	ldr	r2, [r7, #16]
 800f252:	4313      	orrs	r3, r2
 800f254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	693a      	ldr	r2, [r7, #16]
 800f25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	685a      	ldr	r2, [r3, #4]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	697a      	ldr	r2, [r7, #20]
 800f26e:	621a      	str	r2, [r3, #32]
}
 800f270:	bf00      	nop
 800f272:	371c      	adds	r7, #28
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr
 800f27c:	fffeff8f 	.word	0xfffeff8f
 800f280:	40010000 	.word	0x40010000
 800f284:	40010400 	.word	0x40010400

0800f288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f288:	b480      	push	{r7}
 800f28a:	b087      	sub	sp, #28
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6a1b      	ldr	r3, [r3, #32]
 800f296:	f023 0210 	bic.w	r2, r3, #16
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a1b      	ldr	r3, [r3, #32]
 800f2a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	699b      	ldr	r3, [r3, #24]
 800f2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	4b2e      	ldr	r3, [pc, #184]	; (800f36c <TIM_OC2_SetConfig+0xe4>)
 800f2b4:	4013      	ands	r3, r2
 800f2b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f2be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	021b      	lsls	r3, r3, #8
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	f023 0320 	bic.w	r3, r3, #32
 800f2d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	011b      	lsls	r3, r3, #4
 800f2da:	697a      	ldr	r2, [r7, #20]
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a23      	ldr	r2, [pc, #140]	; (800f370 <TIM_OC2_SetConfig+0xe8>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d003      	beq.n	800f2f0 <TIM_OC2_SetConfig+0x68>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	4a22      	ldr	r2, [pc, #136]	; (800f374 <TIM_OC2_SetConfig+0xec>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d10d      	bne.n	800f30c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	011b      	lsls	r3, r3, #4
 800f2fe:	697a      	ldr	r2, [r7, #20]
 800f300:	4313      	orrs	r3, r2
 800f302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f30a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a18      	ldr	r2, [pc, #96]	; (800f370 <TIM_OC2_SetConfig+0xe8>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d003      	beq.n	800f31c <TIM_OC2_SetConfig+0x94>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a17      	ldr	r2, [pc, #92]	; (800f374 <TIM_OC2_SetConfig+0xec>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d113      	bne.n	800f344 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f32a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	695b      	ldr	r3, [r3, #20]
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	693a      	ldr	r2, [r7, #16]
 800f334:	4313      	orrs	r3, r2
 800f336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	699b      	ldr	r3, [r3, #24]
 800f33c:	009b      	lsls	r3, r3, #2
 800f33e:	693a      	ldr	r2, [r7, #16]
 800f340:	4313      	orrs	r3, r2
 800f342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	693a      	ldr	r2, [r7, #16]
 800f348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	685a      	ldr	r2, [r3, #4]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	697a      	ldr	r2, [r7, #20]
 800f35c:	621a      	str	r2, [r3, #32]
}
 800f35e:	bf00      	nop
 800f360:	371c      	adds	r7, #28
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	feff8fff 	.word	0xfeff8fff
 800f370:	40010000 	.word	0x40010000
 800f374:	40010400 	.word	0x40010400

0800f378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f378:	b480      	push	{r7}
 800f37a:	b087      	sub	sp, #28
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6a1b      	ldr	r3, [r3, #32]
 800f392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	69db      	ldr	r3, [r3, #28]
 800f39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	4b2d      	ldr	r3, [pc, #180]	; (800f458 <TIM_OC3_SetConfig+0xe0>)
 800f3a4:	4013      	ands	r3, r2
 800f3a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f023 0303 	bic.w	r3, r3, #3
 800f3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f3c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	021b      	lsls	r3, r3, #8
 800f3c8:	697a      	ldr	r2, [r7, #20]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a22      	ldr	r2, [pc, #136]	; (800f45c <TIM_OC3_SetConfig+0xe4>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d003      	beq.n	800f3de <TIM_OC3_SetConfig+0x66>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a21      	ldr	r2, [pc, #132]	; (800f460 <TIM_OC3_SetConfig+0xe8>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d10d      	bne.n	800f3fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	021b      	lsls	r3, r3, #8
 800f3ec:	697a      	ldr	r2, [r7, #20]
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4a17      	ldr	r2, [pc, #92]	; (800f45c <TIM_OC3_SetConfig+0xe4>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d003      	beq.n	800f40a <TIM_OC3_SetConfig+0x92>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4a16      	ldr	r2, [pc, #88]	; (800f460 <TIM_OC3_SetConfig+0xe8>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d113      	bne.n	800f432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	695b      	ldr	r3, [r3, #20]
 800f41e:	011b      	lsls	r3, r3, #4
 800f420:	693a      	ldr	r2, [r7, #16]
 800f422:	4313      	orrs	r3, r2
 800f424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	699b      	ldr	r3, [r3, #24]
 800f42a:	011b      	lsls	r3, r3, #4
 800f42c:	693a      	ldr	r2, [r7, #16]
 800f42e:	4313      	orrs	r3, r2
 800f430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	693a      	ldr	r2, [r7, #16]
 800f436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	621a      	str	r2, [r3, #32]
}
 800f44c:	bf00      	nop
 800f44e:	371c      	adds	r7, #28
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr
 800f458:	fffeff8f 	.word	0xfffeff8f
 800f45c:	40010000 	.word	0x40010000
 800f460:	40010400 	.word	0x40010400

0800f464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f464:	b480      	push	{r7}
 800f466:	b087      	sub	sp, #28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6a1b      	ldr	r3, [r3, #32]
 800f472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6a1b      	ldr	r3, [r3, #32]
 800f47e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	69db      	ldr	r3, [r3, #28]
 800f48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	4b1e      	ldr	r3, [pc, #120]	; (800f508 <TIM_OC4_SetConfig+0xa4>)
 800f490:	4013      	ands	r3, r2
 800f492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f49a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	021b      	lsls	r3, r3, #8
 800f4a2:	68fa      	ldr	r2, [r7, #12]
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f4ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	031b      	lsls	r3, r3, #12
 800f4b6:	693a      	ldr	r2, [r7, #16]
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4a13      	ldr	r2, [pc, #76]	; (800f50c <TIM_OC4_SetConfig+0xa8>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d003      	beq.n	800f4cc <TIM_OC4_SetConfig+0x68>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	4a12      	ldr	r2, [pc, #72]	; (800f510 <TIM_OC4_SetConfig+0xac>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d109      	bne.n	800f4e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	695b      	ldr	r3, [r3, #20]
 800f4d8:	019b      	lsls	r3, r3, #6
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	697a      	ldr	r2, [r7, #20]
 800f4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	685a      	ldr	r2, [r3, #4]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	693a      	ldr	r2, [r7, #16]
 800f4f8:	621a      	str	r2, [r3, #32]
}
 800f4fa:	bf00      	nop
 800f4fc:	371c      	adds	r7, #28
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr
 800f506:	bf00      	nop
 800f508:	feff8fff 	.word	0xfeff8fff
 800f50c:	40010000 	.word	0x40010000
 800f510:	40010400 	.word	0x40010400

0800f514 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f514:	b480      	push	{r7}
 800f516:	b087      	sub	sp, #28
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6a1b      	ldr	r3, [r3, #32]
 800f522:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a1b      	ldr	r3, [r3, #32]
 800f52e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	4b1b      	ldr	r3, [pc, #108]	; (800f5ac <TIM_OC5_SetConfig+0x98>)
 800f540:	4013      	ands	r3, r2
 800f542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	4313      	orrs	r3, r2
 800f54c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f554:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	041b      	lsls	r3, r3, #16
 800f55c:	693a      	ldr	r2, [r7, #16]
 800f55e:	4313      	orrs	r3, r2
 800f560:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4a12      	ldr	r2, [pc, #72]	; (800f5b0 <TIM_OC5_SetConfig+0x9c>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d003      	beq.n	800f572 <TIM_OC5_SetConfig+0x5e>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4a11      	ldr	r2, [pc, #68]	; (800f5b4 <TIM_OC5_SetConfig+0xa0>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d109      	bne.n	800f586 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f578:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	695b      	ldr	r3, [r3, #20]
 800f57e:	021b      	lsls	r3, r3, #8
 800f580:	697a      	ldr	r2, [r7, #20]
 800f582:	4313      	orrs	r3, r2
 800f584:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	697a      	ldr	r2, [r7, #20]
 800f58a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	685a      	ldr	r2, [r3, #4]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	693a      	ldr	r2, [r7, #16]
 800f59e:	621a      	str	r2, [r3, #32]
}
 800f5a0:	bf00      	nop
 800f5a2:	371c      	adds	r7, #28
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr
 800f5ac:	fffeff8f 	.word	0xfffeff8f
 800f5b0:	40010000 	.word	0x40010000
 800f5b4:	40010400 	.word	0x40010400

0800f5b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b087      	sub	sp, #28
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6a1b      	ldr	r3, [r3, #32]
 800f5c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6a1b      	ldr	r3, [r3, #32]
 800f5d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	4b1c      	ldr	r3, [pc, #112]	; (800f654 <TIM_OC6_SetConfig+0x9c>)
 800f5e4:	4013      	ands	r3, r2
 800f5e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	021b      	lsls	r3, r3, #8
 800f5ee:	68fa      	ldr	r2, [r7, #12]
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f5fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	689b      	ldr	r3, [r3, #8]
 800f600:	051b      	lsls	r3, r3, #20
 800f602:	693a      	ldr	r2, [r7, #16]
 800f604:	4313      	orrs	r3, r2
 800f606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4a13      	ldr	r2, [pc, #76]	; (800f658 <TIM_OC6_SetConfig+0xa0>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d003      	beq.n	800f618 <TIM_OC6_SetConfig+0x60>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4a12      	ldr	r2, [pc, #72]	; (800f65c <TIM_OC6_SetConfig+0xa4>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d109      	bne.n	800f62c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f61e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	695b      	ldr	r3, [r3, #20]
 800f624:	029b      	lsls	r3, r3, #10
 800f626:	697a      	ldr	r2, [r7, #20]
 800f628:	4313      	orrs	r3, r2
 800f62a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	697a      	ldr	r2, [r7, #20]
 800f630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	685a      	ldr	r2, [r3, #4]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	693a      	ldr	r2, [r7, #16]
 800f644:	621a      	str	r2, [r3, #32]
}
 800f646:	bf00      	nop
 800f648:	371c      	adds	r7, #28
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	feff8fff 	.word	0xfeff8fff
 800f658:	40010000 	.word	0x40010000
 800f65c:	40010400 	.word	0x40010400

0800f660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f660:	b480      	push	{r7}
 800f662:	b087      	sub	sp, #28
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	6a1b      	ldr	r3, [r3, #32]
 800f670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6a1b      	ldr	r3, [r3, #32]
 800f676:	f023 0201 	bic.w	r2, r3, #1
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	699b      	ldr	r3, [r3, #24]
 800f682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f68a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	011b      	lsls	r3, r3, #4
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	4313      	orrs	r3, r2
 800f694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	f023 030a 	bic.w	r3, r3, #10
 800f69c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f69e:	697a      	ldr	r2, [r7, #20]
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	693a      	ldr	r2, [r7, #16]
 800f6aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	697a      	ldr	r2, [r7, #20]
 800f6b0:	621a      	str	r2, [r3, #32]
}
 800f6b2:	bf00      	nop
 800f6b4:	371c      	adds	r7, #28
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6be:	b480      	push	{r7}
 800f6c0:	b087      	sub	sp, #28
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	60f8      	str	r0, [r7, #12]
 800f6c6:	60b9      	str	r1, [r7, #8]
 800f6c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6a1b      	ldr	r3, [r3, #32]
 800f6ce:	f023 0210 	bic.w	r2, r3, #16
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	699b      	ldr	r3, [r3, #24]
 800f6da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6a1b      	ldr	r3, [r3, #32]
 800f6e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f6e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	031b      	lsls	r3, r3, #12
 800f6ee:	697a      	ldr	r2, [r7, #20]
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f6fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	693a      	ldr	r2, [r7, #16]
 800f702:	4313      	orrs	r3, r2
 800f704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	697a      	ldr	r2, [r7, #20]
 800f70a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	693a      	ldr	r2, [r7, #16]
 800f710:	621a      	str	r2, [r3, #32]
}
 800f712:	bf00      	nop
 800f714:	371c      	adds	r7, #28
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr

0800f71e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f71e:	b480      	push	{r7}
 800f720:	b085      	sub	sp, #20
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
 800f726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	689b      	ldr	r3, [r3, #8]
 800f72c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f736:	683a      	ldr	r2, [r7, #0]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	f043 0307 	orr.w	r3, r3, #7
 800f740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	609a      	str	r2, [r3, #8]
}
 800f748:	bf00      	nop
 800f74a:	3714      	adds	r7, #20
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr

0800f754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f754:	b480      	push	{r7}
 800f756:	b087      	sub	sp, #28
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f76e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	021a      	lsls	r2, r3, #8
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	431a      	orrs	r2, r3
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	697a      	ldr	r2, [r7, #20]
 800f77e:	4313      	orrs	r3, r2
 800f780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	697a      	ldr	r2, [r7, #20]
 800f786:	609a      	str	r2, [r3, #8]
}
 800f788:	bf00      	nop
 800f78a:	371c      	adds	r7, #28
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d101      	bne.n	800f7ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	e06d      	b.n	800f888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2202      	movs	r2, #2
 800f7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a30      	ldr	r2, [pc, #192]	; (800f894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d004      	beq.n	800f7e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a2f      	ldr	r2, [pc, #188]	; (800f898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d108      	bne.n	800f7f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f7e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	4313      	orrs	r3, r2
 800f802:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a20      	ldr	r2, [pc, #128]	; (800f894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d022      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f81e:	d01d      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4a1d      	ldr	r2, [pc, #116]	; (800f89c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d018      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4a1c      	ldr	r2, [pc, #112]	; (800f8a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d013      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4a1a      	ldr	r2, [pc, #104]	; (800f8a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d00e      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a15      	ldr	r2, [pc, #84]	; (800f898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d009      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a16      	ldr	r2, [pc, #88]	; (800f8a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d004      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a15      	ldr	r2, [pc, #84]	; (800f8ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d10c      	bne.n	800f876 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f862:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	4313      	orrs	r3, r2
 800f86c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	68ba      	ldr	r2, [r7, #8]
 800f874:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2201      	movs	r2, #1
 800f87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3714      	adds	r7, #20
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr
 800f894:	40010000 	.word	0x40010000
 800f898:	40010400 	.word	0x40010400
 800f89c:	40000400 	.word	0x40000400
 800f8a0:	40000800 	.word	0x40000800
 800f8a4:	40000c00 	.word	0x40000c00
 800f8a8:	40014000 	.word	0x40014000
 800f8ac:	40001800 	.word	0x40001800

0800f8b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b085      	sub	sp, #20
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d101      	bne.n	800f8cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f8c8:	2302      	movs	r3, #2
 800f8ca:	e065      	b.n	800f998 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4313      	orrs	r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	691b      	ldr	r3, [r3, #16]
 800f916:	4313      	orrs	r3, r2
 800f918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	695b      	ldr	r3, [r3, #20]
 800f924:	4313      	orrs	r3, r2
 800f926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f932:	4313      	orrs	r3, r2
 800f934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	699b      	ldr	r3, [r3, #24]
 800f940:	041b      	lsls	r3, r3, #16
 800f942:	4313      	orrs	r3, r2
 800f944:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	4a16      	ldr	r2, [pc, #88]	; (800f9a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d004      	beq.n	800f95a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4a14      	ldr	r2, [pc, #80]	; (800f9a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d115      	bne.n	800f986 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f964:	051b      	lsls	r3, r3, #20
 800f966:	4313      	orrs	r3, r2
 800f968:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	69db      	ldr	r3, [r3, #28]
 800f974:	4313      	orrs	r3, r2
 800f976:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	6a1b      	ldr	r3, [r3, #32]
 800f982:	4313      	orrs	r3, r2
 800f984:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	68fa      	ldr	r2, [r7, #12]
 800f98c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2200      	movs	r2, #0
 800f992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3714      	adds	r7, #20
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr
 800f9a4:	40010000 	.word	0x40010000
 800f9a8:	40010400 	.word	0x40010400

0800f9ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f9b4:	bf00      	nop
 800f9b6:	370c      	adds	r7, #12
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr

0800f9c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f9c8:	bf00      	nop
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr

0800f9d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f9dc:	bf00      	nop
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d101      	bne.n	800f9fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e040      	b.n	800fa7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d106      	bne.n	800fa10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7f3 fd1a 	bl	8003444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2224      	movs	r2, #36	; 0x24
 800fa14:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f022 0201 	bic.w	r2, r2, #1
 800fa24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 f8be 	bl	800fba8 <UART_SetConfig>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b01      	cmp	r3, #1
 800fa30:	d101      	bne.n	800fa36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fa32:	2301      	movs	r3, #1
 800fa34:	e022      	b.n	800fa7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d002      	beq.n	800fa44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f000 fb5c 	bl	80100fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	689a      	ldr	r2, [r3, #8]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f042 0201 	orr.w	r2, r2, #1
 800fa72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 fbe3 	bl	8010240 <UART_CheckIdleState>
 800fa7a:	4603      	mov	r3, r0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b08a      	sub	sp, #40	; 0x28
 800fa88:	af02      	add	r7, sp, #8
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	603b      	str	r3, [r7, #0]
 800fa90:	4613      	mov	r3, r2
 800fa92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa98:	2b20      	cmp	r3, #32
 800fa9a:	d17f      	bne.n	800fb9c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d002      	beq.n	800faa8 <HAL_UART_Transmit+0x24>
 800faa2:	88fb      	ldrh	r3, [r7, #6]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d101      	bne.n	800faac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800faa8:	2301      	movs	r3, #1
 800faaa:	e078      	b.n	800fb9e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fab2:	2b01      	cmp	r3, #1
 800fab4:	d101      	bne.n	800faba <HAL_UART_Transmit+0x36>
 800fab6:	2302      	movs	r3, #2
 800fab8:	e071      	b.n	800fb9e <HAL_UART_Transmit+0x11a>
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2201      	movs	r2, #1
 800fabe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2200      	movs	r2, #0
 800fac6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2221      	movs	r2, #33	; 0x21
 800facc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800face:	f7f7 fe0d 	bl	80076ec <HAL_GetTick>
 800fad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	88fa      	ldrh	r2, [r7, #6]
 800fad8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	88fa      	ldrh	r2, [r7, #6]
 800fae0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800faec:	d108      	bne.n	800fb00 <HAL_UART_Transmit+0x7c>
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	691b      	ldr	r3, [r3, #16]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d104      	bne.n	800fb00 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800faf6:	2300      	movs	r3, #0
 800faf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	61bb      	str	r3, [r7, #24]
 800fafe:	e003      	b.n	800fb08 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb04:	2300      	movs	r3, #0
 800fb06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800fb10:	e02c      	b.n	800fb6c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	2180      	movs	r1, #128	; 0x80
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f000 fbbe 	bl	801029e <UART_WaitOnFlagUntilTimeout>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d001      	beq.n	800fb2c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800fb28:	2303      	movs	r3, #3
 800fb2a:	e038      	b.n	800fb9e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d10b      	bne.n	800fb4a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	881b      	ldrh	r3, [r3, #0]
 800fb36:	461a      	mov	r2, r3
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fb40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	3302      	adds	r3, #2
 800fb46:	61bb      	str	r3, [r7, #24]
 800fb48:	e007      	b.n	800fb5a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	781a      	ldrb	r2, [r3, #0]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	3301      	adds	r3, #1
 800fb58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	3b01      	subs	r3, #1
 800fb64:	b29a      	uxth	r2, r3
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d1cc      	bne.n	800fb12 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	2140      	movs	r1, #64	; 0x40
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f000 fb8b 	bl	801029e <UART_WaitOnFlagUntilTimeout>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d001      	beq.n	800fb92 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800fb8e:	2303      	movs	r3, #3
 800fb90:	e005      	b.n	800fb9e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2220      	movs	r2, #32
 800fb96:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	e000      	b.n	800fb9e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800fb9c:	2302      	movs	r3, #2
  }
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3720      	adds	r7, #32
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
	...

0800fba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b088      	sub	sp, #32
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	689a      	ldr	r2, [r3, #8]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	691b      	ldr	r3, [r3, #16]
 800fbc0:	431a      	orrs	r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	695b      	ldr	r3, [r3, #20]
 800fbc6:	431a      	orrs	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	69db      	ldr	r3, [r3, #28]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	4bb1      	ldr	r3, [pc, #708]	; (800fe9c <UART_SetConfig+0x2f4>)
 800fbd8:	4013      	ands	r3, r2
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	6812      	ldr	r2, [r2, #0]
 800fbde:	6939      	ldr	r1, [r7, #16]
 800fbe0:	430b      	orrs	r3, r1
 800fbe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	68da      	ldr	r2, [r3, #12]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	430a      	orrs	r2, r1
 800fbf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	699b      	ldr	r3, [r3, #24]
 800fbfe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6a1b      	ldr	r3, [r3, #32]
 800fc04:	693a      	ldr	r2, [r7, #16]
 800fc06:	4313      	orrs	r3, r2
 800fc08:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	689b      	ldr	r3, [r3, #8]
 800fc10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	693a      	ldr	r2, [r7, #16]
 800fc1a:	430a      	orrs	r2, r1
 800fc1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	4a9f      	ldr	r2, [pc, #636]	; (800fea0 <UART_SetConfig+0x2f8>)
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d121      	bne.n	800fc6c <UART_SetConfig+0xc4>
 800fc28:	4b9e      	ldr	r3, [pc, #632]	; (800fea4 <UART_SetConfig+0x2fc>)
 800fc2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc2e:	f003 0303 	and.w	r3, r3, #3
 800fc32:	2b03      	cmp	r3, #3
 800fc34:	d816      	bhi.n	800fc64 <UART_SetConfig+0xbc>
 800fc36:	a201      	add	r2, pc, #4	; (adr r2, 800fc3c <UART_SetConfig+0x94>)
 800fc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3c:	0800fc4d 	.word	0x0800fc4d
 800fc40:	0800fc59 	.word	0x0800fc59
 800fc44:	0800fc53 	.word	0x0800fc53
 800fc48:	0800fc5f 	.word	0x0800fc5f
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	77fb      	strb	r3, [r7, #31]
 800fc50:	e151      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fc52:	2302      	movs	r3, #2
 800fc54:	77fb      	strb	r3, [r7, #31]
 800fc56:	e14e      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fc58:	2304      	movs	r3, #4
 800fc5a:	77fb      	strb	r3, [r7, #31]
 800fc5c:	e14b      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fc5e:	2308      	movs	r3, #8
 800fc60:	77fb      	strb	r3, [r7, #31]
 800fc62:	e148      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fc64:	2310      	movs	r3, #16
 800fc66:	77fb      	strb	r3, [r7, #31]
 800fc68:	bf00      	nop
 800fc6a:	e144      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4a8d      	ldr	r2, [pc, #564]	; (800fea8 <UART_SetConfig+0x300>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d134      	bne.n	800fce0 <UART_SetConfig+0x138>
 800fc76:	4b8b      	ldr	r3, [pc, #556]	; (800fea4 <UART_SetConfig+0x2fc>)
 800fc78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc7c:	f003 030c 	and.w	r3, r3, #12
 800fc80:	2b0c      	cmp	r3, #12
 800fc82:	d829      	bhi.n	800fcd8 <UART_SetConfig+0x130>
 800fc84:	a201      	add	r2, pc, #4	; (adr r2, 800fc8c <UART_SetConfig+0xe4>)
 800fc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc8a:	bf00      	nop
 800fc8c:	0800fcc1 	.word	0x0800fcc1
 800fc90:	0800fcd9 	.word	0x0800fcd9
 800fc94:	0800fcd9 	.word	0x0800fcd9
 800fc98:	0800fcd9 	.word	0x0800fcd9
 800fc9c:	0800fccd 	.word	0x0800fccd
 800fca0:	0800fcd9 	.word	0x0800fcd9
 800fca4:	0800fcd9 	.word	0x0800fcd9
 800fca8:	0800fcd9 	.word	0x0800fcd9
 800fcac:	0800fcc7 	.word	0x0800fcc7
 800fcb0:	0800fcd9 	.word	0x0800fcd9
 800fcb4:	0800fcd9 	.word	0x0800fcd9
 800fcb8:	0800fcd9 	.word	0x0800fcd9
 800fcbc:	0800fcd3 	.word	0x0800fcd3
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	77fb      	strb	r3, [r7, #31]
 800fcc4:	e117      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fcc6:	2302      	movs	r3, #2
 800fcc8:	77fb      	strb	r3, [r7, #31]
 800fcca:	e114      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fccc:	2304      	movs	r3, #4
 800fcce:	77fb      	strb	r3, [r7, #31]
 800fcd0:	e111      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fcd2:	2308      	movs	r3, #8
 800fcd4:	77fb      	strb	r3, [r7, #31]
 800fcd6:	e10e      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fcd8:	2310      	movs	r3, #16
 800fcda:	77fb      	strb	r3, [r7, #31]
 800fcdc:	bf00      	nop
 800fcde:	e10a      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4a71      	ldr	r2, [pc, #452]	; (800feac <UART_SetConfig+0x304>)
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d120      	bne.n	800fd2c <UART_SetConfig+0x184>
 800fcea:	4b6e      	ldr	r3, [pc, #440]	; (800fea4 <UART_SetConfig+0x2fc>)
 800fcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fcf4:	2b10      	cmp	r3, #16
 800fcf6:	d00f      	beq.n	800fd18 <UART_SetConfig+0x170>
 800fcf8:	2b10      	cmp	r3, #16
 800fcfa:	d802      	bhi.n	800fd02 <UART_SetConfig+0x15a>
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d005      	beq.n	800fd0c <UART_SetConfig+0x164>
 800fd00:	e010      	b.n	800fd24 <UART_SetConfig+0x17c>
 800fd02:	2b20      	cmp	r3, #32
 800fd04:	d005      	beq.n	800fd12 <UART_SetConfig+0x16a>
 800fd06:	2b30      	cmp	r3, #48	; 0x30
 800fd08:	d009      	beq.n	800fd1e <UART_SetConfig+0x176>
 800fd0a:	e00b      	b.n	800fd24 <UART_SetConfig+0x17c>
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	77fb      	strb	r3, [r7, #31]
 800fd10:	e0f1      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd12:	2302      	movs	r3, #2
 800fd14:	77fb      	strb	r3, [r7, #31]
 800fd16:	e0ee      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd18:	2304      	movs	r3, #4
 800fd1a:	77fb      	strb	r3, [r7, #31]
 800fd1c:	e0eb      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd1e:	2308      	movs	r3, #8
 800fd20:	77fb      	strb	r3, [r7, #31]
 800fd22:	e0e8      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd24:	2310      	movs	r3, #16
 800fd26:	77fb      	strb	r3, [r7, #31]
 800fd28:	bf00      	nop
 800fd2a:	e0e4      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a5f      	ldr	r2, [pc, #380]	; (800feb0 <UART_SetConfig+0x308>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d120      	bne.n	800fd78 <UART_SetConfig+0x1d0>
 800fd36:	4b5b      	ldr	r3, [pc, #364]	; (800fea4 <UART_SetConfig+0x2fc>)
 800fd38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fd40:	2b40      	cmp	r3, #64	; 0x40
 800fd42:	d00f      	beq.n	800fd64 <UART_SetConfig+0x1bc>
 800fd44:	2b40      	cmp	r3, #64	; 0x40
 800fd46:	d802      	bhi.n	800fd4e <UART_SetConfig+0x1a6>
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d005      	beq.n	800fd58 <UART_SetConfig+0x1b0>
 800fd4c:	e010      	b.n	800fd70 <UART_SetConfig+0x1c8>
 800fd4e:	2b80      	cmp	r3, #128	; 0x80
 800fd50:	d005      	beq.n	800fd5e <UART_SetConfig+0x1b6>
 800fd52:	2bc0      	cmp	r3, #192	; 0xc0
 800fd54:	d009      	beq.n	800fd6a <UART_SetConfig+0x1c2>
 800fd56:	e00b      	b.n	800fd70 <UART_SetConfig+0x1c8>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	77fb      	strb	r3, [r7, #31]
 800fd5c:	e0cb      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd5e:	2302      	movs	r3, #2
 800fd60:	77fb      	strb	r3, [r7, #31]
 800fd62:	e0c8      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd64:	2304      	movs	r3, #4
 800fd66:	77fb      	strb	r3, [r7, #31]
 800fd68:	e0c5      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd6a:	2308      	movs	r3, #8
 800fd6c:	77fb      	strb	r3, [r7, #31]
 800fd6e:	e0c2      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd70:	2310      	movs	r3, #16
 800fd72:	77fb      	strb	r3, [r7, #31]
 800fd74:	bf00      	nop
 800fd76:	e0be      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a4d      	ldr	r2, [pc, #308]	; (800feb4 <UART_SetConfig+0x30c>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d124      	bne.n	800fdcc <UART_SetConfig+0x224>
 800fd82:	4b48      	ldr	r3, [pc, #288]	; (800fea4 <UART_SetConfig+0x2fc>)
 800fd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd90:	d012      	beq.n	800fdb8 <UART_SetConfig+0x210>
 800fd92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd96:	d802      	bhi.n	800fd9e <UART_SetConfig+0x1f6>
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d007      	beq.n	800fdac <UART_SetConfig+0x204>
 800fd9c:	e012      	b.n	800fdc4 <UART_SetConfig+0x21c>
 800fd9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fda2:	d006      	beq.n	800fdb2 <UART_SetConfig+0x20a>
 800fda4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fda8:	d009      	beq.n	800fdbe <UART_SetConfig+0x216>
 800fdaa:	e00b      	b.n	800fdc4 <UART_SetConfig+0x21c>
 800fdac:	2300      	movs	r3, #0
 800fdae:	77fb      	strb	r3, [r7, #31]
 800fdb0:	e0a1      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	77fb      	strb	r3, [r7, #31]
 800fdb6:	e09e      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fdb8:	2304      	movs	r3, #4
 800fdba:	77fb      	strb	r3, [r7, #31]
 800fdbc:	e09b      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fdbe:	2308      	movs	r3, #8
 800fdc0:	77fb      	strb	r3, [r7, #31]
 800fdc2:	e098      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fdc4:	2310      	movs	r3, #16
 800fdc6:	77fb      	strb	r3, [r7, #31]
 800fdc8:	bf00      	nop
 800fdca:	e094      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a39      	ldr	r2, [pc, #228]	; (800feb8 <UART_SetConfig+0x310>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d124      	bne.n	800fe20 <UART_SetConfig+0x278>
 800fdd6:	4b33      	ldr	r3, [pc, #204]	; (800fea4 <UART_SetConfig+0x2fc>)
 800fdd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fde0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fde4:	d012      	beq.n	800fe0c <UART_SetConfig+0x264>
 800fde6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdea:	d802      	bhi.n	800fdf2 <UART_SetConfig+0x24a>
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d007      	beq.n	800fe00 <UART_SetConfig+0x258>
 800fdf0:	e012      	b.n	800fe18 <UART_SetConfig+0x270>
 800fdf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdf6:	d006      	beq.n	800fe06 <UART_SetConfig+0x25e>
 800fdf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fdfc:	d009      	beq.n	800fe12 <UART_SetConfig+0x26a>
 800fdfe:	e00b      	b.n	800fe18 <UART_SetConfig+0x270>
 800fe00:	2301      	movs	r3, #1
 800fe02:	77fb      	strb	r3, [r7, #31]
 800fe04:	e077      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe06:	2302      	movs	r3, #2
 800fe08:	77fb      	strb	r3, [r7, #31]
 800fe0a:	e074      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe0c:	2304      	movs	r3, #4
 800fe0e:	77fb      	strb	r3, [r7, #31]
 800fe10:	e071      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe12:	2308      	movs	r3, #8
 800fe14:	77fb      	strb	r3, [r7, #31]
 800fe16:	e06e      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe18:	2310      	movs	r3, #16
 800fe1a:	77fb      	strb	r3, [r7, #31]
 800fe1c:	bf00      	nop
 800fe1e:	e06a      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4a25      	ldr	r2, [pc, #148]	; (800febc <UART_SetConfig+0x314>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d124      	bne.n	800fe74 <UART_SetConfig+0x2cc>
 800fe2a:	4b1e      	ldr	r3, [pc, #120]	; (800fea4 <UART_SetConfig+0x2fc>)
 800fe2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe30:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fe34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe38:	d012      	beq.n	800fe60 <UART_SetConfig+0x2b8>
 800fe3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe3e:	d802      	bhi.n	800fe46 <UART_SetConfig+0x29e>
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d007      	beq.n	800fe54 <UART_SetConfig+0x2ac>
 800fe44:	e012      	b.n	800fe6c <UART_SetConfig+0x2c4>
 800fe46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe4a:	d006      	beq.n	800fe5a <UART_SetConfig+0x2b2>
 800fe4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe50:	d009      	beq.n	800fe66 <UART_SetConfig+0x2be>
 800fe52:	e00b      	b.n	800fe6c <UART_SetConfig+0x2c4>
 800fe54:	2300      	movs	r3, #0
 800fe56:	77fb      	strb	r3, [r7, #31]
 800fe58:	e04d      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe5a:	2302      	movs	r3, #2
 800fe5c:	77fb      	strb	r3, [r7, #31]
 800fe5e:	e04a      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe60:	2304      	movs	r3, #4
 800fe62:	77fb      	strb	r3, [r7, #31]
 800fe64:	e047      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe66:	2308      	movs	r3, #8
 800fe68:	77fb      	strb	r3, [r7, #31]
 800fe6a:	e044      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe6c:	2310      	movs	r3, #16
 800fe6e:	77fb      	strb	r3, [r7, #31]
 800fe70:	bf00      	nop
 800fe72:	e040      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a11      	ldr	r2, [pc, #68]	; (800fec0 <UART_SetConfig+0x318>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d139      	bne.n	800fef2 <UART_SetConfig+0x34a>
 800fe7e:	4b09      	ldr	r3, [pc, #36]	; (800fea4 <UART_SetConfig+0x2fc>)
 800fe80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fe88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe8c:	d027      	beq.n	800fede <UART_SetConfig+0x336>
 800fe8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe92:	d817      	bhi.n	800fec4 <UART_SetConfig+0x31c>
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d01c      	beq.n	800fed2 <UART_SetConfig+0x32a>
 800fe98:	e027      	b.n	800feea <UART_SetConfig+0x342>
 800fe9a:	bf00      	nop
 800fe9c:	efff69f3 	.word	0xefff69f3
 800fea0:	40011000 	.word	0x40011000
 800fea4:	40023800 	.word	0x40023800
 800fea8:	40004400 	.word	0x40004400
 800feac:	40004800 	.word	0x40004800
 800feb0:	40004c00 	.word	0x40004c00
 800feb4:	40005000 	.word	0x40005000
 800feb8:	40011400 	.word	0x40011400
 800febc:	40007800 	.word	0x40007800
 800fec0:	40007c00 	.word	0x40007c00
 800fec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fec8:	d006      	beq.n	800fed8 <UART_SetConfig+0x330>
 800feca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fece:	d009      	beq.n	800fee4 <UART_SetConfig+0x33c>
 800fed0:	e00b      	b.n	800feea <UART_SetConfig+0x342>
 800fed2:	2300      	movs	r3, #0
 800fed4:	77fb      	strb	r3, [r7, #31]
 800fed6:	e00e      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fed8:	2302      	movs	r3, #2
 800feda:	77fb      	strb	r3, [r7, #31]
 800fedc:	e00b      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fede:	2304      	movs	r3, #4
 800fee0:	77fb      	strb	r3, [r7, #31]
 800fee2:	e008      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fee4:	2308      	movs	r3, #8
 800fee6:	77fb      	strb	r3, [r7, #31]
 800fee8:	e005      	b.n	800fef6 <UART_SetConfig+0x34e>
 800feea:	2310      	movs	r3, #16
 800feec:	77fb      	strb	r3, [r7, #31]
 800feee:	bf00      	nop
 800fef0:	e001      	b.n	800fef6 <UART_SetConfig+0x34e>
 800fef2:	2310      	movs	r3, #16
 800fef4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	69db      	ldr	r3, [r3, #28]
 800fefa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fefe:	d17f      	bne.n	8010000 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ff00:	7ffb      	ldrb	r3, [r7, #31]
 800ff02:	2b08      	cmp	r3, #8
 800ff04:	d85c      	bhi.n	800ffc0 <UART_SetConfig+0x418>
 800ff06:	a201      	add	r2, pc, #4	; (adr r2, 800ff0c <UART_SetConfig+0x364>)
 800ff08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff0c:	0800ff31 	.word	0x0800ff31
 800ff10:	0800ff51 	.word	0x0800ff51
 800ff14:	0800ff71 	.word	0x0800ff71
 800ff18:	0800ffc1 	.word	0x0800ffc1
 800ff1c:	0800ff89 	.word	0x0800ff89
 800ff20:	0800ffc1 	.word	0x0800ffc1
 800ff24:	0800ffc1 	.word	0x0800ffc1
 800ff28:	0800ffc1 	.word	0x0800ffc1
 800ff2c:	0800ffa9 	.word	0x0800ffa9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff30:	f7fc feb8 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
 800ff34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	005a      	lsls	r2, r3, #1
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	085b      	lsrs	r3, r3, #1
 800ff40:	441a      	add	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	61bb      	str	r3, [r7, #24]
        break;
 800ff4e:	e03a      	b.n	800ffc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff50:	f7fc febc 	bl	800cccc <HAL_RCC_GetPCLK2Freq>
 800ff54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	005a      	lsls	r2, r3, #1
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	085b      	lsrs	r3, r3, #1
 800ff60:	441a      	add	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	61bb      	str	r3, [r7, #24]
        break;
 800ff6e:	e02a      	b.n	800ffc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	085a      	lsrs	r2, r3, #1
 800ff76:	4b5f      	ldr	r3, [pc, #380]	; (80100f4 <UART_SetConfig+0x54c>)
 800ff78:	4413      	add	r3, r2
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	6852      	ldr	r2, [r2, #4]
 800ff7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	61bb      	str	r3, [r7, #24]
        break;
 800ff86:	e01e      	b.n	800ffc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff88:	f7fc fdce 	bl	800cb28 <HAL_RCC_GetSysClockFreq>
 800ff8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	005a      	lsls	r2, r3, #1
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	085b      	lsrs	r3, r3, #1
 800ff98:	441a      	add	r2, r3
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffa2:	b29b      	uxth	r3, r3
 800ffa4:	61bb      	str	r3, [r7, #24]
        break;
 800ffa6:	e00e      	b.n	800ffc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	085b      	lsrs	r3, r3, #1
 800ffae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	61bb      	str	r3, [r7, #24]
        break;
 800ffbe:	e002      	b.n	800ffc6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	75fb      	strb	r3, [r7, #23]
        break;
 800ffc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	2b0f      	cmp	r3, #15
 800ffca:	d916      	bls.n	800fffa <UART_SetConfig+0x452>
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffd2:	d212      	bcs.n	800fffa <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffd4:	69bb      	ldr	r3, [r7, #24]
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	f023 030f 	bic.w	r3, r3, #15
 800ffdc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	085b      	lsrs	r3, r3, #1
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	f003 0307 	and.w	r3, r3, #7
 800ffe8:	b29a      	uxth	r2, r3
 800ffea:	897b      	ldrh	r3, [r7, #10]
 800ffec:	4313      	orrs	r3, r2
 800ffee:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	897a      	ldrh	r2, [r7, #10]
 800fff6:	60da      	str	r2, [r3, #12]
 800fff8:	e070      	b.n	80100dc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800fffa:	2301      	movs	r3, #1
 800fffc:	75fb      	strb	r3, [r7, #23]
 800fffe:	e06d      	b.n	80100dc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8010000:	7ffb      	ldrb	r3, [r7, #31]
 8010002:	2b08      	cmp	r3, #8
 8010004:	d859      	bhi.n	80100ba <UART_SetConfig+0x512>
 8010006:	a201      	add	r2, pc, #4	; (adr r2, 801000c <UART_SetConfig+0x464>)
 8010008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801000c:	08010031 	.word	0x08010031
 8010010:	0801004f 	.word	0x0801004f
 8010014:	0801006d 	.word	0x0801006d
 8010018:	080100bb 	.word	0x080100bb
 801001c:	08010085 	.word	0x08010085
 8010020:	080100bb 	.word	0x080100bb
 8010024:	080100bb 	.word	0x080100bb
 8010028:	080100bb 	.word	0x080100bb
 801002c:	080100a3 	.word	0x080100a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010030:	f7fc fe38 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
 8010034:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	085a      	lsrs	r2, r3, #1
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	441a      	add	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	fbb2 f3f3 	udiv	r3, r2, r3
 8010048:	b29b      	uxth	r3, r3
 801004a:	61bb      	str	r3, [r7, #24]
        break;
 801004c:	e038      	b.n	80100c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801004e:	f7fc fe3d 	bl	800cccc <HAL_RCC_GetPCLK2Freq>
 8010052:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	085a      	lsrs	r2, r3, #1
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	441a      	add	r2, r3
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	fbb2 f3f3 	udiv	r3, r2, r3
 8010066:	b29b      	uxth	r3, r3
 8010068:	61bb      	str	r3, [r7, #24]
        break;
 801006a:	e029      	b.n	80100c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	085a      	lsrs	r2, r3, #1
 8010072:	4b21      	ldr	r3, [pc, #132]	; (80100f8 <UART_SetConfig+0x550>)
 8010074:	4413      	add	r3, r2
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	6852      	ldr	r2, [r2, #4]
 801007a:	fbb3 f3f2 	udiv	r3, r3, r2
 801007e:	b29b      	uxth	r3, r3
 8010080:	61bb      	str	r3, [r7, #24]
        break;
 8010082:	e01d      	b.n	80100c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010084:	f7fc fd50 	bl	800cb28 <HAL_RCC_GetSysClockFreq>
 8010088:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	085a      	lsrs	r2, r3, #1
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	441a      	add	r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	fbb2 f3f3 	udiv	r3, r2, r3
 801009c:	b29b      	uxth	r3, r3
 801009e:	61bb      	str	r3, [r7, #24]
        break;
 80100a0:	e00e      	b.n	80100c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	085b      	lsrs	r3, r3, #1
 80100a8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	61bb      	str	r3, [r7, #24]
        break;
 80100b8:	e002      	b.n	80100c0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80100ba:	2301      	movs	r3, #1
 80100bc:	75fb      	strb	r3, [r7, #23]
        break;
 80100be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	2b0f      	cmp	r3, #15
 80100c4:	d908      	bls.n	80100d8 <UART_SetConfig+0x530>
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100cc:	d204      	bcs.n	80100d8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	69ba      	ldr	r2, [r7, #24]
 80100d4:	60da      	str	r2, [r3, #12]
 80100d6:	e001      	b.n	80100dc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80100d8:	2301      	movs	r3, #1
 80100da:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80100e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3720      	adds	r7, #32
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	01e84800 	.word	0x01e84800
 80100f8:	00f42400 	.word	0x00f42400

080100fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010108:	f003 0301 	and.w	r3, r3, #1
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00a      	beq.n	8010126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	430a      	orrs	r2, r1
 8010124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801012a:	f003 0302 	and.w	r3, r3, #2
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00a      	beq.n	8010148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	430a      	orrs	r2, r1
 8010146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014c:	f003 0304 	and.w	r3, r3, #4
 8010150:	2b00      	cmp	r3, #0
 8010152:	d00a      	beq.n	801016a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	430a      	orrs	r2, r1
 8010168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016e:	f003 0308 	and.w	r3, r3, #8
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00a      	beq.n	801018c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	430a      	orrs	r2, r1
 801018a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010190:	f003 0310 	and.w	r3, r3, #16
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00a      	beq.n	80101ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	430a      	orrs	r2, r1
 80101ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b2:	f003 0320 	and.w	r3, r3, #32
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00a      	beq.n	80101d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	430a      	orrs	r2, r1
 80101ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d01a      	beq.n	8010212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	430a      	orrs	r2, r1
 80101f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101fa:	d10a      	bne.n	8010212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	430a      	orrs	r2, r1
 8010210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801021a:	2b00      	cmp	r3, #0
 801021c:	d00a      	beq.n	8010234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	430a      	orrs	r2, r1
 8010232:	605a      	str	r2, [r3, #4]
  }
}
 8010234:	bf00      	nop
 8010236:	370c      	adds	r7, #12
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr

08010240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af02      	add	r7, sp, #8
 8010246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801024e:	f7f7 fa4d 	bl	80076ec <HAL_GetTick>
 8010252:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f003 0308 	and.w	r3, r3, #8
 801025e:	2b08      	cmp	r3, #8
 8010260:	d10e      	bne.n	8010280 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010262:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2200      	movs	r2, #0
 801026c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 f814 	bl	801029e <UART_WaitOnFlagUntilTimeout>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d001      	beq.n	8010280 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801027c:	2303      	movs	r3, #3
 801027e:	e00a      	b.n	8010296 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2220      	movs	r2, #32
 8010284:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2220      	movs	r2, #32
 801028a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2200      	movs	r2, #0
 8010290:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3710      	adds	r7, #16
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}

0801029e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801029e:	b580      	push	{r7, lr}
 80102a0:	b084      	sub	sp, #16
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	60f8      	str	r0, [r7, #12]
 80102a6:	60b9      	str	r1, [r7, #8]
 80102a8:	603b      	str	r3, [r7, #0]
 80102aa:	4613      	mov	r3, r2
 80102ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102ae:	e05d      	b.n	801036c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b6:	d059      	beq.n	801036c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102b8:	f7f7 fa18 	bl	80076ec <HAL_GetTick>
 80102bc:	4602      	mov	r2, r0
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	69ba      	ldr	r2, [r7, #24]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d302      	bcc.n	80102ce <UART_WaitOnFlagUntilTimeout+0x30>
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d11b      	bne.n	8010306 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80102dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	689a      	ldr	r2, [r3, #8]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f022 0201 	bic.w	r2, r2, #1
 80102ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2220      	movs	r2, #32
 80102f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2220      	movs	r2, #32
 80102f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8010302:	2303      	movs	r3, #3
 8010304:	e042      	b.n	801038c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	f003 0304 	and.w	r3, r3, #4
 8010310:	2b00      	cmp	r3, #0
 8010312:	d02b      	beq.n	801036c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	69db      	ldr	r3, [r3, #28]
 801031a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801031e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010322:	d123      	bne.n	801036c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801032c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801033c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	689a      	ldr	r2, [r3, #8]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f022 0201 	bic.w	r2, r2, #1
 801034c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2220      	movs	r2, #32
 8010352:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2220      	movs	r2, #32
 8010358:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2220      	movs	r2, #32
 801035e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2200      	movs	r2, #0
 8010364:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8010368:	2303      	movs	r3, #3
 801036a:	e00f      	b.n	801038c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	69da      	ldr	r2, [r3, #28]
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	4013      	ands	r3, r2
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	429a      	cmp	r2, r3
 801037a:	bf0c      	ite	eq
 801037c:	2301      	moveq	r3, #1
 801037e:	2300      	movne	r3, #0
 8010380:	b2db      	uxtb	r3, r3
 8010382:	461a      	mov	r2, r3
 8010384:	79fb      	ldrb	r3, [r7, #7]
 8010386:	429a      	cmp	r2, r3
 8010388:	d092      	beq.n	80102b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801038a:	2300      	movs	r3, #0
}
 801038c:	4618      	mov	r0, r3
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 801039e:	2300      	movs	r3, #0
 80103a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80103a2:	2300      	movs	r3, #0
 80103a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d027      	beq.n	80103fe <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	4b2f      	ldr	r3, [pc, #188]	; (8010474 <FMC_SDRAM_Init+0xe0>)
 80103b8:	4013      	ands	r3, r2
 80103ba:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80103c4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80103ca:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80103d0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80103d6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80103dc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80103e2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80103e8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80103ee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	68fa      	ldr	r2, [r7, #12]
 80103fa:	601a      	str	r2, [r3, #0]
 80103fc:	e032      	b.n	8010464 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801040a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010414:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801041a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801041c:	68fa      	ldr	r2, [r7, #12]
 801041e:	4313      	orrs	r3, r2
 8010420:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010428:	68ba      	ldr	r2, [r7, #8]
 801042a:	4b12      	ldr	r3, [pc, #72]	; (8010474 <FMC_SDRAM_Init+0xe0>)
 801042c:	4013      	ands	r3, r2
 801042e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010438:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 801043e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8010444:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 801044a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8010450:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	4313      	orrs	r3, r2
 8010456:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	68fa      	ldr	r2, [r7, #12]
 801045c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	68ba      	ldr	r2, [r7, #8]
 8010462:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8010464:	2300      	movs	r3, #0
}
 8010466:	4618      	mov	r0, r3
 8010468:	3714      	adds	r7, #20
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr
 8010472:	bf00      	nop
 8010474:	ffff8000 	.word	0xffff8000

08010478 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010478:	b480      	push	{r7}
 801047a:	b087      	sub	sp, #28
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8010484:	2300      	movs	r3, #0
 8010486:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8010488:	2300      	movs	r3, #0
 801048a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b01      	cmp	r3, #1
 8010490:	d02e      	beq.n	80104f0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801049e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80104ae:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	3b01      	subs	r3, #1
 80104b6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80104b8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	3b01      	subs	r3, #1
 80104c0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80104c2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	691b      	ldr	r3, [r3, #16]
 80104c8:	3b01      	subs	r3, #1
 80104ca:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80104cc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	695b      	ldr	r3, [r3, #20]
 80104d2:	3b01      	subs	r3, #1
 80104d4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80104d6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	699b      	ldr	r3, [r3, #24]
 80104dc:	3b01      	subs	r3, #1
 80104de:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80104e0:	4313      	orrs	r3, r2
 80104e2:	697a      	ldr	r2, [r7, #20]
 80104e4:	4313      	orrs	r3, r2
 80104e6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	609a      	str	r2, [r3, #8]
 80104ee:	e039      	b.n	8010564 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	689b      	ldr	r3, [r3, #8]
 80104f4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	4b1e      	ldr	r3, [pc, #120]	; (8010574 <FMC_SDRAM_Timing_Init+0xfc>)
 80104fa:	4013      	ands	r3, r2
 80104fc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	3b01      	subs	r3, #1
 8010504:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	695b      	ldr	r3, [r3, #20]
 801050a:	3b01      	subs	r3, #1
 801050c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801050e:	4313      	orrs	r3, r2
 8010510:	697a      	ldr	r2, [r7, #20]
 8010512:	4313      	orrs	r3, r2
 8010514:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010522:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	3b01      	subs	r3, #1
 8010530:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010532:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	689b      	ldr	r3, [r3, #8]
 8010538:	3b01      	subs	r3, #1
 801053a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801053c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	691b      	ldr	r3, [r3, #16]
 8010542:	3b01      	subs	r3, #1
 8010544:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010546:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	699b      	ldr	r3, [r3, #24]
 801054c:	3b01      	subs	r3, #1
 801054e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010550:	4313      	orrs	r3, r2
 8010552:	693a      	ldr	r2, [r7, #16]
 8010554:	4313      	orrs	r3, r2
 8010556:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	697a      	ldr	r2, [r7, #20]
 801055c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	693a      	ldr	r2, [r7, #16]
 8010562:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8010564:	2300      	movs	r3, #0
}
 8010566:	4618      	mov	r0, r3
 8010568:	371c      	adds	r7, #28
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	ff0f0fff 	.word	0xff0f0fff

08010578 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010578:	b480      	push	{r7}
 801057a:	b087      	sub	sp, #28
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8010584:	2300      	movs	r3, #0
 8010586:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8010590:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	689b      	ldr	r3, [r3, #8]
 8010596:	3b01      	subs	r3, #1
 8010598:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 801059a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80105a2:	4313      	orrs	r3, r2
 80105a4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80105a6:	697a      	ldr	r2, [r7, #20]
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80105ac:	2300      	movs	r3, #0
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	371c      	adds	r7, #28
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr

080105ba <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80105ba:	b480      	push	{r7}
 80105bc:	b083      	sub	sp, #12
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
 80105c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	695a      	ldr	r2, [r3, #20]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	005b      	lsls	r3, r3, #1
 80105cc:	431a      	orrs	r2, r3
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80105d2:	2300      	movs	r3, #0
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80105e0:	b084      	sub	sp, #16
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b084      	sub	sp, #16
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	f107 001c 	add.w	r0, r7, #28
 80105ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80105f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d120      	bne.n	801063a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	68da      	ldr	r2, [r3, #12]
 8010608:	4b20      	ldr	r3, [pc, #128]	; (801068c <USB_CoreInit+0xac>)
 801060a:	4013      	ands	r3, r2
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801061c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801061e:	2b01      	cmp	r3, #1
 8010620:	d105      	bne.n	801062e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 f942 	bl	80108b8 <USB_CoreReset>
 8010634:	4603      	mov	r3, r0
 8010636:	73fb      	strb	r3, [r7, #15]
 8010638:	e010      	b.n	801065c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 f936 	bl	80108b8 <USB_CoreReset>
 801064c:	4603      	mov	r3, r0
 801064e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010654:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 801065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065e:	2b01      	cmp	r3, #1
 8010660:	d10b      	bne.n	801067a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	689b      	ldr	r3, [r3, #8]
 8010666:	f043 0206 	orr.w	r2, r3, #6
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	689b      	ldr	r3, [r3, #8]
 8010672:	f043 0220 	orr.w	r2, r3, #32
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801067a:	7bfb      	ldrb	r3, [r7, #15]
}
 801067c:	4618      	mov	r0, r3
 801067e:	3710      	adds	r7, #16
 8010680:	46bd      	mov	sp, r7
 8010682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010686:	b004      	add	sp, #16
 8010688:	4770      	bx	lr
 801068a:	bf00      	nop
 801068c:	ffbdffbf 	.word	0xffbdffbf

08010690 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010690:	b480      	push	{r7}
 8010692:	b083      	sub	sp, #12
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	689b      	ldr	r3, [r3, #8]
 801069c:	f043 0201 	orr.w	r2, r3, #1
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	370c      	adds	r7, #12
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr

080106b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80106b2:	b480      	push	{r7}
 80106b4:	b083      	sub	sp, #12
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	689b      	ldr	r3, [r3, #8]
 80106be:	f023 0201 	bic.w	r2, r3, #1
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80106c6:	2300      	movs	r3, #0
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	460b      	mov	r3, r1
 80106de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80106ec:	78fb      	ldrb	r3, [r7, #3]
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d106      	bne.n	8010700 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	60da      	str	r2, [r3, #12]
 80106fe:	e00b      	b.n	8010718 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010700:	78fb      	ldrb	r3, [r7, #3]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d106      	bne.n	8010714 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	68db      	ldr	r3, [r3, #12]
 801070a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	60da      	str	r2, [r3, #12]
 8010712:	e001      	b.n	8010718 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010714:	2301      	movs	r3, #1
 8010716:	e003      	b.n	8010720 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010718:	2032      	movs	r0, #50	; 0x32
 801071a:	f7f6 fff3 	bl	8007704 <HAL_Delay>

  return HAL_OK;
 801071e:	2300      	movs	r3, #0
}
 8010720:	4618      	mov	r0, r3
 8010722:	3708      	adds	r7, #8
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010732:	2300      	movs	r3, #0
 8010734:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	019b      	lsls	r3, r3, #6
 801073a:	f043 0220 	orr.w	r2, r3, #32
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	3301      	adds	r3, #1
 8010746:	60fb      	str	r3, [r7, #12]
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	4a09      	ldr	r2, [pc, #36]	; (8010770 <USB_FlushTxFifo+0x48>)
 801074c:	4293      	cmp	r3, r2
 801074e:	d901      	bls.n	8010754 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010750:	2303      	movs	r3, #3
 8010752:	e006      	b.n	8010762 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	691b      	ldr	r3, [r3, #16]
 8010758:	f003 0320 	and.w	r3, r3, #32
 801075c:	2b20      	cmp	r3, #32
 801075e:	d0f0      	beq.n	8010742 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3714      	adds	r7, #20
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	00030d40 	.word	0x00030d40

08010774 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010774:	b480      	push	{r7}
 8010776:	b085      	sub	sp, #20
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801077c:	2300      	movs	r3, #0
 801077e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2210      	movs	r2, #16
 8010784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	3301      	adds	r3, #1
 801078a:	60fb      	str	r3, [r7, #12]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	4a09      	ldr	r2, [pc, #36]	; (80107b4 <USB_FlushRxFifo+0x40>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d901      	bls.n	8010798 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010794:	2303      	movs	r3, #3
 8010796:	e006      	b.n	80107a6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	691b      	ldr	r3, [r3, #16]
 801079c:	f003 0310 	and.w	r3, r3, #16
 80107a0:	2b10      	cmp	r3, #16
 80107a2:	d0f0      	beq.n	8010786 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80107a4:	2300      	movs	r3, #0
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3714      	adds	r7, #20
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	00030d40 	.word	0x00030d40

080107b8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b089      	sub	sp, #36	; 0x24
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	4611      	mov	r1, r2
 80107c4:	461a      	mov	r2, r3
 80107c6:	460b      	mov	r3, r1
 80107c8:	71fb      	strb	r3, [r7, #7]
 80107ca:	4613      	mov	r3, r2
 80107cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80107d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d11a      	bne.n	8010814 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80107de:	88bb      	ldrh	r3, [r7, #4]
 80107e0:	3303      	adds	r3, #3
 80107e2:	089b      	lsrs	r3, r3, #2
 80107e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80107e6:	2300      	movs	r3, #0
 80107e8:	61bb      	str	r3, [r7, #24]
 80107ea:	e00f      	b.n	801080c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80107ec:	79fb      	ldrb	r3, [r7, #7]
 80107ee:	031a      	lsls	r2, r3, #12
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	4413      	add	r3, r2
 80107f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107f8:	461a      	mov	r2, r3
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	3304      	adds	r3, #4
 8010804:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010806:	69bb      	ldr	r3, [r7, #24]
 8010808:	3301      	adds	r3, #1
 801080a:	61bb      	str	r3, [r7, #24]
 801080c:	69ba      	ldr	r2, [r7, #24]
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	429a      	cmp	r2, r3
 8010812:	d3eb      	bcc.n	80107ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010814:	2300      	movs	r3, #0
}
 8010816:	4618      	mov	r0, r3
 8010818:	3724      	adds	r7, #36	; 0x24
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr

08010822 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010822:	b480      	push	{r7}
 8010824:	b089      	sub	sp, #36	; 0x24
 8010826:	af00      	add	r7, sp, #0
 8010828:	60f8      	str	r0, [r7, #12]
 801082a:	60b9      	str	r1, [r7, #8]
 801082c:	4613      	mov	r3, r2
 801082e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010838:	88fb      	ldrh	r3, [r7, #6]
 801083a:	3303      	adds	r3, #3
 801083c:	089b      	lsrs	r3, r3, #2
 801083e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010840:	2300      	movs	r3, #0
 8010842:	61bb      	str	r3, [r7, #24]
 8010844:	e00b      	b.n	801085e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	601a      	str	r2, [r3, #0]
    pDest++;
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	3304      	adds	r3, #4
 8010856:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010858:	69bb      	ldr	r3, [r7, #24]
 801085a:	3301      	adds	r3, #1
 801085c:	61bb      	str	r3, [r7, #24]
 801085e:	69ba      	ldr	r2, [r7, #24]
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	429a      	cmp	r2, r3
 8010864:	d3ef      	bcc.n	8010846 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010866:	69fb      	ldr	r3, [r7, #28]
}
 8010868:	4618      	mov	r0, r3
 801086a:	3724      	adds	r7, #36	; 0x24
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr

08010874 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	695b      	ldr	r3, [r3, #20]
 8010880:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	699b      	ldr	r3, [r3, #24]
 8010886:	68fa      	ldr	r2, [r7, #12]
 8010888:	4013      	ands	r3, r2
 801088a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801088c:	68fb      	ldr	r3, [r7, #12]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3714      	adds	r7, #20
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr

0801089a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801089a:	b480      	push	{r7}
 801089c:	b083      	sub	sp, #12
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	695b      	ldr	r3, [r3, #20]
 80108a6:	f003 0301 	and.w	r3, r3, #1
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	370c      	adds	r7, #12
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr
	...

080108b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80108c0:	2300      	movs	r3, #0
 80108c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	3301      	adds	r3, #1
 80108c8:	60fb      	str	r3, [r7, #12]
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	4a13      	ldr	r2, [pc, #76]	; (801091c <USB_CoreReset+0x64>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d901      	bls.n	80108d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80108d2:	2303      	movs	r3, #3
 80108d4:	e01b      	b.n	801090e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	691b      	ldr	r3, [r3, #16]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	daf2      	bge.n	80108c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80108de:	2300      	movs	r3, #0
 80108e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	691b      	ldr	r3, [r3, #16]
 80108e6:	f043 0201 	orr.w	r2, r3, #1
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	3301      	adds	r3, #1
 80108f2:	60fb      	str	r3, [r7, #12]
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	4a09      	ldr	r2, [pc, #36]	; (801091c <USB_CoreReset+0x64>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d901      	bls.n	8010900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80108fc:	2303      	movs	r3, #3
 80108fe:	e006      	b.n	801090e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	691b      	ldr	r3, [r3, #16]
 8010904:	f003 0301 	and.w	r3, r3, #1
 8010908:	2b01      	cmp	r3, #1
 801090a:	d0f0      	beq.n	80108ee <USB_CoreReset+0x36>

  return HAL_OK;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	3714      	adds	r7, #20
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop
 801091c:	00030d40 	.word	0x00030d40

08010920 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010920:	b084      	sub	sp, #16
 8010922:	b580      	push	{r7, lr}
 8010924:	b084      	sub	sp, #16
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
 801092a:	f107 001c 	add.w	r0, r7, #28
 801092e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801093c:	461a      	mov	r2, r3
 801093e:	2300      	movs	r3, #0
 8010940:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010946:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010956:	2b00      	cmp	r3, #0
 8010958:	d018      	beq.n	801098c <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095c:	2b01      	cmp	r3, #1
 801095e:	d10a      	bne.n	8010976 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	68ba      	ldr	r2, [r7, #8]
 801096a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801096e:	f043 0304 	orr.w	r3, r3, #4
 8010972:	6013      	str	r3, [r2, #0]
 8010974:	e014      	b.n	80109a0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	68ba      	ldr	r2, [r7, #8]
 8010980:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010984:	f023 0304 	bic.w	r3, r3, #4
 8010988:	6013      	str	r3, [r2, #0]
 801098a:	e009      	b.n	80109a0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	68ba      	ldr	r2, [r7, #8]
 8010996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801099a:	f023 0304 	bic.w	r3, r3, #4
 801099e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80109a0:	2110      	movs	r1, #16
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f7ff fec0 	bl	8010728 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff fee3 	bl	8010774 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80109ae:	2300      	movs	r3, #0
 80109b0:	60fb      	str	r3, [r7, #12]
 80109b2:	e015      	b.n	80109e0 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	015a      	lsls	r2, r3, #5
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	4413      	add	r3, r2
 80109bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80109c0:	461a      	mov	r2, r3
 80109c2:	f04f 33ff 	mov.w	r3, #4294967295
 80109c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	015a      	lsls	r2, r3, #5
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	4413      	add	r3, r2
 80109d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80109d4:	461a      	mov	r2, r3
 80109d6:	2300      	movs	r3, #0
 80109d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	3301      	adds	r3, #1
 80109de:	60fb      	str	r3, [r7, #12]
 80109e0:	6a3b      	ldr	r3, [r7, #32]
 80109e2:	68fa      	ldr	r2, [r7, #12]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d3e5      	bcc.n	80109b4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80109e8:	2101      	movs	r1, #1
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 f8ac 	bl	8010b48 <USB_DriveVbus>

  HAL_Delay(200U);
 80109f0:	20c8      	movs	r0, #200	; 0xc8
 80109f2:	f7f6 fe87 	bl	8007704 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2200      	movs	r2, #0
 80109fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010a02:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d00b      	beq.n	8010a28 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	4a14      	ldr	r2, [pc, #80]	; (8010a6c <USB_HostInit+0x14c>)
 8010a1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4a13      	ldr	r2, [pc, #76]	; (8010a70 <USB_HostInit+0x150>)
 8010a22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8010a26:	e009      	b.n	8010a3c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2280      	movs	r2, #128	; 0x80
 8010a2c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4a10      	ldr	r2, [pc, #64]	; (8010a74 <USB_HostInit+0x154>)
 8010a32:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	4a10      	ldr	r2, [pc, #64]	; (8010a78 <USB_HostInit+0x158>)
 8010a38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d105      	bne.n	8010a4e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	699b      	ldr	r3, [r3, #24]
 8010a46:	f043 0210 	orr.w	r2, r3, #16
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	699a      	ldr	r2, [r3, #24]
 8010a52:	4b0a      	ldr	r3, [pc, #40]	; (8010a7c <USB_HostInit+0x15c>)
 8010a54:	4313      	orrs	r3, r2
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3710      	adds	r7, #16
 8010a60:	46bd      	mov	sp, r7
 8010a62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a66:	b004      	add	sp, #16
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop
 8010a6c:	01000200 	.word	0x01000200
 8010a70:	00e00300 	.word	0x00e00300
 8010a74:	00600080 	.word	0x00600080
 8010a78:	004000e0 	.word	0x004000e0
 8010a7c:	a3200008 	.word	0xa3200008

08010a80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010a80:	b480      	push	{r7}
 8010a82:	b085      	sub	sp, #20
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	68fa      	ldr	r2, [r7, #12]
 8010a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010a9e:	f023 0303 	bic.w	r3, r3, #3
 8010aa2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	78fb      	ldrb	r3, [r7, #3]
 8010aae:	f003 0303 	and.w	r3, r3, #3
 8010ab2:	68f9      	ldr	r1, [r7, #12]
 8010ab4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010ab8:	4313      	orrs	r3, r2
 8010aba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010abc:	78fb      	ldrb	r3, [r7, #3]
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d107      	bne.n	8010ad2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010ac8:	461a      	mov	r2, r3
 8010aca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8010ace:	6053      	str	r3, [r2, #4]
 8010ad0:	e009      	b.n	8010ae6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8010ad2:	78fb      	ldrb	r3, [r7, #3]
 8010ad4:	2b02      	cmp	r3, #2
 8010ad6:	d106      	bne.n	8010ae6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010ade:	461a      	mov	r2, r3
 8010ae0:	f241 7370 	movw	r3, #6000	; 0x1770
 8010ae4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8010ae6:	2300      	movs	r3, #0
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3714      	adds	r7, #20
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8010b00:	2300      	movs	r3, #0
 8010b02:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010b14:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	68fa      	ldr	r2, [r7, #12]
 8010b1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b22:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8010b24:	2064      	movs	r0, #100	; 0x64
 8010b26:	f7f6 fded 	bl	8007704 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	68fa      	ldr	r2, [r7, #12]
 8010b2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b36:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8010b38:	200a      	movs	r0, #10
 8010b3a:	f7f6 fde3 	bl	8007704 <HAL_Delay>

  return HAL_OK;
 8010b3e:	2300      	movs	r3, #0
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3710      	adds	r7, #16
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b085      	sub	sp, #20
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	460b      	mov	r3, r1
 8010b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010b6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d109      	bne.n	8010b8c <USB_DriveVbus+0x44>
 8010b78:	78fb      	ldrb	r3, [r7, #3]
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	d106      	bne.n	8010b8c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	68fa      	ldr	r2, [r7, #12]
 8010b82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010b86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010b8a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b96:	d109      	bne.n	8010bac <USB_DriveVbus+0x64>
 8010b98:	78fb      	ldrb	r3, [r7, #3]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d106      	bne.n	8010bac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	68fa      	ldr	r2, [r7, #12]
 8010ba2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010baa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8010bac:	2300      	movs	r3, #0
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3714      	adds	r7, #20
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb8:	4770      	bx	lr

08010bba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010bba:	b480      	push	{r7}
 8010bbc:	b085      	sub	sp, #20
 8010bbe:	af00      	add	r7, sp, #0
 8010bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	0c5b      	lsrs	r3, r3, #17
 8010bd8:	f003 0303 	and.w	r3, r3, #3
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b085      	sub	sp, #20
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	b29b      	uxth	r3, r3
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3714      	adds	r7, #20
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr
	...

08010c0c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b087      	sub	sp, #28
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	4608      	mov	r0, r1
 8010c16:	4611      	mov	r1, r2
 8010c18:	461a      	mov	r2, r3
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	70fb      	strb	r3, [r7, #3]
 8010c1e:	460b      	mov	r3, r1
 8010c20:	70bb      	strb	r3, [r7, #2]
 8010c22:	4613      	mov	r3, r2
 8010c24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8010c26:	2300      	movs	r3, #0
 8010c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8010c2e:	78fb      	ldrb	r3, [r7, #3]
 8010c30:	015a      	lsls	r2, r3, #5
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	4413      	add	r3, r2
 8010c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c40:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8010c42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c46:	2b03      	cmp	r3, #3
 8010c48:	d87e      	bhi.n	8010d48 <USB_HC_Init+0x13c>
 8010c4a:	a201      	add	r2, pc, #4	; (adr r2, 8010c50 <USB_HC_Init+0x44>)
 8010c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c50:	08010c61 	.word	0x08010c61
 8010c54:	08010d0b 	.word	0x08010d0b
 8010c58:	08010c61 	.word	0x08010c61
 8010c5c:	08010ccd 	.word	0x08010ccd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010c60:	78fb      	ldrb	r3, [r7, #3]
 8010c62:	015a      	lsls	r2, r3, #5
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	4413      	add	r3, r2
 8010c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	f240 439d 	movw	r3, #1181	; 0x49d
 8010c72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8010c74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	da10      	bge.n	8010c9e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010c7c:	78fb      	ldrb	r3, [r7, #3]
 8010c7e:	015a      	lsls	r2, r3, #5
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	4413      	add	r3, r2
 8010c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	78fa      	ldrb	r2, [r7, #3]
 8010c8c:	0151      	lsls	r1, r2, #5
 8010c8e:	68ba      	ldr	r2, [r7, #8]
 8010c90:	440a      	add	r2, r1
 8010c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c9a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8010c9c:	e057      	b.n	8010d4e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d051      	beq.n	8010d4e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8010caa:	78fb      	ldrb	r3, [r7, #3]
 8010cac:	015a      	lsls	r2, r3, #5
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	4413      	add	r3, r2
 8010cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	78fa      	ldrb	r2, [r7, #3]
 8010cba:	0151      	lsls	r1, r2, #5
 8010cbc:	68ba      	ldr	r2, [r7, #8]
 8010cbe:	440a      	add	r2, r1
 8010cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010cc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010cc8:	60d3      	str	r3, [r2, #12]
      break;
 8010cca:	e040      	b.n	8010d4e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010ccc:	78fb      	ldrb	r3, [r7, #3]
 8010cce:	015a      	lsls	r2, r3, #5
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010cd8:	461a      	mov	r2, r3
 8010cda:	f240 639d 	movw	r3, #1693	; 0x69d
 8010cde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010ce0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	da34      	bge.n	8010d52 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010ce8:	78fb      	ldrb	r3, [r7, #3]
 8010cea:	015a      	lsls	r2, r3, #5
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	4413      	add	r3, r2
 8010cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010cf4:	68db      	ldr	r3, [r3, #12]
 8010cf6:	78fa      	ldrb	r2, [r7, #3]
 8010cf8:	0151      	lsls	r1, r2, #5
 8010cfa:	68ba      	ldr	r2, [r7, #8]
 8010cfc:	440a      	add	r2, r1
 8010cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010d06:	60d3      	str	r3, [r2, #12]
      }

      break;
 8010d08:	e023      	b.n	8010d52 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010d0a:	78fb      	ldrb	r3, [r7, #3]
 8010d0c:	015a      	lsls	r2, r3, #5
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	4413      	add	r3, r2
 8010d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d16:	461a      	mov	r2, r3
 8010d18:	f240 2325 	movw	r3, #549	; 0x225
 8010d1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010d1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	da17      	bge.n	8010d56 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8010d26:	78fb      	ldrb	r3, [r7, #3]
 8010d28:	015a      	lsls	r2, r3, #5
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	78fa      	ldrb	r2, [r7, #3]
 8010d36:	0151      	lsls	r1, r2, #5
 8010d38:	68ba      	ldr	r2, [r7, #8]
 8010d3a:	440a      	add	r2, r1
 8010d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010d40:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8010d44:	60d3      	str	r3, [r2, #12]
      }
      break;
 8010d46:	e006      	b.n	8010d56 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8010d4c:	e004      	b.n	8010d58 <USB_HC_Init+0x14c>
      break;
 8010d4e:	bf00      	nop
 8010d50:	e002      	b.n	8010d58 <USB_HC_Init+0x14c>
      break;
 8010d52:	bf00      	nop
 8010d54:	e000      	b.n	8010d58 <USB_HC_Init+0x14c>
      break;
 8010d56:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d5e:	699a      	ldr	r2, [r3, #24]
 8010d60:	78fb      	ldrb	r3, [r7, #3]
 8010d62:	f003 030f 	and.w	r3, r3, #15
 8010d66:	2101      	movs	r1, #1
 8010d68:	fa01 f303 	lsl.w	r3, r1, r3
 8010d6c:	68b9      	ldr	r1, [r7, #8]
 8010d6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d72:	4313      	orrs	r3, r2
 8010d74:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	699b      	ldr	r3, [r3, #24]
 8010d7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8010d82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	da03      	bge.n	8010d92 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8010d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d8e:	613b      	str	r3, [r7, #16]
 8010d90:	e001      	b.n	8010d96 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8010d92:	2300      	movs	r3, #0
 8010d94:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8010d96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d9a:	2b02      	cmp	r3, #2
 8010d9c:	d103      	bne.n	8010da6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8010d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010da2:	60fb      	str	r3, [r7, #12]
 8010da4:	e001      	b.n	8010daa <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8010da6:	2300      	movs	r3, #0
 8010da8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010daa:	787b      	ldrb	r3, [r7, #1]
 8010dac:	059b      	lsls	r3, r3, #22
 8010dae:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010db2:	78bb      	ldrb	r3, [r7, #2]
 8010db4:	02db      	lsls	r3, r3, #11
 8010db6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010dba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010dbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010dc0:	049b      	lsls	r3, r3, #18
 8010dc2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010dc6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8010dc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010dce:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010dd4:	78fb      	ldrb	r3, [r7, #3]
 8010dd6:	0159      	lsls	r1, r3, #5
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	440b      	add	r3, r1
 8010ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010de0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010de6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8010de8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010dec:	2b03      	cmp	r3, #3
 8010dee:	d10f      	bne.n	8010e10 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8010df0:	78fb      	ldrb	r3, [r7, #3]
 8010df2:	015a      	lsls	r2, r3, #5
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	4413      	add	r3, r2
 8010df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	78fa      	ldrb	r2, [r7, #3]
 8010e00:	0151      	lsls	r1, r2, #5
 8010e02:	68ba      	ldr	r2, [r7, #8]
 8010e04:	440a      	add	r2, r1
 8010e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010e0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010e0e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8010e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	371c      	adds	r7, #28
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop

08010e20 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b08c      	sub	sp, #48	; 0x30
 8010e24:	af02      	add	r7, sp, #8
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	785b      	ldrb	r3, [r3, #1]
 8010e36:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8010e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e3c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d028      	beq.n	8010e9c <USB_HC_StartXfer+0x7c>
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	791b      	ldrb	r3, [r3, #4]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d124      	bne.n	8010e9c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8010e52:	79fb      	ldrb	r3, [r7, #7]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d10b      	bne.n	8010e70 <USB_HC_StartXfer+0x50>
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	795b      	ldrb	r3, [r3, #5]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d107      	bne.n	8010e70 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	785b      	ldrb	r3, [r3, #1]
 8010e64:	4619      	mov	r1, r3
 8010e66:	68f8      	ldr	r0, [r7, #12]
 8010e68:	f000 fa2e 	bl	80112c8 <USB_DoPing>
      return HAL_OK;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	e112      	b.n	8011096 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8010e70:	79fb      	ldrb	r3, [r7, #7]
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d112      	bne.n	8010e9c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	015a      	lsls	r2, r3, #5
 8010e7a:	6a3b      	ldr	r3, [r7, #32]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	69fa      	ldr	r2, [r7, #28]
 8010e86:	0151      	lsls	r1, r2, #5
 8010e88:	6a3a      	ldr	r2, [r7, #32]
 8010e8a:	440a      	add	r2, r1
 8010e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010e90:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8010e94:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	691b      	ldr	r3, [r3, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d018      	beq.n	8010ed6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	691b      	ldr	r3, [r3, #16]
 8010ea8:	68ba      	ldr	r2, [r7, #8]
 8010eaa:	8912      	ldrh	r2, [r2, #8]
 8010eac:	4413      	add	r3, r2
 8010eae:	3b01      	subs	r3, #1
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	8912      	ldrh	r2, [r2, #8]
 8010eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010eb8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8010eba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010ebc:	8b7b      	ldrh	r3, [r7, #26]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d90b      	bls.n	8010eda <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8010ec2:	8b7b      	ldrh	r3, [r7, #26]
 8010ec4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8010ec6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ec8:	68ba      	ldr	r2, [r7, #8]
 8010eca:	8912      	ldrh	r2, [r2, #8]
 8010ecc:	fb02 f203 	mul.w	r2, r2, r3
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	611a      	str	r2, [r3, #16]
 8010ed4:	e001      	b.n	8010eda <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	78db      	ldrb	r3, [r3, #3]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d006      	beq.n	8010ef0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8010ee2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ee4:	68ba      	ldr	r2, [r7, #8]
 8010ee6:	8912      	ldrh	r2, [r2, #8]
 8010ee8:	fb02 f203 	mul.w	r2, r2, r3
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	691b      	ldr	r3, [r3, #16]
 8010ef4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010ef8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010efa:	04d9      	lsls	r1, r3, #19
 8010efc:	4b68      	ldr	r3, [pc, #416]	; (80110a0 <USB_HC_StartXfer+0x280>)
 8010efe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8010f00:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	7a9b      	ldrb	r3, [r3, #10]
 8010f06:	075b      	lsls	r3, r3, #29
 8010f08:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8010f0c:	69f9      	ldr	r1, [r7, #28]
 8010f0e:	0148      	lsls	r0, r1, #5
 8010f10:	6a39      	ldr	r1, [r7, #32]
 8010f12:	4401      	add	r1, r0
 8010f14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010f18:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8010f1a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8010f1c:	79fb      	ldrb	r3, [r7, #7]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d009      	beq.n	8010f36 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	68d9      	ldr	r1, [r3, #12]
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	015a      	lsls	r2, r3, #5
 8010f2a:	6a3b      	ldr	r3, [r7, #32]
 8010f2c:	4413      	add	r3, r2
 8010f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010f32:	460a      	mov	r2, r1
 8010f34:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8010f36:	6a3b      	ldr	r3, [r7, #32]
 8010f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010f3c:	689b      	ldr	r3, [r3, #8]
 8010f3e:	f003 0301 	and.w	r3, r3, #1
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	bf0c      	ite	eq
 8010f46:	2301      	moveq	r3, #1
 8010f48:	2300      	movne	r3, #0
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	015a      	lsls	r2, r3, #5
 8010f52:	6a3b      	ldr	r3, [r7, #32]
 8010f54:	4413      	add	r3, r2
 8010f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	69fa      	ldr	r2, [r7, #28]
 8010f5e:	0151      	lsls	r1, r2, #5
 8010f60:	6a3a      	ldr	r2, [r7, #32]
 8010f62:	440a      	add	r2, r1
 8010f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010f68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010f6c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	015a      	lsls	r2, r3, #5
 8010f72:	6a3b      	ldr	r3, [r7, #32]
 8010f74:	4413      	add	r3, r2
 8010f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	7e7b      	ldrb	r3, [r7, #25]
 8010f7e:	075b      	lsls	r3, r3, #29
 8010f80:	69f9      	ldr	r1, [r7, #28]
 8010f82:	0148      	lsls	r0, r1, #5
 8010f84:	6a39      	ldr	r1, [r7, #32]
 8010f86:	4401      	add	r1, r0
 8010f88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	015a      	lsls	r2, r3, #5
 8010f94:	6a3b      	ldr	r3, [r7, #32]
 8010f96:	4413      	add	r3, r2
 8010f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	4a41      	ldr	r2, [pc, #260]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fa0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010fa2:	4b40      	ldr	r3, [pc, #256]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010faa:	4a3e      	ldr	r2, [pc, #248]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fac:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	78db      	ldrb	r3, [r3, #3]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d006      	beq.n	8010fc4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8010fb6:	4b3b      	ldr	r3, [pc, #236]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010fbe:	4a39      	ldr	r2, [pc, #228]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fc0:	6013      	str	r3, [r2, #0]
 8010fc2:	e005      	b.n	8010fd0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8010fc4:	4b37      	ldr	r3, [pc, #220]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010fcc:	4a35      	ldr	r2, [pc, #212]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fce:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010fd0:	4b34      	ldr	r3, [pc, #208]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010fd8:	4a32      	ldr	r2, [pc, #200]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fda:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	015a      	lsls	r2, r3, #5
 8010fe0:	6a3b      	ldr	r3, [r7, #32]
 8010fe2:	4413      	add	r3, r2
 8010fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010fe8:	461a      	mov	r2, r3
 8010fea:	4b2e      	ldr	r3, [pc, #184]	; (80110a4 <USB_HC_StartXfer+0x284>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8010ff0:	79fb      	ldrb	r3, [r7, #7]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d14e      	bne.n	8011094 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	78db      	ldrb	r3, [r3, #3]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d14a      	bne.n	8011094 <USB_HC_StartXfer+0x274>
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	691b      	ldr	r3, [r3, #16]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d046      	beq.n	8011094 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	79db      	ldrb	r3, [r3, #7]
 801100a:	2b03      	cmp	r3, #3
 801100c:	d830      	bhi.n	8011070 <USB_HC_StartXfer+0x250>
 801100e:	a201      	add	r2, pc, #4	; (adr r2, 8011014 <USB_HC_StartXfer+0x1f4>)
 8011010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011014:	08011025 	.word	0x08011025
 8011018:	08011049 	.word	0x08011049
 801101c:	08011025 	.word	0x08011025
 8011020:	08011049 	.word	0x08011049
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	691b      	ldr	r3, [r3, #16]
 8011028:	3303      	adds	r3, #3
 801102a:	089b      	lsrs	r3, r3, #2
 801102c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801102e:	8afa      	ldrh	r2, [r7, #22]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011034:	b29b      	uxth	r3, r3
 8011036:	429a      	cmp	r2, r3
 8011038:	d91c      	bls.n	8011074 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	699b      	ldr	r3, [r3, #24]
 801103e:	f043 0220 	orr.w	r2, r3, #32
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	619a      	str	r2, [r3, #24]
          }
          break;
 8011046:	e015      	b.n	8011074 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	691b      	ldr	r3, [r3, #16]
 801104c:	3303      	adds	r3, #3
 801104e:	089b      	lsrs	r3, r3, #2
 8011050:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8011052:	8afa      	ldrh	r2, [r7, #22]
 8011054:	6a3b      	ldr	r3, [r7, #32]
 8011056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801105a:	691b      	ldr	r3, [r3, #16]
 801105c:	b29b      	uxth	r3, r3
 801105e:	429a      	cmp	r2, r3
 8011060:	d90a      	bls.n	8011078 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	699b      	ldr	r3, [r3, #24]
 8011066:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	619a      	str	r2, [r3, #24]
          }
          break;
 801106e:	e003      	b.n	8011078 <USB_HC_StartXfer+0x258>

        default:
          break;
 8011070:	bf00      	nop
 8011072:	e002      	b.n	801107a <USB_HC_StartXfer+0x25a>
          break;
 8011074:	bf00      	nop
 8011076:	e000      	b.n	801107a <USB_HC_StartXfer+0x25a>
          break;
 8011078:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	68d9      	ldr	r1, [r3, #12]
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	785a      	ldrb	r2, [r3, #1]
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	691b      	ldr	r3, [r3, #16]
 8011086:	b298      	uxth	r0, r3
 8011088:	2300      	movs	r3, #0
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	4603      	mov	r3, r0
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f7ff fb92 	bl	80107b8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8011094:	2300      	movs	r3, #0
}
 8011096:	4618      	mov	r0, r3
 8011098:	3728      	adds	r7, #40	; 0x28
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	1ff80000 	.word	0x1ff80000
 80110a4:	20001170 	.word	0x20001170

080110a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b085      	sub	sp, #20
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80110ba:	695b      	ldr	r3, [r3, #20]
 80110bc:	b29b      	uxth	r3, r3
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3714      	adds	r7, #20
 80110c2:	46bd      	mov	sp, r7
 80110c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c8:	4770      	bx	lr

080110ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80110ca:	b480      	push	{r7}
 80110cc:	b087      	sub	sp, #28
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
 80110d2:	460b      	mov	r3, r1
 80110d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80110da:	78fb      	ldrb	r3, [r7, #3]
 80110dc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80110de:	2300      	movs	r3, #0
 80110e0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	015a      	lsls	r2, r3, #5
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	4413      	add	r3, r2
 80110ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	0c9b      	lsrs	r3, r3, #18
 80110f2:	f003 0303 	and.w	r3, r3, #3
 80110f6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d002      	beq.n	8011104 <USB_HC_Halt+0x3a>
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	2b02      	cmp	r3, #2
 8011102:	d16c      	bne.n	80111de <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	015a      	lsls	r2, r3, #5
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	4413      	add	r3, r2
 801110c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	68fa      	ldr	r2, [r7, #12]
 8011114:	0151      	lsls	r1, r2, #5
 8011116:	693a      	ldr	r2, [r7, #16]
 8011118:	440a      	add	r2, r1
 801111a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801111e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011122:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011128:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801112c:	2b00      	cmp	r3, #0
 801112e:	d143      	bne.n	80111b8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	015a      	lsls	r2, r3, #5
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	4413      	add	r3, r2
 8011138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	68fa      	ldr	r2, [r7, #12]
 8011140:	0151      	lsls	r1, r2, #5
 8011142:	693a      	ldr	r2, [r7, #16]
 8011144:	440a      	add	r2, r1
 8011146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801114a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801114e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	015a      	lsls	r2, r3, #5
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	4413      	add	r3, r2
 8011158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	68fa      	ldr	r2, [r7, #12]
 8011160:	0151      	lsls	r1, r2, #5
 8011162:	693a      	ldr	r2, [r7, #16]
 8011164:	440a      	add	r2, r1
 8011166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801116a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801116e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	015a      	lsls	r2, r3, #5
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	4413      	add	r3, r2
 8011178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	68fa      	ldr	r2, [r7, #12]
 8011180:	0151      	lsls	r1, r2, #5
 8011182:	693a      	ldr	r2, [r7, #16]
 8011184:	440a      	add	r2, r1
 8011186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801118a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801118e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	3301      	adds	r3, #1
 8011194:	617b      	str	r3, [r7, #20]
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801119c:	d81d      	bhi.n	80111da <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	015a      	lsls	r2, r3, #5
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	4413      	add	r3, r2
 80111a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80111b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80111b4:	d0ec      	beq.n	8011190 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80111b6:	e080      	b.n	80112ba <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	015a      	lsls	r2, r3, #5
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	4413      	add	r3, r2
 80111c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	68fa      	ldr	r2, [r7, #12]
 80111c8:	0151      	lsls	r1, r2, #5
 80111ca:	693a      	ldr	r2, [r7, #16]
 80111cc:	440a      	add	r2, r1
 80111ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80111d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80111d6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80111d8:	e06f      	b.n	80112ba <USB_HC_Halt+0x1f0>
          break;
 80111da:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80111dc:	e06d      	b.n	80112ba <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	015a      	lsls	r2, r3, #5
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	4413      	add	r3, r2
 80111e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	68fa      	ldr	r2, [r7, #12]
 80111ee:	0151      	lsls	r1, r2, #5
 80111f0:	693a      	ldr	r2, [r7, #16]
 80111f2:	440a      	add	r2, r1
 80111f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80111f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80111fc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011204:	691b      	ldr	r3, [r3, #16]
 8011206:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801120a:	2b00      	cmp	r3, #0
 801120c:	d143      	bne.n	8011296 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	015a      	lsls	r2, r3, #5
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	4413      	add	r3, r2
 8011216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	0151      	lsls	r1, r2, #5
 8011220:	693a      	ldr	r2, [r7, #16]
 8011222:	440a      	add	r2, r1
 8011224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801122c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	015a      	lsls	r2, r3, #5
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	4413      	add	r3, r2
 8011236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	68fa      	ldr	r2, [r7, #12]
 801123e:	0151      	lsls	r1, r2, #5
 8011240:	693a      	ldr	r2, [r7, #16]
 8011242:	440a      	add	r2, r1
 8011244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801124c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	015a      	lsls	r2, r3, #5
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	4413      	add	r3, r2
 8011256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	68fa      	ldr	r2, [r7, #12]
 801125e:	0151      	lsls	r1, r2, #5
 8011260:	693a      	ldr	r2, [r7, #16]
 8011262:	440a      	add	r2, r1
 8011264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801126c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	3301      	adds	r3, #1
 8011272:	617b      	str	r3, [r7, #20]
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801127a:	d81d      	bhi.n	80112b8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	015a      	lsls	r2, r3, #5
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	4413      	add	r3, r2
 8011284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801128e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011292:	d0ec      	beq.n	801126e <USB_HC_Halt+0x1a4>
 8011294:	e011      	b.n	80112ba <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	015a      	lsls	r2, r3, #5
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	4413      	add	r3, r2
 801129e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	0151      	lsls	r1, r2, #5
 80112a8:	693a      	ldr	r2, [r7, #16]
 80112aa:	440a      	add	r2, r1
 80112ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80112b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80112b4:	6013      	str	r3, [r2, #0]
 80112b6:	e000      	b.n	80112ba <USB_HC_Halt+0x1f0>
          break;
 80112b8:	bf00      	nop
    }
  }

  return HAL_OK;
 80112ba:	2300      	movs	r3, #0
}
 80112bc:	4618      	mov	r0, r3
 80112be:	371c      	adds	r7, #28
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr

080112c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b087      	sub	sp, #28
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	460b      	mov	r3, r1
 80112d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80112d8:	78fb      	ldrb	r3, [r7, #3]
 80112da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80112dc:	2301      	movs	r3, #1
 80112de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	04da      	lsls	r2, r3, #19
 80112e4:	4b15      	ldr	r3, [pc, #84]	; (801133c <USB_DoPing+0x74>)
 80112e6:	4013      	ands	r3, r2
 80112e8:	693a      	ldr	r2, [r7, #16]
 80112ea:	0151      	lsls	r1, r2, #5
 80112ec:	697a      	ldr	r2, [r7, #20]
 80112ee:	440a      	add	r2, r1
 80112f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80112f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80112f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	015a      	lsls	r2, r3, #5
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	4413      	add	r3, r2
 8011302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011310:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011318:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	015a      	lsls	r2, r3, #5
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	4413      	add	r3, r2
 8011322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011326:	461a      	mov	r2, r3
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801132c:	2300      	movs	r3, #0
}
 801132e:	4618      	mov	r0, r3
 8011330:	371c      	adds	r7, #28
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	1ff80000 	.word	0x1ff80000

08011340 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b086      	sub	sp, #24
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 801134c:	2300      	movs	r3, #0
 801134e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f7ff f9ae 	bl	80106b2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8011356:	2110      	movs	r1, #16
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7ff f9e5 	bl	8010728 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7ff fa08 	bl	8010774 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011364:	2300      	movs	r3, #0
 8011366:	613b      	str	r3, [r7, #16]
 8011368:	e01f      	b.n	80113aa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	015a      	lsls	r2, r3, #5
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	4413      	add	r3, r2
 8011372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011380:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011388:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011390:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	015a      	lsls	r2, r3, #5
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	4413      	add	r3, r2
 801139a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801139e:	461a      	mov	r2, r3
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	3301      	adds	r3, #1
 80113a8:	613b      	str	r3, [r7, #16]
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	2b0f      	cmp	r3, #15
 80113ae:	d9dc      	bls.n	801136a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80113b0:	2300      	movs	r3, #0
 80113b2:	613b      	str	r3, [r7, #16]
 80113b4:	e034      	b.n	8011420 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	015a      	lsls	r2, r3, #5
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	4413      	add	r3, r2
 80113be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80113cc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80113d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80113dc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	015a      	lsls	r2, r3, #5
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	4413      	add	r3, r2
 80113e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80113ea:	461a      	mov	r2, r3
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	3301      	adds	r3, #1
 80113f4:	617b      	str	r3, [r7, #20]
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80113fc:	d80c      	bhi.n	8011418 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	015a      	lsls	r2, r3, #5
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	4413      	add	r3, r2
 8011406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011414:	d0ec      	beq.n	80113f0 <USB_StopHost+0xb0>
 8011416:	e000      	b.n	801141a <USB_StopHost+0xda>
        break;
 8011418:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	3301      	adds	r3, #1
 801141e:	613b      	str	r3, [r7, #16]
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	2b0f      	cmp	r3, #15
 8011424:	d9c7      	bls.n	80113b6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801142c:	461a      	mov	r2, r3
 801142e:	f04f 33ff 	mov.w	r3, #4294967295
 8011432:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f04f 32ff 	mov.w	r2, #4294967295
 801143a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f7ff f927 	bl	8010690 <USB_EnableGlobalInt>

  return HAL_OK;
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	3718      	adds	r7, #24
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801144c:	b590      	push	{r4, r7, lr}
 801144e:	b089      	sub	sp, #36	; 0x24
 8011450:	af04      	add	r7, sp, #16
 8011452:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8011454:	2301      	movs	r3, #1
 8011456:	2202      	movs	r2, #2
 8011458:	2102      	movs	r1, #2
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 fcb4 	bl	8011dc8 <USBH_FindInterface>
 8011460:	4603      	mov	r3, r0
 8011462:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011464:	7bfb      	ldrb	r3, [r7, #15]
 8011466:	2bff      	cmp	r3, #255	; 0xff
 8011468:	d002      	beq.n	8011470 <USBH_CDC_InterfaceInit+0x24>
 801146a:	7bfb      	ldrb	r3, [r7, #15]
 801146c:	2b01      	cmp	r3, #1
 801146e:	d901      	bls.n	8011474 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011470:	2302      	movs	r3, #2
 8011472:	e13d      	b.n	80116f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8011474:	7bfb      	ldrb	r3, [r7, #15]
 8011476:	4619      	mov	r1, r3
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f000 fc89 	bl	8011d90 <USBH_SelectInterface>
 801147e:	4603      	mov	r3, r0
 8011480:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8011482:	7bbb      	ldrb	r3, [r7, #14]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d001      	beq.n	801148c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8011488:	2302      	movs	r3, #2
 801148a:	e131      	b.n	80116f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8011492:	2050      	movs	r0, #80	; 0x50
 8011494:	f006 f96e 	bl	8017774 <malloc>
 8011498:	4603      	mov	r3, r0
 801149a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80114a2:	69db      	ldr	r3, [r3, #28]
 80114a4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d101      	bne.n	80114b0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80114ac:	2302      	movs	r3, #2
 80114ae:	e11f      	b.n	80116f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80114b0:	2250      	movs	r2, #80	; 0x50
 80114b2:	2100      	movs	r1, #0
 80114b4:	68b8      	ldr	r0, [r7, #8]
 80114b6:	f006 f978 	bl	80177aa <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80114ba:	7bfb      	ldrb	r3, [r7, #15]
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	211a      	movs	r1, #26
 80114c0:	fb01 f303 	mul.w	r3, r1, r3
 80114c4:	4413      	add	r3, r2
 80114c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	b25b      	sxtb	r3, r3
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	da15      	bge.n	80114fe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80114d2:	7bfb      	ldrb	r3, [r7, #15]
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	211a      	movs	r1, #26
 80114d8:	fb01 f303 	mul.w	r3, r1, r3
 80114dc:	4413      	add	r3, r2
 80114de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80114e2:	781a      	ldrb	r2, [r3, #0]
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80114e8:	7bfb      	ldrb	r3, [r7, #15]
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	211a      	movs	r1, #26
 80114ee:	fb01 f303 	mul.w	r3, r1, r3
 80114f2:	4413      	add	r3, r2
 80114f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80114f8:	881a      	ldrh	r2, [r3, #0]
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	785b      	ldrb	r3, [r3, #1]
 8011502:	4619      	mov	r1, r3
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f002 f890 	bl	801362a <USBH_AllocPipe>
 801150a:	4603      	mov	r3, r0
 801150c:	461a      	mov	r2, r3
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	7819      	ldrb	r1, [r3, #0]
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	7858      	ldrb	r0, [r3, #1]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011526:	68ba      	ldr	r2, [r7, #8]
 8011528:	8952      	ldrh	r2, [r2, #10]
 801152a:	9202      	str	r2, [sp, #8]
 801152c:	2203      	movs	r2, #3
 801152e:	9201      	str	r2, [sp, #4]
 8011530:	9300      	str	r3, [sp, #0]
 8011532:	4623      	mov	r3, r4
 8011534:	4602      	mov	r2, r0
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f002 f848 	bl	80135cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	2200      	movs	r2, #0
 8011542:	4619      	mov	r1, r3
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f006 f865 	bl	8017614 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801154a:	2300      	movs	r3, #0
 801154c:	2200      	movs	r2, #0
 801154e:	210a      	movs	r1, #10
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f000 fc39 	bl	8011dc8 <USBH_FindInterface>
 8011556:	4603      	mov	r3, r0
 8011558:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801155a:	7bfb      	ldrb	r3, [r7, #15]
 801155c:	2bff      	cmp	r3, #255	; 0xff
 801155e:	d002      	beq.n	8011566 <USBH_CDC_InterfaceInit+0x11a>
 8011560:	7bfb      	ldrb	r3, [r7, #15]
 8011562:	2b01      	cmp	r3, #1
 8011564:	d901      	bls.n	801156a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011566:	2302      	movs	r3, #2
 8011568:	e0c2      	b.n	80116f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 801156a:	7bfb      	ldrb	r3, [r7, #15]
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	211a      	movs	r1, #26
 8011570:	fb01 f303 	mul.w	r3, r1, r3
 8011574:	4413      	add	r3, r2
 8011576:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	b25b      	sxtb	r3, r3
 801157e:	2b00      	cmp	r3, #0
 8011580:	da16      	bge.n	80115b0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011582:	7bfb      	ldrb	r3, [r7, #15]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	211a      	movs	r1, #26
 8011588:	fb01 f303 	mul.w	r3, r1, r3
 801158c:	4413      	add	r3, r2
 801158e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8011592:	781a      	ldrb	r2, [r3, #0]
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011598:	7bfb      	ldrb	r3, [r7, #15]
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	211a      	movs	r1, #26
 801159e:	fb01 f303 	mul.w	r3, r1, r3
 80115a2:	4413      	add	r3, r2
 80115a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80115a8:	881a      	ldrh	r2, [r3, #0]
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	835a      	strh	r2, [r3, #26]
 80115ae:	e015      	b.n	80115dc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80115b0:	7bfb      	ldrb	r3, [r7, #15]
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	211a      	movs	r1, #26
 80115b6:	fb01 f303 	mul.w	r3, r1, r3
 80115ba:	4413      	add	r3, r2
 80115bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80115c0:	781a      	ldrb	r2, [r3, #0]
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80115c6:	7bfb      	ldrb	r3, [r7, #15]
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	211a      	movs	r1, #26
 80115cc:	fb01 f303 	mul.w	r3, r1, r3
 80115d0:	4413      	add	r3, r2
 80115d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80115d6:	881a      	ldrh	r2, [r3, #0]
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80115dc:	7bfb      	ldrb	r3, [r7, #15]
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	211a      	movs	r1, #26
 80115e2:	fb01 f303 	mul.w	r3, r1, r3
 80115e6:	4413      	add	r3, r2
 80115e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	b25b      	sxtb	r3, r3
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	da16      	bge.n	8011622 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80115f4:	7bfb      	ldrb	r3, [r7, #15]
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	211a      	movs	r1, #26
 80115fa:	fb01 f303 	mul.w	r3, r1, r3
 80115fe:	4413      	add	r3, r2
 8011600:	f203 3356 	addw	r3, r3, #854	; 0x356
 8011604:	781a      	ldrb	r2, [r3, #0]
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801160a:	7bfb      	ldrb	r3, [r7, #15]
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	211a      	movs	r1, #26
 8011610:	fb01 f303 	mul.w	r3, r1, r3
 8011614:	4413      	add	r3, r2
 8011616:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801161a:	881a      	ldrh	r2, [r3, #0]
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	835a      	strh	r2, [r3, #26]
 8011620:	e015      	b.n	801164e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011622:	7bfb      	ldrb	r3, [r7, #15]
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	211a      	movs	r1, #26
 8011628:	fb01 f303 	mul.w	r3, r1, r3
 801162c:	4413      	add	r3, r2
 801162e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8011632:	781a      	ldrb	r2, [r3, #0]
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011638:	7bfb      	ldrb	r3, [r7, #15]
 801163a:	687a      	ldr	r2, [r7, #4]
 801163c:	211a      	movs	r1, #26
 801163e:	fb01 f303 	mul.w	r3, r1, r3
 8011642:	4413      	add	r3, r2
 8011644:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8011648:	881a      	ldrh	r2, [r3, #0]
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	7b9b      	ldrb	r3, [r3, #14]
 8011652:	4619      	mov	r1, r3
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f001 ffe8 	bl	801362a <USBH_AllocPipe>
 801165a:	4603      	mov	r3, r0
 801165c:	461a      	mov	r2, r3
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	7bdb      	ldrb	r3, [r3, #15]
 8011666:	4619      	mov	r1, r3
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f001 ffde 	bl	801362a <USBH_AllocPipe>
 801166e:	4603      	mov	r3, r0
 8011670:	461a      	mov	r2, r3
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	7b59      	ldrb	r1, [r3, #13]
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	7b98      	ldrb	r0, [r3, #14]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801168a:	68ba      	ldr	r2, [r7, #8]
 801168c:	8b12      	ldrh	r2, [r2, #24]
 801168e:	9202      	str	r2, [sp, #8]
 8011690:	2202      	movs	r2, #2
 8011692:	9201      	str	r2, [sp, #4]
 8011694:	9300      	str	r3, [sp, #0]
 8011696:	4623      	mov	r3, r4
 8011698:	4602      	mov	r2, r0
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f001 ff96 	bl	80135cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	7b19      	ldrb	r1, [r3, #12]
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	7bd8      	ldrb	r0, [r3, #15]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80116b4:	68ba      	ldr	r2, [r7, #8]
 80116b6:	8b52      	ldrh	r2, [r2, #26]
 80116b8:	9202      	str	r2, [sp, #8]
 80116ba:	2202      	movs	r2, #2
 80116bc:	9201      	str	r2, [sp, #4]
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	4623      	mov	r3, r4
 80116c2:	4602      	mov	r2, r0
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f001 ff81 	bl	80135cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	7b5b      	ldrb	r3, [r3, #13]
 80116d6:	2200      	movs	r2, #0
 80116d8:	4619      	mov	r1, r3
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f005 ff9a 	bl	8017614 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	7b1b      	ldrb	r3, [r3, #12]
 80116e4:	2200      	movs	r2, #0
 80116e6:	4619      	mov	r1, r3
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f005 ff93 	bl	8017614 <USBH_LL_SetToggle>

  return USBH_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3714      	adds	r7, #20
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd90      	pop	{r4, r7, pc}

080116f8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011706:	69db      	ldr	r3, [r3, #28]
 8011708:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00e      	beq.n	8011730 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	4619      	mov	r1, r3
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f001 ff76 	bl	801360a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	4619      	mov	r1, r3
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f001 ffa1 	bl	801366c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2200      	movs	r2, #0
 801172e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	7b1b      	ldrb	r3, [r3, #12]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d00e      	beq.n	8011756 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	7b1b      	ldrb	r3, [r3, #12]
 801173c:	4619      	mov	r1, r3
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f001 ff63 	bl	801360a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	7b1b      	ldrb	r3, [r3, #12]
 8011748:	4619      	mov	r1, r3
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f001 ff8e 	bl	801366c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2200      	movs	r2, #0
 8011754:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	7b5b      	ldrb	r3, [r3, #13]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00e      	beq.n	801177c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	7b5b      	ldrb	r3, [r3, #13]
 8011762:	4619      	mov	r1, r3
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f001 ff50 	bl	801360a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	7b5b      	ldrb	r3, [r3, #13]
 801176e:	4619      	mov	r1, r3
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f001 ff7b 	bl	801366c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2200      	movs	r2, #0
 801177a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011782:	69db      	ldr	r3, [r3, #28]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00b      	beq.n	80117a0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801178e:	69db      	ldr	r3, [r3, #28]
 8011790:	4618      	mov	r0, r3
 8011792:	f005 fff7 	bl	8017784 <free>
    phost->pActiveClass->pData = 0U;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801179c:	2200      	movs	r2, #0
 801179e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80117a0:	2300      	movs	r3, #0
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3710      	adds	r7, #16
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}

080117aa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80117aa:	b580      	push	{r7, lr}
 80117ac:	b084      	sub	sp, #16
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80117b8:	69db      	ldr	r3, [r3, #28]
 80117ba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	3340      	adds	r3, #64	; 0x40
 80117c0:	4619      	mov	r1, r3
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 f8b1 	bl	801192a <GetLineCoding>
 80117c8:	4603      	mov	r3, r0
 80117ca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80117cc:	7afb      	ldrb	r3, [r7, #11]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d105      	bne.n	80117de <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80117d8:	2102      	movs	r1, #2
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80117de:	7afb      	ldrb	r3, [r7, #11]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3710      	adds	r7, #16
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b084      	sub	sp, #16
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80117f0:	2301      	movs	r3, #1
 80117f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80117f4:	2300      	movs	r3, #0
 80117f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80117fe:	69db      	ldr	r3, [r3, #28]
 8011800:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011808:	2b04      	cmp	r3, #4
 801180a:	d877      	bhi.n	80118fc <USBH_CDC_Process+0x114>
 801180c:	a201      	add	r2, pc, #4	; (adr r2, 8011814 <USBH_CDC_Process+0x2c>)
 801180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011812:	bf00      	nop
 8011814:	08011829 	.word	0x08011829
 8011818:	0801182f 	.word	0x0801182f
 801181c:	0801185f 	.word	0x0801185f
 8011820:	080118d3 	.word	0x080118d3
 8011824:	080118e1 	.word	0x080118e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8011828:	2300      	movs	r3, #0
 801182a:	73fb      	strb	r3, [r7, #15]
      break;
 801182c:	e06d      	b.n	801190a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011832:	4619      	mov	r1, r3
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f000 f897 	bl	8011968 <SetLineCoding>
 801183a:	4603      	mov	r3, r0
 801183c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801183e:	7bbb      	ldrb	r3, [r7, #14]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d104      	bne.n	801184e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	2202      	movs	r2, #2
 8011848:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 801184c:	e058      	b.n	8011900 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801184e:	7bbb      	ldrb	r3, [r7, #14]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d055      	beq.n	8011900 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	2204      	movs	r2, #4
 8011858:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 801185c:	e050      	b.n	8011900 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	3340      	adds	r3, #64	; 0x40
 8011862:	4619      	mov	r1, r3
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 f860 	bl	801192a <GetLineCoding>
 801186a:	4603      	mov	r3, r0
 801186c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801186e:	7bbb      	ldrb	r3, [r7, #14]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d126      	bne.n	80118c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	2200      	movs	r2, #0
 8011878:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011886:	791b      	ldrb	r3, [r3, #4]
 8011888:	429a      	cmp	r2, r3
 801188a:	d13b      	bne.n	8011904 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011896:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011898:	429a      	cmp	r2, r3
 801189a:	d133      	bne.n	8011904 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d12b      	bne.n	8011904 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d124      	bne.n	8011904 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 f984 	bl	8011bc8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80118c0:	e020      	b.n	8011904 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80118c2:	7bbb      	ldrb	r3, [r7, #14]
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d01d      	beq.n	8011904 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	2204      	movs	r2, #4
 80118cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80118d0:	e018      	b.n	8011904 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f000 f867 	bl	80119a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 f8f8 	bl	8011ace <CDC_ProcessReception>
      break;
 80118de:	e014      	b.n	801190a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80118e0:	2100      	movs	r1, #0
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f001 f94f 	bl	8012b86 <USBH_ClrFeature>
 80118e8:	4603      	mov	r3, r0
 80118ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80118ec:	7bbb      	ldrb	r3, [r7, #14]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d10a      	bne.n	8011908 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	2200      	movs	r2, #0
 80118f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80118fa:	e005      	b.n	8011908 <USBH_CDC_Process+0x120>

    default:
      break;
 80118fc:	bf00      	nop
 80118fe:	e004      	b.n	801190a <USBH_CDC_Process+0x122>
      break;
 8011900:	bf00      	nop
 8011902:	e002      	b.n	801190a <USBH_CDC_Process+0x122>
      break;
 8011904:	bf00      	nop
 8011906:	e000      	b.n	801190a <USBH_CDC_Process+0x122>
      break;
 8011908:	bf00      	nop

  }

  return status;
 801190a:	7bfb      	ldrb	r3, [r7, #15]
}
 801190c:	4618      	mov	r0, r3
 801190e:	3710      	adds	r7, #16
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	370c      	adds	r7, #12
 8011922:	46bd      	mov	sp, r7
 8011924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011928:	4770      	bx	lr

0801192a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 801192a:	b580      	push	{r7, lr}
 801192c:	b082      	sub	sp, #8
 801192e:	af00      	add	r7, sp, #0
 8011930:	6078      	str	r0, [r7, #4]
 8011932:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	22a1      	movs	r2, #161	; 0xa1
 8011938:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2221      	movs	r2, #33	; 0x21
 801193e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2200      	movs	r2, #0
 8011944:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2200      	movs	r2, #0
 801194a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2207      	movs	r2, #7
 8011950:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	2207      	movs	r2, #7
 8011956:	4619      	mov	r1, r3
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f001 faf4 	bl	8012f46 <USBH_CtlReq>
 801195e:	4603      	mov	r3, r0
}
 8011960:	4618      	mov	r0, r3
 8011962:	3708      	adds	r7, #8
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}

08011968 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2221      	movs	r2, #33	; 0x21
 8011976:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2220      	movs	r2, #32
 801197c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2200      	movs	r2, #0
 8011982:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2207      	movs	r2, #7
 801198e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	2207      	movs	r2, #7
 8011994:	4619      	mov	r1, r3
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f001 fad5 	bl	8012f46 <USBH_CtlReq>
 801199c:	4603      	mov	r3, r0
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3708      	adds	r7, #8
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b086      	sub	sp, #24
 80119aa:	af02      	add	r7, sp, #8
 80119ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80119b4:	69db      	ldr	r3, [r3, #28]
 80119b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80119b8:	2300      	movs	r3, #0
 80119ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d002      	beq.n	80119cc <CDC_ProcessTransmission+0x26>
 80119c6:	2b02      	cmp	r3, #2
 80119c8:	d025      	beq.n	8011a16 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80119ca:	e07c      	b.n	8011ac6 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	8b12      	ldrh	r2, [r2, #24]
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d90c      	bls.n	80119f2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	69d9      	ldr	r1, [r3, #28]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	8b1a      	ldrh	r2, [r3, #24]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	7b58      	ldrb	r0, [r3, #13]
 80119e4:	2301      	movs	r3, #1
 80119e6:	9300      	str	r3, [sp, #0]
 80119e8:	4603      	mov	r3, r0
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f001 fdab 	bl	8013546 <USBH_BulkSendData>
 80119f0:	e00c      	b.n	8011a0c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80119fa:	b29a      	uxth	r2, r3
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	7b58      	ldrb	r0, [r3, #13]
 8011a00:	2301      	movs	r3, #1
 8011a02:	9300      	str	r3, [sp, #0]
 8011a04:	4603      	mov	r3, r0
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f001 fd9d 	bl	8013546 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	2202      	movs	r2, #2
 8011a10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8011a14:	e057      	b.n	8011ac6 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	7b5b      	ldrb	r3, [r3, #13]
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f005 fdcf 	bl	80175c0 <USBH_LL_GetURBState>
 8011a22:	4603      	mov	r3, r0
 8011a24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8011a26:	7afb      	ldrb	r3, [r7, #11]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d136      	bne.n	8011a9a <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a30:	68fa      	ldr	r2, [r7, #12]
 8011a32:	8b12      	ldrh	r2, [r2, #24]
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d90e      	bls.n	8011a56 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a3c:	68fa      	ldr	r2, [r7, #12]
 8011a3e:	8b12      	ldrh	r2, [r2, #24]
 8011a40:	1a9a      	subs	r2, r3, r2
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	69db      	ldr	r3, [r3, #28]
 8011a4a:	68fa      	ldr	r2, [r7, #12]
 8011a4c:	8b12      	ldrh	r2, [r2, #24]
 8011a4e:	441a      	add	r2, r3
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	61da      	str	r2, [r3, #28]
 8011a54:	e002      	b.n	8011a5c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d004      	beq.n	8011a6e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2201      	movs	r2, #1
 8011a68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011a6c:	e006      	b.n	8011a7c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 f892 	bl	8011ba0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2204      	movs	r2, #4
 8011a80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011a90:	2300      	movs	r3, #0
 8011a92:	2200      	movs	r2, #0
 8011a94:	f002 f974 	bl	8013d80 <osMessageQueuePut>
      break;
 8011a98:	e014      	b.n	8011ac4 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8011a9a:	7afb      	ldrb	r3, [r7, #11]
 8011a9c:	2b02      	cmp	r3, #2
 8011a9e:	d111      	bne.n	8011ac4 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2201      	movs	r2, #1
 8011aa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2204      	movs	r2, #4
 8011aac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011abc:	2300      	movs	r3, #0
 8011abe:	2200      	movs	r2, #0
 8011ac0:	f002 f95e 	bl	8013d80 <osMessageQueuePut>
      break;
 8011ac4:	bf00      	nop
  }
}
 8011ac6:	bf00      	nop
 8011ac8:	3710      	adds	r7, #16
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8011ace:	b580      	push	{r7, lr}
 8011ad0:	b086      	sub	sp, #24
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011adc:	69db      	ldr	r3, [r3, #28]
 8011ade:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011aea:	2b03      	cmp	r3, #3
 8011aec:	d002      	beq.n	8011af4 <CDC_ProcessReception+0x26>
 8011aee:	2b04      	cmp	r3, #4
 8011af0:	d00e      	beq.n	8011b10 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8011af2:	e051      	b.n	8011b98 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	6a19      	ldr	r1, [r3, #32]
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	8b5a      	ldrh	r2, [r3, #26]
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	7b1b      	ldrb	r3, [r3, #12]
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f001 fd45 	bl	8013590 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	2204      	movs	r2, #4
 8011b0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8011b0e:	e043      	b.n	8011b98 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	7b1b      	ldrb	r3, [r3, #12]
 8011b14:	4619      	mov	r1, r3
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f005 fd52 	bl	80175c0 <USBH_LL_GetURBState>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8011b20:	7cfb      	ldrb	r3, [r7, #19]
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d137      	bne.n	8011b96 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	7b1b      	ldrb	r3, [r3, #12]
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f005 fcb5 	bl	801749c <USBH_LL_GetLastXferSize>
 8011b32:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d016      	beq.n	8011b6c <CDC_ProcessReception+0x9e>
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	8b5b      	ldrh	r3, [r3, #26]
 8011b42:	461a      	mov	r2, r3
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d910      	bls.n	8011b6c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	1ad2      	subs	r2, r2, r3
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	6a1a      	ldr	r2, [r3, #32]
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	441a      	add	r2, r3
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	2203      	movs	r2, #3
 8011b66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8011b6a:	e006      	b.n	8011b7a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f000 f81d 	bl	8011bb4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2204      	movs	r2, #4
 8011b7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011b8e:	2300      	movs	r3, #0
 8011b90:	2200      	movs	r2, #0
 8011b92:	f002 f8f5 	bl	8013d80 <osMessageQueuePut>
      break;
 8011b96:	bf00      	nop
  }
}
 8011b98:	bf00      	nop
 8011b9a:	3718      	adds	r7, #24
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}

08011ba0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011ba8:	bf00      	nop
 8011baa:	370c      	adds	r7, #12
 8011bac:	46bd      	mov	sp, r7
 8011bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb2:	4770      	bx	lr

08011bb4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011bbc:	bf00      	nop
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr

08011bc8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011bd0:	bf00      	nop
 8011bd2:	370c      	adds	r7, #12
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	4613      	mov	r3, r2
 8011be8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d101      	bne.n	8011bf4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8011bf0:	2302      	movs	r3, #2
 8011bf2:	e044      	b.n	8011c7e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	79fa      	ldrb	r2, [r7, #7]
 8011bf8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2200      	movs	r2, #0
 8011c08:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8011c0c:	68f8      	ldr	r0, [r7, #12]
 8011c0e:	f000 f841 	bl	8011c94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2200      	movs	r2, #0
 8011c16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2200      	movs	r2, #0
 8011c26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d003      	beq.n	8011c40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	68ba      	ldr	r2, [r7, #8]
 8011c3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8011c40:	2200      	movs	r2, #0
 8011c42:	2104      	movs	r1, #4
 8011c44:	2010      	movs	r0, #16
 8011c46:	f002 f815 	bl	8013c74 <osMessageQueueNew>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8011c52:	4b0d      	ldr	r3, [pc, #52]	; (8011c88 <USBH_Init+0xac>)
 8011c54:	4a0d      	ldr	r2, [pc, #52]	; (8011c8c <USBH_Init+0xb0>)
 8011c56:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8011c58:	4b0b      	ldr	r3, [pc, #44]	; (8011c88 <USBH_Init+0xac>)
 8011c5a:	2280      	movs	r2, #128	; 0x80
 8011c5c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8011c5e:	4b0a      	ldr	r3, [pc, #40]	; (8011c88 <USBH_Init+0xac>)
 8011c60:	2218      	movs	r2, #24
 8011c62:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8011c64:	4a08      	ldr	r2, [pc, #32]	; (8011c88 <USBH_Init+0xac>)
 8011c66:	68f9      	ldr	r1, [r7, #12]
 8011c68:	4809      	ldr	r0, [pc, #36]	; (8011c90 <USBH_Init+0xb4>)
 8011c6a:	f001 fdb3 	bl	80137d4 <osThreadNew>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f005 fb5e 	bl	8017338 <USBH_LL_Init>

  return USBH_OK;
 8011c7c:	2300      	movs	r3, #0
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3710      	adds	r7, #16
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	2001ba0c 	.word	0x2001ba0c
 8011c8c:	080184f8 	.word	0x080184f8
 8011c90:	080128fd 	.word	0x080128fd

08011c94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b085      	sub	sp, #20
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	60fb      	str	r3, [r7, #12]
 8011ca4:	e009      	b.n	8011cba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	33e0      	adds	r3, #224	; 0xe0
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	4413      	add	r3, r2
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	60fb      	str	r3, [r7, #12]
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	2b0e      	cmp	r3, #14
 8011cbe:	d9f2      	bls.n	8011ca6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	60fb      	str	r3, [r7, #12]
 8011cc4:	e009      	b.n	8011cda <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	4413      	add	r3, r2
 8011ccc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	60fb      	str	r3, [r7, #12]
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ce0:	d3f1      	bcc.n	8011cc6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2200      	movs	r2, #0
 8011cec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2201      	movs	r2, #1
 8011d00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2240      	movs	r2, #64	; 0x40
 8011d06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2200      	movs	r2, #0
 8011d12:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2201      	movs	r2, #1
 8011d1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2200      	movs	r2, #0
 8011d22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8011d2e:	2300      	movs	r3, #0
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	3714      	adds	r7, #20
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8011d46:	2300      	movs	r3, #0
 8011d48:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d016      	beq.n	8011d7e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d10e      	bne.n	8011d78 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011d60:	1c59      	adds	r1, r3, #1
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8011d68:	687a      	ldr	r2, [r7, #4]
 8011d6a:	33de      	adds	r3, #222	; 0xde
 8011d6c:	6839      	ldr	r1, [r7, #0]
 8011d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8011d72:	2300      	movs	r3, #0
 8011d74:	73fb      	strb	r3, [r7, #15]
 8011d76:	e004      	b.n	8011d82 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8011d78:	2302      	movs	r3, #2
 8011d7a:	73fb      	strb	r3, [r7, #15]
 8011d7c:	e001      	b.n	8011d82 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8011d7e:	2302      	movs	r3, #2
 8011d80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3714      	adds	r7, #20
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr

08011d90 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b085      	sub	sp, #20
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	460b      	mov	r3, r1
 8011d9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8011da6:	78fa      	ldrb	r2, [r7, #3]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d204      	bcs.n	8011db6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	78fa      	ldrb	r2, [r7, #3]
 8011db0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8011db4:	e001      	b.n	8011dba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8011db6:	2302      	movs	r3, #2
 8011db8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3714      	adds	r7, #20
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr

08011dc8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b087      	sub	sp, #28
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	4608      	mov	r0, r1
 8011dd2:	4611      	mov	r1, r2
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	70fb      	strb	r3, [r7, #3]
 8011dda:	460b      	mov	r3, r1
 8011ddc:	70bb      	strb	r3, [r7, #2]
 8011dde:	4613      	mov	r3, r2
 8011de0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8011de2:	2300      	movs	r3, #0
 8011de4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8011de6:	2300      	movs	r3, #0
 8011de8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011df0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011df2:	e025      	b.n	8011e40 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8011df4:	7dfb      	ldrb	r3, [r7, #23]
 8011df6:	221a      	movs	r2, #26
 8011df8:	fb02 f303 	mul.w	r3, r2, r3
 8011dfc:	3308      	adds	r3, #8
 8011dfe:	68fa      	ldr	r2, [r7, #12]
 8011e00:	4413      	add	r3, r2
 8011e02:	3302      	adds	r3, #2
 8011e04:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	795b      	ldrb	r3, [r3, #5]
 8011e0a:	78fa      	ldrb	r2, [r7, #3]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d002      	beq.n	8011e16 <USBH_FindInterface+0x4e>
 8011e10:	78fb      	ldrb	r3, [r7, #3]
 8011e12:	2bff      	cmp	r3, #255	; 0xff
 8011e14:	d111      	bne.n	8011e3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011e1a:	78ba      	ldrb	r2, [r7, #2]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d002      	beq.n	8011e26 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011e20:	78bb      	ldrb	r3, [r7, #2]
 8011e22:	2bff      	cmp	r3, #255	; 0xff
 8011e24:	d109      	bne.n	8011e3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011e2a:	787a      	ldrb	r2, [r7, #1]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d002      	beq.n	8011e36 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011e30:	787b      	ldrb	r3, [r7, #1]
 8011e32:	2bff      	cmp	r3, #255	; 0xff
 8011e34:	d101      	bne.n	8011e3a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8011e36:	7dfb      	ldrb	r3, [r7, #23]
 8011e38:	e006      	b.n	8011e48 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8011e3a:	7dfb      	ldrb	r3, [r7, #23]
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011e40:	7dfb      	ldrb	r3, [r7, #23]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d9d6      	bls.n	8011df4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8011e46:	23ff      	movs	r3, #255	; 0xff
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	371c      	adds	r7, #28
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e52:	4770      	bx	lr

08011e54 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f005 faa7 	bl	80173b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8011e62:	2101      	movs	r1, #1
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f005 fbbe 	bl	80175e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8011e6a:	2300      	movs	r3, #0
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b088      	sub	sp, #32
 8011e78:	af04      	add	r7, sp, #16
 8011e7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8011e80:	2300      	movs	r3, #0
 8011e82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d102      	bne.n	8011e96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2203      	movs	r2, #3
 8011e94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	2b0b      	cmp	r3, #11
 8011e9e:	f200 823c 	bhi.w	801231a <USBH_Process+0x4a6>
 8011ea2:	a201      	add	r2, pc, #4	; (adr r2, 8011ea8 <USBH_Process+0x34>)
 8011ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ea8:	08011ed9 	.word	0x08011ed9
 8011eac:	08011f27 	.word	0x08011f27
 8011eb0:	08011fab 	.word	0x08011fab
 8011eb4:	08012299 	.word	0x08012299
 8011eb8:	0801231b 	.word	0x0801231b
 8011ebc:	0801206b 	.word	0x0801206b
 8011ec0:	08012223 	.word	0x08012223
 8011ec4:	080120bd 	.word	0x080120bd
 8011ec8:	080120f9 	.word	0x080120f9
 8011ecc:	08012133 	.word	0x08012133
 8011ed0:	0801217b 	.word	0x0801217b
 8011ed4:	08012281 	.word	0x08012281
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	f000 821c 	beq.w	801231e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2201      	movs	r2, #1
 8011eea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8011eec:	20c8      	movs	r0, #200	; 0xc8
 8011eee:	f005 fbc4 	bl	801767a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f005 fab7 	bl	8017466 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2200      	movs	r2, #0
 8011efc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f001 ff2e 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8011f24:	e1fb      	b.n	801231e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d107      	bne.n	8011f40 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2200      	movs	r2, #0
 8011f34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2202      	movs	r2, #2
 8011f3c:	701a      	strb	r2, [r3, #0]
 8011f3e:	e025      	b.n	8011f8c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f4a:	d914      	bls.n	8011f76 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011f52:	3301      	adds	r3, #1
 8011f54:	b2da      	uxtb	r2, r3
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011f62:	2b03      	cmp	r3, #3
 8011f64:	d903      	bls.n	8011f6e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	220d      	movs	r2, #13
 8011f6a:	701a      	strb	r2, [r3, #0]
 8011f6c:	e00e      	b.n	8011f8c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2200      	movs	r2, #0
 8011f72:	701a      	strb	r2, [r3, #0]
 8011f74:	e00a      	b.n	8011f8c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011f7c:	f103 020a 	add.w	r2, r3, #10
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8011f86:	200a      	movs	r0, #10
 8011f88:	f005 fb77 	bl	801767a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2201      	movs	r2, #1
 8011f90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f001 feec 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      break;
 8011fa8:	e1c0      	b.n	801232c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d005      	beq.n	8011fc0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011fba:	2104      	movs	r1, #4
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8011fc0:	2064      	movs	r0, #100	; 0x64
 8011fc2:	f005 fb5a 	bl	801767a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f005 fa28 	bl	801741c <USBH_LL_GetSpeed>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	461a      	mov	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2205      	movs	r2, #5
 8011fda:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8011fdc:	2100      	movs	r1, #0
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f001 fb23 	bl	801362a <USBH_AllocPipe>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	461a      	mov	r2, r3
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8011fec:	2180      	movs	r1, #128	; 0x80
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f001 fb1b 	bl	801362a <USBH_AllocPipe>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	7919      	ldrb	r1, [r3, #4]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012010:	b292      	uxth	r2, r2
 8012012:	9202      	str	r2, [sp, #8]
 8012014:	2200      	movs	r2, #0
 8012016:	9201      	str	r2, [sp, #4]
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	4603      	mov	r3, r0
 801201c:	2280      	movs	r2, #128	; 0x80
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f001 fad4 	bl	80135cc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	7959      	ldrb	r1, [r3, #5]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012038:	b292      	uxth	r2, r2
 801203a:	9202      	str	r2, [sp, #8]
 801203c:	2200      	movs	r2, #0
 801203e:	9201      	str	r2, [sp, #4]
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	4603      	mov	r3, r0
 8012044:	2200      	movs	r2, #0
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f001 fac0 	bl	80135cc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2201      	movs	r2, #1
 8012050:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012060:	2300      	movs	r3, #0
 8012062:	2200      	movs	r2, #0
 8012064:	f001 fe8c 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      break;
 8012068:	e160      	b.n	801232c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f000 f964 	bl	8012338 <USBH_HandleEnum>
 8012070:	4603      	mov	r3, r0
 8012072:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8012074:	7bbb      	ldrb	r3, [r7, #14]
 8012076:	b2db      	uxtb	r3, r3
 8012078:	2b00      	cmp	r3, #0
 801207a:	f040 8152 	bne.w	8012322 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 801208c:	2b01      	cmp	r3, #1
 801208e:	d103      	bne.n	8012098 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2208      	movs	r2, #8
 8012094:	701a      	strb	r2, [r3, #0]
 8012096:	e002      	b.n	801209e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2207      	movs	r2, #7
 801209c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2205      	movs	r2, #5
 80120a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80120b2:	2300      	movs	r3, #0
 80120b4:	2200      	movs	r2, #0
 80120b6:	f001 fe63 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80120ba:	e132      	b.n	8012322 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	f000 812f 	beq.w	8012326 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80120ce:	2101      	movs	r1, #1
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2208      	movs	r2, #8
 80120d8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2205      	movs	r2, #5
 80120de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80120ee:	2300      	movs	r3, #0
 80120f0:	2200      	movs	r2, #0
 80120f2:	f001 fe45 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80120f6:	e116      	b.n	8012326 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80120fe:	b29b      	uxth	r3, r3
 8012100:	4619      	mov	r1, r3
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f000 fcf8 	bl	8012af8 <USBH_SetCfg>
 8012108:	4603      	mov	r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	d102      	bne.n	8012114 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2209      	movs	r2, #9
 8012112:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2201      	movs	r2, #1
 8012118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012128:	2300      	movs	r3, #0
 801212a:	2200      	movs	r2, #0
 801212c:	f001 fe28 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      break;
 8012130:	e0fc      	b.n	801232c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8012138:	f003 0320 	and.w	r3, r3, #32
 801213c:	2b00      	cmp	r3, #0
 801213e:	d00a      	beq.n	8012156 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8012140:	2101      	movs	r1, #1
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 fcfb 	bl	8012b3e <USBH_SetFeature>
 8012148:	4603      	mov	r3, r0
 801214a:	2b00      	cmp	r3, #0
 801214c:	d106      	bne.n	801215c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	220a      	movs	r2, #10
 8012152:	701a      	strb	r2, [r3, #0]
 8012154:	e002      	b.n	801215c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	220a      	movs	r2, #10
 801215a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2201      	movs	r2, #1
 8012160:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012170:	2300      	movs	r3, #0
 8012172:	2200      	movs	r2, #0
 8012174:	f001 fe04 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      break;
 8012178:	e0d8      	b.n	801232c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012180:	2b00      	cmp	r3, #0
 8012182:	d03f      	beq.n	8012204 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801218c:	2300      	movs	r3, #0
 801218e:	73fb      	strb	r3, [r7, #15]
 8012190:	e016      	b.n	80121c0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8012192:	7bfa      	ldrb	r2, [r7, #15]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	32de      	adds	r2, #222	; 0xde
 8012198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801219c:	791a      	ldrb	r2, [r3, #4]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d108      	bne.n	80121ba <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80121a8:	7bfa      	ldrb	r2, [r7, #15]
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	32de      	adds	r2, #222	; 0xde
 80121ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80121b8:	e005      	b.n	80121c6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80121ba:	7bfb      	ldrb	r3, [r7, #15]
 80121bc:	3301      	adds	r3, #1
 80121be:	73fb      	strb	r3, [r7, #15]
 80121c0:	7bfb      	ldrb	r3, [r7, #15]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d0e5      	beq.n	8012192 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d016      	beq.n	80121fe <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80121d6:	689b      	ldr	r3, [r3, #8]
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	4798      	blx	r3
 80121dc:	4603      	mov	r3, r0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d109      	bne.n	80121f6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2206      	movs	r2, #6
 80121e6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80121ee:	2103      	movs	r1, #3
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	4798      	blx	r3
 80121f4:	e006      	b.n	8012204 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	220d      	movs	r2, #13
 80121fa:	701a      	strb	r2, [r3, #0]
 80121fc:	e002      	b.n	8012204 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	220d      	movs	r2, #13
 8012202:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2205      	movs	r2, #5
 8012208:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012218:	2300      	movs	r3, #0
 801221a:	2200      	movs	r2, #0
 801221c:	f001 fdb0 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      break;
 8012220:	e084      	b.n	801232c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012228:	2b00      	cmp	r3, #0
 801222a:	d017      	beq.n	801225c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012232:	691b      	ldr	r3, [r3, #16]
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	4798      	blx	r3
 8012238:	4603      	mov	r3, r0
 801223a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801223c:	7bbb      	ldrb	r3, [r7, #14]
 801223e:	b2db      	uxtb	r3, r3
 8012240:	2b00      	cmp	r3, #0
 8012242:	d103      	bne.n	801224c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	220b      	movs	r2, #11
 8012248:	701a      	strb	r2, [r3, #0]
 801224a:	e00a      	b.n	8012262 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 801224c:	7bbb      	ldrb	r3, [r7, #14]
 801224e:	b2db      	uxtb	r3, r3
 8012250:	2b02      	cmp	r3, #2
 8012252:	d106      	bne.n	8012262 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	220d      	movs	r2, #13
 8012258:	701a      	strb	r2, [r3, #0]
 801225a:	e002      	b.n	8012262 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	220d      	movs	r2, #13
 8012260:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2205      	movs	r2, #5
 8012266:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012276:	2300      	movs	r3, #0
 8012278:	2200      	movs	r2, #0
 801227a:	f001 fd81 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      break;
 801227e:	e055      	b.n	801232c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012286:	2b00      	cmp	r3, #0
 8012288:	d04f      	beq.n	801232a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012290:	695b      	ldr	r3, [r3, #20]
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	4798      	blx	r3
      }
      break;
 8012296:	e048      	b.n	801232a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2200      	movs	r2, #0
 801229c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f7ff fcf7 	bl	8011c94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d009      	beq.n	80122c4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d005      	beq.n	80122da <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80122d4:	2105      	movs	r1, #5
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	2b01      	cmp	r3, #1
 80122e4:	d107      	bne.n	80122f6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2200      	movs	r2, #0
 80122ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f7ff fdb0 	bl	8011e54 <USBH_Start>
 80122f4:	e002      	b.n	80122fc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f005 f85a 	bl	80173b0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2201      	movs	r2, #1
 8012300:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012310:	2300      	movs	r3, #0
 8012312:	2200      	movs	r2, #0
 8012314:	f001 fd34 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      break;
 8012318:	e008      	b.n	801232c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 801231a:	bf00      	nop
 801231c:	e006      	b.n	801232c <USBH_Process+0x4b8>
      break;
 801231e:	bf00      	nop
 8012320:	e004      	b.n	801232c <USBH_Process+0x4b8>
      break;
 8012322:	bf00      	nop
 8012324:	e002      	b.n	801232c <USBH_Process+0x4b8>
    break;
 8012326:	bf00      	nop
 8012328:	e000      	b.n	801232c <USBH_Process+0x4b8>
      break;
 801232a:	bf00      	nop
  }
  return USBH_OK;
 801232c:	2300      	movs	r3, #0
}
 801232e:	4618      	mov	r0, r3
 8012330:	3710      	adds	r7, #16
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop

08012338 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b088      	sub	sp, #32
 801233c:	af04      	add	r7, sp, #16
 801233e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8012340:	2301      	movs	r3, #1
 8012342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8012344:	2301      	movs	r3, #1
 8012346:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	785b      	ldrb	r3, [r3, #1]
 801234c:	2b07      	cmp	r3, #7
 801234e:	f200 8208 	bhi.w	8012762 <USBH_HandleEnum+0x42a>
 8012352:	a201      	add	r2, pc, #4	; (adr r2, 8012358 <USBH_HandleEnum+0x20>)
 8012354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012358:	08012379 	.word	0x08012379
 801235c:	08012437 	.word	0x08012437
 8012360:	080124a1 	.word	0x080124a1
 8012364:	0801252f 	.word	0x0801252f
 8012368:	08012599 	.word	0x08012599
 801236c:	08012609 	.word	0x08012609
 8012370:	080126a5 	.word	0x080126a5
 8012374:	08012723 	.word	0x08012723
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8012378:	2108      	movs	r1, #8
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f000 faec 	bl	8012958 <USBH_Get_DevDesc>
 8012380:	4603      	mov	r3, r0
 8012382:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012384:	7bbb      	ldrb	r3, [r7, #14]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d130      	bne.n	80123ec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2201      	movs	r2, #1
 8012398:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	7919      	ldrb	r1, [r3, #4]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80123aa:	687a      	ldr	r2, [r7, #4]
 80123ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80123ae:	b292      	uxth	r2, r2
 80123b0:	9202      	str	r2, [sp, #8]
 80123b2:	2200      	movs	r2, #0
 80123b4:	9201      	str	r2, [sp, #4]
 80123b6:	9300      	str	r3, [sp, #0]
 80123b8:	4603      	mov	r3, r0
 80123ba:	2280      	movs	r2, #128	; 0x80
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f001 f905 	bl	80135cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	7959      	ldrb	r1, [r3, #5]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80123d6:	b292      	uxth	r2, r2
 80123d8:	9202      	str	r2, [sp, #8]
 80123da:	2200      	movs	r2, #0
 80123dc:	9201      	str	r2, [sp, #4]
 80123de:	9300      	str	r3, [sp, #0]
 80123e0:	4603      	mov	r3, r0
 80123e2:	2200      	movs	r2, #0
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f001 f8f1 	bl	80135cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80123ea:	e1bc      	b.n	8012766 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80123ec:	7bbb      	ldrb	r3, [r7, #14]
 80123ee:	2b03      	cmp	r3, #3
 80123f0:	f040 81b9 	bne.w	8012766 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80123fa:	3301      	adds	r3, #1
 80123fc:	b2da      	uxtb	r2, r3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801240a:	2b03      	cmp	r3, #3
 801240c:	d903      	bls.n	8012416 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	220d      	movs	r2, #13
 8012412:	701a      	strb	r2, [r3, #0]
      break;
 8012414:	e1a7      	b.n	8012766 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	795b      	ldrb	r3, [r3, #5]
 801241a:	4619      	mov	r1, r3
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f001 f925 	bl	801366c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	791b      	ldrb	r3, [r3, #4]
 8012426:	4619      	mov	r1, r3
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f001 f91f 	bl	801366c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2200      	movs	r2, #0
 8012432:	701a      	strb	r2, [r3, #0]
      break;
 8012434:	e197      	b.n	8012766 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8012436:	2112      	movs	r1, #18
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f000 fa8d 	bl	8012958 <USBH_Get_DevDesc>
 801243e:	4603      	mov	r3, r0
 8012440:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012442:	7bbb      	ldrb	r3, [r7, #14]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d103      	bne.n	8012450 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2202      	movs	r2, #2
 801244c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801244e:	e18c      	b.n	801276a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012450:	7bbb      	ldrb	r3, [r7, #14]
 8012452:	2b03      	cmp	r3, #3
 8012454:	f040 8189 	bne.w	801276a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801245e:	3301      	adds	r3, #1
 8012460:	b2da      	uxtb	r2, r3
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801246e:	2b03      	cmp	r3, #3
 8012470:	d903      	bls.n	801247a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	220d      	movs	r2, #13
 8012476:	701a      	strb	r2, [r3, #0]
      break;
 8012478:	e177      	b.n	801276a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	795b      	ldrb	r3, [r3, #5]
 801247e:	4619      	mov	r1, r3
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f001 f8f3 	bl	801366c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	791b      	ldrb	r3, [r3, #4]
 801248a:	4619      	mov	r1, r3
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f001 f8ed 	bl	801366c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2200      	movs	r2, #0
 8012496:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2200      	movs	r2, #0
 801249c:	701a      	strb	r2, [r3, #0]
      break;
 801249e:	e164      	b.n	801276a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80124a0:	2101      	movs	r1, #1
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f000 fb04 	bl	8012ab0 <USBH_SetAddress>
 80124a8:	4603      	mov	r3, r0
 80124aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80124ac:	7bbb      	ldrb	r3, [r7, #14]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d132      	bne.n	8012518 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80124b2:	2002      	movs	r0, #2
 80124b4:	f005 f8e1 	bl	801767a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2201      	movs	r2, #1
 80124bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2203      	movs	r2, #3
 80124c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	7919      	ldrb	r1, [r3, #4]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80124d6:	687a      	ldr	r2, [r7, #4]
 80124d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80124da:	b292      	uxth	r2, r2
 80124dc:	9202      	str	r2, [sp, #8]
 80124de:	2200      	movs	r2, #0
 80124e0:	9201      	str	r2, [sp, #4]
 80124e2:	9300      	str	r3, [sp, #0]
 80124e4:	4603      	mov	r3, r0
 80124e6:	2280      	movs	r2, #128	; 0x80
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f001 f86f 	bl	80135cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	7959      	ldrb	r1, [r3, #5]
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012502:	b292      	uxth	r2, r2
 8012504:	9202      	str	r2, [sp, #8]
 8012506:	2200      	movs	r2, #0
 8012508:	9201      	str	r2, [sp, #4]
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	4603      	mov	r3, r0
 801250e:	2200      	movs	r2, #0
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f001 f85b 	bl	80135cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012516:	e12a      	b.n	801276e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012518:	7bbb      	ldrb	r3, [r7, #14]
 801251a:	2b03      	cmp	r3, #3
 801251c:	f040 8127 	bne.w	801276e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	220d      	movs	r2, #13
 8012524:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2200      	movs	r2, #0
 801252a:	705a      	strb	r2, [r3, #1]
      break;
 801252c:	e11f      	b.n	801276e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801252e:	2109      	movs	r1, #9
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f000 fa39 	bl	80129a8 <USBH_Get_CfgDesc>
 8012536:	4603      	mov	r3, r0
 8012538:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801253a:	7bbb      	ldrb	r3, [r7, #14]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d103      	bne.n	8012548 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2204      	movs	r2, #4
 8012544:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012546:	e114      	b.n	8012772 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012548:	7bbb      	ldrb	r3, [r7, #14]
 801254a:	2b03      	cmp	r3, #3
 801254c:	f040 8111 	bne.w	8012772 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8012556:	3301      	adds	r3, #1
 8012558:	b2da      	uxtb	r2, r3
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8012566:	2b03      	cmp	r3, #3
 8012568:	d903      	bls.n	8012572 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	220d      	movs	r2, #13
 801256e:	701a      	strb	r2, [r3, #0]
      break;
 8012570:	e0ff      	b.n	8012772 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	795b      	ldrb	r3, [r3, #5]
 8012576:	4619      	mov	r1, r3
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f001 f877 	bl	801366c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	791b      	ldrb	r3, [r3, #4]
 8012582:	4619      	mov	r1, r3
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f001 f871 	bl	801366c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2200      	movs	r2, #0
 801258e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	701a      	strb	r2, [r3, #0]
      break;
 8012596:	e0ec      	b.n	8012772 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801259e:	4619      	mov	r1, r3
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 fa01 	bl	80129a8 <USBH_Get_CfgDesc>
 80125a6:	4603      	mov	r3, r0
 80125a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80125aa:	7bbb      	ldrb	r3, [r7, #14]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d103      	bne.n	80125b8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2205      	movs	r2, #5
 80125b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80125b6:	e0de      	b.n	8012776 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80125b8:	7bbb      	ldrb	r3, [r7, #14]
 80125ba:	2b03      	cmp	r3, #3
 80125bc:	f040 80db 	bne.w	8012776 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80125c6:	3301      	adds	r3, #1
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80125d6:	2b03      	cmp	r3, #3
 80125d8:	d903      	bls.n	80125e2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	220d      	movs	r2, #13
 80125de:	701a      	strb	r2, [r3, #0]
      break;
 80125e0:	e0c9      	b.n	8012776 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	795b      	ldrb	r3, [r3, #5]
 80125e6:	4619      	mov	r1, r3
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f001 f83f 	bl	801366c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	791b      	ldrb	r3, [r3, #4]
 80125f2:	4619      	mov	r1, r3
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f001 f839 	bl	801366c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2200      	movs	r2, #0
 80125fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2200      	movs	r2, #0
 8012604:	701a      	strb	r2, [r3, #0]
      break;
 8012606:	e0b6      	b.n	8012776 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801260e:	2b00      	cmp	r3, #0
 8012610:	d036      	beq.n	8012680 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801261e:	23ff      	movs	r3, #255	; 0xff
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 f9e5 	bl	80129f0 <USBH_Get_StringDesc>
 8012626:	4603      	mov	r3, r0
 8012628:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801262a:	7bbb      	ldrb	r3, [r7, #14]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d111      	bne.n	8012654 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2206      	movs	r2, #6
 8012634:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2205      	movs	r2, #5
 801263a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801264a:	2300      	movs	r3, #0
 801264c:	2200      	movs	r2, #0
 801264e:	f001 fb97 	bl	8013d80 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8012652:	e092      	b.n	801277a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012654:	7bbb      	ldrb	r3, [r7, #14]
 8012656:	2b03      	cmp	r3, #3
 8012658:	f040 808f 	bne.w	801277a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2206      	movs	r2, #6
 8012660:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2205      	movs	r2, #5
 8012666:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012676:	2300      	movs	r3, #0
 8012678:	2200      	movs	r2, #0
 801267a:	f001 fb81 	bl	8013d80 <osMessageQueuePut>
      break;
 801267e:	e07c      	b.n	801277a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2206      	movs	r2, #6
 8012684:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2205      	movs	r2, #5
 801268a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801269a:	2300      	movs	r3, #0
 801269c:	2200      	movs	r2, #0
 801269e:	f001 fb6f 	bl	8013d80 <osMessageQueuePut>
      break;
 80126a2:	e06a      	b.n	801277a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d027      	beq.n	80126fe <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80126ba:	23ff      	movs	r3, #255	; 0xff
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 f997 	bl	80129f0 <USBH_Get_StringDesc>
 80126c2:	4603      	mov	r3, r0
 80126c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80126c6:	7bbb      	ldrb	r3, [r7, #14]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d103      	bne.n	80126d4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2207      	movs	r2, #7
 80126d0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80126d2:	e054      	b.n	801277e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80126d4:	7bbb      	ldrb	r3, [r7, #14]
 80126d6:	2b03      	cmp	r3, #3
 80126d8:	d151      	bne.n	801277e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2207      	movs	r2, #7
 80126de:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2205      	movs	r2, #5
 80126e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80126f4:	2300      	movs	r3, #0
 80126f6:	2200      	movs	r2, #0
 80126f8:	f001 fb42 	bl	8013d80 <osMessageQueuePut>
      break;
 80126fc:	e03f      	b.n	801277e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2207      	movs	r2, #7
 8012702:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2205      	movs	r2, #5
 8012708:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012718:	2300      	movs	r3, #0
 801271a:	2200      	movs	r2, #0
 801271c:	f001 fb30 	bl	8013d80 <osMessageQueuePut>
      break;
 8012720:	e02d      	b.n	801277e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8012728:	2b00      	cmp	r3, #0
 801272a:	d017      	beq.n	801275c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012738:	23ff      	movs	r3, #255	; 0xff
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f958 	bl	80129f0 <USBH_Get_StringDesc>
 8012740:	4603      	mov	r3, r0
 8012742:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012744:	7bbb      	ldrb	r3, [r7, #14]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d102      	bne.n	8012750 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801274a:	2300      	movs	r3, #0
 801274c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801274e:	e018      	b.n	8012782 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012750:	7bbb      	ldrb	r3, [r7, #14]
 8012752:	2b03      	cmp	r3, #3
 8012754:	d115      	bne.n	8012782 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8012756:	2300      	movs	r3, #0
 8012758:	73fb      	strb	r3, [r7, #15]
      break;
 801275a:	e012      	b.n	8012782 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 801275c:	2300      	movs	r3, #0
 801275e:	73fb      	strb	r3, [r7, #15]
      break;
 8012760:	e00f      	b.n	8012782 <USBH_HandleEnum+0x44a>

    default:
      break;
 8012762:	bf00      	nop
 8012764:	e00e      	b.n	8012784 <USBH_HandleEnum+0x44c>
      break;
 8012766:	bf00      	nop
 8012768:	e00c      	b.n	8012784 <USBH_HandleEnum+0x44c>
      break;
 801276a:	bf00      	nop
 801276c:	e00a      	b.n	8012784 <USBH_HandleEnum+0x44c>
      break;
 801276e:	bf00      	nop
 8012770:	e008      	b.n	8012784 <USBH_HandleEnum+0x44c>
      break;
 8012772:	bf00      	nop
 8012774:	e006      	b.n	8012784 <USBH_HandleEnum+0x44c>
      break;
 8012776:	bf00      	nop
 8012778:	e004      	b.n	8012784 <USBH_HandleEnum+0x44c>
      break;
 801277a:	bf00      	nop
 801277c:	e002      	b.n	8012784 <USBH_HandleEnum+0x44c>
      break;
 801277e:	bf00      	nop
 8012780:	e000      	b.n	8012784 <USBH_HandleEnum+0x44c>
      break;
 8012782:	bf00      	nop
  }
  return Status;
 8012784:	7bfb      	ldrb	r3, [r7, #15]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3710      	adds	r7, #16
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop

08012790 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	683a      	ldr	r2, [r7, #0]
 801279e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80127a2:	bf00      	nop
 80127a4:	370c      	adds	r7, #12
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr

080127ae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80127ae:	b580      	push	{r7, lr}
 80127b0:	b082      	sub	sp, #8
 80127b2:	af00      	add	r7, sp, #0
 80127b4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80127bc:	1c5a      	adds	r2, r3, #1
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f000 f804 	bl	80127d2 <USBH_HandleSof>
}
 80127ca:	bf00      	nop
 80127cc:	3708      	adds	r7, #8
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}

080127d2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80127d2:	b580      	push	{r7, lr}
 80127d4:	b082      	sub	sp, #8
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	2b0b      	cmp	r3, #11
 80127e2:	d10a      	bne.n	80127fa <USBH_HandleSof+0x28>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d005      	beq.n	80127fa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80127f4:	699b      	ldr	r3, [r3, #24]
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	4798      	blx	r3
  }
}
 80127fa:	bf00      	nop
 80127fc:	3708      	adds	r7, #8
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}

08012802 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012802:	b580      	push	{r7, lr}
 8012804:	b082      	sub	sp, #8
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2201      	movs	r2, #1
 801280e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2201      	movs	r2, #1
 8012816:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012826:	2300      	movs	r3, #0
 8012828:	2200      	movs	r2, #0
 801282a:	f001 faa9 	bl	8013d80 <osMessageQueuePut>
#endif
#endif

  return;
 801282e:	bf00      	nop
}
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}

08012836 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012836:	b480      	push	{r7}
 8012838:	b083      	sub	sp, #12
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2200      	movs	r2, #0
 8012842:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8012846:	bf00      	nop
}
 8012848:	370c      	adds	r7, #12
 801284a:	46bd      	mov	sp, r7
 801284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012850:	4770      	bx	lr

08012852 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012852:	b580      	push	{r7, lr}
 8012854:	b082      	sub	sp, #8
 8012856:	af00      	add	r7, sp, #0
 8012858:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2201      	movs	r2, #1
 801285e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2200      	movs	r2, #0
 8012866:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2200      	movs	r2, #0
 801286e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2201      	movs	r2, #1
 8012876:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012886:	2300      	movs	r3, #0
 8012888:	2200      	movs	r2, #0
 801288a:	f001 fa79 	bl	8013d80 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 801288e:	2300      	movs	r3, #0
}
 8012890:	4618      	mov	r0, r3
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2201      	movs	r2, #1
 80128a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2200      	movs	r2, #0
 80128ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2200      	movs	r2, #0
 80128b4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f004 fd94 	bl	80173e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	791b      	ldrb	r3, [r3, #4]
 80128c2:	4619      	mov	r1, r3
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 fed1 	bl	801366c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	795b      	ldrb	r3, [r3, #5]
 80128ce:	4619      	mov	r1, r3
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f000 fecb 	bl	801366c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2201      	movs	r2, #1
 80128da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80128ea:	2300      	movs	r3, #0
 80128ec:	2200      	movs	r2, #0
 80128ee:	f001 fa47 	bl	8013d80 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80128f2:	2300      	movs	r3, #0
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3708      	adds	r7, #8
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8012910:	f04f 33ff 	mov.w	r3, #4294967295
 8012914:	2200      	movs	r2, #0
 8012916:	f001 faa7 	bl	8013e68 <osMessageQueueGet>
 801291a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d1f0      	bne.n	8012904 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f7ff faa6 	bl	8011e74 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8012928:	e7ec      	b.n	8012904 <USBH_Process_OS+0x8>

0801292a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801292a:	b580      	push	{r7, lr}
 801292c:	b082      	sub	sp, #8
 801292e:	af00      	add	r7, sp, #0
 8012930:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2201      	movs	r2, #1
 8012936:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012946:	2300      	movs	r3, #0
 8012948:	2200      	movs	r2, #0
 801294a:	f001 fa19 	bl	8013d80 <osMessageQueuePut>
#endif

  return USBH_OK;
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b086      	sub	sp, #24
 801295c:	af02      	add	r7, sp, #8
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	460b      	mov	r3, r1
 8012962:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 801296a:	78fb      	ldrb	r3, [r7, #3]
 801296c:	b29b      	uxth	r3, r3
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	4613      	mov	r3, r2
 8012972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012976:	2100      	movs	r1, #0
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f000 f864 	bl	8012a46 <USBH_GetDescriptor>
 801297e:	4603      	mov	r3, r0
 8012980:	73fb      	strb	r3, [r7, #15]
 8012982:	7bfb      	ldrb	r3, [r7, #15]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d10a      	bne.n	801299e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f203 3026 	addw	r0, r3, #806	; 0x326
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012994:	78fa      	ldrb	r2, [r7, #3]
 8012996:	b292      	uxth	r2, r2
 8012998:	4619      	mov	r1, r3
 801299a:	f000 f918 	bl	8012bce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3710      	adds	r7, #16
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b086      	sub	sp, #24
 80129ac:	af02      	add	r7, sp, #8
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	460b      	mov	r3, r1
 80129b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	331c      	adds	r3, #28
 80129b8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80129ba:	887b      	ldrh	r3, [r7, #2]
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129c4:	2100      	movs	r1, #0
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f000 f83d 	bl	8012a46 <USBH_GetDescriptor>
 80129cc:	4603      	mov	r3, r0
 80129ce:	72fb      	strb	r3, [r7, #11]
 80129d0:	7afb      	ldrb	r3, [r7, #11]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d107      	bne.n	80129e6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80129dc:	887a      	ldrh	r2, [r7, #2]
 80129de:	68f9      	ldr	r1, [r7, #12]
 80129e0:	4618      	mov	r0, r3
 80129e2:	f000 f964 	bl	8012cae <USBH_ParseCfgDesc>
  }

  return status;
 80129e6:	7afb      	ldrb	r3, [r7, #11]
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3710      	adds	r7, #16
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b088      	sub	sp, #32
 80129f4:	af02      	add	r7, sp, #8
 80129f6:	60f8      	str	r0, [r7, #12]
 80129f8:	607a      	str	r2, [r7, #4]
 80129fa:	461a      	mov	r2, r3
 80129fc:	460b      	mov	r3, r1
 80129fe:	72fb      	strb	r3, [r7, #11]
 8012a00:	4613      	mov	r3, r2
 8012a02:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8012a04:	7afb      	ldrb	r3, [r7, #11]
 8012a06:	b29b      	uxth	r3, r3
 8012a08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8012a0c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8012a14:	893b      	ldrh	r3, [r7, #8]
 8012a16:	9300      	str	r3, [sp, #0]
 8012a18:	460b      	mov	r3, r1
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	68f8      	ldr	r0, [r7, #12]
 8012a1e:	f000 f812 	bl	8012a46 <USBH_GetDescriptor>
 8012a22:	4603      	mov	r3, r0
 8012a24:	75fb      	strb	r3, [r7, #23]
 8012a26:	7dfb      	ldrb	r3, [r7, #23]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d107      	bne.n	8012a3c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012a32:	893a      	ldrh	r2, [r7, #8]
 8012a34:	6879      	ldr	r1, [r7, #4]
 8012a36:	4618      	mov	r0, r3
 8012a38:	f000 fa37 	bl	8012eaa <USBH_ParseStringDesc>
  }

  return status;
 8012a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3718      	adds	r7, #24
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}

08012a46 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8012a46:	b580      	push	{r7, lr}
 8012a48:	b084      	sub	sp, #16
 8012a4a:	af00      	add	r7, sp, #0
 8012a4c:	60f8      	str	r0, [r7, #12]
 8012a4e:	607b      	str	r3, [r7, #4]
 8012a50:	460b      	mov	r3, r1
 8012a52:	72fb      	strb	r3, [r7, #11]
 8012a54:	4613      	mov	r3, r2
 8012a56:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	789b      	ldrb	r3, [r3, #2]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d11c      	bne.n	8012a9a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8012a60:	7afb      	ldrb	r3, [r7, #11]
 8012a62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012a66:	b2da      	uxtb	r2, r3
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	2206      	movs	r2, #6
 8012a70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	893a      	ldrh	r2, [r7, #8]
 8012a76:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8012a78:	893b      	ldrh	r3, [r7, #8]
 8012a7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012a82:	d104      	bne.n	8012a8e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	f240 4209 	movw	r2, #1033	; 0x409
 8012a8a:	829a      	strh	r2, [r3, #20]
 8012a8c:	e002      	b.n	8012a94 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2200      	movs	r2, #0
 8012a92:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	8b3a      	ldrh	r2, [r7, #24]
 8012a98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8012a9a:	8b3b      	ldrh	r3, [r7, #24]
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	6879      	ldr	r1, [r7, #4]
 8012aa0:	68f8      	ldr	r0, [r7, #12]
 8012aa2:	f000 fa50 	bl	8012f46 <USBH_CtlReq>
 8012aa6:	4603      	mov	r3, r0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	460b      	mov	r3, r1
 8012aba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	789b      	ldrb	r3, [r3, #2]
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d10f      	bne.n	8012ae4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2205      	movs	r2, #5
 8012ace:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8012ad0:	78fb      	ldrb	r3, [r7, #3]
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2200      	movs	r2, #0
 8012adc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f000 fa2c 	bl	8012f46 <USBH_CtlReq>
 8012aee:	4603      	mov	r3, r0
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	460b      	mov	r3, r1
 8012b02:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	789b      	ldrb	r3, [r3, #2]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d10e      	bne.n	8012b2a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2209      	movs	r2, #9
 8012b16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	887a      	ldrh	r2, [r7, #2]
 8012b1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2200      	movs	r2, #0
 8012b22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2200      	movs	r2, #0
 8012b28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	2100      	movs	r1, #0
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f000 fa09 	bl	8012f46 <USBH_CtlReq>
 8012b34:	4603      	mov	r3, r0
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3708      	adds	r7, #8
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}

08012b3e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8012b3e:	b580      	push	{r7, lr}
 8012b40:	b082      	sub	sp, #8
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	6078      	str	r0, [r7, #4]
 8012b46:	460b      	mov	r3, r1
 8012b48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	789b      	ldrb	r3, [r3, #2]
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d10f      	bne.n	8012b72 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2200      	movs	r2, #0
 8012b56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2203      	movs	r2, #3
 8012b5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8012b5e:	78fb      	ldrb	r3, [r7, #3]
 8012b60:	b29a      	uxth	r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8012b72:	2200      	movs	r2, #0
 8012b74:	2100      	movs	r1, #0
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f000 f9e5 	bl	8012f46 <USBH_CtlReq>
 8012b7c:	4603      	mov	r3, r0
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3708      	adds	r7, #8
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}

08012b86 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8012b86:	b580      	push	{r7, lr}
 8012b88:	b082      	sub	sp, #8
 8012b8a:	af00      	add	r7, sp, #0
 8012b8c:	6078      	str	r0, [r7, #4]
 8012b8e:	460b      	mov	r3, r1
 8012b90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	789b      	ldrb	r3, [r3, #2]
 8012b96:	2b01      	cmp	r3, #1
 8012b98:	d10f      	bne.n	8012bba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2202      	movs	r2, #2
 8012b9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8012bac:	78fb      	ldrb	r3, [r7, #3]
 8012bae:	b29a      	uxth	r2, r3
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8012bba:	2200      	movs	r2, #0
 8012bbc:	2100      	movs	r1, #0
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f000 f9c1 	bl	8012f46 <USBH_CtlReq>
 8012bc4:	4603      	mov	r3, r0
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3708      	adds	r7, #8
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}

08012bce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8012bce:	b480      	push	{r7}
 8012bd0:	b085      	sub	sp, #20
 8012bd2:	af00      	add	r7, sp, #0
 8012bd4:	60f8      	str	r0, [r7, #12]
 8012bd6:	60b9      	str	r1, [r7, #8]
 8012bd8:	4613      	mov	r3, r2
 8012bda:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	781a      	ldrb	r2, [r3, #0]
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	785a      	ldrb	r2, [r3, #1]
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	3302      	adds	r3, #2
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	3303      	adds	r3, #3
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	021b      	lsls	r3, r3, #8
 8012bfe:	b29b      	uxth	r3, r3
 8012c00:	4313      	orrs	r3, r2
 8012c02:	b29a      	uxth	r2, r3
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	791a      	ldrb	r2, [r3, #4]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	795a      	ldrb	r2, [r3, #5]
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	799a      	ldrb	r2, [r3, #6]
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	79da      	ldrb	r2, [r3, #7]
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8012c28:	88fb      	ldrh	r3, [r7, #6]
 8012c2a:	2b08      	cmp	r3, #8
 8012c2c:	d939      	bls.n	8012ca2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	3308      	adds	r3, #8
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	b29a      	uxth	r2, r3
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	3309      	adds	r3, #9
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	021b      	lsls	r3, r3, #8
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	4313      	orrs	r3, r2
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	330a      	adds	r3, #10
 8012c4e:	781b      	ldrb	r3, [r3, #0]
 8012c50:	b29a      	uxth	r2, r3
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	330b      	adds	r3, #11
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	021b      	lsls	r3, r3, #8
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	4313      	orrs	r3, r2
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	330c      	adds	r3, #12
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	b29a      	uxth	r2, r3
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	330d      	adds	r3, #13
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	b29b      	uxth	r3, r3
 8012c76:	021b      	lsls	r3, r3, #8
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	4313      	orrs	r3, r2
 8012c7c:	b29a      	uxth	r2, r3
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	7b9a      	ldrb	r2, [r3, #14]
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	7bda      	ldrb	r2, [r3, #15]
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	7c1a      	ldrb	r2, [r3, #16]
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	7c5a      	ldrb	r2, [r3, #17]
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	745a      	strb	r2, [r3, #17]
  }
}
 8012ca2:	bf00      	nop
 8012ca4:	3714      	adds	r7, #20
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cac:	4770      	bx	lr

08012cae <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8012cae:	b580      	push	{r7, lr}
 8012cb0:	b08a      	sub	sp, #40	; 0x28
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	60f8      	str	r0, [r7, #12]
 8012cb6:	60b9      	str	r1, [r7, #8]
 8012cb8:	4613      	mov	r3, r2
 8012cba:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	781a      	ldrb	r2, [r3, #0]
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	785a      	ldrb	r2, [r3, #1]
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	3302      	adds	r3, #2
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	b29a      	uxth	r2, r3
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	3303      	adds	r3, #3
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	021b      	lsls	r3, r3, #8
 8012cf2:	b29b      	uxth	r3, r3
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	791a      	ldrb	r2, [r3, #4]
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	795a      	ldrb	r2, [r3, #5]
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	799a      	ldrb	r2, [r3, #6]
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	79da      	ldrb	r2, [r3, #7]
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	7a1a      	ldrb	r2, [r3, #8]
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8012d24:	88fb      	ldrh	r3, [r7, #6]
 8012d26:	2b09      	cmp	r3, #9
 8012d28:	d95f      	bls.n	8012dea <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8012d2a:	2309      	movs	r3, #9
 8012d2c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8012d32:	e051      	b.n	8012dd8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012d34:	f107 0316 	add.w	r3, r7, #22
 8012d38:	4619      	mov	r1, r3
 8012d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d3c:	f000 f8e8 	bl	8012f10 <USBH_GetNextDesc>
 8012d40:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8012d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d44:	785b      	ldrb	r3, [r3, #1]
 8012d46:	2b04      	cmp	r3, #4
 8012d48:	d146      	bne.n	8012dd8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8012d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012d4e:	221a      	movs	r2, #26
 8012d50:	fb02 f303 	mul.w	r3, r2, r3
 8012d54:	3308      	adds	r3, #8
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	4413      	add	r3, r2
 8012d5a:	3302      	adds	r3, #2
 8012d5c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8012d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d60:	69f8      	ldr	r0, [r7, #28]
 8012d62:	f000 f846 	bl	8012df2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8012d66:	2300      	movs	r3, #0
 8012d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8012d70:	e022      	b.n	8012db8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012d72:	f107 0316 	add.w	r3, r7, #22
 8012d76:	4619      	mov	r1, r3
 8012d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d7a:	f000 f8c9 	bl	8012f10 <USBH_GetNextDesc>
 8012d7e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8012d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d82:	785b      	ldrb	r3, [r3, #1]
 8012d84:	2b05      	cmp	r3, #5
 8012d86:	d117      	bne.n	8012db8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8012d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012d8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012d90:	3201      	adds	r2, #1
 8012d92:	00d2      	lsls	r2, r2, #3
 8012d94:	211a      	movs	r1, #26
 8012d96:	fb01 f303 	mul.w	r3, r1, r3
 8012d9a:	4413      	add	r3, r2
 8012d9c:	3308      	adds	r3, #8
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	4413      	add	r3, r2
 8012da2:	3304      	adds	r3, #4
 8012da4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8012da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012da8:	69b8      	ldr	r0, [r7, #24]
 8012daa:	f000 f851 	bl	8012e50 <USBH_ParseEPDesc>
            ep_ix++;
 8012dae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012db2:	3301      	adds	r3, #1
 8012db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	791b      	ldrb	r3, [r3, #4]
 8012dbc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d204      	bcs.n	8012dce <USBH_ParseCfgDesc+0x120>
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	885a      	ldrh	r2, [r3, #2]
 8012dc8:	8afb      	ldrh	r3, [r7, #22]
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d8d1      	bhi.n	8012d72 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8012dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8012dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012ddc:	2b01      	cmp	r3, #1
 8012dde:	d804      	bhi.n	8012dea <USBH_ParseCfgDesc+0x13c>
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	885a      	ldrh	r2, [r3, #2]
 8012de4:	8afb      	ldrh	r3, [r7, #22]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d8a4      	bhi.n	8012d34 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8012dea:	bf00      	nop
 8012dec:	3728      	adds	r7, #40	; 0x28
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}

08012df2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8012df2:	b480      	push	{r7}
 8012df4:	b083      	sub	sp, #12
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
 8012dfa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	781a      	ldrb	r2, [r3, #0]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	785a      	ldrb	r2, [r3, #1]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	789a      	ldrb	r2, [r3, #2]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	78da      	ldrb	r2, [r3, #3]
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	791a      	ldrb	r2, [r3, #4]
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	795a      	ldrb	r2, [r3, #5]
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	799a      	ldrb	r2, [r3, #6]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	79da      	ldrb	r2, [r3, #7]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	7a1a      	ldrb	r2, [r3, #8]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	721a      	strb	r2, [r3, #8]
}
 8012e44:	bf00      	nop
 8012e46:	370c      	adds	r7, #12
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8012e50:	b480      	push	{r7}
 8012e52:	b083      	sub	sp, #12
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	781a      	ldrb	r2, [r3, #0]
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	785a      	ldrb	r2, [r3, #1]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	789a      	ldrb	r2, [r3, #2]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	78da      	ldrb	r2, [r3, #3]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	3304      	adds	r3, #4
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	b29a      	uxth	r2, r3
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	3305      	adds	r3, #5
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	b29b      	uxth	r3, r3
 8012e8a:	021b      	lsls	r3, r3, #8
 8012e8c:	b29b      	uxth	r3, r3
 8012e8e:	4313      	orrs	r3, r2
 8012e90:	b29a      	uxth	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	799a      	ldrb	r2, [r3, #6]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	719a      	strb	r2, [r3, #6]
}
 8012e9e:	bf00      	nop
 8012ea0:	370c      	adds	r7, #12
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea8:	4770      	bx	lr

08012eaa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8012eaa:	b480      	push	{r7}
 8012eac:	b087      	sub	sp, #28
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	60f8      	str	r0, [r7, #12]
 8012eb2:	60b9      	str	r1, [r7, #8]
 8012eb4:	4613      	mov	r3, r2
 8012eb6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	2b03      	cmp	r3, #3
 8012ec0:	d120      	bne.n	8012f04 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	1e9a      	subs	r2, r3, #2
 8012ec8:	88fb      	ldrh	r3, [r7, #6]
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	bf28      	it	cs
 8012ece:	4613      	movcs	r3, r2
 8012ed0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	3302      	adds	r3, #2
 8012ed6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8012ed8:	2300      	movs	r3, #0
 8012eda:	82fb      	strh	r3, [r7, #22]
 8012edc:	e00b      	b.n	8012ef6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8012ede:	8afb      	ldrh	r3, [r7, #22]
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	4413      	add	r3, r2
 8012ee4:	781a      	ldrb	r2, [r3, #0]
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	3301      	adds	r3, #1
 8012eee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8012ef0:	8afb      	ldrh	r3, [r7, #22]
 8012ef2:	3302      	adds	r3, #2
 8012ef4:	82fb      	strh	r3, [r7, #22]
 8012ef6:	8afa      	ldrh	r2, [r7, #22]
 8012ef8:	8abb      	ldrh	r3, [r7, #20]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d3ef      	bcc.n	8012ede <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	2200      	movs	r2, #0
 8012f02:	701a      	strb	r2, [r3, #0]
  }
}
 8012f04:	bf00      	nop
 8012f06:	371c      	adds	r7, #28
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr

08012f10 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8012f10:	b480      	push	{r7}
 8012f12:	b085      	sub	sp, #20
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	881a      	ldrh	r2, [r3, #0]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	4413      	add	r3, r2
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	4413      	add	r3, r2
 8012f36:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012f38:	68fb      	ldr	r3, [r7, #12]
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3714      	adds	r7, #20
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f44:	4770      	bx	lr

08012f46 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8012f46:	b580      	push	{r7, lr}
 8012f48:	b086      	sub	sp, #24
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	60f8      	str	r0, [r7, #12]
 8012f4e:	60b9      	str	r1, [r7, #8]
 8012f50:	4613      	mov	r3, r2
 8012f52:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8012f54:	2301      	movs	r3, #1
 8012f56:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	789b      	ldrb	r3, [r3, #2]
 8012f5c:	2b01      	cmp	r3, #1
 8012f5e:	d002      	beq.n	8012f66 <USBH_CtlReq+0x20>
 8012f60:	2b02      	cmp	r3, #2
 8012f62:	d01d      	beq.n	8012fa0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8012f64:	e043      	b.n	8012fee <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	88fa      	ldrh	r2, [r7, #6]
 8012f70:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2201      	movs	r2, #1
 8012f76:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2202      	movs	r2, #2
 8012f7c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8012f7e:	2301      	movs	r3, #1
 8012f80:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2203      	movs	r2, #3
 8012f86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012f96:	2300      	movs	r3, #0
 8012f98:	2200      	movs	r2, #0
 8012f9a:	f000 fef1 	bl	8013d80 <osMessageQueuePut>
      break;
 8012f9e:	e026      	b.n	8012fee <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8012fa0:	68f8      	ldr	r0, [r7, #12]
 8012fa2:	f000 f829 	bl	8012ff8 <USBH_HandleControl>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8012faa:	7dfb      	ldrb	r3, [r7, #23]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d002      	beq.n	8012fb6 <USBH_CtlReq+0x70>
 8012fb0:	7dfb      	ldrb	r3, [r7, #23]
 8012fb2:	2b03      	cmp	r3, #3
 8012fb4:	d106      	bne.n	8012fc4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	2201      	movs	r2, #1
 8012fba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	761a      	strb	r2, [r3, #24]
 8012fc2:	e005      	b.n	8012fd0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8012fc4:	7dfb      	ldrb	r3, [r7, #23]
 8012fc6:	2b02      	cmp	r3, #2
 8012fc8:	d102      	bne.n	8012fd0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	2201      	movs	r2, #1
 8012fce:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	2203      	movs	r2, #3
 8012fd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	f000 feca 	bl	8013d80 <osMessageQueuePut>
      break;
 8012fec:	bf00      	nop
  }
  return status;
 8012fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3718      	adds	r7, #24
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b086      	sub	sp, #24
 8012ffc:	af02      	add	r7, sp, #8
 8012ffe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013000:	2301      	movs	r3, #1
 8013002:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013004:	2300      	movs	r3, #0
 8013006:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	7e1b      	ldrb	r3, [r3, #24]
 801300c:	3b01      	subs	r3, #1
 801300e:	2b0a      	cmp	r3, #10
 8013010:	f200 822b 	bhi.w	801346a <USBH_HandleControl+0x472>
 8013014:	a201      	add	r2, pc, #4	; (adr r2, 801301c <USBH_HandleControl+0x24>)
 8013016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801301a:	bf00      	nop
 801301c:	08013049 	.word	0x08013049
 8013020:	08013063 	.word	0x08013063
 8013024:	08013105 	.word	0x08013105
 8013028:	0801312b 	.word	0x0801312b
 801302c:	080131b7 	.word	0x080131b7
 8013030:	080131e3 	.word	0x080131e3
 8013034:	080132a5 	.word	0x080132a5
 8013038:	080132c7 	.word	0x080132c7
 801303c:	08013359 	.word	0x08013359
 8013040:	08013381 	.word	0x08013381
 8013044:	08013413 	.word	0x08013413
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f103 0110 	add.w	r1, r3, #16
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	795b      	ldrb	r3, [r3, #5]
 8013052:	461a      	mov	r2, r3
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f000 fa19 	bl	801348c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2202      	movs	r2, #2
 801305e:	761a      	strb	r2, [r3, #24]
      break;
 8013060:	e20e      	b.n	8013480 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	795b      	ldrb	r3, [r3, #5]
 8013066:	4619      	mov	r1, r3
 8013068:	6878      	ldr	r0, [r7, #4]
 801306a:	f004 faa9 	bl	80175c0 <USBH_LL_GetURBState>
 801306e:	4603      	mov	r3, r0
 8013070:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013072:	7bbb      	ldrb	r3, [r7, #14]
 8013074:	2b01      	cmp	r3, #1
 8013076:	d12c      	bne.n	80130d2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	7c1b      	ldrb	r3, [r3, #16]
 801307c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013080:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	8adb      	ldrh	r3, [r3, #22]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d00a      	beq.n	80130a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801308a:	7b7b      	ldrb	r3, [r7, #13]
 801308c:	2b80      	cmp	r3, #128	; 0x80
 801308e:	d103      	bne.n	8013098 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2203      	movs	r2, #3
 8013094:	761a      	strb	r2, [r3, #24]
 8013096:	e00d      	b.n	80130b4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2205      	movs	r2, #5
 801309c:	761a      	strb	r2, [r3, #24]
 801309e:	e009      	b.n	80130b4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80130a0:	7b7b      	ldrb	r3, [r7, #13]
 80130a2:	2b80      	cmp	r3, #128	; 0x80
 80130a4:	d103      	bne.n	80130ae <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2209      	movs	r2, #9
 80130aa:	761a      	strb	r2, [r3, #24]
 80130ac:	e002      	b.n	80130b4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2207      	movs	r2, #7
 80130b2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2203      	movs	r2, #3
 80130b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80130c8:	2300      	movs	r3, #0
 80130ca:	2200      	movs	r2, #0
 80130cc:	f000 fe58 	bl	8013d80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80130d0:	e1cd      	b.n	801346e <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80130d2:	7bbb      	ldrb	r3, [r7, #14]
 80130d4:	2b04      	cmp	r3, #4
 80130d6:	d003      	beq.n	80130e0 <USBH_HandleControl+0xe8>
 80130d8:	7bbb      	ldrb	r3, [r7, #14]
 80130da:	2b02      	cmp	r3, #2
 80130dc:	f040 81c7 	bne.w	801346e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	220b      	movs	r2, #11
 80130e4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2203      	movs	r2, #3
 80130ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80130fa:	2300      	movs	r3, #0
 80130fc:	2200      	movs	r2, #0
 80130fe:	f000 fe3f 	bl	8013d80 <osMessageQueuePut>
      break;
 8013102:	e1b4      	b.n	801346e <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801310a:	b29a      	uxth	r2, r3
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6899      	ldr	r1, [r3, #8]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	899a      	ldrh	r2, [r3, #12]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	791b      	ldrb	r3, [r3, #4]
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f000 f9f4 	bl	801350a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2204      	movs	r2, #4
 8013126:	761a      	strb	r2, [r3, #24]
      break;
 8013128:	e1aa      	b.n	8013480 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	791b      	ldrb	r3, [r3, #4]
 801312e:	4619      	mov	r1, r3
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f004 fa45 	bl	80175c0 <USBH_LL_GetURBState>
 8013136:	4603      	mov	r3, r0
 8013138:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801313a:	7bbb      	ldrb	r3, [r7, #14]
 801313c:	2b01      	cmp	r3, #1
 801313e:	d110      	bne.n	8013162 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2209      	movs	r2, #9
 8013144:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2203      	movs	r2, #3
 801314a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801315a:	2300      	movs	r3, #0
 801315c:	2200      	movs	r2, #0
 801315e:	f000 fe0f 	bl	8013d80 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8013162:	7bbb      	ldrb	r3, [r7, #14]
 8013164:	2b05      	cmp	r3, #5
 8013166:	d110      	bne.n	801318a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8013168:	2303      	movs	r3, #3
 801316a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2203      	movs	r2, #3
 8013170:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013180:	2300      	movs	r3, #0
 8013182:	2200      	movs	r2, #0
 8013184:	f000 fdfc 	bl	8013d80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8013188:	e173      	b.n	8013472 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801318a:	7bbb      	ldrb	r3, [r7, #14]
 801318c:	2b04      	cmp	r3, #4
 801318e:	f040 8170 	bne.w	8013472 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	220b      	movs	r2, #11
 8013196:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2203      	movs	r2, #3
 801319c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80131ac:	2300      	movs	r3, #0
 80131ae:	2200      	movs	r2, #0
 80131b0:	f000 fde6 	bl	8013d80 <osMessageQueuePut>
      break;
 80131b4:	e15d      	b.n	8013472 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	6899      	ldr	r1, [r3, #8]
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	899a      	ldrh	r2, [r3, #12]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	7958      	ldrb	r0, [r3, #5]
 80131c2:	2301      	movs	r3, #1
 80131c4:	9300      	str	r3, [sp, #0]
 80131c6:	4603      	mov	r3, r0
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 f979 	bl	80134c0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80131d4:	b29a      	uxth	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2206      	movs	r2, #6
 80131de:	761a      	strb	r2, [r3, #24]
      break;
 80131e0:	e14e      	b.n	8013480 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	795b      	ldrb	r3, [r3, #5]
 80131e6:	4619      	mov	r1, r3
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f004 f9e9 	bl	80175c0 <USBH_LL_GetURBState>
 80131ee:	4603      	mov	r3, r0
 80131f0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80131f2:	7bbb      	ldrb	r3, [r7, #14]
 80131f4:	2b01      	cmp	r3, #1
 80131f6:	d111      	bne.n	801321c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2207      	movs	r2, #7
 80131fc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2203      	movs	r2, #3
 8013202:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013212:	2300      	movs	r3, #0
 8013214:	2200      	movs	r2, #0
 8013216:	f000 fdb3 	bl	8013d80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801321a:	e12c      	b.n	8013476 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 801321c:	7bbb      	ldrb	r3, [r7, #14]
 801321e:	2b05      	cmp	r3, #5
 8013220:	d113      	bne.n	801324a <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	220c      	movs	r2, #12
 8013226:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8013228:	2303      	movs	r3, #3
 801322a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2203      	movs	r2, #3
 8013230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013240:	2300      	movs	r3, #0
 8013242:	2200      	movs	r2, #0
 8013244:	f000 fd9c 	bl	8013d80 <osMessageQueuePut>
      break;
 8013248:	e115      	b.n	8013476 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 801324a:	7bbb      	ldrb	r3, [r7, #14]
 801324c:	2b02      	cmp	r3, #2
 801324e:	d111      	bne.n	8013274 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2205      	movs	r2, #5
 8013254:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2203      	movs	r2, #3
 801325a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801326a:	2300      	movs	r3, #0
 801326c:	2200      	movs	r2, #0
 801326e:	f000 fd87 	bl	8013d80 <osMessageQueuePut>
      break;
 8013272:	e100      	b.n	8013476 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8013274:	7bbb      	ldrb	r3, [r7, #14]
 8013276:	2b04      	cmp	r3, #4
 8013278:	f040 80fd 	bne.w	8013476 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	220b      	movs	r2, #11
 8013280:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8013282:	2302      	movs	r3, #2
 8013284:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2203      	movs	r2, #3
 801328a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801329a:	2300      	movs	r3, #0
 801329c:	2200      	movs	r2, #0
 801329e:	f000 fd6f 	bl	8013d80 <osMessageQueuePut>
      break;
 80132a2:	e0e8      	b.n	8013476 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	791b      	ldrb	r3, [r3, #4]
 80132a8:	2200      	movs	r2, #0
 80132aa:	2100      	movs	r1, #0
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f000 f92c 	bl	801350a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80132b8:	b29a      	uxth	r2, r3
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2208      	movs	r2, #8
 80132c2:	761a      	strb	r2, [r3, #24]

      break;
 80132c4:	e0dc      	b.n	8013480 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	791b      	ldrb	r3, [r3, #4]
 80132ca:	4619      	mov	r1, r3
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f004 f977 	bl	80175c0 <USBH_LL_GetURBState>
 80132d2:	4603      	mov	r3, r0
 80132d4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80132d6:	7bbb      	ldrb	r3, [r7, #14]
 80132d8:	2b01      	cmp	r3, #1
 80132da:	d113      	bne.n	8013304 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	220d      	movs	r2, #13
 80132e0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80132e2:	2300      	movs	r3, #0
 80132e4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2203      	movs	r2, #3
 80132ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80132fa:	2300      	movs	r3, #0
 80132fc:	2200      	movs	r2, #0
 80132fe:	f000 fd3f 	bl	8013d80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8013302:	e0ba      	b.n	801347a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8013304:	7bbb      	ldrb	r3, [r7, #14]
 8013306:	2b04      	cmp	r3, #4
 8013308:	d111      	bne.n	801332e <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	220b      	movs	r2, #11
 801330e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2203      	movs	r2, #3
 8013314:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013324:	2300      	movs	r3, #0
 8013326:	2200      	movs	r2, #0
 8013328:	f000 fd2a 	bl	8013d80 <osMessageQueuePut>
      break;
 801332c:	e0a5      	b.n	801347a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 801332e:	7bbb      	ldrb	r3, [r7, #14]
 8013330:	2b05      	cmp	r3, #5
 8013332:	f040 80a2 	bne.w	801347a <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8013336:	2303      	movs	r3, #3
 8013338:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2203      	movs	r2, #3
 801333e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801334e:	2300      	movs	r3, #0
 8013350:	2200      	movs	r2, #0
 8013352:	f000 fd15 	bl	8013d80 <osMessageQueuePut>
      break;
 8013356:	e090      	b.n	801347a <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	795a      	ldrb	r2, [r3, #5]
 801335c:	2301      	movs	r3, #1
 801335e:	9300      	str	r3, [sp, #0]
 8013360:	4613      	mov	r3, r2
 8013362:	2200      	movs	r2, #0
 8013364:	2100      	movs	r1, #0
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f000 f8aa 	bl	80134c0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013372:	b29a      	uxth	r2, r3
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	220a      	movs	r2, #10
 801337c:	761a      	strb	r2, [r3, #24]
      break;
 801337e:	e07f      	b.n	8013480 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	795b      	ldrb	r3, [r3, #5]
 8013384:	4619      	mov	r1, r3
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f004 f91a 	bl	80175c0 <USBH_LL_GetURBState>
 801338c:	4603      	mov	r3, r0
 801338e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8013390:	7bbb      	ldrb	r3, [r7, #14]
 8013392:	2b01      	cmp	r3, #1
 8013394:	d113      	bne.n	80133be <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8013396:	2300      	movs	r3, #0
 8013398:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	220d      	movs	r2, #13
 801339e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2203      	movs	r2, #3
 80133a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80133b4:	2300      	movs	r3, #0
 80133b6:	2200      	movs	r2, #0
 80133b8:	f000 fce2 	bl	8013d80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80133bc:	e05f      	b.n	801347e <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80133be:	7bbb      	ldrb	r3, [r7, #14]
 80133c0:	2b02      	cmp	r3, #2
 80133c2:	d111      	bne.n	80133e8 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2209      	movs	r2, #9
 80133c8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2203      	movs	r2, #3
 80133ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80133de:	2300      	movs	r3, #0
 80133e0:	2200      	movs	r2, #0
 80133e2:	f000 fccd 	bl	8013d80 <osMessageQueuePut>
      break;
 80133e6:	e04a      	b.n	801347e <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80133e8:	7bbb      	ldrb	r3, [r7, #14]
 80133ea:	2b04      	cmp	r3, #4
 80133ec:	d147      	bne.n	801347e <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	220b      	movs	r2, #11
 80133f2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2203      	movs	r2, #3
 80133f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013408:	2300      	movs	r3, #0
 801340a:	2200      	movs	r2, #0
 801340c:	f000 fcb8 	bl	8013d80 <osMessageQueuePut>
      break;
 8013410:	e035      	b.n	801347e <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	7e5b      	ldrb	r3, [r3, #25]
 8013416:	3301      	adds	r3, #1
 8013418:	b2da      	uxtb	r2, r3
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	765a      	strb	r2, [r3, #25]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	7e5b      	ldrb	r3, [r3, #25]
 8013422:	2b02      	cmp	r3, #2
 8013424:	d806      	bhi.n	8013434 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2201      	movs	r2, #1
 801342a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2201      	movs	r2, #1
 8013430:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8013432:	e025      	b.n	8013480 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801343a:	2106      	movs	r1, #6
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2200      	movs	r2, #0
 8013444:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	795b      	ldrb	r3, [r3, #5]
 801344a:	4619      	mov	r1, r3
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f000 f90d 	bl	801366c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	791b      	ldrb	r3, [r3, #4]
 8013456:	4619      	mov	r1, r3
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f000 f907 	bl	801366c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2200      	movs	r2, #0
 8013462:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8013464:	2302      	movs	r3, #2
 8013466:	73fb      	strb	r3, [r7, #15]
      break;
 8013468:	e00a      	b.n	8013480 <USBH_HandleControl+0x488>

    default:
      break;
 801346a:	bf00      	nop
 801346c:	e008      	b.n	8013480 <USBH_HandleControl+0x488>
      break;
 801346e:	bf00      	nop
 8013470:	e006      	b.n	8013480 <USBH_HandleControl+0x488>
      break;
 8013472:	bf00      	nop
 8013474:	e004      	b.n	8013480 <USBH_HandleControl+0x488>
      break;
 8013476:	bf00      	nop
 8013478:	e002      	b.n	8013480 <USBH_HandleControl+0x488>
      break;
 801347a:	bf00      	nop
 801347c:	e000      	b.n	8013480 <USBH_HandleControl+0x488>
      break;
 801347e:	bf00      	nop
  }

  return status;
 8013480:	7bfb      	ldrb	r3, [r7, #15]
}
 8013482:	4618      	mov	r0, r3
 8013484:	3710      	adds	r7, #16
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop

0801348c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b088      	sub	sp, #32
 8013490:	af04      	add	r7, sp, #16
 8013492:	60f8      	str	r0, [r7, #12]
 8013494:	60b9      	str	r1, [r7, #8]
 8013496:	4613      	mov	r3, r2
 8013498:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801349a:	79f9      	ldrb	r1, [r7, #7]
 801349c:	2300      	movs	r3, #0
 801349e:	9303      	str	r3, [sp, #12]
 80134a0:	2308      	movs	r3, #8
 80134a2:	9302      	str	r3, [sp, #8]
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	9301      	str	r3, [sp, #4]
 80134a8:	2300      	movs	r3, #0
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	2300      	movs	r3, #0
 80134ae:	2200      	movs	r2, #0
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f004 f854 	bl	801755e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80134b6:	2300      	movs	r3, #0
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3710      	adds	r7, #16
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b088      	sub	sp, #32
 80134c4:	af04      	add	r7, sp, #16
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	60b9      	str	r1, [r7, #8]
 80134ca:	4611      	mov	r1, r2
 80134cc:	461a      	mov	r2, r3
 80134ce:	460b      	mov	r3, r1
 80134d0:	80fb      	strh	r3, [r7, #6]
 80134d2:	4613      	mov	r3, r2
 80134d4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d001      	beq.n	80134e4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80134e0:	2300      	movs	r3, #0
 80134e2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80134e4:	7979      	ldrb	r1, [r7, #5]
 80134e6:	7e3b      	ldrb	r3, [r7, #24]
 80134e8:	9303      	str	r3, [sp, #12]
 80134ea:	88fb      	ldrh	r3, [r7, #6]
 80134ec:	9302      	str	r3, [sp, #8]
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	9301      	str	r3, [sp, #4]
 80134f2:	2301      	movs	r3, #1
 80134f4:	9300      	str	r3, [sp, #0]
 80134f6:	2300      	movs	r3, #0
 80134f8:	2200      	movs	r2, #0
 80134fa:	68f8      	ldr	r0, [r7, #12]
 80134fc:	f004 f82f 	bl	801755e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8013500:	2300      	movs	r3, #0
}
 8013502:	4618      	mov	r0, r3
 8013504:	3710      	adds	r7, #16
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801350a:	b580      	push	{r7, lr}
 801350c:	b088      	sub	sp, #32
 801350e:	af04      	add	r7, sp, #16
 8013510:	60f8      	str	r0, [r7, #12]
 8013512:	60b9      	str	r1, [r7, #8]
 8013514:	4611      	mov	r1, r2
 8013516:	461a      	mov	r2, r3
 8013518:	460b      	mov	r3, r1
 801351a:	80fb      	strh	r3, [r7, #6]
 801351c:	4613      	mov	r3, r2
 801351e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8013520:	7979      	ldrb	r1, [r7, #5]
 8013522:	2300      	movs	r3, #0
 8013524:	9303      	str	r3, [sp, #12]
 8013526:	88fb      	ldrh	r3, [r7, #6]
 8013528:	9302      	str	r3, [sp, #8]
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	9301      	str	r3, [sp, #4]
 801352e:	2301      	movs	r3, #1
 8013530:	9300      	str	r3, [sp, #0]
 8013532:	2300      	movs	r3, #0
 8013534:	2201      	movs	r2, #1
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	f004 f811 	bl	801755e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801353c:	2300      	movs	r3, #0

}
 801353e:	4618      	mov	r0, r3
 8013540:	3710      	adds	r7, #16
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8013546:	b580      	push	{r7, lr}
 8013548:	b088      	sub	sp, #32
 801354a:	af04      	add	r7, sp, #16
 801354c:	60f8      	str	r0, [r7, #12]
 801354e:	60b9      	str	r1, [r7, #8]
 8013550:	4611      	mov	r1, r2
 8013552:	461a      	mov	r2, r3
 8013554:	460b      	mov	r3, r1
 8013556:	80fb      	strh	r3, [r7, #6]
 8013558:	4613      	mov	r3, r2
 801355a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013562:	2b00      	cmp	r3, #0
 8013564:	d001      	beq.n	801356a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8013566:	2300      	movs	r3, #0
 8013568:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801356a:	7979      	ldrb	r1, [r7, #5]
 801356c:	7e3b      	ldrb	r3, [r7, #24]
 801356e:	9303      	str	r3, [sp, #12]
 8013570:	88fb      	ldrh	r3, [r7, #6]
 8013572:	9302      	str	r3, [sp, #8]
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	9301      	str	r3, [sp, #4]
 8013578:	2301      	movs	r3, #1
 801357a:	9300      	str	r3, [sp, #0]
 801357c:	2302      	movs	r3, #2
 801357e:	2200      	movs	r2, #0
 8013580:	68f8      	ldr	r0, [r7, #12]
 8013582:	f003 ffec 	bl	801755e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8013586:	2300      	movs	r3, #0
}
 8013588:	4618      	mov	r0, r3
 801358a:	3710      	adds	r7, #16
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b088      	sub	sp, #32
 8013594:	af04      	add	r7, sp, #16
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	4611      	mov	r1, r2
 801359c:	461a      	mov	r2, r3
 801359e:	460b      	mov	r3, r1
 80135a0:	80fb      	strh	r3, [r7, #6]
 80135a2:	4613      	mov	r3, r2
 80135a4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80135a6:	7979      	ldrb	r1, [r7, #5]
 80135a8:	2300      	movs	r3, #0
 80135aa:	9303      	str	r3, [sp, #12]
 80135ac:	88fb      	ldrh	r3, [r7, #6]
 80135ae:	9302      	str	r3, [sp, #8]
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	9301      	str	r3, [sp, #4]
 80135b4:	2301      	movs	r3, #1
 80135b6:	9300      	str	r3, [sp, #0]
 80135b8:	2302      	movs	r3, #2
 80135ba:	2201      	movs	r2, #1
 80135bc:	68f8      	ldr	r0, [r7, #12]
 80135be:	f003 ffce 	bl	801755e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80135c2:	2300      	movs	r3, #0
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3710      	adds	r7, #16
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b086      	sub	sp, #24
 80135d0:	af04      	add	r7, sp, #16
 80135d2:	6078      	str	r0, [r7, #4]
 80135d4:	4608      	mov	r0, r1
 80135d6:	4611      	mov	r1, r2
 80135d8:	461a      	mov	r2, r3
 80135da:	4603      	mov	r3, r0
 80135dc:	70fb      	strb	r3, [r7, #3]
 80135de:	460b      	mov	r3, r1
 80135e0:	70bb      	strb	r3, [r7, #2]
 80135e2:	4613      	mov	r3, r2
 80135e4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80135e6:	7878      	ldrb	r0, [r7, #1]
 80135e8:	78ba      	ldrb	r2, [r7, #2]
 80135ea:	78f9      	ldrb	r1, [r7, #3]
 80135ec:	8b3b      	ldrh	r3, [r7, #24]
 80135ee:	9302      	str	r3, [sp, #8]
 80135f0:	7d3b      	ldrb	r3, [r7, #20]
 80135f2:	9301      	str	r3, [sp, #4]
 80135f4:	7c3b      	ldrb	r3, [r7, #16]
 80135f6:	9300      	str	r3, [sp, #0]
 80135f8:	4603      	mov	r3, r0
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f003 ff61 	bl	80174c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8013600:	2300      	movs	r3, #0
}
 8013602:	4618      	mov	r0, r3
 8013604:	3708      	adds	r7, #8
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}

0801360a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801360a:	b580      	push	{r7, lr}
 801360c:	b082      	sub	sp, #8
 801360e:	af00      	add	r7, sp, #0
 8013610:	6078      	str	r0, [r7, #4]
 8013612:	460b      	mov	r3, r1
 8013614:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8013616:	78fb      	ldrb	r3, [r7, #3]
 8013618:	4619      	mov	r1, r3
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f003 ff80 	bl	8017520 <USBH_LL_ClosePipe>

  return USBH_OK;
 8013620:	2300      	movs	r3, #0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3708      	adds	r7, #8
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801362a:	b580      	push	{r7, lr}
 801362c:	b084      	sub	sp, #16
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
 8013632:	460b      	mov	r3, r1
 8013634:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f000 f836 	bl	80136a8 <USBH_GetFreePipe>
 801363c:	4603      	mov	r3, r0
 801363e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8013640:	89fb      	ldrh	r3, [r7, #14]
 8013642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013646:	4293      	cmp	r3, r2
 8013648:	d00a      	beq.n	8013660 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801364a:	78fa      	ldrb	r2, [r7, #3]
 801364c:	89fb      	ldrh	r3, [r7, #14]
 801364e:	f003 030f 	and.w	r3, r3, #15
 8013652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013656:	6879      	ldr	r1, [r7, #4]
 8013658:	33e0      	adds	r3, #224	; 0xe0
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	440b      	add	r3, r1
 801365e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8013660:	89fb      	ldrh	r3, [r7, #14]
 8013662:	b2db      	uxtb	r3, r3
}
 8013664:	4618      	mov	r0, r3
 8013666:	3710      	adds	r7, #16
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801366c:	b480      	push	{r7}
 801366e:	b083      	sub	sp, #12
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	460b      	mov	r3, r1
 8013676:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8013678:	78fb      	ldrb	r3, [r7, #3]
 801367a:	2b0a      	cmp	r3, #10
 801367c:	d80d      	bhi.n	801369a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801367e:	78fb      	ldrb	r3, [r7, #3]
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	33e0      	adds	r3, #224	; 0xe0
 8013684:	009b      	lsls	r3, r3, #2
 8013686:	4413      	add	r3, r2
 8013688:	685a      	ldr	r2, [r3, #4]
 801368a:	78fb      	ldrb	r3, [r7, #3]
 801368c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013690:	6879      	ldr	r1, [r7, #4]
 8013692:	33e0      	adds	r3, #224	; 0xe0
 8013694:	009b      	lsls	r3, r3, #2
 8013696:	440b      	add	r3, r1
 8013698:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801369a:	2300      	movs	r3, #0
}
 801369c:	4618      	mov	r0, r3
 801369e:	370c      	adds	r7, #12
 80136a0:	46bd      	mov	sp, r7
 80136a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a6:	4770      	bx	lr

080136a8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80136a8:	b480      	push	{r7}
 80136aa:	b085      	sub	sp, #20
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80136b0:	2300      	movs	r3, #0
 80136b2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80136b4:	2300      	movs	r3, #0
 80136b6:	73fb      	strb	r3, [r7, #15]
 80136b8:	e00f      	b.n	80136da <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80136ba:	7bfb      	ldrb	r3, [r7, #15]
 80136bc:	687a      	ldr	r2, [r7, #4]
 80136be:	33e0      	adds	r3, #224	; 0xe0
 80136c0:	009b      	lsls	r3, r3, #2
 80136c2:	4413      	add	r3, r2
 80136c4:	685b      	ldr	r3, [r3, #4]
 80136c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d102      	bne.n	80136d4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80136ce:	7bfb      	ldrb	r3, [r7, #15]
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	e007      	b.n	80136e4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80136d4:	7bfb      	ldrb	r3, [r7, #15]
 80136d6:	3301      	adds	r3, #1
 80136d8:	73fb      	strb	r3, [r7, #15]
 80136da:	7bfb      	ldrb	r3, [r7, #15]
 80136dc:	2b0a      	cmp	r3, #10
 80136de:	d9ec      	bls.n	80136ba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80136e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3714      	adds	r7, #20
 80136e8:	46bd      	mov	sp, r7
 80136ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ee:	4770      	bx	lr

080136f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80136f0:	b480      	push	{r7}
 80136f2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80136f4:	bf00      	nop
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr
	...

08013700 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013700:	b480      	push	{r7}
 8013702:	b085      	sub	sp, #20
 8013704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013706:	f3ef 8305 	mrs	r3, IPSR
 801370a:	60bb      	str	r3, [r7, #8]
  return(result);
 801370c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801370e:	2b00      	cmp	r3, #0
 8013710:	d10f      	bne.n	8013732 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013712:	f3ef 8310 	mrs	r3, PRIMASK
 8013716:	607b      	str	r3, [r7, #4]
  return(result);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d105      	bne.n	801372a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801371e:	f3ef 8311 	mrs	r3, BASEPRI
 8013722:	603b      	str	r3, [r7, #0]
  return(result);
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d007      	beq.n	801373a <osKernelInitialize+0x3a>
 801372a:	4b0e      	ldr	r3, [pc, #56]	; (8013764 <osKernelInitialize+0x64>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	2b02      	cmp	r3, #2
 8013730:	d103      	bne.n	801373a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8013732:	f06f 0305 	mvn.w	r3, #5
 8013736:	60fb      	str	r3, [r7, #12]
 8013738:	e00c      	b.n	8013754 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801373a:	4b0a      	ldr	r3, [pc, #40]	; (8013764 <osKernelInitialize+0x64>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d105      	bne.n	801374e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013742:	4b08      	ldr	r3, [pc, #32]	; (8013764 <osKernelInitialize+0x64>)
 8013744:	2201      	movs	r2, #1
 8013746:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013748:	2300      	movs	r3, #0
 801374a:	60fb      	str	r3, [r7, #12]
 801374c:	e002      	b.n	8013754 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801374e:	f04f 33ff 	mov.w	r3, #4294967295
 8013752:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013754:	68fb      	ldr	r3, [r7, #12]
}
 8013756:	4618      	mov	r0, r3
 8013758:	3714      	adds	r7, #20
 801375a:	46bd      	mov	sp, r7
 801375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013760:	4770      	bx	lr
 8013762:	bf00      	nop
 8013764:	20001174 	.word	0x20001174

08013768 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801376e:	f3ef 8305 	mrs	r3, IPSR
 8013772:	60bb      	str	r3, [r7, #8]
  return(result);
 8013774:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013776:	2b00      	cmp	r3, #0
 8013778:	d10f      	bne.n	801379a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801377a:	f3ef 8310 	mrs	r3, PRIMASK
 801377e:	607b      	str	r3, [r7, #4]
  return(result);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d105      	bne.n	8013792 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013786:	f3ef 8311 	mrs	r3, BASEPRI
 801378a:	603b      	str	r3, [r7, #0]
  return(result);
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d007      	beq.n	80137a2 <osKernelStart+0x3a>
 8013792:	4b0f      	ldr	r3, [pc, #60]	; (80137d0 <osKernelStart+0x68>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	2b02      	cmp	r3, #2
 8013798:	d103      	bne.n	80137a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 801379a:	f06f 0305 	mvn.w	r3, #5
 801379e:	60fb      	str	r3, [r7, #12]
 80137a0:	e010      	b.n	80137c4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80137a2:	4b0b      	ldr	r3, [pc, #44]	; (80137d0 <osKernelStart+0x68>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	2b01      	cmp	r3, #1
 80137a8:	d109      	bne.n	80137be <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80137aa:	f7ff ffa1 	bl	80136f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80137ae:	4b08      	ldr	r3, [pc, #32]	; (80137d0 <osKernelStart+0x68>)
 80137b0:	2202      	movs	r2, #2
 80137b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80137b4:	f001 fee2 	bl	801557c <vTaskStartScheduler>
      stat = osOK;
 80137b8:	2300      	movs	r3, #0
 80137ba:	60fb      	str	r3, [r7, #12]
 80137bc:	e002      	b.n	80137c4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80137be:	f04f 33ff 	mov.w	r3, #4294967295
 80137c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80137c4:	68fb      	ldr	r3, [r7, #12]
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3710      	adds	r7, #16
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	20001174 	.word	0x20001174

080137d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b090      	sub	sp, #64	; 0x40
 80137d8:	af04      	add	r7, sp, #16
 80137da:	60f8      	str	r0, [r7, #12]
 80137dc:	60b9      	str	r1, [r7, #8]
 80137de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80137e0:	2300      	movs	r3, #0
 80137e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137e4:	f3ef 8305 	mrs	r3, IPSR
 80137e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80137ea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	f040 808f 	bne.w	8013910 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80137f2:	f3ef 8310 	mrs	r3, PRIMASK
 80137f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d105      	bne.n	801380a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80137fe:	f3ef 8311 	mrs	r3, BASEPRI
 8013802:	617b      	str	r3, [r7, #20]
  return(result);
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d003      	beq.n	8013812 <osThreadNew+0x3e>
 801380a:	4b44      	ldr	r3, [pc, #272]	; (801391c <osThreadNew+0x148>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	2b02      	cmp	r3, #2
 8013810:	d07e      	beq.n	8013910 <osThreadNew+0x13c>
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d07b      	beq.n	8013910 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8013818:	2380      	movs	r3, #128	; 0x80
 801381a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801381c:	2318      	movs	r3, #24
 801381e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8013820:	2300      	movs	r3, #0
 8013822:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8013824:	f04f 33ff 	mov.w	r3, #4294967295
 8013828:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d045      	beq.n	80138bc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d002      	beq.n	801383e <osThreadNew+0x6a>
        name = attr->name;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	699b      	ldr	r3, [r3, #24]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d002      	beq.n	801384c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	699b      	ldr	r3, [r3, #24]
 801384a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384e:	2b00      	cmp	r3, #0
 8013850:	d008      	beq.n	8013864 <osThreadNew+0x90>
 8013852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013854:	2b38      	cmp	r3, #56	; 0x38
 8013856:	d805      	bhi.n	8013864 <osThreadNew+0x90>
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	f003 0301 	and.w	r3, r3, #1
 8013860:	2b00      	cmp	r3, #0
 8013862:	d001      	beq.n	8013868 <osThreadNew+0x94>
        return (NULL);
 8013864:	2300      	movs	r3, #0
 8013866:	e054      	b.n	8013912 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	695b      	ldr	r3, [r3, #20]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d003      	beq.n	8013878 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	695b      	ldr	r3, [r3, #20]
 8013874:	089b      	lsrs	r3, r3, #2
 8013876:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	689b      	ldr	r3, [r3, #8]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d00e      	beq.n	801389e <osThreadNew+0xca>
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	68db      	ldr	r3, [r3, #12]
 8013884:	2b5f      	cmp	r3, #95	; 0x5f
 8013886:	d90a      	bls.n	801389e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801388c:	2b00      	cmp	r3, #0
 801388e:	d006      	beq.n	801389e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	695b      	ldr	r3, [r3, #20]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d002      	beq.n	801389e <osThreadNew+0xca>
        mem = 1;
 8013898:	2301      	movs	r3, #1
 801389a:	623b      	str	r3, [r7, #32]
 801389c:	e010      	b.n	80138c0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	689b      	ldr	r3, [r3, #8]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d10c      	bne.n	80138c0 <osThreadNew+0xec>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	68db      	ldr	r3, [r3, #12]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d108      	bne.n	80138c0 <osThreadNew+0xec>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	691b      	ldr	r3, [r3, #16]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d104      	bne.n	80138c0 <osThreadNew+0xec>
          mem = 0;
 80138b6:	2300      	movs	r3, #0
 80138b8:	623b      	str	r3, [r7, #32]
 80138ba:	e001      	b.n	80138c0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80138bc:	2300      	movs	r3, #0
 80138be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80138c0:	6a3b      	ldr	r3, [r7, #32]
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d110      	bne.n	80138e8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80138ce:	9202      	str	r2, [sp, #8]
 80138d0:	9301      	str	r3, [sp, #4]
 80138d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80138dc:	68f8      	ldr	r0, [r7, #12]
 80138de:	f001 fbeb 	bl	80150b8 <xTaskCreateStatic>
 80138e2:	4603      	mov	r3, r0
 80138e4:	613b      	str	r3, [r7, #16]
 80138e6:	e013      	b.n	8013910 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80138e8:	6a3b      	ldr	r3, [r7, #32]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d110      	bne.n	8013910 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80138ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f0:	b29a      	uxth	r2, r3
 80138f2:	f107 0310 	add.w	r3, r7, #16
 80138f6:	9301      	str	r3, [sp, #4]
 80138f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fa:	9300      	str	r3, [sp, #0]
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013900:	68f8      	ldr	r0, [r7, #12]
 8013902:	f001 fc39 	bl	8015178 <xTaskCreate>
 8013906:	4603      	mov	r3, r0
 8013908:	2b01      	cmp	r3, #1
 801390a:	d001      	beq.n	8013910 <osThreadNew+0x13c>
          hTask = NULL;
 801390c:	2300      	movs	r3, #0
 801390e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013910:	693b      	ldr	r3, [r7, #16]
}
 8013912:	4618      	mov	r0, r3
 8013914:	3730      	adds	r7, #48	; 0x30
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
 801391a:	bf00      	nop
 801391c:	20001174 	.word	0x20001174

08013920 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8013920:	b580      	push	{r7, lr}
 8013922:	b088      	sub	sp, #32
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801392c:	f3ef 8305 	mrs	r3, IPSR
 8013930:	617b      	str	r3, [r7, #20]
  return(result);
 8013932:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013934:	2b00      	cmp	r3, #0
 8013936:	d10f      	bne.n	8013958 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013938:	f3ef 8310 	mrs	r3, PRIMASK
 801393c:	613b      	str	r3, [r7, #16]
  return(result);
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d105      	bne.n	8013950 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013944:	f3ef 8311 	mrs	r3, BASEPRI
 8013948:	60fb      	str	r3, [r7, #12]
  return(result);
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d007      	beq.n	8013960 <osThreadSuspend+0x40>
 8013950:	4b0c      	ldr	r3, [pc, #48]	; (8013984 <osThreadSuspend+0x64>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2b02      	cmp	r3, #2
 8013956:	d103      	bne.n	8013960 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8013958:	f06f 0305 	mvn.w	r3, #5
 801395c:	61fb      	str	r3, [r7, #28]
 801395e:	e00b      	b.n	8013978 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8013960:	69bb      	ldr	r3, [r7, #24]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d103      	bne.n	801396e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8013966:	f06f 0303 	mvn.w	r3, #3
 801396a:	61fb      	str	r3, [r7, #28]
 801396c:	e004      	b.n	8013978 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 801396e:	2300      	movs	r3, #0
 8013970:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8013972:	69b8      	ldr	r0, [r7, #24]
 8013974:	f001 fd86 	bl	8015484 <vTaskSuspend>
  }

  return (stat);
 8013978:	69fb      	ldr	r3, [r7, #28]
}
 801397a:	4618      	mov	r0, r3
 801397c:	3720      	adds	r7, #32
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}
 8013982:	bf00      	nop
 8013984:	20001174 	.word	0x20001174

08013988 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8013988:	b580      	push	{r7, lr}
 801398a:	b086      	sub	sp, #24
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013990:	f3ef 8305 	mrs	r3, IPSR
 8013994:	613b      	str	r3, [r7, #16]
  return(result);
 8013996:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013998:	2b00      	cmp	r3, #0
 801399a:	d10f      	bne.n	80139bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801399c:	f3ef 8310 	mrs	r3, PRIMASK
 80139a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d105      	bne.n	80139b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80139a8:	f3ef 8311 	mrs	r3, BASEPRI
 80139ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d007      	beq.n	80139c4 <osDelay+0x3c>
 80139b4:	4b0a      	ldr	r3, [pc, #40]	; (80139e0 <osDelay+0x58>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	2b02      	cmp	r3, #2
 80139ba:	d103      	bne.n	80139c4 <osDelay+0x3c>
    stat = osErrorISR;
 80139bc:	f06f 0305 	mvn.w	r3, #5
 80139c0:	617b      	str	r3, [r7, #20]
 80139c2:	e007      	b.n	80139d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80139c4:	2300      	movs	r3, #0
 80139c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d002      	beq.n	80139d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f001 fd22 	bl	8015418 <vTaskDelay>
    }
  }

  return (stat);
 80139d4:	697b      	ldr	r3, [r7, #20]
}
 80139d6:	4618      	mov	r0, r3
 80139d8:	3718      	adds	r7, #24
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	20001174 	.word	0x20001174

080139e4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b08a      	sub	sp, #40	; 0x28
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80139ec:	2300      	movs	r3, #0
 80139ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80139f0:	f3ef 8305 	mrs	r3, IPSR
 80139f4:	613b      	str	r3, [r7, #16]
  return(result);
 80139f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f040 8085 	bne.w	8013b08 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139fe:	f3ef 8310 	mrs	r3, PRIMASK
 8013a02:	60fb      	str	r3, [r7, #12]
  return(result);
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d105      	bne.n	8013a16 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8013a0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d003      	beq.n	8013a1e <osMutexNew+0x3a>
 8013a16:	4b3f      	ldr	r3, [pc, #252]	; (8013b14 <osMutexNew+0x130>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2b02      	cmp	r3, #2
 8013a1c:	d074      	beq.n	8013b08 <osMutexNew+0x124>
    if (attr != NULL) {
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d003      	beq.n	8013a2c <osMutexNew+0x48>
      type = attr->attr_bits;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	623b      	str	r3, [r7, #32]
 8013a2a:	e001      	b.n	8013a30 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8013a30:	6a3b      	ldr	r3, [r7, #32]
 8013a32:	f003 0301 	and.w	r3, r3, #1
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d002      	beq.n	8013a40 <osMutexNew+0x5c>
      rmtx = 1U;
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	61fb      	str	r3, [r7, #28]
 8013a3e:	e001      	b.n	8013a44 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8013a40:	2300      	movs	r3, #0
 8013a42:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8013a44:	6a3b      	ldr	r3, [r7, #32]
 8013a46:	f003 0308 	and.w	r3, r3, #8
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d15c      	bne.n	8013b08 <osMutexNew+0x124>
      mem = -1;
 8013a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8013a52:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d015      	beq.n	8013a86 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	689b      	ldr	r3, [r3, #8]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d006      	beq.n	8013a70 <osMutexNew+0x8c>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	68db      	ldr	r3, [r3, #12]
 8013a66:	2b4f      	cmp	r3, #79	; 0x4f
 8013a68:	d902      	bls.n	8013a70 <osMutexNew+0x8c>
          mem = 1;
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	61bb      	str	r3, [r7, #24]
 8013a6e:	e00c      	b.n	8013a8a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	689b      	ldr	r3, [r3, #8]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d108      	bne.n	8013a8a <osMutexNew+0xa6>
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	68db      	ldr	r3, [r3, #12]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d104      	bne.n	8013a8a <osMutexNew+0xa6>
            mem = 0;
 8013a80:	2300      	movs	r3, #0
 8013a82:	61bb      	str	r3, [r7, #24]
 8013a84:	e001      	b.n	8013a8a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8013a86:	2300      	movs	r3, #0
 8013a88:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d112      	bne.n	8013ab6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d007      	beq.n	8013aa6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	689b      	ldr	r3, [r3, #8]
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	2004      	movs	r0, #4
 8013a9e:	f000 fcbf 	bl	8014420 <xQueueCreateMutexStatic>
 8013aa2:	6278      	str	r0, [r7, #36]	; 0x24
 8013aa4:	e016      	b.n	8013ad4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	689b      	ldr	r3, [r3, #8]
 8013aaa:	4619      	mov	r1, r3
 8013aac:	2001      	movs	r0, #1
 8013aae:	f000 fcb7 	bl	8014420 <xQueueCreateMutexStatic>
 8013ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8013ab4:	e00e      	b.n	8013ad4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8013ab6:	69bb      	ldr	r3, [r7, #24]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d10b      	bne.n	8013ad4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d004      	beq.n	8013acc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8013ac2:	2004      	movs	r0, #4
 8013ac4:	f000 fc94 	bl	80143f0 <xQueueCreateMutex>
 8013ac8:	6278      	str	r0, [r7, #36]	; 0x24
 8013aca:	e003      	b.n	8013ad4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8013acc:	2001      	movs	r0, #1
 8013ace:	f000 fc8f 	bl	80143f0 <xQueueCreateMutex>
 8013ad2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8013ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d00c      	beq.n	8013af4 <osMutexNew+0x110>
        if (attr != NULL) {
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d003      	beq.n	8013ae8 <osMutexNew+0x104>
          name = attr->name;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	617b      	str	r3, [r7, #20]
 8013ae6:	e001      	b.n	8013aec <osMutexNew+0x108>
        } else {
          name = NULL;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8013aec:	6979      	ldr	r1, [r7, #20]
 8013aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013af0:	f001 fa82 	bl	8014ff8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8013af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d006      	beq.n	8013b08 <osMutexNew+0x124>
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d003      	beq.n	8013b08 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8013b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b02:	f043 0301 	orr.w	r3, r3, #1
 8013b06:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8013b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3728      	adds	r7, #40	; 0x28
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	20001174 	.word	0x20001174

08013b18 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b088      	sub	sp, #32
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f023 0301 	bic.w	r3, r3, #1
 8013b28:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f003 0301 	and.w	r3, r3, #1
 8013b30:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8013b32:	2300      	movs	r3, #0
 8013b34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b36:	f3ef 8305 	mrs	r3, IPSR
 8013b3a:	613b      	str	r3, [r7, #16]
  return(result);
 8013b3c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d10f      	bne.n	8013b62 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b42:	f3ef 8310 	mrs	r3, PRIMASK
 8013b46:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d105      	bne.n	8013b5a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8013b52:	60bb      	str	r3, [r7, #8]
  return(result);
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d007      	beq.n	8013b6a <osMutexAcquire+0x52>
 8013b5a:	4b1d      	ldr	r3, [pc, #116]	; (8013bd0 <osMutexAcquire+0xb8>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2b02      	cmp	r3, #2
 8013b60:	d103      	bne.n	8013b6a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8013b62:	f06f 0305 	mvn.w	r3, #5
 8013b66:	61fb      	str	r3, [r7, #28]
 8013b68:	e02c      	b.n	8013bc4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8013b6a:	69bb      	ldr	r3, [r7, #24]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d103      	bne.n	8013b78 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8013b70:	f06f 0303 	mvn.w	r3, #3
 8013b74:	61fb      	str	r3, [r7, #28]
 8013b76:	e025      	b.n	8013bc4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d011      	beq.n	8013ba2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8013b7e:	6839      	ldr	r1, [r7, #0]
 8013b80:	69b8      	ldr	r0, [r7, #24]
 8013b82:	f000 fc9d 	bl	80144c0 <xQueueTakeMutexRecursive>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d01b      	beq.n	8013bc4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d003      	beq.n	8013b9a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8013b92:	f06f 0301 	mvn.w	r3, #1
 8013b96:	61fb      	str	r3, [r7, #28]
 8013b98:	e014      	b.n	8013bc4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8013b9a:	f06f 0302 	mvn.w	r3, #2
 8013b9e:	61fb      	str	r3, [r7, #28]
 8013ba0:	e010      	b.n	8013bc4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8013ba2:	6839      	ldr	r1, [r7, #0]
 8013ba4:	69b8      	ldr	r0, [r7, #24]
 8013ba6:	f000 ff5b 	bl	8014a60 <xQueueSemaphoreTake>
 8013baa:	4603      	mov	r3, r0
 8013bac:	2b01      	cmp	r3, #1
 8013bae:	d009      	beq.n	8013bc4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d003      	beq.n	8013bbe <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8013bb6:	f06f 0301 	mvn.w	r3, #1
 8013bba:	61fb      	str	r3, [r7, #28]
 8013bbc:	e002      	b.n	8013bc4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8013bbe:	f06f 0302 	mvn.w	r3, #2
 8013bc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013bc4:	69fb      	ldr	r3, [r7, #28]
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3720      	adds	r7, #32
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	20001174 	.word	0x20001174

08013bd4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b088      	sub	sp, #32
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f023 0301 	bic.w	r3, r3, #1
 8013be2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f003 0301 	and.w	r3, r3, #1
 8013bea:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8013bec:	2300      	movs	r3, #0
 8013bee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013bf0:	f3ef 8305 	mrs	r3, IPSR
 8013bf4:	613b      	str	r3, [r7, #16]
  return(result);
 8013bf6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d10f      	bne.n	8013c1c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8013c00:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d105      	bne.n	8013c14 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013c08:	f3ef 8311 	mrs	r3, BASEPRI
 8013c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d007      	beq.n	8013c24 <osMutexRelease+0x50>
 8013c14:	4b16      	ldr	r3, [pc, #88]	; (8013c70 <osMutexRelease+0x9c>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	2b02      	cmp	r3, #2
 8013c1a:	d103      	bne.n	8013c24 <osMutexRelease+0x50>
    stat = osErrorISR;
 8013c1c:	f06f 0305 	mvn.w	r3, #5
 8013c20:	61fb      	str	r3, [r7, #28]
 8013c22:	e01f      	b.n	8013c64 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8013c24:	69bb      	ldr	r3, [r7, #24]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d103      	bne.n	8013c32 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8013c2a:	f06f 0303 	mvn.w	r3, #3
 8013c2e:	61fb      	str	r3, [r7, #28]
 8013c30:	e018      	b.n	8013c64 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d009      	beq.n	8013c4c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8013c38:	69b8      	ldr	r0, [r7, #24]
 8013c3a:	f000 fc0c 	bl	8014456 <xQueueGiveMutexRecursive>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	2b01      	cmp	r3, #1
 8013c42:	d00f      	beq.n	8013c64 <osMutexRelease+0x90>
        stat = osErrorResource;
 8013c44:	f06f 0302 	mvn.w	r3, #2
 8013c48:	61fb      	str	r3, [r7, #28]
 8013c4a:	e00b      	b.n	8013c64 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	2200      	movs	r2, #0
 8013c50:	2100      	movs	r1, #0
 8013c52:	69b8      	ldr	r0, [r7, #24]
 8013c54:	f000 fc6c 	bl	8014530 <xQueueGenericSend>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2b01      	cmp	r3, #1
 8013c5c:	d002      	beq.n	8013c64 <osMutexRelease+0x90>
        stat = osErrorResource;
 8013c5e:	f06f 0302 	mvn.w	r3, #2
 8013c62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8013c64:	69fb      	ldr	r3, [r7, #28]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3720      	adds	r7, #32
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	20001174 	.word	0x20001174

08013c74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b08c      	sub	sp, #48	; 0x30
 8013c78:	af02      	add	r7, sp, #8
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013c80:	2300      	movs	r3, #0
 8013c82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c84:	f3ef 8305 	mrs	r3, IPSR
 8013c88:	61bb      	str	r3, [r7, #24]
  return(result);
 8013c8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d170      	bne.n	8013d72 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c90:	f3ef 8310 	mrs	r3, PRIMASK
 8013c94:	617b      	str	r3, [r7, #20]
  return(result);
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d105      	bne.n	8013ca8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8013ca0:	613b      	str	r3, [r7, #16]
  return(result);
 8013ca2:	693b      	ldr	r3, [r7, #16]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d003      	beq.n	8013cb0 <osMessageQueueNew+0x3c>
 8013ca8:	4b34      	ldr	r3, [pc, #208]	; (8013d7c <osMessageQueueNew+0x108>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	2b02      	cmp	r3, #2
 8013cae:	d060      	beq.n	8013d72 <osMessageQueueNew+0xfe>
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d05d      	beq.n	8013d72 <osMessageQueueNew+0xfe>
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d05a      	beq.n	8013d72 <osMessageQueueNew+0xfe>
    mem = -1;
 8013cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8013cc0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d029      	beq.n	8013d1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	689b      	ldr	r3, [r3, #8]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d012      	beq.n	8013cf6 <osMessageQueueNew+0x82>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	2b4f      	cmp	r3, #79	; 0x4f
 8013cd6:	d90e      	bls.n	8013cf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d00a      	beq.n	8013cf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	695a      	ldr	r2, [r3, #20]
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	68b9      	ldr	r1, [r7, #8]
 8013ce8:	fb01 f303 	mul.w	r3, r1, r3
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d302      	bcc.n	8013cf6 <osMessageQueueNew+0x82>
        mem = 1;
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	623b      	str	r3, [r7, #32]
 8013cf4:	e014      	b.n	8013d20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	689b      	ldr	r3, [r3, #8]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d110      	bne.n	8013d20 <osMessageQueueNew+0xac>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	68db      	ldr	r3, [r3, #12]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d10c      	bne.n	8013d20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d108      	bne.n	8013d20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	695b      	ldr	r3, [r3, #20]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d104      	bne.n	8013d20 <osMessageQueueNew+0xac>
          mem = 0;
 8013d16:	2300      	movs	r3, #0
 8013d18:	623b      	str	r3, [r7, #32]
 8013d1a:	e001      	b.n	8013d20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013d20:	6a3b      	ldr	r3, [r7, #32]
 8013d22:	2b01      	cmp	r3, #1
 8013d24:	d10c      	bne.n	8013d40 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	691a      	ldr	r2, [r3, #16]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6899      	ldr	r1, [r3, #8]
 8013d2e:	2300      	movs	r3, #0
 8013d30:	9300      	str	r3, [sp, #0]
 8013d32:	460b      	mov	r3, r1
 8013d34:	68b9      	ldr	r1, [r7, #8]
 8013d36:	68f8      	ldr	r0, [r7, #12]
 8013d38:	f000 fa5a 	bl	80141f0 <xQueueGenericCreateStatic>
 8013d3c:	6278      	str	r0, [r7, #36]	; 0x24
 8013d3e:	e008      	b.n	8013d52 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8013d40:	6a3b      	ldr	r3, [r7, #32]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d105      	bne.n	8013d52 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8013d46:	2200      	movs	r2, #0
 8013d48:	68b9      	ldr	r1, [r7, #8]
 8013d4a:	68f8      	ldr	r0, [r7, #12]
 8013d4c:	f000 facd 	bl	80142ea <xQueueGenericCreate>
 8013d50:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d00c      	beq.n	8013d72 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d003      	beq.n	8013d66 <osMessageQueueNew+0xf2>
        name = attr->name;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	61fb      	str	r3, [r7, #28]
 8013d64:	e001      	b.n	8013d6a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8013d66:	2300      	movs	r3, #0
 8013d68:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013d6a:	69f9      	ldr	r1, [r7, #28]
 8013d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d6e:	f001 f943 	bl	8014ff8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	3728      	adds	r7, #40	; 0x28
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	20001174 	.word	0x20001174

08013d80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b08a      	sub	sp, #40	; 0x28
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	603b      	str	r3, [r7, #0]
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013d94:	2300      	movs	r3, #0
 8013d96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013d98:	f3ef 8305 	mrs	r3, IPSR
 8013d9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8013d9e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d10f      	bne.n	8013dc4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013da4:	f3ef 8310 	mrs	r3, PRIMASK
 8013da8:	61bb      	str	r3, [r7, #24]
  return(result);
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d105      	bne.n	8013dbc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013db0:	f3ef 8311 	mrs	r3, BASEPRI
 8013db4:	617b      	str	r3, [r7, #20]
  return(result);
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d02c      	beq.n	8013e16 <osMessageQueuePut+0x96>
 8013dbc:	4b28      	ldr	r3, [pc, #160]	; (8013e60 <osMessageQueuePut+0xe0>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2b02      	cmp	r3, #2
 8013dc2:	d128      	bne.n	8013e16 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013dc4:	6a3b      	ldr	r3, [r7, #32]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d005      	beq.n	8013dd6 <osMessageQueuePut+0x56>
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d002      	beq.n	8013dd6 <osMessageQueuePut+0x56>
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d003      	beq.n	8013dde <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8013dd6:	f06f 0303 	mvn.w	r3, #3
 8013dda:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013ddc:	e039      	b.n	8013e52 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013dde:	2300      	movs	r3, #0
 8013de0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013de2:	f107 0210 	add.w	r2, r7, #16
 8013de6:	2300      	movs	r3, #0
 8013de8:	68b9      	ldr	r1, [r7, #8]
 8013dea:	6a38      	ldr	r0, [r7, #32]
 8013dec:	f000 fcaa 	bl	8014744 <xQueueGenericSendFromISR>
 8013df0:	4603      	mov	r3, r0
 8013df2:	2b01      	cmp	r3, #1
 8013df4:	d003      	beq.n	8013dfe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8013df6:	f06f 0302 	mvn.w	r3, #2
 8013dfa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013dfc:	e029      	b.n	8013e52 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d026      	beq.n	8013e52 <osMessageQueuePut+0xd2>
 8013e04:	4b17      	ldr	r3, [pc, #92]	; (8013e64 <osMessageQueuePut+0xe4>)
 8013e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e0a:	601a      	str	r2, [r3, #0]
 8013e0c:	f3bf 8f4f 	dsb	sy
 8013e10:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013e14:	e01d      	b.n	8013e52 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013e16:	6a3b      	ldr	r3, [r7, #32]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d002      	beq.n	8013e22 <osMessageQueuePut+0xa2>
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d103      	bne.n	8013e2a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8013e22:	f06f 0303 	mvn.w	r3, #3
 8013e26:	627b      	str	r3, [r7, #36]	; 0x24
 8013e28:	e014      	b.n	8013e54 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	683a      	ldr	r2, [r7, #0]
 8013e2e:	68b9      	ldr	r1, [r7, #8]
 8013e30:	6a38      	ldr	r0, [r7, #32]
 8013e32:	f000 fb7d 	bl	8014530 <xQueueGenericSend>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d00b      	beq.n	8013e54 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d003      	beq.n	8013e4a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8013e42:	f06f 0301 	mvn.w	r3, #1
 8013e46:	627b      	str	r3, [r7, #36]	; 0x24
 8013e48:	e004      	b.n	8013e54 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013e4a:	f06f 0302 	mvn.w	r3, #2
 8013e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8013e50:	e000      	b.n	8013e54 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013e52:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3728      	adds	r7, #40	; 0x28
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	20001174 	.word	0x20001174
 8013e64:	e000ed04 	.word	0xe000ed04

08013e68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b08a      	sub	sp, #40	; 0x28
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	607a      	str	r2, [r7, #4]
 8013e74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013e7e:	f3ef 8305 	mrs	r3, IPSR
 8013e82:	61fb      	str	r3, [r7, #28]
  return(result);
 8013e84:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d10f      	bne.n	8013eaa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d105      	bne.n	8013ea2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013e96:	f3ef 8311 	mrs	r3, BASEPRI
 8013e9a:	617b      	str	r3, [r7, #20]
  return(result);
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d02c      	beq.n	8013efc <osMessageQueueGet+0x94>
 8013ea2:	4b28      	ldr	r3, [pc, #160]	; (8013f44 <osMessageQueueGet+0xdc>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	2b02      	cmp	r3, #2
 8013ea8:	d128      	bne.n	8013efc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013eaa:	6a3b      	ldr	r3, [r7, #32]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d005      	beq.n	8013ebc <osMessageQueueGet+0x54>
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d002      	beq.n	8013ebc <osMessageQueueGet+0x54>
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d003      	beq.n	8013ec4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8013ebc:	f06f 0303 	mvn.w	r3, #3
 8013ec0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013ec2:	e038      	b.n	8013f36 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013ec8:	f107 0310 	add.w	r3, r7, #16
 8013ecc:	461a      	mov	r2, r3
 8013ece:	68b9      	ldr	r1, [r7, #8]
 8013ed0:	6a38      	ldr	r0, [r7, #32]
 8013ed2:	f000 fedd 	bl	8014c90 <xQueueReceiveFromISR>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	2b01      	cmp	r3, #1
 8013eda:	d003      	beq.n	8013ee4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8013edc:	f06f 0302 	mvn.w	r3, #2
 8013ee0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013ee2:	e028      	b.n	8013f36 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d025      	beq.n	8013f36 <osMessageQueueGet+0xce>
 8013eea:	4b17      	ldr	r3, [pc, #92]	; (8013f48 <osMessageQueueGet+0xe0>)
 8013eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ef0:	601a      	str	r2, [r3, #0]
 8013ef2:	f3bf 8f4f 	dsb	sy
 8013ef6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013efa:	e01c      	b.n	8013f36 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013efc:	6a3b      	ldr	r3, [r7, #32]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d002      	beq.n	8013f08 <osMessageQueueGet+0xa0>
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d103      	bne.n	8013f10 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8013f08:	f06f 0303 	mvn.w	r3, #3
 8013f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8013f0e:	e013      	b.n	8013f38 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013f10:	683a      	ldr	r2, [r7, #0]
 8013f12:	68b9      	ldr	r1, [r7, #8]
 8013f14:	6a38      	ldr	r0, [r7, #32]
 8013f16:	f000 fcb9 	bl	801488c <xQueueReceive>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b01      	cmp	r3, #1
 8013f1e:	d00b      	beq.n	8013f38 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d003      	beq.n	8013f2e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8013f26:	f06f 0301 	mvn.w	r3, #1
 8013f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8013f2c:	e004      	b.n	8013f38 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8013f2e:	f06f 0302 	mvn.w	r3, #2
 8013f32:	627b      	str	r3, [r7, #36]	; 0x24
 8013f34:	e000      	b.n	8013f38 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f36:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3728      	adds	r7, #40	; 0x28
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	20001174 	.word	0x20001174
 8013f48:	e000ed04 	.word	0xe000ed04

08013f4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013f4c:	b480      	push	{r7}
 8013f4e:	b085      	sub	sp, #20
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	60f8      	str	r0, [r7, #12]
 8013f54:	60b9      	str	r1, [r7, #8]
 8013f56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	4a07      	ldr	r2, [pc, #28]	; (8013f78 <vApplicationGetIdleTaskMemory+0x2c>)
 8013f5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	4a06      	ldr	r2, [pc, #24]	; (8013f7c <vApplicationGetIdleTaskMemory+0x30>)
 8013f62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2280      	movs	r2, #128	; 0x80
 8013f68:	601a      	str	r2, [r3, #0]
}
 8013f6a:	bf00      	nop
 8013f6c:	3714      	adds	r7, #20
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f74:	4770      	bx	lr
 8013f76:	bf00      	nop
 8013f78:	20001178 	.word	0x20001178
 8013f7c:	200011d8 	.word	0x200011d8

08013f80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013f80:	b480      	push	{r7}
 8013f82:	b085      	sub	sp, #20
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	4a07      	ldr	r2, [pc, #28]	; (8013fac <vApplicationGetTimerTaskMemory+0x2c>)
 8013f90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013f92:	68bb      	ldr	r3, [r7, #8]
 8013f94:	4a06      	ldr	r2, [pc, #24]	; (8013fb0 <vApplicationGetTimerTaskMemory+0x30>)
 8013f96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013f9e:	601a      	str	r2, [r3, #0]
}
 8013fa0:	bf00      	nop
 8013fa2:	3714      	adds	r7, #20
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013faa:	4770      	bx	lr
 8013fac:	200013d8 	.word	0x200013d8
 8013fb0:	20001438 	.word	0x20001438

08013fb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	b083      	sub	sp, #12
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	f103 0208 	add.w	r2, r3, #8
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8013fcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f103 0208 	add.w	r2, r3, #8
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f103 0208 	add.w	r2, r3, #8
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013fe8:	bf00      	nop
 8013fea:	370c      	adds	r7, #12
 8013fec:	46bd      	mov	sp, r7
 8013fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff2:	4770      	bx	lr

08013ff4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b083      	sub	sp, #12
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2200      	movs	r2, #0
 8014000:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014002:	bf00      	nop
 8014004:	370c      	adds	r7, #12
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr

0801400e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801400e:	b480      	push	{r7}
 8014010:	b085      	sub	sp, #20
 8014012:	af00      	add	r7, sp, #0
 8014014:	6078      	str	r0, [r7, #4]
 8014016:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	68fa      	ldr	r2, [r7, #12]
 8014022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	689a      	ldr	r2, [r3, #8]
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	689b      	ldr	r3, [r3, #8]
 8014030:	683a      	ldr	r2, [r7, #0]
 8014032:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	683a      	ldr	r2, [r7, #0]
 8014038:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	1c5a      	adds	r2, r3, #1
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	601a      	str	r2, [r3, #0]
}
 801404a:	bf00      	nop
 801404c:	3714      	adds	r7, #20
 801404e:	46bd      	mov	sp, r7
 8014050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014054:	4770      	bx	lr

08014056 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014056:	b480      	push	{r7}
 8014058:	b085      	sub	sp, #20
 801405a:	af00      	add	r7, sp, #0
 801405c:	6078      	str	r0, [r7, #4]
 801405e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406c:	d103      	bne.n	8014076 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	691b      	ldr	r3, [r3, #16]
 8014072:	60fb      	str	r3, [r7, #12]
 8014074:	e00c      	b.n	8014090 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	3308      	adds	r3, #8
 801407a:	60fb      	str	r3, [r7, #12]
 801407c:	e002      	b.n	8014084 <vListInsert+0x2e>
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	60fb      	str	r3, [r7, #12]
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	685b      	ldr	r3, [r3, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	68ba      	ldr	r2, [r7, #8]
 801408c:	429a      	cmp	r2, r3
 801408e:	d2f6      	bcs.n	801407e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	685a      	ldr	r2, [r3, #4]
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	685b      	ldr	r3, [r3, #4]
 801409c:	683a      	ldr	r2, [r7, #0]
 801409e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	68fa      	ldr	r2, [r7, #12]
 80140a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	683a      	ldr	r2, [r7, #0]
 80140aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	1c5a      	adds	r2, r3, #1
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	601a      	str	r2, [r3, #0]
}
 80140bc:	bf00      	nop
 80140be:	3714      	adds	r7, #20
 80140c0:	46bd      	mov	sp, r7
 80140c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c6:	4770      	bx	lr

080140c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80140c8:	b480      	push	{r7}
 80140ca:	b085      	sub	sp, #20
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	691b      	ldr	r3, [r3, #16]
 80140d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	685b      	ldr	r3, [r3, #4]
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	6892      	ldr	r2, [r2, #8]
 80140de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	689b      	ldr	r3, [r3, #8]
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	6852      	ldr	r2, [r2, #4]
 80140e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	687a      	ldr	r2, [r7, #4]
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d103      	bne.n	80140fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	689a      	ldr	r2, [r3, #8]
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2200      	movs	r2, #0
 8014100:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	1e5a      	subs	r2, r3, #1
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
}
 8014110:	4618      	mov	r0, r3
 8014112:	3714      	adds	r7, #20
 8014114:	46bd      	mov	sp, r7
 8014116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411a:	4770      	bx	lr

0801411c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b084      	sub	sp, #16
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d10b      	bne.n	8014148 <xQueueGenericReset+0x2c>
	__asm volatile
 8014130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014134:	b672      	cpsid	i
 8014136:	f383 8811 	msr	BASEPRI, r3
 801413a:	f3bf 8f6f 	isb	sy
 801413e:	f3bf 8f4f 	dsb	sy
 8014142:	b662      	cpsie	i
 8014144:	60bb      	str	r3, [r7, #8]
 8014146:	e7fe      	b.n	8014146 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8014148:	f002 fcee 	bl	8016b28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014154:	68f9      	ldr	r1, [r7, #12]
 8014156:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014158:	fb01 f303 	mul.w	r3, r1, r3
 801415c:	441a      	add	r2, r3
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2200      	movs	r2, #0
 8014166:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	681a      	ldr	r2, [r3, #0]
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014178:	3b01      	subs	r3, #1
 801417a:	68f9      	ldr	r1, [r7, #12]
 801417c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801417e:	fb01 f303 	mul.w	r3, r1, r3
 8014182:	441a      	add	r2, r3
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	22ff      	movs	r2, #255	; 0xff
 801418c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	22ff      	movs	r2, #255	; 0xff
 8014194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d114      	bne.n	80141c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	691b      	ldr	r3, [r3, #16]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d01a      	beq.n	80141dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	3310      	adds	r3, #16
 80141aa:	4618      	mov	r0, r3
 80141ac:	f001 fcae 	bl	8015b0c <xTaskRemoveFromEventList>
 80141b0:	4603      	mov	r3, r0
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d012      	beq.n	80141dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80141b6:	4b0d      	ldr	r3, [pc, #52]	; (80141ec <xQueueGenericReset+0xd0>)
 80141b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141bc:	601a      	str	r2, [r3, #0]
 80141be:	f3bf 8f4f 	dsb	sy
 80141c2:	f3bf 8f6f 	isb	sy
 80141c6:	e009      	b.n	80141dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	3310      	adds	r3, #16
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7ff fef1 	bl	8013fb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	3324      	adds	r3, #36	; 0x24
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7ff feec 	bl	8013fb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80141dc:	f002 fcd6 	bl	8016b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80141e0:	2301      	movs	r3, #1
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3710      	adds	r7, #16
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
 80141ea:	bf00      	nop
 80141ec:	e000ed04 	.word	0xe000ed04

080141f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b08e      	sub	sp, #56	; 0x38
 80141f4:	af02      	add	r7, sp, #8
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	607a      	str	r2, [r7, #4]
 80141fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d10b      	bne.n	801421c <xQueueGenericCreateStatic+0x2c>
 8014204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014208:	b672      	cpsid	i
 801420a:	f383 8811 	msr	BASEPRI, r3
 801420e:	f3bf 8f6f 	isb	sy
 8014212:	f3bf 8f4f 	dsb	sy
 8014216:	b662      	cpsie	i
 8014218:	62bb      	str	r3, [r7, #40]	; 0x28
 801421a:	e7fe      	b.n	801421a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d10b      	bne.n	801423a <xQueueGenericCreateStatic+0x4a>
 8014222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014226:	b672      	cpsid	i
 8014228:	f383 8811 	msr	BASEPRI, r3
 801422c:	f3bf 8f6f 	isb	sy
 8014230:	f3bf 8f4f 	dsb	sy
 8014234:	b662      	cpsie	i
 8014236:	627b      	str	r3, [r7, #36]	; 0x24
 8014238:	e7fe      	b.n	8014238 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d002      	beq.n	8014246 <xQueueGenericCreateStatic+0x56>
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d001      	beq.n	801424a <xQueueGenericCreateStatic+0x5a>
 8014246:	2301      	movs	r3, #1
 8014248:	e000      	b.n	801424c <xQueueGenericCreateStatic+0x5c>
 801424a:	2300      	movs	r3, #0
 801424c:	2b00      	cmp	r3, #0
 801424e:	d10b      	bne.n	8014268 <xQueueGenericCreateStatic+0x78>
 8014250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014254:	b672      	cpsid	i
 8014256:	f383 8811 	msr	BASEPRI, r3
 801425a:	f3bf 8f6f 	isb	sy
 801425e:	f3bf 8f4f 	dsb	sy
 8014262:	b662      	cpsie	i
 8014264:	623b      	str	r3, [r7, #32]
 8014266:	e7fe      	b.n	8014266 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d102      	bne.n	8014274 <xQueueGenericCreateStatic+0x84>
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d101      	bne.n	8014278 <xQueueGenericCreateStatic+0x88>
 8014274:	2301      	movs	r3, #1
 8014276:	e000      	b.n	801427a <xQueueGenericCreateStatic+0x8a>
 8014278:	2300      	movs	r3, #0
 801427a:	2b00      	cmp	r3, #0
 801427c:	d10b      	bne.n	8014296 <xQueueGenericCreateStatic+0xa6>
 801427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014282:	b672      	cpsid	i
 8014284:	f383 8811 	msr	BASEPRI, r3
 8014288:	f3bf 8f6f 	isb	sy
 801428c:	f3bf 8f4f 	dsb	sy
 8014290:	b662      	cpsie	i
 8014292:	61fb      	str	r3, [r7, #28]
 8014294:	e7fe      	b.n	8014294 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014296:	2350      	movs	r3, #80	; 0x50
 8014298:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	2b50      	cmp	r3, #80	; 0x50
 801429e:	d00b      	beq.n	80142b8 <xQueueGenericCreateStatic+0xc8>
 80142a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a4:	b672      	cpsid	i
 80142a6:	f383 8811 	msr	BASEPRI, r3
 80142aa:	f3bf 8f6f 	isb	sy
 80142ae:	f3bf 8f4f 	dsb	sy
 80142b2:	b662      	cpsie	i
 80142b4:	61bb      	str	r3, [r7, #24]
 80142b6:	e7fe      	b.n	80142b6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80142b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80142be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d00d      	beq.n	80142e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80142c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c6:	2201      	movs	r2, #1
 80142c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80142cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80142d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d2:	9300      	str	r3, [sp, #0]
 80142d4:	4613      	mov	r3, r2
 80142d6:	687a      	ldr	r2, [r7, #4]
 80142d8:	68b9      	ldr	r1, [r7, #8]
 80142da:	68f8      	ldr	r0, [r7, #12]
 80142dc:	f000 f846 	bl	801436c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80142e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3730      	adds	r7, #48	; 0x30
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}

080142ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80142ea:	b580      	push	{r7, lr}
 80142ec:	b08a      	sub	sp, #40	; 0x28
 80142ee:	af02      	add	r7, sp, #8
 80142f0:	60f8      	str	r0, [r7, #12]
 80142f2:	60b9      	str	r1, [r7, #8]
 80142f4:	4613      	mov	r3, r2
 80142f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d10b      	bne.n	8014316 <xQueueGenericCreate+0x2c>
 80142fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014302:	b672      	cpsid	i
 8014304:	f383 8811 	msr	BASEPRI, r3
 8014308:	f3bf 8f6f 	isb	sy
 801430c:	f3bf 8f4f 	dsb	sy
 8014310:	b662      	cpsie	i
 8014312:	613b      	str	r3, [r7, #16]
 8014314:	e7fe      	b.n	8014314 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d102      	bne.n	8014322 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801431c:	2300      	movs	r3, #0
 801431e:	61fb      	str	r3, [r7, #28]
 8014320:	e004      	b.n	801432c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	68ba      	ldr	r2, [r7, #8]
 8014326:	fb02 f303 	mul.w	r3, r2, r3
 801432a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	3350      	adds	r3, #80	; 0x50
 8014330:	4618      	mov	r0, r3
 8014332:	f002 fd1b 	bl	8016d6c <pvPortMalloc>
 8014336:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014338:	69bb      	ldr	r3, [r7, #24]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d011      	beq.n	8014362 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	3350      	adds	r3, #80	; 0x50
 8014346:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014348:	69bb      	ldr	r3, [r7, #24]
 801434a:	2200      	movs	r2, #0
 801434c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014350:	79fa      	ldrb	r2, [r7, #7]
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	9300      	str	r3, [sp, #0]
 8014356:	4613      	mov	r3, r2
 8014358:	697a      	ldr	r2, [r7, #20]
 801435a:	68b9      	ldr	r1, [r7, #8]
 801435c:	68f8      	ldr	r0, [r7, #12]
 801435e:	f000 f805 	bl	801436c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014362:	69bb      	ldr	r3, [r7, #24]
	}
 8014364:	4618      	mov	r0, r3
 8014366:	3720      	adds	r7, #32
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}

0801436c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b084      	sub	sp, #16
 8014370:	af00      	add	r7, sp, #0
 8014372:	60f8      	str	r0, [r7, #12]
 8014374:	60b9      	str	r1, [r7, #8]
 8014376:	607a      	str	r2, [r7, #4]
 8014378:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d103      	bne.n	8014388 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014380:	69bb      	ldr	r3, [r7, #24]
 8014382:	69ba      	ldr	r2, [r7, #24]
 8014384:	601a      	str	r2, [r3, #0]
 8014386:	e002      	b.n	801438e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014388:	69bb      	ldr	r3, [r7, #24]
 801438a:	687a      	ldr	r2, [r7, #4]
 801438c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	68fa      	ldr	r2, [r7, #12]
 8014392:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	68ba      	ldr	r2, [r7, #8]
 8014398:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801439a:	2101      	movs	r1, #1
 801439c:	69b8      	ldr	r0, [r7, #24]
 801439e:	f7ff febd 	bl	801411c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80143a2:	69bb      	ldr	r3, [r7, #24]
 80143a4:	78fa      	ldrb	r2, [r7, #3]
 80143a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	3348      	adds	r3, #72	; 0x48
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7ec fcce 	bl	8000d50 <TimeDoctor_QUEUE_CREATE>
}
 80143b4:	bf00      	nop
 80143b6:	3710      	adds	r7, #16
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}

080143bc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b082      	sub	sp, #8
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d00e      	beq.n	80143e8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2200      	movs	r2, #0
 80143ce:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2200      	movs	r2, #0
 80143d4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2200      	movs	r2, #0
 80143da:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80143dc:	2300      	movs	r3, #0
 80143de:	2200      	movs	r2, #0
 80143e0:	2100      	movs	r1, #0
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f000 f8a4 	bl	8014530 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80143e8:	bf00      	nop
 80143ea:	3708      	adds	r7, #8
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b086      	sub	sp, #24
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	4603      	mov	r3, r0
 80143f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80143fa:	2301      	movs	r3, #1
 80143fc:	617b      	str	r3, [r7, #20]
 80143fe:	2300      	movs	r3, #0
 8014400:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014402:	79fb      	ldrb	r3, [r7, #7]
 8014404:	461a      	mov	r2, r3
 8014406:	6939      	ldr	r1, [r7, #16]
 8014408:	6978      	ldr	r0, [r7, #20]
 801440a:	f7ff ff6e 	bl	80142ea <xQueueGenericCreate>
 801440e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014410:	68f8      	ldr	r0, [r7, #12]
 8014412:	f7ff ffd3 	bl	80143bc <prvInitialiseMutex>

		return xNewQueue;
 8014416:	68fb      	ldr	r3, [r7, #12]
	}
 8014418:	4618      	mov	r0, r3
 801441a:	3718      	adds	r7, #24
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8014420:	b580      	push	{r7, lr}
 8014422:	b088      	sub	sp, #32
 8014424:	af02      	add	r7, sp, #8
 8014426:	4603      	mov	r3, r0
 8014428:	6039      	str	r1, [r7, #0]
 801442a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801442c:	2301      	movs	r3, #1
 801442e:	617b      	str	r3, [r7, #20]
 8014430:	2300      	movs	r3, #0
 8014432:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014434:	79fb      	ldrb	r3, [r7, #7]
 8014436:	9300      	str	r3, [sp, #0]
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	2200      	movs	r2, #0
 801443c:	6939      	ldr	r1, [r7, #16]
 801443e:	6978      	ldr	r0, [r7, #20]
 8014440:	f7ff fed6 	bl	80141f0 <xQueueGenericCreateStatic>
 8014444:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014446:	68f8      	ldr	r0, [r7, #12]
 8014448:	f7ff ffb8 	bl	80143bc <prvInitialiseMutex>

		return xNewQueue;
 801444c:	68fb      	ldr	r3, [r7, #12]
	}
 801444e:	4618      	mov	r0, r3
 8014450:	3718      	adds	r7, #24
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}

08014456 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8014456:	b590      	push	{r4, r7, lr}
 8014458:	b087      	sub	sp, #28
 801445a:	af00      	add	r7, sp, #0
 801445c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d10b      	bne.n	8014480 <xQueueGiveMutexRecursive+0x2a>
 8014468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801446c:	b672      	cpsid	i
 801446e:	f383 8811 	msr	BASEPRI, r3
 8014472:	f3bf 8f6f 	isb	sy
 8014476:	f3bf 8f4f 	dsb	sy
 801447a:	b662      	cpsie	i
 801447c:	60fb      	str	r3, [r7, #12]
 801447e:	e7fe      	b.n	801447e <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	689c      	ldr	r4, [r3, #8]
 8014484:	f001 fd02 	bl	8015e8c <xTaskGetCurrentTaskHandle>
 8014488:	4603      	mov	r3, r0
 801448a:	429c      	cmp	r4, r3
 801448c:	d111      	bne.n	80144b2 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	68db      	ldr	r3, [r3, #12]
 8014492:	1e5a      	subs	r2, r3, #1
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8014498:	693b      	ldr	r3, [r7, #16]
 801449a:	68db      	ldr	r3, [r3, #12]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d105      	bne.n	80144ac <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80144a0:	2300      	movs	r3, #0
 80144a2:	2200      	movs	r2, #0
 80144a4:	2100      	movs	r1, #0
 80144a6:	6938      	ldr	r0, [r7, #16]
 80144a8:	f000 f842 	bl	8014530 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80144ac:	2301      	movs	r3, #1
 80144ae:	617b      	str	r3, [r7, #20]
 80144b0:	e001      	b.n	80144b6 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80144b2:	2300      	movs	r3, #0
 80144b4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80144b6:	697b      	ldr	r3, [r7, #20]
	}
 80144b8:	4618      	mov	r0, r3
 80144ba:	371c      	adds	r7, #28
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd90      	pop	{r4, r7, pc}

080144c0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80144c0:	b590      	push	{r4, r7, lr}
 80144c2:	b087      	sub	sp, #28
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d10b      	bne.n	80144ec <xQueueTakeMutexRecursive+0x2c>
 80144d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d8:	b672      	cpsid	i
 80144da:	f383 8811 	msr	BASEPRI, r3
 80144de:	f3bf 8f6f 	isb	sy
 80144e2:	f3bf 8f4f 	dsb	sy
 80144e6:	b662      	cpsie	i
 80144e8:	60fb      	str	r3, [r7, #12]
 80144ea:	e7fe      	b.n	80144ea <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	689c      	ldr	r4, [r3, #8]
 80144f0:	f001 fccc 	bl	8015e8c <xTaskGetCurrentTaskHandle>
 80144f4:	4603      	mov	r3, r0
 80144f6:	429c      	cmp	r4, r3
 80144f8:	d107      	bne.n	801450a <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	68db      	ldr	r3, [r3, #12]
 80144fe:	1c5a      	adds	r2, r3, #1
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8014504:	2301      	movs	r3, #1
 8014506:	617b      	str	r3, [r7, #20]
 8014508:	e00c      	b.n	8014524 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801450a:	6839      	ldr	r1, [r7, #0]
 801450c:	6938      	ldr	r0, [r7, #16]
 801450e:	f000 faa7 	bl	8014a60 <xQueueSemaphoreTake>
 8014512:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d004      	beq.n	8014524 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	68db      	ldr	r3, [r3, #12]
 801451e:	1c5a      	adds	r2, r3, #1
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8014524:	697b      	ldr	r3, [r7, #20]
	}
 8014526:	4618      	mov	r0, r3
 8014528:	371c      	adds	r7, #28
 801452a:	46bd      	mov	sp, r7
 801452c:	bd90      	pop	{r4, r7, pc}
	...

08014530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b08e      	sub	sp, #56	; 0x38
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
 801453c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801453e:	2300      	movs	r3, #0
 8014540:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014548:	2b00      	cmp	r3, #0
 801454a:	d10b      	bne.n	8014564 <xQueueGenericSend+0x34>
 801454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014550:	b672      	cpsid	i
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	b662      	cpsie	i
 8014560:	62bb      	str	r3, [r7, #40]	; 0x28
 8014562:	e7fe      	b.n	8014562 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d103      	bne.n	8014572 <xQueueGenericSend+0x42>
 801456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801456e:	2b00      	cmp	r3, #0
 8014570:	d101      	bne.n	8014576 <xQueueGenericSend+0x46>
 8014572:	2301      	movs	r3, #1
 8014574:	e000      	b.n	8014578 <xQueueGenericSend+0x48>
 8014576:	2300      	movs	r3, #0
 8014578:	2b00      	cmp	r3, #0
 801457a:	d10b      	bne.n	8014594 <xQueueGenericSend+0x64>
 801457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014580:	b672      	cpsid	i
 8014582:	f383 8811 	msr	BASEPRI, r3
 8014586:	f3bf 8f6f 	isb	sy
 801458a:	f3bf 8f4f 	dsb	sy
 801458e:	b662      	cpsie	i
 8014590:	627b      	str	r3, [r7, #36]	; 0x24
 8014592:	e7fe      	b.n	8014592 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	2b02      	cmp	r3, #2
 8014598:	d103      	bne.n	80145a2 <xQueueGenericSend+0x72>
 801459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801459e:	2b01      	cmp	r3, #1
 80145a0:	d101      	bne.n	80145a6 <xQueueGenericSend+0x76>
 80145a2:	2301      	movs	r3, #1
 80145a4:	e000      	b.n	80145a8 <xQueueGenericSend+0x78>
 80145a6:	2300      	movs	r3, #0
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d10b      	bne.n	80145c4 <xQueueGenericSend+0x94>
 80145ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b0:	b672      	cpsid	i
 80145b2:	f383 8811 	msr	BASEPRI, r3
 80145b6:	f3bf 8f6f 	isb	sy
 80145ba:	f3bf 8f4f 	dsb	sy
 80145be:	b662      	cpsie	i
 80145c0:	623b      	str	r3, [r7, #32]
 80145c2:	e7fe      	b.n	80145c2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80145c4:	f001 fc72 	bl	8015eac <xTaskGetSchedulerState>
 80145c8:	4603      	mov	r3, r0
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d102      	bne.n	80145d4 <xQueueGenericSend+0xa4>
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d101      	bne.n	80145d8 <xQueueGenericSend+0xa8>
 80145d4:	2301      	movs	r3, #1
 80145d6:	e000      	b.n	80145da <xQueueGenericSend+0xaa>
 80145d8:	2300      	movs	r3, #0
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d10b      	bne.n	80145f6 <xQueueGenericSend+0xc6>
 80145de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e2:	b672      	cpsid	i
 80145e4:	f383 8811 	msr	BASEPRI, r3
 80145e8:	f3bf 8f6f 	isb	sy
 80145ec:	f3bf 8f4f 	dsb	sy
 80145f0:	b662      	cpsie	i
 80145f2:	61fb      	str	r3, [r7, #28]
 80145f4:	e7fe      	b.n	80145f4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80145f6:	f002 fa97 	bl	8016b28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80145fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014602:	429a      	cmp	r2, r3
 8014604:	d302      	bcc.n	801460c <xQueueGenericSend+0xdc>
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	2b02      	cmp	r3, #2
 801460a:	d131      	bne.n	8014670 <xQueueGenericSend+0x140>
			{
				traceQUEUE_SEND( pxQueue );
 801460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014614:	4619      	mov	r1, r3
 8014616:	4610      	mov	r0, r2
 8014618:	f7ec fc02 	bl	8000e20 <TimeDoctor_QUEUE_SEND>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801461c:	683a      	ldr	r2, [r7, #0]
 801461e:	68b9      	ldr	r1, [r7, #8]
 8014620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014622:	f000 fbd8 	bl	8014dd6 <prvCopyDataToQueue>
 8014626:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801462c:	2b00      	cmp	r3, #0
 801462e:	d010      	beq.n	8014652 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014632:	3324      	adds	r3, #36	; 0x24
 8014634:	4618      	mov	r0, r3
 8014636:	f001 fa69 	bl	8015b0c <xTaskRemoveFromEventList>
 801463a:	4603      	mov	r3, r0
 801463c:	2b00      	cmp	r3, #0
 801463e:	d013      	beq.n	8014668 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014640:	4b3f      	ldr	r3, [pc, #252]	; (8014740 <xQueueGenericSend+0x210>)
 8014642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014646:	601a      	str	r2, [r3, #0]
 8014648:	f3bf 8f4f 	dsb	sy
 801464c:	f3bf 8f6f 	isb	sy
 8014650:	e00a      	b.n	8014668 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014654:	2b00      	cmp	r3, #0
 8014656:	d007      	beq.n	8014668 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014658:	4b39      	ldr	r3, [pc, #228]	; (8014740 <xQueueGenericSend+0x210>)
 801465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801465e:	601a      	str	r2, [r3, #0]
 8014660:	f3bf 8f4f 	dsb	sy
 8014664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014668:	f002 fa90 	bl	8016b8c <vPortExitCritical>
				return pdPASS;
 801466c:	2301      	movs	r3, #1
 801466e:	e063      	b.n	8014738 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d103      	bne.n	801467e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014676:	f002 fa89 	bl	8016b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801467a:	2300      	movs	r3, #0
 801467c:	e05c      	b.n	8014738 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014680:	2b00      	cmp	r3, #0
 8014682:	d106      	bne.n	8014692 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014684:	f107 0314 	add.w	r3, r7, #20
 8014688:	4618      	mov	r0, r3
 801468a:	f001 faa3 	bl	8015bd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801468e:	2301      	movs	r3, #1
 8014690:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014692:	f002 fa7b 	bl	8016b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014696:	f000 ffe1 	bl	801565c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801469a:	f002 fa45 	bl	8016b28 <vPortEnterCritical>
 801469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146a4:	b25b      	sxtb	r3, r3
 80146a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146aa:	d103      	bne.n	80146b4 <xQueueGenericSend+0x184>
 80146ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ae:	2200      	movs	r2, #0
 80146b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80146ba:	b25b      	sxtb	r3, r3
 80146bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146c0:	d103      	bne.n	80146ca <xQueueGenericSend+0x19a>
 80146c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c4:	2200      	movs	r2, #0
 80146c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80146ca:	f002 fa5f 	bl	8016b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80146ce:	1d3a      	adds	r2, r7, #4
 80146d0:	f107 0314 	add.w	r3, r7, #20
 80146d4:	4611      	mov	r1, r2
 80146d6:	4618      	mov	r0, r3
 80146d8:	f001 fa92 	bl	8015c00 <xTaskCheckForTimeOut>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d124      	bne.n	801472c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80146e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146e4:	f000 fc6f 	bl	8014fc6 <prvIsQueueFull>
 80146e8:	4603      	mov	r3, r0
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d018      	beq.n	8014720 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80146ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f0:	3310      	adds	r3, #16
 80146f2:	687a      	ldr	r2, [r7, #4]
 80146f4:	4611      	mov	r1, r2
 80146f6:	4618      	mov	r0, r3
 80146f8:	f001 f9b6 	bl	8015a68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80146fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146fe:	f000 fbfa 	bl	8014ef6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014702:	f000 ffb9 	bl	8015678 <xTaskResumeAll>
 8014706:	4603      	mov	r3, r0
 8014708:	2b00      	cmp	r3, #0
 801470a:	f47f af74 	bne.w	80145f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801470e:	4b0c      	ldr	r3, [pc, #48]	; (8014740 <xQueueGenericSend+0x210>)
 8014710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014714:	601a      	str	r2, [r3, #0]
 8014716:	f3bf 8f4f 	dsb	sy
 801471a:	f3bf 8f6f 	isb	sy
 801471e:	e76a      	b.n	80145f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014722:	f000 fbe8 	bl	8014ef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014726:	f000 ffa7 	bl	8015678 <xTaskResumeAll>
 801472a:	e764      	b.n	80145f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801472c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801472e:	f000 fbe2 	bl	8014ef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014732:	f000 ffa1 	bl	8015678 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014738:	4618      	mov	r0, r3
 801473a:	3738      	adds	r7, #56	; 0x38
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}
 8014740:	e000ed04 	.word	0xe000ed04

08014744 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b08e      	sub	sp, #56	; 0x38
 8014748:	af00      	add	r7, sp, #0
 801474a:	60f8      	str	r0, [r7, #12]
 801474c:	60b9      	str	r1, [r7, #8]
 801474e:	607a      	str	r2, [r7, #4]
 8014750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014758:	2b00      	cmp	r3, #0
 801475a:	d10b      	bne.n	8014774 <xQueueGenericSendFromISR+0x30>
 801475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014760:	b672      	cpsid	i
 8014762:	f383 8811 	msr	BASEPRI, r3
 8014766:	f3bf 8f6f 	isb	sy
 801476a:	f3bf 8f4f 	dsb	sy
 801476e:	b662      	cpsie	i
 8014770:	627b      	str	r3, [r7, #36]	; 0x24
 8014772:	e7fe      	b.n	8014772 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d103      	bne.n	8014782 <xQueueGenericSendFromISR+0x3e>
 801477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801477e:	2b00      	cmp	r3, #0
 8014780:	d101      	bne.n	8014786 <xQueueGenericSendFromISR+0x42>
 8014782:	2301      	movs	r3, #1
 8014784:	e000      	b.n	8014788 <xQueueGenericSendFromISR+0x44>
 8014786:	2300      	movs	r3, #0
 8014788:	2b00      	cmp	r3, #0
 801478a:	d10b      	bne.n	80147a4 <xQueueGenericSendFromISR+0x60>
 801478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014790:	b672      	cpsid	i
 8014792:	f383 8811 	msr	BASEPRI, r3
 8014796:	f3bf 8f6f 	isb	sy
 801479a:	f3bf 8f4f 	dsb	sy
 801479e:	b662      	cpsie	i
 80147a0:	623b      	str	r3, [r7, #32]
 80147a2:	e7fe      	b.n	80147a2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	2b02      	cmp	r3, #2
 80147a8:	d103      	bne.n	80147b2 <xQueueGenericSendFromISR+0x6e>
 80147aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d101      	bne.n	80147b6 <xQueueGenericSendFromISR+0x72>
 80147b2:	2301      	movs	r3, #1
 80147b4:	e000      	b.n	80147b8 <xQueueGenericSendFromISR+0x74>
 80147b6:	2300      	movs	r3, #0
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d10b      	bne.n	80147d4 <xQueueGenericSendFromISR+0x90>
 80147bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c0:	b672      	cpsid	i
 80147c2:	f383 8811 	msr	BASEPRI, r3
 80147c6:	f3bf 8f6f 	isb	sy
 80147ca:	f3bf 8f4f 	dsb	sy
 80147ce:	b662      	cpsie	i
 80147d0:	61fb      	str	r3, [r7, #28]
 80147d2:	e7fe      	b.n	80147d2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80147d4:	f002 fa88 	bl	8016ce8 <vPortValidateInterruptPriority>
	__asm volatile
 80147d8:	f3ef 8211 	mrs	r2, BASEPRI
 80147dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e0:	b672      	cpsid	i
 80147e2:	f383 8811 	msr	BASEPRI, r3
 80147e6:	f3bf 8f6f 	isb	sy
 80147ea:	f3bf 8f4f 	dsb	sy
 80147ee:	b662      	cpsie	i
 80147f0:	61ba      	str	r2, [r7, #24]
 80147f2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80147f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80147f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80147f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80147fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014800:	429a      	cmp	r2, r3
 8014802:	d302      	bcc.n	801480a <xQueueGenericSendFromISR+0xc6>
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	2b02      	cmp	r3, #2
 8014808:	d134      	bne.n	8014874 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801480c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8014814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014816:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801481c:	4619      	mov	r1, r3
 801481e:	4610      	mov	r0, r2
 8014820:	f7ec fb40 	bl	8000ea4 <TimeDoctor_QUEUE_SEND_FROM_ISR>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014824:	683a      	ldr	r2, [r7, #0]
 8014826:	68b9      	ldr	r1, [r7, #8]
 8014828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801482a:	f000 fad4 	bl	8014dd6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801482e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014836:	d112      	bne.n	801485e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801483c:	2b00      	cmp	r3, #0
 801483e:	d016      	beq.n	801486e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014842:	3324      	adds	r3, #36	; 0x24
 8014844:	4618      	mov	r0, r3
 8014846:	f001 f961 	bl	8015b0c <xTaskRemoveFromEventList>
 801484a:	4603      	mov	r3, r0
 801484c:	2b00      	cmp	r3, #0
 801484e:	d00e      	beq.n	801486e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d00b      	beq.n	801486e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2201      	movs	r2, #1
 801485a:	601a      	str	r2, [r3, #0]
 801485c:	e007      	b.n	801486e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801485e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014862:	3301      	adds	r3, #1
 8014864:	b2db      	uxtb	r3, r3
 8014866:	b25a      	sxtb	r2, r3
 8014868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801486a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801486e:	2301      	movs	r3, #1
 8014870:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8014872:	e001      	b.n	8014878 <xQueueGenericSendFromISR+0x134>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014874:	2300      	movs	r3, #0
 8014876:	637b      	str	r3, [r7, #52]	; 0x34
 8014878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801487a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014884:	4618      	mov	r0, r3
 8014886:	3738      	adds	r7, #56	; 0x38
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}

0801488c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b08c      	sub	sp, #48	; 0x30
 8014890:	af00      	add	r7, sp, #0
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	60b9      	str	r1, [r7, #8]
 8014896:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014898:	2300      	movs	r3, #0
 801489a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80148a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d10b      	bne.n	80148be <xQueueReceive+0x32>
	__asm volatile
 80148a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148aa:	b672      	cpsid	i
 80148ac:	f383 8811 	msr	BASEPRI, r3
 80148b0:	f3bf 8f6f 	isb	sy
 80148b4:	f3bf 8f4f 	dsb	sy
 80148b8:	b662      	cpsie	i
 80148ba:	623b      	str	r3, [r7, #32]
 80148bc:	e7fe      	b.n	80148bc <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d103      	bne.n	80148cc <xQueueReceive+0x40>
 80148c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d101      	bne.n	80148d0 <xQueueReceive+0x44>
 80148cc:	2301      	movs	r3, #1
 80148ce:	e000      	b.n	80148d2 <xQueueReceive+0x46>
 80148d0:	2300      	movs	r3, #0
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d10b      	bne.n	80148ee <xQueueReceive+0x62>
 80148d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148da:	b672      	cpsid	i
 80148dc:	f383 8811 	msr	BASEPRI, r3
 80148e0:	f3bf 8f6f 	isb	sy
 80148e4:	f3bf 8f4f 	dsb	sy
 80148e8:	b662      	cpsie	i
 80148ea:	61fb      	str	r3, [r7, #28]
 80148ec:	e7fe      	b.n	80148ec <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80148ee:	f001 fadd 	bl	8015eac <xTaskGetSchedulerState>
 80148f2:	4603      	mov	r3, r0
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d102      	bne.n	80148fe <xQueueReceive+0x72>
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d101      	bne.n	8014902 <xQueueReceive+0x76>
 80148fe:	2301      	movs	r3, #1
 8014900:	e000      	b.n	8014904 <xQueueReceive+0x78>
 8014902:	2300      	movs	r3, #0
 8014904:	2b00      	cmp	r3, #0
 8014906:	d10b      	bne.n	8014920 <xQueueReceive+0x94>
 8014908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801490c:	b672      	cpsid	i
 801490e:	f383 8811 	msr	BASEPRI, r3
 8014912:	f3bf 8f6f 	isb	sy
 8014916:	f3bf 8f4f 	dsb	sy
 801491a:	b662      	cpsie	i
 801491c:	61bb      	str	r3, [r7, #24]
 801491e:	e7fe      	b.n	801491e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014920:	f002 f902 	bl	8016b28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014928:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492c:	2b00      	cmp	r3, #0
 801492e:	d027      	beq.n	8014980 <xQueueReceive+0xf4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014930:	68b9      	ldr	r1, [r7, #8]
 8014932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014934:	f000 fab9 	bl	8014eaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8014938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014940:	4619      	mov	r1, r3
 8014942:	4610      	mov	r0, r2
 8014944:	f7ec faf0 	bl	8000f28 <TimeDoctor_QUEUE_RECEIVE>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494a:	1e5a      	subs	r2, r3, #1
 801494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801494e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014952:	691b      	ldr	r3, [r3, #16]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d00f      	beq.n	8014978 <xQueueReceive+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801495a:	3310      	adds	r3, #16
 801495c:	4618      	mov	r0, r3
 801495e:	f001 f8d5 	bl	8015b0c <xTaskRemoveFromEventList>
 8014962:	4603      	mov	r3, r0
 8014964:	2b00      	cmp	r3, #0
 8014966:	d007      	beq.n	8014978 <xQueueReceive+0xec>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014968:	4b3c      	ldr	r3, [pc, #240]	; (8014a5c <xQueueReceive+0x1d0>)
 801496a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801496e:	601a      	str	r2, [r3, #0]
 8014970:	f3bf 8f4f 	dsb	sy
 8014974:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014978:	f002 f908 	bl	8016b8c <vPortExitCritical>
				return pdPASS;
 801497c:	2301      	movs	r3, #1
 801497e:	e069      	b.n	8014a54 <xQueueReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d103      	bne.n	801498e <xQueueReceive+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014986:	f002 f901 	bl	8016b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801498a:	2300      	movs	r3, #0
 801498c:	e062      	b.n	8014a54 <xQueueReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014990:	2b00      	cmp	r3, #0
 8014992:	d106      	bne.n	80149a2 <xQueueReceive+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014994:	f107 0310 	add.w	r3, r7, #16
 8014998:	4618      	mov	r0, r3
 801499a:	f001 f91b 	bl	8015bd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801499e:	2301      	movs	r3, #1
 80149a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80149a2:	f002 f8f3 	bl	8016b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80149a6:	f000 fe59 	bl	801565c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80149aa:	f002 f8bd 	bl	8016b28 <vPortEnterCritical>
 80149ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80149b4:	b25b      	sxtb	r3, r3
 80149b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149ba:	d103      	bne.n	80149c4 <xQueueReceive+0x138>
 80149bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149be:	2200      	movs	r2, #0
 80149c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80149c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80149ca:	b25b      	sxtb	r3, r3
 80149cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149d0:	d103      	bne.n	80149da <xQueueReceive+0x14e>
 80149d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d4:	2200      	movs	r2, #0
 80149d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80149da:	f002 f8d7 	bl	8016b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80149de:	1d3a      	adds	r2, r7, #4
 80149e0:	f107 0310 	add.w	r3, r7, #16
 80149e4:	4611      	mov	r1, r2
 80149e6:	4618      	mov	r0, r3
 80149e8:	f001 f90a 	bl	8015c00 <xTaskCheckForTimeOut>
 80149ec:	4603      	mov	r3, r0
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d123      	bne.n	8014a3a <xQueueReceive+0x1ae>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149f4:	f000 fad1 	bl	8014f9a <prvIsQueueEmpty>
 80149f8:	4603      	mov	r3, r0
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d017      	beq.n	8014a2e <xQueueReceive+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80149fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a00:	3324      	adds	r3, #36	; 0x24
 8014a02:	687a      	ldr	r2, [r7, #4]
 8014a04:	4611      	mov	r1, r2
 8014a06:	4618      	mov	r0, r3
 8014a08:	f001 f82e 	bl	8015a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a0e:	f000 fa72 	bl	8014ef6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014a12:	f000 fe31 	bl	8015678 <xTaskResumeAll>
 8014a16:	4603      	mov	r3, r0
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d181      	bne.n	8014920 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014a1c:	4b0f      	ldr	r3, [pc, #60]	; (8014a5c <xQueueReceive+0x1d0>)
 8014a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a22:	601a      	str	r2, [r3, #0]
 8014a24:	f3bf 8f4f 	dsb	sy
 8014a28:	f3bf 8f6f 	isb	sy
 8014a2c:	e778      	b.n	8014920 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a30:	f000 fa61 	bl	8014ef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014a34:	f000 fe20 	bl	8015678 <xTaskResumeAll>
 8014a38:	e772      	b.n	8014920 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a3c:	f000 fa5b 	bl	8014ef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014a40:	f000 fe1a 	bl	8015678 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a46:	f000 faa8 	bl	8014f9a <prvIsQueueEmpty>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	f43f af67 	beq.w	8014920 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014a52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	3730      	adds	r7, #48	; 0x30
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}
 8014a5c:	e000ed04 	.word	0xe000ed04

08014a60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b08e      	sub	sp, #56	; 0x38
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014a72:	2300      	movs	r3, #0
 8014a74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d10b      	bne.n	8014a94 <xQueueSemaphoreTake+0x34>
 8014a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a80:	b672      	cpsid	i
 8014a82:	f383 8811 	msr	BASEPRI, r3
 8014a86:	f3bf 8f6f 	isb	sy
 8014a8a:	f3bf 8f4f 	dsb	sy
 8014a8e:	b662      	cpsie	i
 8014a90:	623b      	str	r3, [r7, #32]
 8014a92:	e7fe      	b.n	8014a92 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00b      	beq.n	8014ab4 <xQueueSemaphoreTake+0x54>
 8014a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa0:	b672      	cpsid	i
 8014aa2:	f383 8811 	msr	BASEPRI, r3
 8014aa6:	f3bf 8f6f 	isb	sy
 8014aaa:	f3bf 8f4f 	dsb	sy
 8014aae:	b662      	cpsie	i
 8014ab0:	61fb      	str	r3, [r7, #28]
 8014ab2:	e7fe      	b.n	8014ab2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014ab4:	f001 f9fa 	bl	8015eac <xTaskGetSchedulerState>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d102      	bne.n	8014ac4 <xQueueSemaphoreTake+0x64>
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d101      	bne.n	8014ac8 <xQueueSemaphoreTake+0x68>
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	e000      	b.n	8014aca <xQueueSemaphoreTake+0x6a>
 8014ac8:	2300      	movs	r3, #0
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d10b      	bne.n	8014ae6 <xQueueSemaphoreTake+0x86>
 8014ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad2:	b672      	cpsid	i
 8014ad4:	f383 8811 	msr	BASEPRI, r3
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	b662      	cpsie	i
 8014ae2:	61bb      	str	r3, [r7, #24]
 8014ae4:	e7fe      	b.n	8014ae4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014ae6:	f002 f81f 	bl	8016b28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014aee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d02c      	beq.n	8014b50 <xQueueSemaphoreTake+0xf0>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8014af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014afe:	4619      	mov	r1, r3
 8014b00:	4610      	mov	r0, r2
 8014b02:	f7ec fa11 	bl	8000f28 <TimeDoctor_QUEUE_RECEIVE>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b08:	1e5a      	subs	r2, r3, #1
 8014b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b0c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d104      	bne.n	8014b20 <xQueueSemaphoreTake+0xc0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014b16:	f001 fb43 	bl	80161a0 <pvTaskIncrementMutexHeldCount>
 8014b1a:	4602      	mov	r2, r0
 8014b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b22:	691b      	ldr	r3, [r3, #16]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d00f      	beq.n	8014b48 <xQueueSemaphoreTake+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b2a:	3310      	adds	r3, #16
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f000 ffed 	bl	8015b0c <xTaskRemoveFromEventList>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d007      	beq.n	8014b48 <xQueueSemaphoreTake+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014b38:	4b54      	ldr	r3, [pc, #336]	; (8014c8c <xQueueSemaphoreTake+0x22c>)
 8014b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b3e:	601a      	str	r2, [r3, #0]
 8014b40:	f3bf 8f4f 	dsb	sy
 8014b44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014b48:	f002 f820 	bl	8016b8c <vPortExitCritical>
				return pdPASS;
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	e098      	b.n	8014c82 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d112      	bne.n	8014b7c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d00b      	beq.n	8014b74 <xQueueSemaphoreTake+0x114>
 8014b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b60:	b672      	cpsid	i
 8014b62:	f383 8811 	msr	BASEPRI, r3
 8014b66:	f3bf 8f6f 	isb	sy
 8014b6a:	f3bf 8f4f 	dsb	sy
 8014b6e:	b662      	cpsie	i
 8014b70:	617b      	str	r3, [r7, #20]
 8014b72:	e7fe      	b.n	8014b72 <xQueueSemaphoreTake+0x112>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014b74:	f002 f80a 	bl	8016b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014b78:	2300      	movs	r3, #0
 8014b7a:	e082      	b.n	8014c82 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d106      	bne.n	8014b90 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014b82:	f107 030c 	add.w	r3, r7, #12
 8014b86:	4618      	mov	r0, r3
 8014b88:	f001 f824 	bl	8015bd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014b90:	f001 fffc 	bl	8016b8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014b94:	f000 fd62 	bl	801565c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014b98:	f001 ffc6 	bl	8016b28 <vPortEnterCritical>
 8014b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ba2:	b25b      	sxtb	r3, r3
 8014ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ba8:	d103      	bne.n	8014bb2 <xQueueSemaphoreTake+0x152>
 8014baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bac:	2200      	movs	r2, #0
 8014bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014bb8:	b25b      	sxtb	r3, r3
 8014bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bbe:	d103      	bne.n	8014bc8 <xQueueSemaphoreTake+0x168>
 8014bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014bc8:	f001 ffe0 	bl	8016b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014bcc:	463a      	mov	r2, r7
 8014bce:	f107 030c 	add.w	r3, r7, #12
 8014bd2:	4611      	mov	r1, r2
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f001 f813 	bl	8015c00 <xTaskCheckForTimeOut>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d132      	bne.n	8014c46 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014be2:	f000 f9da 	bl	8014f9a <prvIsQueueEmpty>
 8014be6:	4603      	mov	r3, r0
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d026      	beq.n	8014c3a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d109      	bne.n	8014c08 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8014bf4:	f001 ff98 	bl	8016b28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bfa:	689b      	ldr	r3, [r3, #8]
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f001 f973 	bl	8015ee8 <xTaskPriorityInherit>
 8014c02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014c04:	f001 ffc2 	bl	8016b8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c0a:	3324      	adds	r3, #36	; 0x24
 8014c0c:	683a      	ldr	r2, [r7, #0]
 8014c0e:	4611      	mov	r1, r2
 8014c10:	4618      	mov	r0, r3
 8014c12:	f000 ff29 	bl	8015a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c18:	f000 f96d 	bl	8014ef6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014c1c:	f000 fd2c 	bl	8015678 <xTaskResumeAll>
 8014c20:	4603      	mov	r3, r0
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	f47f af5f 	bne.w	8014ae6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014c28:	4b18      	ldr	r3, [pc, #96]	; (8014c8c <xQueueSemaphoreTake+0x22c>)
 8014c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c2e:	601a      	str	r2, [r3, #0]
 8014c30:	f3bf 8f4f 	dsb	sy
 8014c34:	f3bf 8f6f 	isb	sy
 8014c38:	e755      	b.n	8014ae6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c3c:	f000 f95b 	bl	8014ef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014c40:	f000 fd1a 	bl	8015678 <xTaskResumeAll>
 8014c44:	e74f      	b.n	8014ae6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c48:	f000 f955 	bl	8014ef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014c4c:	f000 fd14 	bl	8015678 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c52:	f000 f9a2 	bl	8014f9a <prvIsQueueEmpty>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	f43f af44 	beq.w	8014ae6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d00d      	beq.n	8014c80 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8014c64:	f001 ff60 	bl	8016b28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c6a:	f000 f89c 	bl	8014da6 <prvGetDisinheritPriorityAfterTimeout>
 8014c6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c72:	689b      	ldr	r3, [r3, #8]
 8014c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c76:	4618      	mov	r0, r3
 8014c78:	f001 fa0e 	bl	8016098 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014c7c:	f001 ff86 	bl	8016b8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014c80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014c82:	4618      	mov	r0, r3
 8014c84:	3738      	adds	r7, #56	; 0x38
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	e000ed04 	.word	0xe000ed04

08014c90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b08e      	sub	sp, #56	; 0x38
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	60f8      	str	r0, [r7, #12]
 8014c98:	60b9      	str	r1, [r7, #8]
 8014c9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d10b      	bne.n	8014cbe <xQueueReceiveFromISR+0x2e>
 8014ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014caa:	b672      	cpsid	i
 8014cac:	f383 8811 	msr	BASEPRI, r3
 8014cb0:	f3bf 8f6f 	isb	sy
 8014cb4:	f3bf 8f4f 	dsb	sy
 8014cb8:	b662      	cpsie	i
 8014cba:	623b      	str	r3, [r7, #32]
 8014cbc:	e7fe      	b.n	8014cbc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d103      	bne.n	8014ccc <xQueueReceiveFromISR+0x3c>
 8014cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d101      	bne.n	8014cd0 <xQueueReceiveFromISR+0x40>
 8014ccc:	2301      	movs	r3, #1
 8014cce:	e000      	b.n	8014cd2 <xQueueReceiveFromISR+0x42>
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d10b      	bne.n	8014cee <xQueueReceiveFromISR+0x5e>
 8014cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cda:	b672      	cpsid	i
 8014cdc:	f383 8811 	msr	BASEPRI, r3
 8014ce0:	f3bf 8f6f 	isb	sy
 8014ce4:	f3bf 8f4f 	dsb	sy
 8014ce8:	b662      	cpsie	i
 8014cea:	61fb      	str	r3, [r7, #28]
 8014cec:	e7fe      	b.n	8014cec <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014cee:	f001 fffb 	bl	8016ce8 <vPortValidateInterruptPriority>
	__asm volatile
 8014cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8014cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cfa:	b672      	cpsid	i
 8014cfc:	f383 8811 	msr	BASEPRI, r3
 8014d00:	f3bf 8f6f 	isb	sy
 8014d04:	f3bf 8f4f 	dsb	sy
 8014d08:	b662      	cpsie	i
 8014d0a:	61ba      	str	r2, [r7, #24]
 8014d0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014d0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d037      	beq.n	8014d8e <xQueueReceiveFromISR+0xfe>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8014d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d30:	4619      	mov	r1, r3
 8014d32:	4610      	mov	r0, r2
 8014d34:	f7ec f93a 	bl	8000fac <TimeDoctor_QUEUE_RECEIVE_FROM_ISR>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014d38:	68b9      	ldr	r1, [r7, #8]
 8014d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d3c:	f000 f8b5 	bl	8014eaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d42:	1e5a      	subs	r2, r3, #1
 8014d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014d48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d50:	d112      	bne.n	8014d78 <xQueueReceiveFromISR+0xe8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d54:	691b      	ldr	r3, [r3, #16]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d016      	beq.n	8014d88 <xQueueReceiveFromISR+0xf8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d5c:	3310      	adds	r3, #16
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f000 fed4 	bl	8015b0c <xTaskRemoveFromEventList>
 8014d64:	4603      	mov	r3, r0
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00e      	beq.n	8014d88 <xQueueReceiveFromISR+0xf8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d00b      	beq.n	8014d88 <xQueueReceiveFromISR+0xf8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2201      	movs	r2, #1
 8014d74:	601a      	str	r2, [r3, #0]
 8014d76:	e007      	b.n	8014d88 <xQueueReceiveFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d7c:	3301      	adds	r3, #1
 8014d7e:	b2db      	uxtb	r3, r3
 8014d80:	b25a      	sxtb	r2, r3
 8014d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014d88:	2301      	movs	r3, #1
 8014d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8014d8c:	e001      	b.n	8014d92 <xQueueReceiveFromISR+0x102>
		}
		else
		{
			xReturn = pdFAIL;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	637b      	str	r3, [r7, #52]	; 0x34
 8014d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3738      	adds	r7, #56	; 0x38
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}

08014da6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014da6:	b480      	push	{r7}
 8014da8:	b085      	sub	sp, #20
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d006      	beq.n	8014dc4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014dc0:	60fb      	str	r3, [r7, #12]
 8014dc2:	e001      	b.n	8014dc8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
	}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3714      	adds	r7, #20
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd4:	4770      	bx	lr

08014dd6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014dd6:	b580      	push	{r7, lr}
 8014dd8:	b086      	sub	sp, #24
 8014dda:	af00      	add	r7, sp, #0
 8014ddc:	60f8      	str	r0, [r7, #12]
 8014dde:	60b9      	str	r1, [r7, #8]
 8014de0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014de2:	2300      	movs	r3, #0
 8014de4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d10d      	bne.n	8014e10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d14d      	bne.n	8014e98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	689b      	ldr	r3, [r3, #8]
 8014e00:	4618      	mov	r0, r3
 8014e02:	f001 f8d9 	bl	8015fb8 <xTaskPriorityDisinherit>
 8014e06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	609a      	str	r2, [r3, #8]
 8014e0e:	e043      	b.n	8014e98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d119      	bne.n	8014e4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	6858      	ldr	r0, [r3, #4]
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e1e:	461a      	mov	r2, r3
 8014e20:	68b9      	ldr	r1, [r7, #8]
 8014e22:	f002 fcb7 	bl	8017794 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	685a      	ldr	r2, [r3, #4]
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e2e:	441a      	add	r2, r3
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	685a      	ldr	r2, [r3, #4]
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d32b      	bcc.n	8014e98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	605a      	str	r2, [r3, #4]
 8014e48:	e026      	b.n	8014e98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	68d8      	ldr	r0, [r3, #12]
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e52:	461a      	mov	r2, r3
 8014e54:	68b9      	ldr	r1, [r7, #8]
 8014e56:	f002 fc9d 	bl	8017794 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	68da      	ldr	r2, [r3, #12]
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e62:	425b      	negs	r3, r3
 8014e64:	441a      	add	r2, r3
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	68da      	ldr	r2, [r3, #12]
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d207      	bcs.n	8014e86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	689a      	ldr	r2, [r3, #8]
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e7e:	425b      	negs	r3, r3
 8014e80:	441a      	add	r2, r3
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2b02      	cmp	r3, #2
 8014e8a:	d105      	bne.n	8014e98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d002      	beq.n	8014e98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	3b01      	subs	r3, #1
 8014e96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	1c5a      	adds	r2, r3, #1
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014ea0:	697b      	ldr	r3, [r7, #20]
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3718      	adds	r7, #24
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}

08014eaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014eaa:	b580      	push	{r7, lr}
 8014eac:	b082      	sub	sp, #8
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
 8014eb2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d018      	beq.n	8014eee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	68da      	ldr	r2, [r3, #12]
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ec4:	441a      	add	r2, r3
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	68da      	ldr	r2, [r3, #12]
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	689b      	ldr	r3, [r3, #8]
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d303      	bcc.n	8014ede <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	68d9      	ldr	r1, [r3, #12]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ee6:	461a      	mov	r2, r3
 8014ee8:	6838      	ldr	r0, [r7, #0]
 8014eea:	f002 fc53 	bl	8017794 <memcpy>
	}
}
 8014eee:	bf00      	nop
 8014ef0:	3708      	adds	r7, #8
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}

08014ef6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014ef6:	b580      	push	{r7, lr}
 8014ef8:	b084      	sub	sp, #16
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014efe:	f001 fe13 	bl	8016b28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014f08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014f0a:	e011      	b.n	8014f30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d012      	beq.n	8014f3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	3324      	adds	r3, #36	; 0x24
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f000 fdf7 	bl	8015b0c <xTaskRemoveFromEventList>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d001      	beq.n	8014f28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014f24:	f000 fed0 	bl	8015cc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014f28:	7bfb      	ldrb	r3, [r7, #15]
 8014f2a:	3b01      	subs	r3, #1
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	dce9      	bgt.n	8014f0c <prvUnlockQueue+0x16>
 8014f38:	e000      	b.n	8014f3c <prvUnlockQueue+0x46>
					break;
 8014f3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	22ff      	movs	r2, #255	; 0xff
 8014f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014f44:	f001 fe22 	bl	8016b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014f48:	f001 fdee 	bl	8016b28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014f52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014f54:	e011      	b.n	8014f7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	691b      	ldr	r3, [r3, #16]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d012      	beq.n	8014f84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	3310      	adds	r3, #16
 8014f62:	4618      	mov	r0, r3
 8014f64:	f000 fdd2 	bl	8015b0c <xTaskRemoveFromEventList>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d001      	beq.n	8014f72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014f6e:	f000 feab 	bl	8015cc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014f72:	7bbb      	ldrb	r3, [r7, #14]
 8014f74:	3b01      	subs	r3, #1
 8014f76:	b2db      	uxtb	r3, r3
 8014f78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	dce9      	bgt.n	8014f56 <prvUnlockQueue+0x60>
 8014f82:	e000      	b.n	8014f86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014f84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	22ff      	movs	r2, #255	; 0xff
 8014f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014f8e:	f001 fdfd 	bl	8016b8c <vPortExitCritical>
}
 8014f92:	bf00      	nop
 8014f94:	3710      	adds	r7, #16
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}

08014f9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014f9a:	b580      	push	{r7, lr}
 8014f9c:	b084      	sub	sp, #16
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014fa2:	f001 fdc1 	bl	8016b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d102      	bne.n	8014fb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014fae:	2301      	movs	r3, #1
 8014fb0:	60fb      	str	r3, [r7, #12]
 8014fb2:	e001      	b.n	8014fb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014fb8:	f001 fde8 	bl	8016b8c <vPortExitCritical>

	return xReturn;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3710      	adds	r7, #16
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}

08014fc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014fc6:	b580      	push	{r7, lr}
 8014fc8:	b084      	sub	sp, #16
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014fce:	f001 fdab 	bl	8016b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d102      	bne.n	8014fe4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014fde:	2301      	movs	r3, #1
 8014fe0:	60fb      	str	r3, [r7, #12]
 8014fe2:	e001      	b.n	8014fe8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014fe8:	f001 fdd0 	bl	8016b8c <vPortExitCritical>

	return xReturn;
 8014fec:	68fb      	ldr	r3, [r7, #12]
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3710      	adds	r7, #16
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
	...

08014ff8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015002:	2300      	movs	r3, #0
 8015004:	60fb      	str	r3, [r7, #12]
 8015006:	e01a      	b.n	801503e <vQueueAddToRegistry+0x46>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015008:	4a10      	ldr	r2, [pc, #64]	; (801504c <vQueueAddToRegistry+0x54>)
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d111      	bne.n	8015038 <vQueueAddToRegistry+0x40>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015014:	490d      	ldr	r1, [pc, #52]	; (801504c <vQueueAddToRegistry+0x54>)
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	683a      	ldr	r2, [r7, #0]
 801501a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801501e:	4a0b      	ldr	r2, [pc, #44]	; (801504c <vQueueAddToRegistry+0x54>)
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	4413      	add	r3, r2
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801502e:	6839      	ldr	r1, [r7, #0]
 8015030:	4618      	mov	r0, r3
 8015032:	f7eb fed5 	bl	8000de0 <Timedoctor_QUEUE_REGISTRY_ADD>
				break;
 8015036:	e005      	b.n	8015044 <vQueueAddToRegistry+0x4c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	3301      	adds	r3, #1
 801503c:	60fb      	str	r3, [r7, #12]
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	2b07      	cmp	r3, #7
 8015042:	d9e1      	bls.n	8015008 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015044:	bf00      	nop
 8015046:	3710      	adds	r7, #16
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	2001ba30 	.word	0x2001ba30

08015050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015050:	b580      	push	{r7, lr}
 8015052:	b086      	sub	sp, #24
 8015054:	af00      	add	r7, sp, #0
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015060:	f001 fd62 	bl	8016b28 <vPortEnterCritical>
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801506a:	b25b      	sxtb	r3, r3
 801506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015070:	d103      	bne.n	801507a <vQueueWaitForMessageRestricted+0x2a>
 8015072:	697b      	ldr	r3, [r7, #20]
 8015074:	2200      	movs	r2, #0
 8015076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801507a:	697b      	ldr	r3, [r7, #20]
 801507c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015080:	b25b      	sxtb	r3, r3
 8015082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015086:	d103      	bne.n	8015090 <vQueueWaitForMessageRestricted+0x40>
 8015088:	697b      	ldr	r3, [r7, #20]
 801508a:	2200      	movs	r2, #0
 801508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015090:	f001 fd7c 	bl	8016b8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015094:	697b      	ldr	r3, [r7, #20]
 8015096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015098:	2b00      	cmp	r3, #0
 801509a:	d106      	bne.n	80150aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801509c:	697b      	ldr	r3, [r7, #20]
 801509e:	3324      	adds	r3, #36	; 0x24
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	68b9      	ldr	r1, [r7, #8]
 80150a4:	4618      	mov	r0, r3
 80150a6:	f000 fd05 	bl	8015ab4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80150aa:	6978      	ldr	r0, [r7, #20]
 80150ac:	f7ff ff23 	bl	8014ef6 <prvUnlockQueue>
	}
 80150b0:	bf00      	nop
 80150b2:	3718      	adds	r7, #24
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b08e      	sub	sp, #56	; 0x38
 80150bc:	af04      	add	r7, sp, #16
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	60b9      	str	r1, [r7, #8]
 80150c2:	607a      	str	r2, [r7, #4]
 80150c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80150c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d10b      	bne.n	80150e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80150cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d0:	b672      	cpsid	i
 80150d2:	f383 8811 	msr	BASEPRI, r3
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	f3bf 8f4f 	dsb	sy
 80150de:	b662      	cpsie	i
 80150e0:	623b      	str	r3, [r7, #32]
 80150e2:	e7fe      	b.n	80150e2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80150e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d10b      	bne.n	8015102 <xTaskCreateStatic+0x4a>
 80150ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ee:	b672      	cpsid	i
 80150f0:	f383 8811 	msr	BASEPRI, r3
 80150f4:	f3bf 8f6f 	isb	sy
 80150f8:	f3bf 8f4f 	dsb	sy
 80150fc:	b662      	cpsie	i
 80150fe:	61fb      	str	r3, [r7, #28]
 8015100:	e7fe      	b.n	8015100 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015102:	2360      	movs	r3, #96	; 0x60
 8015104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	2b60      	cmp	r3, #96	; 0x60
 801510a:	d00b      	beq.n	8015124 <xTaskCreateStatic+0x6c>
 801510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015110:	b672      	cpsid	i
 8015112:	f383 8811 	msr	BASEPRI, r3
 8015116:	f3bf 8f6f 	isb	sy
 801511a:	f3bf 8f4f 	dsb	sy
 801511e:	b662      	cpsie	i
 8015120:	61bb      	str	r3, [r7, #24]
 8015122:	e7fe      	b.n	8015122 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015124:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015128:	2b00      	cmp	r3, #0
 801512a:	d01e      	beq.n	801516a <xTaskCreateStatic+0xb2>
 801512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801512e:	2b00      	cmp	r3, #0
 8015130:	d01b      	beq.n	801516a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015134:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801513a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513e:	2202      	movs	r2, #2
 8015140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015144:	2300      	movs	r3, #0
 8015146:	9303      	str	r3, [sp, #12]
 8015148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514a:	9302      	str	r3, [sp, #8]
 801514c:	f107 0314 	add.w	r3, r7, #20
 8015150:	9301      	str	r3, [sp, #4]
 8015152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015154:	9300      	str	r3, [sp, #0]
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	687a      	ldr	r2, [r7, #4]
 801515a:	68b9      	ldr	r1, [r7, #8]
 801515c:	68f8      	ldr	r0, [r7, #12]
 801515e:	f000 f850 	bl	8015202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015164:	f000 f8e0 	bl	8015328 <prvAddNewTaskToReadyList>
 8015168:	e001      	b.n	801516e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801516a:	2300      	movs	r3, #0
 801516c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801516e:	697b      	ldr	r3, [r7, #20]
	}
 8015170:	4618      	mov	r0, r3
 8015172:	3728      	adds	r7, #40	; 0x28
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}

08015178 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015178:	b580      	push	{r7, lr}
 801517a:	b08c      	sub	sp, #48	; 0x30
 801517c:	af04      	add	r7, sp, #16
 801517e:	60f8      	str	r0, [r7, #12]
 8015180:	60b9      	str	r1, [r7, #8]
 8015182:	603b      	str	r3, [r7, #0]
 8015184:	4613      	mov	r3, r2
 8015186:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015188:	88fb      	ldrh	r3, [r7, #6]
 801518a:	009b      	lsls	r3, r3, #2
 801518c:	4618      	mov	r0, r3
 801518e:	f001 fded 	bl	8016d6c <pvPortMalloc>
 8015192:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d00e      	beq.n	80151b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801519a:	2060      	movs	r0, #96	; 0x60
 801519c:	f001 fde6 	bl	8016d6c <pvPortMalloc>
 80151a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80151a2:	69fb      	ldr	r3, [r7, #28]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d003      	beq.n	80151b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80151a8:	69fb      	ldr	r3, [r7, #28]
 80151aa:	697a      	ldr	r2, [r7, #20]
 80151ac:	631a      	str	r2, [r3, #48]	; 0x30
 80151ae:	e005      	b.n	80151bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80151b0:	6978      	ldr	r0, [r7, #20]
 80151b2:	f001 fea7 	bl	8016f04 <vPortFree>
 80151b6:	e001      	b.n	80151bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80151b8:	2300      	movs	r3, #0
 80151ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80151bc:	69fb      	ldr	r3, [r7, #28]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d017      	beq.n	80151f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80151c2:	69fb      	ldr	r3, [r7, #28]
 80151c4:	2200      	movs	r2, #0
 80151c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80151ca:	88fa      	ldrh	r2, [r7, #6]
 80151cc:	2300      	movs	r3, #0
 80151ce:	9303      	str	r3, [sp, #12]
 80151d0:	69fb      	ldr	r3, [r7, #28]
 80151d2:	9302      	str	r3, [sp, #8]
 80151d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151d6:	9301      	str	r3, [sp, #4]
 80151d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151da:	9300      	str	r3, [sp, #0]
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	68b9      	ldr	r1, [r7, #8]
 80151e0:	68f8      	ldr	r0, [r7, #12]
 80151e2:	f000 f80e 	bl	8015202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80151e6:	69f8      	ldr	r0, [r7, #28]
 80151e8:	f000 f89e 	bl	8015328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80151ec:	2301      	movs	r3, #1
 80151ee:	61bb      	str	r3, [r7, #24]
 80151f0:	e002      	b.n	80151f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80151f2:	f04f 33ff 	mov.w	r3, #4294967295
 80151f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80151f8:	69bb      	ldr	r3, [r7, #24]
	}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3720      	adds	r7, #32
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}

08015202 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015202:	b580      	push	{r7, lr}
 8015204:	b088      	sub	sp, #32
 8015206:	af00      	add	r7, sp, #0
 8015208:	60f8      	str	r0, [r7, #12]
 801520a:	60b9      	str	r1, [r7, #8]
 801520c:	607a      	str	r2, [r7, #4]
 801520e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015212:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	009b      	lsls	r3, r3, #2
 8015218:	461a      	mov	r2, r3
 801521a:	21a5      	movs	r1, #165	; 0xa5
 801521c:	f002 fac5 	bl	80177aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015224:	6879      	ldr	r1, [r7, #4]
 8015226:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801522a:	440b      	add	r3, r1
 801522c:	009b      	lsls	r3, r3, #2
 801522e:	4413      	add	r3, r2
 8015230:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	f023 0307 	bic.w	r3, r3, #7
 8015238:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801523a:	69bb      	ldr	r3, [r7, #24]
 801523c:	f003 0307 	and.w	r3, r3, #7
 8015240:	2b00      	cmp	r3, #0
 8015242:	d00b      	beq.n	801525c <prvInitialiseNewTask+0x5a>
 8015244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015248:	b672      	cpsid	i
 801524a:	f383 8811 	msr	BASEPRI, r3
 801524e:	f3bf 8f6f 	isb	sy
 8015252:	f3bf 8f4f 	dsb	sy
 8015256:	b662      	cpsie	i
 8015258:	617b      	str	r3, [r7, #20]
 801525a:	e7fe      	b.n	801525a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d01f      	beq.n	80152a2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015262:	2300      	movs	r3, #0
 8015264:	61fb      	str	r3, [r7, #28]
 8015266:	e012      	b.n	801528e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015268:	68ba      	ldr	r2, [r7, #8]
 801526a:	69fb      	ldr	r3, [r7, #28]
 801526c:	4413      	add	r3, r2
 801526e:	7819      	ldrb	r1, [r3, #0]
 8015270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	4413      	add	r3, r2
 8015276:	3334      	adds	r3, #52	; 0x34
 8015278:	460a      	mov	r2, r1
 801527a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801527c:	68ba      	ldr	r2, [r7, #8]
 801527e:	69fb      	ldr	r3, [r7, #28]
 8015280:	4413      	add	r3, r2
 8015282:	781b      	ldrb	r3, [r3, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d006      	beq.n	8015296 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015288:	69fb      	ldr	r3, [r7, #28]
 801528a:	3301      	adds	r3, #1
 801528c:	61fb      	str	r3, [r7, #28]
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	2b0f      	cmp	r3, #15
 8015292:	d9e9      	bls.n	8015268 <prvInitialiseNewTask+0x66>
 8015294:	e000      	b.n	8015298 <prvInitialiseNewTask+0x96>
			{
				break;
 8015296:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801529a:	2200      	movs	r2, #0
 801529c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80152a0:	e003      	b.n	80152aa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80152a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a4:	2200      	movs	r2, #0
 80152a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80152aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ac:	2b37      	cmp	r3, #55	; 0x37
 80152ae:	d901      	bls.n	80152b4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80152b0:	2337      	movs	r3, #55	; 0x37
 80152b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80152b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80152ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80152c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c2:	2200      	movs	r2, #0
 80152c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80152c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c8:	3304      	adds	r3, #4
 80152ca:	4618      	mov	r0, r3
 80152cc:	f7fe fe92 	bl	8013ff4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80152d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d2:	3318      	adds	r3, #24
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7fe fe8d 	bl	8013ff4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80152da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80152e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80152ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80152f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f2:	2200      	movs	r2, #0
 80152f4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80152f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f8:	2200      	movs	r2, #0
 80152fa:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80152fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152fe:	2200      	movs	r2, #0
 8015300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015304:	683a      	ldr	r2, [r7, #0]
 8015306:	68f9      	ldr	r1, [r7, #12]
 8015308:	69b8      	ldr	r0, [r7, #24]
 801530a:	f001 fb05 	bl	8016918 <pxPortInitialiseStack>
 801530e:	4602      	mov	r2, r0
 8015310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015312:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015316:	2b00      	cmp	r3, #0
 8015318:	d002      	beq.n	8015320 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801531c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801531e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015320:	bf00      	nop
 8015322:	3720      	adds	r7, #32
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}

08015328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015330:	f001 fbfa 	bl	8016b28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015334:	4b31      	ldr	r3, [pc, #196]	; (80153fc <prvAddNewTaskToReadyList+0xd4>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	3301      	adds	r3, #1
 801533a:	4a30      	ldr	r2, [pc, #192]	; (80153fc <prvAddNewTaskToReadyList+0xd4>)
 801533c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801533e:	4b30      	ldr	r3, [pc, #192]	; (8015400 <prvAddNewTaskToReadyList+0xd8>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d109      	bne.n	801535a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015346:	4a2e      	ldr	r2, [pc, #184]	; (8015400 <prvAddNewTaskToReadyList+0xd8>)
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801534c:	4b2b      	ldr	r3, [pc, #172]	; (80153fc <prvAddNewTaskToReadyList+0xd4>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b01      	cmp	r3, #1
 8015352:	d110      	bne.n	8015376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015354:	f000 fcde 	bl	8015d14 <prvInitialiseTaskLists>
 8015358:	e00d      	b.n	8015376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801535a:	4b2a      	ldr	r3, [pc, #168]	; (8015404 <prvAddNewTaskToReadyList+0xdc>)
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d109      	bne.n	8015376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015362:	4b27      	ldr	r3, [pc, #156]	; (8015400 <prvAddNewTaskToReadyList+0xd8>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801536c:	429a      	cmp	r2, r3
 801536e:	d802      	bhi.n	8015376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015370:	4a23      	ldr	r2, [pc, #140]	; (8015400 <prvAddNewTaskToReadyList+0xd8>)
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015376:	4b24      	ldr	r3, [pc, #144]	; (8015408 <prvAddNewTaskToReadyList+0xe0>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	3301      	adds	r3, #1
 801537c:	4a22      	ldr	r2, [pc, #136]	; (8015408 <prvAddNewTaskToReadyList+0xe0>)
 801537e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015380:	4b21      	ldr	r3, [pc, #132]	; (8015408 <prvAddNewTaskToReadyList+0xe0>)
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	3334      	adds	r3, #52	; 0x34
 8015390:	4619      	mov	r1, r3
 8015392:	4610      	mov	r0, r2
 8015394:	f7eb fbd2 	bl	8000b3c <TimeDoctor_CREATE>

		prvAddTaskToReadyList( pxNewTCB );
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801539c:	4b1b      	ldr	r3, [pc, #108]	; (801540c <prvAddNewTaskToReadyList+0xe4>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d903      	bls.n	80153ac <prvAddNewTaskToReadyList+0x84>
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153a8:	4a18      	ldr	r2, [pc, #96]	; (801540c <prvAddNewTaskToReadyList+0xe4>)
 80153aa:	6013      	str	r3, [r2, #0]
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153b0:	4613      	mov	r3, r2
 80153b2:	009b      	lsls	r3, r3, #2
 80153b4:	4413      	add	r3, r2
 80153b6:	009b      	lsls	r3, r3, #2
 80153b8:	4a15      	ldr	r2, [pc, #84]	; (8015410 <prvAddNewTaskToReadyList+0xe8>)
 80153ba:	441a      	add	r2, r3
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	3304      	adds	r3, #4
 80153c0:	4619      	mov	r1, r3
 80153c2:	4610      	mov	r0, r2
 80153c4:	f7fe fe23 	bl	801400e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80153c8:	f001 fbe0 	bl	8016b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80153cc:	4b0d      	ldr	r3, [pc, #52]	; (8015404 <prvAddNewTaskToReadyList+0xdc>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d00e      	beq.n	80153f2 <prvAddNewTaskToReadyList+0xca>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80153d4:	4b0a      	ldr	r3, [pc, #40]	; (8015400 <prvAddNewTaskToReadyList+0xd8>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153de:	429a      	cmp	r2, r3
 80153e0:	d207      	bcs.n	80153f2 <prvAddNewTaskToReadyList+0xca>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80153e2:	4b0c      	ldr	r3, [pc, #48]	; (8015414 <prvAddNewTaskToReadyList+0xec>)
 80153e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153e8:	601a      	str	r2, [r3, #0]
 80153ea:	f3bf 8f4f 	dsb	sy
 80153ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80153f2:	bf00      	nop
 80153f4:	3708      	adds	r7, #8
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	20001d0c 	.word	0x20001d0c
 8015400:	20001838 	.word	0x20001838
 8015404:	20001d18 	.word	0x20001d18
 8015408:	20001d28 	.word	0x20001d28
 801540c:	20001d14 	.word	0x20001d14
 8015410:	2000183c 	.word	0x2000183c
 8015414:	e000ed04 	.word	0xe000ed04

08015418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015420:	2300      	movs	r3, #0
 8015422:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d018      	beq.n	801545c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801542a:	4b14      	ldr	r3, [pc, #80]	; (801547c <vTaskDelay+0x64>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d00b      	beq.n	801544a <vTaskDelay+0x32>
 8015432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015436:	b672      	cpsid	i
 8015438:	f383 8811 	msr	BASEPRI, r3
 801543c:	f3bf 8f6f 	isb	sy
 8015440:	f3bf 8f4f 	dsb	sy
 8015444:	b662      	cpsie	i
 8015446:	60bb      	str	r3, [r7, #8]
 8015448:	e7fe      	b.n	8015448 <vTaskDelay+0x30>
			vTaskSuspendAll();
 801544a:	f000 f907 	bl	801565c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801544e:	2100      	movs	r1, #0
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f000 feb9 	bl	80161c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015456:	f000 f90f 	bl	8015678 <xTaskResumeAll>
 801545a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d107      	bne.n	8015472 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8015462:	4b07      	ldr	r3, [pc, #28]	; (8015480 <vTaskDelay+0x68>)
 8015464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015468:	601a      	str	r2, [r3, #0]
 801546a:	f3bf 8f4f 	dsb	sy
 801546e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015472:	bf00      	nop
 8015474:	3710      	adds	r7, #16
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	20001d34 	.word	0x20001d34
 8015480:	e000ed04 	.word	0xe000ed04

08015484 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8015484:	b580      	push	{r7, lr}
 8015486:	b084      	sub	sp, #16
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801548c:	f001 fb4c 	bl	8016b28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d102      	bne.n	801549c <vTaskSuspend+0x18>
 8015496:	4b33      	ldr	r3, [pc, #204]	; (8015564 <vTaskSuspend+0xe0>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	e000      	b.n	801549e <vTaskSuspend+0x1a>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154a4:	4618      	mov	r0, r3
 80154a6:	f7eb fc15 	bl	8000cd4 <TimeDoctor_TASK_SUSPEND>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	3304      	adds	r3, #4
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7fe fe0a 	bl	80140c8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d004      	beq.n	80154c6 <vTaskSuspend+0x42>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	3318      	adds	r3, #24
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7fe fe01 	bl	80140c8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	3304      	adds	r3, #4
 80154ca:	4619      	mov	r1, r3
 80154cc:	4826      	ldr	r0, [pc, #152]	; (8015568 <vTaskSuspend+0xe4>)
 80154ce:	f7fe fd9e 	bl	801400e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80154d8:	b2db      	uxtb	r3, r3
 80154da:	2b01      	cmp	r3, #1
 80154dc:	d103      	bne.n	80154e6 <vTaskSuspend+0x62>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	2200      	movs	r2, #0
 80154e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80154e6:	f001 fb51 	bl	8016b8c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80154ea:	4b20      	ldr	r3, [pc, #128]	; (801556c <vTaskSuspend+0xe8>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d005      	beq.n	80154fe <vTaskSuspend+0x7a>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80154f2:	f001 fb19 	bl	8016b28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80154f6:	f000 fca9 	bl	8015e4c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80154fa:	f001 fb47 	bl	8016b8c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80154fe:	4b19      	ldr	r3, [pc, #100]	; (8015564 <vTaskSuspend+0xe0>)
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	68fa      	ldr	r2, [r7, #12]
 8015504:	429a      	cmp	r2, r3
 8015506:	d128      	bne.n	801555a <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
 8015508:	4b18      	ldr	r3, [pc, #96]	; (801556c <vTaskSuspend+0xe8>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d018      	beq.n	8015542 <vTaskSuspend+0xbe>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8015510:	4b17      	ldr	r3, [pc, #92]	; (8015570 <vTaskSuspend+0xec>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d00b      	beq.n	8015530 <vTaskSuspend+0xac>
 8015518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801551c:	b672      	cpsid	i
 801551e:	f383 8811 	msr	BASEPRI, r3
 8015522:	f3bf 8f6f 	isb	sy
 8015526:	f3bf 8f4f 	dsb	sy
 801552a:	b662      	cpsie	i
 801552c:	60bb      	str	r3, [r7, #8]
 801552e:	e7fe      	b.n	801552e <vTaskSuspend+0xaa>
				portYIELD_WITHIN_API();
 8015530:	4b10      	ldr	r3, [pc, #64]	; (8015574 <vTaskSuspend+0xf0>)
 8015532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015536:	601a      	str	r2, [r3, #0]
 8015538:	f3bf 8f4f 	dsb	sy
 801553c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015540:	e00b      	b.n	801555a <vTaskSuspend+0xd6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8015542:	4b09      	ldr	r3, [pc, #36]	; (8015568 <vTaskSuspend+0xe4>)
 8015544:	681a      	ldr	r2, [r3, #0]
 8015546:	4b0c      	ldr	r3, [pc, #48]	; (8015578 <vTaskSuspend+0xf4>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	429a      	cmp	r2, r3
 801554c:	d103      	bne.n	8015556 <vTaskSuspend+0xd2>
					pxCurrentTCB = NULL;
 801554e:	4b05      	ldr	r3, [pc, #20]	; (8015564 <vTaskSuspend+0xe0>)
 8015550:	2200      	movs	r2, #0
 8015552:	601a      	str	r2, [r3, #0]
	}
 8015554:	e001      	b.n	801555a <vTaskSuspend+0xd6>
					vTaskSwitchContext();
 8015556:	f000 f9f7 	bl	8015948 <vTaskSwitchContext>
	}
 801555a:	bf00      	nop
 801555c:	3710      	adds	r7, #16
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}
 8015562:	bf00      	nop
 8015564:	20001838 	.word	0x20001838
 8015568:	20001cf8 	.word	0x20001cf8
 801556c:	20001d18 	.word	0x20001d18
 8015570:	20001d34 	.word	0x20001d34
 8015574:	e000ed04 	.word	0xe000ed04
 8015578:	20001d0c 	.word	0x20001d0c

0801557c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b08a      	sub	sp, #40	; 0x28
 8015580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015582:	2300      	movs	r3, #0
 8015584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015586:	2300      	movs	r3, #0
 8015588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801558a:	463a      	mov	r2, r7
 801558c:	1d39      	adds	r1, r7, #4
 801558e:	f107 0308 	add.w	r3, r7, #8
 8015592:	4618      	mov	r0, r3
 8015594:	f7fe fcda 	bl	8013f4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015598:	6839      	ldr	r1, [r7, #0]
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	68ba      	ldr	r2, [r7, #8]
 801559e:	9202      	str	r2, [sp, #8]
 80155a0:	9301      	str	r3, [sp, #4]
 80155a2:	2300      	movs	r3, #0
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	2300      	movs	r3, #0
 80155a8:	460a      	mov	r2, r1
 80155aa:	4925      	ldr	r1, [pc, #148]	; (8015640 <vTaskStartScheduler+0xc4>)
 80155ac:	4825      	ldr	r0, [pc, #148]	; (8015644 <vTaskStartScheduler+0xc8>)
 80155ae:	f7ff fd83 	bl	80150b8 <xTaskCreateStatic>
 80155b2:	4602      	mov	r2, r0
 80155b4:	4b24      	ldr	r3, [pc, #144]	; (8015648 <vTaskStartScheduler+0xcc>)
 80155b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80155b8:	4b23      	ldr	r3, [pc, #140]	; (8015648 <vTaskStartScheduler+0xcc>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d002      	beq.n	80155c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80155c0:	2301      	movs	r3, #1
 80155c2:	617b      	str	r3, [r7, #20]
 80155c4:	e001      	b.n	80155ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80155c6:	2300      	movs	r3, #0
 80155c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d102      	bne.n	80155d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80155d0:	f000 fe4e 	bl	8016270 <xTimerCreateTimerTask>
 80155d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	2b01      	cmp	r3, #1
 80155da:	d11d      	bne.n	8015618 <vTaskStartScheduler+0x9c>
 80155dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155e0:	b672      	cpsid	i
 80155e2:	f383 8811 	msr	BASEPRI, r3
 80155e6:	f3bf 8f6f 	isb	sy
 80155ea:	f3bf 8f4f 	dsb	sy
 80155ee:	b662      	cpsie	i
 80155f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80155f2:	4b16      	ldr	r3, [pc, #88]	; (801564c <vTaskStartScheduler+0xd0>)
 80155f4:	f04f 32ff 	mov.w	r2, #4294967295
 80155f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80155fa:	4b15      	ldr	r3, [pc, #84]	; (8015650 <vTaskStartScheduler+0xd4>)
 80155fc:	2201      	movs	r2, #1
 80155fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015600:	4b14      	ldr	r3, [pc, #80]	; (8015654 <vTaskStartScheduler+0xd8>)
 8015602:	2200      	movs	r2, #0
 8015604:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8015606:	4b14      	ldr	r3, [pc, #80]	; (8015658 <vTaskStartScheduler+0xdc>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801560c:	4618      	mov	r0, r3
 801560e:	f7eb fae5 	bl	8000bdc <TimeDoctor_TASK_SWITCHED_IN>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015612:	f001 fa0d 	bl	8016a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015616:	e00f      	b.n	8015638 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015618:	697b      	ldr	r3, [r7, #20]
 801561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801561e:	d10b      	bne.n	8015638 <vTaskStartScheduler+0xbc>
 8015620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015624:	b672      	cpsid	i
 8015626:	f383 8811 	msr	BASEPRI, r3
 801562a:	f3bf 8f6f 	isb	sy
 801562e:	f3bf 8f4f 	dsb	sy
 8015632:	b662      	cpsie	i
 8015634:	60fb      	str	r3, [r7, #12]
 8015636:	e7fe      	b.n	8015636 <vTaskStartScheduler+0xba>
}
 8015638:	bf00      	nop
 801563a:	3718      	adds	r7, #24
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}
 8015640:	08018504 	.word	0x08018504
 8015644:	08015ce1 	.word	0x08015ce1
 8015648:	20001d30 	.word	0x20001d30
 801564c:	20001d2c 	.word	0x20001d2c
 8015650:	20001d18 	.word	0x20001d18
 8015654:	20001d10 	.word	0x20001d10
 8015658:	20001838 	.word	0x20001838

0801565c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801565c:	b480      	push	{r7}
 801565e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015660:	4b04      	ldr	r3, [pc, #16]	; (8015674 <vTaskSuspendAll+0x18>)
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	3301      	adds	r3, #1
 8015666:	4a03      	ldr	r2, [pc, #12]	; (8015674 <vTaskSuspendAll+0x18>)
 8015668:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801566a:	bf00      	nop
 801566c:	46bd      	mov	sp, r7
 801566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015672:	4770      	bx	lr
 8015674:	20001d34 	.word	0x20001d34

08015678 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801567e:	2300      	movs	r3, #0
 8015680:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015682:	2300      	movs	r3, #0
 8015684:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015686:	4b42      	ldr	r3, [pc, #264]	; (8015790 <xTaskResumeAll+0x118>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d10b      	bne.n	80156a6 <xTaskResumeAll+0x2e>
 801568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015692:	b672      	cpsid	i
 8015694:	f383 8811 	msr	BASEPRI, r3
 8015698:	f3bf 8f6f 	isb	sy
 801569c:	f3bf 8f4f 	dsb	sy
 80156a0:	b662      	cpsie	i
 80156a2:	603b      	str	r3, [r7, #0]
 80156a4:	e7fe      	b.n	80156a4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80156a6:	f001 fa3f 	bl	8016b28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80156aa:	4b39      	ldr	r3, [pc, #228]	; (8015790 <xTaskResumeAll+0x118>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	3b01      	subs	r3, #1
 80156b0:	4a37      	ldr	r2, [pc, #220]	; (8015790 <xTaskResumeAll+0x118>)
 80156b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80156b4:	4b36      	ldr	r3, [pc, #216]	; (8015790 <xTaskResumeAll+0x118>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d162      	bne.n	8015782 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80156bc:	4b35      	ldr	r3, [pc, #212]	; (8015794 <xTaskResumeAll+0x11c>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d05e      	beq.n	8015782 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80156c4:	e02f      	b.n	8015726 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156c6:	4b34      	ldr	r3, [pc, #208]	; (8015798 <xTaskResumeAll+0x120>)
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	68db      	ldr	r3, [r3, #12]
 80156cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	3318      	adds	r3, #24
 80156d2:	4618      	mov	r0, r3
 80156d4:	f7fe fcf8 	bl	80140c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	3304      	adds	r3, #4
 80156dc:	4618      	mov	r0, r3
 80156de:	f7fe fcf3 	bl	80140c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156e6:	4b2d      	ldr	r3, [pc, #180]	; (801579c <xTaskResumeAll+0x124>)
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d903      	bls.n	80156f6 <xTaskResumeAll+0x7e>
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156f2:	4a2a      	ldr	r2, [pc, #168]	; (801579c <xTaskResumeAll+0x124>)
 80156f4:	6013      	str	r3, [r2, #0]
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156fa:	4613      	mov	r3, r2
 80156fc:	009b      	lsls	r3, r3, #2
 80156fe:	4413      	add	r3, r2
 8015700:	009b      	lsls	r3, r3, #2
 8015702:	4a27      	ldr	r2, [pc, #156]	; (80157a0 <xTaskResumeAll+0x128>)
 8015704:	441a      	add	r2, r3
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	3304      	adds	r3, #4
 801570a:	4619      	mov	r1, r3
 801570c:	4610      	mov	r0, r2
 801570e:	f7fe fc7e 	bl	801400e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015716:	4b23      	ldr	r3, [pc, #140]	; (80157a4 <xTaskResumeAll+0x12c>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801571c:	429a      	cmp	r2, r3
 801571e:	d302      	bcc.n	8015726 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015720:	4b21      	ldr	r3, [pc, #132]	; (80157a8 <xTaskResumeAll+0x130>)
 8015722:	2201      	movs	r2, #1
 8015724:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015726:	4b1c      	ldr	r3, [pc, #112]	; (8015798 <xTaskResumeAll+0x120>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d1cb      	bne.n	80156c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d001      	beq.n	8015738 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015734:	f000 fb8a 	bl	8015e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015738:	4b1c      	ldr	r3, [pc, #112]	; (80157ac <xTaskResumeAll+0x134>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d010      	beq.n	8015766 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015744:	f000 f846 	bl	80157d4 <xTaskIncrementTick>
 8015748:	4603      	mov	r3, r0
 801574a:	2b00      	cmp	r3, #0
 801574c:	d002      	beq.n	8015754 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801574e:	4b16      	ldr	r3, [pc, #88]	; (80157a8 <xTaskResumeAll+0x130>)
 8015750:	2201      	movs	r2, #1
 8015752:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	3b01      	subs	r3, #1
 8015758:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d1f1      	bne.n	8015744 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8015760:	4b12      	ldr	r3, [pc, #72]	; (80157ac <xTaskResumeAll+0x134>)
 8015762:	2200      	movs	r2, #0
 8015764:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015766:	4b10      	ldr	r3, [pc, #64]	; (80157a8 <xTaskResumeAll+0x130>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d009      	beq.n	8015782 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801576e:	2301      	movs	r3, #1
 8015770:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015772:	4b0f      	ldr	r3, [pc, #60]	; (80157b0 <xTaskResumeAll+0x138>)
 8015774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015778:	601a      	str	r2, [r3, #0]
 801577a:	f3bf 8f4f 	dsb	sy
 801577e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015782:	f001 fa03 	bl	8016b8c <vPortExitCritical>

	return xAlreadyYielded;
 8015786:	68bb      	ldr	r3, [r7, #8]
}
 8015788:	4618      	mov	r0, r3
 801578a:	3710      	adds	r7, #16
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	20001d34 	.word	0x20001d34
 8015794:	20001d0c 	.word	0x20001d0c
 8015798:	20001ccc 	.word	0x20001ccc
 801579c:	20001d14 	.word	0x20001d14
 80157a0:	2000183c 	.word	0x2000183c
 80157a4:	20001838 	.word	0x20001838
 80157a8:	20001d20 	.word	0x20001d20
 80157ac:	20001d1c 	.word	0x20001d1c
 80157b0:	e000ed04 	.word	0xe000ed04

080157b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80157ba:	4b05      	ldr	r3, [pc, #20]	; (80157d0 <xTaskGetTickCount+0x1c>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80157c0:	687b      	ldr	r3, [r7, #4]
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	370c      	adds	r7, #12
 80157c6:	46bd      	mov	sp, r7
 80157c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157cc:	4770      	bx	lr
 80157ce:	bf00      	nop
 80157d0:	20001d10 	.word	0x20001d10

080157d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b086      	sub	sp, #24
 80157d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80157da:	2300      	movs	r3, #0
 80157dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80157de:	4b4f      	ldr	r3, [pc, #316]	; (801591c <xTaskIncrementTick+0x148>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	f040 808a 	bne.w	80158fc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80157e8:	4b4d      	ldr	r3, [pc, #308]	; (8015920 <xTaskIncrementTick+0x14c>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	3301      	adds	r3, #1
 80157ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80157f0:	4a4b      	ldr	r2, [pc, #300]	; (8015920 <xTaskIncrementTick+0x14c>)
 80157f2:	693b      	ldr	r3, [r7, #16]
 80157f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80157f6:	693b      	ldr	r3, [r7, #16]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d121      	bne.n	8015840 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80157fc:	4b49      	ldr	r3, [pc, #292]	; (8015924 <xTaskIncrementTick+0x150>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d00b      	beq.n	801581e <xTaskIncrementTick+0x4a>
 8015806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801580a:	b672      	cpsid	i
 801580c:	f383 8811 	msr	BASEPRI, r3
 8015810:	f3bf 8f6f 	isb	sy
 8015814:	f3bf 8f4f 	dsb	sy
 8015818:	b662      	cpsie	i
 801581a:	603b      	str	r3, [r7, #0]
 801581c:	e7fe      	b.n	801581c <xTaskIncrementTick+0x48>
 801581e:	4b41      	ldr	r3, [pc, #260]	; (8015924 <xTaskIncrementTick+0x150>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	60fb      	str	r3, [r7, #12]
 8015824:	4b40      	ldr	r3, [pc, #256]	; (8015928 <xTaskIncrementTick+0x154>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	4a3e      	ldr	r2, [pc, #248]	; (8015924 <xTaskIncrementTick+0x150>)
 801582a:	6013      	str	r3, [r2, #0]
 801582c:	4a3e      	ldr	r2, [pc, #248]	; (8015928 <xTaskIncrementTick+0x154>)
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	6013      	str	r3, [r2, #0]
 8015832:	4b3e      	ldr	r3, [pc, #248]	; (801592c <xTaskIncrementTick+0x158>)
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	3301      	adds	r3, #1
 8015838:	4a3c      	ldr	r2, [pc, #240]	; (801592c <xTaskIncrementTick+0x158>)
 801583a:	6013      	str	r3, [r2, #0]
 801583c:	f000 fb06 	bl	8015e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015840:	4b3b      	ldr	r3, [pc, #236]	; (8015930 <xTaskIncrementTick+0x15c>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	693a      	ldr	r2, [r7, #16]
 8015846:	429a      	cmp	r2, r3
 8015848:	d349      	bcc.n	80158de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801584a:	4b36      	ldr	r3, [pc, #216]	; (8015924 <xTaskIncrementTick+0x150>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d104      	bne.n	801585e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015854:	4b36      	ldr	r3, [pc, #216]	; (8015930 <xTaskIncrementTick+0x15c>)
 8015856:	f04f 32ff 	mov.w	r2, #4294967295
 801585a:	601a      	str	r2, [r3, #0]
					break;
 801585c:	e03f      	b.n	80158de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801585e:	4b31      	ldr	r3, [pc, #196]	; (8015924 <xTaskIncrementTick+0x150>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	68db      	ldr	r3, [r3, #12]
 8015866:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	685b      	ldr	r3, [r3, #4]
 801586c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801586e:	693a      	ldr	r2, [r7, #16]
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	429a      	cmp	r2, r3
 8015874:	d203      	bcs.n	801587e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015876:	4a2e      	ldr	r2, [pc, #184]	; (8015930 <xTaskIncrementTick+0x15c>)
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801587c:	e02f      	b.n	80158de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	3304      	adds	r3, #4
 8015882:	4618      	mov	r0, r3
 8015884:	f7fe fc20 	bl	80140c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801588c:	2b00      	cmp	r3, #0
 801588e:	d004      	beq.n	801589a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015890:	68bb      	ldr	r3, [r7, #8]
 8015892:	3318      	adds	r3, #24
 8015894:	4618      	mov	r0, r3
 8015896:	f7fe fc17 	bl	80140c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801589e:	4b25      	ldr	r3, [pc, #148]	; (8015934 <xTaskIncrementTick+0x160>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d903      	bls.n	80158ae <xTaskIncrementTick+0xda>
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158aa:	4a22      	ldr	r2, [pc, #136]	; (8015934 <xTaskIncrementTick+0x160>)
 80158ac:	6013      	str	r3, [r2, #0]
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158b2:	4613      	mov	r3, r2
 80158b4:	009b      	lsls	r3, r3, #2
 80158b6:	4413      	add	r3, r2
 80158b8:	009b      	lsls	r3, r3, #2
 80158ba:	4a1f      	ldr	r2, [pc, #124]	; (8015938 <xTaskIncrementTick+0x164>)
 80158bc:	441a      	add	r2, r3
 80158be:	68bb      	ldr	r3, [r7, #8]
 80158c0:	3304      	adds	r3, #4
 80158c2:	4619      	mov	r1, r3
 80158c4:	4610      	mov	r0, r2
 80158c6:	f7fe fba2 	bl	801400e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158ce:	4b1b      	ldr	r3, [pc, #108]	; (801593c <xTaskIncrementTick+0x168>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d3b8      	bcc.n	801584a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80158d8:	2301      	movs	r3, #1
 80158da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80158dc:	e7b5      	b.n	801584a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80158de:	4b17      	ldr	r3, [pc, #92]	; (801593c <xTaskIncrementTick+0x168>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158e4:	4914      	ldr	r1, [pc, #80]	; (8015938 <xTaskIncrementTick+0x164>)
 80158e6:	4613      	mov	r3, r2
 80158e8:	009b      	lsls	r3, r3, #2
 80158ea:	4413      	add	r3, r2
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	440b      	add	r3, r1
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2b01      	cmp	r3, #1
 80158f4:	d907      	bls.n	8015906 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80158f6:	2301      	movs	r3, #1
 80158f8:	617b      	str	r3, [r7, #20]
 80158fa:	e004      	b.n	8015906 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80158fc:	4b10      	ldr	r3, [pc, #64]	; (8015940 <xTaskIncrementTick+0x16c>)
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	3301      	adds	r3, #1
 8015902:	4a0f      	ldr	r2, [pc, #60]	; (8015940 <xTaskIncrementTick+0x16c>)
 8015904:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015906:	4b0f      	ldr	r3, [pc, #60]	; (8015944 <xTaskIncrementTick+0x170>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d001      	beq.n	8015912 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801590e:	2301      	movs	r3, #1
 8015910:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015912:	697b      	ldr	r3, [r7, #20]
}
 8015914:	4618      	mov	r0, r3
 8015916:	3718      	adds	r7, #24
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}
 801591c:	20001d34 	.word	0x20001d34
 8015920:	20001d10 	.word	0x20001d10
 8015924:	20001cc4 	.word	0x20001cc4
 8015928:	20001cc8 	.word	0x20001cc8
 801592c:	20001d24 	.word	0x20001d24
 8015930:	20001d2c 	.word	0x20001d2c
 8015934:	20001d14 	.word	0x20001d14
 8015938:	2000183c 	.word	0x2000183c
 801593c:	20001838 	.word	0x20001838
 8015940:	20001d1c 	.word	0x20001d1c
 8015944:	20001d20 	.word	0x20001d20

08015948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b086      	sub	sp, #24
 801594c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801594e:	4b41      	ldr	r3, [pc, #260]	; (8015a54 <vTaskSwitchContext+0x10c>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d003      	beq.n	801595e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015956:	4b40      	ldr	r3, [pc, #256]	; (8015a58 <vTaskSwitchContext+0x110>)
 8015958:	2201      	movs	r2, #1
 801595a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801595c:	e075      	b.n	8015a4a <vTaskSwitchContext+0x102>
		xYieldPending = pdFALSE;
 801595e:	4b3e      	ldr	r3, [pc, #248]	; (8015a58 <vTaskSwitchContext+0x110>)
 8015960:	2200      	movs	r2, #0
 8015962:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8015964:	4b3d      	ldr	r3, [pc, #244]	; (8015a5c <vTaskSwitchContext+0x114>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801596a:	4618      	mov	r0, r3
 801596c:	f7eb f974 	bl	8000c58 <TimeDoctor_TASK_SWITCHED_OUT>
		taskCHECK_FOR_STACK_OVERFLOW();
 8015970:	4b3a      	ldr	r3, [pc, #232]	; (8015a5c <vTaskSwitchContext+0x114>)
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015976:	613b      	str	r3, [r7, #16]
 8015978:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801597c:	60fb      	str	r3, [r7, #12]
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	68fa      	ldr	r2, [r7, #12]
 8015984:	429a      	cmp	r2, r3
 8015986:	d111      	bne.n	80159ac <vTaskSwitchContext+0x64>
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	3304      	adds	r3, #4
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	68fa      	ldr	r2, [r7, #12]
 8015990:	429a      	cmp	r2, r3
 8015992:	d10b      	bne.n	80159ac <vTaskSwitchContext+0x64>
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	3308      	adds	r3, #8
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	68fa      	ldr	r2, [r7, #12]
 801599c:	429a      	cmp	r2, r3
 801599e:	d105      	bne.n	80159ac <vTaskSwitchContext+0x64>
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	330c      	adds	r3, #12
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	68fa      	ldr	r2, [r7, #12]
 80159a8:	429a      	cmp	r2, r3
 80159aa:	d008      	beq.n	80159be <vTaskSwitchContext+0x76>
 80159ac:	4b2b      	ldr	r3, [pc, #172]	; (8015a5c <vTaskSwitchContext+0x114>)
 80159ae:	681a      	ldr	r2, [r3, #0]
 80159b0:	4b2a      	ldr	r3, [pc, #168]	; (8015a5c <vTaskSwitchContext+0x114>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	3334      	adds	r3, #52	; 0x34
 80159b6:	4619      	mov	r1, r3
 80159b8:	4610      	mov	r0, r2
 80159ba:	f7eb fb40 	bl	800103e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159be:	4b28      	ldr	r3, [pc, #160]	; (8015a60 <vTaskSwitchContext+0x118>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	617b      	str	r3, [r7, #20]
 80159c4:	e011      	b.n	80159ea <vTaskSwitchContext+0xa2>
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d10b      	bne.n	80159e4 <vTaskSwitchContext+0x9c>
 80159cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d0:	b672      	cpsid	i
 80159d2:	f383 8811 	msr	BASEPRI, r3
 80159d6:	f3bf 8f6f 	isb	sy
 80159da:	f3bf 8f4f 	dsb	sy
 80159de:	b662      	cpsie	i
 80159e0:	607b      	str	r3, [r7, #4]
 80159e2:	e7fe      	b.n	80159e2 <vTaskSwitchContext+0x9a>
 80159e4:	697b      	ldr	r3, [r7, #20]
 80159e6:	3b01      	subs	r3, #1
 80159e8:	617b      	str	r3, [r7, #20]
 80159ea:	491e      	ldr	r1, [pc, #120]	; (8015a64 <vTaskSwitchContext+0x11c>)
 80159ec:	697a      	ldr	r2, [r7, #20]
 80159ee:	4613      	mov	r3, r2
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	4413      	add	r3, r2
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	440b      	add	r3, r1
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d0e3      	beq.n	80159c6 <vTaskSwitchContext+0x7e>
 80159fe:	697a      	ldr	r2, [r7, #20]
 8015a00:	4613      	mov	r3, r2
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	4413      	add	r3, r2
 8015a06:	009b      	lsls	r3, r3, #2
 8015a08:	4a16      	ldr	r2, [pc, #88]	; (8015a64 <vTaskSwitchContext+0x11c>)
 8015a0a:	4413      	add	r3, r2
 8015a0c:	60bb      	str	r3, [r7, #8]
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	685b      	ldr	r3, [r3, #4]
 8015a12:	685a      	ldr	r2, [r3, #4]
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	605a      	str	r2, [r3, #4]
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	685a      	ldr	r2, [r3, #4]
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	3308      	adds	r3, #8
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d104      	bne.n	8015a2e <vTaskSwitchContext+0xe6>
 8015a24:	68bb      	ldr	r3, [r7, #8]
 8015a26:	685b      	ldr	r3, [r3, #4]
 8015a28:	685a      	ldr	r2, [r3, #4]
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	605a      	str	r2, [r3, #4]
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	68db      	ldr	r3, [r3, #12]
 8015a34:	4a09      	ldr	r2, [pc, #36]	; (8015a5c <vTaskSwitchContext+0x114>)
 8015a36:	6013      	str	r3, [r2, #0]
 8015a38:	4a09      	ldr	r2, [pc, #36]	; (8015a60 <vTaskSwitchContext+0x118>)
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8015a3e:	4b07      	ldr	r3, [pc, #28]	; (8015a5c <vTaskSwitchContext+0x114>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7eb f8c9 	bl	8000bdc <TimeDoctor_TASK_SWITCHED_IN>
}
 8015a4a:	bf00      	nop
 8015a4c:	3718      	adds	r7, #24
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	20001d34 	.word	0x20001d34
 8015a58:	20001d20 	.word	0x20001d20
 8015a5c:	20001838 	.word	0x20001838
 8015a60:	20001d14 	.word	0x20001d14
 8015a64:	2000183c 	.word	0x2000183c

08015a68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d10b      	bne.n	8015a90 <vTaskPlaceOnEventList+0x28>
 8015a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a7c:	b672      	cpsid	i
 8015a7e:	f383 8811 	msr	BASEPRI, r3
 8015a82:	f3bf 8f6f 	isb	sy
 8015a86:	f3bf 8f4f 	dsb	sy
 8015a8a:	b662      	cpsie	i
 8015a8c:	60fb      	str	r3, [r7, #12]
 8015a8e:	e7fe      	b.n	8015a8e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015a90:	4b07      	ldr	r3, [pc, #28]	; (8015ab0 <vTaskPlaceOnEventList+0x48>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	3318      	adds	r3, #24
 8015a96:	4619      	mov	r1, r3
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f7fe fadc 	bl	8014056 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015a9e:	2101      	movs	r1, #1
 8015aa0:	6838      	ldr	r0, [r7, #0]
 8015aa2:	f000 fb91 	bl	80161c8 <prvAddCurrentTaskToDelayedList>
}
 8015aa6:	bf00      	nop
 8015aa8:	3710      	adds	r7, #16
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}
 8015aae:	bf00      	nop
 8015ab0:	20001838 	.word	0x20001838

08015ab4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b086      	sub	sp, #24
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	60f8      	str	r0, [r7, #12]
 8015abc:	60b9      	str	r1, [r7, #8]
 8015abe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d10b      	bne.n	8015ade <vTaskPlaceOnEventListRestricted+0x2a>
 8015ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aca:	b672      	cpsid	i
 8015acc:	f383 8811 	msr	BASEPRI, r3
 8015ad0:	f3bf 8f6f 	isb	sy
 8015ad4:	f3bf 8f4f 	dsb	sy
 8015ad8:	b662      	cpsie	i
 8015ada:	617b      	str	r3, [r7, #20]
 8015adc:	e7fe      	b.n	8015adc <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015ade:	4b0a      	ldr	r3, [pc, #40]	; (8015b08 <vTaskPlaceOnEventListRestricted+0x54>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	3318      	adds	r3, #24
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	68f8      	ldr	r0, [r7, #12]
 8015ae8:	f7fe fa91 	bl	801400e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d002      	beq.n	8015af8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015af2:	f04f 33ff 	mov.w	r3, #4294967295
 8015af6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015af8:	6879      	ldr	r1, [r7, #4]
 8015afa:	68b8      	ldr	r0, [r7, #8]
 8015afc:	f000 fb64 	bl	80161c8 <prvAddCurrentTaskToDelayedList>
	}
 8015b00:	bf00      	nop
 8015b02:	3718      	adds	r7, #24
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	20001838 	.word	0x20001838

08015b0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b086      	sub	sp, #24
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	68db      	ldr	r3, [r3, #12]
 8015b18:	68db      	ldr	r3, [r3, #12]
 8015b1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015b1c:	693b      	ldr	r3, [r7, #16]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d10b      	bne.n	8015b3a <xTaskRemoveFromEventList+0x2e>
 8015b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b26:	b672      	cpsid	i
 8015b28:	f383 8811 	msr	BASEPRI, r3
 8015b2c:	f3bf 8f6f 	isb	sy
 8015b30:	f3bf 8f4f 	dsb	sy
 8015b34:	b662      	cpsie	i
 8015b36:	60fb      	str	r3, [r7, #12]
 8015b38:	e7fe      	b.n	8015b38 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015b3a:	693b      	ldr	r3, [r7, #16]
 8015b3c:	3318      	adds	r3, #24
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7fe fac2 	bl	80140c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b44:	4b1d      	ldr	r3, [pc, #116]	; (8015bbc <xTaskRemoveFromEventList+0xb0>)
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d11d      	bne.n	8015b88 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015b4c:	693b      	ldr	r3, [r7, #16]
 8015b4e:	3304      	adds	r3, #4
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7fe fab9 	bl	80140c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b5a:	4b19      	ldr	r3, [pc, #100]	; (8015bc0 <xTaskRemoveFromEventList+0xb4>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d903      	bls.n	8015b6a <xTaskRemoveFromEventList+0x5e>
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b66:	4a16      	ldr	r2, [pc, #88]	; (8015bc0 <xTaskRemoveFromEventList+0xb4>)
 8015b68:	6013      	str	r3, [r2, #0]
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b6e:	4613      	mov	r3, r2
 8015b70:	009b      	lsls	r3, r3, #2
 8015b72:	4413      	add	r3, r2
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	4a13      	ldr	r2, [pc, #76]	; (8015bc4 <xTaskRemoveFromEventList+0xb8>)
 8015b78:	441a      	add	r2, r3
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	3304      	adds	r3, #4
 8015b7e:	4619      	mov	r1, r3
 8015b80:	4610      	mov	r0, r2
 8015b82:	f7fe fa44 	bl	801400e <vListInsertEnd>
 8015b86:	e005      	b.n	8015b94 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	3318      	adds	r3, #24
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	480e      	ldr	r0, [pc, #56]	; (8015bc8 <xTaskRemoveFromEventList+0xbc>)
 8015b90:	f7fe fa3d 	bl	801400e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b98:	4b0c      	ldr	r3, [pc, #48]	; (8015bcc <xTaskRemoveFromEventList+0xc0>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d905      	bls.n	8015bae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015ba6:	4b0a      	ldr	r3, [pc, #40]	; (8015bd0 <xTaskRemoveFromEventList+0xc4>)
 8015ba8:	2201      	movs	r2, #1
 8015baa:	601a      	str	r2, [r3, #0]
 8015bac:	e001      	b.n	8015bb2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015bb2:	697b      	ldr	r3, [r7, #20]
}
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	3718      	adds	r7, #24
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd80      	pop	{r7, pc}
 8015bbc:	20001d34 	.word	0x20001d34
 8015bc0:	20001d14 	.word	0x20001d14
 8015bc4:	2000183c 	.word	0x2000183c
 8015bc8:	20001ccc 	.word	0x20001ccc
 8015bcc:	20001838 	.word	0x20001838
 8015bd0:	20001d20 	.word	0x20001d20

08015bd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015bdc:	4b06      	ldr	r3, [pc, #24]	; (8015bf8 <vTaskInternalSetTimeOutState+0x24>)
 8015bde:	681a      	ldr	r2, [r3, #0]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015be4:	4b05      	ldr	r3, [pc, #20]	; (8015bfc <vTaskInternalSetTimeOutState+0x28>)
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	605a      	str	r2, [r3, #4]
}
 8015bec:	bf00      	nop
 8015bee:	370c      	adds	r7, #12
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf6:	4770      	bx	lr
 8015bf8:	20001d24 	.word	0x20001d24
 8015bfc:	20001d10 	.word	0x20001d10

08015c00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b088      	sub	sp, #32
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d10b      	bne.n	8015c28 <xTaskCheckForTimeOut+0x28>
 8015c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c14:	b672      	cpsid	i
 8015c16:	f383 8811 	msr	BASEPRI, r3
 8015c1a:	f3bf 8f6f 	isb	sy
 8015c1e:	f3bf 8f4f 	dsb	sy
 8015c22:	b662      	cpsie	i
 8015c24:	613b      	str	r3, [r7, #16]
 8015c26:	e7fe      	b.n	8015c26 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d10b      	bne.n	8015c46 <xTaskCheckForTimeOut+0x46>
 8015c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c32:	b672      	cpsid	i
 8015c34:	f383 8811 	msr	BASEPRI, r3
 8015c38:	f3bf 8f6f 	isb	sy
 8015c3c:	f3bf 8f4f 	dsb	sy
 8015c40:	b662      	cpsie	i
 8015c42:	60fb      	str	r3, [r7, #12]
 8015c44:	e7fe      	b.n	8015c44 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8015c46:	f000 ff6f 	bl	8016b28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015c4a:	4b1d      	ldr	r3, [pc, #116]	; (8015cc0 <xTaskCheckForTimeOut+0xc0>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	69ba      	ldr	r2, [r7, #24]
 8015c56:	1ad3      	subs	r3, r2, r3
 8015c58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c62:	d102      	bne.n	8015c6a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015c64:	2300      	movs	r3, #0
 8015c66:	61fb      	str	r3, [r7, #28]
 8015c68:	e023      	b.n	8015cb2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	4b15      	ldr	r3, [pc, #84]	; (8015cc4 <xTaskCheckForTimeOut+0xc4>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d007      	beq.n	8015c86 <xTaskCheckForTimeOut+0x86>
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	69ba      	ldr	r2, [r7, #24]
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	d302      	bcc.n	8015c86 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015c80:	2301      	movs	r3, #1
 8015c82:	61fb      	str	r3, [r7, #28]
 8015c84:	e015      	b.n	8015cb2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	697a      	ldr	r2, [r7, #20]
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d20b      	bcs.n	8015ca8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	681a      	ldr	r2, [r3, #0]
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	1ad2      	subs	r2, r2, r3
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015c9c:	6878      	ldr	r0, [r7, #4]
 8015c9e:	f7ff ff99 	bl	8015bd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	61fb      	str	r3, [r7, #28]
 8015ca6:	e004      	b.n	8015cb2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	2200      	movs	r2, #0
 8015cac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015cae:	2301      	movs	r3, #1
 8015cb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015cb2:	f000 ff6b 	bl	8016b8c <vPortExitCritical>

	return xReturn;
 8015cb6:	69fb      	ldr	r3, [r7, #28]
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3720      	adds	r7, #32
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}
 8015cc0:	20001d10 	.word	0x20001d10
 8015cc4:	20001d24 	.word	0x20001d24

08015cc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015cc8:	b480      	push	{r7}
 8015cca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015ccc:	4b03      	ldr	r3, [pc, #12]	; (8015cdc <vTaskMissedYield+0x14>)
 8015cce:	2201      	movs	r2, #1
 8015cd0:	601a      	str	r2, [r3, #0]
}
 8015cd2:	bf00      	nop
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cda:	4770      	bx	lr
 8015cdc:	20001d20 	.word	0x20001d20

08015ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015ce8:	f000 f854 	bl	8015d94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015cec:	4b07      	ldr	r3, [pc, #28]	; (8015d0c <prvIdleTask+0x2c>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	2b01      	cmp	r3, #1
 8015cf2:	d907      	bls.n	8015d04 <prvIdleTask+0x24>
			{
				taskYIELD();
 8015cf4:	4b06      	ldr	r3, [pc, #24]	; (8015d10 <prvIdleTask+0x30>)
 8015cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cfa:	601a      	str	r2, [r3, #0]
 8015cfc:	f3bf 8f4f 	dsb	sy
 8015d00:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015d04:	f7eb f994 	bl	8001030 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8015d08:	e7ee      	b.n	8015ce8 <prvIdleTask+0x8>
 8015d0a:	bf00      	nop
 8015d0c:	2000183c 	.word	0x2000183c
 8015d10:	e000ed04 	.word	0xe000ed04

08015d14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	607b      	str	r3, [r7, #4]
 8015d1e:	e00c      	b.n	8015d3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015d20:	687a      	ldr	r2, [r7, #4]
 8015d22:	4613      	mov	r3, r2
 8015d24:	009b      	lsls	r3, r3, #2
 8015d26:	4413      	add	r3, r2
 8015d28:	009b      	lsls	r3, r3, #2
 8015d2a:	4a12      	ldr	r2, [pc, #72]	; (8015d74 <prvInitialiseTaskLists+0x60>)
 8015d2c:	4413      	add	r3, r2
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7fe f940 	bl	8013fb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	3301      	adds	r3, #1
 8015d38:	607b      	str	r3, [r7, #4]
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2b37      	cmp	r3, #55	; 0x37
 8015d3e:	d9ef      	bls.n	8015d20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015d40:	480d      	ldr	r0, [pc, #52]	; (8015d78 <prvInitialiseTaskLists+0x64>)
 8015d42:	f7fe f937 	bl	8013fb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015d46:	480d      	ldr	r0, [pc, #52]	; (8015d7c <prvInitialiseTaskLists+0x68>)
 8015d48:	f7fe f934 	bl	8013fb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015d4c:	480c      	ldr	r0, [pc, #48]	; (8015d80 <prvInitialiseTaskLists+0x6c>)
 8015d4e:	f7fe f931 	bl	8013fb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015d52:	480c      	ldr	r0, [pc, #48]	; (8015d84 <prvInitialiseTaskLists+0x70>)
 8015d54:	f7fe f92e 	bl	8013fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015d58:	480b      	ldr	r0, [pc, #44]	; (8015d88 <prvInitialiseTaskLists+0x74>)
 8015d5a:	f7fe f92b 	bl	8013fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015d5e:	4b0b      	ldr	r3, [pc, #44]	; (8015d8c <prvInitialiseTaskLists+0x78>)
 8015d60:	4a05      	ldr	r2, [pc, #20]	; (8015d78 <prvInitialiseTaskLists+0x64>)
 8015d62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015d64:	4b0a      	ldr	r3, [pc, #40]	; (8015d90 <prvInitialiseTaskLists+0x7c>)
 8015d66:	4a05      	ldr	r2, [pc, #20]	; (8015d7c <prvInitialiseTaskLists+0x68>)
 8015d68:	601a      	str	r2, [r3, #0]
}
 8015d6a:	bf00      	nop
 8015d6c:	3708      	adds	r7, #8
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	2000183c 	.word	0x2000183c
 8015d78:	20001c9c 	.word	0x20001c9c
 8015d7c:	20001cb0 	.word	0x20001cb0
 8015d80:	20001ccc 	.word	0x20001ccc
 8015d84:	20001ce0 	.word	0x20001ce0
 8015d88:	20001cf8 	.word	0x20001cf8
 8015d8c:	20001cc4 	.word	0x20001cc4
 8015d90:	20001cc8 	.word	0x20001cc8

08015d94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015d9a:	e019      	b.n	8015dd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015d9c:	f000 fec4 	bl	8016b28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015da0:	4b0f      	ldr	r3, [pc, #60]	; (8015de0 <prvCheckTasksWaitingTermination+0x4c>)
 8015da2:	68db      	ldr	r3, [r3, #12]
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	3304      	adds	r3, #4
 8015dac:	4618      	mov	r0, r3
 8015dae:	f7fe f98b 	bl	80140c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015db2:	4b0c      	ldr	r3, [pc, #48]	; (8015de4 <prvCheckTasksWaitingTermination+0x50>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	3b01      	subs	r3, #1
 8015db8:	4a0a      	ldr	r2, [pc, #40]	; (8015de4 <prvCheckTasksWaitingTermination+0x50>)
 8015dba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015dbc:	4b0a      	ldr	r3, [pc, #40]	; (8015de8 <prvCheckTasksWaitingTermination+0x54>)
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	3b01      	subs	r3, #1
 8015dc2:	4a09      	ldr	r2, [pc, #36]	; (8015de8 <prvCheckTasksWaitingTermination+0x54>)
 8015dc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015dc6:	f000 fee1 	bl	8016b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f000 f80e 	bl	8015dec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015dd0:	4b05      	ldr	r3, [pc, #20]	; (8015de8 <prvCheckTasksWaitingTermination+0x54>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d1e1      	bne.n	8015d9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015dd8:	bf00      	nop
 8015dda:	3708      	adds	r7, #8
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}
 8015de0:	20001ce0 	.word	0x20001ce0
 8015de4:	20001d0c 	.word	0x20001d0c
 8015de8:	20001cf4 	.word	0x20001cf4

08015dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b084      	sub	sp, #16
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d108      	bne.n	8015e10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e02:	4618      	mov	r0, r3
 8015e04:	f001 f87e 	bl	8016f04 <vPortFree>
				vPortFree( pxTCB );
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f001 f87b 	bl	8016f04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015e0e:	e019      	b.n	8015e44 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015e16:	2b01      	cmp	r3, #1
 8015e18:	d103      	bne.n	8015e22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f001 f872 	bl	8016f04 <vPortFree>
	}
 8015e20:	e010      	b.n	8015e44 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015e28:	2b02      	cmp	r3, #2
 8015e2a:	d00b      	beq.n	8015e44 <prvDeleteTCB+0x58>
 8015e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e30:	b672      	cpsid	i
 8015e32:	f383 8811 	msr	BASEPRI, r3
 8015e36:	f3bf 8f6f 	isb	sy
 8015e3a:	f3bf 8f4f 	dsb	sy
 8015e3e:	b662      	cpsie	i
 8015e40:	60fb      	str	r3, [r7, #12]
 8015e42:	e7fe      	b.n	8015e42 <prvDeleteTCB+0x56>
	}
 8015e44:	bf00      	nop
 8015e46:	3710      	adds	r7, #16
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015e4c:	b480      	push	{r7}
 8015e4e:	b083      	sub	sp, #12
 8015e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015e52:	4b0c      	ldr	r3, [pc, #48]	; (8015e84 <prvResetNextTaskUnblockTime+0x38>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d104      	bne.n	8015e66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015e5c:	4b0a      	ldr	r3, [pc, #40]	; (8015e88 <prvResetNextTaskUnblockTime+0x3c>)
 8015e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8015e62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015e64:	e008      	b.n	8015e78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e66:	4b07      	ldr	r3, [pc, #28]	; (8015e84 <prvResetNextTaskUnblockTime+0x38>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	68db      	ldr	r3, [r3, #12]
 8015e6c:	68db      	ldr	r3, [r3, #12]
 8015e6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	685b      	ldr	r3, [r3, #4]
 8015e74:	4a04      	ldr	r2, [pc, #16]	; (8015e88 <prvResetNextTaskUnblockTime+0x3c>)
 8015e76:	6013      	str	r3, [r2, #0]
}
 8015e78:	bf00      	nop
 8015e7a:	370c      	adds	r7, #12
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e82:	4770      	bx	lr
 8015e84:	20001cc4 	.word	0x20001cc4
 8015e88:	20001d2c 	.word	0x20001d2c

08015e8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b083      	sub	sp, #12
 8015e90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015e92:	4b05      	ldr	r3, [pc, #20]	; (8015ea8 <xTaskGetCurrentTaskHandle+0x1c>)
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015e98:	687b      	ldr	r3, [r7, #4]
	}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	370c      	adds	r7, #12
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea4:	4770      	bx	lr
 8015ea6:	bf00      	nop
 8015ea8:	20001838 	.word	0x20001838

08015eac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015eac:	b480      	push	{r7}
 8015eae:	b083      	sub	sp, #12
 8015eb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015eb2:	4b0b      	ldr	r3, [pc, #44]	; (8015ee0 <xTaskGetSchedulerState+0x34>)
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d102      	bne.n	8015ec0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015eba:	2301      	movs	r3, #1
 8015ebc:	607b      	str	r3, [r7, #4]
 8015ebe:	e008      	b.n	8015ed2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ec0:	4b08      	ldr	r3, [pc, #32]	; (8015ee4 <xTaskGetSchedulerState+0x38>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d102      	bne.n	8015ece <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015ec8:	2302      	movs	r3, #2
 8015eca:	607b      	str	r3, [r7, #4]
 8015ecc:	e001      	b.n	8015ed2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015ed2:	687b      	ldr	r3, [r7, #4]
	}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	370c      	adds	r7, #12
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ede:	4770      	bx	lr
 8015ee0:	20001d18 	.word	0x20001d18
 8015ee4:	20001d34 	.word	0x20001d34

08015ee8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b084      	sub	sp, #16
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d051      	beq.n	8015fa2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015efe:	68bb      	ldr	r3, [r7, #8]
 8015f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f02:	4b2a      	ldr	r3, [pc, #168]	; (8015fac <xTaskPriorityInherit+0xc4>)
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d241      	bcs.n	8015f90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	699b      	ldr	r3, [r3, #24]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	db06      	blt.n	8015f22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f14:	4b25      	ldr	r3, [pc, #148]	; (8015fac <xTaskPriorityInherit+0xc4>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015f22:	68bb      	ldr	r3, [r7, #8]
 8015f24:	6959      	ldr	r1, [r3, #20]
 8015f26:	68bb      	ldr	r3, [r7, #8]
 8015f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	009b      	lsls	r3, r3, #2
 8015f2e:	4413      	add	r3, r2
 8015f30:	009b      	lsls	r3, r3, #2
 8015f32:	4a1f      	ldr	r2, [pc, #124]	; (8015fb0 <xTaskPriorityInherit+0xc8>)
 8015f34:	4413      	add	r3, r2
 8015f36:	4299      	cmp	r1, r3
 8015f38:	d122      	bne.n	8015f80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	3304      	adds	r3, #4
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7fe f8c2 	bl	80140c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015f44:	4b19      	ldr	r3, [pc, #100]	; (8015fac <xTaskPriorityInherit+0xc4>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f52:	4b18      	ldr	r3, [pc, #96]	; (8015fb4 <xTaskPriorityInherit+0xcc>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d903      	bls.n	8015f62 <xTaskPriorityInherit+0x7a>
 8015f5a:	68bb      	ldr	r3, [r7, #8]
 8015f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f5e:	4a15      	ldr	r2, [pc, #84]	; (8015fb4 <xTaskPriorityInherit+0xcc>)
 8015f60:	6013      	str	r3, [r2, #0]
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f66:	4613      	mov	r3, r2
 8015f68:	009b      	lsls	r3, r3, #2
 8015f6a:	4413      	add	r3, r2
 8015f6c:	009b      	lsls	r3, r3, #2
 8015f6e:	4a10      	ldr	r2, [pc, #64]	; (8015fb0 <xTaskPriorityInherit+0xc8>)
 8015f70:	441a      	add	r2, r3
 8015f72:	68bb      	ldr	r3, [r7, #8]
 8015f74:	3304      	adds	r3, #4
 8015f76:	4619      	mov	r1, r3
 8015f78:	4610      	mov	r0, r2
 8015f7a:	f7fe f848 	bl	801400e <vListInsertEnd>
 8015f7e:	e004      	b.n	8015f8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015f80:	4b0a      	ldr	r3, [pc, #40]	; (8015fac <xTaskPriorityInherit+0xc4>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015f8a:	2301      	movs	r3, #1
 8015f8c:	60fb      	str	r3, [r7, #12]
 8015f8e:	e008      	b.n	8015fa2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015f94:	4b05      	ldr	r3, [pc, #20]	; (8015fac <xTaskPriorityInherit+0xc4>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f9a:	429a      	cmp	r2, r3
 8015f9c:	d201      	bcs.n	8015fa2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015f9e:	2301      	movs	r3, #1
 8015fa0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
	}
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	3710      	adds	r7, #16
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd80      	pop	{r7, pc}
 8015fac:	20001838 	.word	0x20001838
 8015fb0:	2000183c 	.word	0x2000183c
 8015fb4:	20001d14 	.word	0x20001d14

08015fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b086      	sub	sp, #24
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d058      	beq.n	8016080 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015fce:	4b2f      	ldr	r3, [pc, #188]	; (801608c <xTaskPriorityDisinherit+0xd4>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	693a      	ldr	r2, [r7, #16]
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	d00b      	beq.n	8015ff0 <xTaskPriorityDisinherit+0x38>
 8015fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fdc:	b672      	cpsid	i
 8015fde:	f383 8811 	msr	BASEPRI, r3
 8015fe2:	f3bf 8f6f 	isb	sy
 8015fe6:	f3bf 8f4f 	dsb	sy
 8015fea:	b662      	cpsie	i
 8015fec:	60fb      	str	r3, [r7, #12]
 8015fee:	e7fe      	b.n	8015fee <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d10b      	bne.n	8016010 <xTaskPriorityDisinherit+0x58>
 8015ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ffc:	b672      	cpsid	i
 8015ffe:	f383 8811 	msr	BASEPRI, r3
 8016002:	f3bf 8f6f 	isb	sy
 8016006:	f3bf 8f4f 	dsb	sy
 801600a:	b662      	cpsie	i
 801600c:	60bb      	str	r3, [r7, #8]
 801600e:	e7fe      	b.n	801600e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016014:	1e5a      	subs	r2, r3, #1
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801601a:	693b      	ldr	r3, [r7, #16]
 801601c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016022:	429a      	cmp	r2, r3
 8016024:	d02c      	beq.n	8016080 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016026:	693b      	ldr	r3, [r7, #16]
 8016028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801602a:	2b00      	cmp	r3, #0
 801602c:	d128      	bne.n	8016080 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	3304      	adds	r3, #4
 8016032:	4618      	mov	r0, r3
 8016034:	f7fe f848 	bl	80140c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801603c:	693b      	ldr	r3, [r7, #16]
 801603e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016040:	693b      	ldr	r3, [r7, #16]
 8016042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016044:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016050:	4b0f      	ldr	r3, [pc, #60]	; (8016090 <xTaskPriorityDisinherit+0xd8>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	429a      	cmp	r2, r3
 8016056:	d903      	bls.n	8016060 <xTaskPriorityDisinherit+0xa8>
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801605c:	4a0c      	ldr	r2, [pc, #48]	; (8016090 <xTaskPriorityDisinherit+0xd8>)
 801605e:	6013      	str	r3, [r2, #0]
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016064:	4613      	mov	r3, r2
 8016066:	009b      	lsls	r3, r3, #2
 8016068:	4413      	add	r3, r2
 801606a:	009b      	lsls	r3, r3, #2
 801606c:	4a09      	ldr	r2, [pc, #36]	; (8016094 <xTaskPriorityDisinherit+0xdc>)
 801606e:	441a      	add	r2, r3
 8016070:	693b      	ldr	r3, [r7, #16]
 8016072:	3304      	adds	r3, #4
 8016074:	4619      	mov	r1, r3
 8016076:	4610      	mov	r0, r2
 8016078:	f7fd ffc9 	bl	801400e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801607c:	2301      	movs	r3, #1
 801607e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016080:	697b      	ldr	r3, [r7, #20]
	}
 8016082:	4618      	mov	r0, r3
 8016084:	3718      	adds	r7, #24
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}
 801608a:	bf00      	nop
 801608c:	20001838 	.word	0x20001838
 8016090:	20001d14 	.word	0x20001d14
 8016094:	2000183c 	.word	0x2000183c

08016098 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016098:	b580      	push	{r7, lr}
 801609a:	b088      	sub	sp, #32
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
 80160a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80160a6:	2301      	movs	r3, #1
 80160a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d06c      	beq.n	801618a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80160b0:	69bb      	ldr	r3, [r7, #24]
 80160b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d10b      	bne.n	80160d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 80160b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160bc:	b672      	cpsid	i
 80160be:	f383 8811 	msr	BASEPRI, r3
 80160c2:	f3bf 8f6f 	isb	sy
 80160c6:	f3bf 8f4f 	dsb	sy
 80160ca:	b662      	cpsie	i
 80160cc:	60fb      	str	r3, [r7, #12]
 80160ce:	e7fe      	b.n	80160ce <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80160d0:	69bb      	ldr	r3, [r7, #24]
 80160d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160d4:	683a      	ldr	r2, [r7, #0]
 80160d6:	429a      	cmp	r2, r3
 80160d8:	d902      	bls.n	80160e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	61fb      	str	r3, [r7, #28]
 80160de:	e002      	b.n	80160e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80160e0:	69bb      	ldr	r3, [r7, #24]
 80160e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80160e6:	69bb      	ldr	r3, [r7, #24]
 80160e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160ea:	69fa      	ldr	r2, [r7, #28]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d04c      	beq.n	801618a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80160f0:	69bb      	ldr	r3, [r7, #24]
 80160f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160f4:	697a      	ldr	r2, [r7, #20]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d147      	bne.n	801618a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80160fa:	4b26      	ldr	r3, [pc, #152]	; (8016194 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	69ba      	ldr	r2, [r7, #24]
 8016100:	429a      	cmp	r2, r3
 8016102:	d10b      	bne.n	801611c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8016104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016108:	b672      	cpsid	i
 801610a:	f383 8811 	msr	BASEPRI, r3
 801610e:	f3bf 8f6f 	isb	sy
 8016112:	f3bf 8f4f 	dsb	sy
 8016116:	b662      	cpsie	i
 8016118:	60bb      	str	r3, [r7, #8]
 801611a:	e7fe      	b.n	801611a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801611c:	69bb      	ldr	r3, [r7, #24]
 801611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016120:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016122:	69bb      	ldr	r3, [r7, #24]
 8016124:	69fa      	ldr	r2, [r7, #28]
 8016126:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	699b      	ldr	r3, [r3, #24]
 801612c:	2b00      	cmp	r3, #0
 801612e:	db04      	blt.n	801613a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016130:	69fb      	ldr	r3, [r7, #28]
 8016132:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016136:	69bb      	ldr	r3, [r7, #24]
 8016138:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801613a:	69bb      	ldr	r3, [r7, #24]
 801613c:	6959      	ldr	r1, [r3, #20]
 801613e:	693a      	ldr	r2, [r7, #16]
 8016140:	4613      	mov	r3, r2
 8016142:	009b      	lsls	r3, r3, #2
 8016144:	4413      	add	r3, r2
 8016146:	009b      	lsls	r3, r3, #2
 8016148:	4a13      	ldr	r2, [pc, #76]	; (8016198 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801614a:	4413      	add	r3, r2
 801614c:	4299      	cmp	r1, r3
 801614e:	d11c      	bne.n	801618a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016150:	69bb      	ldr	r3, [r7, #24]
 8016152:	3304      	adds	r3, #4
 8016154:	4618      	mov	r0, r3
 8016156:	f7fd ffb7 	bl	80140c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801615a:	69bb      	ldr	r3, [r7, #24]
 801615c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801615e:	4b0f      	ldr	r3, [pc, #60]	; (801619c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	429a      	cmp	r2, r3
 8016164:	d903      	bls.n	801616e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8016166:	69bb      	ldr	r3, [r7, #24]
 8016168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801616a:	4a0c      	ldr	r2, [pc, #48]	; (801619c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801616c:	6013      	str	r3, [r2, #0]
 801616e:	69bb      	ldr	r3, [r7, #24]
 8016170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016172:	4613      	mov	r3, r2
 8016174:	009b      	lsls	r3, r3, #2
 8016176:	4413      	add	r3, r2
 8016178:	009b      	lsls	r3, r3, #2
 801617a:	4a07      	ldr	r2, [pc, #28]	; (8016198 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801617c:	441a      	add	r2, r3
 801617e:	69bb      	ldr	r3, [r7, #24]
 8016180:	3304      	adds	r3, #4
 8016182:	4619      	mov	r1, r3
 8016184:	4610      	mov	r0, r2
 8016186:	f7fd ff42 	bl	801400e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801618a:	bf00      	nop
 801618c:	3720      	adds	r7, #32
 801618e:	46bd      	mov	sp, r7
 8016190:	bd80      	pop	{r7, pc}
 8016192:	bf00      	nop
 8016194:	20001838 	.word	0x20001838
 8016198:	2000183c 	.word	0x2000183c
 801619c:	20001d14 	.word	0x20001d14

080161a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80161a0:	b480      	push	{r7}
 80161a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80161a4:	4b07      	ldr	r3, [pc, #28]	; (80161c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d004      	beq.n	80161b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80161ac:	4b05      	ldr	r3, [pc, #20]	; (80161c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80161b2:	3201      	adds	r2, #1
 80161b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80161b6:	4b03      	ldr	r3, [pc, #12]	; (80161c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80161b8:	681b      	ldr	r3, [r3, #0]
	}
 80161ba:	4618      	mov	r0, r3
 80161bc:	46bd      	mov	sp, r7
 80161be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c2:	4770      	bx	lr
 80161c4:	20001838 	.word	0x20001838

080161c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b084      	sub	sp, #16
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80161d2:	4b21      	ldr	r3, [pc, #132]	; (8016258 <prvAddCurrentTaskToDelayedList+0x90>)
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80161d8:	4b20      	ldr	r3, [pc, #128]	; (801625c <prvAddCurrentTaskToDelayedList+0x94>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	3304      	adds	r3, #4
 80161de:	4618      	mov	r0, r3
 80161e0:	f7fd ff72 	bl	80140c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161ea:	d10a      	bne.n	8016202 <prvAddCurrentTaskToDelayedList+0x3a>
 80161ec:	683b      	ldr	r3, [r7, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d007      	beq.n	8016202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80161f2:	4b1a      	ldr	r3, [pc, #104]	; (801625c <prvAddCurrentTaskToDelayedList+0x94>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	3304      	adds	r3, #4
 80161f8:	4619      	mov	r1, r3
 80161fa:	4819      	ldr	r0, [pc, #100]	; (8016260 <prvAddCurrentTaskToDelayedList+0x98>)
 80161fc:	f7fd ff07 	bl	801400e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016200:	e026      	b.n	8016250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016202:	68fa      	ldr	r2, [r7, #12]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	4413      	add	r3, r2
 8016208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801620a:	4b14      	ldr	r3, [pc, #80]	; (801625c <prvAddCurrentTaskToDelayedList+0x94>)
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	68ba      	ldr	r2, [r7, #8]
 8016210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016212:	68ba      	ldr	r2, [r7, #8]
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	429a      	cmp	r2, r3
 8016218:	d209      	bcs.n	801622e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801621a:	4b12      	ldr	r3, [pc, #72]	; (8016264 <prvAddCurrentTaskToDelayedList+0x9c>)
 801621c:	681a      	ldr	r2, [r3, #0]
 801621e:	4b0f      	ldr	r3, [pc, #60]	; (801625c <prvAddCurrentTaskToDelayedList+0x94>)
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	3304      	adds	r3, #4
 8016224:	4619      	mov	r1, r3
 8016226:	4610      	mov	r0, r2
 8016228:	f7fd ff15 	bl	8014056 <vListInsert>
}
 801622c:	e010      	b.n	8016250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801622e:	4b0e      	ldr	r3, [pc, #56]	; (8016268 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016230:	681a      	ldr	r2, [r3, #0]
 8016232:	4b0a      	ldr	r3, [pc, #40]	; (801625c <prvAddCurrentTaskToDelayedList+0x94>)
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	3304      	adds	r3, #4
 8016238:	4619      	mov	r1, r3
 801623a:	4610      	mov	r0, r2
 801623c:	f7fd ff0b 	bl	8014056 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016240:	4b0a      	ldr	r3, [pc, #40]	; (801626c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	68ba      	ldr	r2, [r7, #8]
 8016246:	429a      	cmp	r2, r3
 8016248:	d202      	bcs.n	8016250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801624a:	4a08      	ldr	r2, [pc, #32]	; (801626c <prvAddCurrentTaskToDelayedList+0xa4>)
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	6013      	str	r3, [r2, #0]
}
 8016250:	bf00      	nop
 8016252:	3710      	adds	r7, #16
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}
 8016258:	20001d10 	.word	0x20001d10
 801625c:	20001838 	.word	0x20001838
 8016260:	20001cf8 	.word	0x20001cf8
 8016264:	20001cc8 	.word	0x20001cc8
 8016268:	20001cc4 	.word	0x20001cc4
 801626c:	20001d2c 	.word	0x20001d2c

08016270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b08a      	sub	sp, #40	; 0x28
 8016274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016276:	2300      	movs	r3, #0
 8016278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801627a:	f000 fb0d 	bl	8016898 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801627e:	4b1d      	ldr	r3, [pc, #116]	; (80162f4 <xTimerCreateTimerTask+0x84>)
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d021      	beq.n	80162ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016286:	2300      	movs	r3, #0
 8016288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801628a:	2300      	movs	r3, #0
 801628c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801628e:	1d3a      	adds	r2, r7, #4
 8016290:	f107 0108 	add.w	r1, r7, #8
 8016294:	f107 030c 	add.w	r3, r7, #12
 8016298:	4618      	mov	r0, r3
 801629a:	f7fd fe71 	bl	8013f80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801629e:	6879      	ldr	r1, [r7, #4]
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	68fa      	ldr	r2, [r7, #12]
 80162a4:	9202      	str	r2, [sp, #8]
 80162a6:	9301      	str	r3, [sp, #4]
 80162a8:	2302      	movs	r3, #2
 80162aa:	9300      	str	r3, [sp, #0]
 80162ac:	2300      	movs	r3, #0
 80162ae:	460a      	mov	r2, r1
 80162b0:	4911      	ldr	r1, [pc, #68]	; (80162f8 <xTimerCreateTimerTask+0x88>)
 80162b2:	4812      	ldr	r0, [pc, #72]	; (80162fc <xTimerCreateTimerTask+0x8c>)
 80162b4:	f7fe ff00 	bl	80150b8 <xTaskCreateStatic>
 80162b8:	4602      	mov	r2, r0
 80162ba:	4b11      	ldr	r3, [pc, #68]	; (8016300 <xTimerCreateTimerTask+0x90>)
 80162bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80162be:	4b10      	ldr	r3, [pc, #64]	; (8016300 <xTimerCreateTimerTask+0x90>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d001      	beq.n	80162ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80162c6:	2301      	movs	r3, #1
 80162c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d10b      	bne.n	80162e8 <xTimerCreateTimerTask+0x78>
 80162d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d4:	b672      	cpsid	i
 80162d6:	f383 8811 	msr	BASEPRI, r3
 80162da:	f3bf 8f6f 	isb	sy
 80162de:	f3bf 8f4f 	dsb	sy
 80162e2:	b662      	cpsie	i
 80162e4:	613b      	str	r3, [r7, #16]
 80162e6:	e7fe      	b.n	80162e6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80162e8:	697b      	ldr	r3, [r7, #20]
}
 80162ea:	4618      	mov	r0, r3
 80162ec:	3718      	adds	r7, #24
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}
 80162f2:	bf00      	nop
 80162f4:	20001d68 	.word	0x20001d68
 80162f8:	0801850c 	.word	0x0801850c
 80162fc:	0801643d 	.word	0x0801643d
 8016300:	20001d6c 	.word	0x20001d6c

08016304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b08a      	sub	sp, #40	; 0x28
 8016308:	af00      	add	r7, sp, #0
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
 8016310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016312:	2300      	movs	r3, #0
 8016314:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d10b      	bne.n	8016334 <xTimerGenericCommand+0x30>
 801631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016320:	b672      	cpsid	i
 8016322:	f383 8811 	msr	BASEPRI, r3
 8016326:	f3bf 8f6f 	isb	sy
 801632a:	f3bf 8f4f 	dsb	sy
 801632e:	b662      	cpsie	i
 8016330:	623b      	str	r3, [r7, #32]
 8016332:	e7fe      	b.n	8016332 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016334:	4b19      	ldr	r3, [pc, #100]	; (801639c <xTimerGenericCommand+0x98>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d02a      	beq.n	8016392 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	2b05      	cmp	r3, #5
 801634c:	dc18      	bgt.n	8016380 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801634e:	f7ff fdad 	bl	8015eac <xTaskGetSchedulerState>
 8016352:	4603      	mov	r3, r0
 8016354:	2b02      	cmp	r3, #2
 8016356:	d109      	bne.n	801636c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016358:	4b10      	ldr	r3, [pc, #64]	; (801639c <xTimerGenericCommand+0x98>)
 801635a:	6818      	ldr	r0, [r3, #0]
 801635c:	f107 0110 	add.w	r1, r7, #16
 8016360:	2300      	movs	r3, #0
 8016362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016364:	f7fe f8e4 	bl	8014530 <xQueueGenericSend>
 8016368:	6278      	str	r0, [r7, #36]	; 0x24
 801636a:	e012      	b.n	8016392 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801636c:	4b0b      	ldr	r3, [pc, #44]	; (801639c <xTimerGenericCommand+0x98>)
 801636e:	6818      	ldr	r0, [r3, #0]
 8016370:	f107 0110 	add.w	r1, r7, #16
 8016374:	2300      	movs	r3, #0
 8016376:	2200      	movs	r2, #0
 8016378:	f7fe f8da 	bl	8014530 <xQueueGenericSend>
 801637c:	6278      	str	r0, [r7, #36]	; 0x24
 801637e:	e008      	b.n	8016392 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016380:	4b06      	ldr	r3, [pc, #24]	; (801639c <xTimerGenericCommand+0x98>)
 8016382:	6818      	ldr	r0, [r3, #0]
 8016384:	f107 0110 	add.w	r1, r7, #16
 8016388:	2300      	movs	r3, #0
 801638a:	683a      	ldr	r2, [r7, #0]
 801638c:	f7fe f9da 	bl	8014744 <xQueueGenericSendFromISR>
 8016390:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016394:	4618      	mov	r0, r3
 8016396:	3728      	adds	r7, #40	; 0x28
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}
 801639c:	20001d68 	.word	0x20001d68

080163a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b088      	sub	sp, #32
 80163a4:	af02      	add	r7, sp, #8
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163aa:	4b23      	ldr	r3, [pc, #140]	; (8016438 <prvProcessExpiredTimer+0x98>)
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	68db      	ldr	r3, [r3, #12]
 80163b0:	68db      	ldr	r3, [r3, #12]
 80163b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80163b4:	697b      	ldr	r3, [r7, #20]
 80163b6:	3304      	adds	r3, #4
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7fd fe85 	bl	80140c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80163be:	697b      	ldr	r3, [r7, #20]
 80163c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80163c4:	f003 0304 	and.w	r3, r3, #4
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d023      	beq.n	8016414 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80163cc:	697b      	ldr	r3, [r7, #20]
 80163ce:	699a      	ldr	r2, [r3, #24]
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	18d1      	adds	r1, r2, r3
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	683a      	ldr	r2, [r7, #0]
 80163d8:	6978      	ldr	r0, [r7, #20]
 80163da:	f000 f8d3 	bl	8016584 <prvInsertTimerInActiveList>
 80163de:	4603      	mov	r3, r0
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d020      	beq.n	8016426 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80163e4:	2300      	movs	r3, #0
 80163e6:	9300      	str	r3, [sp, #0]
 80163e8:	2300      	movs	r3, #0
 80163ea:	687a      	ldr	r2, [r7, #4]
 80163ec:	2100      	movs	r1, #0
 80163ee:	6978      	ldr	r0, [r7, #20]
 80163f0:	f7ff ff88 	bl	8016304 <xTimerGenericCommand>
 80163f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80163f6:	693b      	ldr	r3, [r7, #16]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d114      	bne.n	8016426 <prvProcessExpiredTimer+0x86>
 80163fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016400:	b672      	cpsid	i
 8016402:	f383 8811 	msr	BASEPRI, r3
 8016406:	f3bf 8f6f 	isb	sy
 801640a:	f3bf 8f4f 	dsb	sy
 801640e:	b662      	cpsie	i
 8016410:	60fb      	str	r3, [r7, #12]
 8016412:	e7fe      	b.n	8016412 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016414:	697b      	ldr	r3, [r7, #20]
 8016416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801641a:	f023 0301 	bic.w	r3, r3, #1
 801641e:	b2da      	uxtb	r2, r3
 8016420:	697b      	ldr	r3, [r7, #20]
 8016422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016426:	697b      	ldr	r3, [r7, #20]
 8016428:	6a1b      	ldr	r3, [r3, #32]
 801642a:	6978      	ldr	r0, [r7, #20]
 801642c:	4798      	blx	r3
}
 801642e:	bf00      	nop
 8016430:	3718      	adds	r7, #24
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}
 8016436:	bf00      	nop
 8016438:	20001d60 	.word	0x20001d60

0801643c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b084      	sub	sp, #16
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016444:	f107 0308 	add.w	r3, r7, #8
 8016448:	4618      	mov	r0, r3
 801644a:	f000 f857 	bl	80164fc <prvGetNextExpireTime>
 801644e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	4619      	mov	r1, r3
 8016454:	68f8      	ldr	r0, [r7, #12]
 8016456:	f000 f803 	bl	8016460 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801645a:	f000 f8d5 	bl	8016608 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801645e:	e7f1      	b.n	8016444 <prvTimerTask+0x8>

08016460 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801646a:	f7ff f8f7 	bl	801565c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801646e:	f107 0308 	add.w	r3, r7, #8
 8016472:	4618      	mov	r0, r3
 8016474:	f000 f866 	bl	8016544 <prvSampleTimeNow>
 8016478:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801647a:	68bb      	ldr	r3, [r7, #8]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d130      	bne.n	80164e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016480:	683b      	ldr	r3, [r7, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d10a      	bne.n	801649c <prvProcessTimerOrBlockTask+0x3c>
 8016486:	687a      	ldr	r2, [r7, #4]
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	429a      	cmp	r2, r3
 801648c:	d806      	bhi.n	801649c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801648e:	f7ff f8f3 	bl	8015678 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016492:	68f9      	ldr	r1, [r7, #12]
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f7ff ff83 	bl	80163a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801649a:	e024      	b.n	80164e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d008      	beq.n	80164b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80164a2:	4b13      	ldr	r3, [pc, #76]	; (80164f0 <prvProcessTimerOrBlockTask+0x90>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d101      	bne.n	80164b0 <prvProcessTimerOrBlockTask+0x50>
 80164ac:	2301      	movs	r3, #1
 80164ae:	e000      	b.n	80164b2 <prvProcessTimerOrBlockTask+0x52>
 80164b0:	2300      	movs	r3, #0
 80164b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80164b4:	4b0f      	ldr	r3, [pc, #60]	; (80164f4 <prvProcessTimerOrBlockTask+0x94>)
 80164b6:	6818      	ldr	r0, [r3, #0]
 80164b8:	687a      	ldr	r2, [r7, #4]
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	1ad3      	subs	r3, r2, r3
 80164be:	683a      	ldr	r2, [r7, #0]
 80164c0:	4619      	mov	r1, r3
 80164c2:	f7fe fdc5 	bl	8015050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80164c6:	f7ff f8d7 	bl	8015678 <xTaskResumeAll>
 80164ca:	4603      	mov	r3, r0
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d10a      	bne.n	80164e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80164d0:	4b09      	ldr	r3, [pc, #36]	; (80164f8 <prvProcessTimerOrBlockTask+0x98>)
 80164d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164d6:	601a      	str	r2, [r3, #0]
 80164d8:	f3bf 8f4f 	dsb	sy
 80164dc:	f3bf 8f6f 	isb	sy
}
 80164e0:	e001      	b.n	80164e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80164e2:	f7ff f8c9 	bl	8015678 <xTaskResumeAll>
}
 80164e6:	bf00      	nop
 80164e8:	3710      	adds	r7, #16
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}
 80164ee:	bf00      	nop
 80164f0:	20001d64 	.word	0x20001d64
 80164f4:	20001d68 	.word	0x20001d68
 80164f8:	e000ed04 	.word	0xe000ed04

080164fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80164fc:	b480      	push	{r7}
 80164fe:	b085      	sub	sp, #20
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016504:	4b0e      	ldr	r3, [pc, #56]	; (8016540 <prvGetNextExpireTime+0x44>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d101      	bne.n	8016512 <prvGetNextExpireTime+0x16>
 801650e:	2201      	movs	r2, #1
 8016510:	e000      	b.n	8016514 <prvGetNextExpireTime+0x18>
 8016512:	2200      	movs	r2, #0
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d105      	bne.n	801652c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016520:	4b07      	ldr	r3, [pc, #28]	; (8016540 <prvGetNextExpireTime+0x44>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	68db      	ldr	r3, [r3, #12]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	60fb      	str	r3, [r7, #12]
 801652a:	e001      	b.n	8016530 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801652c:	2300      	movs	r3, #0
 801652e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016530:	68fb      	ldr	r3, [r7, #12]
}
 8016532:	4618      	mov	r0, r3
 8016534:	3714      	adds	r7, #20
 8016536:	46bd      	mov	sp, r7
 8016538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653c:	4770      	bx	lr
 801653e:	bf00      	nop
 8016540:	20001d60 	.word	0x20001d60

08016544 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b084      	sub	sp, #16
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801654c:	f7ff f932 	bl	80157b4 <xTaskGetTickCount>
 8016550:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016552:	4b0b      	ldr	r3, [pc, #44]	; (8016580 <prvSampleTimeNow+0x3c>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	68fa      	ldr	r2, [r7, #12]
 8016558:	429a      	cmp	r2, r3
 801655a:	d205      	bcs.n	8016568 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801655c:	f000 f936 	bl	80167cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2201      	movs	r2, #1
 8016564:	601a      	str	r2, [r3, #0]
 8016566:	e002      	b.n	801656e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2200      	movs	r2, #0
 801656c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801656e:	4a04      	ldr	r2, [pc, #16]	; (8016580 <prvSampleTimeNow+0x3c>)
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016574:	68fb      	ldr	r3, [r7, #12]
}
 8016576:	4618      	mov	r0, r3
 8016578:	3710      	adds	r7, #16
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}
 801657e:	bf00      	nop
 8016580:	20001d70 	.word	0x20001d70

08016584 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b086      	sub	sp, #24
 8016588:	af00      	add	r7, sp, #0
 801658a:	60f8      	str	r0, [r7, #12]
 801658c:	60b9      	str	r1, [r7, #8]
 801658e:	607a      	str	r2, [r7, #4]
 8016590:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016592:	2300      	movs	r3, #0
 8016594:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	68ba      	ldr	r2, [r7, #8]
 801659a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	68fa      	ldr	r2, [r7, #12]
 80165a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80165a2:	68ba      	ldr	r2, [r7, #8]
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	d812      	bhi.n	80165d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165aa:	687a      	ldr	r2, [r7, #4]
 80165ac:	683b      	ldr	r3, [r7, #0]
 80165ae:	1ad2      	subs	r2, r2, r3
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	699b      	ldr	r3, [r3, #24]
 80165b4:	429a      	cmp	r2, r3
 80165b6:	d302      	bcc.n	80165be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80165b8:	2301      	movs	r3, #1
 80165ba:	617b      	str	r3, [r7, #20]
 80165bc:	e01b      	b.n	80165f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80165be:	4b10      	ldr	r3, [pc, #64]	; (8016600 <prvInsertTimerInActiveList+0x7c>)
 80165c0:	681a      	ldr	r2, [r3, #0]
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	3304      	adds	r3, #4
 80165c6:	4619      	mov	r1, r3
 80165c8:	4610      	mov	r0, r2
 80165ca:	f7fd fd44 	bl	8014056 <vListInsert>
 80165ce:	e012      	b.n	80165f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80165d0:	687a      	ldr	r2, [r7, #4]
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	429a      	cmp	r2, r3
 80165d6:	d206      	bcs.n	80165e6 <prvInsertTimerInActiveList+0x62>
 80165d8:	68ba      	ldr	r2, [r7, #8]
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d302      	bcc.n	80165e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80165e0:	2301      	movs	r3, #1
 80165e2:	617b      	str	r3, [r7, #20]
 80165e4:	e007      	b.n	80165f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80165e6:	4b07      	ldr	r3, [pc, #28]	; (8016604 <prvInsertTimerInActiveList+0x80>)
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	3304      	adds	r3, #4
 80165ee:	4619      	mov	r1, r3
 80165f0:	4610      	mov	r0, r2
 80165f2:	f7fd fd30 	bl	8014056 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80165f6:	697b      	ldr	r3, [r7, #20]
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3718      	adds	r7, #24
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}
 8016600:	20001d64 	.word	0x20001d64
 8016604:	20001d60 	.word	0x20001d60

08016608 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b08e      	sub	sp, #56	; 0x38
 801660c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801660e:	e0cc      	b.n	80167aa <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2b00      	cmp	r3, #0
 8016614:	da19      	bge.n	801664a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016616:	1d3b      	adds	r3, r7, #4
 8016618:	3304      	adds	r3, #4
 801661a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661e:	2b00      	cmp	r3, #0
 8016620:	d10b      	bne.n	801663a <prvProcessReceivedCommands+0x32>
 8016622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016626:	b672      	cpsid	i
 8016628:	f383 8811 	msr	BASEPRI, r3
 801662c:	f3bf 8f6f 	isb	sy
 8016630:	f3bf 8f4f 	dsb	sy
 8016634:	b662      	cpsie	i
 8016636:	61fb      	str	r3, [r7, #28]
 8016638:	e7fe      	b.n	8016638 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016640:	6850      	ldr	r0, [r2, #4]
 8016642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016644:	6892      	ldr	r2, [r2, #8]
 8016646:	4611      	mov	r1, r2
 8016648:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	2b00      	cmp	r3, #0
 801664e:	f2c0 80ab 	blt.w	80167a8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016658:	695b      	ldr	r3, [r3, #20]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d004      	beq.n	8016668 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016660:	3304      	adds	r3, #4
 8016662:	4618      	mov	r0, r3
 8016664:	f7fd fd30 	bl	80140c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016668:	463b      	mov	r3, r7
 801666a:	4618      	mov	r0, r3
 801666c:	f7ff ff6a 	bl	8016544 <prvSampleTimeNow>
 8016670:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	2b09      	cmp	r3, #9
 8016676:	f200 8098 	bhi.w	80167aa <prvProcessReceivedCommands+0x1a2>
 801667a:	a201      	add	r2, pc, #4	; (adr r2, 8016680 <prvProcessReceivedCommands+0x78>)
 801667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016680:	080166a9 	.word	0x080166a9
 8016684:	080166a9 	.word	0x080166a9
 8016688:	080166a9 	.word	0x080166a9
 801668c:	0801671f 	.word	0x0801671f
 8016690:	08016733 	.word	0x08016733
 8016694:	0801677f 	.word	0x0801677f
 8016698:	080166a9 	.word	0x080166a9
 801669c:	080166a9 	.word	0x080166a9
 80166a0:	0801671f 	.word	0x0801671f
 80166a4:	08016733 	.word	0x08016733
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80166a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80166ae:	f043 0301 	orr.w	r3, r3, #1
 80166b2:	b2da      	uxtb	r2, r3
 80166b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80166ba:	68ba      	ldr	r2, [r7, #8]
 80166bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166be:	699b      	ldr	r3, [r3, #24]
 80166c0:	18d1      	adds	r1, r2, r3
 80166c2:	68bb      	ldr	r3, [r7, #8]
 80166c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166c8:	f7ff ff5c 	bl	8016584 <prvInsertTimerInActiveList>
 80166cc:	4603      	mov	r3, r0
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d06b      	beq.n	80167aa <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80166d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166d4:	6a1b      	ldr	r3, [r3, #32]
 80166d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80166da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80166e0:	f003 0304 	and.w	r3, r3, #4
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d060      	beq.n	80167aa <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80166e8:	68ba      	ldr	r2, [r7, #8]
 80166ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ec:	699b      	ldr	r3, [r3, #24]
 80166ee:	441a      	add	r2, r3
 80166f0:	2300      	movs	r3, #0
 80166f2:	9300      	str	r3, [sp, #0]
 80166f4:	2300      	movs	r3, #0
 80166f6:	2100      	movs	r1, #0
 80166f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166fa:	f7ff fe03 	bl	8016304 <xTimerGenericCommand>
 80166fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016700:	6a3b      	ldr	r3, [r7, #32]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d151      	bne.n	80167aa <prvProcessReceivedCommands+0x1a2>
 8016706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801670a:	b672      	cpsid	i
 801670c:	f383 8811 	msr	BASEPRI, r3
 8016710:	f3bf 8f6f 	isb	sy
 8016714:	f3bf 8f4f 	dsb	sy
 8016718:	b662      	cpsie	i
 801671a:	61bb      	str	r3, [r7, #24]
 801671c:	e7fe      	b.n	801671c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016724:	f023 0301 	bic.w	r3, r3, #1
 8016728:	b2da      	uxtb	r2, r3
 801672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801672c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8016730:	e03b      	b.n	80167aa <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016738:	f043 0301 	orr.w	r3, r3, #1
 801673c:	b2da      	uxtb	r2, r3
 801673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016740:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016744:	68ba      	ldr	r2, [r7, #8]
 8016746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016748:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801674c:	699b      	ldr	r3, [r3, #24]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d10b      	bne.n	801676a <prvProcessReceivedCommands+0x162>
 8016752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016756:	b672      	cpsid	i
 8016758:	f383 8811 	msr	BASEPRI, r3
 801675c:	f3bf 8f6f 	isb	sy
 8016760:	f3bf 8f4f 	dsb	sy
 8016764:	b662      	cpsie	i
 8016766:	617b      	str	r3, [r7, #20]
 8016768:	e7fe      	b.n	8016768 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801676c:	699a      	ldr	r2, [r3, #24]
 801676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016770:	18d1      	adds	r1, r2, r3
 8016772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016778:	f7ff ff04 	bl	8016584 <prvInsertTimerInActiveList>
					break;
 801677c:	e015      	b.n	80167aa <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016784:	f003 0302 	and.w	r3, r3, #2
 8016788:	2b00      	cmp	r3, #0
 801678a:	d103      	bne.n	8016794 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801678c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801678e:	f000 fbb9 	bl	8016f04 <vPortFree>
 8016792:	e00a      	b.n	80167aa <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801679a:	f023 0301 	bic.w	r3, r3, #1
 801679e:	b2da      	uxtb	r2, r3
 80167a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80167a6:	e000      	b.n	80167aa <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80167a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80167aa:	4b07      	ldr	r3, [pc, #28]	; (80167c8 <prvProcessReceivedCommands+0x1c0>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	1d39      	adds	r1, r7, #4
 80167b0:	2200      	movs	r2, #0
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7fe f86a 	bl	801488c <xQueueReceive>
 80167b8:	4603      	mov	r3, r0
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	f47f af28 	bne.w	8016610 <prvProcessReceivedCommands+0x8>
	}
}
 80167c0:	bf00      	nop
 80167c2:	3730      	adds	r7, #48	; 0x30
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}
 80167c8:	20001d68 	.word	0x20001d68

080167cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b088      	sub	sp, #32
 80167d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80167d2:	e049      	b.n	8016868 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80167d4:	4b2e      	ldr	r3, [pc, #184]	; (8016890 <prvSwitchTimerLists+0xc4>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	68db      	ldr	r3, [r3, #12]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167de:	4b2c      	ldr	r3, [pc, #176]	; (8016890 <prvSwitchTimerLists+0xc4>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	68db      	ldr	r3, [r3, #12]
 80167e4:	68db      	ldr	r3, [r3, #12]
 80167e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	3304      	adds	r3, #4
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7fd fc6b 	bl	80140c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	6a1b      	ldr	r3, [r3, #32]
 80167f6:	68f8      	ldr	r0, [r7, #12]
 80167f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016800:	f003 0304 	and.w	r3, r3, #4
 8016804:	2b00      	cmp	r3, #0
 8016806:	d02f      	beq.n	8016868 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	699b      	ldr	r3, [r3, #24]
 801680c:	693a      	ldr	r2, [r7, #16]
 801680e:	4413      	add	r3, r2
 8016810:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016812:	68ba      	ldr	r2, [r7, #8]
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	429a      	cmp	r2, r3
 8016818:	d90e      	bls.n	8016838 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	68ba      	ldr	r2, [r7, #8]
 801681e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	68fa      	ldr	r2, [r7, #12]
 8016824:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016826:	4b1a      	ldr	r3, [pc, #104]	; (8016890 <prvSwitchTimerLists+0xc4>)
 8016828:	681a      	ldr	r2, [r3, #0]
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	3304      	adds	r3, #4
 801682e:	4619      	mov	r1, r3
 8016830:	4610      	mov	r0, r2
 8016832:	f7fd fc10 	bl	8014056 <vListInsert>
 8016836:	e017      	b.n	8016868 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016838:	2300      	movs	r3, #0
 801683a:	9300      	str	r3, [sp, #0]
 801683c:	2300      	movs	r3, #0
 801683e:	693a      	ldr	r2, [r7, #16]
 8016840:	2100      	movs	r1, #0
 8016842:	68f8      	ldr	r0, [r7, #12]
 8016844:	f7ff fd5e 	bl	8016304 <xTimerGenericCommand>
 8016848:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d10b      	bne.n	8016868 <prvSwitchTimerLists+0x9c>
 8016850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016854:	b672      	cpsid	i
 8016856:	f383 8811 	msr	BASEPRI, r3
 801685a:	f3bf 8f6f 	isb	sy
 801685e:	f3bf 8f4f 	dsb	sy
 8016862:	b662      	cpsie	i
 8016864:	603b      	str	r3, [r7, #0]
 8016866:	e7fe      	b.n	8016866 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016868:	4b09      	ldr	r3, [pc, #36]	; (8016890 <prvSwitchTimerLists+0xc4>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d1b0      	bne.n	80167d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016872:	4b07      	ldr	r3, [pc, #28]	; (8016890 <prvSwitchTimerLists+0xc4>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016878:	4b06      	ldr	r3, [pc, #24]	; (8016894 <prvSwitchTimerLists+0xc8>)
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	4a04      	ldr	r2, [pc, #16]	; (8016890 <prvSwitchTimerLists+0xc4>)
 801687e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016880:	4a04      	ldr	r2, [pc, #16]	; (8016894 <prvSwitchTimerLists+0xc8>)
 8016882:	697b      	ldr	r3, [r7, #20]
 8016884:	6013      	str	r3, [r2, #0]
}
 8016886:	bf00      	nop
 8016888:	3718      	adds	r7, #24
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
 801688e:	bf00      	nop
 8016890:	20001d60 	.word	0x20001d60
 8016894:	20001d64 	.word	0x20001d64

08016898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b082      	sub	sp, #8
 801689c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801689e:	f000 f943 	bl	8016b28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80168a2:	4b15      	ldr	r3, [pc, #84]	; (80168f8 <prvCheckForValidListAndQueue+0x60>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d120      	bne.n	80168ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80168aa:	4814      	ldr	r0, [pc, #80]	; (80168fc <prvCheckForValidListAndQueue+0x64>)
 80168ac:	f7fd fb82 	bl	8013fb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80168b0:	4813      	ldr	r0, [pc, #76]	; (8016900 <prvCheckForValidListAndQueue+0x68>)
 80168b2:	f7fd fb7f 	bl	8013fb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80168b6:	4b13      	ldr	r3, [pc, #76]	; (8016904 <prvCheckForValidListAndQueue+0x6c>)
 80168b8:	4a10      	ldr	r2, [pc, #64]	; (80168fc <prvCheckForValidListAndQueue+0x64>)
 80168ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80168bc:	4b12      	ldr	r3, [pc, #72]	; (8016908 <prvCheckForValidListAndQueue+0x70>)
 80168be:	4a10      	ldr	r2, [pc, #64]	; (8016900 <prvCheckForValidListAndQueue+0x68>)
 80168c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80168c2:	2300      	movs	r3, #0
 80168c4:	9300      	str	r3, [sp, #0]
 80168c6:	4b11      	ldr	r3, [pc, #68]	; (801690c <prvCheckForValidListAndQueue+0x74>)
 80168c8:	4a11      	ldr	r2, [pc, #68]	; (8016910 <prvCheckForValidListAndQueue+0x78>)
 80168ca:	2110      	movs	r1, #16
 80168cc:	200a      	movs	r0, #10
 80168ce:	f7fd fc8f 	bl	80141f0 <xQueueGenericCreateStatic>
 80168d2:	4602      	mov	r2, r0
 80168d4:	4b08      	ldr	r3, [pc, #32]	; (80168f8 <prvCheckForValidListAndQueue+0x60>)
 80168d6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80168d8:	4b07      	ldr	r3, [pc, #28]	; (80168f8 <prvCheckForValidListAndQueue+0x60>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d005      	beq.n	80168ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80168e0:	4b05      	ldr	r3, [pc, #20]	; (80168f8 <prvCheckForValidListAndQueue+0x60>)
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	490b      	ldr	r1, [pc, #44]	; (8016914 <prvCheckForValidListAndQueue+0x7c>)
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7fe fb86 	bl	8014ff8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80168ec:	f000 f94e 	bl	8016b8c <vPortExitCritical>
}
 80168f0:	bf00      	nop
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}
 80168f6:	bf00      	nop
 80168f8:	20001d68 	.word	0x20001d68
 80168fc:	20001d38 	.word	0x20001d38
 8016900:	20001d4c 	.word	0x20001d4c
 8016904:	20001d60 	.word	0x20001d60
 8016908:	20001d64 	.word	0x20001d64
 801690c:	20001e14 	.word	0x20001e14
 8016910:	20001d74 	.word	0x20001d74
 8016914:	08018514 	.word	0x08018514

08016918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016918:	b480      	push	{r7}
 801691a:	b085      	sub	sp, #20
 801691c:	af00      	add	r7, sp, #0
 801691e:	60f8      	str	r0, [r7, #12]
 8016920:	60b9      	str	r1, [r7, #8]
 8016922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	3b04      	subs	r3, #4
 8016928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	3b04      	subs	r3, #4
 8016936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	f023 0201 	bic.w	r2, r3, #1
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	3b04      	subs	r3, #4
 8016946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016948:	4a0c      	ldr	r2, [pc, #48]	; (801697c <pxPortInitialiseStack+0x64>)
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	3b14      	subs	r3, #20
 8016952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016954:	687a      	ldr	r2, [r7, #4]
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	3b04      	subs	r3, #4
 801695e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	f06f 0202 	mvn.w	r2, #2
 8016966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	3b20      	subs	r3, #32
 801696c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801696e:	68fb      	ldr	r3, [r7, #12]
}
 8016970:	4618      	mov	r0, r3
 8016972:	3714      	adds	r7, #20
 8016974:	46bd      	mov	sp, r7
 8016976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697a:	4770      	bx	lr
 801697c:	08016981 	.word	0x08016981

08016980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016980:	b480      	push	{r7}
 8016982:	b085      	sub	sp, #20
 8016984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016986:	2300      	movs	r3, #0
 8016988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801698a:	4b13      	ldr	r3, [pc, #76]	; (80169d8 <prvTaskExitError+0x58>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016992:	d00b      	beq.n	80169ac <prvTaskExitError+0x2c>
 8016994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016998:	b672      	cpsid	i
 801699a:	f383 8811 	msr	BASEPRI, r3
 801699e:	f3bf 8f6f 	isb	sy
 80169a2:	f3bf 8f4f 	dsb	sy
 80169a6:	b662      	cpsie	i
 80169a8:	60fb      	str	r3, [r7, #12]
 80169aa:	e7fe      	b.n	80169aa <prvTaskExitError+0x2a>
 80169ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169b0:	b672      	cpsid	i
 80169b2:	f383 8811 	msr	BASEPRI, r3
 80169b6:	f3bf 8f6f 	isb	sy
 80169ba:	f3bf 8f4f 	dsb	sy
 80169be:	b662      	cpsie	i
 80169c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80169c2:	bf00      	nop
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d0fc      	beq.n	80169c4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80169ca:	bf00      	nop
 80169cc:	3714      	adds	r7, #20
 80169ce:	46bd      	mov	sp, r7
 80169d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d4:	4770      	bx	lr
 80169d6:	bf00      	nop
 80169d8:	20000094 	.word	0x20000094
 80169dc:	00000000 	.word	0x00000000

080169e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80169e0:	4b07      	ldr	r3, [pc, #28]	; (8016a00 <pxCurrentTCBConst2>)
 80169e2:	6819      	ldr	r1, [r3, #0]
 80169e4:	6808      	ldr	r0, [r1, #0]
 80169e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169ea:	f380 8809 	msr	PSP, r0
 80169ee:	f3bf 8f6f 	isb	sy
 80169f2:	f04f 0000 	mov.w	r0, #0
 80169f6:	f380 8811 	msr	BASEPRI, r0
 80169fa:	4770      	bx	lr
 80169fc:	f3af 8000 	nop.w

08016a00 <pxCurrentTCBConst2>:
 8016a00:	20001838 	.word	0x20001838
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016a04:	bf00      	nop
 8016a06:	bf00      	nop

08016a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016a08:	4808      	ldr	r0, [pc, #32]	; (8016a2c <prvPortStartFirstTask+0x24>)
 8016a0a:	6800      	ldr	r0, [r0, #0]
 8016a0c:	6800      	ldr	r0, [r0, #0]
 8016a0e:	f380 8808 	msr	MSP, r0
 8016a12:	f04f 0000 	mov.w	r0, #0
 8016a16:	f380 8814 	msr	CONTROL, r0
 8016a1a:	b662      	cpsie	i
 8016a1c:	b661      	cpsie	f
 8016a1e:	f3bf 8f4f 	dsb	sy
 8016a22:	f3bf 8f6f 	isb	sy
 8016a26:	df00      	svc	0
 8016a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016a2a:	bf00      	nop
 8016a2c:	e000ed08 	.word	0xe000ed08

08016a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b084      	sub	sp, #16
 8016a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016a36:	4b36      	ldr	r3, [pc, #216]	; (8016b10 <xPortStartScheduler+0xe0>)
 8016a38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	781b      	ldrb	r3, [r3, #0]
 8016a3e:	b2db      	uxtb	r3, r3
 8016a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	22ff      	movs	r2, #255	; 0xff
 8016a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	781b      	ldrb	r3, [r3, #0]
 8016a4c:	b2db      	uxtb	r3, r3
 8016a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016a50:	78fb      	ldrb	r3, [r7, #3]
 8016a52:	b2db      	uxtb	r3, r3
 8016a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016a58:	b2da      	uxtb	r2, r3
 8016a5a:	4b2e      	ldr	r3, [pc, #184]	; (8016b14 <xPortStartScheduler+0xe4>)
 8016a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016a5e:	4b2e      	ldr	r3, [pc, #184]	; (8016b18 <xPortStartScheduler+0xe8>)
 8016a60:	2207      	movs	r2, #7
 8016a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016a64:	e009      	b.n	8016a7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016a66:	4b2c      	ldr	r3, [pc, #176]	; (8016b18 <xPortStartScheduler+0xe8>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	3b01      	subs	r3, #1
 8016a6c:	4a2a      	ldr	r2, [pc, #168]	; (8016b18 <xPortStartScheduler+0xe8>)
 8016a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016a70:	78fb      	ldrb	r3, [r7, #3]
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	005b      	lsls	r3, r3, #1
 8016a76:	b2db      	uxtb	r3, r3
 8016a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016a7a:	78fb      	ldrb	r3, [r7, #3]
 8016a7c:	b2db      	uxtb	r3, r3
 8016a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016a82:	2b80      	cmp	r3, #128	; 0x80
 8016a84:	d0ef      	beq.n	8016a66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016a86:	4b24      	ldr	r3, [pc, #144]	; (8016b18 <xPortStartScheduler+0xe8>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	f1c3 0307 	rsb	r3, r3, #7
 8016a8e:	2b04      	cmp	r3, #4
 8016a90:	d00b      	beq.n	8016aaa <xPortStartScheduler+0x7a>
 8016a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a96:	b672      	cpsid	i
 8016a98:	f383 8811 	msr	BASEPRI, r3
 8016a9c:	f3bf 8f6f 	isb	sy
 8016aa0:	f3bf 8f4f 	dsb	sy
 8016aa4:	b662      	cpsie	i
 8016aa6:	60bb      	str	r3, [r7, #8]
 8016aa8:	e7fe      	b.n	8016aa8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016aaa:	4b1b      	ldr	r3, [pc, #108]	; (8016b18 <xPortStartScheduler+0xe8>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	021b      	lsls	r3, r3, #8
 8016ab0:	4a19      	ldr	r2, [pc, #100]	; (8016b18 <xPortStartScheduler+0xe8>)
 8016ab2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016ab4:	4b18      	ldr	r3, [pc, #96]	; (8016b18 <xPortStartScheduler+0xe8>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016abc:	4a16      	ldr	r2, [pc, #88]	; (8016b18 <xPortStartScheduler+0xe8>)
 8016abe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	b2da      	uxtb	r2, r3
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016ac8:	4b14      	ldr	r3, [pc, #80]	; (8016b1c <xPortStartScheduler+0xec>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	4a13      	ldr	r2, [pc, #76]	; (8016b1c <xPortStartScheduler+0xec>)
 8016ace:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016ad2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016ad4:	4b11      	ldr	r3, [pc, #68]	; (8016b1c <xPortStartScheduler+0xec>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	4a10      	ldr	r2, [pc, #64]	; (8016b1c <xPortStartScheduler+0xec>)
 8016ada:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016ade:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016ae0:	f000 f8d4 	bl	8016c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016ae4:	4b0e      	ldr	r3, [pc, #56]	; (8016b20 <xPortStartScheduler+0xf0>)
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016aea:	f000 f8f3 	bl	8016cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016aee:	4b0d      	ldr	r3, [pc, #52]	; (8016b24 <xPortStartScheduler+0xf4>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	4a0c      	ldr	r2, [pc, #48]	; (8016b24 <xPortStartScheduler+0xf4>)
 8016af4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016af8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016afa:	f7ff ff85 	bl	8016a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016afe:	f7fe ff23 	bl	8015948 <vTaskSwitchContext>
	prvTaskExitError();
 8016b02:	f7ff ff3d 	bl	8016980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016b06:	2300      	movs	r3, #0
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3710      	adds	r7, #16
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}
 8016b10:	e000e400 	.word	0xe000e400
 8016b14:	20001e64 	.word	0x20001e64
 8016b18:	20001e68 	.word	0x20001e68
 8016b1c:	e000ed20 	.word	0xe000ed20
 8016b20:	20000094 	.word	0x20000094
 8016b24:	e000ef34 	.word	0xe000ef34

08016b28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016b28:	b480      	push	{r7}
 8016b2a:	b083      	sub	sp, #12
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b32:	b672      	cpsid	i
 8016b34:	f383 8811 	msr	BASEPRI, r3
 8016b38:	f3bf 8f6f 	isb	sy
 8016b3c:	f3bf 8f4f 	dsb	sy
 8016b40:	b662      	cpsie	i
 8016b42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016b44:	4b0f      	ldr	r3, [pc, #60]	; (8016b84 <vPortEnterCritical+0x5c>)
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	3301      	adds	r3, #1
 8016b4a:	4a0e      	ldr	r2, [pc, #56]	; (8016b84 <vPortEnterCritical+0x5c>)
 8016b4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016b4e:	4b0d      	ldr	r3, [pc, #52]	; (8016b84 <vPortEnterCritical+0x5c>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	2b01      	cmp	r3, #1
 8016b54:	d110      	bne.n	8016b78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016b56:	4b0c      	ldr	r3, [pc, #48]	; (8016b88 <vPortEnterCritical+0x60>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d00b      	beq.n	8016b78 <vPortEnterCritical+0x50>
 8016b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b64:	b672      	cpsid	i
 8016b66:	f383 8811 	msr	BASEPRI, r3
 8016b6a:	f3bf 8f6f 	isb	sy
 8016b6e:	f3bf 8f4f 	dsb	sy
 8016b72:	b662      	cpsie	i
 8016b74:	603b      	str	r3, [r7, #0]
 8016b76:	e7fe      	b.n	8016b76 <vPortEnterCritical+0x4e>
	}
}
 8016b78:	bf00      	nop
 8016b7a:	370c      	adds	r7, #12
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b82:	4770      	bx	lr
 8016b84:	20000094 	.word	0x20000094
 8016b88:	e000ed04 	.word	0xe000ed04

08016b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016b8c:	b480      	push	{r7}
 8016b8e:	b083      	sub	sp, #12
 8016b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016b92:	4b12      	ldr	r3, [pc, #72]	; (8016bdc <vPortExitCritical+0x50>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d10b      	bne.n	8016bb2 <vPortExitCritical+0x26>
 8016b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b9e:	b672      	cpsid	i
 8016ba0:	f383 8811 	msr	BASEPRI, r3
 8016ba4:	f3bf 8f6f 	isb	sy
 8016ba8:	f3bf 8f4f 	dsb	sy
 8016bac:	b662      	cpsie	i
 8016bae:	607b      	str	r3, [r7, #4]
 8016bb0:	e7fe      	b.n	8016bb0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016bb2:	4b0a      	ldr	r3, [pc, #40]	; (8016bdc <vPortExitCritical+0x50>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	3b01      	subs	r3, #1
 8016bb8:	4a08      	ldr	r2, [pc, #32]	; (8016bdc <vPortExitCritical+0x50>)
 8016bba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016bbc:	4b07      	ldr	r3, [pc, #28]	; (8016bdc <vPortExitCritical+0x50>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d104      	bne.n	8016bce <vPortExitCritical+0x42>
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016bc8:	683b      	ldr	r3, [r7, #0]
 8016bca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8016bce:	bf00      	nop
 8016bd0:	370c      	adds	r7, #12
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd8:	4770      	bx	lr
 8016bda:	bf00      	nop
 8016bdc:	20000094 	.word	0x20000094

08016be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016be0:	f3ef 8009 	mrs	r0, PSP
 8016be4:	f3bf 8f6f 	isb	sy
 8016be8:	4b15      	ldr	r3, [pc, #84]	; (8016c40 <pxCurrentTCBConst>)
 8016bea:	681a      	ldr	r2, [r3, #0]
 8016bec:	f01e 0f10 	tst.w	lr, #16
 8016bf0:	bf08      	it	eq
 8016bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bfa:	6010      	str	r0, [r2, #0]
 8016bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016c04:	b672      	cpsid	i
 8016c06:	f380 8811 	msr	BASEPRI, r0
 8016c0a:	f3bf 8f4f 	dsb	sy
 8016c0e:	f3bf 8f6f 	isb	sy
 8016c12:	b662      	cpsie	i
 8016c14:	f7fe fe98 	bl	8015948 <vTaskSwitchContext>
 8016c18:	f04f 0000 	mov.w	r0, #0
 8016c1c:	f380 8811 	msr	BASEPRI, r0
 8016c20:	bc09      	pop	{r0, r3}
 8016c22:	6819      	ldr	r1, [r3, #0]
 8016c24:	6808      	ldr	r0, [r1, #0]
 8016c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c2a:	f01e 0f10 	tst.w	lr, #16
 8016c2e:	bf08      	it	eq
 8016c30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016c34:	f380 8809 	msr	PSP, r0
 8016c38:	f3bf 8f6f 	isb	sy
 8016c3c:	4770      	bx	lr
 8016c3e:	bf00      	nop

08016c40 <pxCurrentTCBConst>:
 8016c40:	20001838 	.word	0x20001838
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016c44:	bf00      	nop
 8016c46:	bf00      	nop

08016c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b082      	sub	sp, #8
 8016c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8016c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c52:	b672      	cpsid	i
 8016c54:	f383 8811 	msr	BASEPRI, r3
 8016c58:	f3bf 8f6f 	isb	sy
 8016c5c:	f3bf 8f4f 	dsb	sy
 8016c60:	b662      	cpsie	i
 8016c62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016c64:	f7fe fdb6 	bl	80157d4 <xTaskIncrementTick>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d003      	beq.n	8016c76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016c6e:	4b06      	ldr	r3, [pc, #24]	; (8016c88 <SysTick_Handler+0x40>)
 8016c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c74:	601a      	str	r2, [r3, #0]
 8016c76:	2300      	movs	r3, #0
 8016c78:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016c80:	bf00      	nop
 8016c82:	3708      	adds	r7, #8
 8016c84:	46bd      	mov	sp, r7
 8016c86:	bd80      	pop	{r7, pc}
 8016c88:	e000ed04 	.word	0xe000ed04

08016c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016c90:	4b0b      	ldr	r3, [pc, #44]	; (8016cc0 <vPortSetupTimerInterrupt+0x34>)
 8016c92:	2200      	movs	r2, #0
 8016c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016c96:	4b0b      	ldr	r3, [pc, #44]	; (8016cc4 <vPortSetupTimerInterrupt+0x38>)
 8016c98:	2200      	movs	r2, #0
 8016c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016c9c:	4b0a      	ldr	r3, [pc, #40]	; (8016cc8 <vPortSetupTimerInterrupt+0x3c>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	4a0a      	ldr	r2, [pc, #40]	; (8016ccc <vPortSetupTimerInterrupt+0x40>)
 8016ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8016ca6:	099b      	lsrs	r3, r3, #6
 8016ca8:	4a09      	ldr	r2, [pc, #36]	; (8016cd0 <vPortSetupTimerInterrupt+0x44>)
 8016caa:	3b01      	subs	r3, #1
 8016cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016cae:	4b04      	ldr	r3, [pc, #16]	; (8016cc0 <vPortSetupTimerInterrupt+0x34>)
 8016cb0:	2207      	movs	r2, #7
 8016cb2:	601a      	str	r2, [r3, #0]
}
 8016cb4:	bf00      	nop
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbc:	4770      	bx	lr
 8016cbe:	bf00      	nop
 8016cc0:	e000e010 	.word	0xe000e010
 8016cc4:	e000e018 	.word	0xe000e018
 8016cc8:	20000000 	.word	0x20000000
 8016ccc:	10624dd3 	.word	0x10624dd3
 8016cd0:	e000e014 	.word	0xe000e014

08016cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016ce4 <vPortEnableVFP+0x10>
 8016cd8:	6801      	ldr	r1, [r0, #0]
 8016cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016cde:	6001      	str	r1, [r0, #0]
 8016ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016ce2:	bf00      	nop
 8016ce4:	e000ed88 	.word	0xe000ed88

08016ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016ce8:	b480      	push	{r7}
 8016cea:	b085      	sub	sp, #20
 8016cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016cee:	f3ef 8305 	mrs	r3, IPSR
 8016cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	2b0f      	cmp	r3, #15
 8016cf8:	d915      	bls.n	8016d26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016cfa:	4a18      	ldr	r2, [pc, #96]	; (8016d5c <vPortValidateInterruptPriority+0x74>)
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	4413      	add	r3, r2
 8016d00:	781b      	ldrb	r3, [r3, #0]
 8016d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016d04:	4b16      	ldr	r3, [pc, #88]	; (8016d60 <vPortValidateInterruptPriority+0x78>)
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	7afa      	ldrb	r2, [r7, #11]
 8016d0a:	429a      	cmp	r2, r3
 8016d0c:	d20b      	bcs.n	8016d26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d12:	b672      	cpsid	i
 8016d14:	f383 8811 	msr	BASEPRI, r3
 8016d18:	f3bf 8f6f 	isb	sy
 8016d1c:	f3bf 8f4f 	dsb	sy
 8016d20:	b662      	cpsie	i
 8016d22:	607b      	str	r3, [r7, #4]
 8016d24:	e7fe      	b.n	8016d24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016d26:	4b0f      	ldr	r3, [pc, #60]	; (8016d64 <vPortValidateInterruptPriority+0x7c>)
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016d2e:	4b0e      	ldr	r3, [pc, #56]	; (8016d68 <vPortValidateInterruptPriority+0x80>)
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d90b      	bls.n	8016d4e <vPortValidateInterruptPriority+0x66>
 8016d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d3a:	b672      	cpsid	i
 8016d3c:	f383 8811 	msr	BASEPRI, r3
 8016d40:	f3bf 8f6f 	isb	sy
 8016d44:	f3bf 8f4f 	dsb	sy
 8016d48:	b662      	cpsie	i
 8016d4a:	603b      	str	r3, [r7, #0]
 8016d4c:	e7fe      	b.n	8016d4c <vPortValidateInterruptPriority+0x64>
	}
 8016d4e:	bf00      	nop
 8016d50:	3714      	adds	r7, #20
 8016d52:	46bd      	mov	sp, r7
 8016d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d58:	4770      	bx	lr
 8016d5a:	bf00      	nop
 8016d5c:	e000e3f0 	.word	0xe000e3f0
 8016d60:	20001e64 	.word	0x20001e64
 8016d64:	e000ed0c 	.word	0xe000ed0c
 8016d68:	20001e68 	.word	0x20001e68

08016d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b08a      	sub	sp, #40	; 0x28
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016d74:	2300      	movs	r3, #0
 8016d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016d78:	f7fe fc70 	bl	801565c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016d7c:	4b5c      	ldr	r3, [pc, #368]	; (8016ef0 <pvPortMalloc+0x184>)
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d101      	bne.n	8016d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016d84:	f000 f91a 	bl	8016fbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016d88:	4b5a      	ldr	r3, [pc, #360]	; (8016ef4 <pvPortMalloc+0x188>)
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	4013      	ands	r3, r2
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	f040 8090 	bne.w	8016eb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d01e      	beq.n	8016dda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016d9c:	2208      	movs	r2, #8
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	4413      	add	r3, r2
 8016da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	f003 0307 	and.w	r3, r3, #7
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d015      	beq.n	8016dda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	f023 0307 	bic.w	r3, r3, #7
 8016db4:	3308      	adds	r3, #8
 8016db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f003 0307 	and.w	r3, r3, #7
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d00b      	beq.n	8016dda <pvPortMalloc+0x6e>
 8016dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc6:	b672      	cpsid	i
 8016dc8:	f383 8811 	msr	BASEPRI, r3
 8016dcc:	f3bf 8f6f 	isb	sy
 8016dd0:	f3bf 8f4f 	dsb	sy
 8016dd4:	b662      	cpsie	i
 8016dd6:	617b      	str	r3, [r7, #20]
 8016dd8:	e7fe      	b.n	8016dd8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d06a      	beq.n	8016eb6 <pvPortMalloc+0x14a>
 8016de0:	4b45      	ldr	r3, [pc, #276]	; (8016ef8 <pvPortMalloc+0x18c>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	687a      	ldr	r2, [r7, #4]
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d865      	bhi.n	8016eb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016dea:	4b44      	ldr	r3, [pc, #272]	; (8016efc <pvPortMalloc+0x190>)
 8016dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016dee:	4b43      	ldr	r3, [pc, #268]	; (8016efc <pvPortMalloc+0x190>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016df4:	e004      	b.n	8016e00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	687a      	ldr	r2, [r7, #4]
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d903      	bls.n	8016e12 <pvPortMalloc+0xa6>
 8016e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d1f1      	bne.n	8016df6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016e12:	4b37      	ldr	r3, [pc, #220]	; (8016ef0 <pvPortMalloc+0x184>)
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e18:	429a      	cmp	r2, r3
 8016e1a:	d04c      	beq.n	8016eb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016e1c:	6a3b      	ldr	r3, [r7, #32]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	2208      	movs	r2, #8
 8016e22:	4413      	add	r3, r2
 8016e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e28:	681a      	ldr	r2, [r3, #0]
 8016e2a:	6a3b      	ldr	r3, [r7, #32]
 8016e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e30:	685a      	ldr	r2, [r3, #4]
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	1ad2      	subs	r2, r2, r3
 8016e36:	2308      	movs	r3, #8
 8016e38:	005b      	lsls	r3, r3, #1
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d920      	bls.n	8016e80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	4413      	add	r3, r2
 8016e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016e46:	69bb      	ldr	r3, [r7, #24]
 8016e48:	f003 0307 	and.w	r3, r3, #7
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d00b      	beq.n	8016e68 <pvPortMalloc+0xfc>
 8016e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e54:	b672      	cpsid	i
 8016e56:	f383 8811 	msr	BASEPRI, r3
 8016e5a:	f3bf 8f6f 	isb	sy
 8016e5e:	f3bf 8f4f 	dsb	sy
 8016e62:	b662      	cpsie	i
 8016e64:	613b      	str	r3, [r7, #16]
 8016e66:	e7fe      	b.n	8016e66 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e6a:	685a      	ldr	r2, [r3, #4]
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	1ad2      	subs	r2, r2, r3
 8016e70:	69bb      	ldr	r3, [r7, #24]
 8016e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e76:	687a      	ldr	r2, [r7, #4]
 8016e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016e7a:	69b8      	ldr	r0, [r7, #24]
 8016e7c:	f000 f900 	bl	8017080 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016e80:	4b1d      	ldr	r3, [pc, #116]	; (8016ef8 <pvPortMalloc+0x18c>)
 8016e82:	681a      	ldr	r2, [r3, #0]
 8016e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	1ad3      	subs	r3, r2, r3
 8016e8a:	4a1b      	ldr	r2, [pc, #108]	; (8016ef8 <pvPortMalloc+0x18c>)
 8016e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016e8e:	4b1a      	ldr	r3, [pc, #104]	; (8016ef8 <pvPortMalloc+0x18c>)
 8016e90:	681a      	ldr	r2, [r3, #0]
 8016e92:	4b1b      	ldr	r3, [pc, #108]	; (8016f00 <pvPortMalloc+0x194>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	429a      	cmp	r2, r3
 8016e98:	d203      	bcs.n	8016ea2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016e9a:	4b17      	ldr	r3, [pc, #92]	; (8016ef8 <pvPortMalloc+0x18c>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	4a18      	ldr	r2, [pc, #96]	; (8016f00 <pvPortMalloc+0x194>)
 8016ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea4:	685a      	ldr	r2, [r3, #4]
 8016ea6:	4b13      	ldr	r3, [pc, #76]	; (8016ef4 <pvPortMalloc+0x188>)
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	431a      	orrs	r2, r3
 8016eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016eb6:	f7fe fbdf 	bl	8015678 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8016eba:	69fb      	ldr	r3, [r7, #28]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d101      	bne.n	8016ec4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8016ec0:	f7ea f8c8 	bl	8001054 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ec4:	69fb      	ldr	r3, [r7, #28]
 8016ec6:	f003 0307 	and.w	r3, r3, #7
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d00b      	beq.n	8016ee6 <pvPortMalloc+0x17a>
 8016ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ed2:	b672      	cpsid	i
 8016ed4:	f383 8811 	msr	BASEPRI, r3
 8016ed8:	f3bf 8f6f 	isb	sy
 8016edc:	f3bf 8f4f 	dsb	sy
 8016ee0:	b662      	cpsie	i
 8016ee2:	60fb      	str	r3, [r7, #12]
 8016ee4:	e7fe      	b.n	8016ee4 <pvPortMalloc+0x178>
	return pvReturn;
 8016ee6:	69fb      	ldr	r3, [r7, #28]
}
 8016ee8:	4618      	mov	r0, r3
 8016eea:	3728      	adds	r7, #40	; 0x28
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd80      	pop	{r7, pc}
 8016ef0:	20009e74 	.word	0x20009e74
 8016ef4:	20009e80 	.word	0x20009e80
 8016ef8:	20009e78 	.word	0x20009e78
 8016efc:	20009e6c 	.word	0x20009e6c
 8016f00:	20009e7c 	.word	0x20009e7c

08016f04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b086      	sub	sp, #24
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d04a      	beq.n	8016fac <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016f16:	2308      	movs	r3, #8
 8016f18:	425b      	negs	r3, r3
 8016f1a:	697a      	ldr	r2, [r7, #20]
 8016f1c:	4413      	add	r3, r2
 8016f1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016f20:	697b      	ldr	r3, [r7, #20]
 8016f22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	685a      	ldr	r2, [r3, #4]
 8016f28:	4b22      	ldr	r3, [pc, #136]	; (8016fb4 <vPortFree+0xb0>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	4013      	ands	r3, r2
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d10b      	bne.n	8016f4a <vPortFree+0x46>
 8016f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f36:	b672      	cpsid	i
 8016f38:	f383 8811 	msr	BASEPRI, r3
 8016f3c:	f3bf 8f6f 	isb	sy
 8016f40:	f3bf 8f4f 	dsb	sy
 8016f44:	b662      	cpsie	i
 8016f46:	60fb      	str	r3, [r7, #12]
 8016f48:	e7fe      	b.n	8016f48 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d00b      	beq.n	8016f6a <vPortFree+0x66>
 8016f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f56:	b672      	cpsid	i
 8016f58:	f383 8811 	msr	BASEPRI, r3
 8016f5c:	f3bf 8f6f 	isb	sy
 8016f60:	f3bf 8f4f 	dsb	sy
 8016f64:	b662      	cpsie	i
 8016f66:	60bb      	str	r3, [r7, #8]
 8016f68:	e7fe      	b.n	8016f68 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016f6a:	693b      	ldr	r3, [r7, #16]
 8016f6c:	685a      	ldr	r2, [r3, #4]
 8016f6e:	4b11      	ldr	r3, [pc, #68]	; (8016fb4 <vPortFree+0xb0>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	4013      	ands	r3, r2
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d019      	beq.n	8016fac <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016f78:	693b      	ldr	r3, [r7, #16]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d115      	bne.n	8016fac <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016f80:	693b      	ldr	r3, [r7, #16]
 8016f82:	685a      	ldr	r2, [r3, #4]
 8016f84:	4b0b      	ldr	r3, [pc, #44]	; (8016fb4 <vPortFree+0xb0>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	43db      	mvns	r3, r3
 8016f8a:	401a      	ands	r2, r3
 8016f8c:	693b      	ldr	r3, [r7, #16]
 8016f8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016f90:	f7fe fb64 	bl	801565c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016f94:	693b      	ldr	r3, [r7, #16]
 8016f96:	685a      	ldr	r2, [r3, #4]
 8016f98:	4b07      	ldr	r3, [pc, #28]	; (8016fb8 <vPortFree+0xb4>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	4413      	add	r3, r2
 8016f9e:	4a06      	ldr	r2, [pc, #24]	; (8016fb8 <vPortFree+0xb4>)
 8016fa0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016fa2:	6938      	ldr	r0, [r7, #16]
 8016fa4:	f000 f86c 	bl	8017080 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016fa8:	f7fe fb66 	bl	8015678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016fac:	bf00      	nop
 8016fae:	3718      	adds	r7, #24
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd80      	pop	{r7, pc}
 8016fb4:	20009e80 	.word	0x20009e80
 8016fb8:	20009e78 	.word	0x20009e78

08016fbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016fbc:	b480      	push	{r7}
 8016fbe:	b085      	sub	sp, #20
 8016fc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016fc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016fc8:	4b27      	ldr	r3, [pc, #156]	; (8017068 <prvHeapInit+0xac>)
 8016fca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	f003 0307 	and.w	r3, r3, #7
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d00c      	beq.n	8016ff0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	3307      	adds	r3, #7
 8016fda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	f023 0307 	bic.w	r3, r3, #7
 8016fe2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016fe4:	68ba      	ldr	r2, [r7, #8]
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	1ad3      	subs	r3, r2, r3
 8016fea:	4a1f      	ldr	r2, [pc, #124]	; (8017068 <prvHeapInit+0xac>)
 8016fec:	4413      	add	r3, r2
 8016fee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016ff4:	4a1d      	ldr	r2, [pc, #116]	; (801706c <prvHeapInit+0xb0>)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016ffa:	4b1c      	ldr	r3, [pc, #112]	; (801706c <prvHeapInit+0xb0>)
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	68ba      	ldr	r2, [r7, #8]
 8017004:	4413      	add	r3, r2
 8017006:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017008:	2208      	movs	r2, #8
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	1a9b      	subs	r3, r3, r2
 801700e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	f023 0307 	bic.w	r3, r3, #7
 8017016:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	4a15      	ldr	r2, [pc, #84]	; (8017070 <prvHeapInit+0xb4>)
 801701c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801701e:	4b14      	ldr	r3, [pc, #80]	; (8017070 <prvHeapInit+0xb4>)
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	2200      	movs	r2, #0
 8017024:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017026:	4b12      	ldr	r3, [pc, #72]	; (8017070 <prvHeapInit+0xb4>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	2200      	movs	r2, #0
 801702c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	68fa      	ldr	r2, [r7, #12]
 8017036:	1ad2      	subs	r2, r2, r3
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801703c:	4b0c      	ldr	r3, [pc, #48]	; (8017070 <prvHeapInit+0xb4>)
 801703e:	681a      	ldr	r2, [r3, #0]
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	4a0a      	ldr	r2, [pc, #40]	; (8017074 <prvHeapInit+0xb8>)
 801704a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	685b      	ldr	r3, [r3, #4]
 8017050:	4a09      	ldr	r2, [pc, #36]	; (8017078 <prvHeapInit+0xbc>)
 8017052:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017054:	4b09      	ldr	r3, [pc, #36]	; (801707c <prvHeapInit+0xc0>)
 8017056:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801705a:	601a      	str	r2, [r3, #0]
}
 801705c:	bf00      	nop
 801705e:	3714      	adds	r7, #20
 8017060:	46bd      	mov	sp, r7
 8017062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017066:	4770      	bx	lr
 8017068:	20001e6c 	.word	0x20001e6c
 801706c:	20009e6c 	.word	0x20009e6c
 8017070:	20009e74 	.word	0x20009e74
 8017074:	20009e7c 	.word	0x20009e7c
 8017078:	20009e78 	.word	0x20009e78
 801707c:	20009e80 	.word	0x20009e80

08017080 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017080:	b480      	push	{r7}
 8017082:	b085      	sub	sp, #20
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017088:	4b28      	ldr	r3, [pc, #160]	; (801712c <prvInsertBlockIntoFreeList+0xac>)
 801708a:	60fb      	str	r3, [r7, #12]
 801708c:	e002      	b.n	8017094 <prvInsertBlockIntoFreeList+0x14>
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	60fb      	str	r3, [r7, #12]
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	687a      	ldr	r2, [r7, #4]
 801709a:	429a      	cmp	r2, r3
 801709c:	d8f7      	bhi.n	801708e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	68ba      	ldr	r2, [r7, #8]
 80170a8:	4413      	add	r3, r2
 80170aa:	687a      	ldr	r2, [r7, #4]
 80170ac:	429a      	cmp	r2, r3
 80170ae:	d108      	bne.n	80170c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	685a      	ldr	r2, [r3, #4]
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	685b      	ldr	r3, [r3, #4]
 80170b8:	441a      	add	r2, r3
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	685b      	ldr	r3, [r3, #4]
 80170ca:	68ba      	ldr	r2, [r7, #8]
 80170cc:	441a      	add	r2, r3
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	429a      	cmp	r2, r3
 80170d4:	d118      	bne.n	8017108 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	681a      	ldr	r2, [r3, #0]
 80170da:	4b15      	ldr	r3, [pc, #84]	; (8017130 <prvInsertBlockIntoFreeList+0xb0>)
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	429a      	cmp	r2, r3
 80170e0:	d00d      	beq.n	80170fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	685a      	ldr	r2, [r3, #4]
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	685b      	ldr	r3, [r3, #4]
 80170ec:	441a      	add	r2, r3
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	681a      	ldr	r2, [r3, #0]
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	601a      	str	r2, [r3, #0]
 80170fc:	e008      	b.n	8017110 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80170fe:	4b0c      	ldr	r3, [pc, #48]	; (8017130 <prvInsertBlockIntoFreeList+0xb0>)
 8017100:	681a      	ldr	r2, [r3, #0]
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	601a      	str	r2, [r3, #0]
 8017106:	e003      	b.n	8017110 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	681a      	ldr	r2, [r3, #0]
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017110:	68fa      	ldr	r2, [r7, #12]
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	429a      	cmp	r2, r3
 8017116:	d002      	beq.n	801711e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	687a      	ldr	r2, [r7, #4]
 801711c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801711e:	bf00      	nop
 8017120:	3714      	adds	r7, #20
 8017122:	46bd      	mov	sp, r7
 8017124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017128:	4770      	bx	lr
 801712a:	bf00      	nop
 801712c:	20009e6c 	.word	0x20009e6c
 8017130:	20009e74 	.word	0x20009e74

08017134 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017138:	2201      	movs	r2, #1
 801713a:	490e      	ldr	r1, [pc, #56]	; (8017174 <MX_USB_HOST_Init+0x40>)
 801713c:	480e      	ldr	r0, [pc, #56]	; (8017178 <MX_USB_HOST_Init+0x44>)
 801713e:	f7fa fd4d 	bl	8011bdc <USBH_Init>
 8017142:	4603      	mov	r3, r0
 8017144:	2b00      	cmp	r3, #0
 8017146:	d001      	beq.n	801714c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017148:	f7eb fc2e 	bl	80029a8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801714c:	490b      	ldr	r1, [pc, #44]	; (801717c <MX_USB_HOST_Init+0x48>)
 801714e:	480a      	ldr	r0, [pc, #40]	; (8017178 <MX_USB_HOST_Init+0x44>)
 8017150:	f7fa fdf4 	bl	8011d3c <USBH_RegisterClass>
 8017154:	4603      	mov	r3, r0
 8017156:	2b00      	cmp	r3, #0
 8017158:	d001      	beq.n	801715e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801715a:	f7eb fc25 	bl	80029a8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801715e:	4806      	ldr	r0, [pc, #24]	; (8017178 <MX_USB_HOST_Init+0x44>)
 8017160:	f7fa fe78 	bl	8011e54 <USBH_Start>
 8017164:	4603      	mov	r3, r0
 8017166:	2b00      	cmp	r3, #0
 8017168:	d001      	beq.n	801716e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801716a:	f7eb fc1d 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801716e:	bf00      	nop
 8017170:	bd80      	pop	{r7, pc}
 8017172:	bf00      	nop
 8017174:	08017181 	.word	0x08017181
 8017178:	2001ba70 	.word	0x2001ba70
 801717c:	20000074 	.word	0x20000074

08017180 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017180:	b480      	push	{r7}
 8017182:	b083      	sub	sp, #12
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	460b      	mov	r3, r1
 801718a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801718c:	78fb      	ldrb	r3, [r7, #3]
 801718e:	3b01      	subs	r3, #1
 8017190:	2b04      	cmp	r3, #4
 8017192:	d819      	bhi.n	80171c8 <USBH_UserProcess+0x48>
 8017194:	a201      	add	r2, pc, #4	; (adr r2, 801719c <USBH_UserProcess+0x1c>)
 8017196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801719a:	bf00      	nop
 801719c:	080171c9 	.word	0x080171c9
 80171a0:	080171b9 	.word	0x080171b9
 80171a4:	080171c9 	.word	0x080171c9
 80171a8:	080171c1 	.word	0x080171c1
 80171ac:	080171b1 	.word	0x080171b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80171b0:	4b09      	ldr	r3, [pc, #36]	; (80171d8 <USBH_UserProcess+0x58>)
 80171b2:	2203      	movs	r2, #3
 80171b4:	701a      	strb	r2, [r3, #0]
  break;
 80171b6:	e008      	b.n	80171ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80171b8:	4b07      	ldr	r3, [pc, #28]	; (80171d8 <USBH_UserProcess+0x58>)
 80171ba:	2202      	movs	r2, #2
 80171bc:	701a      	strb	r2, [r3, #0]
  break;
 80171be:	e004      	b.n	80171ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80171c0:	4b05      	ldr	r3, [pc, #20]	; (80171d8 <USBH_UserProcess+0x58>)
 80171c2:	2201      	movs	r2, #1
 80171c4:	701a      	strb	r2, [r3, #0]
  break;
 80171c6:	e000      	b.n	80171ca <USBH_UserProcess+0x4a>

  default:
  break;
 80171c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80171ca:	bf00      	nop
 80171cc:	370c      	adds	r7, #12
 80171ce:	46bd      	mov	sp, r7
 80171d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d4:	4770      	bx	lr
 80171d6:	bf00      	nop
 80171d8:	20009e84 	.word	0x20009e84

080171dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b08a      	sub	sp, #40	; 0x28
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80171e4:	f107 0314 	add.w	r3, r7, #20
 80171e8:	2200      	movs	r2, #0
 80171ea:	601a      	str	r2, [r3, #0]
 80171ec:	605a      	str	r2, [r3, #4]
 80171ee:	609a      	str	r2, [r3, #8]
 80171f0:	60da      	str	r2, [r3, #12]
 80171f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80171fc:	d13c      	bne.n	8017278 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80171fe:	4b20      	ldr	r3, [pc, #128]	; (8017280 <HAL_HCD_MspInit+0xa4>)
 8017200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017202:	4a1f      	ldr	r2, [pc, #124]	; (8017280 <HAL_HCD_MspInit+0xa4>)
 8017204:	f043 0301 	orr.w	r3, r3, #1
 8017208:	6313      	str	r3, [r2, #48]	; 0x30
 801720a:	4b1d      	ldr	r3, [pc, #116]	; (8017280 <HAL_HCD_MspInit+0xa4>)
 801720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801720e:	f003 0301 	and.w	r3, r3, #1
 8017212:	613b      	str	r3, [r7, #16]
 8017214:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8017216:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801721a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801721c:	2302      	movs	r3, #2
 801721e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017220:	2300      	movs	r3, #0
 8017222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017224:	2303      	movs	r3, #3
 8017226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017228:	230a      	movs	r3, #10
 801722a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801722c:	f107 0314 	add.w	r3, r7, #20
 8017230:	4619      	mov	r1, r3
 8017232:	4814      	ldr	r0, [pc, #80]	; (8017284 <HAL_HCD_MspInit+0xa8>)
 8017234:	f7f1 fec6 	bl	8008fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017238:	4b11      	ldr	r3, [pc, #68]	; (8017280 <HAL_HCD_MspInit+0xa4>)
 801723a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801723c:	4a10      	ldr	r2, [pc, #64]	; (8017280 <HAL_HCD_MspInit+0xa4>)
 801723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017242:	6353      	str	r3, [r2, #52]	; 0x34
 8017244:	4b0e      	ldr	r3, [pc, #56]	; (8017280 <HAL_HCD_MspInit+0xa4>)
 8017246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801724c:	60fb      	str	r3, [r7, #12]
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	4b0b      	ldr	r3, [pc, #44]	; (8017280 <HAL_HCD_MspInit+0xa4>)
 8017252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017254:	4a0a      	ldr	r2, [pc, #40]	; (8017280 <HAL_HCD_MspInit+0xa4>)
 8017256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801725a:	6453      	str	r3, [r2, #68]	; 0x44
 801725c:	4b08      	ldr	r3, [pc, #32]	; (8017280 <HAL_HCD_MspInit+0xa4>)
 801725e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017264:	60bb      	str	r3, [r7, #8]
 8017266:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017268:	2200      	movs	r2, #0
 801726a:	2100      	movs	r1, #0
 801726c:	2043      	movs	r0, #67	; 0x43
 801726e:	f7f0 fdab 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017272:	2043      	movs	r0, #67	; 0x43
 8017274:	f7f0 fdc4 	bl	8007e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017278:	bf00      	nop
 801727a:	3728      	adds	r7, #40	; 0x28
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	40023800 	.word	0x40023800
 8017284:	40020000 	.word	0x40020000

08017288 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b082      	sub	sp, #8
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017296:	4618      	mov	r0, r3
 8017298:	f7fb fa89 	bl	80127ae <USBH_LL_IncTimer>
}
 801729c:	bf00      	nop
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80172b2:	4618      	mov	r0, r3
 80172b4:	f7fb facd 	bl	8012852 <USBH_LL_Connect>
}
 80172b8:	bf00      	nop
 80172ba:	3708      	adds	r7, #8
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}

080172c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b082      	sub	sp, #8
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7fb fae2 	bl	8012898 <USBH_LL_Disconnect>
}
 80172d4:	bf00      	nop
 80172d6:	3708      	adds	r7, #8
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}

080172dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	460b      	mov	r3, r1
 80172e6:	70fb      	strb	r3, [r7, #3]
 80172e8:	4613      	mov	r3, r2
 80172ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80172f2:	4618      	mov	r0, r3
 80172f4:	f7fb fb19 	bl	801292a <USBH_LL_NotifyURBChange>
#endif
}
 80172f8:	bf00      	nop
 80172fa:	3708      	adds	r7, #8
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}

08017300 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b082      	sub	sp, #8
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801730e:	4618      	mov	r0, r3
 8017310:	f7fb fa77 	bl	8012802 <USBH_LL_PortEnabled>
}
 8017314:	bf00      	nop
 8017316:	3708      	adds	r7, #8
 8017318:	46bd      	mov	sp, r7
 801731a:	bd80      	pop	{r7, pc}

0801731c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b082      	sub	sp, #8
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801732a:	4618      	mov	r0, r3
 801732c:	f7fb fa83 	bl	8012836 <USBH_LL_PortDisabled>
}
 8017330:	bf00      	nop
 8017332:	3708      	adds	r7, #8
 8017334:	46bd      	mov	sp, r7
 8017336:	bd80      	pop	{r7, pc}

08017338 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b082      	sub	sp, #8
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8017346:	2b01      	cmp	r3, #1
 8017348:	d12a      	bne.n	80173a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801734a:	4a18      	ldr	r2, [pc, #96]	; (80173ac <USBH_LL_Init+0x74>)
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	4a15      	ldr	r2, [pc, #84]	; (80173ac <USBH_LL_Init+0x74>)
 8017356:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801735a:	4b14      	ldr	r3, [pc, #80]	; (80173ac <USBH_LL_Init+0x74>)
 801735c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017360:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8017362:	4b12      	ldr	r3, [pc, #72]	; (80173ac <USBH_LL_Init+0x74>)
 8017364:	2208      	movs	r2, #8
 8017366:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8017368:	4b10      	ldr	r3, [pc, #64]	; (80173ac <USBH_LL_Init+0x74>)
 801736a:	2201      	movs	r2, #1
 801736c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801736e:	4b0f      	ldr	r3, [pc, #60]	; (80173ac <USBH_LL_Init+0x74>)
 8017370:	2200      	movs	r2, #0
 8017372:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8017374:	4b0d      	ldr	r3, [pc, #52]	; (80173ac <USBH_LL_Init+0x74>)
 8017376:	2202      	movs	r2, #2
 8017378:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801737a:	4b0c      	ldr	r3, [pc, #48]	; (80173ac <USBH_LL_Init+0x74>)
 801737c:	2200      	movs	r2, #0
 801737e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017380:	480a      	ldr	r0, [pc, #40]	; (80173ac <USBH_LL_Init+0x74>)
 8017382:	f7f2 f905 	bl	8009590 <HAL_HCD_Init>
 8017386:	4603      	mov	r3, r0
 8017388:	2b00      	cmp	r3, #0
 801738a:	d001      	beq.n	8017390 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801738c:	f7eb fb0c 	bl	80029a8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8017390:	4806      	ldr	r0, [pc, #24]	; (80173ac <USBH_LL_Init+0x74>)
 8017392:	f7f2 fd09 	bl	8009da8 <HAL_HCD_GetCurrentFrame>
 8017396:	4603      	mov	r3, r0
 8017398:	4619      	mov	r1, r3
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f7fb f9f8 	bl	8012790 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80173a0:	2300      	movs	r3, #0
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3708      	adds	r7, #8
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
 80173aa:	bf00      	nop
 80173ac:	2001be54 	.word	0x2001be54

080173b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b084      	sub	sp, #16
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173b8:	2300      	movs	r3, #0
 80173ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80173bc:	2300      	movs	r3, #0
 80173be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80173c6:	4618      	mov	r0, r3
 80173c8:	f7f2 fc76 	bl	8009cb8 <HAL_HCD_Start>
 80173cc:	4603      	mov	r3, r0
 80173ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80173d0:	7bfb      	ldrb	r3, [r7, #15]
 80173d2:	4618      	mov	r0, r3
 80173d4:	f000 f95c 	bl	8017690 <USBH_Get_USB_Status>
 80173d8:	4603      	mov	r3, r0
 80173da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80173de:	4618      	mov	r0, r3
 80173e0:	3710      	adds	r7, #16
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd80      	pop	{r7, pc}

080173e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80173e6:	b580      	push	{r7, lr}
 80173e8:	b084      	sub	sp, #16
 80173ea:	af00      	add	r7, sp, #0
 80173ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173ee:	2300      	movs	r3, #0
 80173f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80173f2:	2300      	movs	r3, #0
 80173f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80173fc:	4618      	mov	r0, r3
 80173fe:	f7f2 fc7e 	bl	8009cfe <HAL_HCD_Stop>
 8017402:	4603      	mov	r3, r0
 8017404:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017406:	7bfb      	ldrb	r3, [r7, #15]
 8017408:	4618      	mov	r0, r3
 801740a:	f000 f941 	bl	8017690 <USBH_Get_USB_Status>
 801740e:	4603      	mov	r3, r0
 8017410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017412:	7bbb      	ldrb	r3, [r7, #14]
}
 8017414:	4618      	mov	r0, r3
 8017416:	3710      	adds	r7, #16
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}

0801741c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b084      	sub	sp, #16
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8017424:	2301      	movs	r3, #1
 8017426:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801742e:	4618      	mov	r0, r3
 8017430:	f7f2 fcc8 	bl	8009dc4 <HAL_HCD_GetCurrentSpeed>
 8017434:	4603      	mov	r3, r0
 8017436:	2b01      	cmp	r3, #1
 8017438:	d007      	beq.n	801744a <USBH_LL_GetSpeed+0x2e>
 801743a:	2b01      	cmp	r3, #1
 801743c:	d302      	bcc.n	8017444 <USBH_LL_GetSpeed+0x28>
 801743e:	2b02      	cmp	r3, #2
 8017440:	d006      	beq.n	8017450 <USBH_LL_GetSpeed+0x34>
 8017442:	e008      	b.n	8017456 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8017444:	2300      	movs	r3, #0
 8017446:	73fb      	strb	r3, [r7, #15]
    break;
 8017448:	e008      	b.n	801745c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801744a:	2301      	movs	r3, #1
 801744c:	73fb      	strb	r3, [r7, #15]
    break;
 801744e:	e005      	b.n	801745c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8017450:	2302      	movs	r3, #2
 8017452:	73fb      	strb	r3, [r7, #15]
    break;
 8017454:	e002      	b.n	801745c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8017456:	2301      	movs	r3, #1
 8017458:	73fb      	strb	r3, [r7, #15]
    break;
 801745a:	bf00      	nop
  }
  return  speed;
 801745c:	7bfb      	ldrb	r3, [r7, #15]
}
 801745e:	4618      	mov	r0, r3
 8017460:	3710      	adds	r7, #16
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}

08017466 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8017466:	b580      	push	{r7, lr}
 8017468:	b084      	sub	sp, #16
 801746a:	af00      	add	r7, sp, #0
 801746c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801746e:	2300      	movs	r3, #0
 8017470:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017472:	2300      	movs	r3, #0
 8017474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801747c:	4618      	mov	r0, r3
 801747e:	f7f2 fc5b 	bl	8009d38 <HAL_HCD_ResetPort>
 8017482:	4603      	mov	r3, r0
 8017484:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017486:	7bfb      	ldrb	r3, [r7, #15]
 8017488:	4618      	mov	r0, r3
 801748a:	f000 f901 	bl	8017690 <USBH_Get_USB_Status>
 801748e:	4603      	mov	r3, r0
 8017490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017492:	7bbb      	ldrb	r3, [r7, #14]
}
 8017494:	4618      	mov	r0, r3
 8017496:	3710      	adds	r7, #16
 8017498:	46bd      	mov	sp, r7
 801749a:	bd80      	pop	{r7, pc}

0801749c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b082      	sub	sp, #8
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
 80174a4:	460b      	mov	r3, r1
 80174a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80174ae:	78fa      	ldrb	r2, [r7, #3]
 80174b0:	4611      	mov	r1, r2
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7f2 fc63 	bl	8009d7e <HAL_HCD_HC_GetXferCount>
 80174b8:	4603      	mov	r3, r0
}
 80174ba:	4618      	mov	r0, r3
 80174bc:	3708      	adds	r7, #8
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}

080174c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80174c2:	b590      	push	{r4, r7, lr}
 80174c4:	b089      	sub	sp, #36	; 0x24
 80174c6:	af04      	add	r7, sp, #16
 80174c8:	6078      	str	r0, [r7, #4]
 80174ca:	4608      	mov	r0, r1
 80174cc:	4611      	mov	r1, r2
 80174ce:	461a      	mov	r2, r3
 80174d0:	4603      	mov	r3, r0
 80174d2:	70fb      	strb	r3, [r7, #3]
 80174d4:	460b      	mov	r3, r1
 80174d6:	70bb      	strb	r3, [r7, #2]
 80174d8:	4613      	mov	r3, r2
 80174da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174dc:	2300      	movs	r3, #0
 80174de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80174e0:	2300      	movs	r3, #0
 80174e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80174ea:	787c      	ldrb	r4, [r7, #1]
 80174ec:	78ba      	ldrb	r2, [r7, #2]
 80174ee:	78f9      	ldrb	r1, [r7, #3]
 80174f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80174f2:	9302      	str	r3, [sp, #8]
 80174f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80174f8:	9301      	str	r3, [sp, #4]
 80174fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80174fe:	9300      	str	r3, [sp, #0]
 8017500:	4623      	mov	r3, r4
 8017502:	f7f2 f8a7 	bl	8009654 <HAL_HCD_HC_Init>
 8017506:	4603      	mov	r3, r0
 8017508:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801750a:	7bfb      	ldrb	r3, [r7, #15]
 801750c:	4618      	mov	r0, r3
 801750e:	f000 f8bf 	bl	8017690 <USBH_Get_USB_Status>
 8017512:	4603      	mov	r3, r0
 8017514:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017516:	7bbb      	ldrb	r3, [r7, #14]
}
 8017518:	4618      	mov	r0, r3
 801751a:	3714      	adds	r7, #20
 801751c:	46bd      	mov	sp, r7
 801751e:	bd90      	pop	{r4, r7, pc}

08017520 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
 8017528:	460b      	mov	r3, r1
 801752a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801752c:	2300      	movs	r3, #0
 801752e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017530:	2300      	movs	r3, #0
 8017532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801753a:	78fa      	ldrb	r2, [r7, #3]
 801753c:	4611      	mov	r1, r2
 801753e:	4618      	mov	r0, r3
 8017540:	f7f2 f920 	bl	8009784 <HAL_HCD_HC_Halt>
 8017544:	4603      	mov	r3, r0
 8017546:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017548:	7bfb      	ldrb	r3, [r7, #15]
 801754a:	4618      	mov	r0, r3
 801754c:	f000 f8a0 	bl	8017690 <USBH_Get_USB_Status>
 8017550:	4603      	mov	r3, r0
 8017552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017554:	7bbb      	ldrb	r3, [r7, #14]
}
 8017556:	4618      	mov	r0, r3
 8017558:	3710      	adds	r7, #16
 801755a:	46bd      	mov	sp, r7
 801755c:	bd80      	pop	{r7, pc}

0801755e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801755e:	b590      	push	{r4, r7, lr}
 8017560:	b089      	sub	sp, #36	; 0x24
 8017562:	af04      	add	r7, sp, #16
 8017564:	6078      	str	r0, [r7, #4]
 8017566:	4608      	mov	r0, r1
 8017568:	4611      	mov	r1, r2
 801756a:	461a      	mov	r2, r3
 801756c:	4603      	mov	r3, r0
 801756e:	70fb      	strb	r3, [r7, #3]
 8017570:	460b      	mov	r3, r1
 8017572:	70bb      	strb	r3, [r7, #2]
 8017574:	4613      	mov	r3, r2
 8017576:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017578:	2300      	movs	r3, #0
 801757a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801757c:	2300      	movs	r3, #0
 801757e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8017586:	787c      	ldrb	r4, [r7, #1]
 8017588:	78ba      	ldrb	r2, [r7, #2]
 801758a:	78f9      	ldrb	r1, [r7, #3]
 801758c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017590:	9303      	str	r3, [sp, #12]
 8017592:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017594:	9302      	str	r3, [sp, #8]
 8017596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017598:	9301      	str	r3, [sp, #4]
 801759a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801759e:	9300      	str	r3, [sp, #0]
 80175a0:	4623      	mov	r3, r4
 80175a2:	f7f2 f913 	bl	80097cc <HAL_HCD_HC_SubmitRequest>
 80175a6:	4603      	mov	r3, r0
 80175a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80175aa:	7bfb      	ldrb	r3, [r7, #15]
 80175ac:	4618      	mov	r0, r3
 80175ae:	f000 f86f 	bl	8017690 <USBH_Get_USB_Status>
 80175b2:	4603      	mov	r3, r0
 80175b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80175b8:	4618      	mov	r0, r3
 80175ba:	3714      	adds	r7, #20
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd90      	pop	{r4, r7, pc}

080175c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b082      	sub	sp, #8
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
 80175c8:	460b      	mov	r3, r1
 80175ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80175d2:	78fa      	ldrb	r2, [r7, #3]
 80175d4:	4611      	mov	r1, r2
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7f2 fbbc 	bl	8009d54 <HAL_HCD_HC_GetURBState>
 80175dc:	4603      	mov	r3, r0
}
 80175de:	4618      	mov	r0, r3
 80175e0:	3708      	adds	r7, #8
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}

080175e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80175e6:	b580      	push	{r7, lr}
 80175e8:	b082      	sub	sp, #8
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	6078      	str	r0, [r7, #4]
 80175ee:	460b      	mov	r3, r1
 80175f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80175f8:	2b01      	cmp	r3, #1
 80175fa:	d103      	bne.n	8017604 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80175fc:	78fb      	ldrb	r3, [r7, #3]
 80175fe:	4618      	mov	r0, r3
 8017600:	f000 f872 	bl	80176e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8017604:	20c8      	movs	r0, #200	; 0xc8
 8017606:	f7f0 f87d 	bl	8007704 <HAL_Delay>
  return USBH_OK;
 801760a:	2300      	movs	r3, #0
}
 801760c:	4618      	mov	r0, r3
 801760e:	3708      	adds	r7, #8
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8017614:	b480      	push	{r7}
 8017616:	b085      	sub	sp, #20
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	460b      	mov	r3, r1
 801761e:	70fb      	strb	r3, [r7, #3]
 8017620:	4613      	mov	r3, r2
 8017622:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801762a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801762c:	78fa      	ldrb	r2, [r7, #3]
 801762e:	68f9      	ldr	r1, [r7, #12]
 8017630:	4613      	mov	r3, r2
 8017632:	009b      	lsls	r3, r3, #2
 8017634:	4413      	add	r3, r2
 8017636:	00db      	lsls	r3, r3, #3
 8017638:	440b      	add	r3, r1
 801763a:	333b      	adds	r3, #59	; 0x3b
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d00a      	beq.n	8017658 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8017642:	78fa      	ldrb	r2, [r7, #3]
 8017644:	68f9      	ldr	r1, [r7, #12]
 8017646:	4613      	mov	r3, r2
 8017648:	009b      	lsls	r3, r3, #2
 801764a:	4413      	add	r3, r2
 801764c:	00db      	lsls	r3, r3, #3
 801764e:	440b      	add	r3, r1
 8017650:	3350      	adds	r3, #80	; 0x50
 8017652:	78ba      	ldrb	r2, [r7, #2]
 8017654:	701a      	strb	r2, [r3, #0]
 8017656:	e009      	b.n	801766c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8017658:	78fa      	ldrb	r2, [r7, #3]
 801765a:	68f9      	ldr	r1, [r7, #12]
 801765c:	4613      	mov	r3, r2
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	4413      	add	r3, r2
 8017662:	00db      	lsls	r3, r3, #3
 8017664:	440b      	add	r3, r1
 8017666:	3351      	adds	r3, #81	; 0x51
 8017668:	78ba      	ldrb	r2, [r7, #2]
 801766a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801766c:	2300      	movs	r3, #0
}
 801766e:	4618      	mov	r0, r3
 8017670:	3714      	adds	r7, #20
 8017672:	46bd      	mov	sp, r7
 8017674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017678:	4770      	bx	lr

0801767a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801767a:	b580      	push	{r7, lr}
 801767c:	b082      	sub	sp, #8
 801767e:	af00      	add	r7, sp, #0
 8017680:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7f0 f83e 	bl	8007704 <HAL_Delay>
}
 8017688:	bf00      	nop
 801768a:	3708      	adds	r7, #8
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}

08017690 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017690:	b480      	push	{r7}
 8017692:	b085      	sub	sp, #20
 8017694:	af00      	add	r7, sp, #0
 8017696:	4603      	mov	r3, r0
 8017698:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801769a:	2300      	movs	r3, #0
 801769c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801769e:	79fb      	ldrb	r3, [r7, #7]
 80176a0:	2b03      	cmp	r3, #3
 80176a2:	d817      	bhi.n	80176d4 <USBH_Get_USB_Status+0x44>
 80176a4:	a201      	add	r2, pc, #4	; (adr r2, 80176ac <USBH_Get_USB_Status+0x1c>)
 80176a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176aa:	bf00      	nop
 80176ac:	080176bd 	.word	0x080176bd
 80176b0:	080176c3 	.word	0x080176c3
 80176b4:	080176c9 	.word	0x080176c9
 80176b8:	080176cf 	.word	0x080176cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80176bc:	2300      	movs	r3, #0
 80176be:	73fb      	strb	r3, [r7, #15]
    break;
 80176c0:	e00b      	b.n	80176da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80176c2:	2302      	movs	r3, #2
 80176c4:	73fb      	strb	r3, [r7, #15]
    break;
 80176c6:	e008      	b.n	80176da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80176c8:	2301      	movs	r3, #1
 80176ca:	73fb      	strb	r3, [r7, #15]
    break;
 80176cc:	e005      	b.n	80176da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80176ce:	2302      	movs	r3, #2
 80176d0:	73fb      	strb	r3, [r7, #15]
    break;
 80176d2:	e002      	b.n	80176da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80176d4:	2302      	movs	r3, #2
 80176d6:	73fb      	strb	r3, [r7, #15]
    break;
 80176d8:	bf00      	nop
  }
  return usb_status;
 80176da:	7bfb      	ldrb	r3, [r7, #15]
}
 80176dc:	4618      	mov	r0, r3
 80176de:	3714      	adds	r7, #20
 80176e0:	46bd      	mov	sp, r7
 80176e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e6:	4770      	bx	lr

080176e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	4603      	mov	r3, r0
 80176f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80176f2:	79fb      	ldrb	r3, [r7, #7]
 80176f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80176f6:	79fb      	ldrb	r3, [r7, #7]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d102      	bne.n	8017702 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80176fc:	2301      	movs	r3, #1
 80176fe:	73fb      	strb	r3, [r7, #15]
 8017700:	e001      	b.n	8017706 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8017702:	2300      	movs	r3, #0
 8017704:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8017706:	7bfb      	ldrb	r3, [r7, #15]
 8017708:	461a      	mov	r2, r3
 801770a:	2120      	movs	r1, #32
 801770c:	4803      	ldr	r0, [pc, #12]	; (801771c <MX_DriverVbusFS+0x34>)
 801770e:	f7f1 ff0d 	bl	800952c <HAL_GPIO_WritePin>
}
 8017712:	bf00      	nop
 8017714:	3710      	adds	r7, #16
 8017716:	46bd      	mov	sp, r7
 8017718:	bd80      	pop	{r7, pc}
 801771a:	bf00      	nop
 801771c:	40020c00 	.word	0x40020c00

08017720 <__errno>:
 8017720:	4b01      	ldr	r3, [pc, #4]	; (8017728 <__errno+0x8>)
 8017722:	6818      	ldr	r0, [r3, #0]
 8017724:	4770      	bx	lr
 8017726:	bf00      	nop
 8017728:	20000098 	.word	0x20000098

0801772c <__libc_init_array>:
 801772c:	b570      	push	{r4, r5, r6, lr}
 801772e:	4e0d      	ldr	r6, [pc, #52]	; (8017764 <__libc_init_array+0x38>)
 8017730:	4c0d      	ldr	r4, [pc, #52]	; (8017768 <__libc_init_array+0x3c>)
 8017732:	1ba4      	subs	r4, r4, r6
 8017734:	10a4      	asrs	r4, r4, #2
 8017736:	2500      	movs	r5, #0
 8017738:	42a5      	cmp	r5, r4
 801773a:	d109      	bne.n	8017750 <__libc_init_array+0x24>
 801773c:	4e0b      	ldr	r6, [pc, #44]	; (801776c <__libc_init_array+0x40>)
 801773e:	4c0c      	ldr	r4, [pc, #48]	; (8017770 <__libc_init_array+0x44>)
 8017740:	f000 fdfc 	bl	801833c <_init>
 8017744:	1ba4      	subs	r4, r4, r6
 8017746:	10a4      	asrs	r4, r4, #2
 8017748:	2500      	movs	r5, #0
 801774a:	42a5      	cmp	r5, r4
 801774c:	d105      	bne.n	801775a <__libc_init_array+0x2e>
 801774e:	bd70      	pop	{r4, r5, r6, pc}
 8017750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017754:	4798      	blx	r3
 8017756:	3501      	adds	r5, #1
 8017758:	e7ee      	b.n	8017738 <__libc_init_array+0xc>
 801775a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801775e:	4798      	blx	r3
 8017760:	3501      	adds	r5, #1
 8017762:	e7f2      	b.n	801774a <__libc_init_array+0x1e>
 8017764:	0801a0f0 	.word	0x0801a0f0
 8017768:	0801a0f0 	.word	0x0801a0f0
 801776c:	0801a0f0 	.word	0x0801a0f0
 8017770:	0801a0f4 	.word	0x0801a0f4

08017774 <malloc>:
 8017774:	4b02      	ldr	r3, [pc, #8]	; (8017780 <malloc+0xc>)
 8017776:	4601      	mov	r1, r0
 8017778:	6818      	ldr	r0, [r3, #0]
 801777a:	f000 b86d 	b.w	8017858 <_malloc_r>
 801777e:	bf00      	nop
 8017780:	20000098 	.word	0x20000098

08017784 <free>:
 8017784:	4b02      	ldr	r3, [pc, #8]	; (8017790 <free+0xc>)
 8017786:	4601      	mov	r1, r0
 8017788:	6818      	ldr	r0, [r3, #0]
 801778a:	f000 b817 	b.w	80177bc <_free_r>
 801778e:	bf00      	nop
 8017790:	20000098 	.word	0x20000098

08017794 <memcpy>:
 8017794:	b510      	push	{r4, lr}
 8017796:	1e43      	subs	r3, r0, #1
 8017798:	440a      	add	r2, r1
 801779a:	4291      	cmp	r1, r2
 801779c:	d100      	bne.n	80177a0 <memcpy+0xc>
 801779e:	bd10      	pop	{r4, pc}
 80177a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177a8:	e7f7      	b.n	801779a <memcpy+0x6>

080177aa <memset>:
 80177aa:	4402      	add	r2, r0
 80177ac:	4603      	mov	r3, r0
 80177ae:	4293      	cmp	r3, r2
 80177b0:	d100      	bne.n	80177b4 <memset+0xa>
 80177b2:	4770      	bx	lr
 80177b4:	f803 1b01 	strb.w	r1, [r3], #1
 80177b8:	e7f9      	b.n	80177ae <memset+0x4>
	...

080177bc <_free_r>:
 80177bc:	b538      	push	{r3, r4, r5, lr}
 80177be:	4605      	mov	r5, r0
 80177c0:	2900      	cmp	r1, #0
 80177c2:	d045      	beq.n	8017850 <_free_r+0x94>
 80177c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177c8:	1f0c      	subs	r4, r1, #4
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	bfb8      	it	lt
 80177ce:	18e4      	addlt	r4, r4, r3
 80177d0:	f000 f8cc 	bl	801796c <__malloc_lock>
 80177d4:	4a1f      	ldr	r2, [pc, #124]	; (8017854 <_free_r+0x98>)
 80177d6:	6813      	ldr	r3, [r2, #0]
 80177d8:	4610      	mov	r0, r2
 80177da:	b933      	cbnz	r3, 80177ea <_free_r+0x2e>
 80177dc:	6063      	str	r3, [r4, #4]
 80177de:	6014      	str	r4, [r2, #0]
 80177e0:	4628      	mov	r0, r5
 80177e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80177e6:	f000 b8c2 	b.w	801796e <__malloc_unlock>
 80177ea:	42a3      	cmp	r3, r4
 80177ec:	d90c      	bls.n	8017808 <_free_r+0x4c>
 80177ee:	6821      	ldr	r1, [r4, #0]
 80177f0:	1862      	adds	r2, r4, r1
 80177f2:	4293      	cmp	r3, r2
 80177f4:	bf04      	itt	eq
 80177f6:	681a      	ldreq	r2, [r3, #0]
 80177f8:	685b      	ldreq	r3, [r3, #4]
 80177fa:	6063      	str	r3, [r4, #4]
 80177fc:	bf04      	itt	eq
 80177fe:	1852      	addeq	r2, r2, r1
 8017800:	6022      	streq	r2, [r4, #0]
 8017802:	6004      	str	r4, [r0, #0]
 8017804:	e7ec      	b.n	80177e0 <_free_r+0x24>
 8017806:	4613      	mov	r3, r2
 8017808:	685a      	ldr	r2, [r3, #4]
 801780a:	b10a      	cbz	r2, 8017810 <_free_r+0x54>
 801780c:	42a2      	cmp	r2, r4
 801780e:	d9fa      	bls.n	8017806 <_free_r+0x4a>
 8017810:	6819      	ldr	r1, [r3, #0]
 8017812:	1858      	adds	r0, r3, r1
 8017814:	42a0      	cmp	r0, r4
 8017816:	d10b      	bne.n	8017830 <_free_r+0x74>
 8017818:	6820      	ldr	r0, [r4, #0]
 801781a:	4401      	add	r1, r0
 801781c:	1858      	adds	r0, r3, r1
 801781e:	4282      	cmp	r2, r0
 8017820:	6019      	str	r1, [r3, #0]
 8017822:	d1dd      	bne.n	80177e0 <_free_r+0x24>
 8017824:	6810      	ldr	r0, [r2, #0]
 8017826:	6852      	ldr	r2, [r2, #4]
 8017828:	605a      	str	r2, [r3, #4]
 801782a:	4401      	add	r1, r0
 801782c:	6019      	str	r1, [r3, #0]
 801782e:	e7d7      	b.n	80177e0 <_free_r+0x24>
 8017830:	d902      	bls.n	8017838 <_free_r+0x7c>
 8017832:	230c      	movs	r3, #12
 8017834:	602b      	str	r3, [r5, #0]
 8017836:	e7d3      	b.n	80177e0 <_free_r+0x24>
 8017838:	6820      	ldr	r0, [r4, #0]
 801783a:	1821      	adds	r1, r4, r0
 801783c:	428a      	cmp	r2, r1
 801783e:	bf04      	itt	eq
 8017840:	6811      	ldreq	r1, [r2, #0]
 8017842:	6852      	ldreq	r2, [r2, #4]
 8017844:	6062      	str	r2, [r4, #4]
 8017846:	bf04      	itt	eq
 8017848:	1809      	addeq	r1, r1, r0
 801784a:	6021      	streq	r1, [r4, #0]
 801784c:	605c      	str	r4, [r3, #4]
 801784e:	e7c7      	b.n	80177e0 <_free_r+0x24>
 8017850:	bd38      	pop	{r3, r4, r5, pc}
 8017852:	bf00      	nop
 8017854:	20009e88 	.word	0x20009e88

08017858 <_malloc_r>:
 8017858:	b570      	push	{r4, r5, r6, lr}
 801785a:	1ccd      	adds	r5, r1, #3
 801785c:	f025 0503 	bic.w	r5, r5, #3
 8017860:	3508      	adds	r5, #8
 8017862:	2d0c      	cmp	r5, #12
 8017864:	bf38      	it	cc
 8017866:	250c      	movcc	r5, #12
 8017868:	2d00      	cmp	r5, #0
 801786a:	4606      	mov	r6, r0
 801786c:	db01      	blt.n	8017872 <_malloc_r+0x1a>
 801786e:	42a9      	cmp	r1, r5
 8017870:	d903      	bls.n	801787a <_malloc_r+0x22>
 8017872:	230c      	movs	r3, #12
 8017874:	6033      	str	r3, [r6, #0]
 8017876:	2000      	movs	r0, #0
 8017878:	bd70      	pop	{r4, r5, r6, pc}
 801787a:	f000 f877 	bl	801796c <__malloc_lock>
 801787e:	4a21      	ldr	r2, [pc, #132]	; (8017904 <_malloc_r+0xac>)
 8017880:	6814      	ldr	r4, [r2, #0]
 8017882:	4621      	mov	r1, r4
 8017884:	b991      	cbnz	r1, 80178ac <_malloc_r+0x54>
 8017886:	4c20      	ldr	r4, [pc, #128]	; (8017908 <_malloc_r+0xb0>)
 8017888:	6823      	ldr	r3, [r4, #0]
 801788a:	b91b      	cbnz	r3, 8017894 <_malloc_r+0x3c>
 801788c:	4630      	mov	r0, r6
 801788e:	f000 f83d 	bl	801790c <_sbrk_r>
 8017892:	6020      	str	r0, [r4, #0]
 8017894:	4629      	mov	r1, r5
 8017896:	4630      	mov	r0, r6
 8017898:	f000 f838 	bl	801790c <_sbrk_r>
 801789c:	1c43      	adds	r3, r0, #1
 801789e:	d124      	bne.n	80178ea <_malloc_r+0x92>
 80178a0:	230c      	movs	r3, #12
 80178a2:	6033      	str	r3, [r6, #0]
 80178a4:	4630      	mov	r0, r6
 80178a6:	f000 f862 	bl	801796e <__malloc_unlock>
 80178aa:	e7e4      	b.n	8017876 <_malloc_r+0x1e>
 80178ac:	680b      	ldr	r3, [r1, #0]
 80178ae:	1b5b      	subs	r3, r3, r5
 80178b0:	d418      	bmi.n	80178e4 <_malloc_r+0x8c>
 80178b2:	2b0b      	cmp	r3, #11
 80178b4:	d90f      	bls.n	80178d6 <_malloc_r+0x7e>
 80178b6:	600b      	str	r3, [r1, #0]
 80178b8:	50cd      	str	r5, [r1, r3]
 80178ba:	18cc      	adds	r4, r1, r3
 80178bc:	4630      	mov	r0, r6
 80178be:	f000 f856 	bl	801796e <__malloc_unlock>
 80178c2:	f104 000b 	add.w	r0, r4, #11
 80178c6:	1d23      	adds	r3, r4, #4
 80178c8:	f020 0007 	bic.w	r0, r0, #7
 80178cc:	1ac3      	subs	r3, r0, r3
 80178ce:	d0d3      	beq.n	8017878 <_malloc_r+0x20>
 80178d0:	425a      	negs	r2, r3
 80178d2:	50e2      	str	r2, [r4, r3]
 80178d4:	e7d0      	b.n	8017878 <_malloc_r+0x20>
 80178d6:	428c      	cmp	r4, r1
 80178d8:	684b      	ldr	r3, [r1, #4]
 80178da:	bf16      	itet	ne
 80178dc:	6063      	strne	r3, [r4, #4]
 80178de:	6013      	streq	r3, [r2, #0]
 80178e0:	460c      	movne	r4, r1
 80178e2:	e7eb      	b.n	80178bc <_malloc_r+0x64>
 80178e4:	460c      	mov	r4, r1
 80178e6:	6849      	ldr	r1, [r1, #4]
 80178e8:	e7cc      	b.n	8017884 <_malloc_r+0x2c>
 80178ea:	1cc4      	adds	r4, r0, #3
 80178ec:	f024 0403 	bic.w	r4, r4, #3
 80178f0:	42a0      	cmp	r0, r4
 80178f2:	d005      	beq.n	8017900 <_malloc_r+0xa8>
 80178f4:	1a21      	subs	r1, r4, r0
 80178f6:	4630      	mov	r0, r6
 80178f8:	f000 f808 	bl	801790c <_sbrk_r>
 80178fc:	3001      	adds	r0, #1
 80178fe:	d0cf      	beq.n	80178a0 <_malloc_r+0x48>
 8017900:	6025      	str	r5, [r4, #0]
 8017902:	e7db      	b.n	80178bc <_malloc_r+0x64>
 8017904:	20009e88 	.word	0x20009e88
 8017908:	20009e8c 	.word	0x20009e8c

0801790c <_sbrk_r>:
 801790c:	b538      	push	{r3, r4, r5, lr}
 801790e:	4c06      	ldr	r4, [pc, #24]	; (8017928 <_sbrk_r+0x1c>)
 8017910:	2300      	movs	r3, #0
 8017912:	4605      	mov	r5, r0
 8017914:	4608      	mov	r0, r1
 8017916:	6023      	str	r3, [r4, #0]
 8017918:	f7ec f820 	bl	800395c <_sbrk>
 801791c:	1c43      	adds	r3, r0, #1
 801791e:	d102      	bne.n	8017926 <_sbrk_r+0x1a>
 8017920:	6823      	ldr	r3, [r4, #0]
 8017922:	b103      	cbz	r3, 8017926 <_sbrk_r+0x1a>
 8017924:	602b      	str	r3, [r5, #0]
 8017926:	bd38      	pop	{r3, r4, r5, pc}
 8017928:	2001c118 	.word	0x2001c118

0801792c <siprintf>:
 801792c:	b40e      	push	{r1, r2, r3}
 801792e:	b500      	push	{lr}
 8017930:	b09c      	sub	sp, #112	; 0x70
 8017932:	ab1d      	add	r3, sp, #116	; 0x74
 8017934:	9002      	str	r0, [sp, #8]
 8017936:	9006      	str	r0, [sp, #24]
 8017938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801793c:	4809      	ldr	r0, [pc, #36]	; (8017964 <siprintf+0x38>)
 801793e:	9107      	str	r1, [sp, #28]
 8017940:	9104      	str	r1, [sp, #16]
 8017942:	4909      	ldr	r1, [pc, #36]	; (8017968 <siprintf+0x3c>)
 8017944:	f853 2b04 	ldr.w	r2, [r3], #4
 8017948:	9105      	str	r1, [sp, #20]
 801794a:	6800      	ldr	r0, [r0, #0]
 801794c:	9301      	str	r3, [sp, #4]
 801794e:	a902      	add	r1, sp, #8
 8017950:	f000 f868 	bl	8017a24 <_svfiprintf_r>
 8017954:	9b02      	ldr	r3, [sp, #8]
 8017956:	2200      	movs	r2, #0
 8017958:	701a      	strb	r2, [r3, #0]
 801795a:	b01c      	add	sp, #112	; 0x70
 801795c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017960:	b003      	add	sp, #12
 8017962:	4770      	bx	lr
 8017964:	20000098 	.word	0x20000098
 8017968:	ffff0208 	.word	0xffff0208

0801796c <__malloc_lock>:
 801796c:	4770      	bx	lr

0801796e <__malloc_unlock>:
 801796e:	4770      	bx	lr

08017970 <__ssputs_r>:
 8017970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017974:	688e      	ldr	r6, [r1, #8]
 8017976:	429e      	cmp	r6, r3
 8017978:	4682      	mov	sl, r0
 801797a:	460c      	mov	r4, r1
 801797c:	4690      	mov	r8, r2
 801797e:	4699      	mov	r9, r3
 8017980:	d837      	bhi.n	80179f2 <__ssputs_r+0x82>
 8017982:	898a      	ldrh	r2, [r1, #12]
 8017984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017988:	d031      	beq.n	80179ee <__ssputs_r+0x7e>
 801798a:	6825      	ldr	r5, [r4, #0]
 801798c:	6909      	ldr	r1, [r1, #16]
 801798e:	1a6f      	subs	r7, r5, r1
 8017990:	6965      	ldr	r5, [r4, #20]
 8017992:	2302      	movs	r3, #2
 8017994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017998:	fb95 f5f3 	sdiv	r5, r5, r3
 801799c:	f109 0301 	add.w	r3, r9, #1
 80179a0:	443b      	add	r3, r7
 80179a2:	429d      	cmp	r5, r3
 80179a4:	bf38      	it	cc
 80179a6:	461d      	movcc	r5, r3
 80179a8:	0553      	lsls	r3, r2, #21
 80179aa:	d530      	bpl.n	8017a0e <__ssputs_r+0x9e>
 80179ac:	4629      	mov	r1, r5
 80179ae:	f7ff ff53 	bl	8017858 <_malloc_r>
 80179b2:	4606      	mov	r6, r0
 80179b4:	b950      	cbnz	r0, 80179cc <__ssputs_r+0x5c>
 80179b6:	230c      	movs	r3, #12
 80179b8:	f8ca 3000 	str.w	r3, [sl]
 80179bc:	89a3      	ldrh	r3, [r4, #12]
 80179be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179c2:	81a3      	strh	r3, [r4, #12]
 80179c4:	f04f 30ff 	mov.w	r0, #4294967295
 80179c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179cc:	463a      	mov	r2, r7
 80179ce:	6921      	ldr	r1, [r4, #16]
 80179d0:	f7ff fee0 	bl	8017794 <memcpy>
 80179d4:	89a3      	ldrh	r3, [r4, #12]
 80179d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80179da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179de:	81a3      	strh	r3, [r4, #12]
 80179e0:	6126      	str	r6, [r4, #16]
 80179e2:	6165      	str	r5, [r4, #20]
 80179e4:	443e      	add	r6, r7
 80179e6:	1bed      	subs	r5, r5, r7
 80179e8:	6026      	str	r6, [r4, #0]
 80179ea:	60a5      	str	r5, [r4, #8]
 80179ec:	464e      	mov	r6, r9
 80179ee:	454e      	cmp	r6, r9
 80179f0:	d900      	bls.n	80179f4 <__ssputs_r+0x84>
 80179f2:	464e      	mov	r6, r9
 80179f4:	4632      	mov	r2, r6
 80179f6:	4641      	mov	r1, r8
 80179f8:	6820      	ldr	r0, [r4, #0]
 80179fa:	f000 fa93 	bl	8017f24 <memmove>
 80179fe:	68a3      	ldr	r3, [r4, #8]
 8017a00:	1b9b      	subs	r3, r3, r6
 8017a02:	60a3      	str	r3, [r4, #8]
 8017a04:	6823      	ldr	r3, [r4, #0]
 8017a06:	441e      	add	r6, r3
 8017a08:	6026      	str	r6, [r4, #0]
 8017a0a:	2000      	movs	r0, #0
 8017a0c:	e7dc      	b.n	80179c8 <__ssputs_r+0x58>
 8017a0e:	462a      	mov	r2, r5
 8017a10:	f000 faa1 	bl	8017f56 <_realloc_r>
 8017a14:	4606      	mov	r6, r0
 8017a16:	2800      	cmp	r0, #0
 8017a18:	d1e2      	bne.n	80179e0 <__ssputs_r+0x70>
 8017a1a:	6921      	ldr	r1, [r4, #16]
 8017a1c:	4650      	mov	r0, sl
 8017a1e:	f7ff fecd 	bl	80177bc <_free_r>
 8017a22:	e7c8      	b.n	80179b6 <__ssputs_r+0x46>

08017a24 <_svfiprintf_r>:
 8017a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a28:	461d      	mov	r5, r3
 8017a2a:	898b      	ldrh	r3, [r1, #12]
 8017a2c:	061f      	lsls	r7, r3, #24
 8017a2e:	b09d      	sub	sp, #116	; 0x74
 8017a30:	4680      	mov	r8, r0
 8017a32:	460c      	mov	r4, r1
 8017a34:	4616      	mov	r6, r2
 8017a36:	d50f      	bpl.n	8017a58 <_svfiprintf_r+0x34>
 8017a38:	690b      	ldr	r3, [r1, #16]
 8017a3a:	b96b      	cbnz	r3, 8017a58 <_svfiprintf_r+0x34>
 8017a3c:	2140      	movs	r1, #64	; 0x40
 8017a3e:	f7ff ff0b 	bl	8017858 <_malloc_r>
 8017a42:	6020      	str	r0, [r4, #0]
 8017a44:	6120      	str	r0, [r4, #16]
 8017a46:	b928      	cbnz	r0, 8017a54 <_svfiprintf_r+0x30>
 8017a48:	230c      	movs	r3, #12
 8017a4a:	f8c8 3000 	str.w	r3, [r8]
 8017a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a52:	e0c8      	b.n	8017be6 <_svfiprintf_r+0x1c2>
 8017a54:	2340      	movs	r3, #64	; 0x40
 8017a56:	6163      	str	r3, [r4, #20]
 8017a58:	2300      	movs	r3, #0
 8017a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8017a5c:	2320      	movs	r3, #32
 8017a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a62:	2330      	movs	r3, #48	; 0x30
 8017a64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a68:	9503      	str	r5, [sp, #12]
 8017a6a:	f04f 0b01 	mov.w	fp, #1
 8017a6e:	4637      	mov	r7, r6
 8017a70:	463d      	mov	r5, r7
 8017a72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017a76:	b10b      	cbz	r3, 8017a7c <_svfiprintf_r+0x58>
 8017a78:	2b25      	cmp	r3, #37	; 0x25
 8017a7a:	d13e      	bne.n	8017afa <_svfiprintf_r+0xd6>
 8017a7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8017a80:	d00b      	beq.n	8017a9a <_svfiprintf_r+0x76>
 8017a82:	4653      	mov	r3, sl
 8017a84:	4632      	mov	r2, r6
 8017a86:	4621      	mov	r1, r4
 8017a88:	4640      	mov	r0, r8
 8017a8a:	f7ff ff71 	bl	8017970 <__ssputs_r>
 8017a8e:	3001      	adds	r0, #1
 8017a90:	f000 80a4 	beq.w	8017bdc <_svfiprintf_r+0x1b8>
 8017a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a96:	4453      	add	r3, sl
 8017a98:	9309      	str	r3, [sp, #36]	; 0x24
 8017a9a:	783b      	ldrb	r3, [r7, #0]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	f000 809d 	beq.w	8017bdc <_svfiprintf_r+0x1b8>
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8017aa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017aac:	9304      	str	r3, [sp, #16]
 8017aae:	9307      	str	r3, [sp, #28]
 8017ab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ab4:	931a      	str	r3, [sp, #104]	; 0x68
 8017ab6:	462f      	mov	r7, r5
 8017ab8:	2205      	movs	r2, #5
 8017aba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017abe:	4850      	ldr	r0, [pc, #320]	; (8017c00 <_svfiprintf_r+0x1dc>)
 8017ac0:	f7e8 fba6 	bl	8000210 <memchr>
 8017ac4:	9b04      	ldr	r3, [sp, #16]
 8017ac6:	b9d0      	cbnz	r0, 8017afe <_svfiprintf_r+0xda>
 8017ac8:	06d9      	lsls	r1, r3, #27
 8017aca:	bf44      	itt	mi
 8017acc:	2220      	movmi	r2, #32
 8017ace:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017ad2:	071a      	lsls	r2, r3, #28
 8017ad4:	bf44      	itt	mi
 8017ad6:	222b      	movmi	r2, #43	; 0x2b
 8017ad8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017adc:	782a      	ldrb	r2, [r5, #0]
 8017ade:	2a2a      	cmp	r2, #42	; 0x2a
 8017ae0:	d015      	beq.n	8017b0e <_svfiprintf_r+0xea>
 8017ae2:	9a07      	ldr	r2, [sp, #28]
 8017ae4:	462f      	mov	r7, r5
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	250a      	movs	r5, #10
 8017aea:	4639      	mov	r1, r7
 8017aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017af0:	3b30      	subs	r3, #48	; 0x30
 8017af2:	2b09      	cmp	r3, #9
 8017af4:	d94d      	bls.n	8017b92 <_svfiprintf_r+0x16e>
 8017af6:	b1b8      	cbz	r0, 8017b28 <_svfiprintf_r+0x104>
 8017af8:	e00f      	b.n	8017b1a <_svfiprintf_r+0xf6>
 8017afa:	462f      	mov	r7, r5
 8017afc:	e7b8      	b.n	8017a70 <_svfiprintf_r+0x4c>
 8017afe:	4a40      	ldr	r2, [pc, #256]	; (8017c00 <_svfiprintf_r+0x1dc>)
 8017b00:	1a80      	subs	r0, r0, r2
 8017b02:	fa0b f000 	lsl.w	r0, fp, r0
 8017b06:	4318      	orrs	r0, r3
 8017b08:	9004      	str	r0, [sp, #16]
 8017b0a:	463d      	mov	r5, r7
 8017b0c:	e7d3      	b.n	8017ab6 <_svfiprintf_r+0x92>
 8017b0e:	9a03      	ldr	r2, [sp, #12]
 8017b10:	1d11      	adds	r1, r2, #4
 8017b12:	6812      	ldr	r2, [r2, #0]
 8017b14:	9103      	str	r1, [sp, #12]
 8017b16:	2a00      	cmp	r2, #0
 8017b18:	db01      	blt.n	8017b1e <_svfiprintf_r+0xfa>
 8017b1a:	9207      	str	r2, [sp, #28]
 8017b1c:	e004      	b.n	8017b28 <_svfiprintf_r+0x104>
 8017b1e:	4252      	negs	r2, r2
 8017b20:	f043 0302 	orr.w	r3, r3, #2
 8017b24:	9207      	str	r2, [sp, #28]
 8017b26:	9304      	str	r3, [sp, #16]
 8017b28:	783b      	ldrb	r3, [r7, #0]
 8017b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8017b2c:	d10c      	bne.n	8017b48 <_svfiprintf_r+0x124>
 8017b2e:	787b      	ldrb	r3, [r7, #1]
 8017b30:	2b2a      	cmp	r3, #42	; 0x2a
 8017b32:	d133      	bne.n	8017b9c <_svfiprintf_r+0x178>
 8017b34:	9b03      	ldr	r3, [sp, #12]
 8017b36:	1d1a      	adds	r2, r3, #4
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	9203      	str	r2, [sp, #12]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	bfb8      	it	lt
 8017b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b44:	3702      	adds	r7, #2
 8017b46:	9305      	str	r3, [sp, #20]
 8017b48:	4d2e      	ldr	r5, [pc, #184]	; (8017c04 <_svfiprintf_r+0x1e0>)
 8017b4a:	7839      	ldrb	r1, [r7, #0]
 8017b4c:	2203      	movs	r2, #3
 8017b4e:	4628      	mov	r0, r5
 8017b50:	f7e8 fb5e 	bl	8000210 <memchr>
 8017b54:	b138      	cbz	r0, 8017b66 <_svfiprintf_r+0x142>
 8017b56:	2340      	movs	r3, #64	; 0x40
 8017b58:	1b40      	subs	r0, r0, r5
 8017b5a:	fa03 f000 	lsl.w	r0, r3, r0
 8017b5e:	9b04      	ldr	r3, [sp, #16]
 8017b60:	4303      	orrs	r3, r0
 8017b62:	3701      	adds	r7, #1
 8017b64:	9304      	str	r3, [sp, #16]
 8017b66:	7839      	ldrb	r1, [r7, #0]
 8017b68:	4827      	ldr	r0, [pc, #156]	; (8017c08 <_svfiprintf_r+0x1e4>)
 8017b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b6e:	2206      	movs	r2, #6
 8017b70:	1c7e      	adds	r6, r7, #1
 8017b72:	f7e8 fb4d 	bl	8000210 <memchr>
 8017b76:	2800      	cmp	r0, #0
 8017b78:	d038      	beq.n	8017bec <_svfiprintf_r+0x1c8>
 8017b7a:	4b24      	ldr	r3, [pc, #144]	; (8017c0c <_svfiprintf_r+0x1e8>)
 8017b7c:	bb13      	cbnz	r3, 8017bc4 <_svfiprintf_r+0x1a0>
 8017b7e:	9b03      	ldr	r3, [sp, #12]
 8017b80:	3307      	adds	r3, #7
 8017b82:	f023 0307 	bic.w	r3, r3, #7
 8017b86:	3308      	adds	r3, #8
 8017b88:	9303      	str	r3, [sp, #12]
 8017b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b8c:	444b      	add	r3, r9
 8017b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8017b90:	e76d      	b.n	8017a6e <_svfiprintf_r+0x4a>
 8017b92:	fb05 3202 	mla	r2, r5, r2, r3
 8017b96:	2001      	movs	r0, #1
 8017b98:	460f      	mov	r7, r1
 8017b9a:	e7a6      	b.n	8017aea <_svfiprintf_r+0xc6>
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	3701      	adds	r7, #1
 8017ba0:	9305      	str	r3, [sp, #20]
 8017ba2:	4619      	mov	r1, r3
 8017ba4:	250a      	movs	r5, #10
 8017ba6:	4638      	mov	r0, r7
 8017ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bac:	3a30      	subs	r2, #48	; 0x30
 8017bae:	2a09      	cmp	r2, #9
 8017bb0:	d903      	bls.n	8017bba <_svfiprintf_r+0x196>
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d0c8      	beq.n	8017b48 <_svfiprintf_r+0x124>
 8017bb6:	9105      	str	r1, [sp, #20]
 8017bb8:	e7c6      	b.n	8017b48 <_svfiprintf_r+0x124>
 8017bba:	fb05 2101 	mla	r1, r5, r1, r2
 8017bbe:	2301      	movs	r3, #1
 8017bc0:	4607      	mov	r7, r0
 8017bc2:	e7f0      	b.n	8017ba6 <_svfiprintf_r+0x182>
 8017bc4:	ab03      	add	r3, sp, #12
 8017bc6:	9300      	str	r3, [sp, #0]
 8017bc8:	4622      	mov	r2, r4
 8017bca:	4b11      	ldr	r3, [pc, #68]	; (8017c10 <_svfiprintf_r+0x1ec>)
 8017bcc:	a904      	add	r1, sp, #16
 8017bce:	4640      	mov	r0, r8
 8017bd0:	f3af 8000 	nop.w
 8017bd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017bd8:	4681      	mov	r9, r0
 8017bda:	d1d6      	bne.n	8017b8a <_svfiprintf_r+0x166>
 8017bdc:	89a3      	ldrh	r3, [r4, #12]
 8017bde:	065b      	lsls	r3, r3, #25
 8017be0:	f53f af35 	bmi.w	8017a4e <_svfiprintf_r+0x2a>
 8017be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017be6:	b01d      	add	sp, #116	; 0x74
 8017be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bec:	ab03      	add	r3, sp, #12
 8017bee:	9300      	str	r3, [sp, #0]
 8017bf0:	4622      	mov	r2, r4
 8017bf2:	4b07      	ldr	r3, [pc, #28]	; (8017c10 <_svfiprintf_r+0x1ec>)
 8017bf4:	a904      	add	r1, sp, #16
 8017bf6:	4640      	mov	r0, r8
 8017bf8:	f000 f882 	bl	8017d00 <_printf_i>
 8017bfc:	e7ea      	b.n	8017bd4 <_svfiprintf_r+0x1b0>
 8017bfe:	bf00      	nop
 8017c00:	0801a0ac 	.word	0x0801a0ac
 8017c04:	0801a0b2 	.word	0x0801a0b2
 8017c08:	0801a0b6 	.word	0x0801a0b6
 8017c0c:	00000000 	.word	0x00000000
 8017c10:	08017971 	.word	0x08017971

08017c14 <_printf_common>:
 8017c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c18:	4691      	mov	r9, r2
 8017c1a:	461f      	mov	r7, r3
 8017c1c:	688a      	ldr	r2, [r1, #8]
 8017c1e:	690b      	ldr	r3, [r1, #16]
 8017c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017c24:	4293      	cmp	r3, r2
 8017c26:	bfb8      	it	lt
 8017c28:	4613      	movlt	r3, r2
 8017c2a:	f8c9 3000 	str.w	r3, [r9]
 8017c2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017c32:	4606      	mov	r6, r0
 8017c34:	460c      	mov	r4, r1
 8017c36:	b112      	cbz	r2, 8017c3e <_printf_common+0x2a>
 8017c38:	3301      	adds	r3, #1
 8017c3a:	f8c9 3000 	str.w	r3, [r9]
 8017c3e:	6823      	ldr	r3, [r4, #0]
 8017c40:	0699      	lsls	r1, r3, #26
 8017c42:	bf42      	ittt	mi
 8017c44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017c48:	3302      	addmi	r3, #2
 8017c4a:	f8c9 3000 	strmi.w	r3, [r9]
 8017c4e:	6825      	ldr	r5, [r4, #0]
 8017c50:	f015 0506 	ands.w	r5, r5, #6
 8017c54:	d107      	bne.n	8017c66 <_printf_common+0x52>
 8017c56:	f104 0a19 	add.w	sl, r4, #25
 8017c5a:	68e3      	ldr	r3, [r4, #12]
 8017c5c:	f8d9 2000 	ldr.w	r2, [r9]
 8017c60:	1a9b      	subs	r3, r3, r2
 8017c62:	42ab      	cmp	r3, r5
 8017c64:	dc28      	bgt.n	8017cb8 <_printf_common+0xa4>
 8017c66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017c6a:	6822      	ldr	r2, [r4, #0]
 8017c6c:	3300      	adds	r3, #0
 8017c6e:	bf18      	it	ne
 8017c70:	2301      	movne	r3, #1
 8017c72:	0692      	lsls	r2, r2, #26
 8017c74:	d42d      	bmi.n	8017cd2 <_printf_common+0xbe>
 8017c76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c7a:	4639      	mov	r1, r7
 8017c7c:	4630      	mov	r0, r6
 8017c7e:	47c0      	blx	r8
 8017c80:	3001      	adds	r0, #1
 8017c82:	d020      	beq.n	8017cc6 <_printf_common+0xb2>
 8017c84:	6823      	ldr	r3, [r4, #0]
 8017c86:	68e5      	ldr	r5, [r4, #12]
 8017c88:	f8d9 2000 	ldr.w	r2, [r9]
 8017c8c:	f003 0306 	and.w	r3, r3, #6
 8017c90:	2b04      	cmp	r3, #4
 8017c92:	bf08      	it	eq
 8017c94:	1aad      	subeq	r5, r5, r2
 8017c96:	68a3      	ldr	r3, [r4, #8]
 8017c98:	6922      	ldr	r2, [r4, #16]
 8017c9a:	bf0c      	ite	eq
 8017c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ca0:	2500      	movne	r5, #0
 8017ca2:	4293      	cmp	r3, r2
 8017ca4:	bfc4      	itt	gt
 8017ca6:	1a9b      	subgt	r3, r3, r2
 8017ca8:	18ed      	addgt	r5, r5, r3
 8017caa:	f04f 0900 	mov.w	r9, #0
 8017cae:	341a      	adds	r4, #26
 8017cb0:	454d      	cmp	r5, r9
 8017cb2:	d11a      	bne.n	8017cea <_printf_common+0xd6>
 8017cb4:	2000      	movs	r0, #0
 8017cb6:	e008      	b.n	8017cca <_printf_common+0xb6>
 8017cb8:	2301      	movs	r3, #1
 8017cba:	4652      	mov	r2, sl
 8017cbc:	4639      	mov	r1, r7
 8017cbe:	4630      	mov	r0, r6
 8017cc0:	47c0      	blx	r8
 8017cc2:	3001      	adds	r0, #1
 8017cc4:	d103      	bne.n	8017cce <_printf_common+0xba>
 8017cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8017cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cce:	3501      	adds	r5, #1
 8017cd0:	e7c3      	b.n	8017c5a <_printf_common+0x46>
 8017cd2:	18e1      	adds	r1, r4, r3
 8017cd4:	1c5a      	adds	r2, r3, #1
 8017cd6:	2030      	movs	r0, #48	; 0x30
 8017cd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017cdc:	4422      	add	r2, r4
 8017cde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ce2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ce6:	3302      	adds	r3, #2
 8017ce8:	e7c5      	b.n	8017c76 <_printf_common+0x62>
 8017cea:	2301      	movs	r3, #1
 8017cec:	4622      	mov	r2, r4
 8017cee:	4639      	mov	r1, r7
 8017cf0:	4630      	mov	r0, r6
 8017cf2:	47c0      	blx	r8
 8017cf4:	3001      	adds	r0, #1
 8017cf6:	d0e6      	beq.n	8017cc6 <_printf_common+0xb2>
 8017cf8:	f109 0901 	add.w	r9, r9, #1
 8017cfc:	e7d8      	b.n	8017cb0 <_printf_common+0x9c>
	...

08017d00 <_printf_i>:
 8017d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017d08:	460c      	mov	r4, r1
 8017d0a:	7e09      	ldrb	r1, [r1, #24]
 8017d0c:	b085      	sub	sp, #20
 8017d0e:	296e      	cmp	r1, #110	; 0x6e
 8017d10:	4617      	mov	r7, r2
 8017d12:	4606      	mov	r6, r0
 8017d14:	4698      	mov	r8, r3
 8017d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d18:	f000 80b3 	beq.w	8017e82 <_printf_i+0x182>
 8017d1c:	d822      	bhi.n	8017d64 <_printf_i+0x64>
 8017d1e:	2963      	cmp	r1, #99	; 0x63
 8017d20:	d036      	beq.n	8017d90 <_printf_i+0x90>
 8017d22:	d80a      	bhi.n	8017d3a <_printf_i+0x3a>
 8017d24:	2900      	cmp	r1, #0
 8017d26:	f000 80b9 	beq.w	8017e9c <_printf_i+0x19c>
 8017d2a:	2958      	cmp	r1, #88	; 0x58
 8017d2c:	f000 8083 	beq.w	8017e36 <_printf_i+0x136>
 8017d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017d38:	e032      	b.n	8017da0 <_printf_i+0xa0>
 8017d3a:	2964      	cmp	r1, #100	; 0x64
 8017d3c:	d001      	beq.n	8017d42 <_printf_i+0x42>
 8017d3e:	2969      	cmp	r1, #105	; 0x69
 8017d40:	d1f6      	bne.n	8017d30 <_printf_i+0x30>
 8017d42:	6820      	ldr	r0, [r4, #0]
 8017d44:	6813      	ldr	r3, [r2, #0]
 8017d46:	0605      	lsls	r5, r0, #24
 8017d48:	f103 0104 	add.w	r1, r3, #4
 8017d4c:	d52a      	bpl.n	8017da4 <_printf_i+0xa4>
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	6011      	str	r1, [r2, #0]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	da03      	bge.n	8017d5e <_printf_i+0x5e>
 8017d56:	222d      	movs	r2, #45	; 0x2d
 8017d58:	425b      	negs	r3, r3
 8017d5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017d5e:	486f      	ldr	r0, [pc, #444]	; (8017f1c <_printf_i+0x21c>)
 8017d60:	220a      	movs	r2, #10
 8017d62:	e039      	b.n	8017dd8 <_printf_i+0xd8>
 8017d64:	2973      	cmp	r1, #115	; 0x73
 8017d66:	f000 809d 	beq.w	8017ea4 <_printf_i+0x1a4>
 8017d6a:	d808      	bhi.n	8017d7e <_printf_i+0x7e>
 8017d6c:	296f      	cmp	r1, #111	; 0x6f
 8017d6e:	d020      	beq.n	8017db2 <_printf_i+0xb2>
 8017d70:	2970      	cmp	r1, #112	; 0x70
 8017d72:	d1dd      	bne.n	8017d30 <_printf_i+0x30>
 8017d74:	6823      	ldr	r3, [r4, #0]
 8017d76:	f043 0320 	orr.w	r3, r3, #32
 8017d7a:	6023      	str	r3, [r4, #0]
 8017d7c:	e003      	b.n	8017d86 <_printf_i+0x86>
 8017d7e:	2975      	cmp	r1, #117	; 0x75
 8017d80:	d017      	beq.n	8017db2 <_printf_i+0xb2>
 8017d82:	2978      	cmp	r1, #120	; 0x78
 8017d84:	d1d4      	bne.n	8017d30 <_printf_i+0x30>
 8017d86:	2378      	movs	r3, #120	; 0x78
 8017d88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017d8c:	4864      	ldr	r0, [pc, #400]	; (8017f20 <_printf_i+0x220>)
 8017d8e:	e055      	b.n	8017e3c <_printf_i+0x13c>
 8017d90:	6813      	ldr	r3, [r2, #0]
 8017d92:	1d19      	adds	r1, r3, #4
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	6011      	str	r1, [r2, #0]
 8017d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017da0:	2301      	movs	r3, #1
 8017da2:	e08c      	b.n	8017ebe <_printf_i+0x1be>
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	6011      	str	r1, [r2, #0]
 8017da8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017dac:	bf18      	it	ne
 8017dae:	b21b      	sxthne	r3, r3
 8017db0:	e7cf      	b.n	8017d52 <_printf_i+0x52>
 8017db2:	6813      	ldr	r3, [r2, #0]
 8017db4:	6825      	ldr	r5, [r4, #0]
 8017db6:	1d18      	adds	r0, r3, #4
 8017db8:	6010      	str	r0, [r2, #0]
 8017dba:	0628      	lsls	r0, r5, #24
 8017dbc:	d501      	bpl.n	8017dc2 <_printf_i+0xc2>
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	e002      	b.n	8017dc8 <_printf_i+0xc8>
 8017dc2:	0668      	lsls	r0, r5, #25
 8017dc4:	d5fb      	bpl.n	8017dbe <_printf_i+0xbe>
 8017dc6:	881b      	ldrh	r3, [r3, #0]
 8017dc8:	4854      	ldr	r0, [pc, #336]	; (8017f1c <_printf_i+0x21c>)
 8017dca:	296f      	cmp	r1, #111	; 0x6f
 8017dcc:	bf14      	ite	ne
 8017dce:	220a      	movne	r2, #10
 8017dd0:	2208      	moveq	r2, #8
 8017dd2:	2100      	movs	r1, #0
 8017dd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017dd8:	6865      	ldr	r5, [r4, #4]
 8017dda:	60a5      	str	r5, [r4, #8]
 8017ddc:	2d00      	cmp	r5, #0
 8017dde:	f2c0 8095 	blt.w	8017f0c <_printf_i+0x20c>
 8017de2:	6821      	ldr	r1, [r4, #0]
 8017de4:	f021 0104 	bic.w	r1, r1, #4
 8017de8:	6021      	str	r1, [r4, #0]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d13d      	bne.n	8017e6a <_printf_i+0x16a>
 8017dee:	2d00      	cmp	r5, #0
 8017df0:	f040 808e 	bne.w	8017f10 <_printf_i+0x210>
 8017df4:	4665      	mov	r5, ip
 8017df6:	2a08      	cmp	r2, #8
 8017df8:	d10b      	bne.n	8017e12 <_printf_i+0x112>
 8017dfa:	6823      	ldr	r3, [r4, #0]
 8017dfc:	07db      	lsls	r3, r3, #31
 8017dfe:	d508      	bpl.n	8017e12 <_printf_i+0x112>
 8017e00:	6923      	ldr	r3, [r4, #16]
 8017e02:	6862      	ldr	r2, [r4, #4]
 8017e04:	429a      	cmp	r2, r3
 8017e06:	bfde      	ittt	le
 8017e08:	2330      	movle	r3, #48	; 0x30
 8017e0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017e0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017e12:	ebac 0305 	sub.w	r3, ip, r5
 8017e16:	6123      	str	r3, [r4, #16]
 8017e18:	f8cd 8000 	str.w	r8, [sp]
 8017e1c:	463b      	mov	r3, r7
 8017e1e:	aa03      	add	r2, sp, #12
 8017e20:	4621      	mov	r1, r4
 8017e22:	4630      	mov	r0, r6
 8017e24:	f7ff fef6 	bl	8017c14 <_printf_common>
 8017e28:	3001      	adds	r0, #1
 8017e2a:	d14d      	bne.n	8017ec8 <_printf_i+0x1c8>
 8017e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e30:	b005      	add	sp, #20
 8017e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e36:	4839      	ldr	r0, [pc, #228]	; (8017f1c <_printf_i+0x21c>)
 8017e38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017e3c:	6813      	ldr	r3, [r2, #0]
 8017e3e:	6821      	ldr	r1, [r4, #0]
 8017e40:	1d1d      	adds	r5, r3, #4
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	6015      	str	r5, [r2, #0]
 8017e46:	060a      	lsls	r2, r1, #24
 8017e48:	d50b      	bpl.n	8017e62 <_printf_i+0x162>
 8017e4a:	07ca      	lsls	r2, r1, #31
 8017e4c:	bf44      	itt	mi
 8017e4e:	f041 0120 	orrmi.w	r1, r1, #32
 8017e52:	6021      	strmi	r1, [r4, #0]
 8017e54:	b91b      	cbnz	r3, 8017e5e <_printf_i+0x15e>
 8017e56:	6822      	ldr	r2, [r4, #0]
 8017e58:	f022 0220 	bic.w	r2, r2, #32
 8017e5c:	6022      	str	r2, [r4, #0]
 8017e5e:	2210      	movs	r2, #16
 8017e60:	e7b7      	b.n	8017dd2 <_printf_i+0xd2>
 8017e62:	064d      	lsls	r5, r1, #25
 8017e64:	bf48      	it	mi
 8017e66:	b29b      	uxthmi	r3, r3
 8017e68:	e7ef      	b.n	8017e4a <_printf_i+0x14a>
 8017e6a:	4665      	mov	r5, ip
 8017e6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8017e70:	fb02 3311 	mls	r3, r2, r1, r3
 8017e74:	5cc3      	ldrb	r3, [r0, r3]
 8017e76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017e7a:	460b      	mov	r3, r1
 8017e7c:	2900      	cmp	r1, #0
 8017e7e:	d1f5      	bne.n	8017e6c <_printf_i+0x16c>
 8017e80:	e7b9      	b.n	8017df6 <_printf_i+0xf6>
 8017e82:	6813      	ldr	r3, [r2, #0]
 8017e84:	6825      	ldr	r5, [r4, #0]
 8017e86:	6961      	ldr	r1, [r4, #20]
 8017e88:	1d18      	adds	r0, r3, #4
 8017e8a:	6010      	str	r0, [r2, #0]
 8017e8c:	0628      	lsls	r0, r5, #24
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	d501      	bpl.n	8017e96 <_printf_i+0x196>
 8017e92:	6019      	str	r1, [r3, #0]
 8017e94:	e002      	b.n	8017e9c <_printf_i+0x19c>
 8017e96:	066a      	lsls	r2, r5, #25
 8017e98:	d5fb      	bpl.n	8017e92 <_printf_i+0x192>
 8017e9a:	8019      	strh	r1, [r3, #0]
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	6123      	str	r3, [r4, #16]
 8017ea0:	4665      	mov	r5, ip
 8017ea2:	e7b9      	b.n	8017e18 <_printf_i+0x118>
 8017ea4:	6813      	ldr	r3, [r2, #0]
 8017ea6:	1d19      	adds	r1, r3, #4
 8017ea8:	6011      	str	r1, [r2, #0]
 8017eaa:	681d      	ldr	r5, [r3, #0]
 8017eac:	6862      	ldr	r2, [r4, #4]
 8017eae:	2100      	movs	r1, #0
 8017eb0:	4628      	mov	r0, r5
 8017eb2:	f7e8 f9ad 	bl	8000210 <memchr>
 8017eb6:	b108      	cbz	r0, 8017ebc <_printf_i+0x1bc>
 8017eb8:	1b40      	subs	r0, r0, r5
 8017eba:	6060      	str	r0, [r4, #4]
 8017ebc:	6863      	ldr	r3, [r4, #4]
 8017ebe:	6123      	str	r3, [r4, #16]
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ec6:	e7a7      	b.n	8017e18 <_printf_i+0x118>
 8017ec8:	6923      	ldr	r3, [r4, #16]
 8017eca:	462a      	mov	r2, r5
 8017ecc:	4639      	mov	r1, r7
 8017ece:	4630      	mov	r0, r6
 8017ed0:	47c0      	blx	r8
 8017ed2:	3001      	adds	r0, #1
 8017ed4:	d0aa      	beq.n	8017e2c <_printf_i+0x12c>
 8017ed6:	6823      	ldr	r3, [r4, #0]
 8017ed8:	079b      	lsls	r3, r3, #30
 8017eda:	d413      	bmi.n	8017f04 <_printf_i+0x204>
 8017edc:	68e0      	ldr	r0, [r4, #12]
 8017ede:	9b03      	ldr	r3, [sp, #12]
 8017ee0:	4298      	cmp	r0, r3
 8017ee2:	bfb8      	it	lt
 8017ee4:	4618      	movlt	r0, r3
 8017ee6:	e7a3      	b.n	8017e30 <_printf_i+0x130>
 8017ee8:	2301      	movs	r3, #1
 8017eea:	464a      	mov	r2, r9
 8017eec:	4639      	mov	r1, r7
 8017eee:	4630      	mov	r0, r6
 8017ef0:	47c0      	blx	r8
 8017ef2:	3001      	adds	r0, #1
 8017ef4:	d09a      	beq.n	8017e2c <_printf_i+0x12c>
 8017ef6:	3501      	adds	r5, #1
 8017ef8:	68e3      	ldr	r3, [r4, #12]
 8017efa:	9a03      	ldr	r2, [sp, #12]
 8017efc:	1a9b      	subs	r3, r3, r2
 8017efe:	42ab      	cmp	r3, r5
 8017f00:	dcf2      	bgt.n	8017ee8 <_printf_i+0x1e8>
 8017f02:	e7eb      	b.n	8017edc <_printf_i+0x1dc>
 8017f04:	2500      	movs	r5, #0
 8017f06:	f104 0919 	add.w	r9, r4, #25
 8017f0a:	e7f5      	b.n	8017ef8 <_printf_i+0x1f8>
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d1ac      	bne.n	8017e6a <_printf_i+0x16a>
 8017f10:	7803      	ldrb	r3, [r0, #0]
 8017f12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017f16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f1a:	e76c      	b.n	8017df6 <_printf_i+0xf6>
 8017f1c:	0801a0bd 	.word	0x0801a0bd
 8017f20:	0801a0ce 	.word	0x0801a0ce

08017f24 <memmove>:
 8017f24:	4288      	cmp	r0, r1
 8017f26:	b510      	push	{r4, lr}
 8017f28:	eb01 0302 	add.w	r3, r1, r2
 8017f2c:	d807      	bhi.n	8017f3e <memmove+0x1a>
 8017f2e:	1e42      	subs	r2, r0, #1
 8017f30:	4299      	cmp	r1, r3
 8017f32:	d00a      	beq.n	8017f4a <memmove+0x26>
 8017f34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f38:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017f3c:	e7f8      	b.n	8017f30 <memmove+0xc>
 8017f3e:	4283      	cmp	r3, r0
 8017f40:	d9f5      	bls.n	8017f2e <memmove+0xa>
 8017f42:	1881      	adds	r1, r0, r2
 8017f44:	1ad2      	subs	r2, r2, r3
 8017f46:	42d3      	cmn	r3, r2
 8017f48:	d100      	bne.n	8017f4c <memmove+0x28>
 8017f4a:	bd10      	pop	{r4, pc}
 8017f4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017f50:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017f54:	e7f7      	b.n	8017f46 <memmove+0x22>

08017f56 <_realloc_r>:
 8017f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f58:	4607      	mov	r7, r0
 8017f5a:	4614      	mov	r4, r2
 8017f5c:	460e      	mov	r6, r1
 8017f5e:	b921      	cbnz	r1, 8017f6a <_realloc_r+0x14>
 8017f60:	4611      	mov	r1, r2
 8017f62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017f66:	f7ff bc77 	b.w	8017858 <_malloc_r>
 8017f6a:	b922      	cbnz	r2, 8017f76 <_realloc_r+0x20>
 8017f6c:	f7ff fc26 	bl	80177bc <_free_r>
 8017f70:	4625      	mov	r5, r4
 8017f72:	4628      	mov	r0, r5
 8017f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f76:	f000 f814 	bl	8017fa2 <_malloc_usable_size_r>
 8017f7a:	42a0      	cmp	r0, r4
 8017f7c:	d20f      	bcs.n	8017f9e <_realloc_r+0x48>
 8017f7e:	4621      	mov	r1, r4
 8017f80:	4638      	mov	r0, r7
 8017f82:	f7ff fc69 	bl	8017858 <_malloc_r>
 8017f86:	4605      	mov	r5, r0
 8017f88:	2800      	cmp	r0, #0
 8017f8a:	d0f2      	beq.n	8017f72 <_realloc_r+0x1c>
 8017f8c:	4631      	mov	r1, r6
 8017f8e:	4622      	mov	r2, r4
 8017f90:	f7ff fc00 	bl	8017794 <memcpy>
 8017f94:	4631      	mov	r1, r6
 8017f96:	4638      	mov	r0, r7
 8017f98:	f7ff fc10 	bl	80177bc <_free_r>
 8017f9c:	e7e9      	b.n	8017f72 <_realloc_r+0x1c>
 8017f9e:	4635      	mov	r5, r6
 8017fa0:	e7e7      	b.n	8017f72 <_realloc_r+0x1c>

08017fa2 <_malloc_usable_size_r>:
 8017fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fa6:	1f18      	subs	r0, r3, #4
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	bfbc      	itt	lt
 8017fac:	580b      	ldrlt	r3, [r1, r0]
 8017fae:	18c0      	addlt	r0, r0, r3
 8017fb0:	4770      	bx	lr
	...

08017fb4 <log10f>:
 8017fb4:	b510      	push	{r4, lr}
 8017fb6:	ed2d 8b02 	vpush	{d8}
 8017fba:	b08a      	sub	sp, #40	; 0x28
 8017fbc:	eeb0 8a40 	vmov.f32	s16, s0
 8017fc0:	f000 f86e 	bl	80180a0 <__ieee754_log10f>
 8017fc4:	4b31      	ldr	r3, [pc, #196]	; (801808c <log10f+0xd8>)
 8017fc6:	f993 4000 	ldrsb.w	r4, [r3]
 8017fca:	1c63      	adds	r3, r4, #1
 8017fcc:	d059      	beq.n	8018082 <log10f+0xce>
 8017fce:	eeb4 8a48 	vcmp.f32	s16, s16
 8017fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fd6:	d654      	bvs.n	8018082 <log10f+0xce>
 8017fd8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe0:	d84f      	bhi.n	8018082 <log10f+0xce>
 8017fe2:	4b2b      	ldr	r3, [pc, #172]	; (8018090 <log10f+0xdc>)
 8017fe4:	9301      	str	r3, [sp, #4]
 8017fe6:	ee18 0a10 	vmov	r0, s16
 8017fea:	2300      	movs	r3, #0
 8017fec:	9308      	str	r3, [sp, #32]
 8017fee:	f7e8 fac3 	bl	8000578 <__aeabi_f2d>
 8017ff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ffa:	b994      	cbnz	r4, 8018022 <log10f+0x6e>
 8017ffc:	4b25      	ldr	r3, [pc, #148]	; (8018094 <log10f+0xe0>)
 8017ffe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018002:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801800a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801800e:	d025      	beq.n	801805c <log10f+0xa8>
 8018010:	2301      	movs	r3, #1
 8018012:	2c02      	cmp	r4, #2
 8018014:	9300      	str	r3, [sp, #0]
 8018016:	d116      	bne.n	8018046 <log10f+0x92>
 8018018:	f7ff fb82 	bl	8017720 <__errno>
 801801c:	2321      	movs	r3, #33	; 0x21
 801801e:	6003      	str	r3, [r0, #0]
 8018020:	e016      	b.n	8018050 <log10f+0x9c>
 8018022:	4b1d      	ldr	r3, [pc, #116]	; (8018098 <log10f+0xe4>)
 8018024:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018028:	2200      	movs	r2, #0
 801802a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801802e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018032:	d1ed      	bne.n	8018010 <log10f+0x5c>
 8018034:	2302      	movs	r3, #2
 8018036:	429c      	cmp	r4, r3
 8018038:	9300      	str	r3, [sp, #0]
 801803a:	d111      	bne.n	8018060 <log10f+0xac>
 801803c:	f7ff fb70 	bl	8017720 <__errno>
 8018040:	2322      	movs	r3, #34	; 0x22
 8018042:	6003      	str	r3, [r0, #0]
 8018044:	e011      	b.n	801806a <log10f+0xb6>
 8018046:	4668      	mov	r0, sp
 8018048:	f000 f880 	bl	801814c <matherr>
 801804c:	2800      	cmp	r0, #0
 801804e:	d0e3      	beq.n	8018018 <log10f+0x64>
 8018050:	4812      	ldr	r0, [pc, #72]	; (801809c <log10f+0xe8>)
 8018052:	f000 f87d 	bl	8018150 <nan>
 8018056:	ed8d 0b06 	vstr	d0, [sp, #24]
 801805a:	e006      	b.n	801806a <log10f+0xb6>
 801805c:	2302      	movs	r3, #2
 801805e:	9300      	str	r3, [sp, #0]
 8018060:	4668      	mov	r0, sp
 8018062:	f000 f873 	bl	801814c <matherr>
 8018066:	2800      	cmp	r0, #0
 8018068:	d0e8      	beq.n	801803c <log10f+0x88>
 801806a:	9b08      	ldr	r3, [sp, #32]
 801806c:	b11b      	cbz	r3, 8018076 <log10f+0xc2>
 801806e:	f7ff fb57 	bl	8017720 <__errno>
 8018072:	9b08      	ldr	r3, [sp, #32]
 8018074:	6003      	str	r3, [r0, #0]
 8018076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801807a:	f7e8 fad5 	bl	8000628 <__aeabi_d2f>
 801807e:	ee00 0a10 	vmov	s0, r0
 8018082:	b00a      	add	sp, #40	; 0x28
 8018084:	ecbd 8b02 	vpop	{d8}
 8018088:	bd10      	pop	{r4, pc}
 801808a:	bf00      	nop
 801808c:	200000fc 	.word	0x200000fc
 8018090:	0801a0df 	.word	0x0801a0df
 8018094:	c7efffff 	.word	0xc7efffff
 8018098:	fff00000 	.word	0xfff00000
 801809c:	0801a0b1 	.word	0x0801a0b1

080180a0 <__ieee754_log10f>:
 80180a0:	b508      	push	{r3, lr}
 80180a2:	ee10 2a10 	vmov	r2, s0
 80180a6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80180aa:	ed2d 8b02 	vpush	{d8}
 80180ae:	d108      	bne.n	80180c2 <__ieee754_log10f+0x22>
 80180b0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8018134 <__ieee754_log10f+0x94>
 80180b4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018138 <__ieee754_log10f+0x98>
 80180b8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80180bc:	ecbd 8b02 	vpop	{d8}
 80180c0:	bd08      	pop	{r3, pc}
 80180c2:	2a00      	cmp	r2, #0
 80180c4:	da02      	bge.n	80180cc <__ieee754_log10f+0x2c>
 80180c6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80180ca:	e7f3      	b.n	80180b4 <__ieee754_log10f+0x14>
 80180cc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80180d0:	db02      	blt.n	80180d8 <__ieee754_log10f+0x38>
 80180d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80180d6:	e7f1      	b.n	80180bc <__ieee754_log10f+0x1c>
 80180d8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80180dc:	bfbf      	itttt	lt
 80180de:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 801813c <__ieee754_log10f+0x9c>
 80180e2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80180e6:	f06f 0118 	mvnlt.w	r1, #24
 80180ea:	ee17 2a90 	vmovlt	r2, s15
 80180ee:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80180f2:	bfa8      	it	ge
 80180f4:	2100      	movge	r1, #0
 80180f6:	3b7f      	subs	r3, #127	; 0x7f
 80180f8:	440b      	add	r3, r1
 80180fa:	0fd9      	lsrs	r1, r3, #31
 80180fc:	440b      	add	r3, r1
 80180fe:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8018102:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8018106:	ee07 3a90 	vmov	s15, r3
 801810a:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 801810e:	ee00 3a10 	vmov	s0, r3
 8018112:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018116:	f000 f823 	bl	8018160 <__ieee754_logf>
 801811a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8018140 <__ieee754_log10f+0xa0>
 801811e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018122:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018144 <__ieee754_log10f+0xa4>
 8018126:	eea8 0a27 	vfma.f32	s0, s16, s15
 801812a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018148 <__ieee754_log10f+0xa8>
 801812e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8018132:	e7c3      	b.n	80180bc <__ieee754_log10f+0x1c>
 8018134:	cc000000 	.word	0xcc000000
 8018138:	00000000 	.word	0x00000000
 801813c:	4c000000 	.word	0x4c000000
 8018140:	3ede5bd9 	.word	0x3ede5bd9
 8018144:	355427db 	.word	0x355427db
 8018148:	3e9a2080 	.word	0x3e9a2080

0801814c <matherr>:
 801814c:	2000      	movs	r0, #0
 801814e:	4770      	bx	lr

08018150 <nan>:
 8018150:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018158 <nan+0x8>
 8018154:	4770      	bx	lr
 8018156:	bf00      	nop
 8018158:	00000000 	.word	0x00000000
 801815c:	7ff80000 	.word	0x7ff80000

08018160 <__ieee754_logf>:
 8018160:	ee10 3a10 	vmov	r3, s0
 8018164:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018168:	d106      	bne.n	8018178 <__ieee754_logf+0x18>
 801816a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8018300 <__ieee754_logf+0x1a0>
 801816e:	eddf 7a65 	vldr	s15, [pc, #404]	; 8018304 <__ieee754_logf+0x1a4>
 8018172:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8018176:	4770      	bx	lr
 8018178:	2b00      	cmp	r3, #0
 801817a:	da02      	bge.n	8018182 <__ieee754_logf+0x22>
 801817c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018180:	e7f5      	b.n	801816e <__ieee754_logf+0xe>
 8018182:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018186:	db02      	blt.n	801818e <__ieee754_logf+0x2e>
 8018188:	ee30 0a00 	vadd.f32	s0, s0, s0
 801818c:	4770      	bx	lr
 801818e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018192:	bfbf      	itttt	lt
 8018194:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8018308 <__ieee754_logf+0x1a8>
 8018198:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801819c:	f06f 0118 	mvnlt.w	r1, #24
 80181a0:	ee17 3a90 	vmovlt	r3, s15
 80181a4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80181a8:	bfa8      	it	ge
 80181aa:	2100      	movge	r1, #0
 80181ac:	3a7f      	subs	r2, #127	; 0x7f
 80181ae:	440a      	add	r2, r1
 80181b0:	4956      	ldr	r1, [pc, #344]	; (801830c <__ieee754_logf+0x1ac>)
 80181b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80181b6:	4419      	add	r1, r3
 80181b8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80181bc:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 80181c0:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80181c4:	4319      	orrs	r1, r3
 80181c6:	ee07 1a90 	vmov	s15, r1
 80181ca:	f103 010f 	add.w	r1, r3, #15
 80181ce:	f3c1 0116 	ubfx	r1, r1, #0, #23
 80181d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80181d6:	290f      	cmp	r1, #15
 80181d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80181dc:	dc31      	bgt.n	8018242 <__ieee754_logf+0xe2>
 80181de:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80181e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181e6:	d10f      	bne.n	8018208 <__ieee754_logf+0xa8>
 80181e8:	2a00      	cmp	r2, #0
 80181ea:	f000 8085 	beq.w	80182f8 <__ieee754_logf+0x198>
 80181ee:	ee07 2a90 	vmov	s15, r2
 80181f2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8018310 <__ieee754_logf+0x1b0>
 80181f6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8018314 <__ieee754_logf+0x1b4>
 80181fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018202:	eea7 0a87 	vfma.f32	s0, s15, s14
 8018206:	4770      	bx	lr
 8018208:	eddf 7a43 	vldr	s15, [pc, #268]	; 8018318 <__ieee754_logf+0x1b8>
 801820c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018210:	eea0 7a67 	vfms.f32	s14, s0, s15
 8018214:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018218:	ee27 7a27 	vmul.f32	s14, s14, s15
 801821c:	b912      	cbnz	r2, 8018224 <__ieee754_logf+0xc4>
 801821e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018222:	4770      	bx	lr
 8018224:	ee07 2a90 	vmov	s15, r2
 8018228:	eddf 6a39 	vldr	s13, [pc, #228]	; 8018310 <__ieee754_logf+0x1b0>
 801822c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018230:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018234:	ee37 0a40 	vsub.f32	s0, s14, s0
 8018238:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8018314 <__ieee754_logf+0x1b4>
 801823c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8018240:	4770      	bx	lr
 8018242:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8018246:	ee70 7a27 	vadd.f32	s15, s0, s15
 801824a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801831c <__ieee754_logf+0x1bc>
 801824e:	eddf 4a34 	vldr	s9, [pc, #208]	; 8018320 <__ieee754_logf+0x1c0>
 8018252:	4934      	ldr	r1, [pc, #208]	; (8018324 <__ieee754_logf+0x1c4>)
 8018254:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8018258:	4419      	add	r1, r3
 801825a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801825e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8018262:	430b      	orrs	r3, r1
 8018264:	2b00      	cmp	r3, #0
 8018266:	ee07 2a90 	vmov	s15, r2
 801826a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801826e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018272:	ee25 7a05 	vmul.f32	s14, s10, s10
 8018276:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8018328 <__ieee754_logf+0x1c8>
 801827a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801827e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801832c <__ieee754_logf+0x1cc>
 8018282:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018286:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8018330 <__ieee754_logf+0x1d0>
 801828a:	eee7 7a24 	vfma.f32	s15, s14, s9
 801828e:	eddf 4a29 	vldr	s9, [pc, #164]	; 8018334 <__ieee754_logf+0x1d4>
 8018292:	eee7 4a87 	vfma.f32	s9, s15, s14
 8018296:	eddf 7a28 	vldr	s15, [pc, #160]	; 8018338 <__ieee754_logf+0x1d8>
 801829a:	eee4 7a87 	vfma.f32	s15, s9, s14
 801829e:	ee67 7a85 	vmul.f32	s15, s15, s10
 80182a2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80182a6:	dd1c      	ble.n	80182e2 <__ieee754_logf+0x182>
 80182a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80182ac:	ee20 7a07 	vmul.f32	s14, s0, s14
 80182b0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80182b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80182b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80182bc:	b922      	cbnz	r2, 80182c8 <__ieee754_logf+0x168>
 80182be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80182c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80182c6:	4770      	bx	lr
 80182c8:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8018310 <__ieee754_logf+0x1b0>
 80182cc:	eee6 7a86 	vfma.f32	s15, s13, s12
 80182d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80182d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80182d8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8018314 <__ieee754_logf+0x1b4>
 80182dc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80182e0:	4770      	bx	lr
 80182e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80182e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80182ea:	2a00      	cmp	r2, #0
 80182ec:	d0e9      	beq.n	80182c2 <__ieee754_logf+0x162>
 80182ee:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8018310 <__ieee754_logf+0x1b0>
 80182f2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80182f6:	e7ed      	b.n	80182d4 <__ieee754_logf+0x174>
 80182f8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8018304 <__ieee754_logf+0x1a4>
 80182fc:	4770      	bx	lr
 80182fe:	bf00      	nop
 8018300:	cc000000 	.word	0xcc000000
 8018304:	00000000 	.word	0x00000000
 8018308:	4c000000 	.word	0x4c000000
 801830c:	004afb20 	.word	0x004afb20
 8018310:	3717f7d1 	.word	0x3717f7d1
 8018314:	3f317180 	.word	0x3f317180
 8018318:	3eaaaaab 	.word	0x3eaaaaab
 801831c:	3e1cd04f 	.word	0x3e1cd04f
 8018320:	3e178897 	.word	0x3e178897
 8018324:	ffcf5c30 	.word	0xffcf5c30
 8018328:	3e638e29 	.word	0x3e638e29
 801832c:	3ecccccd 	.word	0x3ecccccd
 8018330:	3e3a3325 	.word	0x3e3a3325
 8018334:	3e924925 	.word	0x3e924925
 8018338:	3f2aaaab 	.word	0x3f2aaaab

0801833c <_init>:
 801833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801833e:	bf00      	nop
 8018340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018342:	bc08      	pop	{r3}
 8018344:	469e      	mov	lr, r3
 8018346:	4770      	bx	lr

08018348 <_fini>:
 8018348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801834a:	bf00      	nop
 801834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801834e:	bc08      	pop	{r3}
 8018350:	469e      	mov	lr, r3
 8018352:	4770      	bx	lr
