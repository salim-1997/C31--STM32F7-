
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  0800c298  0800c298  0001c298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd80  0800dd80  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd80  0800dd80  0001dd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd88  0800dd88  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd88  0800dd88  0001dd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd8c  0800dd8c  0001dd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800dd90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d5c  2000001c  0800ddac  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d78  0800ddac  00020d78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000334e6  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005e19  00000000  00000000  00053532  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a40  00000000  00000000  00059350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002790  00000000  00000000  0005bd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000304de  00000000  00000000  0005e520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000249c6  00000000  00000000  0008e9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00124f77  00000000  00000000  000b33c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d833b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b50c  00000000  00000000  001d83b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c280 	.word	0x0800c280

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	0800c280 	.word	0x0800c280

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <main+0xb4>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	4a2a      	ldr	r2, [pc, #168]	; (80005dc <main+0xb4>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f003 f815 	bl	8003568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f855 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f001 f827 	bl	8001594 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000546:	f000 f90f 	bl	8000768 <MX_ADC3_Init>
  MX_CRC_Init();
 800054a:	f000 f95f 	bl	800080c <MX_CRC_Init>
  MX_DCMI_Init();
 800054e:	f000 f97f 	bl	8000850 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000552:	f000 f9b1 	bl	80008b8 <MX_DMA2D_Init>
  //MX_ETH_Init();
  MX_FMC_Init();
 8000556:	f000 ffcd 	bl	80014f4 <MX_FMC_Init>
  MX_I2C1_Init();
 800055a:	f000 f9df 	bl	800091c <MX_I2C1_Init>
  MX_I2C3_Init();
 800055e:	f000 fa1d 	bl	800099c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000562:	f000 fa5b 	bl	8000a1c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000566:	f000 fb0f 	bl	8000b88 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800056a:	f000 fb39 	bl	8000be0 <MX_RTC_Init>
  MX_SAI2_Init();
 800056e:	f000 fbdd 	bl	8000d2c <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000572:	f000 fc83 	bl	8000e7c <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8000576:	f000 fcb1 	bl	8000edc <MX_TIM1_Init>
  MX_TIM2_Init();
 800057a:	f000 fd5b 	bl	8001034 <MX_TIM2_Init>
  MX_TIM3_Init();
 800057e:	f000 fdcf 	bl	8001120 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000582:	f000 fe45 	bl	8001210 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000586:	f000 febb 	bl	8001300 <MX_TIM8_Init>
  MX_TIM12_Init();
 800058a:	f000 ff0d 	bl	80013a8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800058e:	f000 ff51 	bl	8001434 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000592:	f000 ff7f 	bl	8001494 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000596:	f002 f97b 	bl	8002890 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800059a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800059e:	2000      	movs	r0, #0
 80005a0:	f002 fa0e 	bl	80029c0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <main+0xb8>)
 80005a6:	f002 fab7 	bl	8002b18 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80005aa:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80005ae:	f002 fa67 	bl	8002a80 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <main+0xb8>)
 80005b4:	f002 fa7c 	bl	8002ab0 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 80005b8:	f002 f9ee 	bl	8002998 <BSP_LCD_GetYSize>
 80005bc:	4603      	mov	r3, r0
 80005be:	085b      	lsrs	r3, r3, #1
 80005c0:	b299      	uxth	r1, r3
 80005c2:	2301      	movs	r3, #1
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <main+0xbc>)
 80005c6:	2000      	movs	r0, #0
 80005c8:	f002 fb12 	bl	8002bf0 <BSP_LCD_DisplayStringAt>

while(1){
	HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_1);
 80005cc:	2102      	movs	r1, #2
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <main+0xc0>)
 80005d0:	f004 fc03 	bl	8004dda <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80005d4:	20fa      	movs	r0, #250	; 0xfa
 80005d6:	f002 fff5 	bl	80035c4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_1);
 80005da:	e7f7      	b.n	80005cc <main+0xa4>
 80005dc:	e0042000 	.word	0xe0042000
 80005e0:	ff0000ff 	.word	0xff0000ff
 80005e4:	0800c298 	.word	0x0800c298
 80005e8:	40022000 	.word	0x40022000

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0b4      	sub	sp, #208	; 0xd0
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f00b fe37 	bl	800c26e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2284      	movs	r2, #132	; 0x84
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f00b fe28 	bl	800c26e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061e:	f006 fa81 	bl	8006b24 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <SystemClock_Config+0x170>)
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	4a4d      	ldr	r2, [pc, #308]	; (800075c <SystemClock_Config+0x170>)
 8000628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062c:	6413      	str	r3, [r2, #64]	; 0x40
 800062e:	4b4b      	ldr	r3, [pc, #300]	; (800075c <SystemClock_Config+0x170>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <SystemClock_Config+0x174>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a48      	ldr	r2, [pc, #288]	; (8000760 <SystemClock_Config+0x174>)
 8000640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b46      	ldr	r3, [pc, #280]	; (8000760 <SystemClock_Config+0x174>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000652:	2309      	movs	r3, #9
 8000654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000674:	2319      	movs	r3, #25
 8000676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800067a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800067e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000688:	2309      	movs	r3, #9
 800068a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fb68 	bl	8006d68 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800069e:	f001 f96f 	bl	8001980 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a2:	f006 fa4f 	bl	8006b44 <HAL_PWREx_EnableOverDrive>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ac:	f001 f968 	bl	8001980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006d6:	2106      	movs	r1, #6
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 fde9 	bl	80072b0 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80006e4:	f001 f94c 	bl	8001980 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <SystemClock_Config+0x178>)
 80006ea:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80006ec:	2364      	movs	r3, #100	; 0x64
 80006ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80006fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000700:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000702:	2305      	movs	r3, #5
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800070a:	2303      	movs	r3, #3
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000712:	2301      	movs	r3, #1
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800071c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000722:	2300      	movs	r3, #0
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000726:	2300      	movs	r3, #0
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800072a:	2300      	movs	r3, #0
 800072c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800072e:	2300      	movs	r3, #0
 8000730:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000732:	2300      	movs	r3, #0
 8000734:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800073a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	4618      	mov	r0, r3
 8000744:	f006 ffb8 	bl	80076b8 <HAL_RCCEx_PeriphCLKConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x166>
  {
    Error_Handler();
 800074e:	f001 f917 	bl	8001980 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	37d0      	adds	r7, #208	; 0xd0
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000
 8000764:	01314868 	.word	0x01314868

08000768 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_ADC3_Init+0x98>)
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <MX_ADC3_Init+0x9c>)
 800077e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_ADC3_Init+0x98>)
 8000782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000786:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ADC3_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_ADC3_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_ADC3_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_ADC3_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_ADC3_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_ADC3_Init+0x98>)
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_ADC3_Init+0xa0>)
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_ADC3_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_ADC3_Init+0x98>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_ADC3_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_ADC3_Init+0x98>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_ADC3_Init+0x98>)
 80007ca:	f002 ff1d 	bl	8003608 <HAL_ADC_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80007d4:	f001 f8d4 	bl	8001980 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007d8:	2304      	movs	r3, #4
 80007da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_ADC3_Init+0x98>)
 80007ea:	f002 ff51 	bl	8003690 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007f4:	f001 f8c4 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000614 	.word	0x20000614
 8000804:	40012200 	.word	0x40012200
 8000808:	0f000001 	.word	0x0f000001

0800080c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_CRC_Init+0x3c>)
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <MX_CRC_Init+0x40>)
 8000814:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_CRC_Init+0x3c>)
 8000818:	2200      	movs	r2, #0
 800081a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_CRC_Init+0x3c>)
 800081e:	2200      	movs	r2, #0
 8000820:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_CRC_Init+0x3c>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_CRC_Init+0x3c>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_CRC_Init+0x3c>)
 8000830:	2201      	movs	r2, #1
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_CRC_Init+0x3c>)
 8000836:	f003 fa51 	bl	8003cdc <HAL_CRC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000840:	f001 f89e 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200004c8 	.word	0x200004c8
 800084c:	40023000 	.word	0x40023000

08000850 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_DCMI_Init+0x60>)
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_DCMI_Init+0x64>)
 8000858:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_DCMI_Init+0x60>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_DCMI_Init+0x60>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_DCMI_Init+0x60>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_DCMI_Init+0x60>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_DCMI_Init+0x60>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_DCMI_Init+0x60>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_DCMI_Init+0x60>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_DCMI_Init+0x60>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DCMI_Init+0x60>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_DCMI_Init+0x60>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_DCMI_Init+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_DCMI_Init+0x60>)
 800089e:	f003 fb07 	bl	8003eb0 <HAL_DCMI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f001 f86a 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000065c 	.word	0x2000065c
 80008b4:	50050000 	.word	0x50050000

080008b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <MX_DMA2D_Init+0x60>)
 80008c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008ee:	f003 fd15 	bl	800431c <HAL_DMA2D_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008f8:	f001 f842 	bl	8001980 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008fc:	2101      	movs	r1, #1
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_DMA2D_Init+0x5c>)
 8000900:	f003 ff7a 	bl	80047f8 <HAL_DMA2D_ConfigLayer>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800090a:	f001 f839 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000080c 	.word	0x2000080c
 8000918:	4002b000 	.word	0x4002b000

0800091c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_I2C1_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_I2C1_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_I2C1_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_I2C1_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_I2C1_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_I2C1_Init+0x74>)
 8000958:	f005 fc44 	bl	80061e4 <HAL_I2C_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000962:	f001 f80d 	bl	8001980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <MX_I2C1_Init+0x74>)
 800096a:	f005 fccb 	bl	8006304 <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000974:	f001 f804 	bl	8001980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_I2C1_Init+0x74>)
 800097c:	f005 fd0d 	bl	800639a <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 fffb 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000047c 	.word	0x2000047c
 8000994:	40005400 	.word	0x40005400
 8000998:	00c0eaff 	.word	0x00c0eaff

0800099c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_I2C3_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <MX_I2C3_Init+0x7c>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009d8:	f005 fc04 	bl	80061e4 <HAL_I2C_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009e2:	f000 ffcd 	bl	8001980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009ea:	f005 fc8b 	bl	8006304 <HAL_I2CEx_ConfigAnalogFilter>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f000 ffc4 	bl	8001980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009fc:	f005 fccd 	bl	800639a <HAL_I2CEx_ConfigDigitalFilter>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 ffbb 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000320 	.word	0x20000320
 8000a14:	40005c00 	.word	0x40005c00
 8000a18:	00c0eaff 	.word	0x00c0eaff

08000a1c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09a      	sub	sp, #104	; 0x68
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a26:	2234      	movs	r2, #52	; 0x34
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f00b fc1f 	bl	800c26e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2234      	movs	r2, #52	; 0x34
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00b fc19 	bl	800c26e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a3c:	4b50      	ldr	r3, [pc, #320]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a3e:	4a51      	ldr	r2, [pc, #324]	; (8000b84 <MX_LTDC_Init+0x168>)
 8000a40:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a42:	4b4f      	ldr	r3, [pc, #316]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a48:	4b4d      	ldr	r3, [pc, #308]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a54:	4b4a      	ldr	r3, [pc, #296]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000a5a:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a5c:	2228      	movs	r2, #40	; 0x28
 8000a5e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000a60:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a62:	2209      	movs	r2, #9
 8000a64:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000a66:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a68:	2235      	movs	r2, #53	; 0x35
 8000a6a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000a6c:	4b44      	ldr	r3, [pc, #272]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a6e:	220b      	movs	r2, #11
 8000a70:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000a72:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a74:	f240 2215 	movw	r2, #533	; 0x215
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a7c:	f240 121b 	movw	r2, #283	; 0x11b
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000a82:	4b3f      	ldr	r3, [pc, #252]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a84:	f240 2235 	movw	r2, #565	; 0x235
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000a8a:	4b3d      	ldr	r3, [pc, #244]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a8c:	f240 121d 	movw	r2, #285	; 0x11d
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a92:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000aaa:	4835      	ldr	r0, [pc, #212]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000aac:	f005 fcc2 	bl	8006434 <HAL_LTDC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000ab6:	f000 ff63 	bl	8001980 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000abe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000ac8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000ad2:	23ff      	movs	r3, #255	; 0xff
 8000ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ada:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ade:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000ae4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ae8:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000aea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000aee:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000af0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000af4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	481b      	ldr	r0, [pc, #108]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000b12:	f005 fe21 	bl	8006758 <HAL_LTDC_ConfigLayer>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000b1c:	f000 ff30 	bl	8001980 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000b68:	f005 fdf6 	bl	8006758 <HAL_LTDC_ConfigLayer>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000b72:	f000 ff05 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3768      	adds	r7, #104	; 0x68
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000056c 	.word	0x2000056c
 8000b84:	40016800 	.word	0x40016800

08000b88 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <MX_QUADSPI_Init+0x54>)
 8000b90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bc4:	f006 f80e 	bl	8006be4 <HAL_QSPI_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000bce:	f000 fed7 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000948 	.word	0x20000948
 8000bdc:	a0001000 	.word	0xa0001000

08000be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b092      	sub	sp, #72	; 0x48
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	222c      	movs	r2, #44	; 0x2c
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00b fb33 	bl	800c26e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c08:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c0a:	4a47      	ldr	r2, [pc, #284]	; (8000d28 <MX_RTC_Init+0x148>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0e:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c14:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c16:	227f      	movs	r2, #127	; 0x7f
 8000c18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c1a:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c20:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c2c:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c32:	483c      	ldr	r0, [pc, #240]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c34:	f007 fa62 	bl	80080fc <HAL_RTC_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000c3e:	f000 fe9f 	bl	8001980 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c60:	2201      	movs	r2, #1
 8000c62:	4619      	mov	r1, r3
 8000c64:	482f      	ldr	r0, [pc, #188]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c66:	f007 fac5 	bl	80081f4 <HAL_RTC_SetTime>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000c70:	f000 fe86 	bl	8001980 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c90:	2201      	movs	r2, #1
 8000c92:	4619      	mov	r1, r3
 8000c94:	4823      	ldr	r0, [pc, #140]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c96:	f007 fb6b 	bl	8008370 <HAL_RTC_SetDate>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000ca0:	f000 fe6e 	bl	8001980 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_RTC_Init+0x144>)
 8000cdc:	f007 fbf0 	bl	80084c0 <HAL_RTC_SetAlarm>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000ce6:	f000 fe4b 	bl	8001980 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <MX_RTC_Init+0x144>)
 8000cf8:	f007 fbe2 	bl	80084c0 <HAL_RTC_SetAlarm>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000d02:	f000 fe3d 	bl	8001980 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d06:	2202      	movs	r2, #2
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <MX_RTC_Init+0x144>)
 8000d0c:	f007 fd62 	bl	80087d4 <HAL_RTCEx_SetTimeStamp>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000d16:	f000 fe33 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	3748      	adds	r7, #72	; 0x48
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000072c 	.word	0x2000072c
 8000d28:	40002800 	.word	0x40002800

08000d2c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d30:	4b4d      	ldr	r3, [pc, #308]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d32:	4a4e      	ldr	r2, [pc, #312]	; (8000e6c <MX_SAI2_Init+0x140>)
 8000d34:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d36:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d42:	4b49      	ldr	r3, [pc, #292]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d48:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d4e:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d54:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d60:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d66:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d6c:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d6e:	4a40      	ldr	r2, [pc, #256]	; (8000e70 <MX_SAI2_Init+0x144>)
 8000d70:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d72:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d78:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d84:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d8a:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d90:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000da2:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000da8:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000db4:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000dc0:	4829      	ldr	r0, [pc, #164]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000dc2:	f007 fd5d 	bl	8008880 <HAL_SAI_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000dcc:	f000 fdd8 	bl	8001980 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dd2:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <MX_SAI2_Init+0x14c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dd6:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dde:	2203      	movs	r2, #3
 8000de0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e54:	4807      	ldr	r0, [pc, #28]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e56:	f007 fd13 	bl	8008880 <HAL_SAI_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000e60:	f000 fd8e 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200003f8 	.word	0x200003f8
 8000e6c:	40015c04 	.word	0x40015c04
 8000e70:	0002ee00 	.word	0x0002ee00
 8000e74:	20000298 	.word	0x20000298
 8000e78:	40015c24 	.word	0x40015c24

08000e7c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e82:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000e86:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000ec6:	f007 ff03 	bl	8008cd0 <HAL_SPDIFRX_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000ed0:	f000 fd56 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200003ac 	.word	0x200003ac

08000edc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b09a      	sub	sp, #104	; 0x68
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	222c      	movs	r2, #44	; 0x2c
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00b f9a9 	bl	800c26e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f1c:	4b43      	ldr	r3, [pc, #268]	; (800102c <MX_TIM1_Init+0x150>)
 8000f1e:	4a44      	ldr	r2, [pc, #272]	; (8001030 <MX_TIM1_Init+0x154>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f22:	4b42      	ldr	r3, [pc, #264]	; (800102c <MX_TIM1_Init+0x150>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b40      	ldr	r3, [pc, #256]	; (800102c <MX_TIM1_Init+0x150>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <MX_TIM1_Init+0x150>)
 8000f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b3d      	ldr	r3, [pc, #244]	; (800102c <MX_TIM1_Init+0x150>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <MX_TIM1_Init+0x150>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	4b3a      	ldr	r3, [pc, #232]	; (800102c <MX_TIM1_Init+0x150>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f48:	4838      	ldr	r0, [pc, #224]	; (800102c <MX_TIM1_Init+0x150>)
 8000f4a:	f007 ff1d 	bl	8008d88 <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f54:	f000 fd14 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f62:	4619      	mov	r1, r3
 8000f64:	4831      	ldr	r0, [pc, #196]	; (800102c <MX_TIM1_Init+0x150>)
 8000f66:	f008 f9c7 	bl	80092f8 <HAL_TIM_ConfigClockSource>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f70:	f000 fd06 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f74:	482d      	ldr	r0, [pc, #180]	; (800102c <MX_TIM1_Init+0x150>)
 8000f76:	f007 ff5d 	bl	8008e34 <HAL_TIM_PWM_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f80:	f000 fcfe 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f94:	4619      	mov	r1, r3
 8000f96:	4825      	ldr	r0, [pc, #148]	; (800102c <MX_TIM1_Init+0x150>)
 8000f98:	f008 fe28 	bl	8009bec <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fa2:	f000 fced 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa6:	2360      	movs	r3, #96	; 0x60
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4818      	ldr	r0, [pc, #96]	; (800102c <MX_TIM1_Init+0x150>)
 8000fcc:	f008 f87c 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fd6:	f000 fcd3 	bl	8001980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <MX_TIM1_Init+0x150>)
 8001010:	f008 fe7a 	bl	8009d08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800101a:	f000 fcb1 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <MX_TIM1_Init+0x150>)
 8001020:	f001 f8f6 	bl	8002210 <HAL_TIM_MspPostInit>

}
 8001024:	bf00      	nop
 8001026:	3768      	adds	r7, #104	; 0x68
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000074c 	.word	0x2000074c
 8001030:	40010000 	.word	0x40010000

08001034 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <MX_TIM2_Init+0xe8>)
 8001068:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <MX_TIM2_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <MX_TIM2_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_TIM2_Init+0xe8>)
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_TIM2_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <MX_TIM2_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800108e:	4823      	ldr	r0, [pc, #140]	; (800111c <MX_TIM2_Init+0xe8>)
 8001090:	f007 fe7a 	bl	8008d88 <HAL_TIM_Base_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800109a:	f000 fc71 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a8:	4619      	mov	r1, r3
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <MX_TIM2_Init+0xe8>)
 80010ac:	f008 f924 	bl	80092f8 <HAL_TIM_ConfigClockSource>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010b6:	f000 fc63 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010ba:	4818      	ldr	r0, [pc, #96]	; (800111c <MX_TIM2_Init+0xe8>)
 80010bc:	f007 feba 	bl	8008e34 <HAL_TIM_PWM_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010c6:	f000 fc5b 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4810      	ldr	r0, [pc, #64]	; (800111c <MX_TIM2_Init+0xe8>)
 80010da:	f008 fd87 	bl	8009bec <HAL_TIMEx_MasterConfigSynchronization>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010e4:	f000 fc4c 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e8:	2360      	movs	r3, #96	; 0x60
 80010ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	4619      	mov	r1, r3
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_TIM2_Init+0xe8>)
 8001100:	f007 ffe2 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800110a:	f000 fc39 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_TIM2_Init+0xe8>)
 8001110:	f001 f87e 	bl	8002210 <HAL_TIM_MspPostInit>

}
 8001114:	bf00      	nop
 8001116:	3738      	adds	r7, #56	; 0x38
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000084c 	.word	0x2000084c

08001120 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08e      	sub	sp, #56	; 0x38
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <MX_TIM3_Init+0xe8>)
 8001154:	4a2d      	ldr	r2, [pc, #180]	; (800120c <MX_TIM3_Init+0xec>)
 8001156:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <MX_TIM3_Init+0xe8>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <MX_TIM3_Init+0xe8>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <MX_TIM3_Init+0xe8>)
 8001166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MX_TIM3_Init+0xe8>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <MX_TIM3_Init+0xe8>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001178:	4823      	ldr	r0, [pc, #140]	; (8001208 <MX_TIM3_Init+0xe8>)
 800117a:	f007 fe05 	bl	8008d88 <HAL_TIM_Base_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001184:	f000 fbfc 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800118e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001192:	4619      	mov	r1, r3
 8001194:	481c      	ldr	r0, [pc, #112]	; (8001208 <MX_TIM3_Init+0xe8>)
 8001196:	f008 f8af 	bl	80092f8 <HAL_TIM_ConfigClockSource>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011a0:	f000 fbee 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <MX_TIM3_Init+0xe8>)
 80011a6:	f007 fe45 	bl	8008e34 <HAL_TIM_PWM_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011b0:	f000 fbe6 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <MX_TIM3_Init+0xe8>)
 80011c4:	f008 fd12 	bl	8009bec <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011ce:	f000 fbd7 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d2:	2360      	movs	r3, #96	; 0x60
 80011d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <MX_TIM3_Init+0xe8>)
 80011ea:	f007 ff6d 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011f4:	f000 fbc4 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_TIM3_Init+0xe8>)
 80011fa:	f001 f809 	bl	8002210 <HAL_TIM_MspPostInit>

}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000052c 	.word	0x2000052c
 800120c:	40000400 	.word	0x40000400

08001210 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_TIM5_Init+0xe8>)
 8001244:	4a2d      	ldr	r2, [pc, #180]	; (80012fc <MX_TIM5_Init+0xec>)
 8001246:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_TIM5_Init+0xe8>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_TIM5_Init+0xe8>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_TIM5_Init+0xe8>)
 8001256:	f04f 32ff 	mov.w	r2, #4294967295
 800125a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_TIM5_Init+0xe8>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_TIM5_Init+0xe8>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001268:	4823      	ldr	r0, [pc, #140]	; (80012f8 <MX_TIM5_Init+0xe8>)
 800126a:	f007 fd8d 	bl	8008d88 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001274:	f000 fb84 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	4619      	mov	r1, r3
 8001284:	481c      	ldr	r0, [pc, #112]	; (80012f8 <MX_TIM5_Init+0xe8>)
 8001286:	f008 f837 	bl	80092f8 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001290:	f000 fb76 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001294:	4818      	ldr	r0, [pc, #96]	; (80012f8 <MX_TIM5_Init+0xe8>)
 8001296:	f007 fdcd 	bl	8008e34 <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80012a0:	f000 fb6e 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4811      	ldr	r0, [pc, #68]	; (80012f8 <MX_TIM5_Init+0xe8>)
 80012b4:	f008 fc9a 	bl	8009bec <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80012be:	f000 fb5f 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	; 0x60
 80012c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	220c      	movs	r2, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_TIM5_Init+0xe8>)
 80012da:	f007 fef5 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80012e4:	f000 fb4c 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MX_TIM5_Init+0xe8>)
 80012ea:	f000 ff91 	bl	8002210 <HAL_TIM_MspPostInit>

}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200004ec 	.word	0x200004ec
 80012fc:	40000c00 	.word	0x40000c00

08001300 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_TIM8_Init+0xa0>)
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <MX_TIM8_Init+0xa4>)
 8001322:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_TIM8_Init+0xa0>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_TIM8_Init+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_TIM8_Init+0xa0>)
 8001332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001336:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM8_Init+0xa0>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_TIM8_Init+0xa0>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_TIM8_Init+0xa0>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800134a:	4815      	ldr	r0, [pc, #84]	; (80013a0 <MX_TIM8_Init+0xa0>)
 800134c:	f007 fd1c 	bl	8008d88 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001356:	f000 fb13 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <MX_TIM8_Init+0xa0>)
 8001368:	f007 ffc6 	bl	80092f8 <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001372:	f000 fb05 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_TIM8_Init+0xa0>)
 8001388:	f008 fc30 	bl	8009bec <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001392:	f000 faf5 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000036c 	.word	0x2000036c
 80013a4:	40010400 	.word	0x40010400

080013a8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM12_Init+0x84>)
 80013c2:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <MX_TIM12_Init+0x88>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM12_Init+0x84>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_TIM12_Init+0x84>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_TIM12_Init+0x84>)
 80013d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_TIM12_Init+0x84>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_TIM12_Init+0x84>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <MX_TIM12_Init+0x84>)
 80013e8:	f007 fd24 	bl	8008e34 <HAL_TIM_PWM_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80013f2:	f000 fac5 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f6:	2360      	movs	r3, #96	; 0x60
 80013f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM12_Init+0x84>)
 800140e:	f007 fe5b 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001418:	f000 fab2 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM12_Init+0x84>)
 800141e:	f000 fef7 	bl	8002210 <HAL_TIM_MspPostInit>

}
 8001422:	bf00      	nop
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000088c 	.word	0x2000088c
 8001430:	40001800 	.word	0x40001800

08001434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_USART1_UART_Init+0x58>)
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <MX_USART1_UART_Init+0x5c>)
 800143c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_USART1_UART_Init+0x58>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_USART1_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_USART1_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_USART1_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_USART1_UART_Init+0x58>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_USART1_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_USART1_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_USART1_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_USART1_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_USART1_UART_Init+0x58>)
 8001478:	f008 fce2 	bl	8009e40 <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001482:	f000 fa7d 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200006ac 	.word	0x200006ac
 8001490:	40011000 	.word	0x40011000

08001494 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_USART6_UART_Init+0x58>)
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <MX_USART6_UART_Init+0x5c>)
 800149c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USART6_UART_Init+0x58>)
 80014d8:	f008 fcb2 	bl	8009e40 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80014e2:	f000 fa4d 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000078c 	.word	0x2000078c
 80014f0:	40011400 	.word	0x40011400

080014f4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_FMC_Init+0x98>)
 800150e:	4a20      	ldr	r2, [pc, #128]	; (8001590 <MX_FMC_Init+0x9c>)
 8001510:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_FMC_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_FMC_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_FMC_Init+0x98>)
 8001520:	2204      	movs	r2, #4
 8001522:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_FMC_Init+0x98>)
 8001526:	2210      	movs	r2, #16
 8001528:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_FMC_Init+0x98>)
 800152c:	2240      	movs	r2, #64	; 0x40
 800152e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_FMC_Init+0x98>)
 8001532:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001536:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_FMC_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_FMC_Init+0x98>)
 8001540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001544:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_FMC_Init+0x98>)
 8001548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_FMC_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001554:	2302      	movs	r3, #2
 8001556:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001558:	2307      	movs	r3, #7
 800155a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800155c:	2304      	movs	r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001560:	2307      	movs	r3, #7
 8001562:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001564:	2303      	movs	r3, #3
 8001566:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001568:	2302      	movs	r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_FMC_Init+0x98>)
 8001576:	f007 fb2b 	bl	8008bd0 <HAL_SDRAM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001580:	f000 f9fe 	bl	8001980 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200008cc 	.word	0x200008cc
 8001590:	a0000140 	.word	0xa0000140

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b090      	sub	sp, #64	; 0x40
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015aa:	4baf      	ldr	r3, [pc, #700]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4aae      	ldr	r2, [pc, #696]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4bac      	ldr	r3, [pc, #688]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c2:	4ba9      	ldr	r3, [pc, #676]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4aa8      	ldr	r2, [pc, #672]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4ba6      	ldr	r3, [pc, #664]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4ba3      	ldr	r3, [pc, #652]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4aa2      	ldr	r2, [pc, #648]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4ba0      	ldr	r3, [pc, #640]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	623b      	str	r3, [r7, #32]
 80015f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	4b9d      	ldr	r3, [pc, #628]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a9c      	ldr	r2, [pc, #624]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b9a      	ldr	r3, [pc, #616]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	4b97      	ldr	r3, [pc, #604]	; (8001868 <MX_GPIO_Init+0x2d4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a96      	ldr	r2, [pc, #600]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b94      	ldr	r3, [pc, #592]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b91      	ldr	r3, [pc, #580]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a90      	ldr	r2, [pc, #576]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b8e      	ldr	r3, [pc, #568]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800163a:	4b8b      	ldr	r3, [pc, #556]	; (8001868 <MX_GPIO_Init+0x2d4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a8a      	ldr	r2, [pc, #552]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b88      	ldr	r3, [pc, #544]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001652:	4b85      	ldr	r3, [pc, #532]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a84      	ldr	r2, [pc, #528]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b82      	ldr	r3, [pc, #520]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800166a:	4b7f      	ldr	r3, [pc, #508]	; (8001868 <MX_GPIO_Init+0x2d4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001670:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b7c      	ldr	r3, [pc, #496]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001682:	4b79      	ldr	r3, [pc, #484]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a78      	ldr	r2, [pc, #480]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001688:	f043 0320 	orr.w	r3, r3, #32
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <MX_GPIO_Init+0x2d4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	4b73      	ldr	r3, [pc, #460]	; (8001868 <MX_GPIO_Init+0x2d4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a72      	ldr	r2, [pc, #456]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b70      	ldr	r3, [pc, #448]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2120      	movs	r1, #32
 80016b6:	486d      	ldr	r0, [pc, #436]	; (800186c <MX_GPIO_Init+0x2d8>)
 80016b8:	f003 fb76 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	210e      	movs	r1, #14
 80016c0:	486b      	ldr	r0, [pc, #428]	; (8001870 <MX_GPIO_Init+0x2dc>)
 80016c2:	f003 fb71 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2108      	movs	r1, #8
 80016ca:	486a      	ldr	r0, [pc, #424]	; (8001874 <MX_GPIO_Init+0x2e0>)
 80016cc:	f003 fb6c 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d6:	4866      	ldr	r0, [pc, #408]	; (8001870 <MX_GPIO_Init+0x2dc>)
 80016d8:	f003 fb66 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e2:	4865      	ldr	r0, [pc, #404]	; (8001878 <MX_GPIO_Init+0x2e4>)
 80016e4:	f003 fb60 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	21c8      	movs	r1, #200	; 0xc8
 80016ec:	4863      	ldr	r0, [pc, #396]	; (800187c <MX_GPIO_Init+0x2e8>)
 80016ee:	f003 fb5b 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80016f2:	2308      	movs	r3, #8
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	485e      	ldr	r0, [pc, #376]	; (8001880 <MX_GPIO_Init+0x2ec>)
 8001706:	f003 f9a5 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800170a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800171c:	230a      	movs	r3, #10
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001724:	4619      	mov	r1, r3
 8001726:	4857      	ldr	r0, [pc, #348]	; (8001884 <MX_GPIO_Init+0x2f0>)
 8001728:	f003 f994 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800172c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800173e:	230c      	movs	r3, #12
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001746:	4619      	mov	r1, r3
 8001748:	484f      	ldr	r0, [pc, #316]	; (8001888 <MX_GPIO_Init+0x2f4>)
 800174a:	f003 f983 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	2300      	movs	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001760:	4619      	mov	r1, r3
 8001762:	484a      	ldr	r0, [pc, #296]	; (800188c <MX_GPIO_Init+0x2f8>)
 8001764:	f003 f976 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001768:	2340      	movs	r3, #64	; 0x40
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800176c:	4b48      	ldr	r3, [pc, #288]	; (8001890 <MX_GPIO_Init+0x2fc>)
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001778:	4619      	mov	r1, r3
 800177a:	483c      	ldr	r0, [pc, #240]	; (800186c <MX_GPIO_Init+0x2d8>)
 800177c:	f003 f96a 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001780:	2320      	movs	r3, #32
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001794:	4619      	mov	r1, r3
 8001796:	4835      	ldr	r0, [pc, #212]	; (800186c <MX_GPIO_Init+0x2d8>)
 8001798:	f003 f95c 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 800179c:	f241 030e 	movw	r3, #4110	; 0x100e
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b2:	4619      	mov	r1, r3
 80017b4:	482e      	ldr	r0, [pc, #184]	; (8001870 <MX_GPIO_Init+0x2dc>)
 80017b6:	f003 f94d 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80017ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017cc:	4619      	mov	r1, r3
 80017ce:	482e      	ldr	r0, [pc, #184]	; (8001888 <MX_GPIO_Init+0x2f4>)
 80017d0:	f003 f940 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80017d4:	2308      	movs	r3, #8
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4822      	ldr	r0, [pc, #136]	; (8001874 <MX_GPIO_Init+0x2e0>)
 80017ec:	f003 f932 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017f0:	2310      	movs	r3, #16
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001800:	4619      	mov	r1, r3
 8001802:	481a      	ldr	r0, [pc, #104]	; (800186c <MX_GPIO_Init+0x2d8>)
 8001804:	f003 f926 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001808:	f248 0304 	movw	r3, #32772	; 0x8004
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181a:	4619      	mov	r1, r3
 800181c:	4816      	ldr	r0, [pc, #88]	; (8001878 <MX_GPIO_Init+0x2e4>)
 800181e:	f003 f919 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001838:	4619      	mov	r1, r3
 800183a:	480f      	ldr	r0, [pc, #60]	; (8001878 <MX_GPIO_Init+0x2e4>)
 800183c:	f003 f90a 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_GPIO_Init+0x2fc>)
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	4619      	mov	r1, r3
 8001854:	4806      	ldr	r0, [pc, #24]	; (8001870 <MX_GPIO_Init+0x2dc>)
 8001856:	f003 f8fd 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800185a:	2310      	movs	r3, #16
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	e016      	b.n	8001894 <MX_GPIO_Init+0x300>
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	40020c00 	.word	0x40020c00
 8001870:	40022000 	.word	0x40022000
 8001874:	40022800 	.word	0x40022800
 8001878:	40021c00 	.word	0x40021c00
 800187c:	40021800 	.word	0x40021800
 8001880:	40021000 	.word	0x40021000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40022400 	.word	0x40022400
 8001890:	10120000 	.word	0x10120000
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800189a:	230a      	movs	r3, #10
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a2:	4619      	mov	r1, r3
 80018a4:	4828      	ldr	r0, [pc, #160]	; (8001948 <MX_GPIO_Init+0x3b4>)
 80018a6:	f003 f8d5 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80018aa:	23c8      	movs	r3, #200	; 0xc8
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	4822      	ldr	r0, [pc, #136]	; (800194c <MX_GPIO_Init+0x3b8>)
 80018c2:	f003 f8c7 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80018c6:	2305      	movs	r3, #5
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018d6:	230a      	movs	r3, #10
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	481b      	ldr	r0, [pc, #108]	; (8001950 <MX_GPIO_Init+0x3bc>)
 80018e2:	f003 f8b7 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80018e6:	2304      	movs	r3, #4
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f6:	4619      	mov	r1, r3
 80018f8:	4814      	ldr	r0, [pc, #80]	; (800194c <MX_GPIO_Init+0x3b8>)
 80018fa:	f003 f8ab 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80018fe:	2328      	movs	r3, #40	; 0x28
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800190e:	230a      	movs	r3, #10
 8001910:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001916:	4619      	mov	r1, r3
 8001918:	480e      	ldr	r0, [pc, #56]	; (8001954 <MX_GPIO_Init+0x3c0>)
 800191a:	f003 f89b 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800191e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001930:	2305      	movs	r3, #5
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001938:	4619      	mov	r1, r3
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_GPIO_Init+0x3c4>)
 800193c:	f003 f88a 	bl	8004a54 <HAL_GPIO_Init>

}
 8001940:	bf00      	nop
 8001942:	3740      	adds	r7, #64	; 0x40
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021c00 	.word	0x40021c00
 800194c:	40021800 	.word	0x40021800
 8001950:	40020800 	.word	0x40020800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400

0800195c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196e:	f001 fe09 	bl	8003584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40001000 	.word	0x40001000

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_MspInit+0x4c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_MspInit+0x4c>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_MspInit+0x4c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_MspInit+0x4c>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	210f      	movs	r1, #15
 80019ca:	f06f 0001 	mvn.w	r0, #1
 80019ce:	f002 f95b 	bl	8003c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800

080019e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <HAL_ADC_MspInit+0xa4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d13c      	bne.n	8001a7c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a20:	f043 0320 	orr.w	r3, r3, #32
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0320 	and.w	r3, r3, #32
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_ADC_MspInit+0xa8>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001a4a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001a4e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a50:	2303      	movs	r3, #3
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <HAL_ADC_MspInit+0xac>)
 8001a60:	f002 fff8 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001a64:	2301      	movs	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <HAL_ADC_MspInit+0xb0>)
 8001a78:	f002 ffec 	bl	8004a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40012200 	.word	0x40012200
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40020000 	.word	0x40020000

08001a94 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_CRC_MspInit+0x38>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10b      	bne.n	8001abe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_CRC_MspInit+0x3c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_CRC_MspInit+0x3c>)
 8001aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_CRC_MspInit+0x3c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023000 	.word	0x40023000
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	; 0x38
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <HAL_DCMI_MspInit+0x160>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	f040 809a 	bne.w	8001c2c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	4a4e      	ldr	r2, [pc, #312]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6353      	str	r3, [r2, #52]	; 0x34
 8001b04:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	623b      	str	r3, [r7, #32]
 8001b0e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4a48      	ldr	r2, [pc, #288]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b28:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a42      	ldr	r2, [pc, #264]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4a3c      	ldr	r2, [pc, #240]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b58:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4a36      	ldr	r2, [pc, #216]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b62:	6313      	str	r3, [r2, #48]	; 0x30
 8001b64:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_DCMI_MspInit+0x164>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001b88:	2360      	movs	r3, #96	; 0x60
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b98:	230d      	movs	r3, #13
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4826      	ldr	r0, [pc, #152]	; (8001c3c <HAL_DCMI_MspInit+0x168>)
 8001ba4:	f002 ff56 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bb8:	230d      	movs	r3, #13
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481f      	ldr	r0, [pc, #124]	; (8001c40 <HAL_DCMI_MspInit+0x16c>)
 8001bc4:	f002 ff46 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bda:	230d      	movs	r3, #13
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	4817      	ldr	r0, [pc, #92]	; (8001c44 <HAL_DCMI_MspInit+0x170>)
 8001be6:	f002 ff35 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001bea:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bfc:	230d      	movs	r3, #13
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	4810      	ldr	r0, [pc, #64]	; (8001c48 <HAL_DCMI_MspInit+0x174>)
 8001c08:	f002 ff24 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001c0c:	2350      	movs	r3, #80	; 0x50
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c1c:	230d      	movs	r3, #13
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <HAL_DCMI_MspInit+0x178>)
 8001c28:	f002 ff14 	bl	8004a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3738      	adds	r7, #56	; 0x38
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	50050000 	.word	0x50050000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40020c00 	.word	0x40020c00
 8001c44:	40021800 	.word	0x40021800
 8001c48:	40021c00 	.word	0x40021c00
 8001c4c:	40020000 	.word	0x40020000

08001c50 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_DMA2D_MspInit+0x44>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d113      	bne.n	8001c8a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_DMA2D_MspInit+0x48>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <HAL_DMA2D_MspInit+0x48>)
 8001c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_DMA2D_MspInit+0x48>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	205a      	movs	r0, #90	; 0x5a
 8001c80:	f002 f802 	bl	8003c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c84:	205a      	movs	r0, #90	; 0x5a
 8001c86:	f002 f81b 	bl	8003cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	4002b000 	.word	0x4002b000
 8001c98:	40023800 	.word	0x40023800

08001c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2f      	ldr	r2, [pc, #188]	; (8001d78 <HAL_I2C_MspInit+0xdc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d129      	bne.n	8001d12 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cdc:	2312      	movs	r3, #18
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4823      	ldr	r0, [pc, #140]	; (8001d80 <HAL_I2C_MspInit+0xe4>)
 8001cf4:	f002 feae 	bl	8004a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d02:	6413      	str	r3, [r2, #64]	; 0x40
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d10:	e02d      	b.n	8001d6e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_I2C_MspInit+0xe8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d128      	bne.n	8001d6e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d26:	6313      	str	r3, [r2, #48]	; 0x30
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001d34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3a:	2312      	movs	r3, #18
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d46:	2304      	movs	r3, #4
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <HAL_I2C_MspInit+0xec>)
 8001d52:	f002 fe7f 	bl	8004a54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_I2C_MspInit+0xe0>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	bf00      	nop
 8001d70:	3730      	adds	r7, #48	; 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40005400 	.word	0x40005400
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40005c00 	.word	0x40005c00
 8001d88:	40021c00 	.word	0x40021c00

08001d8c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08e      	sub	sp, #56	; 0x38
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a55      	ldr	r2, [pc, #340]	; (8001f00 <HAL_LTDC_MspInit+0x174>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	f040 80a3 	bne.w	8001ef6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001db0:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	4a53      	ldr	r2, [pc, #332]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001db6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dba:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbc:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd4:	4b4b      	ldr	r3, [pc, #300]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001de0:	4b48      	ldr	r3, [pc, #288]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a47      	ldr	r2, [pc, #284]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b45      	ldr	r3, [pc, #276]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001df8:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a41      	ldr	r2, [pc, #260]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e10:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4a3b      	ldr	r2, [pc, #236]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1c:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4a35      	ldr	r2, [pc, #212]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6313      	str	r3, [r2, #48]	; 0x30
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_LTDC_MspInit+0x178>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001e40:	2310      	movs	r3, #16
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e50:	230e      	movs	r3, #14
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	482b      	ldr	r0, [pc, #172]	; (8001f08 <HAL_LTDC_MspInit+0x17c>)
 8001e5c:	f002 fdfa 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001e60:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e72:	230e      	movs	r3, #14
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4823      	ldr	r0, [pc, #140]	; (8001f0c <HAL_LTDC_MspInit+0x180>)
 8001e7e:	f002 fde9 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001e82:	23f7      	movs	r3, #247	; 0xf7
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e92:	230e      	movs	r3, #14
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	481c      	ldr	r0, [pc, #112]	; (8001f10 <HAL_LTDC_MspInit+0x184>)
 8001e9e:	f002 fdd9 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001eb4:	2309      	movs	r3, #9
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4815      	ldr	r0, [pc, #84]	; (8001f14 <HAL_LTDC_MspInit+0x188>)
 8001ec0:	f002 fdc8 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001ec4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ed6:	230e      	movs	r3, #14
 8001ed8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <HAL_LTDC_MspInit+0x18c>)
 8001ee2:	f002 fdb7 	bl	8004a54 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2058      	movs	r0, #88	; 0x58
 8001eec:	f001 fecc 	bl	8003c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ef0:	2058      	movs	r0, #88	; 0x58
 8001ef2:	f001 fee5 	bl	8003cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3738      	adds	r7, #56	; 0x38
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40016800 	.word	0x40016800
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40022400 	.word	0x40022400
 8001f10:	40022800 	.word	0x40022800
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a3b      	ldr	r2, [pc, #236]	; (8002028 <HAL_QSPI_MspInit+0x10c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d170      	bne.n	8002020 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	4a3a      	ldr	r2, [pc, #232]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	6393      	str	r3, [r2, #56]	; 0x38
 8001f4a:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f5c:	f043 0310 	orr.w	r3, r3, #16
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a2e      	ldr	r2, [pc, #184]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a28      	ldr	r2, [pc, #160]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_QSPI_MspInit+0x110>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fae:	2309      	movs	r3, #9
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	481d      	ldr	r0, [pc, #116]	; (8002030 <HAL_QSPI_MspInit+0x114>)
 8001fba:	f002 fd4b 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001fbe:	2340      	movs	r3, #64	; 0x40
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fce:	230a      	movs	r3, #10
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4816      	ldr	r0, [pc, #88]	; (8002034 <HAL_QSPI_MspInit+0x118>)
 8001fda:	f002 fd3b 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fde:	2304      	movs	r3, #4
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fee:	2309      	movs	r3, #9
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480e      	ldr	r0, [pc, #56]	; (8002034 <HAL_QSPI_MspInit+0x118>)
 8001ffa:	f002 fd2b 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001ffe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002010:	2309      	movs	r3, #9
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	4807      	ldr	r0, [pc, #28]	; (8002038 <HAL_QSPI_MspInit+0x11c>)
 800201c:	f002 fd1a 	bl	8004a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3730      	adds	r7, #48	; 0x30
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	a0001000 	.word	0xa0001000
 800202c:	40023800 	.word	0x40023800
 8002030:	40021000 	.word	0x40021000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020c00 	.word	0x40020c00

0800203c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_RTC_MspInit+0x2c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d105      	bne.n	800205a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <HAL_RTC_MspInit+0x30>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_RTC_MspInit+0x30>)
 8002054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002058:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40002800 	.word	0x40002800
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002090:	d127      	bne.n	80020e2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_SPDIFRX_MspInit+0x7c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a15      	ldr	r2, [pc, #84]	; (80020ec <HAL_SPDIFRX_MspInit+0x7c>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_SPDIFRX_MspInit+0x7c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_SPDIFRX_MspInit+0x7c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_SPDIFRX_MspInit+0x7c>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_SPDIFRX_MspInit+0x7c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80020d2:	2308      	movs	r3, #8
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <HAL_SPDIFRX_MspInit+0x80>)
 80020de:	f002 fcb9 	bl	8004a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020c00 	.word	0x40020c00

080020f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2e      	ldr	r2, [pc, #184]	; (80021bc <HAL_TIM_Base_MspInit+0xc8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10c      	bne.n	8002120 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002106:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800211e:	e046      	b.n	80021ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d10c      	bne.n	8002144 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]
}
 8002142:	e034      	b.n	80021ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_TIM_Base_MspInit+0xd0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10c      	bne.n	8002168 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697b      	ldr	r3, [r7, #20]
}
 8002166:	e022      	b.n	80021ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_TIM_Base_MspInit+0xd4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10c      	bne.n	800218c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
}
 800218a:	e010      	b.n	80021ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_TIM_Base_MspInit+0xd8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10b      	bne.n	80021ae <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_TIM_Base_MspInit+0xcc>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
}
 80021ae:	bf00      	nop
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000c00 	.word	0x40000c00
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_TIM_PWM_MspInit+0x38>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10b      	bne.n	80021fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_TIM_PWM_MspInit+0x3c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_TIM_PWM_MspInit+0x3c>)
 80021e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_TIM_PWM_MspInit+0x3c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40001800 	.word	0x40001800
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a56      	ldr	r2, [pc, #344]	; (8002388 <HAL_TIM_MspPostInit+0x178>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d11d      	bne.n	800226e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b56      	ldr	r3, [pc, #344]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a55      	ldr	r2, [pc, #340]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800224a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800225c:	2301      	movs	r3, #1
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4619      	mov	r1, r3
 8002266:	484a      	ldr	r0, [pc, #296]	; (8002390 <HAL_TIM_MspPostInit+0x180>)
 8002268:	f002 fbf4 	bl	8004a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800226c:	e087      	b.n	800237e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002276:	d11d      	bne.n	80022b4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002278:	4b44      	ldr	r3, [pc, #272]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	4a43      	ldr	r2, [pc, #268]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6313      	str	r3, [r2, #48]	; 0x30
 8002284:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022a2:	2301      	movs	r3, #1
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80022a6:	f107 031c 	add.w	r3, r7, #28
 80022aa:	4619      	mov	r1, r3
 80022ac:	4838      	ldr	r0, [pc, #224]	; (8002390 <HAL_TIM_MspPostInit+0x180>)
 80022ae:	f002 fbd1 	bl	8004a54 <HAL_GPIO_Init>
}
 80022b2:	e064      	b.n	800237e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a36      	ldr	r2, [pc, #216]	; (8002394 <HAL_TIM_MspPostInit+0x184>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d11c      	bne.n	80022f8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a32      	ldr	r2, [pc, #200]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80022d6:	2310      	movs	r3, #16
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022e6:	2302      	movs	r3, #2
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	4829      	ldr	r0, [pc, #164]	; (8002398 <HAL_TIM_MspPostInit+0x188>)
 80022f2:	f002 fbaf 	bl	8004a54 <HAL_GPIO_Init>
}
 80022f6:	e042      	b.n	800237e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a27      	ldr	r2, [pc, #156]	; (800239c <HAL_TIM_MspPostInit+0x18c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d11c      	bne.n	800233c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800231a:	2301      	movs	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800232a:	2302      	movs	r3, #2
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	481a      	ldr	r0, [pc, #104]	; (80023a0 <HAL_TIM_MspPostInit+0x190>)
 8002336:	f002 fb8d 	bl	8004a54 <HAL_GPIO_Init>
}
 800233a:	e020      	b.n	800237e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_TIM_MspPostInit+0x194>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d11b      	bne.n	800237e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 800234c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_TIM_MspPostInit+0x17c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800235e:	2340      	movs	r3, #64	; 0x40
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800236e:	2309      	movs	r3, #9
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <HAL_TIM_MspPostInit+0x198>)
 800237a:	f002 fb6b 	bl	8004a54 <HAL_GPIO_Init>
}
 800237e:	bf00      	nop
 8002380:	3730      	adds	r7, #48	; 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000
 800238c:	40023800 	.word	0x40023800
 8002390:	40020000 	.word	0x40020000
 8002394:	40000400 	.word	0x40000400
 8002398:	40020400 	.word	0x40020400
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40001800 	.word	0x40001800
 80023a8:	40021c00 	.word	0x40021c00

080023ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3c      	ldr	r2, [pc, #240]	; (80024bc <HAL_UART_MspInit+0x110>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d145      	bne.n	800245a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ce:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <HAL_UART_MspInit+0x114>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <HAL_UART_MspInit+0x114>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	6453      	str	r3, [r2, #68]	; 0x44
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_UART_MspInit+0x114>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_UART_MspInit+0x114>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a35      	ldr	r2, [pc, #212]	; (80024c0 <HAL_UART_MspInit+0x114>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_UART_MspInit+0x114>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_UART_MspInit+0x114>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <HAL_UART_MspInit+0x114>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_UART_MspInit+0x114>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002426:	2307      	movs	r3, #7
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4824      	ldr	r0, [pc, #144]	; (80024c4 <HAL_UART_MspInit+0x118>)
 8002432:	f002 fb0f 	bl	8004a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002448:	2307      	movs	r3, #7
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	4619      	mov	r1, r3
 8002452:	481d      	ldr	r0, [pc, #116]	; (80024c8 <HAL_UART_MspInit+0x11c>)
 8002454:	f002 fafe 	bl	8004a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002458:	e02c      	b.n	80024b4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <HAL_UART_MspInit+0x120>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d127      	bne.n	80024b4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_UART_MspInit+0x114>)
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_UART_MspInit+0x114>)
 800246a:	f043 0320 	orr.w	r3, r3, #32
 800246e:	6453      	str	r3, [r2, #68]	; 0x44
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_UART_MspInit+0x114>)
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_UART_MspInit+0x114>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_UART_MspInit+0x114>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6313      	str	r3, [r2, #48]	; 0x30
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_UART_MspInit+0x114>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002494:	23c0      	movs	r3, #192	; 0xc0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024a4:	2308      	movs	r3, #8
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	4619      	mov	r1, r3
 80024ae:	4808      	ldr	r0, [pc, #32]	; (80024d0 <HAL_UART_MspInit+0x124>)
 80024b0:	f002 fad0 	bl	8004a54 <HAL_GPIO_Init>
}
 80024b4:	bf00      	nop
 80024b6:	3730      	adds	r7, #48	; 0x30
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40011000 	.word	0x40011000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40011400 	.word	0x40011400
 80024d0:	40020800 	.word	0x40020800

080024d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80024e8:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_FMC_MspInit+0x100>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d16d      	bne.n	80025cc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80024f0:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_FMC_MspInit+0x100>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_FMC_MspInit+0x104>)
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	4a37      	ldr	r2, [pc, #220]	; (80025d8 <HAL_FMC_MspInit+0x104>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6393      	str	r3, [r2, #56]	; 0x38
 8002502:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_FMC_MspInit+0x104>)
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800250e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002512:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002520:	230c      	movs	r3, #12
 8002522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	4619      	mov	r1, r3
 8002528:	482c      	ldr	r0, [pc, #176]	; (80025dc <HAL_FMC_MspInit+0x108>)
 800252a:	f002 fa93 	bl	8004a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800252e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002532:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002540:	230c      	movs	r3, #12
 8002542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4825      	ldr	r0, [pc, #148]	; (80025e0 <HAL_FMC_MspInit+0x10c>)
 800254a:	f002 fa83 	bl	8004a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800254e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002552:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002560:	230c      	movs	r3, #12
 8002562:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4619      	mov	r1, r3
 8002568:	481e      	ldr	r0, [pc, #120]	; (80025e4 <HAL_FMC_MspInit+0x110>)
 800256a:	f002 fa73 	bl	8004a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800256e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002572:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002580:	230c      	movs	r3, #12
 8002582:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4817      	ldr	r0, [pc, #92]	; (80025e8 <HAL_FMC_MspInit+0x114>)
 800258a:	f002 fa63 	bl	8004a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800258e:	2328      	movs	r3, #40	; 0x28
 8002590:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800259e:	230c      	movs	r3, #12
 80025a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4811      	ldr	r0, [pc, #68]	; (80025ec <HAL_FMC_MspInit+0x118>)
 80025a8:	f002 fa54 	bl	8004a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80025ac:	2308      	movs	r3, #8
 80025ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025bc:	230c      	movs	r3, #12
 80025be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	4619      	mov	r1, r3
 80025c4:	480a      	ldr	r0, [pc, #40]	; (80025f0 <HAL_FMC_MspInit+0x11c>)
 80025c6:	f002 fa45 	bl	8004a54 <HAL_GPIO_Init>
 80025ca:	e000      	b.n	80025ce <HAL_FMC_MspInit+0xfa>
    return;
 80025cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000038 	.word	0x20000038
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021800 	.word	0x40021800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021400 	.word	0x40021400
 80025ec:	40021c00 	.word	0x40021c00
 80025f0:	40020800 	.word	0x40020800

080025f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80025fc:	f7ff ff6a 	bl	80024d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <HAL_SAI_MspInit+0xbc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d124      	bne.n	8002664 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002622:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a29      	ldr	r2, [pc, #164]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002628:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800263a:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 8002642:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002644:	23f0      	movs	r3, #240	; 0xf0
 8002646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002654:	230a      	movs	r3, #10
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	4619      	mov	r1, r3
 800265e:	481c      	ldr	r0, [pc, #112]	; (80026d0 <HAL_SAI_MspInit+0xc8>)
 8002660:	f002 f9f8 	bl	8004a54 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <HAL_SAI_MspInit+0xcc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d125      	bne.n	80026ba <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 800267c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_SAI_MspInit+0xc4>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <HAL_SAI_MspInit+0xc0>)
 8002696:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026aa:	230a      	movs	r3, #10
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4808      	ldr	r0, [pc, #32]	; (80026d8 <HAL_SAI_MspInit+0xd0>)
 80026b6:	f002 f9cd 	bl	8004a54 <HAL_GPIO_Init>

    }
}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40015c04 	.word	0x40015c04
 80026c8:	2000003c 	.word	0x2000003c
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40015c24 	.word	0x40015c24
 80026d8:	40021800 	.word	0x40021800

080026dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	2036      	movs	r0, #54	; 0x36
 80026f2:	f001 fac9 	bl	8003c88 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026f6:	2036      	movs	r0, #54	; 0x36
 80026f8:	f001 fae2 	bl	8003cc0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_InitTick+0xa0>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_InitTick+0xa0>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	6413      	str	r3, [r2, #64]	; 0x40
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_InitTick+0xa0>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002714:	f107 0210 	add.w	r2, r7, #16
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f004 ff98 	bl	8007654 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002724:	f004 ff6e 	bl	8007604 <HAL_RCC_GetPCLK1Freq>
 8002728:	4603      	mov	r3, r0
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <HAL_InitTick+0xa4>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9b      	lsrs	r3, r3, #18
 8002738:	3b01      	subs	r3, #1
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_InitTick+0xa8>)
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_InitTick+0xac>)
 8002740:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_InitTick+0xa8>)
 8002744:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002748:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800274a:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_InitTick+0xa8>)
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_InitTick+0xa8>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_InitTick+0xa8>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800275c:	4809      	ldr	r0, [pc, #36]	; (8002784 <HAL_InitTick+0xa8>)
 800275e:	f006 fb13 	bl	8008d88 <HAL_TIM_Base_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002768:	4806      	ldr	r0, [pc, #24]	; (8002784 <HAL_InitTick+0xa8>)
 800276a:	f006 fb39 	bl	8008de0 <HAL_TIM_Base_Start_IT>
 800276e:	4603      	mov	r3, r0
 8002770:	e000      	b.n	8002774 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	3730      	adds	r7, #48	; 0x30
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	431bde83 	.word	0x431bde83
 8002784:	20000994 	.word	0x20000994
 8002788:	40001000 	.word	0x40001000

0800278c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <HardFault_Handler+0x4>

080027a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <MemManage_Handler+0x4>

080027a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <BusFault_Handler+0x4>

080027ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <UsageFault_Handler+0x4>

080027b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <TIM6_DAC_IRQHandler+0x10>)
 80027c6:	f006 fb60 	bl	8008e8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000994 	.word	0x20000994

080027d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <OTG_FS_IRQHandler+0x10>)
 80027da:	f002 fb18 	bl	8004e0e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000ab4 	.word	0x20000ab4

080027e8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <LTDC_IRQHandler+0x10>)
 80027ee:	f003 fef1 	bl	80065d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000056c 	.word	0x2000056c

080027fc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <DMA2D_IRQHandler+0x10>)
 8002802:	f001 fee9 	bl	80045d8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000080c 	.word	0x2000080c

08002810 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <SystemInit+0x28>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <SystemInit+0x28>)
 800281c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <SystemInit+0x28>)
 8002826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800282a:	609a      	str	r2, [r3, #8]
#endif
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800283c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002874 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002840:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002842:	e003      	b.n	800284c <LoopCopyDataInit>

08002844 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002846:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002848:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800284a:	3104      	adds	r1, #4

0800284c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800284c:	480b      	ldr	r0, [pc, #44]	; (800287c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002850:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002852:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002854:	d3f6      	bcc.n	8002844 <CopyDataInit>
  ldr  r2, =_sbss
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002858:	e002      	b.n	8002860 <LoopFillZerobss>

0800285a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800285a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800285c:	f842 3b04 	str.w	r3, [r2], #4

08002860 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002862:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002864:	d3f9      	bcc.n	800285a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002866:	f7ff ffd3 	bl	8002810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800286a:	f009 fcd1 	bl	800c210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800286e:	f7fd fe5b 	bl	8000528 <main>
  bx  lr    
 8002872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002874:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002878:	0800dd90 	.word	0x0800dd90
  ldr  r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002880:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8002884:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8002888:	20000d78 	.word	0x20000d78

0800288c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800288c:	e7fe      	b.n	800288c <ADC_IRQHandler>
	...

08002890 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002894:	4b31      	ldr	r3, [pc, #196]	; (800295c <BSP_LCD_Init+0xcc>)
 8002896:	2228      	movs	r2, #40	; 0x28
 8002898:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800289a:	4b30      	ldr	r3, [pc, #192]	; (800295c <BSP_LCD_Init+0xcc>)
 800289c:	2209      	movs	r2, #9
 800289e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80028a0:	4b2e      	ldr	r3, [pc, #184]	; (800295c <BSP_LCD_Init+0xcc>)
 80028a2:	2235      	movs	r2, #53	; 0x35
 80028a4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <BSP_LCD_Init+0xcc>)
 80028a8:	220b      	movs	r2, #11
 80028aa:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <BSP_LCD_Init+0xcc>)
 80028ae:	f240 121b 	movw	r2, #283	; 0x11b
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <BSP_LCD_Init+0xcc>)
 80028b6:	f240 2215 	movw	r2, #533	; 0x215
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <BSP_LCD_Init+0xcc>)
 80028be:	f240 121d 	movw	r2, #285	; 0x11d
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <BSP_LCD_Init+0xcc>)
 80028c6:	f240 2235 	movw	r2, #565	; 0x235
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80028cc:	2100      	movs	r1, #0
 80028ce:	4823      	ldr	r0, [pc, #140]	; (800295c <BSP_LCD_Init+0xcc>)
 80028d0:	f000 fb74 	bl	8002fbc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <BSP_LCD_Init+0xcc>)
 80028d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028da:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <BSP_LCD_Init+0xcc>)
 80028de:	f44f 7288 	mov.w	r2, #272	; 0x110
 80028e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <BSP_LCD_Init+0xcc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <BSP_LCD_Init+0xcc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <BSP_LCD_Init+0xcc>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <BSP_LCD_Init+0xcc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002902:	4b16      	ldr	r3, [pc, #88]	; (800295c <BSP_LCD_Init+0xcc>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <BSP_LCD_Init+0xcc>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <BSP_LCD_Init+0xcc>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <BSP_LCD_Init+0xcc>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <BSP_LCD_Init+0xd0>)
 8002918:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800291a:	4810      	ldr	r0, [pc, #64]	; (800295c <BSP_LCD_Init+0xcc>)
 800291c:	f003 ff5a 	bl	80067d4 <HAL_LTDC_GetState>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002926:	2100      	movs	r1, #0
 8002928:	480c      	ldr	r0, [pc, #48]	; (800295c <BSP_LCD_Init+0xcc>)
 800292a:	f000 fa6d 	bl	8002e08 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800292e:	480b      	ldr	r0, [pc, #44]	; (800295c <BSP_LCD_Init+0xcc>)
 8002930:	f003 fd80 	bl	8006434 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002934:	2201      	movs	r2, #1
 8002936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800293a:	480a      	ldr	r0, [pc, #40]	; (8002964 <BSP_LCD_Init+0xd4>)
 800293c:	f002 fa34 	bl	8004da8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002940:	2201      	movs	r2, #1
 8002942:	2108      	movs	r1, #8
 8002944:	4808      	ldr	r0, [pc, #32]	; (8002968 <BSP_LCD_Init+0xd8>)
 8002946:	f002 fa2f 	bl	8004da8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800294a:	f000 fc57 	bl	80031fc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800294e:	4807      	ldr	r0, [pc, #28]	; (800296c <BSP_LCD_Init+0xdc>)
 8002950:	f000 f8c8 	bl	8002ae4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200009d4 	.word	0x200009d4
 8002960:	40016800 	.word	0x40016800
 8002964:	40022000 	.word	0x40022000
 8002968:	40022800 	.word	0x40022800
 800296c:	20000004 	.word	0x20000004

08002970 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <BSP_LCD_GetXSize+0x20>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a06      	ldr	r2, [pc, #24]	; (8002994 <BSP_LCD_GetXSize+0x24>)
 800297a:	2134      	movs	r1, #52	; 0x34
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3360      	adds	r3, #96	; 0x60
 8002984:	681b      	ldr	r3, [r3, #0]
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	20000080 	.word	0x20000080
 8002994:	200009d4 	.word	0x200009d4

08002998 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <BSP_LCD_GetYSize+0x20>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a06      	ldr	r2, [pc, #24]	; (80029bc <BSP_LCD_GetYSize+0x24>)
 80029a2:	2134      	movs	r1, #52	; 0x34
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	3364      	adds	r3, #100	; 0x64
 80029ac:	681b      	ldr	r3, [r3, #0]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	20000080 	.word	0x20000080
 80029bc:	200009d4 	.word	0x200009d4

080029c0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b090      	sub	sp, #64	; 0x40
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80029d0:	f7ff ffce 	bl	8002970 <BSP_LCD_GetXSize>
 80029d4:	4603      	mov	r3, r0
 80029d6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80029dc:	f7ff ffdc 	bl	8002998 <BSP_LCD_GetYSize>
 80029e0:	4603      	mov	r3, r0
 80029e2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80029ec:	23ff      	movs	r3, #255	; 0xff
 80029ee:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002a10:	f7ff ffae 	bl	8002970 <BSP_LCD_GetXSize>
 8002a14:	4603      	mov	r3, r0
 8002a16:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002a18:	f7ff ffbe 	bl	8002998 <BSP_LCD_GetYSize>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	4619      	mov	r1, r3
 8002a28:	4812      	ldr	r0, [pc, #72]	; (8002a74 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002a2a:	f003 fe95 	bl	8006758 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	4911      	ldr	r1, [pc, #68]	; (8002a78 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a42:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	490c      	ldr	r1, [pc, #48]	; (8002a78 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3308      	adds	r3, #8
 8002a54:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002a56:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002a58:	88fa      	ldrh	r2, [r7, #6]
 8002a5a:	4907      	ldr	r1, [pc, #28]	; (8002a78 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3740      	adds	r7, #64	; 0x40
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	200009d4 	.word	0x200009d4
 8002a78:	20000084 	.word	0x20000084
 8002a7c:	20000004 	.word	0x20000004

08002a80 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <BSP_LCD_SetTextColor+0x28>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4907      	ldr	r1, [pc, #28]	; (8002aac <BSP_LCD_SetTextColor+0x2c>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	601a      	str	r2, [r3, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	20000080 	.word	0x20000080
 8002aac:	20000084 	.word	0x20000084

08002ab0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <BSP_LCD_SetBackColor+0x2c>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4908      	ldr	r1, [pc, #32]	; (8002ae0 <BSP_LCD_SetBackColor+0x30>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3304      	adds	r3, #4
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	601a      	str	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000080 	.word	0x20000080
 8002ae0:	20000084 	.word	0x20000084

08002ae4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <BSP_LCD_SetFont+0x2c>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4908      	ldr	r1, [pc, #32]	; (8002b14 <BSP_LCD_SetFont+0x30>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3308      	adds	r3, #8
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000080 	.word	0x20000080
 8002b14:	20000084 	.word	0x20000084

08002b18 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <BSP_LCD_Clear+0x48>)
 8002b22:	681c      	ldr	r4, [r3, #0]
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <BSP_LCD_Clear+0x48>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <BSP_LCD_Clear+0x4c>)
 8002b2a:	2134      	movs	r1, #52	; 0x34
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	335c      	adds	r3, #92	; 0x5c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461d      	mov	r5, r3
 8002b38:	f7ff ff1a 	bl	8002970 <BSP_LCD_GetXSize>
 8002b3c:	4606      	mov	r6, r0
 8002b3e:	f7ff ff2b 	bl	8002998 <BSP_LCD_GetYSize>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	4632      	mov	r2, r6
 8002b50:	4629      	mov	r1, r5
 8002b52:	4620      	mov	r0, r4
 8002b54:	f000 fb06 	bl	8003164 <LL_FillBuffer>
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b60:	20000080 	.word	0x20000080
 8002b64:	200009d4 	.word	0x200009d4

08002b68 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
 8002b72:	460b      	mov	r3, r1
 8002b74:	80bb      	strh	r3, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <BSP_LCD_DisplayChar+0x80>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	491b      	ldr	r1, [pc, #108]	; (8002bec <BSP_LCD_DisplayChar+0x84>)
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <BSP_LCD_DisplayChar+0x80>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4c14      	ldr	r4, [pc, #80]	; (8002bec <BSP_LCD_DisplayChar+0x84>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4423      	add	r3, r4
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002bac:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <BSP_LCD_DisplayChar+0x80>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <BSP_LCD_DisplayChar+0x84>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4423      	add	r3, r4
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	889b      	ldrh	r3, [r3, #4]
 8002bc6:	3307      	adds	r3, #7
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da00      	bge.n	8002bce <BSP_LCD_DisplayChar+0x66>
 8002bcc:	3307      	adds	r3, #7
 8002bce:	10db      	asrs	r3, r3, #3
 8002bd0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002bd4:	18ca      	adds	r2, r1, r3
 8002bd6:	88b9      	ldrh	r1, [r7, #4]
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fa0a 	bl	8002ff4 <DrawChar>
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	20000080 	.word	0x20000080
 8002bec:	20000084 	.word	0x20000084

08002bf0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60ba      	str	r2, [r7, #8]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	81fb      	strh	r3, [r7, #14]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	81bb      	strh	r3, [r7, #12]
 8002c02:	4613      	mov	r3, r2
 8002c04:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002c06:	2301      	movs	r3, #1
 8002c08:	83fb      	strh	r3, [r7, #30]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002c1a:	e002      	b.n	8002c22 <BSP_LCD_DisplayStringAt+0x32>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	617a      	str	r2, [r7, #20]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f6      	bne.n	8002c1c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002c2e:	f7ff fe9f 	bl	8002970 <BSP_LCD_GetXSize>
 8002c32:	4b4f      	ldr	r3, [pc, #316]	; (8002d70 <BSP_LCD_DisplayStringAt+0x180>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	494f      	ldr	r1, [pc, #316]	; (8002d74 <BSP_LCD_DisplayStringAt+0x184>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3308      	adds	r3, #8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	889b      	ldrh	r3, [r3, #4]
 8002c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4c:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d01c      	beq.n	8002c8e <BSP_LCD_DisplayStringAt+0x9e>
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d017      	beq.n	8002c88 <BSP_LCD_DisplayStringAt+0x98>
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d12e      	bne.n	8002cba <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	1ad1      	subs	r1, r2, r3
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <BSP_LCD_DisplayStringAt+0x180>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4843      	ldr	r0, [pc, #268]	; (8002d74 <BSP_LCD_DisplayStringAt+0x184>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4403      	add	r3, r0
 8002c72:	3308      	adds	r3, #8
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	889b      	ldrh	r3, [r3, #4]
 8002c78:	fb03 f301 	mul.w	r3, r3, r1
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	89fb      	ldrh	r3, [r7, #14]
 8002c82:	4413      	add	r3, r2
 8002c84:	83fb      	strh	r3, [r7, #30]
      break;
 8002c86:	e01b      	b.n	8002cc0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002c88:	89fb      	ldrh	r3, [r7, #14]
 8002c8a:	83fb      	strh	r3, [r7, #30]
      break;
 8002c8c:	e018      	b.n	8002cc0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	b299      	uxth	r1, r3
 8002c96:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <BSP_LCD_DisplayStringAt+0x180>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4836      	ldr	r0, [pc, #216]	; (8002d74 <BSP_LCD_DisplayStringAt+0x184>)
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4403      	add	r3, r0
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	889b      	ldrh	r3, [r3, #4]
 8002cac:	fb11 f303 	smulbb	r3, r1, r3
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	89fb      	ldrh	r3, [r7, #14]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	83fb      	strh	r3, [r7, #30]
      break;
 8002cb8:	e002      	b.n	8002cc0 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002cba:	89fb      	ldrh	r3, [r7, #14]
 8002cbc:	83fb      	strh	r3, [r7, #30]
      break;
 8002cbe:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002cc0:	8bfb      	ldrh	r3, [r7, #30]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <BSP_LCD_DisplayStringAt+0xde>
 8002cc6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da1d      	bge.n	8002d0a <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002cd2:	e01a      	b.n	8002d0a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781a      	ldrb	r2, [r3, #0]
 8002cd8:	89b9      	ldrh	r1, [r7, #12]
 8002cda:	8bfb      	ldrh	r3, [r7, #30]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff43 	bl	8002b68 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <BSP_LCD_DisplayStringAt+0x180>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4923      	ldr	r1, [pc, #140]	; (8002d74 <BSP_LCD_DisplayStringAt+0x184>)
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	889a      	ldrh	r2, [r3, #4]
 8002cf8:	8bfb      	ldrh	r3, [r7, #30]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
    i++;
 8002d04:	8bbb      	ldrh	r3, [r7, #28]
 8002d06:	3301      	adds	r3, #1
 8002d08:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf14      	ite	ne
 8002d12:	2301      	movne	r3, #1
 8002d14:	2300      	moveq	r3, #0
 8002d16:	b2dc      	uxtb	r4, r3
 8002d18:	f7ff fe2a 	bl	8002970 <BSP_LCD_GetXSize>
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	8bb9      	ldrh	r1, [r7, #28]
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <BSP_LCD_DisplayStringAt+0x180>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4813      	ldr	r0, [pc, #76]	; (8002d74 <BSP_LCD_DisplayStringAt+0x184>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4403      	add	r3, r0
 8002d30:	3308      	adds	r3, #8
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	889b      	ldrh	r3, [r3, #4]
 8002d36:	fb03 f301 	mul.w	r3, r3, r1
 8002d3a:	1aeb      	subs	r3, r5, r3
 8002d3c:	b299      	uxth	r1, r3
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <BSP_LCD_DisplayStringAt+0x180>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	480c      	ldr	r0, [pc, #48]	; (8002d74 <BSP_LCD_DisplayStringAt+0x184>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4403      	add	r3, r0
 8002d4e:	3308      	adds	r3, #8
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	889b      	ldrh	r3, [r3, #4]
 8002d54:	4299      	cmp	r1, r3
 8002d56:	bf2c      	ite	cs
 8002d58:	2301      	movcs	r3, #1
 8002d5a:	2300      	movcc	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4023      	ands	r3, r4
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1b6      	bne.n	8002cd4 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8002d66:	bf00      	nop
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000080 	.word	0x20000080
 8002d74:	20000084 	.word	0x20000084

08002d78 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	603a      	str	r2, [r7, #0]
 8002d82:	80fb      	strh	r3, [r7, #6]
 8002d84:	460b      	mov	r3, r1
 8002d86:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <BSP_LCD_DrawPixel+0x88>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <BSP_LCD_DrawPixel+0x8c>)
 8002d8e:	2134      	movs	r1, #52	; 0x34
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3348      	adds	r3, #72	; 0x48
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d116      	bne.n	8002dcc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <BSP_LCD_DrawPixel+0x88>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <BSP_LCD_DrawPixel+0x8c>)
 8002da4:	2134      	movs	r1, #52	; 0x34
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	335c      	adds	r3, #92	; 0x5c
 8002dae:	681c      	ldr	r4, [r3, #0]
 8002db0:	88bd      	ldrh	r5, [r7, #4]
 8002db2:	f7ff fddd 	bl	8002970 <BSP_LCD_GetXSize>
 8002db6:	4603      	mov	r3, r0
 8002db8:	fb03 f205 	mul.w	r2, r3, r5
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4423      	add	r3, r4
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002dca:	e015      	b.n	8002df8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <BSP_LCD_DrawPixel+0x88>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <BSP_LCD_DrawPixel+0x8c>)
 8002dd2:	2134      	movs	r1, #52	; 0x34
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	335c      	adds	r3, #92	; 0x5c
 8002ddc:	681c      	ldr	r4, [r3, #0]
 8002dde:	88bd      	ldrh	r5, [r7, #4]
 8002de0:	f7ff fdc6 	bl	8002970 <BSP_LCD_GetXSize>
 8002de4:	4603      	mov	r3, r0
 8002de6:	fb03 f205 	mul.w	r2, r3, r5
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4423      	add	r3, r4
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8002e00:	20000080 	.word	0x20000080
 8002e04:	200009d4 	.word	0x200009d4

08002e08 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b090      	sub	sp, #64	; 0x40
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002e12:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a63      	ldr	r2, [pc, #396]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e2a:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e48:	f043 0310 	orr.w	r3, r3, #16
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	623b      	str	r3, [r7, #32]
 8002e58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e5a:	4b52      	ldr	r3, [pc, #328]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a51      	ldr	r2, [pc, #324]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b4f      	ldr	r3, [pc, #316]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a4b      	ldr	r2, [pc, #300]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a45      	ldr	r2, [pc, #276]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ea2:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a3f      	ldr	r2, [pc, #252]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a39      	ldr	r2, [pc, #228]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a33      	ldr	r2, [pc, #204]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002ed8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <BSP_LCD_MspInit+0x19c>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002eea:	2310      	movs	r3, #16
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002efa:	230e      	movs	r3, #14
 8002efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f02:	4619      	mov	r1, r3
 8002f04:	4828      	ldr	r0, [pc, #160]	; (8002fa8 <BSP_LCD_MspInit+0x1a0>)
 8002f06:	f001 fda5 	bl	8004a54 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002f14:	2309      	movs	r3, #9
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4823      	ldr	r0, [pc, #140]	; (8002fac <BSP_LCD_MspInit+0x1a4>)
 8002f20:	f001 fd98 	bl	8004a54 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002f24:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f2e:	230e      	movs	r3, #14
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f36:	4619      	mov	r1, r3
 8002f38:	481d      	ldr	r0, [pc, #116]	; (8002fb0 <BSP_LCD_MspInit+0x1a8>)
 8002f3a:	f001 fd8b 	bl	8004a54 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002f3e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f48:	230e      	movs	r3, #14
 8002f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f50:	4619      	mov	r1, r3
 8002f52:	4818      	ldr	r0, [pc, #96]	; (8002fb4 <BSP_LCD_MspInit+0x1ac>)
 8002f54:	f001 fd7e 	bl	8004a54 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002f58:	23f7      	movs	r3, #247	; 0xf7
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f60:	230e      	movs	r3, #14
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4813      	ldr	r0, [pc, #76]	; (8002fb8 <BSP_LCD_MspInit+0x1b0>)
 8002f6c:	f001 fd72 	bl	8004a54 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f76:	2301      	movs	r3, #1
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f7e:	4619      	mov	r1, r3
 8002f80:	480b      	ldr	r0, [pc, #44]	; (8002fb0 <BSP_LCD_MspInit+0x1a8>)
 8002f82:	f001 fd67 	bl	8004a54 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002f86:	2308      	movs	r3, #8
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f92:	4619      	mov	r1, r3
 8002f94:	4808      	ldr	r0, [pc, #32]	; (8002fb8 <BSP_LCD_MspInit+0x1b0>)
 8002f96:	f001 fd5d 	bl	8004a54 <HAL_GPIO_Init>
}
 8002f9a:	bf00      	nop
 8002f9c:	3740      	adds	r7, #64	; 0x40
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40021800 	.word	0x40021800
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	40022400 	.word	0x40022400
 8002fb8:	40022800 	.word	0x40022800

08002fbc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <BSP_LCD_ClockConfig+0x34>)
 8002fc8:	2208      	movs	r2, #8
 8002fca:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <BSP_LCD_ClockConfig+0x34>)
 8002fce:	22c0      	movs	r2, #192	; 0xc0
 8002fd0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <BSP_LCD_ClockConfig+0x34>)
 8002fd4:	2205      	movs	r2, #5
 8002fd6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <BSP_LCD_ClockConfig+0x34>)
 8002fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002fe0:	4803      	ldr	r0, [pc, #12]	; (8002ff0 <BSP_LCD_ClockConfig+0x34>)
 8002fe2:	f004 fb69 	bl	80076b8 <HAL_RCCEx_PeriphCLKConfig>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000009c 	.word	0x2000009c

08002ff4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	603a      	str	r2, [r7, #0]
 8002ffe:	80fb      	strh	r3, [r7, #6]
 8003000:	460b      	mov	r3, r1
 8003002:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800300c:	4b53      	ldr	r3, [pc, #332]	; (800315c <DrawChar+0x168>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4953      	ldr	r1, [pc, #332]	; (8003160 <DrawChar+0x16c>)
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	3308      	adds	r3, #8
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	88db      	ldrh	r3, [r3, #6]
 8003022:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003024:	4b4d      	ldr	r3, [pc, #308]	; (800315c <DrawChar+0x168>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	494d      	ldr	r1, [pc, #308]	; (8003160 <DrawChar+0x16c>)
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	3308      	adds	r3, #8
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	889b      	ldrh	r3, [r3, #4]
 800303a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800303c:	8a3b      	ldrh	r3, [r7, #16]
 800303e:	3307      	adds	r3, #7
 8003040:	2b00      	cmp	r3, #0
 8003042:	da00      	bge.n	8003046 <DrawChar+0x52>
 8003044:	3307      	adds	r3, #7
 8003046:	10db      	asrs	r3, r3, #3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	b2da      	uxtb	r2, r3
 800304e:	8a3b      	ldrh	r3, [r7, #16]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	e076      	b.n	800314a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800305c:	8a3b      	ldrh	r3, [r7, #16]
 800305e:	3307      	adds	r3, #7
 8003060:	2b00      	cmp	r3, #0
 8003062:	da00      	bge.n	8003066 <DrawChar+0x72>
 8003064:	3307      	adds	r3, #7
 8003066:	10db      	asrs	r3, r3, #3
 8003068:	461a      	mov	r2, r3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fb03 f302 	mul.w	r3, r3, r2
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	4413      	add	r3, r2
 8003074:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003076:	8a3b      	ldrh	r3, [r7, #16]
 8003078:	3307      	adds	r3, #7
 800307a:	2b00      	cmp	r3, #0
 800307c:	da00      	bge.n	8003080 <DrawChar+0x8c>
 800307e:	3307      	adds	r3, #7
 8003080:	10db      	asrs	r3, r3, #3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d002      	beq.n	800308c <DrawChar+0x98>
 8003086:	2b02      	cmp	r3, #2
 8003088:	d004      	beq.n	8003094 <DrawChar+0xa0>
 800308a:	e00c      	b.n	80030a6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	617b      	str	r3, [r7, #20]
      break;
 8003092:	e016      	b.n	80030c2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	3201      	adds	r2, #1
 800309e:	7812      	ldrb	r2, [r2, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
      break;
 80030a4:	e00d      	b.n	80030c2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	041a      	lsls	r2, r3, #16
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3301      	adds	r3, #1
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	4313      	orrs	r3, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	3202      	adds	r2, #2
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
      break;
 80030c0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	e036      	b.n	8003136 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80030c8:	8a3a      	ldrh	r2, [r7, #16]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	1ad2      	subs	r2, r2, r3
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	4413      	add	r3, r2
 80030d2:	3b01      	subs	r3, #1
 80030d4:	2201      	movs	r2, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d012      	beq.n	800310a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	4413      	add	r3, r2
 80030ec:	b298      	uxth	r0, r3
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <DrawChar+0x168>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	491b      	ldr	r1, [pc, #108]	; (8003160 <DrawChar+0x16c>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	88bb      	ldrh	r3, [r7, #4]
 8003102:	4619      	mov	r1, r3
 8003104:	f7ff fe38 	bl	8002d78 <BSP_LCD_DrawPixel>
 8003108:	e012      	b.n	8003130 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	b29a      	uxth	r2, r3
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	4413      	add	r3, r2
 8003112:	b298      	uxth	r0, r3
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <DrawChar+0x168>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4911      	ldr	r1, [pc, #68]	; (8003160 <DrawChar+0x16c>)
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3304      	adds	r3, #4
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	88bb      	ldrh	r3, [r7, #4]
 800312a:	4619      	mov	r1, r3
 800312c:	f7ff fe24 	bl	8002d78 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	3301      	adds	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	8a3b      	ldrh	r3, [r7, #16]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	429a      	cmp	r2, r3
 800313c:	d3c4      	bcc.n	80030c8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800313e:	88bb      	ldrh	r3, [r7, #4]
 8003140:	3301      	adds	r3, #1
 8003142:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	3301      	adds	r3, #1
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	8a7b      	ldrh	r3, [r7, #18]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	429a      	cmp	r2, r3
 8003150:	d384      	bcc.n	800305c <DrawChar+0x68>
  }
}
 8003152:	bf00      	nop
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000080 	.word	0x20000080
 8003160:	20000084 	.word	0x20000084

08003164 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003172:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <LL_FillBuffer+0x88>)
 8003174:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003178:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <LL_FillBuffer+0x8c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <LL_FillBuffer+0x90>)
 8003180:	2134      	movs	r1, #52	; 0x34
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3348      	adds	r3, #72	; 0x48
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d103      	bne.n	8003198 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003190:	4b16      	ldr	r3, [pc, #88]	; (80031ec <LL_FillBuffer+0x88>)
 8003192:	2202      	movs	r2, #2
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	e002      	b.n	800319e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <LL_FillBuffer+0x88>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800319e:	4a13      	ldr	r2, [pc, #76]	; (80031ec <LL_FillBuffer+0x88>)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <LL_FillBuffer+0x88>)
 80031a6:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <LL_FillBuffer+0x94>)
 80031a8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80031aa:	4810      	ldr	r0, [pc, #64]	; (80031ec <LL_FillBuffer+0x88>)
 80031ac:	f001 f8b6 	bl	800431c <HAL_DMA2D_Init>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <LL_FillBuffer+0x88>)
 80031ba:	f001 fb1d 	bl	80047f8 <HAL_DMA2D_ConfigLayer>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10e      	bne.n	80031e2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69f9      	ldr	r1, [r7, #28]
 80031ce:	4807      	ldr	r0, [pc, #28]	; (80031ec <LL_FillBuffer+0x88>)
 80031d0:	f001 f8ee 	bl	80043b0 <HAL_DMA2D_Start>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d103      	bne.n	80031e2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80031da:	210a      	movs	r1, #10
 80031dc:	4803      	ldr	r0, [pc, #12]	; (80031ec <LL_FillBuffer+0x88>)
 80031de:	f001 f912 	bl	8004406 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000040 	.word	0x20000040
 80031f0:	20000080 	.word	0x20000080
 80031f4:	200009d4 	.word	0x200009d4
 80031f8:	4002b000 	.word	0x4002b000

080031fc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 8003202:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <BSP_SDRAM_Init+0xb0>)
 8003204:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003206:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <BSP_SDRAM_Init+0xb4>)
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800320c:	4b28      	ldr	r3, [pc, #160]	; (80032b0 <BSP_SDRAM_Init+0xb4>)
 800320e:	2207      	movs	r2, #7
 8003210:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003212:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <BSP_SDRAM_Init+0xb4>)
 8003214:	2204      	movs	r2, #4
 8003216:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <BSP_SDRAM_Init+0xb4>)
 800321a:	2207      	movs	r2, #7
 800321c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <BSP_SDRAM_Init+0xb4>)
 8003220:	2202      	movs	r2, #2
 8003222:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <BSP_SDRAM_Init+0xb4>)
 8003226:	2202      	movs	r2, #2
 8003228:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800322a:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <BSP_SDRAM_Init+0xb4>)
 800322c:	2202      	movs	r2, #2
 800322e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 8003232:	2200      	movs	r2, #0
 8003234:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 800323e:	2204      	movs	r2, #4
 8003240:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003242:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 8003244:	2210      	movs	r2, #16
 8003246:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 800324a:	2240      	movs	r2, #64	; 0x40
 800324c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 8003250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003254:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 8003258:	2200      	movs	r2, #0
 800325a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 800325e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003262:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 8003266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800326a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 800326e:	2200      	movs	r2, #0
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003272:	2100      	movs	r1, #0
 8003274:	480c      	ldr	r0, [pc, #48]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 8003276:	f000 f87f 	bl	8003378 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800327a:	490d      	ldr	r1, [pc, #52]	; (80032b0 <BSP_SDRAM_Init+0xb4>)
 800327c:	480a      	ldr	r0, [pc, #40]	; (80032a8 <BSP_SDRAM_Init+0xac>)
 800327e:	f005 fca7 	bl	8008bd0 <HAL_SDRAM_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <BSP_SDRAM_Init+0xb8>)
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e002      	b.n	8003296 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <BSP_SDRAM_Init+0xb8>)
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003296:	f240 6003 	movw	r0, #1539	; 0x603
 800329a:	f000 f80d 	bl	80032b8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <BSP_SDRAM_Init+0xb8>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000a7c 	.word	0x20000a7c
 80032ac:	a0000140 	.word	0xa0000140
 80032b0:	20000120 	.word	0x20000120
 80032b4:	2000000c 	.word	0x2000000c

080032b8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80032c4:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032ca:	4b29      	ldr	r3, [pc, #164]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032cc:	2210      	movs	r2, #16
 80032ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80032dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e0:	4923      	ldr	r1, [pc, #140]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032e2:	4824      	ldr	r0, [pc, #144]	; (8003374 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032e4:	f005 fca8 	bl	8008c38 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80032e8:	2001      	movs	r0, #1
 80032ea:	f000 f96b 	bl	80035c4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032f0:	2202      	movs	r2, #2
 80032f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032f6:	2210      	movs	r2, #16
 80032f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800330a:	4919      	ldr	r1, [pc, #100]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800330c:	4819      	ldr	r0, [pc, #100]	; (8003374 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800330e:	f005 fc93 	bl	8008c38 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003314:	2203      	movs	r2, #3
 8003316:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800331a:	2210      	movs	r2, #16
 800331c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003320:	2208      	movs	r2, #8
 8003322:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003326:	2200      	movs	r2, #0
 8003328:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800332a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332e:	4910      	ldr	r1, [pc, #64]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003330:	4810      	ldr	r0, [pc, #64]	; (8003374 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003332:	f005 fc81 	bl	8008c38 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003336:	f44f 7308 	mov.w	r3, #544	; 0x220
 800333a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800333e:	2204      	movs	r2, #4
 8003340:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003344:	2210      	movs	r2, #16
 8003346:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800334a:	2201      	movs	r2, #1
 800334c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003352:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003358:	4905      	ldr	r1, [pc, #20]	; (8003370 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800335a:	4806      	ldr	r0, [pc, #24]	; (8003374 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800335c:	f005 fc6c 	bl	8008c38 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4804      	ldr	r0, [pc, #16]	; (8003374 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003364:	f005 fc93 	bl	8008c8e <HAL_SDRAM_ProgramRefreshRate>
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	2000013c 	.word	0x2000013c
 8003374:	20000a7c 	.word	0x20000a7c

08003378 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003378:	b580      	push	{r7, lr}
 800337a:	b090      	sub	sp, #64	; 0x40
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003382:	4b70      	ldr	r3, [pc, #448]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	4a6f      	ldr	r2, [pc, #444]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6393      	str	r3, [r2, #56]	; 0x38
 800338e:	4b6d      	ldr	r3, [pc, #436]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800339a:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a69      	ldr	r2, [pc, #420]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b67      	ldr	r3, [pc, #412]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b2:	4b64      	ldr	r3, [pc, #400]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a63      	ldr	r2, [pc, #396]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033b8:	f043 0304 	orr.w	r3, r3, #4
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b61      	ldr	r3, [pc, #388]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ca:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a5d      	ldr	r2, [pc, #372]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033e2:	4b58      	ldr	r3, [pc, #352]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a57      	ldr	r2, [pc, #348]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033e8:	f043 0310 	orr.w	r3, r3, #16
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b55      	ldr	r3, [pc, #340]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033fa:	4b52      	ldr	r3, [pc, #328]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a51      	ldr	r2, [pc, #324]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003400:	f043 0320 	orr.w	r3, r3, #32
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b4f      	ldr	r3, [pc, #316]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003412:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a4b      	ldr	r2, [pc, #300]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b49      	ldr	r3, [pc, #292]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800342a:	4b46      	ldr	r3, [pc, #280]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a45      	ldr	r2, [pc, #276]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4b43      	ldr	r3, [pc, #268]	; (8003544 <BSP_SDRAM_MspInit+0x1cc>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003446:	2301      	movs	r3, #1
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800344a:	2302      	movs	r3, #2
 800344c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800344e:	230c      	movs	r3, #12
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003452:	2308      	movs	r3, #8
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800345a:	4619      	mov	r1, r3
 800345c:	483a      	ldr	r0, [pc, #232]	; (8003548 <BSP_SDRAM_MspInit+0x1d0>)
 800345e:	f001 faf9 	bl	8004a54 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003462:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003468:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800346c:	4619      	mov	r1, r3
 800346e:	4837      	ldr	r0, [pc, #220]	; (800354c <BSP_SDRAM_MspInit+0x1d4>)
 8003470:	f001 faf0 	bl	8004a54 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003474:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800347a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347e:	4619      	mov	r1, r3
 8003480:	4833      	ldr	r0, [pc, #204]	; (8003550 <BSP_SDRAM_MspInit+0x1d8>)
 8003482:	f001 fae7 	bl	8004a54 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003486:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800348c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003490:	4619      	mov	r1, r3
 8003492:	4830      	ldr	r0, [pc, #192]	; (8003554 <BSP_SDRAM_MspInit+0x1dc>)
 8003494:	f001 fade 	bl	8004a54 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003498:	f248 1333 	movw	r3, #33075	; 0x8133
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800349e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034a2:	4619      	mov	r1, r3
 80034a4:	482c      	ldr	r0, [pc, #176]	; (8003558 <BSP_SDRAM_MspInit+0x1e0>)
 80034a6:	f001 fad5 	bl	8004a54 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80034aa:	2328      	movs	r3, #40	; 0x28
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80034ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034b2:	4619      	mov	r1, r3
 80034b4:	4829      	ldr	r0, [pc, #164]	; (800355c <BSP_SDRAM_MspInit+0x1e4>)
 80034b6:	f001 facd 	bl	8004a54 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80034ba:	4b29      	ldr	r3, [pc, #164]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80034c6:	4b26      	ldr	r3, [pc, #152]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034cc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034d6:	4b22      	ldr	r3, [pc, #136]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034dc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034e4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80034ec:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034f2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80034fa:	4b19      	ldr	r3, [pc, #100]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 80034fc:	2203      	movs	r2, #3
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003500:	4b17      	ldr	r3, [pc, #92]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 8003502:	2200      	movs	r2, #0
 8003504:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 800350e:	4a15      	ldr	r2, [pc, #84]	; (8003564 <BSP_SDRAM_MspInit+0x1ec>)
 8003510:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
 8003518:	4a11      	ldr	r2, [pc, #68]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800351e:	4810      	ldr	r0, [pc, #64]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 8003520:	f000 fdee 	bl	8004100 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003524:	480e      	ldr	r0, [pc, #56]	; (8003560 <BSP_SDRAM_MspInit+0x1e8>)
 8003526:	f000 fd3d 	bl	8003fa4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	210f      	movs	r1, #15
 800352e:	2038      	movs	r0, #56	; 0x38
 8003530:	f000 fbaa 	bl	8003c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003534:	2038      	movs	r0, #56	; 0x38
 8003536:	f000 fbc3 	bl	8003cc0 <HAL_NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3740      	adds	r7, #64	; 0x40
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	40020800 	.word	0x40020800
 800354c:	40020c00 	.word	0x40020c00
 8003550:	40021000 	.word	0x40021000
 8003554:	40021400 	.word	0x40021400
 8003558:	40021800 	.word	0x40021800
 800355c:	40021c00 	.word	0x40021c00
 8003560:	2000014c 	.word	0x2000014c
 8003564:	40026410 	.word	0x40026410

08003568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800356c:	2003      	movs	r0, #3
 800356e:	f000 fb80 	bl	8003c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003572:	2000      	movs	r0, #0
 8003574:	f7ff f8b2 	bl	80026dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003578:	f7fe fa0a 	bl	8001990 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_IncTick+0x20>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_IncTick+0x24>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4413      	add	r3, r2
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <HAL_IncTick+0x24>)
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000014 	.word	0x20000014
 80035a8:	20000ab0 	.word	0x20000ab0

080035ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return uwTick;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_GetTick+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000ab0 	.word	0x20000ab0

080035c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035cc:	f7ff ffee 	bl	80035ac <HAL_GetTick>
 80035d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d005      	beq.n	80035ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_Delay+0x40>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ea:	bf00      	nop
 80035ec:	f7ff ffde 	bl	80035ac <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d8f7      	bhi.n	80035ec <HAL_Delay+0x28>
  {
  }
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000014 	.word	0x20000014

08003608 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e031      	b.n	8003682 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fe f9da 	bl	80019e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_ADC_Init+0x84>)
 800364c:	4013      	ands	r3, r2
 800364e:	f043 0202 	orr.w	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f964 	bl	8003924 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
 8003672:	e001      	b.n	8003678 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003680:	7bfb      	ldrb	r3, [r7, #15]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	ffffeefd 	.word	0xffffeefd

08003690 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1c>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e12a      	b.n	8003902 <HAL_ADC_ConfigChannel+0x272>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b09      	cmp	r3, #9
 80036ba:	d93a      	bls.n	8003732 <HAL_ADC_ConfigChannel+0xa2>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036c4:	d035      	beq.n	8003732 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68d9      	ldr	r1, [r3, #12]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	3b1e      	subs	r3, #30
 80036dc:	2207      	movs	r2, #7
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43da      	mvns	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	400a      	ands	r2, r1
 80036ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a87      	ldr	r2, [pc, #540]	; (8003910 <HAL_ADC_ConfigChannel+0x280>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10a      	bne.n	800370c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68d9      	ldr	r1, [r3, #12]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	061a      	lsls	r2, r3, #24
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800370a:	e035      	b.n	8003778 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68d9      	ldr	r1, [r3, #12]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	4618      	mov	r0, r3
 800371e:	4603      	mov	r3, r0
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4403      	add	r3, r0
 8003724:	3b1e      	subs	r3, #30
 8003726:	409a      	lsls	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003730:	e022      	b.n	8003778 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6919      	ldr	r1, [r3, #16]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	b29b      	uxth	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	2207      	movs	r2, #7
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43da      	mvns	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	400a      	ands	r2, r1
 8003754:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6919      	ldr	r1, [r3, #16]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	4618      	mov	r0, r3
 8003768:	4603      	mov	r3, r0
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4403      	add	r3, r0
 800376e:	409a      	lsls	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d824      	bhi.n	80037ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	3b05      	subs	r3, #5
 8003792:	221f      	movs	r2, #31
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43da      	mvns	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	400a      	ands	r2, r1
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4618      	mov	r0, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	3b05      	subs	r3, #5
 80037bc:	fa00 f203 	lsl.w	r2, r0, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34
 80037c8:	e04c      	b.n	8003864 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b0c      	cmp	r3, #12
 80037d0:	d824      	bhi.n	800381c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	3b23      	subs	r3, #35	; 0x23
 80037e4:	221f      	movs	r2, #31
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	400a      	ands	r2, r1
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	3b23      	subs	r3, #35	; 0x23
 800380e:	fa00 f203 	lsl.w	r2, r0, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
 800381a:	e023      	b.n	8003864 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	3b41      	subs	r3, #65	; 0x41
 800382e:	221f      	movs	r2, #31
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43da      	mvns	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	400a      	ands	r2, r1
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	4618      	mov	r0, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	3b41      	subs	r3, #65	; 0x41
 8003858:	fa00 f203 	lsl.w	r2, r0, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2a      	ldr	r2, [pc, #168]	; (8003914 <HAL_ADC_ConfigChannel+0x284>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d10a      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1f4>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003876:	d105      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003878:	4b27      	ldr	r3, [pc, #156]	; (8003918 <HAL_ADC_ConfigChannel+0x288>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a26      	ldr	r2, [pc, #152]	; (8003918 <HAL_ADC_ConfigChannel+0x288>)
 800387e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003882:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_ADC_ConfigChannel+0x284>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d109      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x212>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b12      	cmp	r3, #18
 8003894:	d105      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003896:	4b20      	ldr	r3, [pc, #128]	; (8003918 <HAL_ADC_ConfigChannel+0x288>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_ADC_ConfigChannel+0x288>)
 800389c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038a0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_ADC_ConfigChannel+0x284>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d125      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x268>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_ADC_ConfigChannel+0x280>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <HAL_ADC_ConfigChannel+0x22e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b11      	cmp	r3, #17
 80038bc:	d11c      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_ADC_ConfigChannel+0x288>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a15      	ldr	r2, [pc, #84]	; (8003918 <HAL_ADC_ConfigChannel+0x288>)
 80038c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a10      	ldr	r2, [pc, #64]	; (8003910 <HAL_ADC_ConfigChannel+0x280>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_ADC_ConfigChannel+0x28c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a11      	ldr	r2, [pc, #68]	; (8003920 <HAL_ADC_ConfigChannel+0x290>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	0c9a      	lsrs	r2, r3, #18
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038ea:	e002      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f9      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	10000012 	.word	0x10000012
 8003914:	40012000 	.word	0x40012000
 8003918:	40012300 	.word	0x40012300
 800391c:	20000000 	.word	0x20000000
 8003920:	431bde83 	.word	0x431bde83

08003924 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800392c:	4b78      	ldr	r3, [pc, #480]	; (8003b10 <ADC_Init+0x1ec>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a77      	ldr	r2, [pc, #476]	; (8003b10 <ADC_Init+0x1ec>)
 8003932:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003936:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003938:	4b75      	ldr	r3, [pc, #468]	; (8003b10 <ADC_Init+0x1ec>)
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4973      	ldr	r1, [pc, #460]	; (8003b10 <ADC_Init+0x1ec>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	021a      	lsls	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6899      	ldr	r1, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <ADC_Init+0x1f0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6899      	ldr	r1, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6899      	ldr	r1, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	e00f      	b.n	8003a1e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0202 	bic.w	r2, r2, #2
 8003a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6899      	ldr	r1, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	005a      	lsls	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01b      	beq.n	8003a84 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	3b01      	subs	r3, #1
 8003a78:	035a      	lsls	r2, r3, #13
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	e007      	b.n	8003a94 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	051a      	lsls	r2, r3, #20
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6899      	ldr	r1, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ad6:	025a      	lsls	r2, r3, #9
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6899      	ldr	r1, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	029a      	lsls	r2, r3, #10
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40012300 	.word	0x40012300
 8003b14:	0f000001 	.word	0x0f000001

08003b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <__NVIC_SetPriorityGrouping+0x40>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b34:	4013      	ands	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <__NVIC_SetPriorityGrouping+0x44>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b46:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <__NVIC_SetPriorityGrouping+0x40>)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	60d3      	str	r3, [r2, #12]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00
 8003b5c:	05fa0000 	.word	0x05fa0000

08003b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <__NVIC_GetPriorityGrouping+0x18>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f003 0307 	and.w	r3, r3, #7
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	db0b      	blt.n	8003ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	f003 021f 	and.w	r2, r3, #31
 8003b94:	4907      	ldr	r1, [pc, #28]	; (8003bb4 <__NVIC_EnableIRQ+0x38>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000e100 	.word	0xe000e100

08003bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	6039      	str	r1, [r7, #0]
 8003bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	db0a      	blt.n	8003be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	490c      	ldr	r1, [pc, #48]	; (8003c04 <__NVIC_SetPriority+0x4c>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	0112      	lsls	r2, r2, #4
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be0:	e00a      	b.n	8003bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4908      	ldr	r1, [pc, #32]	; (8003c08 <__NVIC_SetPriority+0x50>)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3b04      	subs	r3, #4
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	761a      	strb	r2, [r3, #24]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000e100 	.word	0xe000e100
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f1c3 0307 	rsb	r3, r3, #7
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf28      	it	cs
 8003c2a:	2304      	movcs	r3, #4
 8003c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d902      	bls.n	8003c3c <NVIC_EncodePriority+0x30>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3b03      	subs	r3, #3
 8003c3a:	e000      	b.n	8003c3e <NVIC_EncodePriority+0x32>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c54:	f04f 31ff 	mov.w	r1, #4294967295
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43d9      	mvns	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	4313      	orrs	r3, r2
         );
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3724      	adds	r7, #36	; 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ff4c 	bl	8003b18 <__NVIC_SetPriorityGrouping>
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9a:	f7ff ff61 	bl	8003b60 <__NVIC_GetPriorityGrouping>
 8003c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	6978      	ldr	r0, [r7, #20]
 8003ca6:	f7ff ffb1 	bl	8003c0c <NVIC_EncodePriority>
 8003caa:	4602      	mov	r2, r0
 8003cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff80 	bl	8003bb8 <__NVIC_SetPriority>
}
 8003cb8:	bf00      	nop
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff54 	bl	8003b7c <__NVIC_EnableIRQ>
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e054      	b.n	8003d98 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7f5b      	ldrb	r3, [r3, #29]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd fec8 	bl	8001a94 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	791b      	ldrb	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10c      	bne.n	8003d2c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <HAL_CRC_Init+0xc4>)
 8003d18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0218 	bic.w	r2, r2, #24
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	e00c      	b.n	8003d46 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6899      	ldr	r1, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	461a      	mov	r2, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f834 	bl	8003da4 <HAL_CRCEx_Polynomial_Set>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e028      	b.n	8003d98 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	795b      	ldrb	r3, [r3, #5]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d105      	bne.n	8003d5a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	611a      	str	r2, [r3, #16]
 8003d58:	e004      	b.n	8003d64 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6912      	ldr	r2, [r2, #16]
 8003d62:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	04c11db7 	.word	0x04c11db7

08003da4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003db4:	231f      	movs	r3, #31
 8003db6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003db8:	bf00      	nop
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	613a      	str	r2, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <HAL_CRCEx_Polynomial_Set+0x34>
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b18      	cmp	r3, #24
 8003ddc:	d846      	bhi.n	8003e6c <HAL_CRCEx_Polynomial_Set+0xc8>
 8003dde:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003e73 	.word	0x08003e73
 8003de8:	08003e6d 	.word	0x08003e6d
 8003dec:	08003e6d 	.word	0x08003e6d
 8003df0:	08003e6d 	.word	0x08003e6d
 8003df4:	08003e6d 	.word	0x08003e6d
 8003df8:	08003e6d 	.word	0x08003e6d
 8003dfc:	08003e6d 	.word	0x08003e6d
 8003e00:	08003e6d 	.word	0x08003e6d
 8003e04:	08003e61 	.word	0x08003e61
 8003e08:	08003e6d 	.word	0x08003e6d
 8003e0c:	08003e6d 	.word	0x08003e6d
 8003e10:	08003e6d 	.word	0x08003e6d
 8003e14:	08003e6d 	.word	0x08003e6d
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	08003e6d 	.word	0x08003e6d
 8003e24:	08003e55 	.word	0x08003e55
 8003e28:	08003e6d 	.word	0x08003e6d
 8003e2c:	08003e6d 	.word	0x08003e6d
 8003e30:	08003e6d 	.word	0x08003e6d
 8003e34:	08003e6d 	.word	0x08003e6d
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003e6d 	.word	0x08003e6d
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e49 	.word	0x08003e49
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	d913      	bls.n	8003e76 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e52:	e010      	b.n	8003e76 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b07      	cmp	r3, #7
 8003e58:	d90f      	bls.n	8003e7a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e5e:	e00c      	b.n	8003e7a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b0f      	cmp	r3, #15
 8003e64:	d90b      	bls.n	8003e7e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e6a:	e008      	b.n	8003e7e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e70:	e006      	b.n	8003e80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e7e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10d      	bne.n	8003ea2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 0118 	bic.w	r1, r3, #24
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e069      	b.n	8003f96 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd fe00 	bl	8001ad4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <HAL_DCMI_Init+0xf0>)
 8003ef6:	400b      	ands	r3, r1
 8003ef8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003f0e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003f1a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003f26:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003f32:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003f3e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d112      	bne.n	8003f76 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7f1b      	ldrb	r3, [r3, #28]
 8003f54:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	7f5b      	ldrb	r3, [r3, #29]
 8003f5a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f5c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7f9b      	ldrb	r3, [r3, #30]
 8003f62:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003f64:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	7fdb      	ldrb	r3, [r3, #31]
 8003f6c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003f72:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f74:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 021e 	orr.w	r2, r2, #30
 8003f84:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	ffe0f007 	.word	0xffe0f007

08003fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fb0:	f7ff fafc 	bl	80035ac <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e099      	b.n	80040f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe0:	e00f      	b.n	8004002 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fe2:	f7ff fae3 	bl	80035ac <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d908      	bls.n	8004002 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e078      	b.n	80040f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e8      	bne.n	8003fe2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4b38      	ldr	r3, [pc, #224]	; (80040fc <HAL_DMA_Init+0x158>)
 800401c:	4013      	ands	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800402e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800403a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	2b04      	cmp	r3, #4
 800405a:	d107      	bne.n	800406c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	4313      	orrs	r3, r2
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0307 	bic.w	r3, r3, #7
 8004082:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b04      	cmp	r3, #4
 8004094:	d117      	bne.n	80040c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f8bd 	bl	8004228 <DMA_CheckFifoParam>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2240      	movs	r2, #64	; 0x40
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040c2:	2301      	movs	r3, #1
 80040c4:	e016      	b.n	80040f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f874 	bl	80041bc <DMA_CalcBaseAndBitshift>
 80040d4:	4603      	mov	r3, r0
 80040d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040dc:	223f      	movs	r2, #63	; 0x3f
 80040de:	409a      	lsls	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	f010803f 	.word	0xf010803f

08004100 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e050      	b.n	80041b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d101      	bne.n	8004122 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
 8004120:	e048      	b.n	80041b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2200      	movs	r2, #0
 8004140:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2221      	movs	r2, #33	; 0x21
 8004160:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f82a 	bl	80041bc <DMA_CalcBaseAndBitshift>
 8004168:	4603      	mov	r3, r0
 800416a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	223f      	movs	r2, #63	; 0x3f
 8004172:	409a      	lsls	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	3b10      	subs	r3, #16
 80041cc:	4a13      	ldr	r2, [pc, #76]	; (800421c <DMA_CalcBaseAndBitshift+0x60>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041d6:	4a12      	ldr	r2, [pc, #72]	; (8004220 <DMA_CalcBaseAndBitshift+0x64>)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d908      	bls.n	80041fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <DMA_CalcBaseAndBitshift+0x68>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	1d1a      	adds	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	659a      	str	r2, [r3, #88]	; 0x58
 80041fa:	e006      	b.n	800420a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <DMA_CalcBaseAndBitshift+0x68>)
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	aaaaaaab 	.word	0xaaaaaaab
 8004220:	0800dd78 	.word	0x0800dd78
 8004224:	fffffc00 	.word	0xfffffc00

08004228 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d11f      	bne.n	8004282 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d855      	bhi.n	80042f4 <DMA_CheckFifoParam+0xcc>
 8004248:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <DMA_CheckFifoParam+0x28>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004261 	.word	0x08004261
 8004254:	08004273 	.word	0x08004273
 8004258:	08004261 	.word	0x08004261
 800425c:	080042f5 	.word	0x080042f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d045      	beq.n	80042f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004270:	e042      	b.n	80042f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800427a:	d13f      	bne.n	80042fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004280:	e03c      	b.n	80042fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428a:	d121      	bne.n	80042d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d836      	bhi.n	8004300 <DMA_CheckFifoParam+0xd8>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <DMA_CheckFifoParam+0x70>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042af 	.word	0x080042af
 80042a0:	080042a9 	.word	0x080042a9
 80042a4:	080042c1 	.word	0x080042c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e02f      	b.n	800430e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d024      	beq.n	8004304 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042be:	e021      	b.n	8004304 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c8:	d11e      	bne.n	8004308 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042ce:	e01b      	b.n	8004308 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d902      	bls.n	80042dc <DMA_CheckFifoParam+0xb4>
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d003      	beq.n	80042e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042da:	e018      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e015      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
      break;
 80042f2:	e00b      	b.n	800430c <DMA_CheckFifoParam+0xe4>
      break;
 80042f4:	bf00      	nop
 80042f6:	e00a      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 80042f8:	bf00      	nop
 80042fa:	e008      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 80042fc:	bf00      	nop
 80042fe:	e006      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 8004300:	bf00      	nop
 8004302:	e004      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 8004304:	bf00      	nop
 8004306:	e002      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;   
 8004308:	bf00      	nop
 800430a:	e000      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 800430c:	bf00      	nop
    }
  } 
  
  return status; 
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e039      	b.n	80043a2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd fc84 	bl	8001c50 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	f023 0107 	bic.w	r1, r3, #7
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <HAL_DMA2D_Init+0x90>)
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68d1      	ldr	r1, [r2, #12]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	430b      	orrs	r3, r1
 8004390:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	ffffc000 	.word	0xffffc000

080043b0 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_DMA2D_Start+0x1c>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e018      	b.n	80043fe <HAL_DMA2D_Start+0x4e>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fa98 	bl	800491c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b086      	sub	sp, #24
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d056      	beq.n	80044d0 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004422:	f7ff f8c3 	bl	80035ac <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004428:	e04b      	b.n	80044c2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004438:	2b00      	cmp	r3, #0
 800443a:	d023      	beq.n	8004484 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	f043 0202 	orr.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2221      	movs	r2, #33	; 0x21
 800446e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2204      	movs	r2, #4
 8004474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0a5      	b.n	80045d0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d01a      	beq.n	80044c2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800448c:	f7ff f88e 	bl	80035ac <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <HAL_DMA2D_PollForTransfer+0x9c>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2203      	movs	r2, #3
 80044b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e086      	b.n	80045d0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ac      	beq.n	800442a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d061      	beq.n	80045b6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80044f2:	f7ff f85b 	bl	80035ac <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044f8:	e056      	b.n	80045a8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004508:	2b00      	cmp	r3, #0
 800450a:	d02e      	beq.n	800456a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	f043 0204 	orr.w	r2, r3, #4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004530:	f043 0202 	orr.w	r2, r3, #2
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2229      	movs	r2, #41	; 0x29
 8004554:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2204      	movs	r2, #4
 800455a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e032      	b.n	80045d0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d01a      	beq.n	80045a8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004572:	f7ff f81b 	bl	80035ac <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <HAL_DMA2D_PollForTransfer+0x182>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10f      	bne.n	80045a8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2203      	movs	r2, #3
 8004598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e013      	b.n	80045d0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0a1      	beq.n	80044fa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2212      	movs	r2, #18
 80045bc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d026      	beq.n	8004648 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d021      	beq.n	8004648 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004612:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	f043 0201 	orr.w	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2201      	movs	r2, #1
 8004626:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2204      	movs	r2, #4
 800462c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d026      	beq.n	80046a0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d021      	beq.n	80046a0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800466a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2220      	movs	r2, #32
 8004672:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	f043 0202 	orr.w	r2, r3, #2
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2204      	movs	r2, #4
 8004684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d026      	beq.n	80046f8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d021      	beq.n	80046f8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2208      	movs	r2, #8
 80046ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	f043 0204 	orr.w	r2, r3, #4
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2204      	movs	r2, #4
 80046dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d013      	beq.n	800472a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00e      	beq.n	800472a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2204      	movs	r2, #4
 8004722:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f853 	bl	80047d0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d024      	beq.n	800477e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01f      	beq.n	800477e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800474c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2202      	movs	r2, #2
 8004754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01f      	beq.n	80047c8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01a      	beq.n	80047c8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2210      	movs	r2, #16
 80047a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f80e 	bl	80047e4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_DMA2D_ConfigLayer+0x20>
 8004814:	2302      	movs	r3, #2
 8004816:	e079      	b.n	800490c <HAL_DMA2D_ConfigLayer+0x114>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	3318      	adds	r3, #24
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004842:	4b35      	ldr	r3, [pc, #212]	; (8004918 <HAL_DMA2D_ConfigLayer+0x120>)
 8004844:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b0a      	cmp	r3, #10
 800484c:	d003      	beq.n	8004856 <HAL_DMA2D_ConfigLayer+0x5e>
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b09      	cmp	r3, #9
 8004854:	d107      	bne.n	8004866 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e005      	b.n	8004872 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	061b      	lsls	r3, r3, #24
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d120      	bne.n	80048ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	43db      	mvns	r3, r3
 8004882:	ea02 0103 	and.w	r1, r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	430a      	orrs	r2, r1
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b0a      	cmp	r3, #10
 80048a0:	d003      	beq.n	80048aa <HAL_DMA2D_ConfigLayer+0xb2>
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b09      	cmp	r3, #9
 80048a8:	d127      	bne.n	80048fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28
 80048b8:	e01f      	b.n	80048fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	ea02 0103 	and.w	r1, r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b0a      	cmp	r3, #10
 80048e2:	d003      	beq.n	80048ec <HAL_DMA2D_ConfigLayer+0xf4>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b09      	cmp	r3, #9
 80048ea:	d106      	bne.n	80048fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80048f8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	ff03000f 	.word	0xff03000f

0800491c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800491c:	b480      	push	{r7}
 800491e:	b08b      	sub	sp, #44	; 0x2c
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004930:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	041a      	lsls	r2, r3, #16
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	431a      	orrs	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004954:	d174      	bne.n	8004a40 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800495c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004964:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800496c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d108      	bne.n	800498e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	431a      	orrs	r2, r3
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	4313      	orrs	r3, r2
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
 800498c:	e053      	b.n	8004a36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d106      	bne.n	80049a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
 80049a2:	e048      	b.n	8004a36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d111      	bne.n	80049d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	0cdb      	lsrs	r3, r3, #19
 80049b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	0a9b      	lsrs	r3, r3, #10
 80049b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	08db      	lsrs	r3, r3, #3
 80049bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	02db      	lsls	r3, r3, #11
 80049c6:	4313      	orrs	r3, r2
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	e032      	b.n	8004a36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d117      	bne.n	8004a08 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	0fdb      	lsrs	r3, r3, #31
 80049dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	0cdb      	lsrs	r3, r3, #19
 80049e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	0adb      	lsrs	r3, r3, #11
 80049e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	08db      	lsrs	r3, r3, #3
 80049ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	029b      	lsls	r3, r3, #10
 80049f8:	431a      	orrs	r2, r3
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	03db      	lsls	r3, r3, #15
 80049fe:	4313      	orrs	r3, r2
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	e016      	b.n	8004a36 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	0f1b      	lsrs	r3, r3, #28
 8004a0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	0d1b      	lsrs	r3, r3, #20
 8004a12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	0b1b      	lsrs	r3, r3, #12
 8004a18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	011a      	lsls	r2, r3, #4
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	031b      	lsls	r3, r3, #12
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004a3e:	e003      	b.n	8004a48 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	60da      	str	r2, [r3, #12]
}
 8004a48:	bf00      	nop
 8004a4a:	372c      	adds	r7, #44	; 0x2c
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	; 0x24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e175      	b.n	8004d60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a74:	2201      	movs	r2, #1
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4013      	ands	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	f040 8164 	bne.w	8004d5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d00b      	beq.n	8004ab2 <HAL_GPIO_Init+0x5e>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d007      	beq.n	8004ab2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004aa6:	2b11      	cmp	r3, #17
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b12      	cmp	r3, #18
 8004ab0:	d130      	bne.n	8004b14 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	2203      	movs	r2, #3
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ae8:	2201      	movs	r2, #1
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 0201 	and.w	r2, r3, #1
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	2203      	movs	r2, #3
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d003      	beq.n	8004b54 <HAL_GPIO_Init+0x100>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b12      	cmp	r3, #18
 8004b52:	d123      	bne.n	8004b9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	08da      	lsrs	r2, r3, #3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3208      	adds	r2, #8
 8004b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	220f      	movs	r2, #15
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4013      	ands	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	08da      	lsrs	r2, r3, #3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3208      	adds	r2, #8
 8004b96:	69b9      	ldr	r1, [r7, #24]
 8004b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0203 	and.w	r2, r3, #3
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80be 	beq.w	8004d5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bde:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_GPIO_Init+0x320>)
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	4a64      	ldr	r2, [pc, #400]	; (8004d74 <HAL_GPIO_Init+0x320>)
 8004be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004be8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bea:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <HAL_GPIO_Init+0x320>)
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004bf6:	4a60      	ldr	r2, [pc, #384]	; (8004d78 <HAL_GPIO_Init+0x324>)
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	089b      	lsrs	r3, r3, #2
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	220f      	movs	r2, #15
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a57      	ldr	r2, [pc, #348]	; (8004d7c <HAL_GPIO_Init+0x328>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d037      	beq.n	8004c92 <HAL_GPIO_Init+0x23e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a56      	ldr	r2, [pc, #344]	; (8004d80 <HAL_GPIO_Init+0x32c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d031      	beq.n	8004c8e <HAL_GPIO_Init+0x23a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a55      	ldr	r2, [pc, #340]	; (8004d84 <HAL_GPIO_Init+0x330>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d02b      	beq.n	8004c8a <HAL_GPIO_Init+0x236>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a54      	ldr	r2, [pc, #336]	; (8004d88 <HAL_GPIO_Init+0x334>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d025      	beq.n	8004c86 <HAL_GPIO_Init+0x232>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a53      	ldr	r2, [pc, #332]	; (8004d8c <HAL_GPIO_Init+0x338>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01f      	beq.n	8004c82 <HAL_GPIO_Init+0x22e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_GPIO_Init+0x33c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d019      	beq.n	8004c7e <HAL_GPIO_Init+0x22a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a51      	ldr	r2, [pc, #324]	; (8004d94 <HAL_GPIO_Init+0x340>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_GPIO_Init+0x226>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a50      	ldr	r2, [pc, #320]	; (8004d98 <HAL_GPIO_Init+0x344>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00d      	beq.n	8004c76 <HAL_GPIO_Init+0x222>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4f      	ldr	r2, [pc, #316]	; (8004d9c <HAL_GPIO_Init+0x348>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d007      	beq.n	8004c72 <HAL_GPIO_Init+0x21e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a4e      	ldr	r2, [pc, #312]	; (8004da0 <HAL_GPIO_Init+0x34c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <HAL_GPIO_Init+0x21a>
 8004c6a:	2309      	movs	r3, #9
 8004c6c:	e012      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c6e:	230a      	movs	r3, #10
 8004c70:	e010      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c72:	2308      	movs	r3, #8
 8004c74:	e00e      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c76:	2307      	movs	r3, #7
 8004c78:	e00c      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c7a:	2306      	movs	r3, #6
 8004c7c:	e00a      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c7e:	2305      	movs	r3, #5
 8004c80:	e008      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c82:	2304      	movs	r3, #4
 8004c84:	e006      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c86:	2303      	movs	r3, #3
 8004c88:	e004      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e002      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <HAL_GPIO_Init+0x240>
 8004c92:	2300      	movs	r3, #0
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	f002 0203 	and.w	r2, r2, #3
 8004c9a:	0092      	lsls	r2, r2, #2
 8004c9c:	4093      	lsls	r3, r2
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ca4:	4934      	ldr	r1, [pc, #208]	; (8004d78 <HAL_GPIO_Init+0x324>)
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	089b      	lsrs	r3, r3, #2
 8004caa:	3302      	adds	r3, #2
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cb2:	4b3c      	ldr	r3, [pc, #240]	; (8004da4 <HAL_GPIO_Init+0x350>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cd6:	4a33      	ldr	r2, [pc, #204]	; (8004da4 <HAL_GPIO_Init+0x350>)
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004cdc:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <HAL_GPIO_Init+0x350>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d00:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <HAL_GPIO_Init+0x350>)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d06:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <HAL_GPIO_Init+0x350>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <HAL_GPIO_Init+0x350>)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d30:	4b1c      	ldr	r3, [pc, #112]	; (8004da4 <HAL_GPIO_Init+0x350>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <HAL_GPIO_Init+0x350>)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	2b0f      	cmp	r3, #15
 8004d64:	f67f ae86 	bls.w	8004a74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3724      	adds	r7, #36	; 0x24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40013800 	.word	0x40013800
 8004d7c:	40020000 	.word	0x40020000
 8004d80:	40020400 	.word	0x40020400
 8004d84:	40020800 	.word	0x40020800
 8004d88:	40020c00 	.word	0x40020c00
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40021400 	.word	0x40021400
 8004d94:	40021800 	.word	0x40021800
 8004d98:	40021c00 	.word	0x40021c00
 8004d9c:	40022000 	.word	0x40022000
 8004da0:	40022400 	.word	0x40022400
 8004da4:	40013c00 	.word	0x40013c00

08004da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]
 8004db4:	4613      	mov	r3, r2
 8004db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004db8:	787b      	ldrb	r3, [r7, #1]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004dc4:	e003      	b.n	8004dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004dc6:	887b      	ldrh	r3, [r7, #2]
 8004dc8:	041a      	lsls	r2, r3, #16
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	619a      	str	r2, [r3, #24]
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	4013      	ands	r3, r2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	041a      	lsls	r2, r3, #16
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004dfa:	e002      	b.n	8004e02 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dfc:	887a      	ldrh	r2, [r7, #2]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	619a      	str	r2, [r3, #24]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b086      	sub	sp, #24
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f005 fe1b 	bl	800aa60 <USB_GetMode>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 80ef 	bne.w	8005010 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f005 fdff 	bl	800aa3a <USB_ReadInterrupts>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80e5 	beq.w	800500e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f005 fdf6 	bl	800aa3a <USB_ReadInterrupts>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e58:	d104      	bne.n	8004e64 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e62:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f005 fde6 	bl	800aa3a <USB_ReadInterrupts>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e78:	d104      	bne.n	8004e84 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e82:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f005 fdd6 	bl	800aa3a <USB_ReadInterrupts>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e98:	d104      	bne.n	8004ea4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ea2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f005 fdc6 	bl	800aa3a <USB_ReadInterrupts>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d103      	bne.n	8004ec0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 fdb8 	bl	800aa3a <USB_ReadInterrupts>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed4:	d115      	bne.n	8004f02 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004ede:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d108      	bne.n	8004f02 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f007 f909 	bl	800c108 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2101      	movs	r1, #1
 8004efc:	4618      	mov	r0, r3
 8004efe:	f005 fdbd 	bl	800aa7c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f005 fd97 	bl	800aa3a <USB_ReadInterrupts>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f16:	d102      	bne.n	8004f1e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f001 f8ef 	bl	80060fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f005 fd89 	bl	800aa3a <USB_ReadInterrupts>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d106      	bne.n	8004f40 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f007 f8cc 	bl	800c0d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f005 fd78 	bl	800aa3a <USB_ReadInterrupts>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f54:	d138      	bne.n	8004fc8 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f005 fdc8 	bl	800aaf0 <USB_HC_ReadInterrupt>
 8004f60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e025      	b.n	8004fb4 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d018      	beq.n	8004fae <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f92:	d106      	bne.n	8004fa2 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f858 	bl	8005050 <HCD_HC_IN_IRQHandler>
 8004fa0:	e005      	b.n	8004fae <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fc86 	bl	80058ba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3d4      	bcc.n	8004f68 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f005 fd34 	bl	800aa3a <USB_ReadInterrupts>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d101      	bne.n	8004fe0 <HAL_HCD_IRQHandler+0x1d2>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_HCD_IRQHandler+0x1d4>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d014      	beq.n	8005010 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0210 	bic.w	r2, r2, #16
 8004ff4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 ffd4 	bl	8005fa4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0210 	orr.w	r2, r2, #16
 800500a:	619a      	str	r2, [r3, #24]
 800500c:	e000      	b.n	8005010 <HAL_HCD_IRQHandler+0x202>
      return;
 800500e:	bf00      	nop
    }
  }
}
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_HCD_Stop+0x16>
 8005028:	2302      	movs	r3, #2
 800502a:	e00d      	b.n	8005048 <HAL_HCD_Stop+0x32>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f005 fe69 	bl	800ad10 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b04      	cmp	r3, #4
 800507e:	d119      	bne.n	80050b4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	461a      	mov	r2, r3
 800508e:	2304      	movs	r3, #4
 8005090:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ac:	f043 0302 	orr.w	r3, r3, #2
 80050b0:	60d3      	str	r3, [r2, #12]
 80050b2:	e0ce      	b.n	8005252 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ca:	d12c      	bne.n	8005126 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d8:	461a      	mov	r2, r3
 80050da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	335d      	adds	r3, #93	; 0x5d
 80050f0:	2207      	movs	r2, #7
 80050f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	440a      	add	r2, r1
 800510a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800510e:	f043 0302 	orr.w	r3, r3, #2
 8005112:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f005 fcf7 	bl	800ab12 <USB_HC_Halt>
 8005124:	e095      	b.n	8005252 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b20      	cmp	r3, #32
 800513a:	d109      	bne.n	8005150 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005148:	461a      	mov	r2, r3
 800514a:	2320      	movs	r3, #32
 800514c:	6093      	str	r3, [r2, #8]
 800514e:	e080      	b.n	8005252 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b08      	cmp	r3, #8
 8005164:	d134      	bne.n	80051d0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	440a      	add	r2, r1
 800517c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	440b      	add	r3, r1
 8005194:	335d      	adds	r3, #93	; 0x5d
 8005196:	2205      	movs	r2, #5
 8005198:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	461a      	mov	r2, r3
 80051a8:	2310      	movs	r3, #16
 80051aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	461a      	mov	r2, r3
 80051ba:	2308      	movs	r3, #8
 80051bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f005 fca2 	bl	800ab12 <USB_HC_Halt>
 80051ce:	e040      	b.n	8005252 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e6:	d134      	bne.n	8005252 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005202:	f043 0302 	orr.w	r3, r3, #2
 8005206:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f005 fc7d 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	461a      	mov	r2, r3
 8005226:	2310      	movs	r3, #16
 8005228:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	440b      	add	r3, r1
 8005238:	335d      	adds	r3, #93	; 0x5d
 800523a:	2208      	movs	r2, #8
 800523c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4413      	add	r3, r2
 8005246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524a:	461a      	mov	r2, r3
 800524c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005250:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005268:	d122      	bne.n	80052b0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	440a      	add	r2, r1
 8005280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005284:	f043 0302 	orr.w	r3, r3, #2
 8005288:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	4611      	mov	r1, r2
 8005294:	4618      	mov	r0, r3
 8005296:	f005 fc3c 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a6:	461a      	mov	r2, r3
 80052a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80052ae:	e300      	b.n	80058b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	f040 80fd 	bne.w	80054c2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	3348      	adds	r3, #72	; 0x48
 80052e0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	0159      	lsls	r1, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	440b      	add	r3, r1
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80052f4:	1ad1      	subs	r1, r2, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4403      	add	r3, r0
 8005304:	334c      	adds	r3, #76	; 0x4c
 8005306:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	440b      	add	r3, r1
 8005316:	335d      	adds	r3, #93	; 0x5d
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	440b      	add	r3, r1
 800532a:	3358      	adds	r3, #88	; 0x58
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	461a      	mov	r2, r3
 800533e:	2301      	movs	r3, #1
 8005340:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	440b      	add	r3, r1
 8005350:	333f      	adds	r3, #63	; 0x3f
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	333f      	adds	r3, #63	; 0x3f
 8005368:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800536a:	2b02      	cmp	r3, #2
 800536c:	d121      	bne.n	80053b2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	440a      	add	r2, r1
 8005384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005388:	f043 0302 	orr.w	r3, r3, #2
 800538c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f005 fbba 	bl	800ab12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	461a      	mov	r2, r3
 80053ac:	2310      	movs	r3, #16
 80053ae:	6093      	str	r3, [r2, #8]
 80053b0:	e070      	b.n	8005494 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	440b      	add	r3, r1
 80053c0:	333f      	adds	r3, #63	; 0x3f
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d12a      	bne.n	800541e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	440b      	add	r3, r1
 80053f6:	335c      	adds	r3, #92	; 0x5c
 80053f8:	2201      	movs	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	b2d8      	uxtb	r0, r3
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	440b      	add	r3, r1
 800540e:	335c      	adds	r3, #92	; 0x5c
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	4601      	mov	r1, r0
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f006 fe84 	bl	800c124 <HAL_HCD_HC_NotifyURBChange_Callback>
 800541c:	e03a      	b.n	8005494 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	440b      	add	r3, r1
 800542c:	333f      	adds	r3, #63	; 0x3f
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d12f      	bne.n	8005494 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	440b      	add	r3, r1
 8005442:	335c      	adds	r3, #92	; 0x5c
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	440b      	add	r3, r1
 8005456:	3350      	adds	r3, #80	; 0x50
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	f083 0301 	eor.w	r3, r3, #1
 800545e:	b2d8      	uxtb	r0, r3
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	440b      	add	r3, r1
 800546e:	3350      	adds	r3, #80	; 0x50
 8005470:	4602      	mov	r2, r0
 8005472:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	b2d8      	uxtb	r0, r3
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	440b      	add	r3, r1
 8005486:	335c      	adds	r3, #92	; 0x5c
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	4601      	mov	r1, r0
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f006 fe48 	bl	800c124 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	3350      	adds	r3, #80	; 0x50
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f083 0301 	eor.w	r3, r3, #1
 80054aa:	b2d8      	uxtb	r0, r3
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	440b      	add	r3, r1
 80054ba:	3350      	adds	r3, #80	; 0x50
 80054bc:	4602      	mov	r2, r0
 80054be:	701a      	strb	r2, [r3, #0]
}
 80054c0:	e1f7      	b.n	80058b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	f040 811a 	bne.w	800570e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054f4:	f023 0302 	bic.w	r3, r3, #2
 80054f8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	440b      	add	r3, r1
 8005508:	335d      	adds	r3, #93	; 0x5d
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d10a      	bne.n	8005526 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	440b      	add	r3, r1
 800551e:	335c      	adds	r3, #92	; 0x5c
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e0d9      	b.n	80056da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	440b      	add	r3, r1
 8005534:	335d      	adds	r3, #93	; 0x5d
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b05      	cmp	r3, #5
 800553a:	d10a      	bne.n	8005552 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	440b      	add	r3, r1
 800554a:	335c      	adds	r3, #92	; 0x5c
 800554c:	2205      	movs	r2, #5
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e0c3      	b.n	80056da <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	440b      	add	r3, r1
 8005560:	335d      	adds	r3, #93	; 0x5d
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b06      	cmp	r3, #6
 8005566:	d00a      	beq.n	800557e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	440b      	add	r3, r1
 8005576:	335d      	adds	r3, #93	; 0x5d
 8005578:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800557a:	2b08      	cmp	r3, #8
 800557c:	d156      	bne.n	800562c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	440b      	add	r3, r1
 800558c:	3358      	adds	r3, #88	; 0x58
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	1c59      	adds	r1, r3, #1
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4403      	add	r3, r0
 80055a0:	3358      	adds	r3, #88	; 0x58
 80055a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	440b      	add	r3, r1
 80055b2:	3358      	adds	r3, #88	; 0x58
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d914      	bls.n	80055e4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	3358      	adds	r3, #88	; 0x58
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	440b      	add	r3, r1
 80055dc:	335c      	adds	r3, #92	; 0x5c
 80055de:	2204      	movs	r2, #4
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e009      	b.n	80055f8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	440b      	add	r3, r1
 80055f2:	335c      	adds	r3, #92	; 0x5c
 80055f4:	2202      	movs	r2, #2
 80055f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800560e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005616:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e056      	b.n	80056da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	440b      	add	r3, r1
 800563a:	335d      	adds	r3, #93	; 0x5d
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d123      	bne.n	800568a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	440b      	add	r3, r1
 8005650:	335c      	adds	r3, #92	; 0x5c
 8005652:	2202      	movs	r2, #2
 8005654:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800566c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005674:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	e027      	b.n	80056da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	440b      	add	r3, r1
 8005698:	335d      	adds	r3, #93	; 0x5d
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b07      	cmp	r3, #7
 800569e:	d11c      	bne.n	80056da <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	440b      	add	r3, r1
 80056ae:	3358      	adds	r3, #88	; 0x58
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	1c59      	adds	r1, r3, #1
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4403      	add	r3, r0
 80056c2:	3358      	adds	r3, #88	; 0x58
 80056c4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	440b      	add	r3, r1
 80056d4:	335c      	adds	r3, #92	; 0x5c
 80056d6:	2204      	movs	r2, #4
 80056d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e6:	461a      	mov	r2, r3
 80056e8:	2302      	movs	r3, #2
 80056ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	b2d8      	uxtb	r0, r3
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	440b      	add	r3, r1
 80056fe:	335c      	adds	r3, #92	; 0x5c
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	4601      	mov	r1, r0
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f006 fd0c 	bl	800c124 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800570c:	e0d1      	b.n	80058b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d13e      	bne.n	80057a2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	440a      	add	r2, r1
 800573a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800573e:	f043 0302 	orr.w	r3, r3, #2
 8005742:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	3358      	adds	r3, #88	; 0x58
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	1c59      	adds	r1, r3, #1
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4403      	add	r3, r0
 8005766:	3358      	adds	r3, #88	; 0x58
 8005768:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	440b      	add	r3, r1
 8005778:	335d      	adds	r3, #93	; 0x5d
 800577a:	2206      	movs	r2, #6
 800577c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f005 f9c2 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	461a      	mov	r2, r3
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	6093      	str	r3, [r2, #8]
}
 80057a0:	e087      	b.n	80058b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d17c      	bne.n	80058b2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	440b      	add	r3, r1
 80057c6:	333f      	adds	r3, #63	; 0x3f
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d122      	bne.n	8005814 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	440b      	add	r3, r1
 80057dc:	3358      	adds	r3, #88	; 0x58
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fc:	f043 0302 	orr.w	r3, r3, #2
 8005800:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	4611      	mov	r1, r2
 800580c:	4618      	mov	r0, r3
 800580e:	f005 f980 	bl	800ab12 <USB_HC_Halt>
 8005812:	e045      	b.n	80058a0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	440b      	add	r3, r1
 8005822:	333f      	adds	r3, #63	; 0x3f
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	440b      	add	r3, r1
 8005838:	333f      	adds	r3, #63	; 0x3f
 800583a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800583c:	2b02      	cmp	r3, #2
 800583e:	d12f      	bne.n	80058a0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	440b      	add	r3, r1
 800584e:	3358      	adds	r3, #88	; 0x58
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d121      	bne.n	80058a0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	440b      	add	r3, r1
 800586a:	335d      	adds	r3, #93	; 0x5d
 800586c:	2203      	movs	r2, #3
 800586e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	440a      	add	r2, r1
 8005886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800588a:	f043 0302 	orr.w	r3, r3, #2
 800588e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f005 f939 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ac:	461a      	mov	r2, r3
 80058ae:	2310      	movs	r3, #16
 80058b0:	6093      	str	r3, [r2, #8]
}
 80058b2:	bf00      	nop
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b086      	sub	sp, #24
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d119      	bne.n	800591e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	461a      	mov	r2, r3
 80058f8:	2304      	movs	r3, #4
 80058fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4413      	add	r3, r2
 8005904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	440a      	add	r2, r1
 8005912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005916:	f043 0302 	orr.w	r3, r3, #2
 800591a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800591c:	e33e      	b.n	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b20      	cmp	r3, #32
 8005932:	d141      	bne.n	80059b8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005940:	461a      	mov	r2, r3
 8005942:	2320      	movs	r3, #32
 8005944:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	440b      	add	r3, r1
 8005954:	333d      	adds	r3, #61	; 0x3d
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	f040 831f 	bne.w	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	440b      	add	r3, r1
 800596c:	333d      	adds	r3, #61	; 0x3d
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	440b      	add	r3, r1
 8005980:	335c      	adds	r3, #92	; 0x5c
 8005982:	2202      	movs	r2, #2
 8005984:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4413      	add	r3, r2
 800598e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	440a      	add	r2, r1
 800599c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f005 f8ae 	bl	800ab12 <USB_HC_Halt>
}
 80059b6:	e2f1      	b.n	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d13f      	bne.n	8005a4e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	440b      	add	r3, r1
 80059dc:	335d      	adds	r3, #93	; 0x5d
 80059de:	2204      	movs	r2, #4
 80059e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	440b      	add	r3, r1
 80059f0:	333d      	adds	r3, #61	; 0x3d
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	440b      	add	r3, r1
 8005a04:	3358      	adds	r3, #88	; 0x58
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a24:	f043 0302 	orr.w	r3, r3, #2
 8005a28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	4611      	mov	r1, r2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f005 f86c 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a46:	461a      	mov	r2, r3
 8005a48:	2340      	movs	r3, #64	; 0x40
 8005a4a:	6093      	str	r3, [r2, #8]
}
 8005a4c:	e2a6      	b.n	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a64:	d122      	bne.n	8005aac <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f005 f83e 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa8:	6093      	str	r3, [r2, #8]
}
 8005aaa:	e277      	b.n	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d135      	bne.n	8005b2e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	440b      	add	r3, r1
 8005ad0:	3358      	adds	r3, #88	; 0x58
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005af0:	f043 0302 	orr.w	r3, r3, #2
 8005af4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	4611      	mov	r1, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f005 f806 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b12:	461a      	mov	r2, r3
 8005b14:	2301      	movs	r3, #1
 8005b16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	440b      	add	r3, r1
 8005b26:	335d      	adds	r3, #93	; 0x5d
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
}
 8005b2c:	e236      	b.n	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d12b      	bne.n	8005b9c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b50:	461a      	mov	r2, r3
 8005b52:	2308      	movs	r3, #8
 8005b54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b70:	f043 0302 	orr.w	r3, r3, #2
 8005b74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f004 ffc6 	bl	800ab12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	440b      	add	r3, r1
 8005b94:	335d      	adds	r3, #93	; 0x5d
 8005b96:	2205      	movs	r2, #5
 8005b98:	701a      	strb	r2, [r3, #0]
}
 8005b9a:	e1ff      	b.n	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d155      	bne.n	8005c5e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	440b      	add	r3, r1
 8005bc0:	3358      	adds	r3, #88	; 0x58
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	440b      	add	r3, r1
 8005bd4:	335d      	adds	r3, #93	; 0x5d
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	440b      	add	r3, r1
 8005be8:	333d      	adds	r3, #61	; 0x3d
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d114      	bne.n	8005c1a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	440b      	add	r3, r1
 8005bfe:	333c      	adds	r3, #60	; 0x3c
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	440b      	add	r3, r1
 8005c14:	333d      	adds	r3, #61	; 0x3d
 8005c16:	2201      	movs	r2, #1
 8005c18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c34:	f043 0302 	orr.w	r3, r3, #2
 8005c38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	4611      	mov	r1, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f004 ff64 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c56:	461a      	mov	r2, r3
 8005c58:	2310      	movs	r3, #16
 8005c5a:	6093      	str	r3, [r2, #8]
}
 8005c5c:	e19e      	b.n	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c70:	2b80      	cmp	r3, #128	; 0x80
 8005c72:	d12b      	bne.n	8005ccc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c8e:	f043 0302 	orr.w	r3, r3, #2
 8005c92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f004 ff37 	bl	800ab12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	440b      	add	r3, r1
 8005cb2:	335d      	adds	r3, #93	; 0x5d
 8005cb4:	2206      	movs	r2, #6
 8005cb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	6093      	str	r3, [r2, #8]
}
 8005cca:	e167      	b.n	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce2:	d135      	bne.n	8005d50 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfe:	f043 0302 	orr.w	r3, r3, #2
 8005d02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f004 feff 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d20:	461a      	mov	r2, r3
 8005d22:	2310      	movs	r3, #16
 8005d24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d32:	461a      	mov	r2, r3
 8005d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	440b      	add	r3, r1
 8005d48:	335d      	adds	r3, #93	; 0x5d
 8005d4a:	2208      	movs	r2, #8
 8005d4c:	701a      	strb	r2, [r3, #0]
}
 8005d4e:	e125      	b.n	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	f040 811a 	bne.w	8005f9c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d82:	f023 0302 	bic.w	r3, r3, #2
 8005d86:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	440b      	add	r3, r1
 8005d96:	335d      	adds	r3, #93	; 0x5d
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d137      	bne.n	8005e0e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	440b      	add	r3, r1
 8005dac:	335c      	adds	r3, #92	; 0x5c
 8005dae:	2201      	movs	r2, #1
 8005db0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	333f      	adds	r3, #63	; 0x3f
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d00b      	beq.n	8005de0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	333f      	adds	r3, #63	; 0x3f
 8005dd8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	f040 80c5 	bne.w	8005f6a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	440b      	add	r3, r1
 8005dee:	3351      	adds	r3, #81	; 0x51
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	f083 0301 	eor.w	r3, r3, #1
 8005df6:	b2d8      	uxtb	r0, r3
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	440b      	add	r3, r1
 8005e06:	3351      	adds	r3, #81	; 0x51
 8005e08:	4602      	mov	r2, r0
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	e0ad      	b.n	8005f6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	440b      	add	r3, r1
 8005e1c:	335d      	adds	r3, #93	; 0x5d
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d10a      	bne.n	8005e3a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	440b      	add	r3, r1
 8005e32:	335c      	adds	r3, #92	; 0x5c
 8005e34:	2202      	movs	r2, #2
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	e097      	b.n	8005f6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	440b      	add	r3, r1
 8005e48:	335d      	adds	r3, #93	; 0x5d
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d10a      	bne.n	8005e66 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	440b      	add	r3, r1
 8005e5e:	335c      	adds	r3, #92	; 0x5c
 8005e60:	2202      	movs	r2, #2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e081      	b.n	8005f6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	440b      	add	r3, r1
 8005e74:	335d      	adds	r3, #93	; 0x5d
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	d10a      	bne.n	8005e92 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	440b      	add	r3, r1
 8005e8a:	335c      	adds	r3, #92	; 0x5c
 8005e8c:	2205      	movs	r2, #5
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e06b      	b.n	8005f6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	335d      	adds	r3, #93	; 0x5d
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b06      	cmp	r3, #6
 8005ea6:	d00a      	beq.n	8005ebe <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	440b      	add	r3, r1
 8005eb6:	335d      	adds	r3, #93	; 0x5d
 8005eb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d155      	bne.n	8005f6a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	440b      	add	r3, r1
 8005ecc:	3358      	adds	r3, #88	; 0x58
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	1c59      	adds	r1, r3, #1
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	4403      	add	r3, r0
 8005ee0:	3358      	adds	r3, #88	; 0x58
 8005ee2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3358      	adds	r3, #88	; 0x58
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d914      	bls.n	8005f24 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	440b      	add	r3, r1
 8005f08:	3358      	adds	r3, #88	; 0x58
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	440b      	add	r3, r1
 8005f1c:	335c      	adds	r3, #92	; 0x5c
 8005f1e:	2204      	movs	r2, #4
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e009      	b.n	8005f38 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	440b      	add	r3, r1
 8005f32:	335c      	adds	r3, #92	; 0x5c
 8005f34:	2202      	movs	r2, #2
 8005f36:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f4e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f56:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	461a      	mov	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f76:	461a      	mov	r2, r3
 8005f78:	2302      	movs	r3, #2
 8005f7a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	b2d8      	uxtb	r0, r3
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	440b      	add	r3, r1
 8005f8e:	335c      	adds	r3, #92	; 0x5c
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	4601      	mov	r1, r0
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f006 f8c4 	bl	800c124 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005f9c:	bf00      	nop
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	0c5b      	lsrs	r3, r3, #17
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	091b      	lsrs	r3, r3, #4
 8005fd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fd8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d003      	beq.n	8005fe8 <HCD_RXQLVL_IRQHandler+0x44>
 8005fe0:	2b05      	cmp	r3, #5
 8005fe2:	f000 8082 	beq.w	80060ea <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005fe6:	e083      	b.n	80060f0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d07f      	beq.n	80060ee <HCD_RXQLVL_IRQHandler+0x14a>
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	440b      	add	r3, r1
 8005ffc:	3344      	adds	r3, #68	; 0x44
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d074      	beq.n	80060ee <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	440b      	add	r3, r1
 8006016:	3344      	adds	r3, #68	; 0x44
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	b292      	uxth	r2, r2
 800601e:	4619      	mov	r1, r3
 8006020:	f004 fce2 	bl	800a9e8 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	440b      	add	r3, r1
 8006032:	3344      	adds	r3, #68	; 0x44
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	18d1      	adds	r1, r2, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4403      	add	r3, r0
 8006048:	3344      	adds	r3, #68	; 0x44
 800604a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	440b      	add	r3, r1
 800605a:	334c      	adds	r3, #76	; 0x4c
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	18d1      	adds	r1, r2, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4403      	add	r3, r0
 8006070:	334c      	adds	r3, #76	; 0x4c
 8006072:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	4413      	add	r3, r2
 800607c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <HCD_RXQLVL_IRQHandler+0x154>)
 8006084:	4013      	ands	r3, r2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d031      	beq.n	80060ee <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	4413      	add	r3, r2
 8006092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	461a      	mov	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	440b      	add	r3, r1
 80060ca:	3350      	adds	r3, #80	; 0x50
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	f083 0301 	eor.w	r3, r3, #1
 80060d2:	b2d8      	uxtb	r0, r3
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	440b      	add	r3, r1
 80060e2:	3350      	adds	r3, #80	; 0x50
 80060e4:	4602      	mov	r2, r0
 80060e6:	701a      	strb	r2, [r3, #0]
      break;
 80060e8:	e001      	b.n	80060ee <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80060ee:	bf00      	nop
  }
}
 80060f0:	bf00      	nop
 80060f2:	3728      	adds	r7, #40	; 0x28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	1ff80000 	.word	0x1ff80000

080060fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006128:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b02      	cmp	r3, #2
 8006132:	d10b      	bne.n	800614c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b01      	cmp	r3, #1
 800613c:	d102      	bne.n	8006144 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f005 ffd4 	bl	800c0ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f043 0302 	orr.w	r3, r3, #2
 800614a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b08      	cmp	r3, #8
 8006154:	d132      	bne.n	80061bc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f043 0308 	orr.w	r3, r3, #8
 800615c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b04      	cmp	r3, #4
 8006166:	d126      	bne.n	80061b6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d113      	bne.n	8006198 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800617a:	d106      	bne.n	800618a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2102      	movs	r1, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f004 fc7a 	bl	800aa7c <USB_InitFSLSPClkSel>
 8006188:	e011      	b.n	80061ae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2101      	movs	r1, #1
 8006190:	4618      	mov	r0, r3
 8006192:	f004 fc73 	bl	800aa7c <USB_InitFSLSPClkSel>
 8006196:	e00a      	b.n	80061ae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d106      	bne.n	80061ae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a6:	461a      	mov	r2, r3
 80061a8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80061ac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f005 ffca 	bl	800c148 <HAL_HCD_PortEnabled_Callback>
 80061b4:	e002      	b.n	80061bc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f005 ffd4 	bl	800c164 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d103      	bne.n	80061ce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f043 0320 	orr.w	r3, r3, #32
 80061cc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061d4:	461a      	mov	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6013      	str	r3, [r2, #0]
}
 80061da:	bf00      	nop
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e07f      	b.n	80062f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fb fd46 	bl	8001c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2224      	movs	r2, #36	; 0x24
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d107      	bne.n	800625e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800625a:	609a      	str	r2, [r3, #8]
 800625c:	e006      	b.n	800626c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800626a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d104      	bne.n	800627e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800627c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <HAL_I2C_Init+0x11c>)
 800628a:	430b      	orrs	r3, r1
 800628c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800629c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	ea42 0103 	orr.w	r1, r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	021a      	lsls	r2, r3, #8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69d9      	ldr	r1, [r3, #28]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1a      	ldr	r2, [r3, #32]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	02008000 	.word	0x02008000

08006304 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b20      	cmp	r3, #32
 8006318:	d138      	bne.n	800638c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006324:	2302      	movs	r3, #2
 8006326:	e032      	b.n	800638e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2224      	movs	r2, #36	; 0x24
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006356:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6819      	ldr	r1, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	e000      	b.n	800638e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
  }
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d139      	bne.n	8006424 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e033      	b.n	8006426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	; 0x24
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	e000      	b.n	8006426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006424:	2302      	movs	r3, #2
  }
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e0bf      	b.n	80065c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fb fc96 	bl	8001d8c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006476:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6999      	ldr	r1, [r3, #24]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800648c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6899      	ldr	r1, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	4b4a      	ldr	r3, [pc, #296]	; (80065d0 <HAL_LTDC_Init+0x19c>)
 80064a8:	400b      	ands	r3, r1
 80064aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	041b      	lsls	r3, r3, #16
 80064b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6899      	ldr	r1, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	431a      	orrs	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68d9      	ldr	r1, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <HAL_LTDC_Init+0x19c>)
 80064d6:	400b      	ands	r3, r1
 80064d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	041b      	lsls	r3, r3, #16
 80064e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1a      	ldr	r2, [r3, #32]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6919      	ldr	r1, [r3, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b33      	ldr	r3, [pc, #204]	; (80065d0 <HAL_LTDC_Init+0x19c>)
 8006504:	400b      	ands	r3, r1
 8006506:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6919      	ldr	r1, [r3, #16]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6959      	ldr	r1, [r3, #20]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <HAL_LTDC_Init+0x19c>)
 8006532:	400b      	ands	r3, r1
 8006534:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	041b      	lsls	r3, r3, #16
 800653c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6959      	ldr	r1, [r3, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006564:	041b      	lsls	r3, r3, #16
 8006566:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006576:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0206 	orr.w	r2, r2, #6
 80065a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0201 	orr.w	r2, r2, #1
 80065b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	f000f800 	.word	0xf000f800

080065d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d023      	beq.n	800663e <HAL_LTDC_IRQHandler+0x6a>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01e      	beq.n	800663e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0204 	bic.w	r2, r2, #4
 800660e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2204      	movs	r2, #4
 8006616:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2204      	movs	r2, #4
 800662c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f86f 	bl	800671c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d023      	beq.n	8006690 <HAL_LTDC_IRQHandler+0xbc>
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01e      	beq.n	8006690 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0202 	bic.w	r2, r2, #2
 8006660:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2202      	movs	r2, #2
 8006668:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006670:	f043 0202 	orr.w	r2, r3, #2
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2204      	movs	r2, #4
 800667e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f846 	bl	800671c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01b      	beq.n	80066d2 <HAL_LTDC_IRQHandler+0xfe>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d016      	beq.n	80066d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0201 	bic.w	r2, r2, #1
 80066b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2201      	movs	r2, #1
 80066ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f82f 	bl	8006730 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01b      	beq.n	8006714 <HAL_LTDC_IRQHandler+0x140>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d016      	beq.n	8006714 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0208 	bic.w	r2, r2, #8
 80066f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2208      	movs	r2, #8
 80066fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f818 	bl	8006744 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006758:	b5b0      	push	{r4, r5, r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_LTDC_ConfigLayer+0x1a>
 800676e:	2302      	movs	r3, #2
 8006770:	e02c      	b.n	80067cc <HAL_LTDC_ConfigLayer+0x74>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2202      	movs	r2, #2
 800677e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2134      	movs	r1, #52	; 0x34
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4614      	mov	r4, r2
 8006796:	461d      	mov	r5, r3
 8006798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800679a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800679c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800679e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f81f 	bl	80067f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2201      	movs	r2, #1
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bdb0      	pop	{r4, r5, r7, pc}

080067d4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80067e2:	b2db      	uxtb	r3, r3
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	; 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800680c:	4413      	add	r3, r2
 800680e:	041b      	lsls	r3, r3, #16
 8006810:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	01db      	lsls	r3, r3, #7
 800681c:	4413      	add	r3, r2
 800681e:	3384      	adds	r3, #132	; 0x84
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	4611      	mov	r1, r2
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	01d2      	lsls	r2, r2, #7
 800682c:	440a      	add	r2, r1
 800682e:	3284      	adds	r2, #132	; 0x84
 8006830:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006834:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	0c1b      	lsrs	r3, r3, #16
 8006842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006846:	4413      	add	r3, r2
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4619      	mov	r1, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	01db      	lsls	r3, r3, #7
 8006854:	440b      	add	r3, r1
 8006856:	3384      	adds	r3, #132	; 0x84
 8006858:	4619      	mov	r1, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4313      	orrs	r3, r2
 800685e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800686e:	4413      	add	r3, r2
 8006870:	041b      	lsls	r3, r3, #16
 8006872:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	01db      	lsls	r3, r3, #7
 800687e:	4413      	add	r3, r2
 8006880:	3384      	adds	r3, #132	; 0x84
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	6812      	ldr	r2, [r2, #0]
 8006888:	4611      	mov	r1, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	01d2      	lsls	r2, r2, #7
 800688e:	440a      	add	r2, r1
 8006890:	3284      	adds	r2, #132	; 0x84
 8006892:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006896:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068a6:	4413      	add	r3, r2
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	01db      	lsls	r3, r3, #7
 80068b4:	440b      	add	r3, r1
 80068b6:	3384      	adds	r3, #132	; 0x84
 80068b8:	4619      	mov	r1, r3
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4313      	orrs	r3, r2
 80068be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	01db      	lsls	r3, r3, #7
 80068ca:	4413      	add	r3, r2
 80068cc:	3384      	adds	r3, #132	; 0x84
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	4611      	mov	r1, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	01d2      	lsls	r2, r2, #7
 80068da:	440a      	add	r2, r1
 80068dc:	3284      	adds	r2, #132	; 0x84
 80068de:	f023 0307 	bic.w	r3, r3, #7
 80068e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	01db      	lsls	r3, r3, #7
 80068ee:	4413      	add	r3, r2
 80068f0:	3384      	adds	r3, #132	; 0x84
 80068f2:	461a      	mov	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800690a:	041b      	lsls	r3, r3, #16
 800690c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	061b      	lsls	r3, r3, #24
 8006914:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	01db      	lsls	r3, r3, #7
 8006920:	4413      	add	r3, r2
 8006922:	3384      	adds	r3, #132	; 0x84
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	01db      	lsls	r3, r3, #7
 8006930:	4413      	add	r3, r2
 8006932:	3384      	adds	r3, #132	; 0x84
 8006934:	461a      	mov	r2, r3
 8006936:	2300      	movs	r3, #0
 8006938:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006940:	461a      	mov	r2, r3
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	431a      	orrs	r2, r3
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	431a      	orrs	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4619      	mov	r1, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	01db      	lsls	r3, r3, #7
 8006954:	440b      	add	r3, r1
 8006956:	3384      	adds	r3, #132	; 0x84
 8006958:	4619      	mov	r1, r3
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	01db      	lsls	r3, r3, #7
 800696a:	4413      	add	r3, r2
 800696c:	3384      	adds	r3, #132	; 0x84
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	4611      	mov	r1, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	01d2      	lsls	r2, r2, #7
 800697a:	440a      	add	r2, r1
 800697c:	3284      	adds	r2, #132	; 0x84
 800697e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006982:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	01db      	lsls	r3, r3, #7
 800698e:	4413      	add	r3, r2
 8006990:	3384      	adds	r3, #132	; 0x84
 8006992:	461a      	mov	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	01db      	lsls	r3, r3, #7
 80069a4:	4413      	add	r3, r2
 80069a6:	3384      	adds	r3, #132	; 0x84
 80069a8:	69da      	ldr	r2, [r3, #28]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	01db      	lsls	r3, r3, #7
 80069b4:	440b      	add	r3, r1
 80069b6:	3384      	adds	r3, #132	; 0x84
 80069b8:	4619      	mov	r1, r3
 80069ba:	4b58      	ldr	r3, [pc, #352]	; (8006b1c <LTDC_SetConfig+0x32c>)
 80069bc:	4013      	ands	r3, r2
 80069be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	68f9      	ldr	r1, [r7, #12]
 80069ca:	6809      	ldr	r1, [r1, #0]
 80069cc:	4608      	mov	r0, r1
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	01c9      	lsls	r1, r1, #7
 80069d2:	4401      	add	r1, r0
 80069d4:	3184      	adds	r1, #132	; 0x84
 80069d6:	4313      	orrs	r3, r2
 80069d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	01db      	lsls	r3, r3, #7
 80069e4:	4413      	add	r3, r2
 80069e6:	3384      	adds	r3, #132	; 0x84
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	01db      	lsls	r3, r3, #7
 80069f4:	4413      	add	r3, r2
 80069f6:	3384      	adds	r3, #132	; 0x84
 80069f8:	461a      	mov	r2, r3
 80069fa:	2300      	movs	r3, #0
 80069fc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	01db      	lsls	r3, r3, #7
 8006a08:	4413      	add	r3, r2
 8006a0a:	3384      	adds	r3, #132	; 0x84
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	61fb      	str	r3, [r7, #28]
 8006a20:	e01b      	b.n	8006a5a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d102      	bne.n	8006a30 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	61fb      	str	r3, [r7, #28]
 8006a2e:	e014      	b.n	8006a5a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d00b      	beq.n	8006a50 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d007      	beq.n	8006a50 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d003      	beq.n	8006a50 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a4c:	2b07      	cmp	r3, #7
 8006a4e:	d102      	bne.n	8006a56 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006a50:	2302      	movs	r3, #2
 8006a52:	61fb      	str	r3, [r7, #28]
 8006a54:	e001      	b.n	8006a5a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006a56:	2301      	movs	r3, #1
 8006a58:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	01db      	lsls	r3, r3, #7
 8006a64:	4413      	add	r3, r2
 8006a66:	3384      	adds	r3, #132	; 0x84
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	6812      	ldr	r2, [r2, #0]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	01d2      	lsls	r2, r2, #7
 8006a74:	440a      	add	r2, r1
 8006a76:	3284      	adds	r2, #132	; 0x84
 8006a78:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006a7c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	fb02 f303 	mul.w	r3, r2, r3
 8006a88:	041a      	lsls	r2, r3, #16
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6859      	ldr	r1, [r3, #4]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	1acb      	subs	r3, r1, r3
 8006a94:	69f9      	ldr	r1, [r7, #28]
 8006a96:	fb01 f303 	mul.w	r3, r1, r3
 8006a9a:	3303      	adds	r3, #3
 8006a9c:	68f9      	ldr	r1, [r7, #12]
 8006a9e:	6809      	ldr	r1, [r1, #0]
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	01c9      	lsls	r1, r1, #7
 8006aa6:	4401      	add	r1, r0
 8006aa8:	3184      	adds	r1, #132	; 0x84
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	01db      	lsls	r3, r3, #7
 8006ab8:	4413      	add	r3, r2
 8006aba:	3384      	adds	r3, #132	; 0x84
 8006abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	01db      	lsls	r3, r3, #7
 8006ac8:	440b      	add	r3, r1
 8006aca:	3384      	adds	r3, #132	; 0x84
 8006acc:	4619      	mov	r1, r3
 8006ace:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <LTDC_SetConfig+0x330>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	01db      	lsls	r3, r3, #7
 8006ade:	4413      	add	r3, r2
 8006ae0:	3384      	adds	r3, #132	; 0x84
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	01db      	lsls	r3, r3, #7
 8006af4:	4413      	add	r3, r2
 8006af6:	3384      	adds	r3, #132	; 0x84
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	4611      	mov	r1, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	01d2      	lsls	r2, r2, #7
 8006b04:	440a      	add	r2, r1
 8006b06:	3284      	adds	r2, #132	; 0x84
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	3724      	adds	r7, #36	; 0x24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	fffff8f8 	.word	0xfffff8f8
 8006b20:	fffff800 	.word	0xfffff800

08006b24 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b28:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b32:	6013      	str	r3, [r2, #0]
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40007000 	.word	0x40007000

08006b44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b4e:	4b23      	ldr	r3, [pc, #140]	; (8006bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	4a22      	ldr	r2, [pc, #136]	; (8006bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8006b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b58:	6413      	str	r3, [r2, #64]	; 0x40
 8006b5a:	4b20      	ldr	r3, [pc, #128]	; (8006bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b66:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b72:	f7fc fd1b 	bl	80035ac <HAL_GetTick>
 8006b76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b78:	e009      	b.n	8006b8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b7a:	f7fc fd17 	bl	80035ac <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b88:	d901      	bls.n	8006b8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e022      	b.n	8006bd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b8e:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9a:	d1ee      	bne.n	8006b7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b9c:	4b10      	ldr	r3, [pc, #64]	; (8006be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a0f      	ldr	r2, [pc, #60]	; (8006be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ba6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ba8:	f7fc fd00 	bl	80035ac <HAL_GetTick>
 8006bac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006bae:	e009      	b.n	8006bc4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006bb0:	f7fc fcfc 	bl	80035ac <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bbe:	d901      	bls.n	8006bc4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e007      	b.n	8006bd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bd0:	d1ee      	bne.n	8006bb0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	40007000 	.word	0x40007000

08006be4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006bec:	f7fc fcde 	bl	80035ac <HAL_GetTick>
 8006bf0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e067      	b.n	8006ccc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10b      	bne.n	8006c20 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7fb f983 	bl	8001f1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006c16:	f241 3188 	movw	r1, #5000	; 0x1388
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f85e 	bl	8006cdc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	021a      	lsls	r2, r3, #8
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	2120      	movs	r1, #32
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f856 	bl	8006cf8 <QSPI_WaitFlagStateUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d135      	bne.n	8006cc2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <HAL_QSPI_Init+0xf0>)
 8006c5e:	4013      	ands	r3, r2
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6852      	ldr	r2, [r2, #4]
 8006c64:	0611      	lsls	r1, r2, #24
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68d2      	ldr	r2, [r2, #12]
 8006c6a:	4311      	orrs	r1, r2
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	69d2      	ldr	r2, [r2, #28]
 8006c70:	4311      	orrs	r1, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6a12      	ldr	r2, [r2, #32]
 8006c76:	4311      	orrs	r1, r2
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <HAL_QSPI_Init+0xf4>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6912      	ldr	r2, [r2, #16]
 8006c8e:	0411      	lsls	r1, r2, #16
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6952      	ldr	r2, [r2, #20]
 8006c94:	4311      	orrs	r1, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6992      	ldr	r2, [r2, #24]
 8006c9a:	4311      	orrs	r1, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6812      	ldr	r2, [r2, #0]
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006cca:	7afb      	ldrb	r3, [r7, #11]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	00ffff2f 	.word	0x00ffff2f
 8006cd8:	ffe0f8fe 	.word	0xffe0f8fe

08006cdc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	4613      	mov	r3, r2
 8006d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d08:	e01a      	b.n	8006d40 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d10:	d016      	beq.n	8006d40 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d12:	f7fc fc4b 	bl	80035ac <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d302      	bcc.n	8006d28 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10b      	bne.n	8006d40 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d34:	f043 0201 	orr.w	r2, r3, #1
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e00e      	b.n	8006d5e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bf14      	ite	ne
 8006d4e:	2301      	movne	r3, #1
 8006d50:	2300      	moveq	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d1d6      	bne.n	8006d0a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006d70:	2300      	movs	r3, #0
 8006d72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e291      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8087 	beq.w	8006e9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d8c:	4b96      	ldr	r3, [pc, #600]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 030c 	and.w	r3, r3, #12
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d00c      	beq.n	8006db2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d98:	4b93      	ldr	r3, [pc, #588]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 030c 	and.w	r3, r3, #12
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d112      	bne.n	8006dca <HAL_RCC_OscConfig+0x62>
 8006da4:	4b90      	ldr	r3, [pc, #576]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006db0:	d10b      	bne.n	8006dca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db2:	4b8d      	ldr	r3, [pc, #564]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d06c      	beq.n	8006e98 <HAL_RCC_OscConfig+0x130>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d168      	bne.n	8006e98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e26b      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd2:	d106      	bne.n	8006de2 <HAL_RCC_OscConfig+0x7a>
 8006dd4:	4b84      	ldr	r3, [pc, #528]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a83      	ldr	r2, [pc, #524]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	e02e      	b.n	8006e40 <HAL_RCC_OscConfig+0xd8>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10c      	bne.n	8006e04 <HAL_RCC_OscConfig+0x9c>
 8006dea:	4b7f      	ldr	r3, [pc, #508]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a7e      	ldr	r2, [pc, #504]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	4b7c      	ldr	r3, [pc, #496]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a7b      	ldr	r2, [pc, #492]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e01d      	b.n	8006e40 <HAL_RCC_OscConfig+0xd8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCC_OscConfig+0xc0>
 8006e0e:	4b76      	ldr	r3, [pc, #472]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a75      	ldr	r2, [pc, #468]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	4b73      	ldr	r3, [pc, #460]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a72      	ldr	r2, [pc, #456]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e00b      	b.n	8006e40 <HAL_RCC_OscConfig+0xd8>
 8006e28:	4b6f      	ldr	r3, [pc, #444]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a6e      	ldr	r2, [pc, #440]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	4b6c      	ldr	r3, [pc, #432]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a6b      	ldr	r2, [pc, #428]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d013      	beq.n	8006e70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e48:	f7fc fbb0 	bl	80035ac <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e50:	f7fc fbac 	bl	80035ac <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b64      	cmp	r3, #100	; 0x64
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e21f      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e62:	4b61      	ldr	r3, [pc, #388]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0f0      	beq.n	8006e50 <HAL_RCC_OscConfig+0xe8>
 8006e6e:	e014      	b.n	8006e9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e70:	f7fc fb9c 	bl	80035ac <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e78:	f7fc fb98 	bl	80035ac <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b64      	cmp	r3, #100	; 0x64
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e20b      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e8a:	4b57      	ldr	r3, [pc, #348]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0x110>
 8006e96:	e000      	b.n	8006e9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d069      	beq.n	8006f7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ea6:	4b50      	ldr	r3, [pc, #320]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eb2:	4b4d      	ldr	r3, [pc, #308]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 030c 	and.w	r3, r3, #12
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d11c      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x190>
 8006ebe:	4b4a      	ldr	r3, [pc, #296]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d116      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eca:	4b47      	ldr	r3, [pc, #284]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x17a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d001      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e1df      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee2:	4b41      	ldr	r3, [pc, #260]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	493d      	ldr	r1, [pc, #244]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef6:	e040      	b.n	8006f7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d023      	beq.n	8006f48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f00:	4b39      	ldr	r3, [pc, #228]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a38      	ldr	r2, [pc, #224]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f06:	f043 0301 	orr.w	r3, r3, #1
 8006f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fc fb4e 	bl	80035ac <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f14:	f7fc fb4a 	bl	80035ac <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e1bd      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f26:	4b30      	ldr	r3, [pc, #192]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f32:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4929      	ldr	r1, [pc, #164]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]
 8006f46:	e018      	b.n	8006f7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f48:	4b27      	ldr	r3, [pc, #156]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f54:	f7fc fb2a 	bl	80035ac <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f5c:	f7fc fb26 	bl	80035ac <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e199      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f6e:	4b1e      	ldr	r3, [pc, #120]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f0      	bne.n	8006f5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d038      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d019      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f8e:	4b16      	ldr	r3, [pc, #88]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f94:	f043 0301 	orr.w	r3, r3, #1
 8006f98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f9a:	f7fc fb07 	bl	80035ac <HAL_GetTick>
 8006f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fa2:	f7fc fb03 	bl	80035ac <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e176      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0f0      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x23a>
 8006fc0:	e01a      	b.n	8006ff8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fc2:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc6:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fce:	f7fc faed 	bl	80035ac <HAL_GetTick>
 8006fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fd4:	e00a      	b.n	8006fec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fd6:	f7fc fae9 	bl	80035ac <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d903      	bls.n	8006fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e15c      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
 8006fe8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fec:	4b91      	ldr	r3, [pc, #580]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8006fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1ee      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 80a4 	beq.w	800714e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007006:	4b8b      	ldr	r3, [pc, #556]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10d      	bne.n	800702e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007012:	4b88      	ldr	r3, [pc, #544]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	4a87      	ldr	r2, [pc, #540]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800701c:	6413      	str	r3, [r2, #64]	; 0x40
 800701e:	4b85      	ldr	r3, [pc, #532]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007026:	60bb      	str	r3, [r7, #8]
 8007028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800702a:	2301      	movs	r3, #1
 800702c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800702e:	4b82      	ldr	r3, [pc, #520]	; (8007238 <HAL_RCC_OscConfig+0x4d0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007036:	2b00      	cmp	r3, #0
 8007038:	d118      	bne.n	800706c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800703a:	4b7f      	ldr	r3, [pc, #508]	; (8007238 <HAL_RCC_OscConfig+0x4d0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a7e      	ldr	r2, [pc, #504]	; (8007238 <HAL_RCC_OscConfig+0x4d0>)
 8007040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007046:	f7fc fab1 	bl	80035ac <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800704e:	f7fc faad 	bl	80035ac <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b64      	cmp	r3, #100	; 0x64
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e120      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007060:	4b75      	ldr	r3, [pc, #468]	; (8007238 <HAL_RCC_OscConfig+0x4d0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0f0      	beq.n	800704e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d106      	bne.n	8007082 <HAL_RCC_OscConfig+0x31a>
 8007074:	4b6f      	ldr	r3, [pc, #444]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007078:	4a6e      	ldr	r2, [pc, #440]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	6713      	str	r3, [r2, #112]	; 0x70
 8007080:	e02d      	b.n	80070de <HAL_RCC_OscConfig+0x376>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10c      	bne.n	80070a4 <HAL_RCC_OscConfig+0x33c>
 800708a:	4b6a      	ldr	r3, [pc, #424]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	4a69      	ldr	r2, [pc, #420]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007090:	f023 0301 	bic.w	r3, r3, #1
 8007094:	6713      	str	r3, [r2, #112]	; 0x70
 8007096:	4b67      	ldr	r3, [pc, #412]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	4a66      	ldr	r2, [pc, #408]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 800709c:	f023 0304 	bic.w	r3, r3, #4
 80070a0:	6713      	str	r3, [r2, #112]	; 0x70
 80070a2:	e01c      	b.n	80070de <HAL_RCC_OscConfig+0x376>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2b05      	cmp	r3, #5
 80070aa:	d10c      	bne.n	80070c6 <HAL_RCC_OscConfig+0x35e>
 80070ac:	4b61      	ldr	r3, [pc, #388]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	4a60      	ldr	r2, [pc, #384]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80070b2:	f043 0304 	orr.w	r3, r3, #4
 80070b6:	6713      	str	r3, [r2, #112]	; 0x70
 80070b8:	4b5e      	ldr	r3, [pc, #376]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80070ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070bc:	4a5d      	ldr	r2, [pc, #372]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	6713      	str	r3, [r2, #112]	; 0x70
 80070c4:	e00b      	b.n	80070de <HAL_RCC_OscConfig+0x376>
 80070c6:	4b5b      	ldr	r3, [pc, #364]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	4a5a      	ldr	r2, [pc, #360]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	6713      	str	r3, [r2, #112]	; 0x70
 80070d2:	4b58      	ldr	r3, [pc, #352]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	4a57      	ldr	r2, [pc, #348]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80070d8:	f023 0304 	bic.w	r3, r3, #4
 80070dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d015      	beq.n	8007112 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e6:	f7fc fa61 	bl	80035ac <HAL_GetTick>
 80070ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ec:	e00a      	b.n	8007104 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ee:	f7fc fa5d 	bl	80035ac <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e0ce      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007104:	4b4b      	ldr	r3, [pc, #300]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0ee      	beq.n	80070ee <HAL_RCC_OscConfig+0x386>
 8007110:	e014      	b.n	800713c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007112:	f7fc fa4b 	bl	80035ac <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007118:	e00a      	b.n	8007130 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800711a:	f7fc fa47 	bl	80035ac <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	f241 3288 	movw	r2, #5000	; 0x1388
 8007128:	4293      	cmp	r3, r2
 800712a:	d901      	bls.n	8007130 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e0b8      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007130:	4b40      	ldr	r3, [pc, #256]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1ee      	bne.n	800711a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d105      	bne.n	800714e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007142:	4b3c      	ldr	r3, [pc, #240]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	4a3b      	ldr	r2, [pc, #236]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800714c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80a4 	beq.w	80072a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007158:	4b36      	ldr	r3, [pc, #216]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 030c 	and.w	r3, r3, #12
 8007160:	2b08      	cmp	r3, #8
 8007162:	d06b      	beq.n	800723c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d149      	bne.n	8007200 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716c:	4b31      	ldr	r3, [pc, #196]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a30      	ldr	r2, [pc, #192]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fc fa18 	bl	80035ac <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007180:	f7fc fa14 	bl	80035ac <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e087      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007192:	4b28      	ldr	r3, [pc, #160]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69da      	ldr	r2, [r3, #28]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	019b      	lsls	r3, r3, #6
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	085b      	lsrs	r3, r3, #1
 80071b6:	3b01      	subs	r3, #1
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	061b      	lsls	r3, r3, #24
 80071c2:	4313      	orrs	r3, r2
 80071c4:	4a1b      	ldr	r2, [pc, #108]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80071c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071cc:	4b19      	ldr	r3, [pc, #100]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a18      	ldr	r2, [pc, #96]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80071d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fc f9e8 	bl	80035ac <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071e0:	f7fc f9e4 	bl	80035ac <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e057      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f0      	beq.n	80071e0 <HAL_RCC_OscConfig+0x478>
 80071fe:	e04f      	b.n	80072a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007200:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a0b      	ldr	r2, [pc, #44]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800720a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720c:	f7fc f9ce 	bl	80035ac <HAL_GetTick>
 8007210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007214:	f7fc f9ca 	bl	80035ac <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e03d      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007226:	4b03      	ldr	r3, [pc, #12]	; (8007234 <HAL_RCC_OscConfig+0x4cc>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1f0      	bne.n	8007214 <HAL_RCC_OscConfig+0x4ac>
 8007232:	e035      	b.n	80072a0 <HAL_RCC_OscConfig+0x538>
 8007234:	40023800 	.word	0x40023800
 8007238:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800723c:	4b1b      	ldr	r3, [pc, #108]	; (80072ac <HAL_RCC_OscConfig+0x544>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d028      	beq.n	800729c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007254:	429a      	cmp	r2, r3
 8007256:	d121      	bne.n	800729c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007262:	429a      	cmp	r2, r3
 8007264:	d11a      	bne.n	800729c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800726c:	4013      	ands	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007272:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007274:	4293      	cmp	r3, r2
 8007276:	d111      	bne.n	800729c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	3b01      	subs	r3, #1
 8007286:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007288:	429a      	cmp	r2, r3
 800728a:	d107      	bne.n	800729c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40023800 	.word	0x40023800

080072b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e0d0      	b.n	800746a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072c8:	4b6a      	ldr	r3, [pc, #424]	; (8007474 <HAL_RCC_ClockConfig+0x1c4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 030f 	and.w	r3, r3, #15
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d910      	bls.n	80072f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d6:	4b67      	ldr	r3, [pc, #412]	; (8007474 <HAL_RCC_ClockConfig+0x1c4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f023 020f 	bic.w	r2, r3, #15
 80072de:	4965      	ldr	r1, [pc, #404]	; (8007474 <HAL_RCC_ClockConfig+0x1c4>)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e6:	4b63      	ldr	r3, [pc, #396]	; (8007474 <HAL_RCC_ClockConfig+0x1c4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0b8      	b.n	800746a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d020      	beq.n	8007346 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007310:	4b59      	ldr	r3, [pc, #356]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	4a58      	ldr	r2, [pc, #352]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800731a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007328:	4b53      	ldr	r3, [pc, #332]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	4a52      	ldr	r2, [pc, #328]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 800732e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007334:	4b50      	ldr	r3, [pc, #320]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	494d      	ldr	r1, [pc, #308]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007342:	4313      	orrs	r3, r2
 8007344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d040      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d107      	bne.n	800736a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735a:	4b47      	ldr	r3, [pc, #284]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d115      	bne.n	8007392 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e07f      	b.n	800746a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d107      	bne.n	8007382 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007372:	4b41      	ldr	r3, [pc, #260]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d109      	bne.n	8007392 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e073      	b.n	800746a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007382:	4b3d      	ldr	r3, [pc, #244]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e06b      	b.n	800746a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007392:	4b39      	ldr	r3, [pc, #228]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f023 0203 	bic.w	r2, r3, #3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4936      	ldr	r1, [pc, #216]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a4:	f7fc f902 	bl	80035ac <HAL_GetTick>
 80073a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073aa:	e00a      	b.n	80073c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073ac:	f7fc f8fe 	bl	80035ac <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e053      	b.n	800746a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073c2:	4b2d      	ldr	r3, [pc, #180]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 020c 	and.w	r2, r3, #12
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d1eb      	bne.n	80073ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073d4:	4b27      	ldr	r3, [pc, #156]	; (8007474 <HAL_RCC_ClockConfig+0x1c4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d210      	bcs.n	8007404 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <HAL_RCC_ClockConfig+0x1c4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f023 020f 	bic.w	r2, r3, #15
 80073ea:	4922      	ldr	r1, [pc, #136]	; (8007474 <HAL_RCC_ClockConfig+0x1c4>)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f2:	4b20      	ldr	r3, [pc, #128]	; (8007474 <HAL_RCC_ClockConfig+0x1c4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d001      	beq.n	8007404 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e032      	b.n	800746a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007410:	4b19      	ldr	r3, [pc, #100]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4916      	ldr	r1, [pc, #88]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 800741e:	4313      	orrs	r3, r2
 8007420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d009      	beq.n	8007442 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	490e      	ldr	r1, [pc, #56]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 800743e:	4313      	orrs	r3, r2
 8007440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007442:	f000 f821 	bl	8007488 <HAL_RCC_GetSysClockFreq>
 8007446:	4601      	mov	r1, r0
 8007448:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	091b      	lsrs	r3, r3, #4
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	4a0a      	ldr	r2, [pc, #40]	; (800747c <HAL_RCC_ClockConfig+0x1cc>)
 8007454:	5cd3      	ldrb	r3, [r2, r3]
 8007456:	fa21 f303 	lsr.w	r3, r1, r3
 800745a:	4a09      	ldr	r2, [pc, #36]	; (8007480 <HAL_RCC_ClockConfig+0x1d0>)
 800745c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <HAL_RCC_ClockConfig+0x1d4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f7fb f93a 	bl	80026dc <HAL_InitTick>

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40023c00 	.word	0x40023c00
 8007478:	40023800 	.word	0x40023800
 800747c:	0800c2a8 	.word	0x0800c2a8
 8007480:	20000000 	.word	0x20000000
 8007484:	20000010 	.word	0x20000010

08007488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	607b      	str	r3, [r7, #4]
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	2300      	movs	r3, #0
 8007498:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800749e:	4b50      	ldr	r3, [pc, #320]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 030c 	and.w	r3, r3, #12
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d007      	beq.n	80074ba <HAL_RCC_GetSysClockFreq+0x32>
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	d008      	beq.n	80074c0 <HAL_RCC_GetSysClockFreq+0x38>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f040 808d 	bne.w	80075ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074b4:	4b4b      	ldr	r3, [pc, #300]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80074b6:	60bb      	str	r3, [r7, #8]
      break;
 80074b8:	e08c      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074ba:	4b4b      	ldr	r3, [pc, #300]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80074bc:	60bb      	str	r3, [r7, #8]
      break;
 80074be:	e089      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074c0:	4b47      	ldr	r3, [pc, #284]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80074ca:	4b45      	ldr	r3, [pc, #276]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d023      	beq.n	800751e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074d6:	4b42      	ldr	r3, [pc, #264]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	099b      	lsrs	r3, r3, #6
 80074dc:	f04f 0400 	mov.w	r4, #0
 80074e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	ea03 0501 	and.w	r5, r3, r1
 80074ec:	ea04 0602 	and.w	r6, r4, r2
 80074f0:	4a3d      	ldr	r2, [pc, #244]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80074f2:	fb02 f106 	mul.w	r1, r2, r6
 80074f6:	2200      	movs	r2, #0
 80074f8:	fb02 f205 	mul.w	r2, r2, r5
 80074fc:	440a      	add	r2, r1
 80074fe:	493a      	ldr	r1, [pc, #232]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007500:	fba5 0101 	umull	r0, r1, r5, r1
 8007504:	1853      	adds	r3, r2, r1
 8007506:	4619      	mov	r1, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f04f 0400 	mov.w	r4, #0
 800750e:	461a      	mov	r2, r3
 8007510:	4623      	mov	r3, r4
 8007512:	f7f8 fe7d 	bl	8000210 <__aeabi_uldivmod>
 8007516:	4603      	mov	r3, r0
 8007518:	460c      	mov	r4, r1
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	e049      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800751e:	4b30      	ldr	r3, [pc, #192]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	099b      	lsrs	r3, r3, #6
 8007524:	f04f 0400 	mov.w	r4, #0
 8007528:	f240 11ff 	movw	r1, #511	; 0x1ff
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	ea03 0501 	and.w	r5, r3, r1
 8007534:	ea04 0602 	and.w	r6, r4, r2
 8007538:	4629      	mov	r1, r5
 800753a:	4632      	mov	r2, r6
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	f04f 0400 	mov.w	r4, #0
 8007544:	0154      	lsls	r4, r2, #5
 8007546:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800754a:	014b      	lsls	r3, r1, #5
 800754c:	4619      	mov	r1, r3
 800754e:	4622      	mov	r2, r4
 8007550:	1b49      	subs	r1, r1, r5
 8007552:	eb62 0206 	sbc.w	r2, r2, r6
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	f04f 0400 	mov.w	r4, #0
 800755e:	0194      	lsls	r4, r2, #6
 8007560:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007564:	018b      	lsls	r3, r1, #6
 8007566:	1a5b      	subs	r3, r3, r1
 8007568:	eb64 0402 	sbc.w	r4, r4, r2
 800756c:	f04f 0100 	mov.w	r1, #0
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	00e2      	lsls	r2, r4, #3
 8007576:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800757a:	00d9      	lsls	r1, r3, #3
 800757c:	460b      	mov	r3, r1
 800757e:	4614      	mov	r4, r2
 8007580:	195b      	adds	r3, r3, r5
 8007582:	eb44 0406 	adc.w	r4, r4, r6
 8007586:	f04f 0100 	mov.w	r1, #0
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	02a2      	lsls	r2, r4, #10
 8007590:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007594:	0299      	lsls	r1, r3, #10
 8007596:	460b      	mov	r3, r1
 8007598:	4614      	mov	r4, r2
 800759a:	4618      	mov	r0, r3
 800759c:	4621      	mov	r1, r4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f04f 0400 	mov.w	r4, #0
 80075a4:	461a      	mov	r2, r3
 80075a6:	4623      	mov	r3, r4
 80075a8:	f7f8 fe32 	bl	8000210 <__aeabi_uldivmod>
 80075ac:	4603      	mov	r3, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80075b2:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	0c1b      	lsrs	r3, r3, #16
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	3301      	adds	r3, #1
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ca:	60bb      	str	r3, [r7, #8]
      break;
 80075cc:	e002      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075ce:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80075d0:	60bb      	str	r3, [r7, #8]
      break;
 80075d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075d4:	68bb      	ldr	r3, [r7, #8]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075de:	bf00      	nop
 80075e0:	40023800 	.word	0x40023800
 80075e4:	00f42400 	.word	0x00f42400
 80075e8:	017d7840 	.word	0x017d7840

080075ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075f0:	4b03      	ldr	r3, [pc, #12]	; (8007600 <HAL_RCC_GetHCLKFreq+0x14>)
 80075f2:	681b      	ldr	r3, [r3, #0]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20000000 	.word	0x20000000

08007604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007608:	f7ff fff0 	bl	80075ec <HAL_RCC_GetHCLKFreq>
 800760c:	4601      	mov	r1, r0
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	0a9b      	lsrs	r3, r3, #10
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	4a03      	ldr	r2, [pc, #12]	; (8007628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800761a:	5cd3      	ldrb	r3, [r2, r3]
 800761c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007620:	4618      	mov	r0, r3
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40023800 	.word	0x40023800
 8007628:	0800c2b8 	.word	0x0800c2b8

0800762c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007630:	f7ff ffdc 	bl	80075ec <HAL_RCC_GetHCLKFreq>
 8007634:	4601      	mov	r1, r0
 8007636:	4b05      	ldr	r3, [pc, #20]	; (800764c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	0b5b      	lsrs	r3, r3, #13
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	4a03      	ldr	r2, [pc, #12]	; (8007650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007642:	5cd3      	ldrb	r3, [r2, r3]
 8007644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007648:	4618      	mov	r0, r3
 800764a:	bd80      	pop	{r7, pc}
 800764c:	40023800 	.word	0x40023800
 8007650:	0800c2b8 	.word	0x0800c2b8

08007654 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	220f      	movs	r2, #15
 8007662:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007664:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 0203 	and.w	r2, r3, #3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007670:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800767c:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <HAL_RCC_GetClockConfig+0x5c>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007688:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <HAL_RCC_GetClockConfig+0x5c>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	08db      	lsrs	r3, r3, #3
 800768e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007696:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <HAL_RCC_GetClockConfig+0x60>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 020f 	and.w	r2, r3, #15
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	601a      	str	r2, [r3, #0]
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40023800 	.word	0x40023800
 80076b4:	40023c00 	.word	0x40023c00

080076b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d012      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076e0:	4b69      	ldr	r3, [pc, #420]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	4a68      	ldr	r2, [pc, #416]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80076ea:	6093      	str	r3, [r2, #8]
 80076ec:	4b66      	ldr	r3, [pc, #408]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f4:	4964      	ldr	r1, [pc, #400]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007702:	2301      	movs	r3, #1
 8007704:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d017      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007712:	4b5d      	ldr	r3, [pc, #372]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007720:	4959      	ldr	r1, [pc, #356]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007730:	d101      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007732:	2301      	movs	r3, #1
 8007734:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800773e:	2301      	movs	r3, #1
 8007740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d017      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800774e:	4b4e      	ldr	r3, [pc, #312]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007754:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	494a      	ldr	r1, [pc, #296]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800775e:	4313      	orrs	r3, r2
 8007760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800776c:	d101      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800776e:	2301      	movs	r3, #1
 8007770:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800777a:	2301      	movs	r3, #1
 800777c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800778a:	2301      	movs	r3, #1
 800778c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 808b 	beq.w	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800779c:	4b3a      	ldr	r3, [pc, #232]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	4a39      	ldr	r2, [pc, #228]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a6:	6413      	str	r3, [r2, #64]	; 0x40
 80077a8:	4b37      	ldr	r3, [pc, #220]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b0:	60bb      	str	r3, [r7, #8]
 80077b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077b4:	4b35      	ldr	r3, [pc, #212]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a34      	ldr	r2, [pc, #208]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077c0:	f7fb fef4 	bl	80035ac <HAL_GetTick>
 80077c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80077c6:	e008      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077c8:	f7fb fef0 	bl	80035ac <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b64      	cmp	r3, #100	; 0x64
 80077d4:	d901      	bls.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e355      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80077da:	4b2c      	ldr	r3, [pc, #176]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0f0      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077e6:	4b28      	ldr	r3, [pc, #160]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d035      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	429a      	cmp	r2, r3
 8007802:	d02e      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007804:	4b20      	ldr	r3, [pc, #128]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800780c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800780e:	4b1e      	ldr	r3, [pc, #120]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007812:	4a1d      	ldr	r2, [pc, #116]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007818:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800781a:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781e:	4a1a      	ldr	r2, [pc, #104]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007826:	4a18      	ldr	r2, [pc, #96]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800782c:	4b16      	ldr	r3, [pc, #88]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800782e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b01      	cmp	r3, #1
 8007836:	d114      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007838:	f7fb feb8 	bl	80035ac <HAL_GetTick>
 800783c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800783e:	e00a      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007840:	f7fb feb4 	bl	80035ac <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	f241 3288 	movw	r2, #5000	; 0x1388
 800784e:	4293      	cmp	r3, r2
 8007850:	d901      	bls.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e317      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0ee      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800786a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786e:	d111      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800787e:	400b      	ands	r3, r1
 8007880:	4901      	ldr	r1, [pc, #4]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007882:	4313      	orrs	r3, r2
 8007884:	608b      	str	r3, [r1, #8]
 8007886:	e00b      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007888:	40023800 	.word	0x40023800
 800788c:	40007000 	.word	0x40007000
 8007890:	0ffffcff 	.word	0x0ffffcff
 8007894:	4bb0      	ldr	r3, [pc, #704]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	4aaf      	ldr	r2, [pc, #700]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800789a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800789e:	6093      	str	r3, [r2, #8]
 80078a0:	4bad      	ldr	r3, [pc, #692]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078ac:	49aa      	ldr	r1, [pc, #680]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d010      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078be:	4ba6      	ldr	r3, [pc, #664]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c4:	4aa4      	ldr	r2, [pc, #656]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80078ce:	4ba2      	ldr	r3, [pc, #648]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	499f      	ldr	r1, [pc, #636]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078ec:	4b9a      	ldr	r3, [pc, #616]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078fa:	4997      	ldr	r1, [pc, #604]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800790e:	4b92      	ldr	r3, [pc, #584]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800791c:	498e      	ldr	r1, [pc, #568]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800791e:	4313      	orrs	r3, r2
 8007920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007930:	4b89      	ldr	r3, [pc, #548]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007936:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800793e:	4986      	ldr	r1, [pc, #536]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007940:	4313      	orrs	r3, r2
 8007942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007952:	4b81      	ldr	r3, [pc, #516]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007958:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007960:	497d      	ldr	r1, [pc, #500]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007974:	4b78      	ldr	r3, [pc, #480]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797a:	f023 0203 	bic.w	r2, r3, #3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007982:	4975      	ldr	r1, [pc, #468]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007984:	4313      	orrs	r3, r2
 8007986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007996:	4b70      	ldr	r3, [pc, #448]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799c:	f023 020c 	bic.w	r2, r3, #12
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a4:	496c      	ldr	r1, [pc, #432]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079b8:	4b67      	ldr	r3, [pc, #412]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c6:	4964      	ldr	r1, [pc, #400]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079da:	4b5f      	ldr	r3, [pc, #380]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e8:	495b      	ldr	r1, [pc, #364]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079fc:	4b56      	ldr	r3, [pc, #344]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0a:	4953      	ldr	r1, [pc, #332]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007a1e:	4b4e      	ldr	r3, [pc, #312]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2c:	494a      	ldr	r1, [pc, #296]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007a40:	4b45      	ldr	r3, [pc, #276]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4e:	4942      	ldr	r1, [pc, #264]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00a      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007a62:	4b3d      	ldr	r3, [pc, #244]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a70:	4939      	ldr	r1, [pc, #228]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00a      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a84:	4b34      	ldr	r3, [pc, #208]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a92:	4931      	ldr	r1, [pc, #196]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d011      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007aa6:	4b2c      	ldr	r3, [pc, #176]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab4:	4928      	ldr	r1, [pc, #160]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ac4:	d101      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ae6:	4b1c      	ldr	r3, [pc, #112]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af4:	4918      	ldr	r1, [pc, #96]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b08:	4b13      	ldr	r3, [pc, #76]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b18:	490f      	ldr	r1, [pc, #60]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d005      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b2e:	f040 80d8 	bne.w	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a08      	ldr	r2, [pc, #32]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b3e:	f7fb fd35 	bl	80035ac <HAL_GetTick>
 8007b42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b44:	e00a      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007b46:	f7fb fd31 	bl	80035ac <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b64      	cmp	r3, #100	; 0x64
 8007b52:	d903      	bls.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e196      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007b58:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b5c:	4b6c      	ldr	r3, [pc, #432]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1ee      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d021      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d11d      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b7c:	4b64      	ldr	r3, [pc, #400]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b82:	0c1b      	lsrs	r3, r3, #16
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b8a:	4b61      	ldr	r3, [pc, #388]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b90:	0e1b      	lsrs	r3, r3, #24
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	019a      	lsls	r2, r3, #6
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	041b      	lsls	r3, r3, #16
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	061b      	lsls	r3, r3, #24
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	071b      	lsls	r3, r3, #28
 8007bb0:	4957      	ldr	r1, [pc, #348]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bcc:	d00a      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d02e      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be2:	d129      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007be4:	4b4a      	ldr	r3, [pc, #296]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bea:	0c1b      	lsrs	r3, r3, #16
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007bf2:	4b47      	ldr	r3, [pc, #284]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf8:	0f1b      	lsrs	r3, r3, #28
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	019a      	lsls	r2, r3, #6
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	041b      	lsls	r3, r3, #16
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	061b      	lsls	r3, r3, #24
 8007c12:	431a      	orrs	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	071b      	lsls	r3, r3, #28
 8007c18:	493d      	ldr	r1, [pc, #244]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c20:	4b3b      	ldr	r3, [pc, #236]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c26:	f023 021f 	bic.w	r2, r3, #31
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	4937      	ldr	r1, [pc, #220]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01d      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c44:	4b32      	ldr	r3, [pc, #200]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c4a:	0e1b      	lsrs	r3, r3, #24
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c52:	4b2f      	ldr	r3, [pc, #188]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c58:	0f1b      	lsrs	r3, r3, #28
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	019a      	lsls	r2, r3, #6
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	041b      	lsls	r3, r3, #16
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	061b      	lsls	r3, r3, #24
 8007c72:	431a      	orrs	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	071b      	lsls	r3, r3, #28
 8007c78:	4925      	ldr	r1, [pc, #148]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d011      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	019a      	lsls	r2, r3, #6
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	061b      	lsls	r3, r3, #24
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	071b      	lsls	r3, r3, #28
 8007ca8:	4919      	ldr	r1, [pc, #100]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007cb0:	4b17      	ldr	r3, [pc, #92]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a16      	ldr	r2, [pc, #88]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cbc:	f7fb fc76 	bl	80035ac <HAL_GetTick>
 8007cc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cc4:	f7fb fc72 	bl	80035ac <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b64      	cmp	r3, #100	; 0x64
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e0d7      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cd6:	4b0e      	ldr	r3, [pc, #56]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f0      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	f040 80cd 	bne.w	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007cea:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a08      	ldr	r2, [pc, #32]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf6:	f7fb fc59 	bl	80035ac <HAL_GetTick>
 8007cfa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cfc:	e00a      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007cfe:	f7fb fc55 	bl	80035ac <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b64      	cmp	r3, #100	; 0x64
 8007d0a:	d903      	bls.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e0ba      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007d10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d14:	4b5e      	ldr	r3, [pc, #376]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d20:	d0ed      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d009      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d02e      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d12a      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d4a:	4b51      	ldr	r3, [pc, #324]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d50:	0c1b      	lsrs	r3, r3, #16
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d58:	4b4d      	ldr	r3, [pc, #308]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5e:	0f1b      	lsrs	r3, r3, #28
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	019a      	lsls	r2, r3, #6
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	041b      	lsls	r3, r3, #16
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	061b      	lsls	r3, r3, #24
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	071b      	lsls	r3, r3, #28
 8007d7e:	4944      	ldr	r1, [pc, #272]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d86:	4b42      	ldr	r3, [pc, #264]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	3b01      	subs	r3, #1
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	493d      	ldr	r1, [pc, #244]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d022      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007db4:	d11d      	bne.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007db6:	4b36      	ldr	r3, [pc, #216]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbc:	0e1b      	lsrs	r3, r3, #24
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007dc4:	4b32      	ldr	r3, [pc, #200]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dca:	0f1b      	lsrs	r3, r3, #28
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	019a      	lsls	r2, r3, #6
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	431a      	orrs	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	061b      	lsls	r3, r3, #24
 8007de4:	431a      	orrs	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	071b      	lsls	r3, r3, #28
 8007dea:	4929      	ldr	r1, [pc, #164]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0308 	and.w	r3, r3, #8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d028      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007dfe:	4b24      	ldr	r3, [pc, #144]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e04:	0e1b      	lsrs	r3, r3, #24
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e0c:	4b20      	ldr	r3, [pc, #128]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e12:	0c1b      	lsrs	r3, r3, #16
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	019a      	lsls	r2, r3, #6
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	431a      	orrs	r2, r3
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	061b      	lsls	r3, r3, #24
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	071b      	lsls	r3, r3, #28
 8007e32:	4917      	ldr	r1, [pc, #92]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e3a:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	4911      	ldr	r1, [pc, #68]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007e50:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a0e      	ldr	r2, [pc, #56]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e5c:	f7fb fba6 	bl	80035ac <HAL_GetTick>
 8007e60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e62:	e008      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e64:	f7fb fba2 	bl	80035ac <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b64      	cmp	r3, #100	; 0x64
 8007e70:	d901      	bls.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e007      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e82:	d1ef      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3720      	adds	r7, #32
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	40023800 	.word	0x40023800

08007e94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007eb2:	f040 8086 	bne.w	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007eb6:	4b8d      	ldr	r3, [pc, #564]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ebc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007ec4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ecc:	d03e      	beq.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ed2:	d073      	beq.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d000      	beq.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007ed8:	e074      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007eda:	4b84      	ldr	r3, [pc, #528]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d108      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ee6:	4b81      	ldr	r3, [pc, #516]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eee:	4a80      	ldr	r2, [pc, #512]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef4:	613b      	str	r3, [r7, #16]
 8007ef6:	e007      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ef8:	4b7c      	ldr	r3, [pc, #496]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f00:	4a7c      	ldr	r2, [pc, #496]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f06:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007f08:	4b78      	ldr	r3, [pc, #480]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0e:	0e1b      	lsrs	r3, r3, #24
 8007f10:	f003 030f 	and.w	r3, r3, #15
 8007f14:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007f16:	4b75      	ldr	r3, [pc, #468]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f1c:	099b      	lsrs	r3, r3, #6
 8007f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	fb02 f203 	mul.w	r2, r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007f30:	4b6e      	ldr	r3, [pc, #440]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f36:	0a1b      	lsrs	r3, r3, #8
 8007f38:	f003 031f 	and.w	r3, r3, #31
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f48:	617b      	str	r3, [r7, #20]
        break;
 8007f4a:	e03b      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f4c:	4b67      	ldr	r3, [pc, #412]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d108      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f58:	4b64      	ldr	r3, [pc, #400]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f60:	4a63      	ldr	r2, [pc, #396]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	e007      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f6a:	4b60      	ldr	r3, [pc, #384]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f72:	4a60      	ldr	r2, [pc, #384]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f78:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007f7a:	4b5c      	ldr	r3, [pc, #368]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f80:	0e1b      	lsrs	r3, r3, #24
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007f88:	4b58      	ldr	r3, [pc, #352]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f8e:	099b      	lsrs	r3, r3, #6
 8007f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	fb02 f203 	mul.w	r2, r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007fa2:	4b52      	ldr	r3, [pc, #328]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa8:	f003 031f 	and.w	r3, r3, #31
 8007fac:	3301      	adds	r3, #1
 8007fae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb8:	617b      	str	r3, [r7, #20]
        break;
 8007fba:	e003      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fbc:	4b4e      	ldr	r3, [pc, #312]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007fbe:	617b      	str	r3, [r7, #20]
        break;
 8007fc0:	e000      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007fc2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fca:	f040 8086 	bne.w	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007fce:	4b47      	ldr	r3, [pc, #284]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fd4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007fdc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fe4:	d03e      	beq.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fea:	d073      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d000      	beq.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007ff0:	e074      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007ff2:	4b3e      	ldr	r3, [pc, #248]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d108      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ffe:	4b3b      	ldr	r3, [pc, #236]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008006:	4a3a      	ldr	r2, [pc, #232]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008008:	fbb2 f3f3 	udiv	r3, r2, r3
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	e007      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008010:	4b36      	ldr	r3, [pc, #216]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008018:	4a36      	ldr	r2, [pc, #216]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800801a:	fbb2 f3f3 	udiv	r3, r2, r3
 800801e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008020:	4b32      	ldr	r3, [pc, #200]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008026:	0e1b      	lsrs	r3, r3, #24
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800802e:	4b2f      	ldr	r3, [pc, #188]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008034:	099b      	lsrs	r3, r3, #6
 8008036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	fb02 f203 	mul.w	r2, r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	fbb2 f3f3 	udiv	r3, r2, r3
 8008046:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008048:	4b28      	ldr	r3, [pc, #160]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800804a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	3301      	adds	r3, #1
 8008056:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008060:	617b      	str	r3, [r7, #20]
        break;
 8008062:	e03b      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008064:	4b21      	ldr	r3, [pc, #132]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d108      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008070:	4b1e      	ldr	r3, [pc, #120]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008078:	4a1d      	ldr	r2, [pc, #116]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800807a:	fbb2 f3f3 	udiv	r3, r2, r3
 800807e:	613b      	str	r3, [r7, #16]
 8008080:	e007      	b.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008082:	4b1a      	ldr	r3, [pc, #104]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800808a:	4a1a      	ldr	r2, [pc, #104]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800808c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008090:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008092:	4b16      	ldr	r3, [pc, #88]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008098:	0e1b      	lsrs	r3, r3, #24
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80080a0:	4b12      	ldr	r3, [pc, #72]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	fb02 f203 	mul.w	r2, r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c0:	f003 031f 	and.w	r3, r3, #31
 80080c4:	3301      	adds	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d0:	617b      	str	r3, [r7, #20]
        break;
 80080d2:	e003      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80080d4:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80080d6:	617b      	str	r3, [r7, #20]
        break;
 80080d8:	e000      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 80080da:	bf00      	nop

  return frequency;
 80080dc:	697b      	ldr	r3, [r7, #20]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40023800 	.word	0x40023800
 80080f0:	00f42400 	.word	0x00f42400
 80080f4:	017d7840 	.word	0x017d7840
 80080f8:	00bb8000 	.word	0x00bb8000

080080fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e06b      	b.n	80081e6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7f5b      	ldrb	r3, [r3, #29]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d105      	bne.n	8008124 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7f9 ff8c 	bl	800203c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	22ca      	movs	r2, #202	; 0xca
 8008130:	625a      	str	r2, [r3, #36]	; 0x24
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2253      	movs	r2, #83	; 0x53
 8008138:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fb00 	bl	8008740 <RTC_EnterInitMode>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d008      	beq.n	8008158 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	22ff      	movs	r2, #255	; 0xff
 800814c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e046      	b.n	80081e6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6899      	ldr	r1, [r3, #8]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	4b23      	ldr	r3, [pc, #140]	; (80081f0 <HAL_RTC_Init+0xf4>)
 8008164:	400b      	ands	r3, r1
 8008166:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6899      	ldr	r1, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	68d2      	ldr	r2, [r2, #12]
 800818e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6919      	ldr	r1, [r3, #16]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	041a      	lsls	r2, r3, #16
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081b2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0208 	bic.w	r2, r2, #8
 80081c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	699a      	ldr	r2, [r3, #24]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	22ff      	movs	r2, #255	; 0xff
 80081dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80081e4:	2300      	movs	r3, #0
  }
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	ff8fffbf 	.word	0xff8fffbf

080081f4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80081f4:	b590      	push	{r4, r7, lr}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	7f1b      	ldrb	r3, [r3, #28]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d101      	bne.n	8008210 <HAL_RTC_SetTime+0x1c>
 800820c:	2302      	movs	r3, #2
 800820e:	e0a8      	b.n	8008362 <HAL_RTC_SetTime+0x16e>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2201      	movs	r2, #1
 8008214:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2202      	movs	r2, #2
 800821a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d126      	bne.n	8008270 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2200      	movs	r2, #0
 8008234:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 faac 	bl	8008798 <RTC_ByteToBcd2>
 8008240:	4603      	mov	r3, r0
 8008242:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	4618      	mov	r0, r3
 800824a:	f000 faa5 	bl	8008798 <RTC_ByteToBcd2>
 800824e:	4603      	mov	r3, r0
 8008250:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008252:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	789b      	ldrb	r3, [r3, #2]
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fa9d 	bl	8008798 <RTC_ByteToBcd2>
 800825e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008260:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	7b1b      	ldrb	r3, [r3, #12]
 8008268:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	e018      	b.n	80082a2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2200      	movs	r2, #0
 8008282:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	785b      	ldrb	r3, [r3, #1]
 800828e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008290:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008296:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	7b1b      	ldrb	r3, [r3, #12]
 800829c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800829e:	4313      	orrs	r3, r2
 80082a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	22ca      	movs	r2, #202	; 0xca
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2253      	movs	r2, #83	; 0x53
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fa44 	bl	8008740 <RTC_EnterInitMode>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	22ff      	movs	r2, #255	; 0xff
 80082c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2204      	movs	r2, #4
 80082ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e045      	b.n	8008362 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	6979      	ldr	r1, [r7, #20]
 80082dc:	4b23      	ldr	r3, [pc, #140]	; (800836c <HAL_RTC_SetTime+0x178>)
 80082de:	400b      	ands	r3, r1
 80082e0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6899      	ldr	r1, [r3, #8]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	431a      	orrs	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008318:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0320 	and.w	r3, r3, #32
 8008324:	2b00      	cmp	r3, #0
 8008326:	d111      	bne.n	800834c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f9e1 	bl	80086f0 <HAL_RTC_WaitForSynchro>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	22ff      	movs	r2, #255	; 0xff
 800833a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2204      	movs	r2, #4
 8008340:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e00a      	b.n	8008362 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	22ff      	movs	r2, #255	; 0xff
 8008352:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2201      	movs	r2, #1
 8008358:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008360:	2300      	movs	r3, #0
  }
}
 8008362:	4618      	mov	r0, r3
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	bd90      	pop	{r4, r7, pc}
 800836a:	bf00      	nop
 800836c:	007f7f7f 	.word	0x007f7f7f

08008370 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	7f1b      	ldrb	r3, [r3, #28]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_RTC_SetDate+0x1c>
 8008388:	2302      	movs	r3, #2
 800838a:	e092      	b.n	80084b2 <HAL_RTC_SetDate+0x142>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2201      	movs	r2, #1
 8008390:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2202      	movs	r2, #2
 8008396:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10e      	bne.n	80083bc <HAL_RTC_SetDate+0x4c>
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	f003 0310 	and.w	r3, r3, #16
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d008      	beq.n	80083bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	f023 0310 	bic.w	r3, r3, #16
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	330a      	adds	r3, #10
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d11c      	bne.n	80083fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	78db      	ldrb	r3, [r3, #3]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f9e6 	bl	8008798 <RTC_ByteToBcd2>
 80083cc:	4603      	mov	r3, r0
 80083ce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 f9df 	bl	8008798 <RTC_ByteToBcd2>
 80083da:	4603      	mov	r3, r0
 80083dc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80083de:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	789b      	ldrb	r3, [r3, #2]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 f9d7 	bl	8008798 <RTC_ByteToBcd2>
 80083ea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80083ec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80083f6:	4313      	orrs	r3, r2
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	e00e      	b.n	800841a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	78db      	ldrb	r3, [r3, #3]
 8008400:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008408:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800840e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	22ca      	movs	r2, #202	; 0xca
 8008420:	625a      	str	r2, [r3, #36]	; 0x24
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2253      	movs	r2, #83	; 0x53
 8008428:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 f988 	bl	8008740 <RTC_EnterInitMode>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00b      	beq.n	800844e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	22ff      	movs	r2, #255	; 0xff
 800843c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2204      	movs	r2, #4
 8008442:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e031      	b.n	80084b2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	6979      	ldr	r1, [r7, #20]
 8008454:	4b19      	ldr	r3, [pc, #100]	; (80084bc <HAL_RTC_SetDate+0x14c>)
 8008456:	400b      	ands	r3, r1
 8008458:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008468:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d111      	bne.n	800849c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 f939 	bl	80086f0 <HAL_RTC_WaitForSynchro>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00b      	beq.n	800849c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	22ff      	movs	r2, #255	; 0xff
 800848a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2204      	movs	r2, #4
 8008490:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e00a      	b.n	80084b2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	22ff      	movs	r2, #255	; 0xff
 80084a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2201      	movs	r2, #1
 80084a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80084b0:	2300      	movs	r3, #0
  }
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd90      	pop	{r4, r7, pc}
 80084ba:	bf00      	nop
 80084bc:	00ffff3f 	.word	0x00ffff3f

080084c0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80084c0:	b590      	push	{r4, r7, lr}
 80084c2:	b089      	sub	sp, #36	; 0x24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61fb      	str	r3, [r7, #28]
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	7f1b      	ldrb	r3, [r3, #28]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d101      	bne.n	80084e4 <HAL_RTC_SetAlarm+0x24>
 80084e0:	2302      	movs	r3, #2
 80084e2:	e101      	b.n	80086e8 <HAL_RTC_SetAlarm+0x228>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2202      	movs	r2, #2
 80084ee:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d137      	bne.n	8008566 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	d102      	bne.n	800850a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2200      	movs	r2, #0
 8008508:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f942 	bl	8008798 <RTC_ByteToBcd2>
 8008514:	4603      	mov	r3, r0
 8008516:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f93b 	bl	8008798 <RTC_ByteToBcd2>
 8008522:	4603      	mov	r3, r0
 8008524:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008526:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	789b      	ldrb	r3, [r3, #2]
 800852c:	4618      	mov	r0, r3
 800852e:	f000 f933 	bl	8008798 <RTC_ByteToBcd2>
 8008532:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008534:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	7b1b      	ldrb	r3, [r3, #12]
 800853c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800853e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008548:	4618      	mov	r0, r3
 800854a:	f000 f925 	bl	8008798 <RTC_ByteToBcd2>
 800854e:	4603      	mov	r3, r0
 8008550:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008552:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800855a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008560:	4313      	orrs	r3, r2
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	e023      	b.n	80085ae <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2200      	movs	r2, #0
 8008578:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	785b      	ldrb	r3, [r3, #1]
 8008584:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008586:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800858c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	7b1b      	ldrb	r3, [r3, #12]
 8008592:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008594:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800859c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800859e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80085a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80085aa:	4313      	orrs	r3, r2
 80085ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	22ca      	movs	r2, #202	; 0xca
 80085c0:	625a      	str	r2, [r3, #36]	; 0x24
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2253      	movs	r2, #83	; 0x53
 80085c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d2:	d13f      	bne.n	8008654 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689a      	ldr	r2, [r3, #8]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085e2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085f2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80085f4:	f7fa ffda 	bl	80035ac <HAL_GetTick>
 80085f8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80085fa:	e013      	b.n	8008624 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80085fc:	f7fa ffd6 	bl	80035ac <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800860a:	d90b      	bls.n	8008624 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	22ff      	movs	r2, #255	; 0xff
 8008612:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2203      	movs	r2, #3
 8008618:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e061      	b.n	80086e8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0e4      	beq.n	80085fc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69fa      	ldr	r2, [r7, #28]
 8008638:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008650:	609a      	str	r2, [r3, #8]
 8008652:	e03e      	b.n	80086d2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008662:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008672:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008674:	f7fa ff9a 	bl	80035ac <HAL_GetTick>
 8008678:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800867a:	e013      	b.n	80086a4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800867c:	f7fa ff96 	bl	80035ac <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800868a:	d90b      	bls.n	80086a4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	22ff      	movs	r2, #255	; 0xff
 8008692:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2203      	movs	r2, #3
 8008698:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e021      	b.n	80086e8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0e4      	beq.n	800867c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	22ff      	movs	r2, #255	; 0xff
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3724      	adds	r7, #36	; 0x24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd90      	pop	{r4, r7, pc}

080086f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800870a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800870c:	f7fa ff4e 	bl	80035ac <HAL_GetTick>
 8008710:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008712:	e009      	b.n	8008728 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008714:	f7fa ff4a 	bl	80035ac <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008722:	d901      	bls.n	8008728 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e007      	b.n	8008738 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0ee      	beq.n	8008714 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008756:	2b00      	cmp	r3, #0
 8008758:	d119      	bne.n	800878e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f04f 32ff 	mov.w	r2, #4294967295
 8008762:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008764:	f7fa ff22 	bl	80035ac <HAL_GetTick>
 8008768:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800876a:	e009      	b.n	8008780 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800876c:	f7fa ff1e 	bl	80035ac <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800877a:	d901      	bls.n	8008780 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e007      	b.n	8008790 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0ee      	beq.n	800876c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80087a6:	e005      	b.n	80087b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3301      	adds	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	3b0a      	subs	r3, #10
 80087b2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	2b09      	cmp	r3, #9
 80087b8:	d8f6      	bhi.n	80087a8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	b2db      	uxtb	r3, r3
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	7f1b      	ldrb	r3, [r3, #28]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e03e      	b.n	800886e <HAL_RTCEx_SetTimeStamp+0x9a>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2202      	movs	r2, #2
 80087fa:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	4b1e      	ldr	r3, [pc, #120]	; (800887c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008804:	4013      	ands	r3, r2
 8008806:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	22ca      	movs	r2, #202	; 0xca
 8008816:	625a      	str	r2, [r3, #36]	; 0x24
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2253      	movs	r2, #83	; 0x53
 800881e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0206 	bic.w	r2, r2, #6
 800882e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	430a      	orrs	r2, r1
 800883e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008856:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	22ff      	movs	r2, #255	; 0xff
 800885e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	371c      	adds	r7, #28
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	fffff7f7 	.word	0xfffff7f7

08008880 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b088      	sub	sp, #32
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e149      	b.n	8008b32 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d106      	bne.n	80088b8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7f9 fea8 	bl	8002608 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f94f 	bl	8008b64 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d007      	beq.n	80088de <HAL_SAI_Init+0x5e>
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d302      	bcc.n	80088d8 <HAL_SAI_Init+0x58>
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d006      	beq.n	80088e4 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80088d6:	e008      	b.n	80088ea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	61fb      	str	r3, [r7, #28]
      break;
 80088dc:	e005      	b.n	80088ea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80088de:	2310      	movs	r3, #16
 80088e0:	61fb      	str	r3, [r7, #28]
      break;
 80088e2:	e002      	b.n	80088ea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80088e4:	2320      	movs	r3, #32
 80088e6:	61fb      	str	r3, [r7, #28]
      break;
 80088e8:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d81d      	bhi.n	800892e <HAL_SAI_Init+0xae>
 80088f2:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <HAL_SAI_Init+0x78>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	08008909 	.word	0x08008909
 80088fc:	0800890f 	.word	0x0800890f
 8008900:	08008917 	.word	0x08008917
 8008904:	0800891f 	.word	0x0800891f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	617b      	str	r3, [r7, #20]
      }
      break;
 800890c:	e010      	b.n	8008930 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800890e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008912:	617b      	str	r3, [r7, #20]
      }
      break;
 8008914:	e00c      	b.n	8008930 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800891a:	617b      	str	r3, [r7, #20]
      }
      break;
 800891c:	e008      	b.n	8008930 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800891e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008922:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f043 0301 	orr.w	r3, r3, #1
 800892a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800892c:	e000      	b.n	8008930 <HAL_SAI_Init+0xb0>
  default:
    break;
 800892e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a81      	ldr	r2, [pc, #516]	; (8008b3c <HAL_SAI_Init+0x2bc>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d004      	beq.n	8008944 <HAL_SAI_Init+0xc4>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a80      	ldr	r2, [pc, #512]	; (8008b40 <HAL_SAI_Init+0x2c0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d103      	bne.n	800894c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008944:	4a7f      	ldr	r2, [pc, #508]	; (8008b44 <HAL_SAI_Init+0x2c4>)
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	e002      	b.n	8008952 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800894c:	4a7e      	ldr	r2, [pc, #504]	; (8008b48 <HAL_SAI_Init+0x2c8>)
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d043      	beq.n	80089e2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a76      	ldr	r2, [pc, #472]	; (8008b3c <HAL_SAI_Init+0x2bc>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d004      	beq.n	8008972 <HAL_SAI_Init+0xf2>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a74      	ldr	r2, [pc, #464]	; (8008b40 <HAL_SAI_Init+0x2c0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d104      	bne.n	800897c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008972:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008976:	f7ff fa8d 	bl	8007e94 <HAL_RCCEx_GetPeriphCLKFreq>
 800897a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a72      	ldr	r2, [pc, #456]	; (8008b4c <HAL_SAI_Init+0x2cc>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d004      	beq.n	8008990 <HAL_SAI_Init+0x110>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a71      	ldr	r2, [pc, #452]	; (8008b50 <HAL_SAI_Init+0x2d0>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d104      	bne.n	800899a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008990:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008994:	f7ff fa7e 	bl	8007e94 <HAL_RCCEx_GetPeriphCLKFreq>
 8008998:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	461a      	mov	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	025b      	lsls	r3, r3, #9
 80089ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4a67      	ldr	r2, [pc, #412]	; (8008b54 <HAL_SAI_Init+0x2d4>)
 80089b6:	fba2 2303 	umull	r2, r3, r2, r3
 80089ba:	08da      	lsrs	r2, r3, #3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80089c0:	68f9      	ldr	r1, [r7, #12]
 80089c2:	4b64      	ldr	r3, [pc, #400]	; (8008b54 <HAL_SAI_Init+0x2d4>)
 80089c4:	fba3 2301 	umull	r2, r3, r3, r1
 80089c8:	08da      	lsrs	r2, r3, #3
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	1aca      	subs	r2, r1, r3
 80089d4:	2a08      	cmp	r2, #8
 80089d6:	d904      	bls.n	80089e2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <HAL_SAI_Init+0x172>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d109      	bne.n	8008a06 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_SAI_Init+0x17e>
 80089fa:	2300      	movs	r3, #0
 80089fc:	e001      	b.n	8008a02 <HAL_SAI_Init+0x182>
 80089fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a02:	61bb      	str	r3, [r7, #24]
 8008a04:	e008      	b.n	8008a18 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d102      	bne.n	8008a14 <HAL_SAI_Init+0x194>
 8008a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a12:	e000      	b.n	8008a16 <HAL_SAI_Init+0x196>
 8008a14:	2300      	movs	r3, #0
 8008a16:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6819      	ldr	r1, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	4b4d      	ldr	r3, [pc, #308]	; (8008b58 <HAL_SAI_Init+0x2d8>)
 8008a24:	400b      	ands	r3, r1
 8008a26:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6819      	ldr	r1, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a3c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	431a      	orrs	r2, r3
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008a50:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008a5c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	051b      	lsls	r3, r3, #20
 8008a64:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6859      	ldr	r1, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	4b38      	ldr	r3, [pc, #224]	; (8008b5c <HAL_SAI_Init+0x2dc>)
 8008a7a:	400b      	ands	r3, r1
 8008a7c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6859      	ldr	r1, [r3, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	699a      	ldr	r2, [r3, #24]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6899      	ldr	r1, [r3, #8]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	4b2e      	ldr	r3, [pc, #184]	; (8008b60 <HAL_SAI_Init+0x2e0>)
 8008aa8:	400b      	ands	r3, r1
 8008aaa:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6899      	ldr	r1, [r3, #8]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008abc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008ac2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008ac8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008ad2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68d9      	ldr	r1, [r3, #12]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008aea:	400b      	ands	r3, r1
 8008aec:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68d9      	ldr	r1, [r3, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008afc:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b02:	041b      	lsls	r3, r3, #16
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	40015804 	.word	0x40015804
 8008b40:	40015824 	.word	0x40015824
 8008b44:	40015800 	.word	0x40015800
 8008b48:	40015c00 	.word	0x40015c00
 8008b4c:	40015c04 	.word	0x40015c04
 8008b50:	40015c24 	.word	0x40015c24
 8008b54:	cccccccd 	.word	0xcccccccd
 8008b58:	ff05c010 	.word	0xff05c010
 8008b5c:	ffff1ff0 	.word	0xffff1ff0
 8008b60:	fff88000 	.word	0xfff88000

08008b64 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008b64:	b490      	push	{r4, r7}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008b6c:	4b16      	ldr	r3, [pc, #88]	; (8008bc8 <SAI_Disable+0x64>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a16      	ldr	r2, [pc, #88]	; (8008bcc <SAI_Disable+0x68>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	0b1b      	lsrs	r3, r3, #12
 8008b78:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b8c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008b8e:	4623      	mov	r3, r4
 8008b90:	1e5c      	subs	r4, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8008baa:	e006      	b.n	8008bba <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e9      	bne.n	8008b8e <SAI_Disable+0x2a>

  return status;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc90      	pop	{r4, r7}
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	20000000 	.word	0x20000000
 8008bcc:	95cbec1b 	.word	0x95cbec1b

08008bd0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e025      	b.n	8008c30 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d106      	bne.n	8008bfe <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7f9 fcfb 	bl	80025f4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2202      	movs	r2, #2
 8008c02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	4619      	mov	r1, r3
 8008c10:	4610      	mov	r0, r2
 8008c12:	f001 fd59 	bl	800a6c8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	f001 fdc3 	bl	800a7ac <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d101      	bne.n	8008c54 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008c50:	2302      	movs	r3, #2
 8008c52:	e018      	b.n	8008c86 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	68b9      	ldr	r1, [r7, #8]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f001 fe21 	bl	800a8ac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d104      	bne.n	8008c7c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2205      	movs	r2, #5
 8008c76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008c7a:	e003      	b.n	8008c84 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d101      	bne.n	8008ca8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e00e      	b.n	8008cc6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 fe19 	bl	800a8ee <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e04c      	b.n	8008d7c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7f9 f9ba 	bl	8002070 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 0203 	bic.w	r2, r2, #3
 8008d12:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4b19      	ldr	r3, [pc, #100]	; (8008d84 <HAL_SPDIFRX_Init+0xb4>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008d2c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008d32:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008d38:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008d3e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008d44:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008d4a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008d50:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008d56:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008d5c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	fff88407 	.word	0xfff88407

08008d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e01d      	b.n	8008dd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7f9 f9a0 	bl	80020f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f000 fb78 	bl	80094bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0201 	orr.w	r2, r2, #1
 8008df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	; (8008e30 <HAL_TIM_Base_Start_IT+0x50>)
 8008e00:	4013      	ands	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b06      	cmp	r3, #6
 8008e08:	d00b      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x42>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e10:	d007      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f042 0201 	orr.w	r2, r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	00010007 	.word	0x00010007

08008e34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e01d      	b.n	8008e82 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d106      	bne.n	8008e60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7f9 f9b8 	bl	80021d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	4619      	mov	r1, r3
 8008e72:	4610      	mov	r0, r2
 8008e74:	f000 fb22 	bl	80094bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d122      	bne.n	8008ee6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d11b      	bne.n	8008ee6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f06f 0202 	mvn.w	r2, #2
 8008eb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	f003 0303 	and.w	r3, r3, #3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fad7 	bl	8009480 <HAL_TIM_IC_CaptureCallback>
 8008ed2:	e005      	b.n	8008ee0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fac9 	bl	800946c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fada 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f003 0304 	and.w	r3, r3, #4
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d122      	bne.n	8008f3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d11b      	bne.n	8008f3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f06f 0204 	mvn.w	r2, #4
 8008f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 faad 	bl	8009480 <HAL_TIM_IC_CaptureCallback>
 8008f26:	e005      	b.n	8008f34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fa9f 	bl	800946c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fab0 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d122      	bne.n	8008f8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d11b      	bne.n	8008f8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f06f 0208 	mvn.w	r2, #8
 8008f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2204      	movs	r2, #4
 8008f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fa83 	bl	8009480 <HAL_TIM_IC_CaptureCallback>
 8008f7a:	e005      	b.n	8008f88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa75 	bl	800946c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa86 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	f003 0310 	and.w	r3, r3, #16
 8008f98:	2b10      	cmp	r3, #16
 8008f9a:	d122      	bne.n	8008fe2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b10      	cmp	r3, #16
 8008fa8:	d11b      	bne.n	8008fe2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f06f 0210 	mvn.w	r2, #16
 8008fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2208      	movs	r2, #8
 8008fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fa59 	bl	8009480 <HAL_TIM_IC_CaptureCallback>
 8008fce:	e005      	b.n	8008fdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fa4b 	bl	800946c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fa5c 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d10e      	bne.n	800900e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d107      	bne.n	800900e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f06f 0201 	mvn.w	r2, #1
 8009006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7f8 fca7 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009018:	2b80      	cmp	r3, #128	; 0x80
 800901a:	d10e      	bne.n	800903a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009026:	2b80      	cmp	r3, #128	; 0x80
 8009028:	d107      	bne.n	800903a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 feef 	bl	8009e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009048:	d10e      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009054:	2b80      	cmp	r3, #128	; 0x80
 8009056:	d107      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fee2 	bl	8009e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d10e      	bne.n	8009094 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	d107      	bne.n	8009094 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800908c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa0a 	bl	80094a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d10e      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	d107      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f06f 0220 	mvn.w	r2, #32
 80090b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fea2 	bl	8009e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d101      	bne.n	80090e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80090de:	2302      	movs	r3, #2
 80090e0:	e105      	b.n	80092ee <HAL_TIM_PWM_ConfigChannel+0x226>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2202      	movs	r2, #2
 80090ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b14      	cmp	r3, #20
 80090f6:	f200 80f0 	bhi.w	80092da <HAL_TIM_PWM_ConfigChannel+0x212>
 80090fa:	a201      	add	r2, pc, #4	; (adr r2, 8009100 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009155 	.word	0x08009155
 8009104:	080092db 	.word	0x080092db
 8009108:	080092db 	.word	0x080092db
 800910c:	080092db 	.word	0x080092db
 8009110:	08009195 	.word	0x08009195
 8009114:	080092db 	.word	0x080092db
 8009118:	080092db 	.word	0x080092db
 800911c:	080092db 	.word	0x080092db
 8009120:	080091d7 	.word	0x080091d7
 8009124:	080092db 	.word	0x080092db
 8009128:	080092db 	.word	0x080092db
 800912c:	080092db 	.word	0x080092db
 8009130:	08009217 	.word	0x08009217
 8009134:	080092db 	.word	0x080092db
 8009138:	080092db 	.word	0x080092db
 800913c:	080092db 	.word	0x080092db
 8009140:	08009259 	.word	0x08009259
 8009144:	080092db 	.word	0x080092db
 8009148:	080092db 	.word	0x080092db
 800914c:	080092db 	.word	0x080092db
 8009150:	08009299 	.word	0x08009299
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fa4e 	bl	80095fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f042 0208 	orr.w	r2, r2, #8
 800916e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699a      	ldr	r2, [r3, #24]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0204 	bic.w	r2, r2, #4
 800917e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6999      	ldr	r1, [r3, #24]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	691a      	ldr	r2, [r3, #16]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	619a      	str	r2, [r3, #24]
      break;
 8009192:	e0a3      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68b9      	ldr	r1, [r7, #8]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 faa0 	bl	80096e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6999      	ldr	r1, [r3, #24]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	021a      	lsls	r2, r3, #8
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	619a      	str	r2, [r3, #24]
      break;
 80091d4:	e082      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 faf7 	bl	80097d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69da      	ldr	r2, [r3, #28]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0208 	orr.w	r2, r2, #8
 80091f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69da      	ldr	r2, [r3, #28]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 0204 	bic.w	r2, r2, #4
 8009200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69d9      	ldr	r1, [r3, #28]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	691a      	ldr	r2, [r3, #16]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	61da      	str	r2, [r3, #28]
      break;
 8009214:	e062      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fb4d 	bl	80098bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69da      	ldr	r2, [r3, #28]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69da      	ldr	r2, [r3, #28]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69d9      	ldr	r1, [r3, #28]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	021a      	lsls	r2, r3, #8
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	61da      	str	r2, [r3, #28]
      break;
 8009256:	e041      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 fb84 	bl	800996c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0208 	orr.w	r2, r2, #8
 8009272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 0204 	bic.w	r2, r2, #4
 8009282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	691a      	ldr	r2, [r3, #16]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009296:	e021      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68b9      	ldr	r1, [r7, #8]
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fbb6 	bl	8009a10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	021a      	lsls	r2, r3, #8
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092d8:	e000      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80092da:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop

080092f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d101      	bne.n	8009310 <HAL_TIM_ConfigClockSource+0x18>
 800930c:	2302      	movs	r3, #2
 800930e:	e0a6      	b.n	800945e <HAL_TIM_ConfigClockSource+0x166>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	4b4f      	ldr	r3, [pc, #316]	; (8009468 <HAL_TIM_ConfigClockSource+0x170>)
 800932c:	4013      	ands	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009336:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b40      	cmp	r3, #64	; 0x40
 8009346:	d067      	beq.n	8009418 <HAL_TIM_ConfigClockSource+0x120>
 8009348:	2b40      	cmp	r3, #64	; 0x40
 800934a:	d80b      	bhi.n	8009364 <HAL_TIM_ConfigClockSource+0x6c>
 800934c:	2b10      	cmp	r3, #16
 800934e:	d073      	beq.n	8009438 <HAL_TIM_ConfigClockSource+0x140>
 8009350:	2b10      	cmp	r3, #16
 8009352:	d802      	bhi.n	800935a <HAL_TIM_ConfigClockSource+0x62>
 8009354:	2b00      	cmp	r3, #0
 8009356:	d06f      	beq.n	8009438 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009358:	e078      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800935a:	2b20      	cmp	r3, #32
 800935c:	d06c      	beq.n	8009438 <HAL_TIM_ConfigClockSource+0x140>
 800935e:	2b30      	cmp	r3, #48	; 0x30
 8009360:	d06a      	beq.n	8009438 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009362:	e073      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009364:	2b70      	cmp	r3, #112	; 0x70
 8009366:	d00d      	beq.n	8009384 <HAL_TIM_ConfigClockSource+0x8c>
 8009368:	2b70      	cmp	r3, #112	; 0x70
 800936a:	d804      	bhi.n	8009376 <HAL_TIM_ConfigClockSource+0x7e>
 800936c:	2b50      	cmp	r3, #80	; 0x50
 800936e:	d033      	beq.n	80093d8 <HAL_TIM_ConfigClockSource+0xe0>
 8009370:	2b60      	cmp	r3, #96	; 0x60
 8009372:	d041      	beq.n	80093f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009374:	e06a      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800937a:	d066      	beq.n	800944a <HAL_TIM_ConfigClockSource+0x152>
 800937c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009380:	d017      	beq.n	80093b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009382:	e063      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	6899      	ldr	r1, [r3, #8]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f000 fc0a 	bl	8009bac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	609a      	str	r2, [r3, #8]
      break;
 80093b0:	e04c      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	6899      	ldr	r1, [r3, #8]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f000 fbf3 	bl	8009bac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093d4:	609a      	str	r2, [r3, #8]
      break;
 80093d6:	e039      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	6859      	ldr	r1, [r3, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	461a      	mov	r2, r3
 80093e6:	f000 fb67 	bl	8009ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2150      	movs	r1, #80	; 0x50
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fbc0 	bl	8009b76 <TIM_ITRx_SetConfig>
      break;
 80093f6:	e029      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	6859      	ldr	r1, [r3, #4]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	461a      	mov	r2, r3
 8009406:	f000 fb86 	bl	8009b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2160      	movs	r1, #96	; 0x60
 8009410:	4618      	mov	r0, r3
 8009412:	f000 fbb0 	bl	8009b76 <TIM_ITRx_SetConfig>
      break;
 8009416:	e019      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	6859      	ldr	r1, [r3, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	461a      	mov	r2, r3
 8009426:	f000 fb47 	bl	8009ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2140      	movs	r1, #64	; 0x40
 8009430:	4618      	mov	r0, r3
 8009432:	f000 fba0 	bl	8009b76 <TIM_ITRx_SetConfig>
      break;
 8009436:	e009      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f000 fb97 	bl	8009b76 <TIM_ITRx_SetConfig>
      break;
 8009448:	e000      	b.n	800944c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800944a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	fffeff88 	.word	0xfffeff88

0800946c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a40      	ldr	r2, [pc, #256]	; (80095d0 <TIM_Base_SetConfig+0x114>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d013      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094da:	d00f      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a3d      	ldr	r2, [pc, #244]	; (80095d4 <TIM_Base_SetConfig+0x118>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00b      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a3c      	ldr	r2, [pc, #240]	; (80095d8 <TIM_Base_SetConfig+0x11c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d007      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a3b      	ldr	r2, [pc, #236]	; (80095dc <TIM_Base_SetConfig+0x120>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d003      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a3a      	ldr	r2, [pc, #232]	; (80095e0 <TIM_Base_SetConfig+0x124>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d108      	bne.n	800950e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a2f      	ldr	r2, [pc, #188]	; (80095d0 <TIM_Base_SetConfig+0x114>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d02b      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800951c:	d027      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a2c      	ldr	r2, [pc, #176]	; (80095d4 <TIM_Base_SetConfig+0x118>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d023      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a2b      	ldr	r2, [pc, #172]	; (80095d8 <TIM_Base_SetConfig+0x11c>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d01f      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a2a      	ldr	r2, [pc, #168]	; (80095dc <TIM_Base_SetConfig+0x120>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d01b      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a29      	ldr	r2, [pc, #164]	; (80095e0 <TIM_Base_SetConfig+0x124>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d017      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a28      	ldr	r2, [pc, #160]	; (80095e4 <TIM_Base_SetConfig+0x128>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d013      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a27      	ldr	r2, [pc, #156]	; (80095e8 <TIM_Base_SetConfig+0x12c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00f      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a26      	ldr	r2, [pc, #152]	; (80095ec <TIM_Base_SetConfig+0x130>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d00b      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a25      	ldr	r2, [pc, #148]	; (80095f0 <TIM_Base_SetConfig+0x134>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d007      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a24      	ldr	r2, [pc, #144]	; (80095f4 <TIM_Base_SetConfig+0x138>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d003      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a23      	ldr	r2, [pc, #140]	; (80095f8 <TIM_Base_SetConfig+0x13c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d108      	bne.n	8009580 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	4313      	orrs	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a0a      	ldr	r2, [pc, #40]	; (80095d0 <TIM_Base_SetConfig+0x114>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d003      	beq.n	80095b4 <TIM_Base_SetConfig+0xf8>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a0c      	ldr	r2, [pc, #48]	; (80095e0 <TIM_Base_SetConfig+0x124>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d103      	bne.n	80095bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	691a      	ldr	r2, [r3, #16]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	615a      	str	r2, [r3, #20]
}
 80095c2:	bf00      	nop
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	40010000 	.word	0x40010000
 80095d4:	40000400 	.word	0x40000400
 80095d8:	40000800 	.word	0x40000800
 80095dc:	40000c00 	.word	0x40000c00
 80095e0:	40010400 	.word	0x40010400
 80095e4:	40014000 	.word	0x40014000
 80095e8:	40014400 	.word	0x40014400
 80095ec:	40014800 	.word	0x40014800
 80095f0:	40001800 	.word	0x40001800
 80095f4:	40001c00 	.word	0x40001c00
 80095f8:	40002000 	.word	0x40002000

080095fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	f023 0201 	bic.w	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	4b2b      	ldr	r3, [pc, #172]	; (80096d4 <TIM_OC1_SetConfig+0xd8>)
 8009628:	4013      	ands	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0303 	bic.w	r3, r3, #3
 8009632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f023 0302 	bic.w	r3, r3, #2
 8009644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a21      	ldr	r2, [pc, #132]	; (80096d8 <TIM_OC1_SetConfig+0xdc>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d003      	beq.n	8009660 <TIM_OC1_SetConfig+0x64>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a20      	ldr	r2, [pc, #128]	; (80096dc <TIM_OC1_SetConfig+0xe0>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d10c      	bne.n	800967a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f023 0308 	bic.w	r3, r3, #8
 8009666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	4313      	orrs	r3, r2
 8009670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f023 0304 	bic.w	r3, r3, #4
 8009678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a16      	ldr	r2, [pc, #88]	; (80096d8 <TIM_OC1_SetConfig+0xdc>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <TIM_OC1_SetConfig+0x8e>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a15      	ldr	r2, [pc, #84]	; (80096dc <TIM_OC1_SetConfig+0xe0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d111      	bne.n	80096ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	621a      	str	r2, [r3, #32]
}
 80096c8:	bf00      	nop
 80096ca:	371c      	adds	r7, #28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	fffeff8f 	.word	0xfffeff8f
 80096d8:	40010000 	.word	0x40010000
 80096dc:	40010400 	.word	0x40010400

080096e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	f023 0210 	bic.w	r2, r3, #16
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	4b2e      	ldr	r3, [pc, #184]	; (80097c4 <TIM_OC2_SetConfig+0xe4>)
 800970c:	4013      	ands	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	021b      	lsls	r3, r3, #8
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	f023 0320 	bic.w	r3, r3, #32
 800972a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	011b      	lsls	r3, r3, #4
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a23      	ldr	r2, [pc, #140]	; (80097c8 <TIM_OC2_SetConfig+0xe8>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d003      	beq.n	8009748 <TIM_OC2_SetConfig+0x68>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a22      	ldr	r2, [pc, #136]	; (80097cc <TIM_OC2_SetConfig+0xec>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d10d      	bne.n	8009764 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800974e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	011b      	lsls	r3, r3, #4
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009762:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a18      	ldr	r2, [pc, #96]	; (80097c8 <TIM_OC2_SetConfig+0xe8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d003      	beq.n	8009774 <TIM_OC2_SetConfig+0x94>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a17      	ldr	r2, [pc, #92]	; (80097cc <TIM_OC2_SetConfig+0xec>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d113      	bne.n	800979c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800977a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	4313      	orrs	r3, r2
 800979a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	621a      	str	r2, [r3, #32]
}
 80097b6:	bf00      	nop
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	feff8fff 	.word	0xfeff8fff
 80097c8:	40010000 	.word	0x40010000
 80097cc:	40010400 	.word	0x40010400

080097d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4b2d      	ldr	r3, [pc, #180]	; (80098b0 <TIM_OC3_SetConfig+0xe0>)
 80097fc:	4013      	ands	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f023 0303 	bic.w	r3, r3, #3
 8009806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	021b      	lsls	r3, r3, #8
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	4313      	orrs	r3, r2
 8009824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a22      	ldr	r2, [pc, #136]	; (80098b4 <TIM_OC3_SetConfig+0xe4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d003      	beq.n	8009836 <TIM_OC3_SetConfig+0x66>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a21      	ldr	r2, [pc, #132]	; (80098b8 <TIM_OC3_SetConfig+0xe8>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d10d      	bne.n	8009852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800983c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	697a      	ldr	r2, [r7, #20]
 8009846:	4313      	orrs	r3, r2
 8009848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a17      	ldr	r2, [pc, #92]	; (80098b4 <TIM_OC3_SetConfig+0xe4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d003      	beq.n	8009862 <TIM_OC3_SetConfig+0x92>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a16      	ldr	r2, [pc, #88]	; (80098b8 <TIM_OC3_SetConfig+0xe8>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d113      	bne.n	800988a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	011b      	lsls	r3, r3, #4
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	4313      	orrs	r3, r2
 800987c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	011b      	lsls	r3, r3, #4
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	4313      	orrs	r3, r2
 8009888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	685a      	ldr	r2, [r3, #4]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	621a      	str	r2, [r3, #32]
}
 80098a4:	bf00      	nop
 80098a6:	371c      	adds	r7, #28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	fffeff8f 	.word	0xfffeff8f
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40010400 	.word	0x40010400

080098bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	4b1e      	ldr	r3, [pc, #120]	; (8009960 <TIM_OC4_SetConfig+0xa4>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	021b      	lsls	r3, r3, #8
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	031b      	lsls	r3, r3, #12
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	4313      	orrs	r3, r2
 8009912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a13      	ldr	r2, [pc, #76]	; (8009964 <TIM_OC4_SetConfig+0xa8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d003      	beq.n	8009924 <TIM_OC4_SetConfig+0x68>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a12      	ldr	r2, [pc, #72]	; (8009968 <TIM_OC4_SetConfig+0xac>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d109      	bne.n	8009938 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800992a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	019b      	lsls	r3, r3, #6
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	4313      	orrs	r3, r2
 8009936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	621a      	str	r2, [r3, #32]
}
 8009952:	bf00      	nop
 8009954:	371c      	adds	r7, #28
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	feff8fff 	.word	0xfeff8fff
 8009964:	40010000 	.word	0x40010000
 8009968:	40010400 	.word	0x40010400

0800996c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4b1b      	ldr	r3, [pc, #108]	; (8009a04 <TIM_OC5_SetConfig+0x98>)
 8009998:	4013      	ands	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80099ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a12      	ldr	r2, [pc, #72]	; (8009a08 <TIM_OC5_SetConfig+0x9c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d003      	beq.n	80099ca <TIM_OC5_SetConfig+0x5e>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a11      	ldr	r2, [pc, #68]	; (8009a0c <TIM_OC5_SetConfig+0xa0>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d109      	bne.n	80099de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	021b      	lsls	r3, r3, #8
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	4313      	orrs	r3, r2
 80099dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	621a      	str	r2, [r3, #32]
}
 80099f8:	bf00      	nop
 80099fa:	371c      	adds	r7, #28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	fffeff8f 	.word	0xfffeff8f
 8009a08:	40010000 	.word	0x40010000
 8009a0c:	40010400 	.word	0x40010400

08009a10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <TIM_OC6_SetConfig+0x9c>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	051b      	lsls	r3, r3, #20
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a13      	ldr	r2, [pc, #76]	; (8009ab0 <TIM_OC6_SetConfig+0xa0>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d003      	beq.n	8009a70 <TIM_OC6_SetConfig+0x60>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a12      	ldr	r2, [pc, #72]	; (8009ab4 <TIM_OC6_SetConfig+0xa4>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d109      	bne.n	8009a84 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	029b      	lsls	r3, r3, #10
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	621a      	str	r2, [r3, #32]
}
 8009a9e:	bf00      	nop
 8009aa0:	371c      	adds	r7, #28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	feff8fff 	.word	0xfeff8fff
 8009ab0:	40010000 	.word	0x40010000
 8009ab4:	40010400 	.word	0x40010400

08009ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	f023 0201 	bic.w	r2, r3, #1
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	011b      	lsls	r3, r3, #4
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f023 030a 	bic.w	r3, r3, #10
 8009af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	621a      	str	r2, [r3, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b087      	sub	sp, #28
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
 8009b1e:	60b9      	str	r1, [r7, #8]
 8009b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	f023 0210 	bic.w	r2, r3, #16
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	031b      	lsls	r3, r3, #12
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	621a      	str	r2, [r3, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b085      	sub	sp, #20
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	f043 0307 	orr.w	r3, r3, #7
 8009b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	609a      	str	r2, [r3, #8]
}
 8009ba0:	bf00      	nop
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	021a      	lsls	r2, r3, #8
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	609a      	str	r2, [r3, #8]
}
 8009be0:	bf00      	nop
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d101      	bne.n	8009c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c00:	2302      	movs	r3, #2
 8009c02:	e06d      	b.n	8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a30      	ldr	r2, [pc, #192]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d004      	beq.n	8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a2f      	ldr	r2, [pc, #188]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d108      	bne.n	8009c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a20      	ldr	r2, [pc, #128]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d022      	beq.n	8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c76:	d01d      	beq.n	8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1d      	ldr	r2, [pc, #116]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d018      	beq.n	8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a1c      	ldr	r2, [pc, #112]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d013      	beq.n	8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a1a      	ldr	r2, [pc, #104]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d00e      	beq.n	8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a15      	ldr	r2, [pc, #84]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d009      	beq.n	8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a16      	ldr	r2, [pc, #88]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d004      	beq.n	8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a15      	ldr	r2, [pc, #84]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d10c      	bne.n	8009cce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	40010000 	.word	0x40010000
 8009cf0:	40010400 	.word	0x40010400
 8009cf4:	40000400 	.word	0x40000400
 8009cf8:	40000800 	.word	0x40000800
 8009cfc:	40000c00 	.word	0x40000c00
 8009d00:	40014000 	.word	0x40014000
 8009d04:	40001800 	.word	0x40001800

08009d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d20:	2302      	movs	r3, #2
 8009d22:	e065      	b.n	8009df0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	041b      	lsls	r3, r3, #16
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a16      	ldr	r2, [pc, #88]	; (8009dfc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d004      	beq.n	8009db2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a14      	ldr	r2, [pc, #80]	; (8009e00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d115      	bne.n	8009dde <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbc:	051b      	lsls	r3, r3, #20
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	40010000 	.word	0x40010000
 8009e00:	40010400 	.word	0x40010400

08009e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e040      	b.n	8009ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7f8 faa2 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2224      	movs	r2, #36	; 0x24
 8009e6c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0201 	bic.w	r2, r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f82c 	bl	8009edc <UART_SetConfig>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e022      	b.n	8009ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 faca 	bl	800a430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0201 	orr.w	r2, r2, #1
 8009eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fb51 	bl	800a574 <UART_CheckIdleState>
 8009ed2:	4603      	mov	r3, r0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	4bb1      	ldr	r3, [pc, #708]	; (800a1d0 <UART_SetConfig+0x2f4>)
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6812      	ldr	r2, [r2, #0]
 8009f12:	6939      	ldr	r1, [r7, #16]
 8009f14:	430b      	orrs	r3, r1
 8009f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a1b      	ldr	r3, [r3, #32]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a9f      	ldr	r2, [pc, #636]	; (800a1d4 <UART_SetConfig+0x2f8>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d121      	bne.n	8009fa0 <UART_SetConfig+0xc4>
 8009f5c:	4b9e      	ldr	r3, [pc, #632]	; (800a1d8 <UART_SetConfig+0x2fc>)
 8009f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f62:	f003 0303 	and.w	r3, r3, #3
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	d816      	bhi.n	8009f98 <UART_SetConfig+0xbc>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <UART_SetConfig+0x94>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f81 	.word	0x08009f81
 8009f74:	08009f8d 	.word	0x08009f8d
 8009f78:	08009f87 	.word	0x08009f87
 8009f7c:	08009f93 	.word	0x08009f93
 8009f80:	2301      	movs	r3, #1
 8009f82:	77fb      	strb	r3, [r7, #31]
 8009f84:	e151      	b.n	800a22a <UART_SetConfig+0x34e>
 8009f86:	2302      	movs	r3, #2
 8009f88:	77fb      	strb	r3, [r7, #31]
 8009f8a:	e14e      	b.n	800a22a <UART_SetConfig+0x34e>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	77fb      	strb	r3, [r7, #31]
 8009f90:	e14b      	b.n	800a22a <UART_SetConfig+0x34e>
 8009f92:	2308      	movs	r3, #8
 8009f94:	77fb      	strb	r3, [r7, #31]
 8009f96:	e148      	b.n	800a22a <UART_SetConfig+0x34e>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	77fb      	strb	r3, [r7, #31]
 8009f9c:	bf00      	nop
 8009f9e:	e144      	b.n	800a22a <UART_SetConfig+0x34e>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a8d      	ldr	r2, [pc, #564]	; (800a1dc <UART_SetConfig+0x300>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d134      	bne.n	800a014 <UART_SetConfig+0x138>
 8009faa:	4b8b      	ldr	r3, [pc, #556]	; (800a1d8 <UART_SetConfig+0x2fc>)
 8009fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb0:	f003 030c 	and.w	r3, r3, #12
 8009fb4:	2b0c      	cmp	r3, #12
 8009fb6:	d829      	bhi.n	800a00c <UART_SetConfig+0x130>
 8009fb8:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <UART_SetConfig+0xe4>)
 8009fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbe:	bf00      	nop
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	0800a00d 	.word	0x0800a00d
 8009fc8:	0800a00d 	.word	0x0800a00d
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a001 	.word	0x0800a001
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	0800a00d 	.word	0x0800a00d
 8009fdc:	0800a00d 	.word	0x0800a00d
 8009fe0:	08009ffb 	.word	0x08009ffb
 8009fe4:	0800a00d 	.word	0x0800a00d
 8009fe8:	0800a00d 	.word	0x0800a00d
 8009fec:	0800a00d 	.word	0x0800a00d
 8009ff0:	0800a007 	.word	0x0800a007
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	77fb      	strb	r3, [r7, #31]
 8009ff8:	e117      	b.n	800a22a <UART_SetConfig+0x34e>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	77fb      	strb	r3, [r7, #31]
 8009ffe:	e114      	b.n	800a22a <UART_SetConfig+0x34e>
 800a000:	2304      	movs	r3, #4
 800a002:	77fb      	strb	r3, [r7, #31]
 800a004:	e111      	b.n	800a22a <UART_SetConfig+0x34e>
 800a006:	2308      	movs	r3, #8
 800a008:	77fb      	strb	r3, [r7, #31]
 800a00a:	e10e      	b.n	800a22a <UART_SetConfig+0x34e>
 800a00c:	2310      	movs	r3, #16
 800a00e:	77fb      	strb	r3, [r7, #31]
 800a010:	bf00      	nop
 800a012:	e10a      	b.n	800a22a <UART_SetConfig+0x34e>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a71      	ldr	r2, [pc, #452]	; (800a1e0 <UART_SetConfig+0x304>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d120      	bne.n	800a060 <UART_SetConfig+0x184>
 800a01e:	4b6e      	ldr	r3, [pc, #440]	; (800a1d8 <UART_SetConfig+0x2fc>)
 800a020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a024:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a028:	2b10      	cmp	r3, #16
 800a02a:	d00f      	beq.n	800a04c <UART_SetConfig+0x170>
 800a02c:	2b10      	cmp	r3, #16
 800a02e:	d802      	bhi.n	800a036 <UART_SetConfig+0x15a>
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <UART_SetConfig+0x164>
 800a034:	e010      	b.n	800a058 <UART_SetConfig+0x17c>
 800a036:	2b20      	cmp	r3, #32
 800a038:	d005      	beq.n	800a046 <UART_SetConfig+0x16a>
 800a03a:	2b30      	cmp	r3, #48	; 0x30
 800a03c:	d009      	beq.n	800a052 <UART_SetConfig+0x176>
 800a03e:	e00b      	b.n	800a058 <UART_SetConfig+0x17c>
 800a040:	2300      	movs	r3, #0
 800a042:	77fb      	strb	r3, [r7, #31]
 800a044:	e0f1      	b.n	800a22a <UART_SetConfig+0x34e>
 800a046:	2302      	movs	r3, #2
 800a048:	77fb      	strb	r3, [r7, #31]
 800a04a:	e0ee      	b.n	800a22a <UART_SetConfig+0x34e>
 800a04c:	2304      	movs	r3, #4
 800a04e:	77fb      	strb	r3, [r7, #31]
 800a050:	e0eb      	b.n	800a22a <UART_SetConfig+0x34e>
 800a052:	2308      	movs	r3, #8
 800a054:	77fb      	strb	r3, [r7, #31]
 800a056:	e0e8      	b.n	800a22a <UART_SetConfig+0x34e>
 800a058:	2310      	movs	r3, #16
 800a05a:	77fb      	strb	r3, [r7, #31]
 800a05c:	bf00      	nop
 800a05e:	e0e4      	b.n	800a22a <UART_SetConfig+0x34e>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a5f      	ldr	r2, [pc, #380]	; (800a1e4 <UART_SetConfig+0x308>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d120      	bne.n	800a0ac <UART_SetConfig+0x1d0>
 800a06a:	4b5b      	ldr	r3, [pc, #364]	; (800a1d8 <UART_SetConfig+0x2fc>)
 800a06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a070:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a074:	2b40      	cmp	r3, #64	; 0x40
 800a076:	d00f      	beq.n	800a098 <UART_SetConfig+0x1bc>
 800a078:	2b40      	cmp	r3, #64	; 0x40
 800a07a:	d802      	bhi.n	800a082 <UART_SetConfig+0x1a6>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <UART_SetConfig+0x1b0>
 800a080:	e010      	b.n	800a0a4 <UART_SetConfig+0x1c8>
 800a082:	2b80      	cmp	r3, #128	; 0x80
 800a084:	d005      	beq.n	800a092 <UART_SetConfig+0x1b6>
 800a086:	2bc0      	cmp	r3, #192	; 0xc0
 800a088:	d009      	beq.n	800a09e <UART_SetConfig+0x1c2>
 800a08a:	e00b      	b.n	800a0a4 <UART_SetConfig+0x1c8>
 800a08c:	2300      	movs	r3, #0
 800a08e:	77fb      	strb	r3, [r7, #31]
 800a090:	e0cb      	b.n	800a22a <UART_SetConfig+0x34e>
 800a092:	2302      	movs	r3, #2
 800a094:	77fb      	strb	r3, [r7, #31]
 800a096:	e0c8      	b.n	800a22a <UART_SetConfig+0x34e>
 800a098:	2304      	movs	r3, #4
 800a09a:	77fb      	strb	r3, [r7, #31]
 800a09c:	e0c5      	b.n	800a22a <UART_SetConfig+0x34e>
 800a09e:	2308      	movs	r3, #8
 800a0a0:	77fb      	strb	r3, [r7, #31]
 800a0a2:	e0c2      	b.n	800a22a <UART_SetConfig+0x34e>
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	77fb      	strb	r3, [r7, #31]
 800a0a8:	bf00      	nop
 800a0aa:	e0be      	b.n	800a22a <UART_SetConfig+0x34e>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a4d      	ldr	r2, [pc, #308]	; (800a1e8 <UART_SetConfig+0x30c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d124      	bne.n	800a100 <UART_SetConfig+0x224>
 800a0b6:	4b48      	ldr	r3, [pc, #288]	; (800a1d8 <UART_SetConfig+0x2fc>)
 800a0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c4:	d012      	beq.n	800a0ec <UART_SetConfig+0x210>
 800a0c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ca:	d802      	bhi.n	800a0d2 <UART_SetConfig+0x1f6>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d007      	beq.n	800a0e0 <UART_SetConfig+0x204>
 800a0d0:	e012      	b.n	800a0f8 <UART_SetConfig+0x21c>
 800a0d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0d6:	d006      	beq.n	800a0e6 <UART_SetConfig+0x20a>
 800a0d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0dc:	d009      	beq.n	800a0f2 <UART_SetConfig+0x216>
 800a0de:	e00b      	b.n	800a0f8 <UART_SetConfig+0x21c>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	77fb      	strb	r3, [r7, #31]
 800a0e4:	e0a1      	b.n	800a22a <UART_SetConfig+0x34e>
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	77fb      	strb	r3, [r7, #31]
 800a0ea:	e09e      	b.n	800a22a <UART_SetConfig+0x34e>
 800a0ec:	2304      	movs	r3, #4
 800a0ee:	77fb      	strb	r3, [r7, #31]
 800a0f0:	e09b      	b.n	800a22a <UART_SetConfig+0x34e>
 800a0f2:	2308      	movs	r3, #8
 800a0f4:	77fb      	strb	r3, [r7, #31]
 800a0f6:	e098      	b.n	800a22a <UART_SetConfig+0x34e>
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	77fb      	strb	r3, [r7, #31]
 800a0fc:	bf00      	nop
 800a0fe:	e094      	b.n	800a22a <UART_SetConfig+0x34e>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a39      	ldr	r2, [pc, #228]	; (800a1ec <UART_SetConfig+0x310>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d124      	bne.n	800a154 <UART_SetConfig+0x278>
 800a10a:	4b33      	ldr	r3, [pc, #204]	; (800a1d8 <UART_SetConfig+0x2fc>)
 800a10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a110:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a118:	d012      	beq.n	800a140 <UART_SetConfig+0x264>
 800a11a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a11e:	d802      	bhi.n	800a126 <UART_SetConfig+0x24a>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d007      	beq.n	800a134 <UART_SetConfig+0x258>
 800a124:	e012      	b.n	800a14c <UART_SetConfig+0x270>
 800a126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a12a:	d006      	beq.n	800a13a <UART_SetConfig+0x25e>
 800a12c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a130:	d009      	beq.n	800a146 <UART_SetConfig+0x26a>
 800a132:	e00b      	b.n	800a14c <UART_SetConfig+0x270>
 800a134:	2301      	movs	r3, #1
 800a136:	77fb      	strb	r3, [r7, #31]
 800a138:	e077      	b.n	800a22a <UART_SetConfig+0x34e>
 800a13a:	2302      	movs	r3, #2
 800a13c:	77fb      	strb	r3, [r7, #31]
 800a13e:	e074      	b.n	800a22a <UART_SetConfig+0x34e>
 800a140:	2304      	movs	r3, #4
 800a142:	77fb      	strb	r3, [r7, #31]
 800a144:	e071      	b.n	800a22a <UART_SetConfig+0x34e>
 800a146:	2308      	movs	r3, #8
 800a148:	77fb      	strb	r3, [r7, #31]
 800a14a:	e06e      	b.n	800a22a <UART_SetConfig+0x34e>
 800a14c:	2310      	movs	r3, #16
 800a14e:	77fb      	strb	r3, [r7, #31]
 800a150:	bf00      	nop
 800a152:	e06a      	b.n	800a22a <UART_SetConfig+0x34e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a25      	ldr	r2, [pc, #148]	; (800a1f0 <UART_SetConfig+0x314>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d124      	bne.n	800a1a8 <UART_SetConfig+0x2cc>
 800a15e:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <UART_SetConfig+0x2fc>)
 800a160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a164:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a16c:	d012      	beq.n	800a194 <UART_SetConfig+0x2b8>
 800a16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a172:	d802      	bhi.n	800a17a <UART_SetConfig+0x29e>
 800a174:	2b00      	cmp	r3, #0
 800a176:	d007      	beq.n	800a188 <UART_SetConfig+0x2ac>
 800a178:	e012      	b.n	800a1a0 <UART_SetConfig+0x2c4>
 800a17a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a17e:	d006      	beq.n	800a18e <UART_SetConfig+0x2b2>
 800a180:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a184:	d009      	beq.n	800a19a <UART_SetConfig+0x2be>
 800a186:	e00b      	b.n	800a1a0 <UART_SetConfig+0x2c4>
 800a188:	2300      	movs	r3, #0
 800a18a:	77fb      	strb	r3, [r7, #31]
 800a18c:	e04d      	b.n	800a22a <UART_SetConfig+0x34e>
 800a18e:	2302      	movs	r3, #2
 800a190:	77fb      	strb	r3, [r7, #31]
 800a192:	e04a      	b.n	800a22a <UART_SetConfig+0x34e>
 800a194:	2304      	movs	r3, #4
 800a196:	77fb      	strb	r3, [r7, #31]
 800a198:	e047      	b.n	800a22a <UART_SetConfig+0x34e>
 800a19a:	2308      	movs	r3, #8
 800a19c:	77fb      	strb	r3, [r7, #31]
 800a19e:	e044      	b.n	800a22a <UART_SetConfig+0x34e>
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	77fb      	strb	r3, [r7, #31]
 800a1a4:	bf00      	nop
 800a1a6:	e040      	b.n	800a22a <UART_SetConfig+0x34e>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a11      	ldr	r2, [pc, #68]	; (800a1f4 <UART_SetConfig+0x318>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d139      	bne.n	800a226 <UART_SetConfig+0x34a>
 800a1b2:	4b09      	ldr	r3, [pc, #36]	; (800a1d8 <UART_SetConfig+0x2fc>)
 800a1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1c0:	d027      	beq.n	800a212 <UART_SetConfig+0x336>
 800a1c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1c6:	d817      	bhi.n	800a1f8 <UART_SetConfig+0x31c>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01c      	beq.n	800a206 <UART_SetConfig+0x32a>
 800a1cc:	e027      	b.n	800a21e <UART_SetConfig+0x342>
 800a1ce:	bf00      	nop
 800a1d0:	efff69f3 	.word	0xefff69f3
 800a1d4:	40011000 	.word	0x40011000
 800a1d8:	40023800 	.word	0x40023800
 800a1dc:	40004400 	.word	0x40004400
 800a1e0:	40004800 	.word	0x40004800
 800a1e4:	40004c00 	.word	0x40004c00
 800a1e8:	40005000 	.word	0x40005000
 800a1ec:	40011400 	.word	0x40011400
 800a1f0:	40007800 	.word	0x40007800
 800a1f4:	40007c00 	.word	0x40007c00
 800a1f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1fc:	d006      	beq.n	800a20c <UART_SetConfig+0x330>
 800a1fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a202:	d009      	beq.n	800a218 <UART_SetConfig+0x33c>
 800a204:	e00b      	b.n	800a21e <UART_SetConfig+0x342>
 800a206:	2300      	movs	r3, #0
 800a208:	77fb      	strb	r3, [r7, #31]
 800a20a:	e00e      	b.n	800a22a <UART_SetConfig+0x34e>
 800a20c:	2302      	movs	r3, #2
 800a20e:	77fb      	strb	r3, [r7, #31]
 800a210:	e00b      	b.n	800a22a <UART_SetConfig+0x34e>
 800a212:	2304      	movs	r3, #4
 800a214:	77fb      	strb	r3, [r7, #31]
 800a216:	e008      	b.n	800a22a <UART_SetConfig+0x34e>
 800a218:	2308      	movs	r3, #8
 800a21a:	77fb      	strb	r3, [r7, #31]
 800a21c:	e005      	b.n	800a22a <UART_SetConfig+0x34e>
 800a21e:	2310      	movs	r3, #16
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	bf00      	nop
 800a224:	e001      	b.n	800a22a <UART_SetConfig+0x34e>
 800a226:	2310      	movs	r3, #16
 800a228:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a232:	d17f      	bne.n	800a334 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a234:	7ffb      	ldrb	r3, [r7, #31]
 800a236:	2b08      	cmp	r3, #8
 800a238:	d85c      	bhi.n	800a2f4 <UART_SetConfig+0x418>
 800a23a:	a201      	add	r2, pc, #4	; (adr r2, 800a240 <UART_SetConfig+0x364>)
 800a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a240:	0800a265 	.word	0x0800a265
 800a244:	0800a285 	.word	0x0800a285
 800a248:	0800a2a5 	.word	0x0800a2a5
 800a24c:	0800a2f5 	.word	0x0800a2f5
 800a250:	0800a2bd 	.word	0x0800a2bd
 800a254:	0800a2f5 	.word	0x0800a2f5
 800a258:	0800a2f5 	.word	0x0800a2f5
 800a25c:	0800a2f5 	.word	0x0800a2f5
 800a260:	0800a2dd 	.word	0x0800a2dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a264:	f7fd f9ce 	bl	8007604 <HAL_RCC_GetPCLK1Freq>
 800a268:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	005a      	lsls	r2, r3, #1
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	085b      	lsrs	r3, r3, #1
 800a274:	441a      	add	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27e:	b29b      	uxth	r3, r3
 800a280:	61bb      	str	r3, [r7, #24]
        break;
 800a282:	e03a      	b.n	800a2fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a284:	f7fd f9d2 	bl	800762c <HAL_RCC_GetPCLK2Freq>
 800a288:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	005a      	lsls	r2, r3, #1
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	441a      	add	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	61bb      	str	r3, [r7, #24]
        break;
 800a2a2:	e02a      	b.n	800a2fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	085a      	lsrs	r2, r3, #1
 800a2aa:	4b5f      	ldr	r3, [pc, #380]	; (800a428 <UART_SetConfig+0x54c>)
 800a2ac:	4413      	add	r3, r2
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	6852      	ldr	r2, [r2, #4]
 800a2b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	61bb      	str	r3, [r7, #24]
        break;
 800a2ba:	e01e      	b.n	800a2fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2bc:	f7fd f8e4 	bl	8007488 <HAL_RCC_GetSysClockFreq>
 800a2c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	005a      	lsls	r2, r3, #1
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	085b      	lsrs	r3, r3, #1
 800a2cc:	441a      	add	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	61bb      	str	r3, [r7, #24]
        break;
 800a2da:	e00e      	b.n	800a2fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	085b      	lsrs	r3, r3, #1
 800a2e2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	61bb      	str	r3, [r7, #24]
        break;
 800a2f2:	e002      	b.n	800a2fa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	75fb      	strb	r3, [r7, #23]
        break;
 800a2f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b0f      	cmp	r3, #15
 800a2fe:	d916      	bls.n	800a32e <UART_SetConfig+0x452>
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a306:	d212      	bcs.n	800a32e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	f023 030f 	bic.w	r3, r3, #15
 800a310:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	085b      	lsrs	r3, r3, #1
 800a316:	b29b      	uxth	r3, r3
 800a318:	f003 0307 	and.w	r3, r3, #7
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	897b      	ldrh	r3, [r7, #10]
 800a320:	4313      	orrs	r3, r2
 800a322:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	897a      	ldrh	r2, [r7, #10]
 800a32a:	60da      	str	r2, [r3, #12]
 800a32c:	e070      	b.n	800a410 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
 800a332:	e06d      	b.n	800a410 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a334:	7ffb      	ldrb	r3, [r7, #31]
 800a336:	2b08      	cmp	r3, #8
 800a338:	d859      	bhi.n	800a3ee <UART_SetConfig+0x512>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <UART_SetConfig+0x464>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a365 	.word	0x0800a365
 800a344:	0800a383 	.word	0x0800a383
 800a348:	0800a3a1 	.word	0x0800a3a1
 800a34c:	0800a3ef 	.word	0x0800a3ef
 800a350:	0800a3b9 	.word	0x0800a3b9
 800a354:	0800a3ef 	.word	0x0800a3ef
 800a358:	0800a3ef 	.word	0x0800a3ef
 800a35c:	0800a3ef 	.word	0x0800a3ef
 800a360:	0800a3d7 	.word	0x0800a3d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a364:	f7fd f94e 	bl	8007604 <HAL_RCC_GetPCLK1Freq>
 800a368:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	085a      	lsrs	r2, r3, #1
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	441a      	add	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	61bb      	str	r3, [r7, #24]
        break;
 800a380:	e038      	b.n	800a3f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a382:	f7fd f953 	bl	800762c <HAL_RCC_GetPCLK2Freq>
 800a386:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	085a      	lsrs	r2, r3, #1
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	441a      	add	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	61bb      	str	r3, [r7, #24]
        break;
 800a39e:	e029      	b.n	800a3f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	085a      	lsrs	r2, r3, #1
 800a3a6:	4b21      	ldr	r3, [pc, #132]	; (800a42c <UART_SetConfig+0x550>)
 800a3a8:	4413      	add	r3, r2
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	6852      	ldr	r2, [r2, #4]
 800a3ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	61bb      	str	r3, [r7, #24]
        break;
 800a3b6:	e01d      	b.n	800a3f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3b8:	f7fd f866 	bl	8007488 <HAL_RCC_GetSysClockFreq>
 800a3bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	085a      	lsrs	r2, r3, #1
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	441a      	add	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	61bb      	str	r3, [r7, #24]
        break;
 800a3d4:	e00e      	b.n	800a3f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	085b      	lsrs	r3, r3, #1
 800a3dc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	61bb      	str	r3, [r7, #24]
        break;
 800a3ec:	e002      	b.n	800a3f4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	75fb      	strb	r3, [r7, #23]
        break;
 800a3f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	2b0f      	cmp	r3, #15
 800a3f8:	d908      	bls.n	800a40c <UART_SetConfig+0x530>
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a400:	d204      	bcs.n	800a40c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	60da      	str	r2, [r3, #12]
 800a40a:	e001      	b.n	800a410 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3720      	adds	r7, #32
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	01e84800 	.word	0x01e84800
 800a42c:	00f42400 	.word	0x00f42400

0800a430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45e:	f003 0302 	and.w	r3, r3, #2
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00a      	beq.n	800a49e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	f003 0308 	and.w	r3, r3, #8
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00a      	beq.n	800a4e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	f003 0320 	and.w	r3, r3, #32
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00a      	beq.n	800a504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	430a      	orrs	r2, r1
 800a502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01a      	beq.n	800a546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a52e:	d10a      	bne.n	800a546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	605a      	str	r2, [r3, #4]
  }
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af02      	add	r7, sp, #8
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a582:	f7f9 f813 	bl	80035ac <HAL_GetTick>
 800a586:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0308 	and.w	r3, r3, #8
 800a592:	2b08      	cmp	r3, #8
 800a594:	d10e      	bne.n	800a5b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a596:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f814 	bl	800a5d2 <UART_WaitOnFlagUntilTimeout>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e00a      	b.n	800a5ca <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	603b      	str	r3, [r7, #0]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5e2:	e05d      	b.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ea:	d059      	beq.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ec:	f7f8 ffde 	bl	80035ac <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d302      	bcc.n	800a602 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d11b      	bne.n	800a63a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a610:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	689a      	ldr	r2, [r3, #8]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0201 	bic.w	r2, r2, #1
 800a620:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2220      	movs	r2, #32
 800a626:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2220      	movs	r2, #32
 800a62c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e042      	b.n	800a6c0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0304 	and.w	r3, r3, #4
 800a644:	2b00      	cmp	r3, #0
 800a646:	d02b      	beq.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a656:	d123      	bne.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a660:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a670:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 0201 	bic.w	r2, r2, #1
 800a680:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2220      	movs	r2, #32
 800a686:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2220      	movs	r2, #32
 800a68c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2220      	movs	r2, #32
 800a692:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e00f      	b.n	800a6c0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	69da      	ldr	r2, [r3, #28]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	bf0c      	ite	eq
 800a6b0:	2301      	moveq	r3, #1
 800a6b2:	2300      	movne	r3, #0
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d092      	beq.n	800a5e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d027      	beq.n	800a732 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	4b2f      	ldr	r3, [pc, #188]	; (800a7a8 <FMC_SDRAM_Init+0xe0>)
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6f8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a6fe:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a704:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a70a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a710:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a716:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a71c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a722:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	4313      	orrs	r3, r2
 800a728:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	e032      	b.n	800a798 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a73e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a748:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a74e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	4313      	orrs	r3, r2
 800a754:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	4b12      	ldr	r3, [pc, #72]	; (800a7a8 <FMC_SDRAM_Init+0xe0>)
 800a760:	4013      	ands	r3, r2
 800a762:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a76c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a772:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a778:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a77e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a784:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	4313      	orrs	r3, r2
 800a78a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	ffff8000 	.word	0xffff8000

0800a7ac <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d02e      	beq.n	800a824 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a7d2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7e2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a7ec:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a7f6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a800:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	3b01      	subs	r3, #1
 800a808:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a80a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	3b01      	subs	r3, #1
 800a812:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a814:	4313      	orrs	r3, r2
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	4313      	orrs	r3, r2
 800a81a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	609a      	str	r2, [r3, #8]
 800a822:	e039      	b.n	800a898 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <FMC_SDRAM_Timing_Init+0xfc>)
 800a82e:	4013      	ands	r3, r2
 800a830:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	3b01      	subs	r3, #1
 800a838:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	3b01      	subs	r3, #1
 800a840:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a842:	4313      	orrs	r3, r2
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a856:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	3b01      	subs	r3, #1
 800a864:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a866:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a870:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	3b01      	subs	r3, #1
 800a878:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a87a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	3b01      	subs	r3, #1
 800a882:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a884:	4313      	orrs	r3, r2
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	4313      	orrs	r3, r2
 800a88a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	ff0f0fff 	.word	0xff0f0fff

0800a8ac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a8c4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a8ce:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	371c      	adds	r7, #28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	695a      	ldr	r2, [r3, #20]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	431a      	orrs	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f043 0201 	orr.w	r2, r3, #1
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a936:	b480      	push	{r7}
 800a938:	b083      	sub	sp, #12
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f023 0201 	bic.w	r2, r3, #1
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	019b      	lsls	r3, r3, #6
 800a96a:	f043 0220 	orr.w	r2, r3, #32
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4a09      	ldr	r2, [pc, #36]	; (800a9a0 <USB_FlushTxFifo+0x48>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d901      	bls.n	800a984 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a980:	2303      	movs	r3, #3
 800a982:	e006      	b.n	800a992 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	f003 0320 	and.w	r3, r3, #32
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	d0f0      	beq.n	800a972 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	00030d40 	.word	0x00030d40

0800a9a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2210      	movs	r2, #16
 800a9b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <USB_FlushRxFifo+0x40>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d901      	bls.n	800a9c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e006      	b.n	800a9d6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	f003 0310 	and.w	r3, r3, #16
 800a9d0:	2b10      	cmp	r3, #16
 800a9d2:	d0f0      	beq.n	800a9b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	00030d40 	.word	0x00030d40

0800a9e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b089      	sub	sp, #36	; 0x24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a9fe:	88fb      	ldrh	r3, [r7, #6]
 800aa00:	3303      	adds	r3, #3
 800aa02:	089b      	lsrs	r3, r3, #2
 800aa04:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800aa06:	2300      	movs	r3, #0
 800aa08:	61bb      	str	r3, [r7, #24]
 800aa0a:	e00b      	b.n	800aa24 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	3301      	adds	r3, #1
 800aa22:	61bb      	str	r3, [r7, #24]
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d3ef      	bcc.n	800aa0c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800aa2c:	69fb      	ldr	r3, [r7, #28]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3724      	adds	r7, #36	; 0x24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b085      	sub	sp, #20
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	4013      	ands	r3, r2
 800aa50:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa52:	68fb      	ldr	r3, [r7, #12]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa9a:	f023 0303 	bic.w	r3, r3, #3
 800aa9e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	68f9      	ldr	r1, [r7, #12]
 800aab0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aab4:	4313      	orrs	r3, r2
 800aab6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aab8:	78fb      	ldrb	r3, [r7, #3]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d107      	bne.n	800aace <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aac4:	461a      	mov	r2, r3
 800aac6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aaca:	6053      	str	r3, [r2, #4]
 800aacc:	e009      	b.n	800aae2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800aace:	78fb      	ldrb	r3, [r7, #3]
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d106      	bne.n	800aae2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aada:	461a      	mov	r2, r3
 800aadc:	f241 7370 	movw	r3, #6000	; 0x1770
 800aae0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	b29b      	uxth	r3, r3
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b087      	sub	sp, #28
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ab22:	78fb      	ldrb	r3, [r7, #3]
 800ab24:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	0c9b      	lsrs	r3, r3, #18
 800ab3a:	f003 0303 	and.w	r3, r3, #3
 800ab3e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <USB_HC_Halt+0x3a>
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d16c      	bne.n	800ac26 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	0151      	lsls	r1, r2, #5
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	440a      	add	r2, r1
 800ab62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab6a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d143      	bne.n	800ac00 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	0151      	lsls	r1, r2, #5
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	440a      	add	r2, r1
 800abae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	0151      	lsls	r1, r2, #5
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	440a      	add	r2, r1
 800abce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abd6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	3301      	adds	r3, #1
 800abdc:	617b      	str	r3, [r7, #20]
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abe4:	d81d      	bhi.n	800ac22 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	015a      	lsls	r2, r3, #5
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	4413      	add	r3, r2
 800abee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abfc:	d0ec      	beq.n	800abd8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800abfe:	e080      	b.n	800ad02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	0151      	lsls	r1, r2, #5
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	440a      	add	r2, r1
 800ac16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac1e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac20:	e06f      	b.n	800ad02 <USB_HC_Halt+0x1f0>
          break;
 800ac22:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac24:	e06d      	b.n	800ad02 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	0151      	lsls	r1, r2, #5
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	440a      	add	r2, r1
 800ac3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac44:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d143      	bne.n	800acde <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac74:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	0151      	lsls	r1, r2, #5
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	440a      	add	r2, r1
 800ac8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac94:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	015a      	lsls	r2, r3, #5
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	0151      	lsls	r1, r2, #5
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	440a      	add	r2, r1
 800acac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acb4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	3301      	adds	r3, #1
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acc2:	d81d      	bhi.n	800ad00 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	4413      	add	r3, r2
 800accc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acda:	d0ec      	beq.n	800acb6 <USB_HC_Halt+0x1a4>
 800acdc:	e011      	b.n	800ad02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	015a      	lsls	r2, r3, #5
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	0151      	lsls	r1, r2, #5
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	440a      	add	r2, r1
 800acf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acfc:	6013      	str	r3, [r2, #0]
 800acfe:	e000      	b.n	800ad02 <USB_HC_Halt+0x1f0>
          break;
 800ad00:	bf00      	nop
    }
  }

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	371c      	adds	r7, #28
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff fe08 	bl	800a936 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ad26:	2110      	movs	r1, #16
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff fe15 	bl	800a958 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fe38 	bl	800a9a4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ad34:	2300      	movs	r3, #0
 800ad36:	613b      	str	r3, [r7, #16]
 800ad38:	e01f      	b.n	800ad7a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	015a      	lsls	r2, r3, #5
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	4413      	add	r3, r2
 800ad42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad58:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad60:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad6e:	461a      	mov	r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	3301      	adds	r3, #1
 800ad78:	613b      	str	r3, [r7, #16]
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b0f      	cmp	r3, #15
 800ad7e:	d9dc      	bls.n	800ad3a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ad80:	2300      	movs	r3, #0
 800ad82:	613b      	str	r3, [r7, #16]
 800ad84:	e034      	b.n	800adf0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad9c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ada4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adba:	461a      	mov	r2, r3
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	3301      	adds	r3, #1
 800adc4:	617b      	str	r3, [r7, #20]
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adcc:	d80c      	bhi.n	800ade8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	4413      	add	r3, r2
 800add6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ade0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ade4:	d0ec      	beq.n	800adc0 <USB_StopHost+0xb0>
 800ade6:	e000      	b.n	800adea <USB_StopHost+0xda>
        break;
 800ade8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	3301      	adds	r3, #1
 800adee:	613b      	str	r3, [r7, #16]
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	2b0f      	cmp	r3, #15
 800adf4:	d9c7      	bls.n	800ad86 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adfc:	461a      	mov	r2, r3
 800adfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ae02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff fd81 	bl	800a914 <USB_EnableGlobalInt>

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae2a:	1c5a      	adds	r2, r3, #1
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f804 	bl	800ae40 <USBH_HandleSof>
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b0b      	cmp	r3, #11
 800ae50:	d10a      	bne.n	800ae68 <USBH_HandleSof+0x28>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d005      	beq.n	800ae68 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
  }
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae94:	2200      	movs	r2, #0
 800ae96:	4619      	mov	r1, r3
 800ae98:	f000 f8ae 	bl	800aff8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ae9c:	bf00      	nop
}
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aeb4:	bf00      	nop
}
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aef4:	2200      	movs	r2, #0
 800aef6:	4619      	mov	r1, r3
 800aef8:	f000 f87e 	bl	800aff8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 f92a 	bl	800c180 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	791b      	ldrb	r3, [r3, #4]
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f830 	bl	800af98 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	795b      	ldrb	r3, [r3, #5]
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f82a 	bl	800af98 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af58:	2200      	movs	r2, #0
 800af5a:	4619      	mov	r1, r3
 800af5c:	f000 f84c 	bl	800aff8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b082      	sub	sp, #8
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af86:	2200      	movs	r2, #0
 800af88:	4619      	mov	r1, r3
 800af8a:	f000 f835 	bl	800aff8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800afa4:	78fb      	ldrb	r3, [r7, #3]
 800afa6:	2b0a      	cmp	r3, #10
 800afa8:	d80d      	bhi.n	800afc6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	33e0      	adds	r3, #224	; 0xe0
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	78fb      	ldrb	r3, [r7, #3]
 800afb8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	33e0      	adds	r3, #224	; 0xe0
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	440b      	add	r3, r1
 800afc4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afda:	f3ef 8305 	mrs	r3, IPSR
 800afde:	607b      	str	r3, [r7, #4]
  return(result);
 800afe0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bf14      	ite	ne
 800afe6:	2301      	movne	r3, #1
 800afe8:	2300      	moveq	r3, #0
 800afea:	b2db      	uxtb	r3, r3
}
 800afec:	4618      	mov	r0, r3
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b004:	2300      	movs	r3, #0
 800b006:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <osMessagePut+0x1e>
    ticks = 1;
 800b012:	2301      	movs	r3, #1
 800b014:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b016:	f7ff ffdd 	bl	800afd4 <inHandlerMode>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d018      	beq.n	800b052 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b020:	f107 0210 	add.w	r2, r7, #16
 800b024:	f107 0108 	add.w	r1, r7, #8
 800b028:	2300      	movs	r3, #0
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 f9ae 	bl	800b38c <xQueueGenericSendFromISR>
 800b030:	4603      	mov	r3, r0
 800b032:	2b01      	cmp	r3, #1
 800b034:	d001      	beq.n	800b03a <osMessagePut+0x42>
      return osErrorOS;
 800b036:	23ff      	movs	r3, #255	; 0xff
 800b038:	e018      	b.n	800b06c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d014      	beq.n	800b06a <osMessagePut+0x72>
 800b040:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <osMessagePut+0x7c>)
 800b042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	e00b      	b.n	800b06a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b052:	f107 0108 	add.w	r1, r7, #8
 800b056:	2300      	movs	r3, #0
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 f894 	bl	800b188 <xQueueGenericSend>
 800b060:	4603      	mov	r3, r0
 800b062:	2b01      	cmp	r3, #1
 800b064:	d001      	beq.n	800b06a <osMessagePut+0x72>
      return osErrorOS;
 800b066:	23ff      	movs	r3, #255	; 0xff
 800b068:	e000      	b.n	800b06c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	689a      	ldr	r2, [r3, #8]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	683a      	ldr	r2, [r7, #0]
 800b09c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	601a      	str	r2, [r3, #0]
}
 800b0b4:	bf00      	nop
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d6:	d103      	bne.n	800b0e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	60fb      	str	r3, [r7, #12]
 800b0de:	e00c      	b.n	800b0fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	60fb      	str	r3, [r7, #12]
 800b0e6:	e002      	b.n	800b0ee <vListInsert+0x2e>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d2f6      	bcs.n	800b0e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	601a      	str	r2, [r3, #0]
}
 800b126:	bf00      	nop
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b132:	b480      	push	{r7}
 800b134:	b085      	sub	sp, #20
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	6892      	ldr	r2, [r2, #8]
 800b148:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	6852      	ldr	r2, [r2, #4]
 800b152:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d103      	bne.n	800b166 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689a      	ldr	r2, [r3, #8]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	1e5a      	subs	r2, r3, #1
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
	...

0800b188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08e      	sub	sp, #56	; 0x38
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b196:	2300      	movs	r3, #0
 800b198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10b      	bne.n	800b1bc <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	b672      	cpsid	i
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	b662      	cpsie	i
 800b1b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1ba:	e7fe      	b.n	800b1ba <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d103      	bne.n	800b1ca <xQueueGenericSend+0x42>
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d101      	bne.n	800b1ce <xQueueGenericSend+0x46>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e000      	b.n	800b1d0 <xQueueGenericSend+0x48>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10b      	bne.n	800b1ec <xQueueGenericSend+0x64>
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	b672      	cpsid	i
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	b662      	cpsie	i
 800b1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1ea:	e7fe      	b.n	800b1ea <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d103      	bne.n	800b1fa <xQueueGenericSend+0x72>
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d101      	bne.n	800b1fe <xQueueGenericSend+0x76>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e000      	b.n	800b200 <xQueueGenericSend+0x78>
 800b1fe:	2300      	movs	r3, #0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10b      	bne.n	800b21c <xQueueGenericSend+0x94>
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	b672      	cpsid	i
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	b662      	cpsie	i
 800b218:	623b      	str	r3, [r7, #32]
 800b21a:	e7fe      	b.n	800b21a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b21c:	f000 fd3e 	bl	800bc9c <xTaskGetSchedulerState>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d102      	bne.n	800b22c <xQueueGenericSend+0xa4>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <xQueueGenericSend+0xa8>
 800b22c:	2301      	movs	r3, #1
 800b22e:	e000      	b.n	800b232 <xQueueGenericSend+0xaa>
 800b230:	2300      	movs	r3, #0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10b      	bne.n	800b24e <xQueueGenericSend+0xc6>
 800b236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23a:	b672      	cpsid	i
 800b23c:	f383 8811 	msr	BASEPRI, r3
 800b240:	f3bf 8f6f 	isb	sy
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	b662      	cpsie	i
 800b24a:	61fb      	str	r3, [r7, #28]
 800b24c:	e7fe      	b.n	800b24c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b24e:	f000 fe4b 	bl	800bee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d302      	bcc.n	800b264 <xQueueGenericSend+0xdc>
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2b02      	cmp	r3, #2
 800b262:	d129      	bne.n	800b2b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	68b9      	ldr	r1, [r7, #8]
 800b268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b26a:	f000 f92b 	bl	800b4c4 <prvCopyDataToQueue>
 800b26e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	2b00      	cmp	r3, #0
 800b276:	d010      	beq.n	800b29a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27a:	3324      	adds	r3, #36	; 0x24
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 fc03 	bl	800ba88 <xTaskRemoveFromEventList>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d013      	beq.n	800b2b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b288:	4b3f      	ldr	r3, [pc, #252]	; (800b388 <xQueueGenericSend+0x200>)
 800b28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b28e:	601a      	str	r2, [r3, #0]
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	e00a      	b.n	800b2b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d007      	beq.n	800b2b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b2a0:	4b39      	ldr	r3, [pc, #228]	; (800b388 <xQueueGenericSend+0x200>)
 800b2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a6:	601a      	str	r2, [r3, #0]
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b2b0:	f000 fe4c 	bl	800bf4c <vPortExitCritical>
				return pdPASS;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e063      	b.n	800b380 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d103      	bne.n	800b2c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2be:	f000 fe45 	bl	800bf4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e05c      	b.n	800b380 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2cc:	f107 0314 	add.w	r3, r7, #20
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 fc3d 	bl	800bb50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2da:	f000 fe37 	bl	800bf4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2de:	f000 f9c5 	bl	800b66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2e2:	f000 fe01 	bl	800bee8 <vPortEnterCritical>
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2ec:	b25b      	sxtb	r3, r3
 800b2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f2:	d103      	bne.n	800b2fc <xQueueGenericSend+0x174>
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b302:	b25b      	sxtb	r3, r3
 800b304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b308:	d103      	bne.n	800b312 <xQueueGenericSend+0x18a>
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b312:	f000 fe1b 	bl	800bf4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b316:	1d3a      	adds	r2, r7, #4
 800b318:	f107 0314 	add.w	r3, r7, #20
 800b31c:	4611      	mov	r1, r2
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 fc2c 	bl	800bb7c <xTaskCheckForTimeOut>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d124      	bne.n	800b374 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b32a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b32c:	f000 f986 	bl	800b63c <prvIsQueueFull>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d018      	beq.n	800b368 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	3310      	adds	r3, #16
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	4611      	mov	r1, r2
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fb7c 	bl	800ba3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b346:	f000 f927 	bl	800b598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b34a:	f000 f99d 	bl	800b688 <xTaskResumeAll>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	f47f af7c 	bne.w	800b24e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b356:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <xQueueGenericSend+0x200>)
 800b358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	e772      	b.n	800b24e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b36a:	f000 f915 	bl	800b598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b36e:	f000 f98b 	bl	800b688 <xTaskResumeAll>
 800b372:	e76c      	b.n	800b24e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b376:	f000 f90f 	bl	800b598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b37a:	f000 f985 	bl	800b688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b37e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b380:	4618      	mov	r0, r3
 800b382:	3738      	adds	r7, #56	; 0x38
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08e      	sub	sp, #56	; 0x38
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
 800b398:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10b      	bne.n	800b3bc <xQueueGenericSendFromISR+0x30>
 800b3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a8:	b672      	cpsid	i
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	b662      	cpsie	i
 800b3b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ba:	e7fe      	b.n	800b3ba <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d103      	bne.n	800b3ca <xQueueGenericSendFromISR+0x3e>
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <xQueueGenericSendFromISR+0x42>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e000      	b.n	800b3d0 <xQueueGenericSendFromISR+0x44>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10b      	bne.n	800b3ec <xQueueGenericSendFromISR+0x60>
 800b3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d8:	b672      	cpsid	i
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	b662      	cpsie	i
 800b3e8:	623b      	str	r3, [r7, #32]
 800b3ea:	e7fe      	b.n	800b3ea <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d103      	bne.n	800b3fa <xQueueGenericSendFromISR+0x6e>
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d101      	bne.n	800b3fe <xQueueGenericSendFromISR+0x72>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e000      	b.n	800b400 <xQueueGenericSendFromISR+0x74>
 800b3fe:	2300      	movs	r3, #0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10b      	bne.n	800b41c <xQueueGenericSendFromISR+0x90>
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	b672      	cpsid	i
 800b40a:	f383 8811 	msr	BASEPRI, r3
 800b40e:	f3bf 8f6f 	isb	sy
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	b662      	cpsie	i
 800b418:	61fb      	str	r3, [r7, #28]
 800b41a:	e7fe      	b.n	800b41a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b41c:	f000 fe16 	bl	800c04c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b420:	f3ef 8211 	mrs	r2, BASEPRI
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	b672      	cpsid	i
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	b662      	cpsie	i
 800b438:	61ba      	str	r2, [r7, #24]
 800b43a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b43c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b43e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b448:	429a      	cmp	r2, r3
 800b44a:	d302      	bcc.n	800b452 <xQueueGenericSendFromISR+0xc6>
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d12c      	bne.n	800b4ac <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	68b9      	ldr	r1, [r7, #8]
 800b460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b462:	f000 f82f 	bl	800b4c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b466:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46e:	d112      	bne.n	800b496 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b474:	2b00      	cmp	r3, #0
 800b476:	d016      	beq.n	800b4a6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	3324      	adds	r3, #36	; 0x24
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 fb03 	bl	800ba88 <xTaskRemoveFromEventList>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00e      	beq.n	800b4a6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00b      	beq.n	800b4a6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	e007      	b.n	800b4a6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b49a:	3301      	adds	r3, #1
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	b25a      	sxtb	r2, r3
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b4aa:	e001      	b.n	800b4b0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3738      	adds	r7, #56	; 0x38
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10d      	bne.n	800b4fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d14d      	bne.n	800b586 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 fbf2 	bl	800bcd8 <xTaskPriorityDisinherit>
 800b4f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	609a      	str	r2, [r3, #8]
 800b4fc:	e043      	b.n	800b586 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d119      	bne.n	800b538 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6858      	ldr	r0, [r3, #4]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50c:	461a      	mov	r2, r3
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	f000 fea2 	bl	800c258 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51c:	441a      	add	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d32b      	bcc.n	800b586 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	605a      	str	r2, [r3, #4]
 800b536:	e026      	b.n	800b586 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	68d8      	ldr	r0, [r3, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b540:	461a      	mov	r2, r3
 800b542:	68b9      	ldr	r1, [r7, #8]
 800b544:	f000 fe88 	bl	800c258 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	68da      	ldr	r2, [r3, #12]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b550:	425b      	negs	r3, r3
 800b552:	441a      	add	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	68da      	ldr	r2, [r3, #12]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	429a      	cmp	r2, r3
 800b562:	d207      	bcs.n	800b574 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56c:	425b      	negs	r3, r3
 800b56e:	441a      	add	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b02      	cmp	r3, #2
 800b578:	d105      	bne.n	800b586 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	3b01      	subs	r3, #1
 800b584:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b58e:	697b      	ldr	r3, [r7, #20]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5a0:	f000 fca2 	bl	800bee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5ac:	e011      	b.n	800b5d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d012      	beq.n	800b5dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3324      	adds	r3, #36	; 0x24
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 fa64 	bl	800ba88 <xTaskRemoveFromEventList>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5c6:	f000 fb3d 	bl	800bc44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dce9      	bgt.n	800b5ae <prvUnlockQueue+0x16>
 800b5da:	e000      	b.n	800b5de <prvUnlockQueue+0x46>
					break;
 800b5dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	22ff      	movs	r2, #255	; 0xff
 800b5e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b5e6:	f000 fcb1 	bl	800bf4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5ea:	f000 fc7d 	bl	800bee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5f6:	e011      	b.n	800b61c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d012      	beq.n	800b626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3310      	adds	r3, #16
 800b604:	4618      	mov	r0, r3
 800b606:	f000 fa3f 	bl	800ba88 <xTaskRemoveFromEventList>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b610:	f000 fb18 	bl	800bc44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	3b01      	subs	r3, #1
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b61c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b620:	2b00      	cmp	r3, #0
 800b622:	dce9      	bgt.n	800b5f8 <prvUnlockQueue+0x60>
 800b624:	e000      	b.n	800b628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	22ff      	movs	r2, #255	; 0xff
 800b62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b630:	f000 fc8c 	bl	800bf4c <vPortExitCritical>
}
 800b634:	bf00      	nop
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b644:	f000 fc50 	bl	800bee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b650:	429a      	cmp	r2, r3
 800b652:	d102      	bne.n	800b65a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b654:	2301      	movs	r3, #1
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	e001      	b.n	800b65e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b65a:	2300      	movs	r3, #0
 800b65c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b65e:	f000 fc75 	bl	800bf4c <vPortExitCritical>

	return xReturn;
 800b662:	68fb      	ldr	r3, [r7, #12]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b670:	4b04      	ldr	r3, [pc, #16]	; (800b684 <vTaskSuspendAll+0x18>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3301      	adds	r3, #1
 800b676:	4a03      	ldr	r2, [pc, #12]	; (800b684 <vTaskSuspendAll+0x18>)
 800b678:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b67a:	bf00      	nop
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	2000028c 	.word	0x2000028c

0800b688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b68e:	2300      	movs	r3, #0
 800b690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b692:	2300      	movs	r3, #0
 800b694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b696:	4b42      	ldr	r3, [pc, #264]	; (800b7a0 <xTaskResumeAll+0x118>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10b      	bne.n	800b6b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	b672      	cpsid	i
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	b662      	cpsie	i
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	e7fe      	b.n	800b6b4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b6b6:	f000 fc17 	bl	800bee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b6ba:	4b39      	ldr	r3, [pc, #228]	; (800b7a0 <xTaskResumeAll+0x118>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	4a37      	ldr	r2, [pc, #220]	; (800b7a0 <xTaskResumeAll+0x118>)
 800b6c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6c4:	4b36      	ldr	r3, [pc, #216]	; (800b7a0 <xTaskResumeAll+0x118>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d161      	bne.n	800b790 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b6cc:	4b35      	ldr	r3, [pc, #212]	; (800b7a4 <xTaskResumeAll+0x11c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d05d      	beq.n	800b790 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6d4:	e02e      	b.n	800b734 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d6:	4b34      	ldr	r3, [pc, #208]	; (800b7a8 <xTaskResumeAll+0x120>)
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	3318      	adds	r3, #24
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff fd25 	bl	800b132 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff fd20 	bl	800b132 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	409a      	lsls	r2, r3
 800b6fa:	4b2c      	ldr	r3, [pc, #176]	; (800b7ac <xTaskResumeAll+0x124>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	4a2a      	ldr	r2, [pc, #168]	; (800b7ac <xTaskResumeAll+0x124>)
 800b702:	6013      	str	r3, [r2, #0]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b708:	4613      	mov	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4413      	add	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4a27      	ldr	r2, [pc, #156]	; (800b7b0 <xTaskResumeAll+0x128>)
 800b712:	441a      	add	r2, r3
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3304      	adds	r3, #4
 800b718:	4619      	mov	r1, r3
 800b71a:	4610      	mov	r0, r2
 800b71c:	f7ff fcac 	bl	800b078 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b724:	4b23      	ldr	r3, [pc, #140]	; (800b7b4 <xTaskResumeAll+0x12c>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d302      	bcc.n	800b734 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b72e:	4b22      	ldr	r3, [pc, #136]	; (800b7b8 <xTaskResumeAll+0x130>)
 800b730:	2201      	movs	r2, #1
 800b732:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b734:	4b1c      	ldr	r3, [pc, #112]	; (800b7a8 <xTaskResumeAll+0x120>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1cc      	bne.n	800b6d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b742:	f000 fa8b 	bl	800bc5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b746:	4b1d      	ldr	r3, [pc, #116]	; (800b7bc <xTaskResumeAll+0x134>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d010      	beq.n	800b774 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b752:	f000 f837 	bl	800b7c4 <xTaskIncrementTick>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b75c:	4b16      	ldr	r3, [pc, #88]	; (800b7b8 <xTaskResumeAll+0x130>)
 800b75e:	2201      	movs	r2, #1
 800b760:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3b01      	subs	r3, #1
 800b766:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1f1      	bne.n	800b752 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b76e:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <xTaskResumeAll+0x134>)
 800b770:	2200      	movs	r2, #0
 800b772:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b774:	4b10      	ldr	r3, [pc, #64]	; (800b7b8 <xTaskResumeAll+0x130>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d009      	beq.n	800b790 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b77c:	2301      	movs	r3, #1
 800b77e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b780:	4b0f      	ldr	r3, [pc, #60]	; (800b7c0 <xTaskResumeAll+0x138>)
 800b782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b790:	f000 fbdc 	bl	800bf4c <vPortExitCritical>

	return xAlreadyYielded;
 800b794:	68bb      	ldr	r3, [r7, #8]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	2000028c 	.word	0x2000028c
 800b7a4:	2000026c 	.word	0x2000026c
 800b7a8:	20000244 	.word	0x20000244
 800b7ac:	20000274 	.word	0x20000274
 800b7b0:	200001b0 	.word	0x200001b0
 800b7b4:	200001ac 	.word	0x200001ac
 800b7b8:	20000280 	.word	0x20000280
 800b7bc:	2000027c 	.word	0x2000027c
 800b7c0:	e000ed04 	.word	0xe000ed04

0800b7c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7ce:	4b4f      	ldr	r3, [pc, #316]	; (800b90c <xTaskIncrementTick+0x148>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f040 8089 	bne.w	800b8ea <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b7d8:	4b4d      	ldr	r3, [pc, #308]	; (800b910 <xTaskIncrementTick+0x14c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b7e0:	4a4b      	ldr	r2, [pc, #300]	; (800b910 <xTaskIncrementTick+0x14c>)
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d121      	bne.n	800b830 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b7ec:	4b49      	ldr	r3, [pc, #292]	; (800b914 <xTaskIncrementTick+0x150>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00b      	beq.n	800b80e <xTaskIncrementTick+0x4a>
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	b672      	cpsid	i
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	b662      	cpsie	i
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	e7fe      	b.n	800b80c <xTaskIncrementTick+0x48>
 800b80e:	4b41      	ldr	r3, [pc, #260]	; (800b914 <xTaskIncrementTick+0x150>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	4b40      	ldr	r3, [pc, #256]	; (800b918 <xTaskIncrementTick+0x154>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a3e      	ldr	r2, [pc, #248]	; (800b914 <xTaskIncrementTick+0x150>)
 800b81a:	6013      	str	r3, [r2, #0]
 800b81c:	4a3e      	ldr	r2, [pc, #248]	; (800b918 <xTaskIncrementTick+0x154>)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6013      	str	r3, [r2, #0]
 800b822:	4b3e      	ldr	r3, [pc, #248]	; (800b91c <xTaskIncrementTick+0x158>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3301      	adds	r3, #1
 800b828:	4a3c      	ldr	r2, [pc, #240]	; (800b91c <xTaskIncrementTick+0x158>)
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	f000 fa16 	bl	800bc5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b830:	4b3b      	ldr	r3, [pc, #236]	; (800b920 <xTaskIncrementTick+0x15c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	429a      	cmp	r2, r3
 800b838:	d348      	bcc.n	800b8cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b83a:	4b36      	ldr	r3, [pc, #216]	; (800b914 <xTaskIncrementTick+0x150>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d104      	bne.n	800b84e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b844:	4b36      	ldr	r3, [pc, #216]	; (800b920 <xTaskIncrementTick+0x15c>)
 800b846:	f04f 32ff 	mov.w	r2, #4294967295
 800b84a:	601a      	str	r2, [r3, #0]
					break;
 800b84c:	e03e      	b.n	800b8cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b84e:	4b31      	ldr	r3, [pc, #196]	; (800b914 <xTaskIncrementTick+0x150>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	429a      	cmp	r2, r3
 800b864:	d203      	bcs.n	800b86e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b866:	4a2e      	ldr	r2, [pc, #184]	; (800b920 <xTaskIncrementTick+0x15c>)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b86c:	e02e      	b.n	800b8cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	3304      	adds	r3, #4
 800b872:	4618      	mov	r0, r3
 800b874:	f7ff fc5d 	bl	800b132 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d004      	beq.n	800b88a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	3318      	adds	r3, #24
 800b884:	4618      	mov	r0, r3
 800b886:	f7ff fc54 	bl	800b132 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88e:	2201      	movs	r2, #1
 800b890:	409a      	lsls	r2, r3
 800b892:	4b24      	ldr	r3, [pc, #144]	; (800b924 <xTaskIncrementTick+0x160>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4313      	orrs	r3, r2
 800b898:	4a22      	ldr	r2, [pc, #136]	; (800b924 <xTaskIncrementTick+0x160>)
 800b89a:	6013      	str	r3, [r2, #0]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4a1f      	ldr	r2, [pc, #124]	; (800b928 <xTaskIncrementTick+0x164>)
 800b8aa:	441a      	add	r2, r3
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	f7ff fbe0 	bl	800b078 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8bc:	4b1b      	ldr	r3, [pc, #108]	; (800b92c <xTaskIncrementTick+0x168>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d3b9      	bcc.n	800b83a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ca:	e7b6      	b.n	800b83a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b8cc:	4b17      	ldr	r3, [pc, #92]	; (800b92c <xTaskIncrementTick+0x168>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d2:	4915      	ldr	r1, [pc, #84]	; (800b928 <xTaskIncrementTick+0x164>)
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	440b      	add	r3, r1
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d907      	bls.n	800b8f4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	617b      	str	r3, [r7, #20]
 800b8e8:	e004      	b.n	800b8f4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b8ea:	4b11      	ldr	r3, [pc, #68]	; (800b930 <xTaskIncrementTick+0x16c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	4a0f      	ldr	r2, [pc, #60]	; (800b930 <xTaskIncrementTick+0x16c>)
 800b8f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b8f4:	4b0f      	ldr	r3, [pc, #60]	; (800b934 <xTaskIncrementTick+0x170>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b900:	697b      	ldr	r3, [r7, #20]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	2000028c 	.word	0x2000028c
 800b910:	20000270 	.word	0x20000270
 800b914:	2000023c 	.word	0x2000023c
 800b918:	20000240 	.word	0x20000240
 800b91c:	20000284 	.word	0x20000284
 800b920:	20000288 	.word	0x20000288
 800b924:	20000274 	.word	0x20000274
 800b928:	200001b0 	.word	0x200001b0
 800b92c:	200001ac 	.word	0x200001ac
 800b930:	2000027c 	.word	0x2000027c
 800b934:	20000280 	.word	0x20000280

0800b938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b088      	sub	sp, #32
 800b93c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b93e:	4b3a      	ldr	r3, [pc, #232]	; (800ba28 <vTaskSwitchContext+0xf0>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d003      	beq.n	800b94e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b946:	4b39      	ldr	r3, [pc, #228]	; (800ba2c <vTaskSwitchContext+0xf4>)
 800b948:	2201      	movs	r2, #1
 800b94a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b94c:	e067      	b.n	800ba1e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800b94e:	4b37      	ldr	r3, [pc, #220]	; (800ba2c <vTaskSwitchContext+0xf4>)
 800b950:	2200      	movs	r2, #0
 800b952:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b954:	4b36      	ldr	r3, [pc, #216]	; (800ba30 <vTaskSwitchContext+0xf8>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b95a:	61fb      	str	r3, [r7, #28]
 800b95c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	69ba      	ldr	r2, [r7, #24]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d111      	bne.n	800b990 <vTaskSwitchContext+0x58>
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	3304      	adds	r3, #4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	69ba      	ldr	r2, [r7, #24]
 800b974:	429a      	cmp	r2, r3
 800b976:	d10b      	bne.n	800b990 <vTaskSwitchContext+0x58>
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	3308      	adds	r3, #8
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	429a      	cmp	r2, r3
 800b982:	d105      	bne.n	800b990 <vTaskSwitchContext+0x58>
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	330c      	adds	r3, #12
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	69ba      	ldr	r2, [r7, #24]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d008      	beq.n	800b9a2 <vTaskSwitchContext+0x6a>
 800b990:	4b27      	ldr	r3, [pc, #156]	; (800ba30 <vTaskSwitchContext+0xf8>)
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	4b26      	ldr	r3, [pc, #152]	; (800ba30 <vTaskSwitchContext+0xf8>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3334      	adds	r3, #52	; 0x34
 800b99a:	4619      	mov	r1, r3
 800b99c:	4610      	mov	r0, r2
 800b99e:	f7f4 fdb7 	bl	8000510 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9a2:	4b24      	ldr	r3, [pc, #144]	; (800ba34 <vTaskSwitchContext+0xfc>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	fab3 f383 	clz	r3, r3
 800b9ae:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b9b0:	7afb      	ldrb	r3, [r7, #11]
 800b9b2:	f1c3 031f 	rsb	r3, r3, #31
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	491f      	ldr	r1, [pc, #124]	; (800ba38 <vTaskSwitchContext+0x100>)
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	440b      	add	r3, r1
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10b      	bne.n	800b9e4 <vTaskSwitchContext+0xac>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	b672      	cpsid	i
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	b662      	cpsie	i
 800b9e0:	607b      	str	r3, [r7, #4]
 800b9e2:	e7fe      	b.n	800b9e2 <vTaskSwitchContext+0xaa>
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4a12      	ldr	r2, [pc, #72]	; (800ba38 <vTaskSwitchContext+0x100>)
 800b9f0:	4413      	add	r3, r2
 800b9f2:	613b      	str	r3, [r7, #16]
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	605a      	str	r2, [r3, #4]
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	685a      	ldr	r2, [r3, #4]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	3308      	adds	r3, #8
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d104      	bne.n	800ba14 <vTaskSwitchContext+0xdc>
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	605a      	str	r2, [r3, #4]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	4a05      	ldr	r2, [pc, #20]	; (800ba30 <vTaskSwitchContext+0xf8>)
 800ba1c:	6013      	str	r3, [r2, #0]
}
 800ba1e:	bf00      	nop
 800ba20:	3720      	adds	r7, #32
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	2000028c 	.word	0x2000028c
 800ba2c:	20000280 	.word	0x20000280
 800ba30:	200001ac 	.word	0x200001ac
 800ba34:	20000274 	.word	0x20000274
 800ba38:	200001b0 	.word	0x200001b0

0800ba3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10b      	bne.n	800ba64 <vTaskPlaceOnEventList+0x28>
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	b672      	cpsid	i
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	b662      	cpsie	i
 800ba60:	60fb      	str	r3, [r7, #12]
 800ba62:	e7fe      	b.n	800ba62 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba64:	4b07      	ldr	r3, [pc, #28]	; (800ba84 <vTaskPlaceOnEventList+0x48>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3318      	adds	r3, #24
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff fb27 	bl	800b0c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba72:	2101      	movs	r1, #1
 800ba74:	6838      	ldr	r0, [r7, #0]
 800ba76:	f000 f9b7 	bl	800bde8 <prvAddCurrentTaskToDelayedList>
}
 800ba7a:	bf00      	nop
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	200001ac 	.word	0x200001ac

0800ba88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10b      	bne.n	800bab6 <xTaskRemoveFromEventList+0x2e>
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	b672      	cpsid	i
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	b662      	cpsie	i
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	e7fe      	b.n	800bab4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	3318      	adds	r3, #24
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff fb39 	bl	800b132 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bac0:	4b1d      	ldr	r3, [pc, #116]	; (800bb38 <xTaskRemoveFromEventList+0xb0>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d11c      	bne.n	800bb02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	3304      	adds	r3, #4
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff fb30 	bl	800b132 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad6:	2201      	movs	r2, #1
 800bad8:	409a      	lsls	r2, r3
 800bada:	4b18      	ldr	r3, [pc, #96]	; (800bb3c <xTaskRemoveFromEventList+0xb4>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4313      	orrs	r3, r2
 800bae0:	4a16      	ldr	r2, [pc, #88]	; (800bb3c <xTaskRemoveFromEventList+0xb4>)
 800bae2:	6013      	str	r3, [r2, #0]
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae8:	4613      	mov	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4a13      	ldr	r2, [pc, #76]	; (800bb40 <xTaskRemoveFromEventList+0xb8>)
 800baf2:	441a      	add	r2, r3
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	3304      	adds	r3, #4
 800baf8:	4619      	mov	r1, r3
 800bafa:	4610      	mov	r0, r2
 800bafc:	f7ff fabc 	bl	800b078 <vListInsertEnd>
 800bb00:	e005      	b.n	800bb0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	3318      	adds	r3, #24
 800bb06:	4619      	mov	r1, r3
 800bb08:	480e      	ldr	r0, [pc, #56]	; (800bb44 <xTaskRemoveFromEventList+0xbc>)
 800bb0a:	f7ff fab5 	bl	800b078 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb12:	4b0d      	ldr	r3, [pc, #52]	; (800bb48 <xTaskRemoveFromEventList+0xc0>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d905      	bls.n	800bb28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb20:	4b0a      	ldr	r3, [pc, #40]	; (800bb4c <xTaskRemoveFromEventList+0xc4>)
 800bb22:	2201      	movs	r2, #1
 800bb24:	601a      	str	r2, [r3, #0]
 800bb26:	e001      	b.n	800bb2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb2c:	697b      	ldr	r3, [r7, #20]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2000028c 	.word	0x2000028c
 800bb3c:	20000274 	.word	0x20000274
 800bb40:	200001b0 	.word	0x200001b0
 800bb44:	20000244 	.word	0x20000244
 800bb48:	200001ac 	.word	0x200001ac
 800bb4c:	20000280 	.word	0x20000280

0800bb50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb58:	4b06      	ldr	r3, [pc, #24]	; (800bb74 <vTaskInternalSetTimeOutState+0x24>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb60:	4b05      	ldr	r3, [pc, #20]	; (800bb78 <vTaskInternalSetTimeOutState+0x28>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	605a      	str	r2, [r3, #4]
}
 800bb68:	bf00      	nop
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	20000284 	.word	0x20000284
 800bb78:	20000270 	.word	0x20000270

0800bb7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10b      	bne.n	800bba4 <xTaskCheckForTimeOut+0x28>
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	b672      	cpsid	i
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	b662      	cpsie	i
 800bba0:	613b      	str	r3, [r7, #16]
 800bba2:	e7fe      	b.n	800bba2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10b      	bne.n	800bbc2 <xTaskCheckForTimeOut+0x46>
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	b672      	cpsid	i
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	b662      	cpsie	i
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	e7fe      	b.n	800bbc0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800bbc2:	f000 f991 	bl	800bee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbc6:	4b1d      	ldr	r3, [pc, #116]	; (800bc3c <xTaskCheckForTimeOut+0xc0>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	69ba      	ldr	r2, [r7, #24]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbde:	d102      	bne.n	800bbe6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	61fb      	str	r3, [r7, #28]
 800bbe4:	e023      	b.n	800bc2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	4b15      	ldr	r3, [pc, #84]	; (800bc40 <xTaskCheckForTimeOut+0xc4>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d007      	beq.n	800bc02 <xTaskCheckForTimeOut+0x86>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	69ba      	ldr	r2, [r7, #24]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d302      	bcc.n	800bc02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	61fb      	str	r3, [r7, #28]
 800bc00:	e015      	b.n	800bc2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d20b      	bcs.n	800bc24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	1ad2      	subs	r2, r2, r3
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff ff99 	bl	800bb50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	61fb      	str	r3, [r7, #28]
 800bc22:	e004      	b.n	800bc2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2200      	movs	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc2e:	f000 f98d 	bl	800bf4c <vPortExitCritical>

	return xReturn;
 800bc32:	69fb      	ldr	r3, [r7, #28]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3720      	adds	r7, #32
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	20000270 	.word	0x20000270
 800bc40:	20000284 	.word	0x20000284

0800bc44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc48:	4b03      	ldr	r3, [pc, #12]	; (800bc58 <vTaskMissedYield+0x14>)
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	601a      	str	r2, [r3, #0]
}
 800bc4e:	bf00      	nop
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	20000280 	.word	0x20000280

0800bc5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc62:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <prvResetNextTaskUnblockTime+0x38>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d104      	bne.n	800bc76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc6c:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <prvResetNextTaskUnblockTime+0x3c>)
 800bc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc74:	e008      	b.n	800bc88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc76:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <prvResetNextTaskUnblockTime+0x38>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	4a04      	ldr	r2, [pc, #16]	; (800bc98 <prvResetNextTaskUnblockTime+0x3c>)
 800bc86:	6013      	str	r3, [r2, #0]
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	2000023c 	.word	0x2000023c
 800bc98:	20000288 	.word	0x20000288

0800bc9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bca2:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <xTaskGetSchedulerState+0x34>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d102      	bne.n	800bcb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	607b      	str	r3, [r7, #4]
 800bcae:	e008      	b.n	800bcc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcb0:	4b08      	ldr	r3, [pc, #32]	; (800bcd4 <xTaskGetSchedulerState+0x38>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d102      	bne.n	800bcbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcb8:	2302      	movs	r3, #2
 800bcba:	607b      	str	r3, [r7, #4]
 800bcbc:	e001      	b.n	800bcc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcc2:	687b      	ldr	r3, [r7, #4]
	}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	20000278 	.word	0x20000278
 800bcd4:	2000028c 	.word	0x2000028c

0800bcd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bce4:	2300      	movs	r3, #0
 800bce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d070      	beq.n	800bdd0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcee:	4b3b      	ldr	r3, [pc, #236]	; (800bddc <xTaskPriorityDisinherit+0x104>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d00b      	beq.n	800bd10 <xTaskPriorityDisinherit+0x38>
 800bcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfc:	b672      	cpsid	i
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	b662      	cpsie	i
 800bd0c:	60fb      	str	r3, [r7, #12]
 800bd0e:	e7fe      	b.n	800bd0e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10b      	bne.n	800bd30 <xTaskPriorityDisinherit+0x58>
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	b672      	cpsid	i
 800bd1e:	f383 8811 	msr	BASEPRI, r3
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	f3bf 8f4f 	dsb	sy
 800bd2a:	b662      	cpsie	i
 800bd2c:	60bb      	str	r3, [r7, #8]
 800bd2e:	e7fe      	b.n	800bd2e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd34:	1e5a      	subs	r2, r3, #1
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d044      	beq.n	800bdd0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d140      	bne.n	800bdd0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	3304      	adds	r3, #4
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff f9ed 	bl	800b132 <uxListRemove>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d115      	bne.n	800bd8a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd62:	491f      	ldr	r1, [pc, #124]	; (800bde0 <xTaskPriorityDisinherit+0x108>)
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	440b      	add	r3, r1
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <xTaskPriorityDisinherit+0xb2>
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd78:	2201      	movs	r2, #1
 800bd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7e:	43da      	mvns	r2, r3
 800bd80:	4b18      	ldr	r3, [pc, #96]	; (800bde4 <xTaskPriorityDisinherit+0x10c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4013      	ands	r3, r2
 800bd86:	4a17      	ldr	r2, [pc, #92]	; (800bde4 <xTaskPriorityDisinherit+0x10c>)
 800bd88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd96:	f1c3 0207 	rsb	r2, r3, #7
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda2:	2201      	movs	r2, #1
 800bda4:	409a      	lsls	r2, r3
 800bda6:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <xTaskPriorityDisinherit+0x10c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	4a0d      	ldr	r2, [pc, #52]	; (800bde4 <xTaskPriorityDisinherit+0x10c>)
 800bdae:	6013      	str	r3, [r2, #0]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	4413      	add	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4a08      	ldr	r2, [pc, #32]	; (800bde0 <xTaskPriorityDisinherit+0x108>)
 800bdbe:	441a      	add	r2, r3
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	4610      	mov	r0, r2
 800bdc8:	f7ff f956 	bl	800b078 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdd0:	697b      	ldr	r3, [r7, #20]
	}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3718      	adds	r7, #24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	200001ac 	.word	0x200001ac
 800bde0:	200001b0 	.word	0x200001b0
 800bde4:	20000274 	.word	0x20000274

0800bde8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdf2:	4b29      	ldr	r3, [pc, #164]	; (800be98 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdf8:	4b28      	ldr	r3, [pc, #160]	; (800be9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff f997 	bl	800b132 <uxListRemove>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10b      	bne.n	800be22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800be0a:	4b24      	ldr	r3, [pc, #144]	; (800be9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	2201      	movs	r2, #1
 800be12:	fa02 f303 	lsl.w	r3, r2, r3
 800be16:	43da      	mvns	r2, r3
 800be18:	4b21      	ldr	r3, [pc, #132]	; (800bea0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4013      	ands	r3, r2
 800be1e:	4a20      	ldr	r2, [pc, #128]	; (800bea0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800be20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be28:	d10a      	bne.n	800be40 <prvAddCurrentTaskToDelayedList+0x58>
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d007      	beq.n	800be40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be30:	4b1a      	ldr	r3, [pc, #104]	; (800be9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3304      	adds	r3, #4
 800be36:	4619      	mov	r1, r3
 800be38:	481a      	ldr	r0, [pc, #104]	; (800bea4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800be3a:	f7ff f91d 	bl	800b078 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be3e:	e026      	b.n	800be8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4413      	add	r3, r2
 800be46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be48:	4b14      	ldr	r3, [pc, #80]	; (800be9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68ba      	ldr	r2, [r7, #8]
 800be4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	429a      	cmp	r2, r3
 800be56:	d209      	bcs.n	800be6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be58:	4b13      	ldr	r3, [pc, #76]	; (800bea8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	4b0f      	ldr	r3, [pc, #60]	; (800be9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3304      	adds	r3, #4
 800be62:	4619      	mov	r1, r3
 800be64:	4610      	mov	r0, r2
 800be66:	f7ff f92b 	bl	800b0c0 <vListInsert>
}
 800be6a:	e010      	b.n	800be8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be6c:	4b0f      	ldr	r3, [pc, #60]	; (800beac <prvAddCurrentTaskToDelayedList+0xc4>)
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3304      	adds	r3, #4
 800be76:	4619      	mov	r1, r3
 800be78:	4610      	mov	r0, r2
 800be7a:	f7ff f921 	bl	800b0c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be7e:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	429a      	cmp	r2, r3
 800be86:	d202      	bcs.n	800be8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be88:	4a09      	ldr	r2, [pc, #36]	; (800beb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	6013      	str	r3, [r2, #0]
}
 800be8e:	bf00      	nop
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20000270 	.word	0x20000270
 800be9c:	200001ac 	.word	0x200001ac
 800bea0:	20000274 	.word	0x20000274
 800bea4:	20000258 	.word	0x20000258
 800bea8:	20000240 	.word	0x20000240
 800beac:	2000023c 	.word	0x2000023c
 800beb0:	20000288 	.word	0x20000288
	...

0800bec0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bec0:	4b07      	ldr	r3, [pc, #28]	; (800bee0 <pxCurrentTCBConst2>)
 800bec2:	6819      	ldr	r1, [r3, #0]
 800bec4:	6808      	ldr	r0, [r1, #0]
 800bec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beca:	f380 8809 	msr	PSP, r0
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f04f 0000 	mov.w	r0, #0
 800bed6:	f380 8811 	msr	BASEPRI, r0
 800beda:	4770      	bx	lr
 800bedc:	f3af 8000 	nop.w

0800bee0 <pxCurrentTCBConst2>:
 800bee0:	200001ac 	.word	0x200001ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop

0800bee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	b672      	cpsid	i
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	b662      	cpsie	i
 800bf02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf04:	4b0f      	ldr	r3, [pc, #60]	; (800bf44 <vPortEnterCritical+0x5c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	4a0e      	ldr	r2, [pc, #56]	; (800bf44 <vPortEnterCritical+0x5c>)
 800bf0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf0e:	4b0d      	ldr	r3, [pc, #52]	; (800bf44 <vPortEnterCritical+0x5c>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d110      	bne.n	800bf38 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf16:	4b0c      	ldr	r3, [pc, #48]	; (800bf48 <vPortEnterCritical+0x60>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00b      	beq.n	800bf38 <vPortEnterCritical+0x50>
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	b672      	cpsid	i
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	b662      	cpsie	i
 800bf34:	603b      	str	r3, [r7, #0]
 800bf36:	e7fe      	b.n	800bf36 <vPortEnterCritical+0x4e>
	}
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	20000018 	.word	0x20000018
 800bf48:	e000ed04 	.word	0xe000ed04

0800bf4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf52:	4b12      	ldr	r3, [pc, #72]	; (800bf9c <vPortExitCritical+0x50>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d10b      	bne.n	800bf72 <vPortExitCritical+0x26>
 800bf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5e:	b672      	cpsid	i
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	b662      	cpsie	i
 800bf6e:	607b      	str	r3, [r7, #4]
 800bf70:	e7fe      	b.n	800bf70 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800bf72:	4b0a      	ldr	r3, [pc, #40]	; (800bf9c <vPortExitCritical+0x50>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	3b01      	subs	r3, #1
 800bf78:	4a08      	ldr	r2, [pc, #32]	; (800bf9c <vPortExitCritical+0x50>)
 800bf7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf7c:	4b07      	ldr	r3, [pc, #28]	; (800bf9c <vPortExitCritical+0x50>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d104      	bne.n	800bf8e <vPortExitCritical+0x42>
 800bf84:	2300      	movs	r3, #0
 800bf86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf8e:	bf00      	nop
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	20000018 	.word	0x20000018

0800bfa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfa0:	f3ef 8009 	mrs	r0, PSP
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	4b15      	ldr	r3, [pc, #84]	; (800c000 <pxCurrentTCBConst>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	f01e 0f10 	tst.w	lr, #16
 800bfb0:	bf08      	it	eq
 800bfb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	6010      	str	r0, [r2, #0]
 800bfbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfc4:	b672      	cpsid	i
 800bfc6:	f380 8811 	msr	BASEPRI, r0
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	b662      	cpsie	i
 800bfd4:	f7ff fcb0 	bl	800b938 <vTaskSwitchContext>
 800bfd8:	f04f 0000 	mov.w	r0, #0
 800bfdc:	f380 8811 	msr	BASEPRI, r0
 800bfe0:	bc09      	pop	{r0, r3}
 800bfe2:	6819      	ldr	r1, [r3, #0]
 800bfe4:	6808      	ldr	r0, [r1, #0]
 800bfe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfea:	f01e 0f10 	tst.w	lr, #16
 800bfee:	bf08      	it	eq
 800bff0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bff4:	f380 8809 	msr	PSP, r0
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop

0800c000 <pxCurrentTCBConst>:
 800c000:	200001ac 	.word	0x200001ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c004:	bf00      	nop
 800c006:	bf00      	nop

0800c008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	b672      	cpsid	i
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	b662      	cpsie	i
 800c022:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c024:	f7ff fbce 	bl	800b7c4 <xTaskIncrementTick>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d003      	beq.n	800c036 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c02e:	4b06      	ldr	r3, [pc, #24]	; (800c048 <SysTick_Handler+0x40>)
 800c030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	2300      	movs	r3, #0
 800c038:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c052:	f3ef 8305 	mrs	r3, IPSR
 800c056:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2b0f      	cmp	r3, #15
 800c05c:	d915      	bls.n	800c08a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c05e:	4a18      	ldr	r2, [pc, #96]	; (800c0c0 <vPortValidateInterruptPriority+0x74>)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4413      	add	r3, r2
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c068:	4b16      	ldr	r3, [pc, #88]	; (800c0c4 <vPortValidateInterruptPriority+0x78>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	7afa      	ldrb	r2, [r7, #11]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d20b      	bcs.n	800c08a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	b672      	cpsid	i
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	b662      	cpsie	i
 800c086:	607b      	str	r3, [r7, #4]
 800c088:	e7fe      	b.n	800c088 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c08a:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <vPortValidateInterruptPriority+0x7c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c092:	4b0e      	ldr	r3, [pc, #56]	; (800c0cc <vPortValidateInterruptPriority+0x80>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d90b      	bls.n	800c0b2 <vPortValidateInterruptPriority+0x66>
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	b672      	cpsid	i
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	b662      	cpsie	i
 800c0ae:	603b      	str	r3, [r7, #0]
 800c0b0:	e7fe      	b.n	800c0b0 <vPortValidateInterruptPriority+0x64>
	}
 800c0b2:	bf00      	nop
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	e000e3f0 	.word	0xe000e3f0
 800c0c4:	20000290 	.word	0x20000290
 800c0c8:	e000ed0c 	.word	0xe000ed0c
 800c0cc:	20000294 	.word	0x20000294

0800c0d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe fe9c 	bl	800ae1c <USBH_LL_IncTimer>
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fee0 	bl	800aec0 <USBH_LL_Connect>
}
 800c100:	bf00      	nop
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe fef5 	bl	800af06 <USBH_LL_Disconnect>
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70fb      	strb	r3, [r7, #3]
 800c130:	4613      	mov	r3, r2
 800c132:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe ff15 	bl	800af6a <USBH_LL_NotifyURBChange>
#endif
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c156:	4618      	mov	r0, r3
 800c158:	f7fe fe8a 	bl	800ae70 <USBH_LL_PortEnabled>
}
 800c15c:	bf00      	nop
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c172:	4618      	mov	r0, r3
 800c174:	f7fe fe96 	bl	800aea4 <USBH_LL_PortDisabled>
}
 800c178:	bf00      	nop
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c196:	4618      	mov	r0, r3
 800c198:	f7f8 ff3d 	bl	8005016 <HAL_HCD_Stop>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1a0:	7bfb      	ldrb	r3, [r7, #15]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 f808 	bl	800c1b8 <USBH_Get_USB_Status>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	4603      	mov	r3, r0
 800c1c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1c6:	79fb      	ldrb	r3, [r7, #7]
 800c1c8:	2b03      	cmp	r3, #3
 800c1ca:	d817      	bhi.n	800c1fc <USBH_Get_USB_Status+0x44>
 800c1cc:	a201      	add	r2, pc, #4	; (adr r2, 800c1d4 <USBH_Get_USB_Status+0x1c>)
 800c1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d2:	bf00      	nop
 800c1d4:	0800c1e5 	.word	0x0800c1e5
 800c1d8:	0800c1eb 	.word	0x0800c1eb
 800c1dc:	0800c1f1 	.word	0x0800c1f1
 800c1e0:	0800c1f7 	.word	0x0800c1f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1e8:	e00b      	b.n	800c202 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c1ea:	2302      	movs	r3, #2
 800c1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ee:	e008      	b.n	800c202 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1f4:	e005      	b.n	800c202 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1fa:	e002      	b.n	800c202 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c200:	bf00      	nop
  }
  return usb_status;
 800c202:	7bfb      	ldrb	r3, [r7, #15]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <__libc_init_array>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	4e0d      	ldr	r6, [pc, #52]	; (800c248 <__libc_init_array+0x38>)
 800c214:	4c0d      	ldr	r4, [pc, #52]	; (800c24c <__libc_init_array+0x3c>)
 800c216:	1ba4      	subs	r4, r4, r6
 800c218:	10a4      	asrs	r4, r4, #2
 800c21a:	2500      	movs	r5, #0
 800c21c:	42a5      	cmp	r5, r4
 800c21e:	d109      	bne.n	800c234 <__libc_init_array+0x24>
 800c220:	4e0b      	ldr	r6, [pc, #44]	; (800c250 <__libc_init_array+0x40>)
 800c222:	4c0c      	ldr	r4, [pc, #48]	; (800c254 <__libc_init_array+0x44>)
 800c224:	f000 f82c 	bl	800c280 <_init>
 800c228:	1ba4      	subs	r4, r4, r6
 800c22a:	10a4      	asrs	r4, r4, #2
 800c22c:	2500      	movs	r5, #0
 800c22e:	42a5      	cmp	r5, r4
 800c230:	d105      	bne.n	800c23e <__libc_init_array+0x2e>
 800c232:	bd70      	pop	{r4, r5, r6, pc}
 800c234:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c238:	4798      	blx	r3
 800c23a:	3501      	adds	r5, #1
 800c23c:	e7ee      	b.n	800c21c <__libc_init_array+0xc>
 800c23e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c242:	4798      	blx	r3
 800c244:	3501      	adds	r5, #1
 800c246:	e7f2      	b.n	800c22e <__libc_init_array+0x1e>
 800c248:	0800dd88 	.word	0x0800dd88
 800c24c:	0800dd88 	.word	0x0800dd88
 800c250:	0800dd88 	.word	0x0800dd88
 800c254:	0800dd8c 	.word	0x0800dd8c

0800c258 <memcpy>:
 800c258:	b510      	push	{r4, lr}
 800c25a:	1e43      	subs	r3, r0, #1
 800c25c:	440a      	add	r2, r1
 800c25e:	4291      	cmp	r1, r2
 800c260:	d100      	bne.n	800c264 <memcpy+0xc>
 800c262:	bd10      	pop	{r4, pc}
 800c264:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c26c:	e7f7      	b.n	800c25e <memcpy+0x6>

0800c26e <memset>:
 800c26e:	4402      	add	r2, r0
 800c270:	4603      	mov	r3, r0
 800c272:	4293      	cmp	r3, r2
 800c274:	d100      	bne.n	800c278 <memset+0xa>
 800c276:	4770      	bx	lr
 800c278:	f803 1b01 	strb.w	r1, [r3], #1
 800c27c:	e7f9      	b.n	800c272 <memset+0x4>
	...

0800c280 <_init>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	bf00      	nop
 800c284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c286:	bc08      	pop	{r3}
 800c288:	469e      	mov	lr, r3
 800c28a:	4770      	bx	lr

0800c28c <_fini>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	bf00      	nop
 800c290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c292:	bc08      	pop	{r3}
 800c294:	469e      	mov	lr, r3
 800c296:	4770      	bx	lr
