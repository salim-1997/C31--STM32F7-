
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cec  08012fd4  08012fd4  00022fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cc0  08015cc0  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  08015cc0  08015cc0  00025cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015cc8  08015cc8  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015cc8  08015cc8  00025cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ccc  08015ccc  00025ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08015cd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f3d8  200000b0  08015d80  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f488  08015d80  0003f488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004547f  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b42  00000000  00000000  0007555f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003100  00000000  00000000  0007d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002da0  00000000  00000000  000801a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035893  00000000  00000000  00082f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f506  00000000  00000000  000b87db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00129bec  00000000  00000000  000e7ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002118cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d690  00000000  00000000  00211948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012fbc 	.word	0x08012fbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08012fbc 	.word	0x08012fbc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <StartTask1>:
void BSP_AUDIO_IN_Error_CallBack(void)
{

}
void StartTask1(void *argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  printf("\n This is the first task being displayed \n ");
 80005ec:	4801      	ldr	r0, [pc, #4]	; (80005f4 <StartTask1+0x10>)
 80005ee:	f011 fea9 	bl	8012344 <iprintf>
 80005f2:	e7fb      	b.n	80005ec <StartTask1+0x8>
 80005f4:	08012ff0 	.word	0x08012ff0

080005f8 <StartTask2>:
  }

}
void StartTask2(void *argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
   /* Infinite loop */
  for(;;)
  {
	  printf("\n Hier wird die zweite Task angezeigt \n ");;
 8000600:	4801      	ldr	r0, [pc, #4]	; (8000608 <StartTask2+0x10>)
 8000602:	f011 fe9f 	bl	8012344 <iprintf>
 8000606:	e7fb      	b.n	8000600 <StartTask2+0x8>
 8000608:	0801301c 	.word	0x0801301c

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 8000610:	4b3a      	ldr	r3, [pc, #232]	; (80006fc <main+0xf0>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	4a39      	ldr	r2, [pc, #228]	; (80006fc <main+0xf0>)
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f003 f9b2 	bl	8003984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f888 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f001 f862 	bl	80016ec <MX_GPIO_Init>
  MX_ADC3_Init();
 8000628:	f000 f942 	bl	80008b0 <MX_ADC3_Init>
  MX_CRC_Init();
 800062c:	f000 f992 	bl	8000954 <MX_CRC_Init>
  MX_DCMI_Init();
 8000630:	f000 f9b2 	bl	8000998 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000634:	f000 f9e4 	bl	8000a00 <MX_DMA2D_Init>
  MX_ETH_Init();
 8000638:	f000 fa14 	bl	8000a64 <MX_ETH_Init>
  MX_FMC_Init();
 800063c:	f001 f806 	bl	800164c <MX_FMC_Init>
  MX_I2C1_Init();
 8000640:	f000 fa18 	bl	8000a74 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000644:	f000 fa56 	bl	8000af4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000648:	f000 fa94 	bl	8000b74 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800064c:	f000 fb48 	bl	8000ce0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000650:	f000 fb72 	bl	8000d38 <MX_RTC_Init>
  MX_SAI2_Init();
 8000654:	f000 fc16 	bl	8000e84 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000658:	f000 fcbc 	bl	8000fd4 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800065c:	f000 fcea 	bl	8001034 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000660:	f000 fd94 	bl	800118c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000664:	f000 fe08 	bl	8001278 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000668:	f000 fe7e 	bl	8001368 <MX_TIM5_Init>
  MX_TIM8_Init();
 800066c:	f000 fef4 	bl	8001458 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000670:	f000 ff46 	bl	8001500 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000674:	f000 ff8a 	bl	800158c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000678:	f000 ffb8 	bl	80015ec <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800067c:	f002 fa6e 	bl	8002b5c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000680:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000684:	2000      	movs	r0, #0
 8000686:	f002 fb01 	bl	8002c8c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 800068a:	481d      	ldr	r0, [pc, #116]	; (8000700 <main+0xf4>)
 800068c:	f002 fbc0 	bl	8002e10 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000690:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000694:	f002 fb5a 	bl	8002d4c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000698:	4819      	ldr	r0, [pc, #100]	; (8000700 <main+0xf4>)
 800069a:	f002 fb6f 	bl	8002d7c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 800069e:	f002 fae1 	bl	8002c64 <BSP_LCD_GetYSize>
 80006a2:	4603      	mov	r3, r0
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	b299      	uxth	r1, r3
 80006a8:	2301      	movs	r3, #1
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <main+0xf8>)
 80006ac:	2000      	movs	r0, #0
 80006ae:	f002 fc1b 	bl	8002ee8 <BSP_LCD_DisplayStringAt>


  LCD_LOG_Init();
 80006b2:	f011 fb1d 	bl	8011cf0 <LCD_LOG_Init>
  LCD_LOG_SetHeader("Header");
 80006b6:	4814      	ldr	r0, [pc, #80]	; (8000708 <main+0xfc>)
 80006b8:	f011 fb64 	bl	8011d84 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter("Footer");
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <main+0x100>)
 80006be:	f011 fb9d 	bl	8011dfc <LCD_LOG_SetFooter>
}
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c2:	f00e f83b 	bl	800e73c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <main+0x104>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <main+0x108>)
 80006cc:	f00e f8a0 	bl	800e810 <osThreadNew>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <main+0x10c>)
 80006d4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  task1Handle = osThreadNew(StartTask1, NULL, &task1_attributes);
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <main+0x110>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <main+0x114>)
 80006dc:	f00e f898 	bl	800e810 <osThreadNew>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <main+0x118>)
 80006e4:	601a      	str	r2, [r3, #0]
  task2Handle = osThreadNew(StartTask2, NULL, &task2_attributes);
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <main+0x11c>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4810      	ldr	r0, [pc, #64]	; (800072c <main+0x120>)
 80006ec:	f00e f890 	bl	800e810 <osThreadNew>
 80006f0:	4602      	mov	r2, r0
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <main+0x124>)
 80006f4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f6:	f00e f855 	bl	800e7a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <main+0xee>
 80006fc:	e0042000 	.word	0xe0042000
 8000700:	ff0000ff 	.word	0xff0000ff
 8000704:	08013048 	.word	0x08013048
 8000708:	08013058 	.word	0x08013058
 800070c:	08013060 	.word	0x08013060
 8000710:	08013090 	.word	0x08013090
 8000714:	08001ab5 	.word	0x08001ab5
 8000718:	2000906c 	.word	0x2000906c
 800071c:	080130b4 	.word	0x080130b4
 8000720:	080005e5 	.word	0x080005e5
 8000724:	2000923c 	.word	0x2000923c
 8000728:	080130d8 	.word	0x080130d8
 800072c:	080005f9 	.word	0x080005f9
 8000730:	2000afe8 	.word	0x2000afe8

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b0b4      	sub	sp, #208	; 0xd0
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f011 fd4d 	bl	80121e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2284      	movs	r2, #132	; 0x84
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f011 fd3e 	bl	80121e2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000766:	f007 f861 	bl	800782c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <SystemClock_Config+0x170>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <SystemClock_Config+0x170>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b4b      	ldr	r3, [pc, #300]	; (80008a4 <SystemClock_Config+0x170>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <SystemClock_Config+0x174>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a48      	ldr	r2, [pc, #288]	; (80008a8 <SystemClock_Config+0x174>)
 8000788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <SystemClock_Config+0x174>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800079a:	2309      	movs	r3, #9
 800079c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007bc:	2319      	movs	r3, #25
 80007be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80007c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007d0:	2309      	movs	r3, #9
 80007d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007da:	4618      	mov	r0, r3
 80007dc:	f007 f948 	bl	8007a70 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007e6:	f001 f981 	bl	8001aec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ea:	f007 f82f 	bl	800784c <HAL_PWREx_EnableOverDrive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f4:	f001 f97a 	bl	8001aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800081a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800081e:	2106      	movs	r1, #6
 8000820:	4618      	mov	r0, r3
 8000822:	f007 fbc9 	bl	8007fb8 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800082c:	f001 f95e 	bl	8001aec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <SystemClock_Config+0x178>)
 8000832:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000844:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000848:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800084a:	2305      	movs	r3, #5
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000852:	2303      	movs	r3, #3
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800085e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800086a:	2300      	movs	r3, #0
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800086e:	2300      	movs	r3, #0
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000872:	2300      	movs	r3, #0
 8000874:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000876:	2300      	movs	r3, #0
 8000878:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800087a:	2300      	movs	r3, #0
 800087c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800087e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f007 fd98 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000896:	f001 f929 	bl	8001aec <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	37d0      	adds	r7, #208	; 0xd0
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000
 80008ac:	01314868 	.word	0x01314868

080008b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_ADC3_Init+0x98>)
 80008c4:	4a21      	ldr	r2, [pc, #132]	; (800094c <MX_ADC3_Init+0x9c>)
 80008c6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_ADC3_Init+0x98>)
 80008ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ce:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_ADC3_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_ADC3_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_ADC3_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_ADC3_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_ADC3_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_ADC3_Init+0x98>)
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <MX_ADC3_Init+0xa0>)
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_ADC3_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_ADC3_Init+0x98>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_ADC3_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_ADC3_Init+0x98>)
 800090c:	2201      	movs	r2, #1
 800090e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_ADC3_Init+0x98>)
 8000912:	f003 f887 	bl	8003a24 <HAL_ADC_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800091c:	f001 f8e6 	bl	8001aec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000920:	2304      	movs	r3, #4
 8000922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000924:	2301      	movs	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_ADC3_Init+0x98>)
 8000932:	f003 f8bb 	bl	8003aac <HAL_ADC_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800093c:	f001 f8d6 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20009368 	.word	0x20009368
 800094c:	40012200 	.word	0x40012200
 8000950:	0f000001 	.word	0x0f000001

08000954 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_CRC_Init+0x3c>)
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <MX_CRC_Init+0x40>)
 800095c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_CRC_Init+0x3c>)
 8000960:	2200      	movs	r2, #0
 8000962:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_CRC_Init+0x3c>)
 8000966:	2200      	movs	r2, #0
 8000968:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_CRC_Init+0x3c>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_CRC_Init+0x3c>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_CRC_Init+0x3c>)
 8000978:	2201      	movs	r2, #1
 800097a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_CRC_Init+0x3c>)
 800097e:	f003 fbbb 	bl	80040f8 <HAL_CRC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000988:	f001 f8b0 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20009218 	.word	0x20009218
 8000994:	40023000 	.word	0x40023000

08000998 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_DCMI_Init+0x60>)
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MX_DCMI_Init+0x64>)
 80009a0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_DCMI_Init+0x60>)
 80009e6:	f003 fc71 	bl	80042cc <HAL_DCMI_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f001 f87c 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200093b0 	.word	0x200093b0
 80009fc:	50050000 	.word	0x50050000

08000a00 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <MX_DMA2D_Init+0x60>)
 8000a08:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a36:	f004 f809 	bl	8004a4c <HAL_DMA2D_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a40:	f001 f854 	bl	8001aec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a44:	2101      	movs	r1, #1
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_DMA2D_Init+0x5c>)
 8000a48:	f004 fa6e 	bl	8004f28 <HAL_DMA2D_ConfigLayer>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a52:	f001 f84b 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000ae60 	.word	0x2000ae60
 8000a60:	4002b000 	.word	0x4002b000

08000a64 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
 return;
 8000a68:	bf00      	nop
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_I2C1_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <MX_I2C1_Init+0x7c>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000ab0:	f006 fa1c 	bl	8006eec <HAL_I2C_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aba:	f001 f817 	bl	8001aec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000ac2:	f006 faa3 	bl	800700c <HAL_I2CEx_ConfigAnalogFilter>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000acc:	f001 f80e 	bl	8001aec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000ad4:	f006 fae5 	bl	80070a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f001 f805 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200091cc 	.word	0x200091cc
 8000aec:	40005400 	.word	0x40005400
 8000af0:	00c0eaff 	.word	0x00c0eaff

08000af4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <MX_I2C3_Init+0x78>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <MX_I2C3_Init+0x7c>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b2e:	480e      	ldr	r0, [pc, #56]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b30:	f006 f9dc 	bl	8006eec <HAL_I2C_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b3a:	f000 ffd7 	bl	8001aec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b42:	f006 fa63 	bl	800700c <HAL_I2CEx_ConfigAnalogFilter>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b4c:	f000 ffce 	bl	8001aec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b50:	2100      	movs	r1, #0
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_I2C3_Init+0x74>)
 8000b54:	f006 faa5 	bl	80070a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b5e:	f000 ffc5 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20009070 	.word	0x20009070
 8000b6c:	40005c00 	.word	0x40005c00
 8000b70:	00c0eaff 	.word	0x00c0eaff

08000b74 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b09a      	sub	sp, #104	; 0x68
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b7e:	2234      	movs	r2, #52	; 0x34
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f011 fb2d 	bl	80121e2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2234      	movs	r2, #52	; 0x34
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f011 fb27 	bl	80121e2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b94:	4b50      	ldr	r3, [pc, #320]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000b96:	4a51      	ldr	r2, [pc, #324]	; (8000cdc <MX_LTDC_Init+0x168>)
 8000b98:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b9a:	4b4f      	ldr	r3, [pc, #316]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ba0:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ba6:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bac:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000bb2:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bb4:	2228      	movs	r2, #40	; 0x28
 8000bb6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000bb8:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bba:	2209      	movs	r2, #9
 8000bbc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000bbe:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bc0:	2235      	movs	r2, #53	; 0x35
 8000bc2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000bc4:	4b44      	ldr	r3, [pc, #272]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bc6:	220b      	movs	r2, #11
 8000bc8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000bca:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bcc:	f240 2215 	movw	r2, #533	; 0x215
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000bd2:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bd4:	f240 121b 	movw	r2, #283	; 0x11b
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bdc:	f240 2235 	movw	r2, #565	; 0x235
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000be2:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000be4:	f240 121d 	movw	r2, #285	; 0x11d
 8000be8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bea:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bf2:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c02:	4835      	ldr	r0, [pc, #212]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000c04:	f006 fa9a 	bl	800713c <HAL_LTDC_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000c0e:	f000 ff6d 	bl	8001aec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000c16:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000c20:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c24:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c26:	2302      	movs	r3, #2
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000c2a:	23ff      	movs	r3, #255	; 0xff
 8000c2c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c36:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c3c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c40:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000c42:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c46:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000c48:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c4c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	481b      	ldr	r0, [pc, #108]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000c6a:	f006 fbf9 	bl	8007460 <HAL_LTDC_ConfigLayer>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000c74:	f000 ff3a 	bl	8001aec <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c94:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c96:	2305      	movs	r3, #5
 8000c98:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_LTDC_Init+0x164>)
 8000cc0:	f006 fbce 	bl	8007460 <HAL_LTDC_ConfigLayer>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000cca:	f000 ff0f 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3768      	adds	r7, #104	; 0x68
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200092c0 	.word	0x200092c0
 8000cdc:	40016800 	.word	0x40016800

08000ce0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <MX_QUADSPI_Init+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000cec:	22ff      	movs	r2, #255	; 0xff
 8000cee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d1c:	f006 fde6 	bl	80078ec <HAL_QSPI_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000d26:	f000 fee1 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000af9c 	.word	0x2000af9c
 8000d34:	a0001000 	.word	0xa0001000

08000d38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b092      	sub	sp, #72	; 0x48
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	222c      	movs	r2, #44	; 0x2c
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f011 fa41 	bl	80121e2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d60:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <MX_RTC_Init+0x144>)
 8000d62:	4a47      	ldr	r2, [pc, #284]	; (8000e80 <MX_RTC_Init+0x148>)
 8000d64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d66:	4b45      	ldr	r3, [pc, #276]	; (8000e7c <MX_RTC_Init+0x144>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d6c:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <MX_RTC_Init+0x144>)
 8000d6e:	227f      	movs	r2, #127	; 0x7f
 8000d70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d72:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <MX_RTC_Init+0x144>)
 8000d74:	22ff      	movs	r2, #255	; 0xff
 8000d76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d78:	4b40      	ldr	r3, [pc, #256]	; (8000e7c <MX_RTC_Init+0x144>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <MX_RTC_Init+0x144>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d84:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <MX_RTC_Init+0x144>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d8a:	483c      	ldr	r0, [pc, #240]	; (8000e7c <MX_RTC_Init+0x144>)
 8000d8c:	f008 f83a 	bl	8008e04 <HAL_RTC_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000d96:	f000 fea9 	bl	8001aec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db8:	2201      	movs	r2, #1
 8000dba:	4619      	mov	r1, r3
 8000dbc:	482f      	ldr	r0, [pc, #188]	; (8000e7c <MX_RTC_Init+0x144>)
 8000dbe:	f008 f89d 	bl	8008efc <HAL_RTC_SetTime>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000dc8:	f000 fe90 	bl	8001aec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	2201      	movs	r2, #1
 8000dea:	4619      	mov	r1, r3
 8000dec:	4823      	ldr	r0, [pc, #140]	; (8000e7c <MX_RTC_Init+0x144>)
 8000dee:	f008 f943 	bl	8009078 <HAL_RTC_SetDate>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000df8:	f000 fe78 	bl	8001aec <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4619      	mov	r1, r3
 8000e32:	4812      	ldr	r0, [pc, #72]	; (8000e7c <MX_RTC_Init+0x144>)
 8000e34:	f008 f9c8 	bl	80091c8 <HAL_RTC_SetAlarm>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000e3e:	f000 fe55 	bl	8001aec <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480b      	ldr	r0, [pc, #44]	; (8000e7c <MX_RTC_Init+0x144>)
 8000e50:	f008 f9ba 	bl	80091c8 <HAL_RTC_SetAlarm>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000e5a:	f000 fe47 	bl	8001aec <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	2100      	movs	r1, #0
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <MX_RTC_Init+0x144>)
 8000e64:	f008 fb3a 	bl	80094dc <HAL_RTCEx_SetTimeStamp>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000e6e:	f000 fe3d 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3748      	adds	r7, #72	; 0x48
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20009480 	.word	0x20009480
 8000e80:	40002800 	.word	0x40002800

08000e84 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e88:	4b4d      	ldr	r3, [pc, #308]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000e8a:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <MX_SAI2_Init+0x140>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e94:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ea0:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ea6:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000eac:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000eb8:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ec6:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <MX_SAI2_Init+0x144>)
 8000ec8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eca:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000edc:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f00:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f18:	4829      	ldr	r0, [pc, #164]	; (8000fc0 <MX_SAI2_Init+0x13c>)
 8000f1a:	f008 fb35 	bl	8009588 <HAL_SAI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000f24:	f000 fde2 	bl	8001aec <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f2a:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <MX_SAI2_Init+0x14c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f78:	2208      	movs	r2, #8
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <MX_SAI2_Init+0x148>)
 8000fae:	f008 faeb 	bl	8009588 <HAL_SAI_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000fb8:	f000 fd98 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20009148 	.word	0x20009148
 8000fc4:	40015c04 	.word	0x40015c04
 8000fc8:	0002ee00 	.word	0x0002ee00
 8000fcc:	20008fe8 	.word	0x20008fe8
 8000fd0:	40015c24 	.word	0x40015c24

08000fd4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8000fda:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000fde:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_SPDIFRX_Init+0x5c>)
 800101e:	f008 fcdb 	bl	80099d8 <HAL_SPDIFRX_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001028:	f000 fd60 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200090fc 	.word	0x200090fc

08001034 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	; 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	615a      	str	r2, [r3, #20]
 8001066:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	222c      	movs	r2, #44	; 0x2c
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f011 f8b7 	bl	80121e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001074:	4b43      	ldr	r3, [pc, #268]	; (8001184 <MX_TIM1_Init+0x150>)
 8001076:	4a44      	ldr	r2, [pc, #272]	; (8001188 <MX_TIM1_Init+0x154>)
 8001078:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800107a:	4b42      	ldr	r3, [pc, #264]	; (8001184 <MX_TIM1_Init+0x150>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b40      	ldr	r3, [pc, #256]	; (8001184 <MX_TIM1_Init+0x150>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001086:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <MX_TIM1_Init+0x150>)
 8001088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <MX_TIM1_Init+0x150>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001094:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <MX_TIM1_Init+0x150>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <MX_TIM1_Init+0x150>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010a0:	4838      	ldr	r0, [pc, #224]	; (8001184 <MX_TIM1_Init+0x150>)
 80010a2:	f008 fcf5 	bl	8009a90 <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010ac:	f000 fd1e 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ba:	4619      	mov	r1, r3
 80010bc:	4831      	ldr	r0, [pc, #196]	; (8001184 <MX_TIM1_Init+0x150>)
 80010be:	f008 ff9f 	bl	800a000 <HAL_TIM_ConfigClockSource>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fd10 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010cc:	482d      	ldr	r0, [pc, #180]	; (8001184 <MX_TIM1_Init+0x150>)
 80010ce:	f008 fd35 	bl	8009b3c <HAL_TIM_PWM_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010d8:	f000 fd08 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ec:	4619      	mov	r1, r3
 80010ee:	4825      	ldr	r0, [pc, #148]	; (8001184 <MX_TIM1_Init+0x150>)
 80010f0:	f009 fc00 	bl	800a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010fa:	f000 fcf7 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fe:	2360      	movs	r3, #96	; 0x60
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001106:	2300      	movs	r3, #0
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800110a:	2300      	movs	r3, #0
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <MX_TIM1_Init+0x150>)
 8001124:	f008 fe54 	bl	8009dd0 <HAL_TIM_PWM_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800112e:	f000 fcdd 	bl	8001aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <MX_TIM1_Init+0x150>)
 8001168:	f009 fc52 	bl	800aa10 <HAL_TIMEx_ConfigBreakDeadTime>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001172:	f000 fcbb 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <MX_TIM1_Init+0x150>)
 8001178:	f001 f900 	bl	800237c <HAL_TIM_MspPostInit>

}
 800117c:	bf00      	nop
 800117e:	3768      	adds	r7, #104	; 0x68
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200094a0 	.word	0x200094a0
 8001188:	40010000 	.word	0x40010000

0800118c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011e8:	f008 fc52 	bl	8009a90 <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011f2:	f000 fc7b 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001200:	4619      	mov	r1, r3
 8001202:	481c      	ldr	r0, [pc, #112]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001204:	f008 fefc 	bl	800a000 <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800120e:	f000 fc6d 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001212:	4818      	ldr	r0, [pc, #96]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001214:	f008 fc92 	bl	8009b3c <HAL_TIM_PWM_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800121e:	f000 fc65 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4810      	ldr	r0, [pc, #64]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001232:	f009 fb5f 	bl	800a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800123c:	f000 fc56 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001240:	2360      	movs	r3, #96	; 0x60
 8001242:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	4619      	mov	r1, r3
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001258:	f008 fdba 	bl	8009dd0 <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001262:	f000 fc43 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001268:	f001 f888 	bl	800237c <HAL_TIM_MspPostInit>

}
 800126c:	bf00      	nop
 800126e:	3738      	adds	r7, #56	; 0x38
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000aea0 	.word	0x2000aea0

08001278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012ac:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <MX_TIM3_Init+0xec>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012b0:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012bc:	4b28      	ldr	r3, [pc, #160]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012d0:	4823      	ldr	r0, [pc, #140]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012d2:	f008 fbdd 	bl	8009a90 <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012dc:	f000 fc06 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ea:	4619      	mov	r1, r3
 80012ec:	481c      	ldr	r0, [pc, #112]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012ee:	f008 fe87 	bl	800a000 <HAL_TIM_ConfigClockSource>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012f8:	f000 fbf8 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012fc:	4818      	ldr	r0, [pc, #96]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012fe:	f008 fc1d 	bl	8009b3c <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001308:	f000 fbf0 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <MX_TIM3_Init+0xe8>)
 800131c:	f009 faea 	bl	800a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001326:	f000 fbe1 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	; 0x60
 800132c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM3_Init+0xe8>)
 8001342:	f008 fd45 	bl	8009dd0 <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800134c:	f000 fbce 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM3_Init+0xe8>)
 8001352:	f001 f813 	bl	800237c <HAL_TIM_MspPostInit>

}
 8001356:	bf00      	nop
 8001358:	3738      	adds	r7, #56	; 0x38
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20009280 	.word	0x20009280
 8001364:	40000400 	.word	0x40000400

08001368 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_TIM5_Init+0xe8>)
 800139c:	4a2d      	ldr	r2, [pc, #180]	; (8001454 <MX_TIM5_Init+0xec>)
 800139e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_TIM5_Init+0xe8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_TIM5_Init+0xe8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <MX_TIM5_Init+0xe8>)
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
 80013b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <MX_TIM5_Init+0xe8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <MX_TIM5_Init+0xe8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013c0:	4823      	ldr	r0, [pc, #140]	; (8001450 <MX_TIM5_Init+0xe8>)
 80013c2:	f008 fb65 	bl	8009a90 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80013cc:	f000 fb8e 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	4619      	mov	r1, r3
 80013dc:	481c      	ldr	r0, [pc, #112]	; (8001450 <MX_TIM5_Init+0xe8>)
 80013de:	f008 fe0f 	bl	800a000 <HAL_TIM_ConfigClockSource>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013e8:	f000 fb80 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013ec:	4818      	ldr	r0, [pc, #96]	; (8001450 <MX_TIM5_Init+0xe8>)
 80013ee:	f008 fba5 	bl	8009b3c <HAL_TIM_PWM_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013f8:	f000 fb78 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <MX_TIM5_Init+0xe8>)
 800140c:	f009 fa72 	bl	800a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001416:	f000 fb69 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141a:	2360      	movs	r3, #96	; 0x60
 800141c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	220c      	movs	r2, #12
 800142e:	4619      	mov	r1, r3
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM5_Init+0xe8>)
 8001432:	f008 fccd 	bl	8009dd0 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800143c:	f000 fb56 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM5_Init+0xe8>)
 8001442:	f000 ff9b 	bl	800237c <HAL_TIM_MspPostInit>

}
 8001446:	bf00      	nop
 8001448:	3738      	adds	r7, #56	; 0x38
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20009240 	.word	0x20009240
 8001454:	40000c00 	.word	0x40000c00

08001458 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <MX_TIM8_Init+0xa0>)
 8001478:	4a20      	ldr	r2, [pc, #128]	; (80014fc <MX_TIM8_Init+0xa4>)
 800147a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_TIM8_Init+0xa0>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_TIM8_Init+0xa0>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_TIM8_Init+0xa0>)
 800148a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_TIM8_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_TIM8_Init+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_TIM8_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014a2:	4815      	ldr	r0, [pc, #84]	; (80014f8 <MX_TIM8_Init+0xa0>)
 80014a4:	f008 faf4 	bl	8009a90 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80014ae:	f000 fb1d 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <MX_TIM8_Init+0xa0>)
 80014c0:	f008 fd9e 	bl	800a000 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80014ca:	f000 fb0f 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_TIM8_Init+0xa0>)
 80014e0:	f009 fa08 	bl	800a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014ea:	f000 faff 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200090bc 	.word	0x200090bc
 80014fc:	40010400 	.word	0x40010400

08001500 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_TIM12_Init+0x84>)
 800151a:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <MX_TIM12_Init+0x88>)
 800151c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <MX_TIM12_Init+0x84>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_TIM12_Init+0x84>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_TIM12_Init+0x84>)
 800152c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001530:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_TIM12_Init+0x84>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_TIM12_Init+0x84>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800153e:	4811      	ldr	r0, [pc, #68]	; (8001584 <MX_TIM12_Init+0x84>)
 8001540:	f008 fafc 	bl	8009b3c <HAL_TIM_PWM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800154a:	f000 facf 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154e:	2360      	movs	r3, #96	; 0x60
 8001550:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_TIM12_Init+0x84>)
 8001566:	f008 fc33 	bl	8009dd0 <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001570:	f000 fabc 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_TIM12_Init+0x84>)
 8001576:	f000 ff01 	bl	800237c <HAL_TIM_MspPostInit>

}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000aee0 	.word	0x2000aee0
 8001588:	40001800 	.word	0x40001800

0800158c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <MX_USART1_UART_Init+0x5c>)
 8001594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015d0:	f009 faba 	bl	800ab48 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015da:	f000 fa87 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20009400 	.word	0x20009400
 80015e8:	40011000 	.word	0x40011000

080015ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USART6_UART_Init+0x58>)
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <MX_USART6_UART_Init+0x5c>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_USART6_UART_Init+0x58>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_USART6_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_USART6_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_USART6_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USART6_UART_Init+0x58>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_USART6_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USART6_UART_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_USART6_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_USART6_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_USART6_UART_Init+0x58>)
 8001630:	f009 fa8a 	bl	800ab48 <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800163a:	f000 fa57 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000ade0 	.word	0x2000ade0
 8001648:	40011400 	.word	0x40011400

0800164c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <MX_FMC_Init+0x98>)
 8001666:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <MX_FMC_Init+0x9c>)
 8001668:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <MX_FMC_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_FMC_Init+0x98>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_FMC_Init+0x98>)
 8001678:	2204      	movs	r2, #4
 800167a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_FMC_Init+0x98>)
 800167e:	2210      	movs	r2, #16
 8001680:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_FMC_Init+0x98>)
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_FMC_Init+0x98>)
 800168a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800168e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_FMC_Init+0x98>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_FMC_Init+0x98>)
 8001698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_FMC_Init+0x98>)
 80016a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_FMC_Init+0x98>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80016b0:	2307      	movs	r3, #7
 80016b2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016b4:	2304      	movs	r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016b8:	2307      	movs	r3, #7
 80016ba:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016bc:	2303      	movs	r3, #3
 80016be:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_FMC_Init+0x98>)
 80016ce:	f008 f903 	bl	80098d8 <HAL_SDRAM_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016d8:	f000 fa08 	bl	8001aec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000af20 	.word	0x2000af20
 80016e8:	a0000140 	.word	0xa0000140

080016ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b090      	sub	sp, #64	; 0x40
 80016f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001702:	4baf      	ldr	r3, [pc, #700]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4aae      	ldr	r2, [pc, #696]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001708:	f043 0310 	orr.w	r3, r3, #16
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4bac      	ldr	r3, [pc, #688]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800171a:	4ba9      	ldr	r3, [pc, #676]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4aa8      	ldr	r2, [pc, #672]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4ba6      	ldr	r3, [pc, #664]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4ba3      	ldr	r3, [pc, #652]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4aa2      	ldr	r2, [pc, #648]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4ba0      	ldr	r3, [pc, #640]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	4b9d      	ldr	r3, [pc, #628]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a9c      	ldr	r2, [pc, #624]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b9a      	ldr	r3, [pc, #616]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001762:	4b97      	ldr	r3, [pc, #604]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a96      	ldr	r2, [pc, #600]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b94      	ldr	r3, [pc, #592]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b91      	ldr	r3, [pc, #580]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a90      	ldr	r2, [pc, #576]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b8e      	ldr	r3, [pc, #568]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001792:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a8a      	ldr	r2, [pc, #552]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017aa:	4b85      	ldr	r3, [pc, #532]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a84      	ldr	r2, [pc, #528]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b82      	ldr	r3, [pc, #520]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017c2:	4b7f      	ldr	r3, [pc, #508]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a7e      	ldr	r2, [pc, #504]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b7c      	ldr	r3, [pc, #496]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017da:	4b79      	ldr	r3, [pc, #484]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a78      	ldr	r2, [pc, #480]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017e0:	f043 0320 	orr.w	r3, r3, #32
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b76      	ldr	r3, [pc, #472]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f2:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a72      	ldr	r2, [pc, #456]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b70      	ldr	r3, [pc, #448]	; (80019c0 <MX_GPIO_Init+0x2d4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2120      	movs	r1, #32
 800180e:	486d      	ldr	r0, [pc, #436]	; (80019c4 <MX_GPIO_Init+0x2d8>)
 8001810:	f003 fe62 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	210e      	movs	r1, #14
 8001818:	486b      	ldr	r0, [pc, #428]	; (80019c8 <MX_GPIO_Init+0x2dc>)
 800181a:	f003 fe5d 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	2108      	movs	r1, #8
 8001822:	486a      	ldr	r0, [pc, #424]	; (80019cc <MX_GPIO_Init+0x2e0>)
 8001824:	f003 fe58 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182e:	4866      	ldr	r0, [pc, #408]	; (80019c8 <MX_GPIO_Init+0x2dc>)
 8001830:	f003 fe52 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183a:	4865      	ldr	r0, [pc, #404]	; (80019d0 <MX_GPIO_Init+0x2e4>)
 800183c:	f003 fe4c 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	21c8      	movs	r1, #200	; 0xc8
 8001844:	4863      	ldr	r0, [pc, #396]	; (80019d4 <MX_GPIO_Init+0x2e8>)
 8001846:	f003 fe47 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800184a:	2308      	movs	r3, #8
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	485e      	ldr	r0, [pc, #376]	; (80019d8 <MX_GPIO_Init+0x2ec>)
 800185e:	f003 fc91 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001862:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001874:	230a      	movs	r3, #10
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187c:	4619      	mov	r1, r3
 800187e:	4857      	ldr	r0, [pc, #348]	; (80019dc <MX_GPIO_Init+0x2f0>)
 8001880:	f003 fc80 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001884:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001896:	230c      	movs	r3, #12
 8001898:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189e:	4619      	mov	r1, r3
 80018a0:	484f      	ldr	r0, [pc, #316]	; (80019e0 <MX_GPIO_Init+0x2f4>)
 80018a2:	f003 fc6f 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80018a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b8:	4619      	mov	r1, r3
 80018ba:	484a      	ldr	r0, [pc, #296]	; (80019e4 <MX_GPIO_Init+0x2f8>)
 80018bc:	f003 fc62 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80018c0:	2340      	movs	r3, #64	; 0x40
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018c4:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <MX_GPIO_Init+0x2fc>)
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d0:	4619      	mov	r1, r3
 80018d2:	483c      	ldr	r0, [pc, #240]	; (80019c4 <MX_GPIO_Init+0x2d8>)
 80018d4:	f003 fc56 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80018d8:	2320      	movs	r3, #32
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	4619      	mov	r1, r3
 80018ee:	4835      	ldr	r0, [pc, #212]	; (80019c4 <MX_GPIO_Init+0x2d8>)
 80018f0:	f003 fc48 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80018f4:	f241 030e 	movw	r3, #4110	; 0x100e
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	482e      	ldr	r0, [pc, #184]	; (80019c8 <MX_GPIO_Init+0x2dc>)
 800190e:	f003 fc39 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	482e      	ldr	r0, [pc, #184]	; (80019e0 <MX_GPIO_Init+0x2f4>)
 8001928:	f003 fc2c 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800192c:	2308      	movs	r3, #8
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	4822      	ldr	r0, [pc, #136]	; (80019cc <MX_GPIO_Init+0x2e0>)
 8001944:	f003 fc1e 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001948:	2310      	movs	r3, #16
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001958:	4619      	mov	r1, r3
 800195a:	481a      	ldr	r0, [pc, #104]	; (80019c4 <MX_GPIO_Init+0x2d8>)
 800195c:	f003 fc12 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001960:	f248 0304 	movw	r3, #32772	; 0x8004
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800196e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001972:	4619      	mov	r1, r3
 8001974:	4816      	ldr	r0, [pc, #88]	; (80019d0 <MX_GPIO_Init+0x2e4>)
 8001976:	f003 fc05 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800197a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	480f      	ldr	r0, [pc, #60]	; (80019d0 <MX_GPIO_Init+0x2e4>)
 8001994:	f003 fbf6 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_GPIO_Init+0x2fc>)
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019aa:	4619      	mov	r1, r3
 80019ac:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_GPIO_Init+0x2dc>)
 80019ae:	f003 fbe9 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80019b2:	2310      	movs	r3, #16
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e016      	b.n	80019ec <MX_GPIO_Init+0x300>
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020c00 	.word	0x40020c00
 80019c8:	40022000 	.word	0x40022000
 80019cc:	40022800 	.word	0x40022800
 80019d0:	40021c00 	.word	0x40021c00
 80019d4:	40021800 	.word	0x40021800
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40022400 	.word	0x40022400
 80019e8:	10120000 	.word	0x10120000
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019f2:	230a      	movs	r3, #10
 80019f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fa:	4619      	mov	r1, r3
 80019fc:	4828      	ldr	r0, [pc, #160]	; (8001aa0 <MX_GPIO_Init+0x3b4>)
 80019fe:	f003 fbc1 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001a02:	23c8      	movs	r3, #200	; 0xc8
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a16:	4619      	mov	r1, r3
 8001a18:	4822      	ldr	r0, [pc, #136]	; (8001aa4 <MX_GPIO_Init+0x3b8>)
 8001a1a:	f003 fbb3 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001a1e:	2305      	movs	r3, #5
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a2e:	230a      	movs	r3, #10
 8001a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a36:	4619      	mov	r1, r3
 8001a38:	481b      	ldr	r0, [pc, #108]	; (8001aa8 <MX_GPIO_Init+0x3bc>)
 8001a3a:	f003 fba3 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <MX_GPIO_Init+0x3b8>)
 8001a52:	f003 fb97 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001a56:	2328      	movs	r3, #40	; 0x28
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a66:	230a      	movs	r3, #10
 8001a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <MX_GPIO_Init+0x3c0>)
 8001a72:	f003 fb87 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001a76:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a88:	2305      	movs	r3, #5
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a90:	4619      	mov	r1, r3
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <MX_GPIO_Init+0x3c4>)
 8001a94:	f003 fb76 	bl	8005184 <HAL_GPIO_Init>

}
 8001a98:	bf00      	nop
 8001a9a:	3740      	adds	r7, #64	; 0x40
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021c00 	.word	0x40021c00
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001abc:	f00f fe22 	bl	8011704 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f00c ff4b 	bl	800e95c <osDelay>
 8001ac6:	e7fb      	b.n	8001ac0 <StartDefaultTask+0xc>

08001ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ada:	f001 ff61 	bl	80039a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40001000 	.word	0x40001000

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	210f      	movs	r1, #15
 8001b36:	f06f 0001 	mvn.w	r0, #1
 8001b3a:	f002 fab3 	bl	80040a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <HAL_ADC_MspInit+0xa4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d13c      	bne.n	8001be8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_ADC_MspInit+0xa8>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_ADC_MspInit+0xa8>)
 8001b74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_ADC_MspInit+0xa8>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_ADC_MspInit+0xa8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_ADC_MspInit+0xa8>)
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_ADC_MspInit+0xa8>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_ADC_MspInit+0xa8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_ADC_MspInit+0xa8>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_ADC_MspInit+0xa8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001bb6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001bba:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <HAL_ADC_MspInit+0xac>)
 8001bcc:	f003 fada 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <HAL_ADC_MspInit+0xb0>)
 8001be4:	f003 face 	bl	8005184 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40012200 	.word	0x40012200
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	40020000 	.word	0x40020000

08001c00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_CRC_MspInit+0x38>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10b      	bne.n	8001c2a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_CRC_MspInit+0x3c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_CRC_MspInit+0x3c>)
 8001c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_CRC_MspInit+0x3c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023000 	.word	0x40023000
 8001c3c:	40023800 	.word	0x40023800

08001c40 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	; 0x38
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a50      	ldr	r2, [pc, #320]	; (8001da0 <HAL_DCMI_MspInit+0x160>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	f040 809a 	bne.w	8001d98 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001c64:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	4a4e      	ldr	r2, [pc, #312]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6353      	str	r3, [r2, #52]	; 0x34
 8001c70:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7c:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6313      	str	r3, [r2, #48]	; 0x30
 8001c88:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	4a42      	ldr	r2, [pc, #264]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca0:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cac:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	4a3c      	ldr	r2, [pc, #240]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc4:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4a36      	ldr	r2, [pc, #216]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cdc:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	4a30      	ldr	r2, [pc, #192]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce8:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <HAL_DCMI_MspInit+0x164>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001cf4:	2360      	movs	r3, #96	; 0x60
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d04:	230d      	movs	r3, #13
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4826      	ldr	r0, [pc, #152]	; (8001da8 <HAL_DCMI_MspInit+0x168>)
 8001d10:	f003 fa38 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001d14:	2308      	movs	r3, #8
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d24:	230d      	movs	r3, #13
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481f      	ldr	r0, [pc, #124]	; (8001dac <HAL_DCMI_MspInit+0x16c>)
 8001d30:	f003 fa28 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d46:	230d      	movs	r3, #13
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4817      	ldr	r0, [pc, #92]	; (8001db0 <HAL_DCMI_MspInit+0x170>)
 8001d52:	f003 fa17 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001d56:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d68:	230d      	movs	r3, #13
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	4619      	mov	r1, r3
 8001d72:	4810      	ldr	r0, [pc, #64]	; (8001db4 <HAL_DCMI_MspInit+0x174>)
 8001d74:	f003 fa06 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001d78:	2350      	movs	r3, #80	; 0x50
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d88:	230d      	movs	r3, #13
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	4619      	mov	r1, r3
 8001d92:	4809      	ldr	r0, [pc, #36]	; (8001db8 <HAL_DCMI_MspInit+0x178>)
 8001d94:	f003 f9f6 	bl	8005184 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3738      	adds	r7, #56	; 0x38
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	50050000 	.word	0x50050000
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40021c00 	.word	0x40021c00
 8001db8:	40020000 	.word	0x40020000

08001dbc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_DMA2D_MspInit+0x44>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d113      	bne.n	8001df6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_DMA2D_MspInit+0x48>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_DMA2D_MspInit+0x48>)
 8001dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_DMA2D_MspInit+0x48>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	205a      	movs	r0, #90	; 0x5a
 8001dec:	f002 f95a 	bl	80040a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001df0:	205a      	movs	r0, #90	; 0x5a
 8001df2:	f002 f973 	bl	80040dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	4002b000 	.word	0x4002b000
 8001e04:	40023800 	.word	0x40023800

08001e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <HAL_I2C_MspInit+0xdc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d129      	bne.n	8001e7e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e48:	2312      	movs	r3, #18
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e54:	2304      	movs	r3, #4
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4823      	ldr	r0, [pc, #140]	; (8001eec <HAL_I2C_MspInit+0xe4>)
 8001e60:	f003 f990 	bl	8005184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e7c:	e02d      	b.n	8001eda <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <HAL_I2C_MspInit+0xe8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d128      	bne.n	8001eda <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4a16      	ldr	r2, [pc, #88]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e92:	6313      	str	r3, [r2, #48]	; 0x30
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001ea0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea6:	2312      	movs	r3, #18
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <HAL_I2C_MspInit+0xec>)
 8001ebe:	f003 f961 	bl	8005184 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_I2C_MspInit+0xe0>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
}
 8001eda:	bf00      	nop
 8001edc:	3730      	adds	r7, #48	; 0x30
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40005400 	.word	0x40005400
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40005c00 	.word	0x40005c00
 8001ef4:	40021c00 	.word	0x40021c00

08001ef8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08e      	sub	sp, #56	; 0x38
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a55      	ldr	r2, [pc, #340]	; (800206c <HAL_LTDC_MspInit+0x174>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	f040 80a3 	bne.w	8002062 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f1c:	4b54      	ldr	r3, [pc, #336]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	4a53      	ldr	r2, [pc, #332]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f26:	6453      	str	r3, [r2, #68]	; 0x44
 8001f28:	4b51      	ldr	r3, [pc, #324]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f30:	623b      	str	r3, [r7, #32]
 8001f32:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f34:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	4a4d      	ldr	r2, [pc, #308]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f4c:	4b48      	ldr	r3, [pc, #288]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	4a47      	ldr	r2, [pc, #284]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f56:	6313      	str	r3, [r2, #48]	; 0x30
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f64:	4b42      	ldr	r3, [pc, #264]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	4a41      	ldr	r2, [pc, #260]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f70:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	4a3b      	ldr	r2, [pc, #236]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f86:	6313      	str	r3, [r2, #48]	; 0x30
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	4a35      	ldr	r2, [pc, #212]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa0:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_LTDC_MspInit+0x178>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001fac:	2310      	movs	r3, #16
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fbc:	230e      	movs	r3, #14
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	482b      	ldr	r0, [pc, #172]	; (8002074 <HAL_LTDC_MspInit+0x17c>)
 8001fc8:	f003 f8dc 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001fcc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fde:	230e      	movs	r3, #14
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4823      	ldr	r0, [pc, #140]	; (8002078 <HAL_LTDC_MspInit+0x180>)
 8001fea:	f003 f8cb 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001fee:	23f7      	movs	r3, #247	; 0xf7
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ffe:	230e      	movs	r3, #14
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002006:	4619      	mov	r1, r3
 8002008:	481c      	ldr	r0, [pc, #112]	; (800207c <HAL_LTDC_MspInit+0x184>)
 800200a:	f003 f8bb 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800200e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002020:	2309      	movs	r3, #9
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002028:	4619      	mov	r1, r3
 800202a:	4815      	ldr	r0, [pc, #84]	; (8002080 <HAL_LTDC_MspInit+0x188>)
 800202c:	f003 f8aa 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002030:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002042:	230e      	movs	r3, #14
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204a:	4619      	mov	r1, r3
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <HAL_LTDC_MspInit+0x18c>)
 800204e:	f003 f899 	bl	8005184 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	2058      	movs	r0, #88	; 0x58
 8002058:	f002 f824 	bl	80040a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800205c:	2058      	movs	r0, #88	; 0x58
 800205e:	f002 f83d 	bl	80040dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3738      	adds	r7, #56	; 0x38
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40016800 	.word	0x40016800
 8002070:	40023800 	.word	0x40023800
 8002074:	40021000 	.word	0x40021000
 8002078:	40022400 	.word	0x40022400
 800207c:	40022800 	.word	0x40022800
 8002080:	40021800 	.word	0x40021800
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_QSPI_MspInit+0x10c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d170      	bne.n	800218c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	4a3a      	ldr	r2, [pc, #232]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6393      	str	r3, [r2, #56]	; 0x38
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c2:	4b35      	ldr	r3, [pc, #212]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a34      	ldr	r2, [pc, #208]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020c8:	f043 0310 	orr.w	r3, r3, #16
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b32      	ldr	r3, [pc, #200]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f2:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a28      	ldr	r2, [pc, #160]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_QSPI_MspInit+0x110>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800210a:	2304      	movs	r3, #4
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800211a:	2309      	movs	r3, #9
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	481d      	ldr	r0, [pc, #116]	; (800219c <HAL_QSPI_MspInit+0x114>)
 8002126:	f003 f82d 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800212a:	2340      	movs	r3, #64	; 0x40
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800213a:	230a      	movs	r3, #10
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 031c 	add.w	r3, r7, #28
 8002142:	4619      	mov	r1, r3
 8002144:	4816      	ldr	r0, [pc, #88]	; (80021a0 <HAL_QSPI_MspInit+0x118>)
 8002146:	f003 f81d 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800214a:	2304      	movs	r3, #4
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800215a:	2309      	movs	r3, #9
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	480e      	ldr	r0, [pc, #56]	; (80021a0 <HAL_QSPI_MspInit+0x118>)
 8002166:	f003 f80d 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800216a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800217c:	2309      	movs	r3, #9
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4619      	mov	r1, r3
 8002186:	4807      	ldr	r0, [pc, #28]	; (80021a4 <HAL_QSPI_MspInit+0x11c>)
 8002188:	f002 fffc 	bl	8005184 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800218c:	bf00      	nop
 800218e:	3730      	adds	r7, #48	; 0x30
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	a0001000 	.word	0xa0001000
 8002198:	40023800 	.word	0x40023800
 800219c:	40021000 	.word	0x40021000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40020c00 	.word	0x40020c00

080021a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_RTC_MspInit+0x2c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d105      	bne.n	80021c6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_RTC_MspInit+0x30>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <HAL_RTC_MspInit+0x30>)
 80021c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40002800 	.word	0x40002800
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80021fc:	d127      	bne.n	800224e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_SPDIFRX_MspInit+0x7c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <HAL_SPDIFRX_MspInit+0x7c>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_SPDIFRX_MspInit+0x7c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_SPDIFRX_MspInit+0x7c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <HAL_SPDIFRX_MspInit+0x7c>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_SPDIFRX_MspInit+0x7c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800223e:	2308      	movs	r3, #8
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <HAL_SPDIFRX_MspInit+0x80>)
 800224a:	f002 ff9b 	bl	8005184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800224e:	bf00      	nop
 8002250:	3728      	adds	r7, #40	; 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40020c00 	.word	0x40020c00

08002260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a2e      	ldr	r2, [pc, #184]	; (8002328 <HAL_TIM_Base_MspInit+0xc8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10c      	bne.n	800228c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002272:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	4a2d      	ldr	r2, [pc, #180]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6453      	str	r3, [r2, #68]	; 0x44
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800228a:	e046      	b.n	800231a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d10c      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002296:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]
}
 80022ae:	e034      	b.n	800231a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1e      	ldr	r2, [pc, #120]	; (8002330 <HAL_TIM_Base_MspInit+0xd0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10c      	bne.n	80022d4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
}
 80022d2:	e022      	b.n	800231a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_TIM_Base_MspInit+0xd4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10c      	bne.n	80022f8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
}
 80022f6:	e010      	b.n	800231a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <HAL_TIM_Base_MspInit+0xd8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10b      	bne.n	800231a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <HAL_TIM_Base_MspInit+0xcc>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
}
 800231a:	bf00      	nop
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40010000 	.word	0x40010000
 800232c:	40023800 	.word	0x40023800
 8002330:	40000400 	.word	0x40000400
 8002334:	40000c00 	.word	0x40000c00
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <HAL_TIM_PWM_MspInit+0x38>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10b      	bne.n	8002366 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_TIM_PWM_MspInit+0x3c>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_TIM_PWM_MspInit+0x3c>)
 8002354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_TIM_PWM_MspInit+0x3c>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40001800 	.word	0x40001800
 8002378:	40023800 	.word	0x40023800

0800237c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a56      	ldr	r2, [pc, #344]	; (80024f4 <HAL_TIM_MspPostInit+0x178>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d11d      	bne.n	80023da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a55      	ldr	r2, [pc, #340]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80023b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	484a      	ldr	r0, [pc, #296]	; (80024fc <HAL_TIM_MspPostInit+0x180>)
 80023d4:	f002 fed6 	bl	8005184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023d8:	e087      	b.n	80024ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e2:	d11d      	bne.n	8002420 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e4:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4a43      	ldr	r2, [pc, #268]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
 80023f0:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80023fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800240e:	2301      	movs	r3, #1
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	4838      	ldr	r0, [pc, #224]	; (80024fc <HAL_TIM_MspPostInit+0x180>)
 800241a:	f002 feb3 	bl	8005184 <HAL_GPIO_Init>
}
 800241e:	e064      	b.n	80024ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a36      	ldr	r2, [pc, #216]	; (8002500 <HAL_TIM_MspPostInit+0x184>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d11c      	bne.n	8002464 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002442:	2310      	movs	r3, #16
 8002444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002452:	2302      	movs	r3, #2
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	4619      	mov	r1, r3
 800245c:	4829      	ldr	r0, [pc, #164]	; (8002504 <HAL_TIM_MspPostInit+0x188>)
 800245e:	f002 fe91 	bl	8005184 <HAL_GPIO_Init>
}
 8002462:	e042      	b.n	80024ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a27      	ldr	r2, [pc, #156]	; (8002508 <HAL_TIM_MspPostInit+0x18c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d11c      	bne.n	80024a8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002486:	2301      	movs	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002496:	2302      	movs	r3, #2
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800249a:	f107 031c 	add.w	r3, r7, #28
 800249e:	4619      	mov	r1, r3
 80024a0:	481a      	ldr	r0, [pc, #104]	; (800250c <HAL_TIM_MspPostInit+0x190>)
 80024a2:	f002 fe6f 	bl	8005184 <HAL_GPIO_Init>
}
 80024a6:	e020      	b.n	80024ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a18      	ldr	r2, [pc, #96]	; (8002510 <HAL_TIM_MspPostInit+0x194>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d11b      	bne.n	80024ea <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 80024b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_TIM_MspPostInit+0x17c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80024ca:	2340      	movs	r3, #64	; 0x40
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024da:	2309      	movs	r3, #9
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	4619      	mov	r1, r3
 80024e4:	480b      	ldr	r0, [pc, #44]	; (8002514 <HAL_TIM_MspPostInit+0x198>)
 80024e6:	f002 fe4d 	bl	8005184 <HAL_GPIO_Init>
}
 80024ea:	bf00      	nop
 80024ec:	3730      	adds	r7, #48	; 0x30
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40000400 	.word	0x40000400
 8002504:	40020400 	.word	0x40020400
 8002508:	40000c00 	.word	0x40000c00
 800250c:	40022000 	.word	0x40022000
 8002510:	40001800 	.word	0x40001800
 8002514:	40021c00 	.word	0x40021c00

08002518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a3c      	ldr	r2, [pc, #240]	; (8002628 <HAL_UART_MspInit+0x110>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d145      	bne.n	80025c6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800253a:	4b3c      	ldr	r3, [pc, #240]	; (800262c <HAL_UART_MspInit+0x114>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a3b      	ldr	r2, [pc, #236]	; (800262c <HAL_UART_MspInit+0x114>)
 8002540:	f043 0310 	orr.w	r3, r3, #16
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_UART_MspInit+0x114>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_UART_MspInit+0x114>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a35      	ldr	r2, [pc, #212]	; (800262c <HAL_UART_MspInit+0x114>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_UART_MspInit+0x114>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_UART_MspInit+0x114>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a2f      	ldr	r2, [pc, #188]	; (800262c <HAL_UART_MspInit+0x114>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_UART_MspInit+0x114>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002592:	2307      	movs	r3, #7
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	4824      	ldr	r0, [pc, #144]	; (8002630 <HAL_UART_MspInit+0x118>)
 800259e:	f002 fdf1 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80025a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025b4:	2307      	movs	r3, #7
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	4619      	mov	r1, r3
 80025be:	481d      	ldr	r0, [pc, #116]	; (8002634 <HAL_UART_MspInit+0x11c>)
 80025c0:	f002 fde0 	bl	8005184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025c4:	e02c      	b.n	8002620 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <HAL_UART_MspInit+0x120>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d127      	bne.n	8002620 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <HAL_UART_MspInit+0x114>)
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <HAL_UART_MspInit+0x114>)
 80025d6:	f043 0320 	orr.w	r3, r3, #32
 80025da:	6453      	str	r3, [r2, #68]	; 0x44
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_UART_MspInit+0x114>)
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_UART_MspInit+0x114>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_UART_MspInit+0x114>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	6313      	str	r3, [r2, #48]	; 0x30
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_UART_MspInit+0x114>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002600:	23c0      	movs	r3, #192	; 0xc0
 8002602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002610:	2308      	movs	r3, #8
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	4808      	ldr	r0, [pc, #32]	; (800263c <HAL_UART_MspInit+0x124>)
 800261c:	f002 fdb2 	bl	8005184 <HAL_GPIO_Init>
}
 8002620:	bf00      	nop
 8002622:	3730      	adds	r7, #48	; 0x30
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40011000 	.word	0x40011000
 800262c:	40023800 	.word	0x40023800
 8002630:	40020400 	.word	0x40020400
 8002634:	40020000 	.word	0x40020000
 8002638:	40011400 	.word	0x40011400
 800263c:	40020800 	.word	0x40020800

08002640 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002654:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <HAL_FMC_MspInit+0x100>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d16d      	bne.n	8002738 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800265c:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_FMC_MspInit+0x100>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_FMC_MspInit+0x104>)
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	4a37      	ldr	r2, [pc, #220]	; (8002744 <HAL_FMC_MspInit+0x104>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6393      	str	r3, [r2, #56]	; 0x38
 800266e:	4b35      	ldr	r3, [pc, #212]	; (8002744 <HAL_FMC_MspInit+0x104>)
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800267a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800267e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800268c:	230c      	movs	r3, #12
 800268e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	4619      	mov	r1, r3
 8002694:	482c      	ldr	r0, [pc, #176]	; (8002748 <HAL_FMC_MspInit+0x108>)
 8002696:	f002 fd75 	bl	8005184 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800269a:	f248 1333 	movw	r3, #33075	; 0x8133
 800269e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026ac:	230c      	movs	r3, #12
 80026ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4825      	ldr	r0, [pc, #148]	; (800274c <HAL_FMC_MspInit+0x10c>)
 80026b6:	f002 fd65 	bl	8005184 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80026ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80026be:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026cc:	230c      	movs	r3, #12
 80026ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	481e      	ldr	r0, [pc, #120]	; (8002750 <HAL_FMC_MspInit+0x110>)
 80026d6:	f002 fd55 	bl	8005184 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80026da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80026de:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026ec:	230c      	movs	r3, #12
 80026ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	4817      	ldr	r0, [pc, #92]	; (8002754 <HAL_FMC_MspInit+0x114>)
 80026f6:	f002 fd45 	bl	8005184 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80026fa:	2328      	movs	r3, #40	; 0x28
 80026fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800270a:	230c      	movs	r3, #12
 800270c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	4619      	mov	r1, r3
 8002712:	4811      	ldr	r0, [pc, #68]	; (8002758 <HAL_FMC_MspInit+0x118>)
 8002714:	f002 fd36 	bl	8005184 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002718:	2308      	movs	r3, #8
 800271a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002728:	230c      	movs	r3, #12
 800272a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	4619      	mov	r1, r3
 8002730:	480a      	ldr	r0, [pc, #40]	; (800275c <HAL_FMC_MspInit+0x11c>)
 8002732:	f002 fd27 	bl	8005184 <HAL_GPIO_Init>
 8002736:	e000      	b.n	800273a <HAL_FMC_MspInit+0xfa>
    return;
 8002738:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200000cc 	.word	0x200000cc
 8002744:	40023800 	.word	0x40023800
 8002748:	40021000 	.word	0x40021000
 800274c:	40021800 	.word	0x40021800
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40021400 	.word	0x40021400
 8002758:	40021c00 	.word	0x40021c00
 800275c:	40020800 	.word	0x40020800

08002760 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002768:	f7ff ff6a 	bl	8002640 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <HAL_SAI_MspInit+0xbc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d124      	bne.n	80027d0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002786:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <HAL_SAI_MspInit+0xc0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_SAI_MspInit+0xc4>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a29      	ldr	r2, [pc, #164]	; (8002838 <HAL_SAI_MspInit+0xc4>)
 8002794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b27      	ldr	r3, [pc, #156]	; (8002838 <HAL_SAI_MspInit+0xc4>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_SAI_MspInit+0xc0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <HAL_SAI_MspInit+0xc0>)
 80027ae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80027b0:	23f0      	movs	r3, #240	; 0xf0
 80027b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80027c0:	230a      	movs	r3, #10
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4619      	mov	r1, r3
 80027ca:	481c      	ldr	r0, [pc, #112]	; (800283c <HAL_SAI_MspInit+0xc8>)
 80027cc:	f002 fcda 	bl	8005184 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_SAI_MspInit+0xcc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d125      	bne.n	8002826 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <HAL_SAI_MspInit+0xc0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10b      	bne.n	80027fa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_SAI_MspInit+0xc4>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_SAI_MspInit+0xc4>)
 80027e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_SAI_MspInit+0xc4>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_SAI_MspInit+0xc0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_SAI_MspInit+0xc0>)
 8002802:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002816:	230a      	movs	r3, #10
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	4808      	ldr	r0, [pc, #32]	; (8002844 <HAL_SAI_MspInit+0xd0>)
 8002822:	f002 fcaf 	bl	8005184 <HAL_GPIO_Init>

    }
}
 8002826:	bf00      	nop
 8002828:	3728      	adds	r7, #40	; 0x28
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40015c04 	.word	0x40015c04
 8002834:	200000d0 	.word	0x200000d0
 8002838:	40023800 	.word	0x40023800
 800283c:	40022000 	.word	0x40022000
 8002840:	40015c24 	.word	0x40015c24
 8002844:	40021800 	.word	0x40021800

08002848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	; 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	2036      	movs	r0, #54	; 0x36
 800285e:	f001 fc21 	bl	80040a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002862:	2036      	movs	r0, #54	; 0x36
 8002864:	f001 fc3a 	bl	80040dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_InitTick+0xa0>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	4a1e      	ldr	r2, [pc, #120]	; (80028e8 <HAL_InitTick+0xa0>)
 800286e:	f043 0310 	orr.w	r3, r3, #16
 8002872:	6413      	str	r3, [r2, #64]	; 0x40
 8002874:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_InitTick+0xa0>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002880:	f107 0210 	add.w	r2, r7, #16
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f005 fd66 	bl	800835c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002890:	f005 fd3c 	bl	800830c <HAL_RCC_GetPCLK1Freq>
 8002894:	4603      	mov	r3, r0
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	4a13      	ldr	r2, [pc, #76]	; (80028ec <HAL_InitTick+0xa4>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	0c9b      	lsrs	r3, r3, #18
 80028a4:	3b01      	subs	r3, #1
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_InitTick+0xa8>)
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_InitTick+0xac>)
 80028ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_InitTick+0xa8>)
 80028b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028b6:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <HAL_InitTick+0xa8>)
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_InitTick+0xa8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_InitTick+0xa8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028c8:	4809      	ldr	r0, [pc, #36]	; (80028f0 <HAL_InitTick+0xa8>)
 80028ca:	f007 f8e1 	bl	8009a90 <HAL_TIM_Base_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d104      	bne.n	80028de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028d4:	4806      	ldr	r0, [pc, #24]	; (80028f0 <HAL_InitTick+0xa8>)
 80028d6:	f007 f907 	bl	8009ae8 <HAL_TIM_Base_Start_IT>
 80028da:	4603      	mov	r3, r0
 80028dc:	e000      	b.n	80028e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3730      	adds	r7, #48	; 0x30
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	431bde83 	.word	0x431bde83
 80028f0:	2000afec 	.word	0x2000afec
 80028f4:	40001000 	.word	0x40001000

080028f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <HardFault_Handler+0x4>

0800290c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <MemManage_Handler+0x4>

08002912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <UsageFault_Handler+0x4>

0800291e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <TIM6_DAC_IRQHandler+0x10>)
 8002932:	f007 f92e 	bl	8009b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000afec 	.word	0x2000afec

08002940 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <OTG_FS_IRQHandler+0x10>)
 8002946:	f003 f86f 	bl	8005a28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000b554 	.word	0x2000b554

08002954 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <LTDC_IRQHandler+0x10>)
 800295a:	f004 fcbf 	bl	80072dc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200092c0 	.word	0x200092c0

08002968 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <DMA2D_IRQHandler+0x10>)
 800296e:	f002 f9cb 	bl	8004d08 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	2000ae60 	.word	0x2000ae60

0800297c <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
#include "stm32746g_discovery_audio.h"
extern SAI_HandleTypeDef haudio_in_sai;
 void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
 {
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	 HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <DMA2_Stream7_IRQHandler+0x14>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fe27 	bl	80045d8 <HAL_DMA_IRQHandler>
 }
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200000d8 	.word	0x200000d8

08002994 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	e00a      	b.n	80029bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029a6:	f3af 8000 	nop.w
 80029aa:	4601      	mov	r1, r0
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	60ba      	str	r2, [r7, #8]
 80029b2:	b2ca      	uxtb	r2, r1
 80029b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3301      	adds	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	dbf0      	blt.n	80029a6 <_read+0x12>
	}

return len;
 80029c4:	687b      	ldr	r3, [r7, #4]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e009      	b.n	80029f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	60ba      	str	r2, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f00f fa4f 	bl	8011e8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3301      	adds	r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dbf1      	blt.n	80029e0 <_write+0x12>
	}
	return len;
 80029fc:	687b      	ldr	r3, [r7, #4]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_close>:

int _close(int file)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a2e:	605a      	str	r2, [r3, #4]
	return 0;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_isatty>:

int _isatty(int file)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
	return 1;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <_sbrk+0x5c>)
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <_sbrk+0x60>)
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <_sbrk+0x64>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <_sbrk+0x68>)
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d207      	bcs.n	8002ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa0:	f00f fb5a 	bl	8012158 <__errno>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	230c      	movs	r3, #12
 8002aa8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e009      	b.n	8002ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <_sbrk+0x64>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <_sbrk+0x64>)
 8002ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20050000 	.word	0x20050000
 8002ad0:	00000400 	.word	0x00000400
 8002ad4:	200000d4 	.word	0x200000d4
 8002ad8:	2000f488 	.word	0x2000f488

08002adc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <SystemInit+0x28>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <SystemInit+0x28>)
 8002ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SystemInit+0x28>)
 8002af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002af6:	609a      	str	r2, [r3, #8]
#endif
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b0e:	e003      	b.n	8002b18 <LoopCopyDataInit>

08002b10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b16:	3104      	adds	r1, #4

08002b18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b18:	480b      	ldr	r0, [pc, #44]	; (8002b48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b20:	d3f6      	bcc.n	8002b10 <CopyDataInit>
  ldr  r2, =_sbss
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b24:	e002      	b.n	8002b2c <LoopFillZerobss>

08002b26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b28:	f842 3b04 	str.w	r3, [r2], #4

08002b2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b30:	d3f9      	bcc.n	8002b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b32:	f7ff ffd3 	bl	8002adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b36:	f00f fb15 	bl	8012164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b3a:	f7fd fd67 	bl	800060c <main>
  bx  lr    
 8002b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b40:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002b44:	08015cd0 	.word	0x08015cd0
  ldr  r0, =_sdata
 8002b48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b4c:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8002b50:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8002b54:	2000f488 	.word	0x2000f488

08002b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <ADC_IRQHandler>
	...

08002b5c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002b60:	4b31      	ldr	r3, [pc, #196]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002b62:	2228      	movs	r2, #40	; 0x28
 8002b64:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b66:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002b68:	2209      	movs	r2, #9
 8002b6a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002b6e:	2235      	movs	r2, #53	; 0x35
 8002b70:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b72:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002b74:	220b      	movs	r2, #11
 8002b76:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002b7a:	f240 121b 	movw	r2, #283	; 0x11b
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b80:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002b82:	f240 2215 	movw	r2, #533	; 0x215
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002b8a:	f240 121d 	movw	r2, #285	; 0x11d
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002b90:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002b92:	f240 2235 	movw	r2, #565	; 0x235
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4823      	ldr	r0, [pc, #140]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002b9c:	f000 fc1c 	bl	80033d8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002ba2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002baa:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002bae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002bc8:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <BSP_LCD_Init+0xd0>)
 8002be4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002be6:	4810      	ldr	r0, [pc, #64]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002be8:	f004 fc78 	bl	80074dc <HAL_LTDC_GetState>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d103      	bne.n	8002bfa <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	480c      	ldr	r0, [pc, #48]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002bf6:	f000 fb15 	bl	8003224 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002bfa:	480b      	ldr	r0, [pc, #44]	; (8002c28 <BSP_LCD_Init+0xcc>)
 8002bfc:	f004 fa9e 	bl	800713c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002c00:	2201      	movs	r2, #1
 8002c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c06:	480a      	ldr	r0, [pc, #40]	; (8002c30 <BSP_LCD_Init+0xd4>)
 8002c08:	f002 fc66 	bl	80054d8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	2108      	movs	r1, #8
 8002c10:	4808      	ldr	r0, [pc, #32]	; (8002c34 <BSP_LCD_Init+0xd8>)
 8002c12:	f002 fc61 	bl	80054d8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002c16:	f000 fcff 	bl	8003618 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c1a:	4807      	ldr	r0, [pc, #28]	; (8002c38 <BSP_LCD_Init+0xdc>)
 8002c1c:	f000 f8c8 	bl	8002db0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	2000b02c 	.word	0x2000b02c
 8002c2c:	40016800 	.word	0x40016800
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40022800 	.word	0x40022800
 8002c38:	20000004 	.word	0x20000004

08002c3c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <BSP_LCD_GetXSize+0x20>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a06      	ldr	r2, [pc, #24]	; (8002c60 <BSP_LCD_GetXSize+0x24>)
 8002c46:	2134      	movs	r1, #52	; 0x34
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3360      	adds	r3, #96	; 0x60
 8002c50:	681b      	ldr	r3, [r3, #0]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	2000019c 	.word	0x2000019c
 8002c60:	2000b02c 	.word	0x2000b02c

08002c64 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <BSP_LCD_GetYSize+0x20>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <BSP_LCD_GetYSize+0x24>)
 8002c6e:	2134      	movs	r1, #52	; 0x34
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3364      	adds	r3, #100	; 0x64
 8002c78:	681b      	ldr	r3, [r3, #0]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	2000019c 	.word	0x2000019c
 8002c88:	2000b02c 	.word	0x2000b02c

08002c8c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b090      	sub	sp, #64	; 0x40
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002c9c:	f7ff ffce 	bl	8002c3c <BSP_LCD_GetXSize>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002ca8:	f7ff ffdc 	bl	8002c64 <BSP_LCD_GetYSize>
 8002cac:	4603      	mov	r3, r0
 8002cae:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002cb8:	23ff      	movs	r3, #255	; 0xff
 8002cba:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002cd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002cd8:	2307      	movs	r3, #7
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002cdc:	f7ff ffae 	bl	8002c3c <BSP_LCD_GetXSize>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002ce4:	f7ff ffbe 	bl	8002c64 <BSP_LCD_GetYSize>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4812      	ldr	r0, [pc, #72]	; (8002d40 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002cf6:	f004 fbb3 	bl	8007460 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002cfa:	88fa      	ldrh	r2, [r7, #6]
 8002cfc:	4911      	ldr	r1, [pc, #68]	; (8002d44 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3304      	adds	r3, #4
 8002d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	490c      	ldr	r1, [pc, #48]	; (8002d44 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3308      	adds	r3, #8
 8002d20:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d22:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002d24:	88fa      	ldrh	r2, [r7, #6]
 8002d26:	4907      	ldr	r1, [pc, #28]	; (8002d44 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002d36:	601a      	str	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	3740      	adds	r7, #64	; 0x40
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	2000b02c 	.word	0x2000b02c
 8002d44:	200001a0 	.word	0x200001a0
 8002d48:	20000004 	.word	0x20000004

08002d4c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002d54:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <BSP_LCD_SetTextColor+0x28>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4907      	ldr	r1, [pc, #28]	; (8002d78 <BSP_LCD_SetTextColor+0x2c>)
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	601a      	str	r2, [r3, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	2000019c 	.word	0x2000019c
 8002d78:	200001a0 	.word	0x200001a0

08002d7c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <BSP_LCD_SetBackColor+0x2c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4908      	ldr	r1, [pc, #32]	; (8002dac <BSP_LCD_SetBackColor+0x30>)
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3304      	adds	r3, #4
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	2000019c 	.word	0x2000019c
 8002dac:	200001a0 	.word	0x200001a0

08002db0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <BSP_LCD_SetFont+0x2c>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4908      	ldr	r1, [pc, #32]	; (8002de0 <BSP_LCD_SetFont+0x30>)
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3308      	adds	r3, #8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	2000019c 	.word	0x2000019c
 8002de0:	200001a0 	.word	0x200001a0

08002de4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002de8:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <BSP_LCD_GetFont+0x24>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4907      	ldr	r1, [pc, #28]	; (8002e0c <BSP_LCD_GetFont+0x28>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3308      	adds	r3, #8
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	2000019c 	.word	0x2000019c
 8002e0c:	200001a0 	.word	0x200001a0

08002e10 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <BSP_LCD_Clear+0x48>)
 8002e1a:	681c      	ldr	r4, [r3, #0]
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <BSP_LCD_Clear+0x48>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <BSP_LCD_Clear+0x4c>)
 8002e22:	2134      	movs	r1, #52	; 0x34
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	335c      	adds	r3, #92	; 0x5c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461d      	mov	r5, r3
 8002e30:	f7ff ff04 	bl	8002c3c <BSP_LCD_GetXSize>
 8002e34:	4606      	mov	r6, r0
 8002e36:	f7ff ff15 	bl	8002c64 <BSP_LCD_GetYSize>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	2300      	movs	r3, #0
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	4632      	mov	r2, r6
 8002e48:	4629      	mov	r1, r5
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f000 fb98 	bl	8003580 <LL_FillBuffer>
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e58:	2000019c 	.word	0x2000019c
 8002e5c:	2000b02c 	.word	0x2000b02c

08002e60 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	80bb      	strh	r3, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <BSP_LCD_DisplayChar+0x80>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	491b      	ldr	r1, [pc, #108]	; (8002ee4 <BSP_LCD_DisplayChar+0x84>)
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3308      	adds	r3, #8
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <BSP_LCD_DisplayChar+0x80>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4c14      	ldr	r4, [pc, #80]	; (8002ee4 <BSP_LCD_DisplayChar+0x84>)
 8002e94:	4613      	mov	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4423      	add	r3, r4
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ea4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <BSP_LCD_DisplayChar+0x80>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4c0d      	ldr	r4, [pc, #52]	; (8002ee4 <BSP_LCD_DisplayChar+0x84>)
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4423      	add	r3, r4
 8002eb8:	3308      	adds	r3, #8
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	889b      	ldrh	r3, [r3, #4]
 8002ebe:	3307      	adds	r3, #7
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da00      	bge.n	8002ec6 <BSP_LCD_DisplayChar+0x66>
 8002ec4:	3307      	adds	r3, #7
 8002ec6:	10db      	asrs	r3, r3, #3
 8002ec8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ecc:	18ca      	adds	r2, r1, r3
 8002ece:	88b9      	ldrh	r1, [r7, #4]
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fa9c 	bl	8003410 <DrawChar>
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	2000019c 	.word	0x2000019c
 8002ee4:	200001a0 	.word	0x200001a0

08002ee8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002ee8:	b5b0      	push	{r4, r5, r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60ba      	str	r2, [r7, #8]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	81fb      	strh	r3, [r7, #14]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	81bb      	strh	r3, [r7, #12]
 8002efa:	4613      	mov	r3, r2
 8002efc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002efe:	2301      	movs	r3, #1
 8002f00:	83fb      	strh	r3, [r7, #30]
 8002f02:	2300      	movs	r3, #0
 8002f04:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002f12:	e002      	b.n	8002f1a <BSP_LCD_DisplayStringAt+0x32>
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	3301      	adds	r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	617a      	str	r2, [r7, #20]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f6      	bne.n	8002f14 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f26:	f7ff fe89 	bl	8002c3c <BSP_LCD_GetXSize>
 8002f2a:	4b4f      	ldr	r3, [pc, #316]	; (8003068 <BSP_LCD_DisplayStringAt+0x180>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	494f      	ldr	r1, [pc, #316]	; (800306c <BSP_LCD_DisplayStringAt+0x184>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	889b      	ldrh	r3, [r3, #4]
 8002f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f44:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d01c      	beq.n	8002f86 <BSP_LCD_DisplayStringAt+0x9e>
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d017      	beq.n	8002f80 <BSP_LCD_DisplayStringAt+0x98>
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d12e      	bne.n	8002fb2 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	1ad1      	subs	r1, r2, r3
 8002f5a:	4b43      	ldr	r3, [pc, #268]	; (8003068 <BSP_LCD_DisplayStringAt+0x180>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4843      	ldr	r0, [pc, #268]	; (800306c <BSP_LCD_DisplayStringAt+0x184>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4403      	add	r3, r0
 8002f6a:	3308      	adds	r3, #8
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	889b      	ldrh	r3, [r3, #4]
 8002f70:	fb03 f301 	mul.w	r3, r3, r1
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	89fb      	ldrh	r3, [r7, #14]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	83fb      	strh	r3, [r7, #30]
      break;
 8002f7e:	e01b      	b.n	8002fb8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002f80:	89fb      	ldrh	r3, [r7, #14]
 8002f82:	83fb      	strh	r3, [r7, #30]
      break;
 8002f84:	e018      	b.n	8002fb8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	b299      	uxth	r1, r3
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <BSP_LCD_DisplayStringAt+0x180>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4836      	ldr	r0, [pc, #216]	; (800306c <BSP_LCD_DisplayStringAt+0x184>)
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4403      	add	r3, r0
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	889b      	ldrh	r3, [r3, #4]
 8002fa4:	fb11 f303 	smulbb	r3, r1, r3
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	83fb      	strh	r3, [r7, #30]
      break;
 8002fb0:	e002      	b.n	8002fb8 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002fb2:	89fb      	ldrh	r3, [r7, #14]
 8002fb4:	83fb      	strh	r3, [r7, #30]
      break;
 8002fb6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002fb8:	8bfb      	ldrh	r3, [r7, #30]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <BSP_LCD_DisplayStringAt+0xde>
 8002fbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da1d      	bge.n	8003002 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002fca:	e01a      	b.n	8003002 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	89b9      	ldrh	r1, [r7, #12]
 8002fd2:	8bfb      	ldrh	r3, [r7, #30]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff43 	bl	8002e60 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002fda:	4b23      	ldr	r3, [pc, #140]	; (8003068 <BSP_LCD_DisplayStringAt+0x180>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4923      	ldr	r1, [pc, #140]	; (800306c <BSP_LCD_DisplayStringAt+0x184>)
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3308      	adds	r3, #8
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	889a      	ldrh	r2, [r3, #4]
 8002ff0:	8bfb      	ldrh	r3, [r7, #30]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
    i++;
 8002ffc:	8bbb      	ldrh	r3, [r7, #28]
 8002ffe:	3301      	adds	r3, #1
 8003000:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2dc      	uxtb	r4, r3
 8003010:	f7ff fe14 	bl	8002c3c <BSP_LCD_GetXSize>
 8003014:	4605      	mov	r5, r0
 8003016:	8bb9      	ldrh	r1, [r7, #28]
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <BSP_LCD_DisplayStringAt+0x180>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4813      	ldr	r0, [pc, #76]	; (800306c <BSP_LCD_DisplayStringAt+0x184>)
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4403      	add	r3, r0
 8003028:	3308      	adds	r3, #8
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	889b      	ldrh	r3, [r3, #4]
 800302e:	fb03 f301 	mul.w	r3, r3, r1
 8003032:	1aeb      	subs	r3, r5, r3
 8003034:	b299      	uxth	r1, r3
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <BSP_LCD_DisplayStringAt+0x180>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	480c      	ldr	r0, [pc, #48]	; (800306c <BSP_LCD_DisplayStringAt+0x184>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4403      	add	r3, r0
 8003046:	3308      	adds	r3, #8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	889b      	ldrh	r3, [r3, #4]
 800304c:	4299      	cmp	r1, r3
 800304e:	bf2c      	ite	cs
 8003050:	2301      	movcs	r3, #1
 8003052:	2300      	movcc	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4023      	ands	r3, r4
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1b6      	bne.n	8002fcc <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800305e:	bf00      	nop
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bdb0      	pop	{r4, r5, r7, pc}
 8003066:	bf00      	nop
 8003068:	2000019c 	.word	0x2000019c
 800306c:	200001a0 	.word	0x200001a0

08003070 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800307c:	f7ff feb2 	bl	8002de4 <BSP_LCD_GetFont>
 8003080:	4603      	mov	r3, r0
 8003082:	88db      	ldrh	r3, [r3, #6]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	fb12 f303 	smulbb	r3, r2, r3
 800308a:	b299      	uxth	r1, r3
 800308c:	2303      	movs	r3, #3
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	2000      	movs	r0, #0
 8003092:	f7ff ff29 	bl	8002ee8 <BSP_LCD_DisplayStringAt>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	603a      	str	r2, [r7, #0]
 80030aa:	80fb      	strh	r3, [r7, #6]
 80030ac:	460b      	mov	r3, r1
 80030ae:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <BSP_LCD_DrawPixel+0x88>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <BSP_LCD_DrawPixel+0x8c>)
 80030b6:	2134      	movs	r1, #52	; 0x34
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3348      	adds	r3, #72	; 0x48
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d116      	bne.n	80030f4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <BSP_LCD_DrawPixel+0x88>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a18      	ldr	r2, [pc, #96]	; (800312c <BSP_LCD_DrawPixel+0x8c>)
 80030cc:	2134      	movs	r1, #52	; 0x34
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	335c      	adds	r3, #92	; 0x5c
 80030d6:	681c      	ldr	r4, [r3, #0]
 80030d8:	88bd      	ldrh	r5, [r7, #4]
 80030da:	f7ff fdaf 	bl	8002c3c <BSP_LCD_GetXSize>
 80030de:	4603      	mov	r3, r0
 80030e0:	fb03 f205 	mul.w	r2, r3, r5
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	4413      	add	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4423      	add	r3, r4
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	b292      	uxth	r2, r2
 80030f0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80030f2:	e015      	b.n	8003120 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <BSP_LCD_DrawPixel+0x88>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0c      	ldr	r2, [pc, #48]	; (800312c <BSP_LCD_DrawPixel+0x8c>)
 80030fa:	2134      	movs	r1, #52	; 0x34
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	335c      	adds	r3, #92	; 0x5c
 8003104:	681c      	ldr	r4, [r3, #0]
 8003106:	88bd      	ldrh	r5, [r7, #4]
 8003108:	f7ff fd98 	bl	8002c3c <BSP_LCD_GetXSize>
 800310c:	4603      	mov	r3, r0
 800310e:	fb03 f205 	mul.w	r2, r3, r5
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4423      	add	r3, r4
 800311a:	461a      	mov	r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bdb0      	pop	{r4, r5, r7, pc}
 8003128:	2000019c 	.word	0x2000019c
 800312c:	2000b02c 	.word	0x2000b02c

08003130 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af02      	add	r7, sp, #8
 8003138:	4604      	mov	r4, r0
 800313a:	4608      	mov	r0, r1
 800313c:	4611      	mov	r1, r2
 800313e:	461a      	mov	r2, r3
 8003140:	4623      	mov	r3, r4
 8003142:	80fb      	strh	r3, [r7, #6]
 8003144:	4603      	mov	r3, r0
 8003146:	80bb      	strh	r3, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
 800314c:	4613      	mov	r3, r2
 800314e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003154:	4b30      	ldr	r3, [pc, #192]	; (8003218 <BSP_LCD_FillRect+0xe8>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4930      	ldr	r1, [pc, #192]	; (800321c <BSP_LCD_FillRect+0xec>)
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fdf0 	bl	8002d4c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <BSP_LCD_FillRect+0xe8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <BSP_LCD_FillRect+0xf0>)
 8003172:	2134      	movs	r1, #52	; 0x34
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3348      	adds	r3, #72	; 0x48
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d114      	bne.n	80031ac <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003182:	4b25      	ldr	r3, [pc, #148]	; (8003218 <BSP_LCD_FillRect+0xe8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a26      	ldr	r2, [pc, #152]	; (8003220 <BSP_LCD_FillRect+0xf0>)
 8003188:	2134      	movs	r1, #52	; 0x34
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	335c      	adds	r3, #92	; 0x5c
 8003192:	681c      	ldr	r4, [r3, #0]
 8003194:	f7ff fd52 	bl	8002c3c <BSP_LCD_GetXSize>
 8003198:	4602      	mov	r2, r0
 800319a:	88bb      	ldrh	r3, [r7, #4]
 800319c:	fb03 f202 	mul.w	r2, r3, r2
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4423      	add	r3, r4
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e013      	b.n	80031d4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <BSP_LCD_FillRect+0xe8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1b      	ldr	r2, [pc, #108]	; (8003220 <BSP_LCD_FillRect+0xf0>)
 80031b2:	2134      	movs	r1, #52	; 0x34
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	335c      	adds	r3, #92	; 0x5c
 80031bc:	681c      	ldr	r4, [r3, #0]
 80031be:	f7ff fd3d 	bl	8002c3c <BSP_LCD_GetXSize>
 80031c2:	4602      	mov	r2, r0
 80031c4:	88bb      	ldrh	r3, [r7, #4]
 80031c6:	fb03 f202 	mul.w	r2, r3, r2
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4423      	add	r3, r4
 80031d2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80031d4:	4b10      	ldr	r3, [pc, #64]	; (8003218 <BSP_LCD_FillRect+0xe8>)
 80031d6:	681c      	ldr	r4, [r3, #0]
 80031d8:	68fd      	ldr	r5, [r7, #12]
 80031da:	887e      	ldrh	r6, [r7, #2]
 80031dc:	f8b7 8000 	ldrh.w	r8, [r7]
 80031e0:	f7ff fd2c 	bl	8002c3c <BSP_LCD_GetXSize>
 80031e4:	4602      	mov	r2, r0
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	1ad1      	subs	r1, r2, r3
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <BSP_LCD_FillRect+0xe8>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	480b      	ldr	r0, [pc, #44]	; (800321c <BSP_LCD_FillRect+0xec>)
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4403      	add	r3, r0
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	9100      	str	r1, [sp, #0]
 8003200:	4643      	mov	r3, r8
 8003202:	4632      	mov	r2, r6
 8003204:	4629      	mov	r1, r5
 8003206:	4620      	mov	r0, r4
 8003208:	f000 f9ba 	bl	8003580 <LL_FillBuffer>
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003216:	bf00      	nop
 8003218:	2000019c 	.word	0x2000019c
 800321c:	200001a0 	.word	0x200001a0
 8003220:	2000b02c 	.word	0x2000b02c

08003224 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b090      	sub	sp, #64	; 0x40
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800322e:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	4a63      	ldr	r2, [pc, #396]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003234:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003238:	6453      	str	r3, [r2, #68]	; 0x44
 800323a:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003246:	4b5e      	ldr	r3, [pc, #376]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a5d      	ldr	r2, [pc, #372]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800324c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800325e:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003264:	f043 0310 	orr.w	r3, r3, #16
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	623b      	str	r3, [r7, #32]
 8003274:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003276:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a51      	ldr	r2, [pc, #324]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800327c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a4b      	ldr	r2, [pc, #300]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	61bb      	str	r3, [r7, #24]
 80032a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032a6:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a45      	ldr	r2, [pc, #276]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a3f      	ldr	r2, [pc, #252]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a39      	ldr	r2, [pc, #228]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80032ee:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a33      	ldr	r2, [pc, #204]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003306:	2310      	movs	r3, #16
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003312:	2302      	movs	r3, #2
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003316:	230e      	movs	r3, #14
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800331a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800331e:	4619      	mov	r1, r3
 8003320:	4828      	ldr	r0, [pc, #160]	; (80033c4 <BSP_LCD_MspInit+0x1a0>)
 8003322:	f001 ff2f 	bl	8005184 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003330:	2309      	movs	r3, #9
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003338:	4619      	mov	r1, r3
 800333a:	4823      	ldr	r0, [pc, #140]	; (80033c8 <BSP_LCD_MspInit+0x1a4>)
 800333c:	f001 ff22 	bl	8005184 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003340:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800334a:	230e      	movs	r3, #14
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800334e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003352:	4619      	mov	r1, r3
 8003354:	481d      	ldr	r0, [pc, #116]	; (80033cc <BSP_LCD_MspInit+0x1a8>)
 8003356:	f001 ff15 	bl	8005184 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800335a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003364:	230e      	movs	r3, #14
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800336c:	4619      	mov	r1, r3
 800336e:	4818      	ldr	r0, [pc, #96]	; (80033d0 <BSP_LCD_MspInit+0x1ac>)
 8003370:	f001 ff08 	bl	8005184 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003374:	23f7      	movs	r3, #247	; 0xf7
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800337c:	230e      	movs	r3, #14
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003384:	4619      	mov	r1, r3
 8003386:	4813      	ldr	r0, [pc, #76]	; (80033d4 <BSP_LCD_MspInit+0x1b0>)
 8003388:	f001 fefc 	bl	8005184 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800338c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003392:	2301      	movs	r3, #1
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800339a:	4619      	mov	r1, r3
 800339c:	480b      	ldr	r0, [pc, #44]	; (80033cc <BSP_LCD_MspInit+0x1a8>)
 800339e:	f001 fef1 	bl	8005184 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80033a2:	2308      	movs	r3, #8
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80033a6:	2301      	movs	r3, #1
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80033aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ae:	4619      	mov	r1, r3
 80033b0:	4808      	ldr	r0, [pc, #32]	; (80033d4 <BSP_LCD_MspInit+0x1b0>)
 80033b2:	f001 fee7 	bl	8005184 <HAL_GPIO_Init>
}
 80033b6:	bf00      	nop
 80033b8:	3740      	adds	r7, #64	; 0x40
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40021800 	.word	0x40021800
 80033cc:	40022000 	.word	0x40022000
 80033d0:	40022400 	.word	0x40022400
 80033d4:	40022800 	.word	0x40022800

080033d8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033e4:	2208      	movs	r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80033e8:	4b08      	ldr	r3, [pc, #32]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033ea:	22c0      	movs	r2, #192	; 0xc0
 80033ec:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033f0:	2205      	movs	r2, #5
 80033f2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80033fc:	4803      	ldr	r0, [pc, #12]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033fe:	f004 ffdf 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200001b8 	.word	0x200001b8

08003410 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	603a      	str	r2, [r7, #0]
 800341a:	80fb      	strh	r3, [r7, #6]
 800341c:	460b      	mov	r3, r1
 800341e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <DrawChar+0x168>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4953      	ldr	r1, [pc, #332]	; (800357c <DrawChar+0x16c>)
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3308      	adds	r3, #8
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	88db      	ldrh	r3, [r3, #6]
 800343e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003440:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <DrawChar+0x168>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <DrawChar+0x16c>)
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3308      	adds	r3, #8
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	889b      	ldrh	r3, [r3, #4]
 8003456:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003458:	8a3b      	ldrh	r3, [r7, #16]
 800345a:	3307      	adds	r3, #7
 800345c:	2b00      	cmp	r3, #0
 800345e:	da00      	bge.n	8003462 <DrawChar+0x52>
 8003460:	3307      	adds	r3, #7
 8003462:	10db      	asrs	r3, r3, #3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	b2da      	uxtb	r2, r3
 800346a:	8a3b      	ldrh	r3, [r7, #16]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e076      	b.n	8003566 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003478:	8a3b      	ldrh	r3, [r7, #16]
 800347a:	3307      	adds	r3, #7
 800347c:	2b00      	cmp	r3, #0
 800347e:	da00      	bge.n	8003482 <DrawChar+0x72>
 8003480:	3307      	adds	r3, #7
 8003482:	10db      	asrs	r3, r3, #3
 8003484:	461a      	mov	r2, r3
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	fb03 f302 	mul.w	r3, r3, r2
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	4413      	add	r3, r2
 8003490:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003492:	8a3b      	ldrh	r3, [r7, #16]
 8003494:	3307      	adds	r3, #7
 8003496:	2b00      	cmp	r3, #0
 8003498:	da00      	bge.n	800349c <DrawChar+0x8c>
 800349a:	3307      	adds	r3, #7
 800349c:	10db      	asrs	r3, r3, #3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d002      	beq.n	80034a8 <DrawChar+0x98>
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d004      	beq.n	80034b0 <DrawChar+0xa0>
 80034a6:	e00c      	b.n	80034c2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	617b      	str	r3, [r7, #20]
      break;
 80034ae:	e016      	b.n	80034de <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	3201      	adds	r2, #1
 80034ba:	7812      	ldrb	r2, [r2, #0]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
      break;
 80034c0:	e00d      	b.n	80034de <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	041a      	lsls	r2, r3, #16
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3301      	adds	r3, #1
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	4313      	orrs	r3, r2
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	3202      	adds	r2, #2
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
      break;
 80034dc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e036      	b.n	8003552 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80034e4:	8a3a      	ldrh	r2, [r7, #16]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	1ad2      	subs	r2, r2, r3
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	4413      	add	r3, r2
 80034ee:	3b01      	subs	r3, #1
 80034f0:	2201      	movs	r2, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d012      	beq.n	8003526 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	b29a      	uxth	r2, r3
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	4413      	add	r3, r2
 8003508:	b298      	uxth	r0, r3
 800350a:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <DrawChar+0x168>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	491b      	ldr	r1, [pc, #108]	; (800357c <DrawChar+0x16c>)
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	88bb      	ldrh	r3, [r7, #4]
 800351e:	4619      	mov	r1, r3
 8003520:	f7ff fdbe 	bl	80030a0 <BSP_LCD_DrawPixel>
 8003524:	e012      	b.n	800354c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	b29a      	uxth	r2, r3
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	4413      	add	r3, r2
 800352e:	b298      	uxth	r0, r3
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <DrawChar+0x168>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4911      	ldr	r1, [pc, #68]	; (800357c <DrawChar+0x16c>)
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3304      	adds	r3, #4
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	88bb      	ldrh	r3, [r7, #4]
 8003546:	4619      	mov	r1, r3
 8003548:	f7ff fdaa 	bl	80030a0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	3301      	adds	r3, #1
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	8a3b      	ldrh	r3, [r7, #16]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	429a      	cmp	r2, r3
 8003558:	d3c4      	bcc.n	80034e4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800355a:	88bb      	ldrh	r3, [r7, #4]
 800355c:	3301      	adds	r3, #1
 800355e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3301      	adds	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	8a7b      	ldrh	r3, [r7, #18]
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	429a      	cmp	r2, r3
 800356c:	d384      	bcc.n	8003478 <DrawChar+0x68>
  }
}
 800356e:	bf00      	nop
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2000019c 	.word	0x2000019c
 800357c:	200001a0 	.word	0x200001a0

08003580 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <LL_FillBuffer+0x88>)
 8003590:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003594:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <LL_FillBuffer+0x8c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <LL_FillBuffer+0x90>)
 800359c:	2134      	movs	r1, #52	; 0x34
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3348      	adds	r3, #72	; 0x48
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d103      	bne.n	80035b4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80035ac:	4b16      	ldr	r3, [pc, #88]	; (8003608 <LL_FillBuffer+0x88>)
 80035ae:	2202      	movs	r2, #2
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	e002      	b.n	80035ba <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <LL_FillBuffer+0x88>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <LL_FillBuffer+0x88>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <LL_FillBuffer+0x88>)
 80035c2:	4a14      	ldr	r2, [pc, #80]	; (8003614 <LL_FillBuffer+0x94>)
 80035c4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80035c6:	4810      	ldr	r0, [pc, #64]	; (8003608 <LL_FillBuffer+0x88>)
 80035c8:	f001 fa40 	bl	8004a4c <HAL_DMA2D_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d115      	bne.n	80035fe <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	480c      	ldr	r0, [pc, #48]	; (8003608 <LL_FillBuffer+0x88>)
 80035d6:	f001 fca7 	bl	8004f28 <HAL_DMA2D_ConfigLayer>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10e      	bne.n	80035fe <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69f9      	ldr	r1, [r7, #28]
 80035ea:	4807      	ldr	r0, [pc, #28]	; (8003608 <LL_FillBuffer+0x88>)
 80035ec:	f001 fa78 	bl	8004ae0 <HAL_DMA2D_Start>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80035f6:	210a      	movs	r1, #10
 80035f8:	4803      	ldr	r0, [pc, #12]	; (8003608 <LL_FillBuffer+0x88>)
 80035fa:	f001 fa9c 	bl	8004b36 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000015c 	.word	0x2000015c
 800360c:	2000019c 	.word	0x2000019c
 8003610:	2000b02c 	.word	0x2000b02c
 8003614:	4002b000 	.word	0x4002b000

08003618 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800361c:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 800361e:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <BSP_SDRAM_Init+0xb0>)
 8003620:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <BSP_SDRAM_Init+0xb4>)
 8003624:	2202      	movs	r2, #2
 8003626:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003628:	4b28      	ldr	r3, [pc, #160]	; (80036cc <BSP_SDRAM_Init+0xb4>)
 800362a:	2207      	movs	r2, #7
 800362c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <BSP_SDRAM_Init+0xb4>)
 8003630:	2204      	movs	r2, #4
 8003632:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <BSP_SDRAM_Init+0xb4>)
 8003636:	2207      	movs	r2, #7
 8003638:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <BSP_SDRAM_Init+0xb4>)
 800363c:	2202      	movs	r2, #2
 800363e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003640:	4b22      	ldr	r3, [pc, #136]	; (80036cc <BSP_SDRAM_Init+0xb4>)
 8003642:	2202      	movs	r2, #2
 8003644:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <BSP_SDRAM_Init+0xb4>)
 8003648:	2202      	movs	r2, #2
 800364a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 800365a:	2204      	movs	r2, #4
 800365c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800365e:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 8003660:	2210      	movs	r2, #16
 8003662:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 800366c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003670:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003672:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 8003674:	2200      	movs	r2, #0
 8003676:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 800367a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800367e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003680:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 8003682:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 800368a:	2200      	movs	r2, #0
 800368c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800368e:	2100      	movs	r1, #0
 8003690:	480c      	ldr	r0, [pc, #48]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 8003692:	f000 f87f 	bl	8003794 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003696:	490d      	ldr	r1, [pc, #52]	; (80036cc <BSP_SDRAM_Init+0xb4>)
 8003698:	480a      	ldr	r0, [pc, #40]	; (80036c4 <BSP_SDRAM_Init+0xac>)
 800369a:	f006 f91d 	bl	80098d8 <HAL_SDRAM_Init>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <BSP_SDRAM_Init+0xb8>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e002      	b.n	80036b2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80036ac:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <BSP_SDRAM_Init+0xb8>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80036b2:	f240 6003 	movw	r0, #1539	; 0x603
 80036b6:	f000 f80d 	bl	80036d4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <BSP_SDRAM_Init+0xb8>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000b0d4 	.word	0x2000b0d4
 80036c8:	a0000140 	.word	0xa0000140
 80036cc:	2000023c 	.word	0x2000023c
 80036d0:	2000001c 	.word	0x2000001c

080036d4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80036e0:	4b2a      	ldr	r3, [pc, #168]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e8:	2210      	movs	r2, #16
 80036ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036ec:	4b27      	ldr	r3, [pc, #156]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80036f2:	4b26      	ldr	r3, [pc, #152]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80036f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036fc:	4923      	ldr	r1, [pc, #140]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fe:	4824      	ldr	r0, [pc, #144]	; (8003790 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003700:	f006 f91e 	bl	8009940 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003704:	2001      	movs	r0, #1
 8003706:	f000 f96b 	bl	80039e0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800370a:	4b20      	ldr	r3, [pc, #128]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370c:	2202      	movs	r2, #2
 800370e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003710:	4b1e      	ldr	r3, [pc, #120]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003712:	2210      	movs	r2, #16
 8003714:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003718:	2201      	movs	r2, #1
 800371a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800371c:	4b1b      	ldr	r3, [pc, #108]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003726:	4919      	ldr	r1, [pc, #100]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003728:	4819      	ldr	r0, [pc, #100]	; (8003790 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800372a:	f006 f909 	bl	8009940 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003730:	2203      	movs	r2, #3
 8003732:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003734:	4b15      	ldr	r3, [pc, #84]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003736:	2210      	movs	r2, #16
 8003738:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800373c:	2208      	movs	r2, #8
 800373e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003740:	4b12      	ldr	r3, [pc, #72]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800374a:	4910      	ldr	r1, [pc, #64]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374c:	4810      	ldr	r0, [pc, #64]	; (8003790 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800374e:	f006 f8f7 	bl	8009940 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003752:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003756:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375a:	2204      	movs	r2, #4
 800375c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003760:	2210      	movs	r2, #16
 8003762:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003766:	2201      	movs	r2, #1
 8003768:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a07      	ldr	r2, [pc, #28]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800376e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003774:	4905      	ldr	r1, [pc, #20]	; (800378c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003776:	4806      	ldr	r0, [pc, #24]	; (8003790 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003778:	f006 f8e2 	bl	8009940 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4804      	ldr	r0, [pc, #16]	; (8003790 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003780:	f006 f909 	bl	8009996 <HAL_SDRAM_ProgramRefreshRate>
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000258 	.word	0x20000258
 8003790:	2000b0d4 	.word	0x2000b0d4

08003794 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800379e:	4b70      	ldr	r3, [pc, #448]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	4a6f      	ldr	r2, [pc, #444]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6393      	str	r3, [r2, #56]	; 0x38
 80037aa:	4b6d      	ldr	r3, [pc, #436]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80037b6:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	4a69      	ldr	r2, [pc, #420]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037c0:	6313      	str	r3, [r2, #48]	; 0x30
 80037c2:	4b67      	ldr	r3, [pc, #412]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	4b64      	ldr	r3, [pc, #400]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4a63      	ldr	r2, [pc, #396]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b61      	ldr	r3, [pc, #388]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	623b      	str	r3, [r7, #32]
 80037e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037e6:	4b5e      	ldr	r3, [pc, #376]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	4a5d      	ldr	r2, [pc, #372]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	6313      	str	r3, [r2, #48]	; 0x30
 80037f2:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037fe:	4b58      	ldr	r3, [pc, #352]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a57      	ldr	r2, [pc, #348]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 8003804:	f043 0310 	orr.w	r3, r3, #16
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b55      	ldr	r3, [pc, #340]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003816:	4b52      	ldr	r3, [pc, #328]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4a51      	ldr	r2, [pc, #324]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 800381c:	f043 0320 	orr.w	r3, r3, #32
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4b4f      	ldr	r3, [pc, #316]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800382e:	4b4c      	ldr	r3, [pc, #304]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a4b      	ldr	r2, [pc, #300]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 8003834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b49      	ldr	r3, [pc, #292]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003846:	4b46      	ldr	r3, [pc, #280]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4a45      	ldr	r2, [pc, #276]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 800384c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003850:	6313      	str	r3, [r2, #48]	; 0x30
 8003852:	4b43      	ldr	r3, [pc, #268]	; (8003960 <BSP_SDRAM_MspInit+0x1cc>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800385e:	2302      	movs	r3, #2
 8003860:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003862:	2301      	movs	r3, #1
 8003864:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003866:	2302      	movs	r3, #2
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800386a:	230c      	movs	r3, #12
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800386e:	2308      	movs	r3, #8
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003876:	4619      	mov	r1, r3
 8003878:	483a      	ldr	r0, [pc, #232]	; (8003964 <BSP_SDRAM_MspInit+0x1d0>)
 800387a:	f001 fc83 	bl	8005184 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800387e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003888:	4619      	mov	r1, r3
 800388a:	4837      	ldr	r0, [pc, #220]	; (8003968 <BSP_SDRAM_MspInit+0x1d4>)
 800388c:	f001 fc7a 	bl	8005184 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003890:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800389a:	4619      	mov	r1, r3
 800389c:	4833      	ldr	r0, [pc, #204]	; (800396c <BSP_SDRAM_MspInit+0x1d8>)
 800389e:	f001 fc71 	bl	8005184 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80038a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80038a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ac:	4619      	mov	r1, r3
 80038ae:	4830      	ldr	r0, [pc, #192]	; (8003970 <BSP_SDRAM_MspInit+0x1dc>)
 80038b0:	f001 fc68 	bl	8005184 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80038b4:	f248 1333 	movw	r3, #33075	; 0x8133
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80038ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038be:	4619      	mov	r1, r3
 80038c0:	482c      	ldr	r0, [pc, #176]	; (8003974 <BSP_SDRAM_MspInit+0x1e0>)
 80038c2:	f001 fc5f 	bl	8005184 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80038c6:	2328      	movs	r3, #40	; 0x28
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80038ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ce:	4619      	mov	r1, r3
 80038d0:	4829      	ldr	r0, [pc, #164]	; (8003978 <BSP_SDRAM_MspInit+0x1e4>)
 80038d2:	f001 fc57 	bl	8005184 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80038d6:	4b29      	ldr	r3, [pc, #164]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80038e2:	4b26      	ldr	r3, [pc, #152]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 80038e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 80038ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038f0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038f2:	4b22      	ldr	r3, [pc, #136]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 80038f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038f8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 80038fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003900:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 8003904:	2200      	movs	r2, #0
 8003906:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 800390a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800390e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 8003912:	2200      	movs	r2, #0
 8003914:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003916:	4b19      	ldr	r3, [pc, #100]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 8003918:	2203      	movs	r2, #3
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 800391e:	2200      	movs	r2, #0
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003922:	4b16      	ldr	r3, [pc, #88]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 800392a:	4a15      	ldr	r2, [pc, #84]	; (8003980 <BSP_SDRAM_MspInit+0x1ec>)
 800392c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a12      	ldr	r2, [pc, #72]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
 8003934:	4a11      	ldr	r2, [pc, #68]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800393a:	4810      	ldr	r0, [pc, #64]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 800393c:	f000 fdee 	bl	800451c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003940:	480e      	ldr	r0, [pc, #56]	; (800397c <BSP_SDRAM_MspInit+0x1e8>)
 8003942:	f000 fd3d 	bl	80043c0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	210f      	movs	r1, #15
 800394a:	2038      	movs	r0, #56	; 0x38
 800394c:	f000 fbaa 	bl	80040a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003950:	2038      	movs	r0, #56	; 0x38
 8003952:	f000 fbc3 	bl	80040dc <HAL_NVIC_EnableIRQ>
}
 8003956:	bf00      	nop
 8003958:	3740      	adds	r7, #64	; 0x40
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	40020800 	.word	0x40020800
 8003968:	40020c00 	.word	0x40020c00
 800396c:	40021000 	.word	0x40021000
 8003970:	40021400 	.word	0x40021400
 8003974:	40021800 	.word	0x40021800
 8003978:	40021c00 	.word	0x40021c00
 800397c:	20000268 	.word	0x20000268
 8003980:	40026410 	.word	0x40026410

08003984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003988:	2003      	movs	r0, #3
 800398a:	f000 fb80 	bl	800408e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800398e:	2000      	movs	r0, #0
 8003990:	f7fe ff5a 	bl	8002848 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003994:	f7fe f8b2 	bl	8001afc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_IncTick+0x20>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_IncTick+0x24>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_IncTick+0x24>)
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000024 	.word	0x20000024
 80039c4:	2000b108 	.word	0x2000b108

080039c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return uwTick;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_GetTick+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000b108 	.word	0x2000b108

080039e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7ff ffee 	bl	80039c8 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d005      	beq.n	8003a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_Delay+0x40>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a06:	bf00      	nop
 8003a08:	f7ff ffde 	bl	80039c8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d8f7      	bhi.n	8003a08 <HAL_Delay+0x28>
  {
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000024 	.word	0x20000024

08003a24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e031      	b.n	8003a9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fe f882 	bl	8001b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d116      	bne.n	8003a90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_ADC_Init+0x84>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	f043 0202 	orr.w	r2, r3, #2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f964 	bl	8003d40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	f043 0201 	orr.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a8e:	e001      	b.n	8003a94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	ffffeefd 	.word	0xffffeefd

08003aac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x1c>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e12a      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x272>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b09      	cmp	r3, #9
 8003ad6:	d93a      	bls.n	8003b4e <HAL_ADC_ConfigChannel+0xa2>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae0:	d035      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	3b1e      	subs	r3, #30
 8003af8:	2207      	movs	r2, #7
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	400a      	ands	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a87      	ldr	r2, [pc, #540]	; (8003d2c <HAL_ADC_ConfigChannel+0x280>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10a      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68d9      	ldr	r1, [r3, #12]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	061a      	lsls	r2, r3, #24
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b26:	e035      	b.n	8003b94 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68d9      	ldr	r1, [r3, #12]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4618      	mov	r0, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4403      	add	r3, r0
 8003b40:	3b1e      	subs	r3, #30
 8003b42:	409a      	lsls	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b4c:	e022      	b.n	8003b94 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6919      	ldr	r1, [r3, #16]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	2207      	movs	r2, #7
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43da      	mvns	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	400a      	ands	r2, r1
 8003b70:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6919      	ldr	r1, [r3, #16]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	4618      	mov	r0, r3
 8003b84:	4603      	mov	r3, r0
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4403      	add	r3, r0
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b06      	cmp	r3, #6
 8003b9a:	d824      	bhi.n	8003be6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	3b05      	subs	r3, #5
 8003bae:	221f      	movs	r2, #31
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	400a      	ands	r2, r1
 8003bbc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3b05      	subs	r3, #5
 8003bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	635a      	str	r2, [r3, #52]	; 0x34
 8003be4:	e04c      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d824      	bhi.n	8003c38 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3b23      	subs	r3, #35	; 0x23
 8003c00:	221f      	movs	r2, #31
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	3b23      	subs	r3, #35	; 0x23
 8003c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	631a      	str	r2, [r3, #48]	; 0x30
 8003c36:	e023      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	3b41      	subs	r3, #65	; 0x41
 8003c4a:	221f      	movs	r2, #31
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43da      	mvns	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	400a      	ands	r2, r1
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4618      	mov	r0, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	3b41      	subs	r3, #65	; 0x41
 8003c74:	fa00 f203 	lsl.w	r2, r0, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <HAL_ADC_ConfigChannel+0x284>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10a      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x1f4>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c92:	d105      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003c94:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_ADC_ConfigChannel+0x288>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <HAL_ADC_ConfigChannel+0x288>)
 8003c9a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003c9e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <HAL_ADC_ConfigChannel+0x284>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d109      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x212>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b12      	cmp	r3, #18
 8003cb0:	d105      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_ADC_ConfigChannel+0x288>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <HAL_ADC_ConfigChannel+0x288>)
 8003cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cbc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <HAL_ADC_ConfigChannel+0x284>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d125      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x268>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <HAL_ADC_ConfigChannel+0x280>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <HAL_ADC_ConfigChannel+0x22e>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b11      	cmp	r3, #17
 8003cd8:	d11c      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003cda:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <HAL_ADC_ConfigChannel+0x288>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_ADC_ConfigChannel+0x288>)
 8003ce0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ce4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <HAL_ADC_ConfigChannel+0x280>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d111      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_ADC_ConfigChannel+0x28c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <HAL_ADC_ConfigChannel+0x290>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	0c9a      	lsrs	r2, r3, #18
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d06:	e002      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f9      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	10000012 	.word	0x10000012
 8003d30:	40012000 	.word	0x40012000
 8003d34:	40012300 	.word	0x40012300
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	431bde83 	.word	0x431bde83

08003d40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003d48:	4b78      	ldr	r3, [pc, #480]	; (8003f2c <ADC_Init+0x1ec>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4a77      	ldr	r2, [pc, #476]	; (8003f2c <ADC_Init+0x1ec>)
 8003d4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d52:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003d54:	4b75      	ldr	r3, [pc, #468]	; (8003f2c <ADC_Init+0x1ec>)
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4973      	ldr	r1, [pc, #460]	; (8003f2c <ADC_Init+0x1ec>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	021a      	lsls	r2, r3, #8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6899      	ldr	r1, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	4a58      	ldr	r2, [pc, #352]	; (8003f30 <ADC_Init+0x1f0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003de2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6899      	ldr	r1, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6899      	ldr	r1, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	e00f      	b.n	8003e3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0202 	bic.w	r2, r2, #2
 8003e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	005a      	lsls	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01b      	beq.n	8003ea0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	3b01      	subs	r3, #1
 8003e94:	035a      	lsls	r2, r3, #13
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	e007      	b.n	8003eb0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	051a      	lsls	r2, r3, #20
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6899      	ldr	r1, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ef2:	025a      	lsls	r2, r3, #9
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	029a      	lsls	r2, r3, #10
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	609a      	str	r2, [r3, #8]
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40012300 	.word	0x40012300
 8003f30:	0f000001 	.word	0x0f000001

08003f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <__NVIC_SetPriorityGrouping+0x40>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f50:	4013      	ands	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f62:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <__NVIC_SetPriorityGrouping+0x40>)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	60d3      	str	r3, [r2, #12]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000ed00 	.word	0xe000ed00
 8003f78:	05fa0000 	.word	0x05fa0000

08003f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <__NVIC_GetPriorityGrouping+0x18>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f003 0307 	and.w	r3, r3, #7
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db0b      	blt.n	8003fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	4907      	ldr	r1, [pc, #28]	; (8003fd0 <__NVIC_EnableIRQ+0x38>)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2001      	movs	r0, #1
 8003fba:	fa00 f202 	lsl.w	r2, r0, r2
 8003fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e100 	.word	0xe000e100

08003fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db0a      	blt.n	8003ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	490c      	ldr	r1, [pc, #48]	; (8004020 <__NVIC_SetPriority+0x4c>)
 8003fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff2:	0112      	lsls	r2, r2, #4
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ffc:	e00a      	b.n	8004014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4908      	ldr	r1, [pc, #32]	; (8004024 <__NVIC_SetPriority+0x50>)
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	3b04      	subs	r3, #4
 800400c:	0112      	lsls	r2, r2, #4
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	440b      	add	r3, r1
 8004012:	761a      	strb	r2, [r3, #24]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000e100 	.word	0xe000e100
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f1c3 0307 	rsb	r3, r3, #7
 8004042:	2b04      	cmp	r3, #4
 8004044:	bf28      	it	cs
 8004046:	2304      	movcs	r3, #4
 8004048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3304      	adds	r3, #4
 800404e:	2b06      	cmp	r3, #6
 8004050:	d902      	bls.n	8004058 <NVIC_EncodePriority+0x30>
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3b03      	subs	r3, #3
 8004056:	e000      	b.n	800405a <NVIC_EncodePriority+0x32>
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	401a      	ands	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004070:	f04f 31ff 	mov.w	r1, #4294967295
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	43d9      	mvns	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	4313      	orrs	r3, r2
         );
}
 8004082:	4618      	mov	r0, r3
 8004084:	3724      	adds	r7, #36	; 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ff4c 	bl	8003f34 <__NVIC_SetPriorityGrouping>
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040b6:	f7ff ff61 	bl	8003f7c <__NVIC_GetPriorityGrouping>
 80040ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	f7ff ffb1 	bl	8004028 <NVIC_EncodePriority>
 80040c6:	4602      	mov	r2, r0
 80040c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ff80 	bl	8003fd4 <__NVIC_SetPriority>
}
 80040d4:	bf00      	nop
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff ff54 	bl	8003f98 <__NVIC_EnableIRQ>
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e054      	b.n	80041b4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	7f5b      	ldrb	r3, [r3, #29]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd fd70 	bl	8001c00 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	791b      	ldrb	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10c      	bne.n	8004148 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a22      	ldr	r2, [pc, #136]	; (80041bc <HAL_CRC_Init+0xc4>)
 8004134:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0218 	bic.w	r2, r2, #24
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	e00c      	b.n	8004162 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6899      	ldr	r1, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	461a      	mov	r2, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f834 	bl	80041c0 <HAL_CRCEx_Polynomial_Set>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e028      	b.n	80041b4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	795b      	ldrb	r3, [r3, #5]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d105      	bne.n	8004176 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	611a      	str	r2, [r3, #16]
 8004174:	e004      	b.n	8004180 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6912      	ldr	r2, [r2, #16]
 800417e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699a      	ldr	r2, [r3, #24]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	04c11db7 	.word	0x04c11db7

080041c0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80041d0:	231f      	movs	r3, #31
 80041d2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80041d4:	bf00      	nop
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1e5a      	subs	r2, r3, #1
 80041da:	613a      	str	r2, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d009      	beq.n	80041f4 <HAL_CRCEx_Polynomial_Set+0x34>
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b18      	cmp	r3, #24
 80041f8:	d846      	bhi.n	8004288 <HAL_CRCEx_Polynomial_Set+0xc8>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <HAL_CRCEx_Polynomial_Set+0x40>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	0800428f 	.word	0x0800428f
 8004204:	08004289 	.word	0x08004289
 8004208:	08004289 	.word	0x08004289
 800420c:	08004289 	.word	0x08004289
 8004210:	08004289 	.word	0x08004289
 8004214:	08004289 	.word	0x08004289
 8004218:	08004289 	.word	0x08004289
 800421c:	08004289 	.word	0x08004289
 8004220:	0800427d 	.word	0x0800427d
 8004224:	08004289 	.word	0x08004289
 8004228:	08004289 	.word	0x08004289
 800422c:	08004289 	.word	0x08004289
 8004230:	08004289 	.word	0x08004289
 8004234:	08004289 	.word	0x08004289
 8004238:	08004289 	.word	0x08004289
 800423c:	08004289 	.word	0x08004289
 8004240:	08004271 	.word	0x08004271
 8004244:	08004289 	.word	0x08004289
 8004248:	08004289 	.word	0x08004289
 800424c:	08004289 	.word	0x08004289
 8004250:	08004289 	.word	0x08004289
 8004254:	08004289 	.word	0x08004289
 8004258:	08004289 	.word	0x08004289
 800425c:	08004289 	.word	0x08004289
 8004260:	08004265 	.word	0x08004265
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b06      	cmp	r3, #6
 8004268:	d913      	bls.n	8004292 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800426e:	e010      	b.n	8004292 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b07      	cmp	r3, #7
 8004274:	d90f      	bls.n	8004296 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800427a:	e00c      	b.n	8004296 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b0f      	cmp	r3, #15
 8004280:	d90b      	bls.n	800429a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004286:	e008      	b.n	800429a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
      break;
 800428c:	e006      	b.n	800429c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800428e:	bf00      	nop
 8004290:	e004      	b.n	800429c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800429a:	bf00      	nop
  }
  if (status == HAL_OK)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 0118 	bic.w	r1, r3, #24
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80042be:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e069      	b.n	80043b2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fd fca8 	bl	8001c40 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <HAL_DCMI_Init+0xf0>)
 8004312:	400b      	ands	r3, r1
 8004314:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800432a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004336:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004342:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800434e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800435a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b10      	cmp	r3, #16
 800436a:	d112      	bne.n	8004392 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7f1b      	ldrb	r3, [r3, #28]
 8004370:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	7f5b      	ldrb	r3, [r3, #29]
 8004376:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004378:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	7f9b      	ldrb	r3, [r3, #30]
 800437e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004380:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7fdb      	ldrb	r3, [r3, #31]
 8004388:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800438e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004390:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 021e 	orr.w	r2, r2, #30
 80043a0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	ffe0f007 	.word	0xffe0f007

080043c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043cc:	f7ff fafc 	bl	80039c8 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e099      	b.n	8004510 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043fc:	e00f      	b.n	800441e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043fe:	f7ff fae3 	bl	80039c8 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b05      	cmp	r3, #5
 800440a:	d908      	bls.n	800441e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2203      	movs	r2, #3
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e078      	b.n	8004510 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e8      	bne.n	80043fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4b38      	ldr	r3, [pc, #224]	; (8004518 <HAL_DMA_Init+0x158>)
 8004438:	4013      	ands	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800444a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	2b04      	cmp	r3, #4
 8004476:	d107      	bne.n	8004488 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	4313      	orrs	r3, r2
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0307 	bic.w	r3, r3, #7
 800449e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d117      	bne.n	80044e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00e      	beq.n	80044e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fa47 	bl	8004958 <DMA_CheckFifoParam>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2240      	movs	r2, #64	; 0x40
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044de:	2301      	movs	r3, #1
 80044e0:	e016      	b.n	8004510 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f9fe 	bl	80048ec <DMA_CalcBaseAndBitshift>
 80044f0:	4603      	mov	r3, r0
 80044f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	223f      	movs	r2, #63	; 0x3f
 80044fa:	409a      	lsls	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	f010803f 	.word	0xf010803f

0800451c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e050      	b.n	80045d0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d101      	bne.n	800453e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800453a:	2302      	movs	r3, #2
 800453c:	e048      	b.n	80045d0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2200      	movs	r2, #0
 800456c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2221      	movs	r2, #33	; 0x21
 800457c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9b4 	bl	80048ec <DMA_CalcBaseAndBitshift>
 8004584:	4603      	mov	r3, r0
 8004586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458c:	223f      	movs	r2, #63	; 0x3f
 800458e:	409a      	lsls	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80045e4:	4b92      	ldr	r3, [pc, #584]	; (8004830 <HAL_DMA_IRQHandler+0x258>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a92      	ldr	r2, [pc, #584]	; (8004834 <HAL_DMA_IRQHandler+0x25c>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	0a9b      	lsrs	r3, r3, #10
 80045f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004602:	2208      	movs	r2, #8
 8004604:	409a      	lsls	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01a      	beq.n	8004644 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0204 	bic.w	r2, r2, #4
 800462a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004630:	2208      	movs	r2, #8
 8004632:	409a      	lsls	r2, r3
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	f043 0201 	orr.w	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004648:	2201      	movs	r2, #1
 800464a:	409a      	lsls	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d012      	beq.n	800467a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004666:	2201      	movs	r2, #1
 8004668:	409a      	lsls	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004672:	f043 0202 	orr.w	r2, r3, #2
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467e:	2204      	movs	r2, #4
 8004680:	409a      	lsls	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d012      	beq.n	80046b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00b      	beq.n	80046b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	2204      	movs	r2, #4
 800469e:	409a      	lsls	r2, r3
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	f043 0204 	orr.w	r2, r3, #4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b4:	2210      	movs	r2, #16
 80046b6:	409a      	lsls	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d043      	beq.n	8004748 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d03c      	beq.n	8004748 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	2210      	movs	r2, #16
 80046d4:	409a      	lsls	r2, r3
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d018      	beq.n	800471a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d024      	beq.n	8004748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	4798      	blx	r3
 8004706:	e01f      	b.n	8004748 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
 8004718:	e016      	b.n	8004748 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0208 	bic.w	r2, r2, #8
 8004736:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	2220      	movs	r2, #32
 800474e:	409a      	lsls	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 808e 	beq.w	8004876 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8086 	beq.w	8004876 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	2220      	movs	r2, #32
 8004770:	409a      	lsls	r2, r3
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b05      	cmp	r3, #5
 8004780:	d136      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0216 	bic.w	r2, r2, #22
 8004790:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <HAL_DMA_IRQHandler+0x1da>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0208 	bic.w	r2, r2, #8
 80047c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	223f      	movs	r2, #63	; 0x3f
 80047c8:	409a      	lsls	r2, r3
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d07d      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
        }
        return;
 80047ee:	e078      	b.n	80048e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01c      	beq.n	8004838 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d108      	bne.n	800481e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	2b00      	cmp	r3, #0
 8004812:	d030      	beq.n	8004876 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
 800481c:	e02b      	b.n	8004876 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d027      	beq.n	8004876 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
 800482e:	e022      	b.n	8004876 <HAL_DMA_IRQHandler+0x29e>
 8004830:	20000000 	.word	0x20000000
 8004834:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10f      	bne.n	8004866 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0210 	bic.w	r2, r2, #16
 8004854:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	2b00      	cmp	r3, #0
 800487c:	d032      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d022      	beq.n	80048d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2205      	movs	r2, #5
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	3301      	adds	r3, #1
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d307      	bcc.n	80048be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f2      	bne.n	80048a2 <HAL_DMA_IRQHandler+0x2ca>
 80048bc:	e000      	b.n	80048c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80048be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
 80048e0:	e000      	b.n	80048e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80048e2:	bf00      	nop
    }
  }
}
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop

080048ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	3b10      	subs	r3, #16
 80048fc:	4a13      	ldr	r2, [pc, #76]	; (800494c <DMA_CalcBaseAndBitshift+0x60>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <DMA_CalcBaseAndBitshift+0x64>)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b03      	cmp	r3, #3
 8004918:	d908      	bls.n	800492c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <DMA_CalcBaseAndBitshift+0x68>)
 8004922:	4013      	ands	r3, r2
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	659a      	str	r2, [r3, #88]	; 0x58
 800492a:	e006      	b.n	800493a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <DMA_CalcBaseAndBitshift+0x68>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	aaaaaaab 	.word	0xaaaaaaab
 8004950:	08015c20 	.word	0x08015c20
 8004954:	fffffc00 	.word	0xfffffc00

08004958 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11f      	bne.n	80049b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d855      	bhi.n	8004a24 <DMA_CheckFifoParam+0xcc>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <DMA_CheckFifoParam+0x28>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	08004991 	.word	0x08004991
 8004984:	080049a3 	.word	0x080049a3
 8004988:	08004991 	.word	0x08004991
 800498c:	08004a25 	.word	0x08004a25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d045      	beq.n	8004a28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a0:	e042      	b.n	8004a28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049aa:	d13f      	bne.n	8004a2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b0:	e03c      	b.n	8004a2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ba:	d121      	bne.n	8004a00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d836      	bhi.n	8004a30 <DMA_CheckFifoParam+0xd8>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <DMA_CheckFifoParam+0x70>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	080049d9 	.word	0x080049d9
 80049cc:	080049df 	.word	0x080049df
 80049d0:	080049d9 	.word	0x080049d9
 80049d4:	080049f1 	.word	0x080049f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
      break;
 80049dc:	e02f      	b.n	8004a3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d024      	beq.n	8004a34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ee:	e021      	b.n	8004a34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049f8:	d11e      	bne.n	8004a38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049fe:	e01b      	b.n	8004a38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d902      	bls.n	8004a0c <DMA_CheckFifoParam+0xb4>
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d003      	beq.n	8004a12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a0a:	e018      	b.n	8004a3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a10:	e015      	b.n	8004a3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00e      	beq.n	8004a3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
      break;
 8004a22:	e00b      	b.n	8004a3c <DMA_CheckFifoParam+0xe4>
      break;
 8004a24:	bf00      	nop
 8004a26:	e00a      	b.n	8004a3e <DMA_CheckFifoParam+0xe6>
      break;
 8004a28:	bf00      	nop
 8004a2a:	e008      	b.n	8004a3e <DMA_CheckFifoParam+0xe6>
      break;
 8004a2c:	bf00      	nop
 8004a2e:	e006      	b.n	8004a3e <DMA_CheckFifoParam+0xe6>
      break;
 8004a30:	bf00      	nop
 8004a32:	e004      	b.n	8004a3e <DMA_CheckFifoParam+0xe6>
      break;
 8004a34:	bf00      	nop
 8004a36:	e002      	b.n	8004a3e <DMA_CheckFifoParam+0xe6>
      break;   
 8004a38:	bf00      	nop
 8004a3a:	e000      	b.n	8004a3e <DMA_CheckFifoParam+0xe6>
      break;
 8004a3c:	bf00      	nop
    }
  } 
  
  return status; 
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e039      	b.n	8004ad2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd f9a2 	bl	8001dbc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9c:	f023 0107 	bic.w	r1, r3, #7
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <HAL_DMA2D_Init+0x90>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68d1      	ldr	r1, [r2, #12]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	ffffc000 	.word	0xffffc000

08004ae0 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_DMA2D_Start+0x1c>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e018      	b.n	8004b2e <HAL_DMA2D_Start+0x4e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fa98 	bl	800504c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d056      	beq.n	8004c00 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004b52:	f7fe ff39 	bl	80039c8 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004b58:	e04b      	b.n	8004bf2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d023      	beq.n	8004bb4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	f043 0202 	orr.w	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b90:	f043 0201 	orr.w	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2221      	movs	r2, #33	; 0x21
 8004b9e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0a5      	b.n	8004d00 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d01a      	beq.n	8004bf2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004bbc:	f7fe ff04 	bl	80039c8 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d302      	bcc.n	8004bd2 <HAL_DMA2D_PollForTransfer+0x9c>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2203      	movs	r2, #3
 8004be2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e086      	b.n	8004d00 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ac      	beq.n	8004b5a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d061      	beq.n	8004ce6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c22:	f7fe fed1 	bl	80039c8 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004c28:	e056      	b.n	8004cd8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d02e      	beq.n	8004c9a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	f043 0204 	orr.w	r2, r3, #4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	f043 0202 	orr.w	r2, r3, #2
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	f043 0201 	orr.w	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2229      	movs	r2, #41	; 0x29
 8004c84:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e032      	b.n	8004d00 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d01a      	beq.n	8004cd8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004ca2:	f7fe fe91 	bl	80039c8 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <HAL_DMA2D_PollForTransfer+0x182>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10f      	bne.n	8004cd8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbc:	f043 0220 	orr.w	r2, r3, #32
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e013      	b.n	8004d00 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0a1      	beq.n	8004c2a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2212      	movs	r2, #18
 8004cec:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d026      	beq.n	8004d78 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d021      	beq.n	8004d78 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d42:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	f043 0201 	orr.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2201      	movs	r2, #1
 8004d56:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d026      	beq.n	8004dd0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d021      	beq.n	8004dd0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2220      	movs	r2, #32
 8004da2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	f043 0202 	orr.w	r2, r3, #2
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2204      	movs	r2, #4
 8004db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d026      	beq.n	8004e28 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d021      	beq.n	8004e28 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004df2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	f043 0204 	orr.w	r2, r3, #4
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d013      	beq.n	8004e5a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00e      	beq.n	8004e5a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2204      	movs	r2, #4
 8004e52:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f853 	bl	8004f00 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d024      	beq.n	8004eae <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01f      	beq.n	8004eae <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e7c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2202      	movs	r2, #2
 8004e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01f      	beq.n	8004ef8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01a      	beq.n	8004ef8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ed0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2210      	movs	r2, #16
 8004ed8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f80e 	bl	8004f14 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_DMA2D_ConfigLayer+0x20>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e079      	b.n	800503c <HAL_DMA2D_ConfigLayer+0x114>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	3318      	adds	r3, #24
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004f72:	4b35      	ldr	r3, [pc, #212]	; (8005048 <HAL_DMA2D_ConfigLayer+0x120>)
 8004f74:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b0a      	cmp	r3, #10
 8004f7c:	d003      	beq.n	8004f86 <HAL_DMA2D_ConfigLayer+0x5e>
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b09      	cmp	r3, #9
 8004f84:	d107      	bne.n	8004f96 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e005      	b.n	8004fa2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	061b      	lsls	r3, r3, #24
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d120      	bne.n	8004fea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	ea02 0103 	and.w	r1, r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b0a      	cmp	r3, #10
 8004fd0:	d003      	beq.n	8004fda <HAL_DMA2D_ConfigLayer+0xb2>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b09      	cmp	r3, #9
 8004fd8:	d127      	bne.n	800502a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fe8:	e01f      	b.n	800502a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	ea02 0103 	and.w	r1, r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b0a      	cmp	r3, #10
 8005012:	d003      	beq.n	800501c <HAL_DMA2D_ConfigLayer+0xf4>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b09      	cmp	r3, #9
 800501a:	d106      	bne.n	800502a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005028:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	ff03000f 	.word	0xff03000f

0800504c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800504c:	b480      	push	{r7}
 800504e:	b08b      	sub	sp, #44	; 0x2c
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005060:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	041a      	lsls	r2, r3, #16
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	431a      	orrs	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005084:	d174      	bne.n	8005170 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800508c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005094:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800509c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d108      	bne.n	80050be <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
 80050bc:	e053      	b.n	8005166 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d106      	bne.n	80050d4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
 80050d2:	e048      	b.n	8005166 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d111      	bne.n	8005100 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	0cdb      	lsrs	r3, r3, #19
 80050e0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	0a9b      	lsrs	r3, r3, #10
 80050e6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	08db      	lsrs	r3, r3, #3
 80050ec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	02db      	lsls	r3, r3, #11
 80050f6:	4313      	orrs	r3, r2
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
 80050fe:	e032      	b.n	8005166 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d117      	bne.n	8005138 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	0fdb      	lsrs	r3, r3, #31
 800510c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	0cdb      	lsrs	r3, r3, #19
 8005112:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	0adb      	lsrs	r3, r3, #11
 8005118:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	08db      	lsrs	r3, r3, #3
 800511e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	029b      	lsls	r3, r3, #10
 8005128:	431a      	orrs	r2, r3
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	03db      	lsls	r3, r3, #15
 800512e:	4313      	orrs	r3, r2
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
 8005136:	e016      	b.n	8005166 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	0f1b      	lsrs	r3, r3, #28
 800513c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	0d1b      	lsrs	r3, r3, #20
 8005142:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	0b1b      	lsrs	r3, r3, #12
 8005148:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	011a      	lsls	r2, r3, #4
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	431a      	orrs	r2, r3
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	031b      	lsls	r3, r3, #12
 800515e:	4313      	orrs	r3, r2
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800516e:	e003      	b.n	8005178 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	60da      	str	r2, [r3, #12]
}
 8005178:	bf00      	nop
 800517a:	372c      	adds	r7, #44	; 0x2c
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	e175      	b.n	8005490 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80051a4:	2201      	movs	r2, #1
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4013      	ands	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	429a      	cmp	r2, r3
 80051be:	f040 8164 	bne.w	800548a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d00b      	beq.n	80051e2 <HAL_GPIO_Init+0x5e>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d007      	beq.n	80051e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051d6:	2b11      	cmp	r3, #17
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b12      	cmp	r3, #18
 80051e0:	d130      	bne.n	8005244 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	2203      	movs	r2, #3
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005218:	2201      	movs	r2, #1
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 0201 	and.w	r2, r3, #1
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	2203      	movs	r2, #3
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	43db      	mvns	r3, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4013      	ands	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d003      	beq.n	8005284 <HAL_GPIO_Init+0x100>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b12      	cmp	r3, #18
 8005282:	d123      	bne.n	80052cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	08da      	lsrs	r2, r3, #3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3208      	adds	r2, #8
 800528c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	220f      	movs	r2, #15
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	08da      	lsrs	r2, r3, #3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3208      	adds	r2, #8
 80052c6:	69b9      	ldr	r1, [r7, #24]
 80052c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	2203      	movs	r2, #3
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 0203 	and.w	r2, r3, #3
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80be 	beq.w	800548a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530e:	4b65      	ldr	r3, [pc, #404]	; (80054a4 <HAL_GPIO_Init+0x320>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	4a64      	ldr	r2, [pc, #400]	; (80054a4 <HAL_GPIO_Init+0x320>)
 8005314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005318:	6453      	str	r3, [r2, #68]	; 0x44
 800531a:	4b62      	ldr	r3, [pc, #392]	; (80054a4 <HAL_GPIO_Init+0x320>)
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005326:	4a60      	ldr	r2, [pc, #384]	; (80054a8 <HAL_GPIO_Init+0x324>)
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	3302      	adds	r3, #2
 800532e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	220f      	movs	r2, #15
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4013      	ands	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a57      	ldr	r2, [pc, #348]	; (80054ac <HAL_GPIO_Init+0x328>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d037      	beq.n	80053c2 <HAL_GPIO_Init+0x23e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a56      	ldr	r2, [pc, #344]	; (80054b0 <HAL_GPIO_Init+0x32c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d031      	beq.n	80053be <HAL_GPIO_Init+0x23a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a55      	ldr	r2, [pc, #340]	; (80054b4 <HAL_GPIO_Init+0x330>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d02b      	beq.n	80053ba <HAL_GPIO_Init+0x236>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a54      	ldr	r2, [pc, #336]	; (80054b8 <HAL_GPIO_Init+0x334>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d025      	beq.n	80053b6 <HAL_GPIO_Init+0x232>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a53      	ldr	r2, [pc, #332]	; (80054bc <HAL_GPIO_Init+0x338>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01f      	beq.n	80053b2 <HAL_GPIO_Init+0x22e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a52      	ldr	r2, [pc, #328]	; (80054c0 <HAL_GPIO_Init+0x33c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d019      	beq.n	80053ae <HAL_GPIO_Init+0x22a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a51      	ldr	r2, [pc, #324]	; (80054c4 <HAL_GPIO_Init+0x340>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_GPIO_Init+0x226>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a50      	ldr	r2, [pc, #320]	; (80054c8 <HAL_GPIO_Init+0x344>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00d      	beq.n	80053a6 <HAL_GPIO_Init+0x222>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a4f      	ldr	r2, [pc, #316]	; (80054cc <HAL_GPIO_Init+0x348>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <HAL_GPIO_Init+0x21e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a4e      	ldr	r2, [pc, #312]	; (80054d0 <HAL_GPIO_Init+0x34c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d101      	bne.n	800539e <HAL_GPIO_Init+0x21a>
 800539a:	2309      	movs	r3, #9
 800539c:	e012      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 800539e:	230a      	movs	r3, #10
 80053a0:	e010      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 80053a2:	2308      	movs	r3, #8
 80053a4:	e00e      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 80053a6:	2307      	movs	r3, #7
 80053a8:	e00c      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 80053aa:	2306      	movs	r3, #6
 80053ac:	e00a      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 80053ae:	2305      	movs	r3, #5
 80053b0:	e008      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 80053b2:	2304      	movs	r3, #4
 80053b4:	e006      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 80053b6:	2303      	movs	r3, #3
 80053b8:	e004      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e002      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <HAL_GPIO_Init+0x240>
 80053c2:	2300      	movs	r3, #0
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	f002 0203 	and.w	r2, r2, #3
 80053ca:	0092      	lsls	r2, r2, #2
 80053cc:	4093      	lsls	r3, r2
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80053d4:	4934      	ldr	r1, [pc, #208]	; (80054a8 <HAL_GPIO_Init+0x324>)
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	3302      	adds	r3, #2
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053e2:	4b3c      	ldr	r3, [pc, #240]	; (80054d4 <HAL_GPIO_Init+0x350>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4013      	ands	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005406:	4a33      	ldr	r2, [pc, #204]	; (80054d4 <HAL_GPIO_Init+0x350>)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800540c:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <HAL_GPIO_Init+0x350>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	43db      	mvns	r3, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4013      	ands	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005430:	4a28      	ldr	r2, [pc, #160]	; (80054d4 <HAL_GPIO_Init+0x350>)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <HAL_GPIO_Init+0x350>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	43db      	mvns	r3, r3
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	4013      	ands	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800545a:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <HAL_GPIO_Init+0x350>)
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005460:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <HAL_GPIO_Init+0x350>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	43db      	mvns	r3, r3
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	4013      	ands	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005484:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <HAL_GPIO_Init+0x350>)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	3301      	adds	r3, #1
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b0f      	cmp	r3, #15
 8005494:	f67f ae86 	bls.w	80051a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005498:	bf00      	nop
 800549a:	3724      	adds	r7, #36	; 0x24
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40013800 	.word	0x40013800
 80054ac:	40020000 	.word	0x40020000
 80054b0:	40020400 	.word	0x40020400
 80054b4:	40020800 	.word	0x40020800
 80054b8:	40020c00 	.word	0x40020c00
 80054bc:	40021000 	.word	0x40021000
 80054c0:	40021400 	.word	0x40021400
 80054c4:	40021800 	.word	0x40021800
 80054c8:	40021c00 	.word	0x40021c00
 80054cc:	40022000 	.word	0x40022000
 80054d0:	40022400 	.word	0x40022400
 80054d4:	40013c00 	.word	0x40013c00

080054d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	807b      	strh	r3, [r7, #2]
 80054e4:	4613      	mov	r3, r2
 80054e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054e8:	787b      	ldrb	r3, [r7, #1]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ee:	887a      	ldrh	r2, [r7, #2]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80054f4:	e003      	b.n	80054fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80054f6:	887b      	ldrh	r3, [r7, #2]
 80054f8:	041a      	lsls	r2, r3, #16
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	619a      	str	r2, [r3, #24]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800550a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550c:	b08f      	sub	sp, #60	; 0x3c
 800550e:	af0a      	add	r7, sp, #40	; 0x28
 8005510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e054      	b.n	80055c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f00c f938 	bl	80117ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2203      	movs	r2, #3
 8005540:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f006 f8c7 	bl	800b6ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	687e      	ldr	r6, [r7, #4]
 8005568:	466d      	mov	r5, sp
 800556a:	f106 0410 	add.w	r4, r6, #16
 800556e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005576:	e894 0003 	ldmia.w	r4, {r0, r1}
 800557a:	e885 0003 	stmia.w	r5, {r0, r1}
 800557e:	1d33      	adds	r3, r6, #4
 8005580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005582:	6838      	ldr	r0, [r7, #0]
 8005584:	f006 f84a 	bl	800b61c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2101      	movs	r1, #1
 800558e:	4618      	mov	r0, r3
 8005590:	f006 f8be 	bl	800b710 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	687e      	ldr	r6, [r7, #4]
 800559c:	466d      	mov	r5, sp
 800559e:	f106 0410 	add.w	r4, r6, #16
 80055a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80055b2:	1d33      	adds	r3, r6, #4
 80055b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055b6:	6838      	ldr	r0, [r7, #0]
 80055b8:	f006 f9d0 	bl	800b95c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055ce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80055ce:	b590      	push	{r4, r7, lr}
 80055d0:	b089      	sub	sp, #36	; 0x24
 80055d2:	af04      	add	r7, sp, #16
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	461a      	mov	r2, r3
 80055dc:	4603      	mov	r3, r0
 80055de:	70fb      	strb	r3, [r7, #3]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70bb      	strb	r3, [r7, #2]
 80055e4:	4613      	mov	r3, r2
 80055e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_HCD_HC_Init+0x28>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e07f      	b.n	80056f6 <HAL_HCD_HC_Init+0x128>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	440b      	add	r3, r1
 800560c:	333d      	adds	r3, #61	; 0x3d
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	440b      	add	r3, r1
 8005620:	3338      	adds	r3, #56	; 0x38
 8005622:	787a      	ldrb	r2, [r7, #1]
 8005624:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005626:	78fa      	ldrb	r2, [r7, #3]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	440b      	add	r3, r1
 8005634:	3340      	adds	r3, #64	; 0x40
 8005636:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005638:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800563a:	78fa      	ldrb	r2, [r7, #3]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	440b      	add	r3, r1
 8005648:	3339      	adds	r3, #57	; 0x39
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800564e:	78fa      	ldrb	r2, [r7, #3]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	440b      	add	r3, r1
 800565c:	333f      	adds	r3, #63	; 0x3f
 800565e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	78bb      	ldrb	r3, [r7, #2]
 8005668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800566c:	b2d8      	uxtb	r0, r3
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	440b      	add	r3, r1
 800567a:	333a      	adds	r3, #58	; 0x3a
 800567c:	4602      	mov	r2, r0
 800567e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005680:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005684:	2b00      	cmp	r3, #0
 8005686:	da0a      	bge.n	800569e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	440b      	add	r3, r1
 8005696:	333b      	adds	r3, #59	; 0x3b
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	e009      	b.n	80056b2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	440b      	add	r3, r1
 80056ac:	333b      	adds	r3, #59	; 0x3b
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80056b2:	78fa      	ldrb	r2, [r7, #3]
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	440b      	add	r3, r1
 80056c0:	333c      	adds	r3, #60	; 0x3c
 80056c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80056c6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	787c      	ldrb	r4, [r7, #1]
 80056ce:	78ba      	ldrb	r2, [r7, #2]
 80056d0:	78f9      	ldrb	r1, [r7, #3]
 80056d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056d4:	9302      	str	r3, [sp, #8]
 80056d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	4623      	mov	r3, r4
 80056e4:	f006 fab0 	bl	800bc48 <USB_HC_Init>
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd90      	pop	{r4, r7, pc}

080056fe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_HCD_HC_Halt+0x1e>
 8005718:	2302      	movs	r3, #2
 800571a:	e00f      	b.n	800573c <HAL_HCD_HC_Halt+0x3e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	4611      	mov	r1, r2
 800572c:	4618      	mov	r0, r3
 800572e:	f006 fcea 	bl	800c106 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	461a      	mov	r2, r3
 8005752:	4603      	mov	r3, r0
 8005754:	70fb      	strb	r3, [r7, #3]
 8005756:	460b      	mov	r3, r1
 8005758:	70bb      	strb	r3, [r7, #2]
 800575a:	4613      	mov	r3, r2
 800575c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	440b      	add	r3, r1
 800576c:	333b      	adds	r3, #59	; 0x3b
 800576e:	78ba      	ldrb	r2, [r7, #2]
 8005770:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	440b      	add	r3, r1
 8005780:	333f      	adds	r3, #63	; 0x3f
 8005782:	787a      	ldrb	r2, [r7, #1]
 8005784:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005786:	7c3b      	ldrb	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d114      	bne.n	80057b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	440b      	add	r3, r1
 800579a:	3342      	adds	r3, #66	; 0x42
 800579c:	2203      	movs	r2, #3
 800579e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	440b      	add	r3, r1
 80057ae:	333d      	adds	r3, #61	; 0x3d
 80057b0:	7f3a      	ldrb	r2, [r7, #28]
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	e009      	b.n	80057ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057b6:	78fa      	ldrb	r2, [r7, #3]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	440b      	add	r3, r1
 80057c4:	3342      	adds	r3, #66	; 0x42
 80057c6:	2202      	movs	r2, #2
 80057c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80057ca:	787b      	ldrb	r3, [r7, #1]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	f200 80d6 	bhi.w	800597e <HAL_HCD_HC_SubmitRequest+0x23a>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	080057e9 	.word	0x080057e9
 80057dc:	08005969 	.word	0x08005969
 80057e0:	08005855 	.word	0x08005855
 80057e4:	080058df 	.word	0x080058df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80057e8:	7c3b      	ldrb	r3, [r7, #16]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	f040 80c9 	bne.w	8005982 <HAL_HCD_HC_SubmitRequest+0x23e>
 80057f0:	78bb      	ldrb	r3, [r7, #2]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f040 80c5 	bne.w	8005982 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80057f8:	8b3b      	ldrh	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	440b      	add	r3, r1
 800580c:	3351      	adds	r3, #81	; 0x51
 800580e:	2201      	movs	r2, #1
 8005810:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	440b      	add	r3, r1
 8005820:	3351      	adds	r3, #81	; 0x51
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	440b      	add	r3, r1
 8005836:	3342      	adds	r3, #66	; 0x42
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800583c:	e0a1      	b.n	8005982 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800583e:	78fa      	ldrb	r2, [r7, #3]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	440b      	add	r3, r1
 800584c:	3342      	adds	r3, #66	; 0x42
 800584e:	2202      	movs	r2, #2
 8005850:	701a      	strb	r2, [r3, #0]
      break;
 8005852:	e096      	b.n	8005982 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005854:	78bb      	ldrb	r3, [r7, #2]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d120      	bne.n	800589c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	440b      	add	r3, r1
 8005868:	3351      	adds	r3, #81	; 0x51
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005870:	78fa      	ldrb	r2, [r7, #3]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	440b      	add	r3, r1
 800587e:	3342      	adds	r3, #66	; 0x42
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005884:	e07e      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005886:	78fa      	ldrb	r2, [r7, #3]
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	440b      	add	r3, r1
 8005894:	3342      	adds	r3, #66	; 0x42
 8005896:	2202      	movs	r2, #2
 8005898:	701a      	strb	r2, [r3, #0]
      break;
 800589a:	e073      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	440b      	add	r3, r1
 80058aa:	3350      	adds	r3, #80	; 0x50
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	440b      	add	r3, r1
 80058c0:	3342      	adds	r3, #66	; 0x42
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
      break;
 80058c6:	e05d      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058c8:	78fa      	ldrb	r2, [r7, #3]
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	440b      	add	r3, r1
 80058d6:	3342      	adds	r3, #66	; 0x42
 80058d8:	2202      	movs	r2, #2
 80058da:	701a      	strb	r2, [r3, #0]
      break;
 80058dc:	e052      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80058de:	78bb      	ldrb	r3, [r7, #2]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d120      	bne.n	8005926 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	440b      	add	r3, r1
 80058f2:	3351      	adds	r3, #81	; 0x51
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058fa:	78fa      	ldrb	r2, [r7, #3]
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	440b      	add	r3, r1
 8005908:	3342      	adds	r3, #66	; 0x42
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800590e:	e039      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	440b      	add	r3, r1
 800591e:	3342      	adds	r3, #66	; 0x42
 8005920:	2202      	movs	r2, #2
 8005922:	701a      	strb	r2, [r3, #0]
      break;
 8005924:	e02e      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	440b      	add	r3, r1
 8005934:	3350      	adds	r3, #80	; 0x50
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	440b      	add	r3, r1
 800594a:	3342      	adds	r3, #66	; 0x42
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
      break;
 8005950:	e018      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005952:	78fa      	ldrb	r2, [r7, #3]
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	440b      	add	r3, r1
 8005960:	3342      	adds	r3, #66	; 0x42
 8005962:	2202      	movs	r2, #2
 8005964:	701a      	strb	r2, [r3, #0]
      break;
 8005966:	e00d      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005968:	78fa      	ldrb	r2, [r7, #3]
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	440b      	add	r3, r1
 8005976:	3342      	adds	r3, #66	; 0x42
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
      break;
 800597c:	e002      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005982:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005984:	78fa      	ldrb	r2, [r7, #3]
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	440b      	add	r3, r1
 8005992:	3344      	adds	r3, #68	; 0x44
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005998:	78fa      	ldrb	r2, [r7, #3]
 800599a:	8b39      	ldrh	r1, [r7, #24]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4403      	add	r3, r0
 80059a8:	3348      	adds	r3, #72	; 0x48
 80059aa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	440b      	add	r3, r1
 80059ba:	335c      	adds	r3, #92	; 0x5c
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	440b      	add	r3, r1
 80059ce:	334c      	adds	r3, #76	; 0x4c
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80059d4:	78fa      	ldrb	r2, [r7, #3]
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	440b      	add	r3, r1
 80059e2:	3339      	adds	r3, #57	; 0x39
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80059e8:	78fa      	ldrb	r2, [r7, #3]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	440b      	add	r3, r1
 80059f6:	335d      	adds	r3, #93	; 0x5d
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	3338      	adds	r3, #56	; 0x38
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	18d1      	adds	r1, r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	f006 fa20 	bl	800be5c <USB_HC_StartXfer>
 8005a1c:	4603      	mov	r3, r0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop

08005a28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f005 ff49 	bl	800b8d6 <USB_GetMode>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	f040 80ef 	bne.w	8005c2a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f005 ff2d 	bl	800b8b0 <USB_ReadInterrupts>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80e5 	beq.w	8005c28 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f005 ff24 	bl	800b8b0 <USB_ReadInterrupts>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a72:	d104      	bne.n	8005a7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f005 ff14 	bl	800b8b0 <USB_ReadInterrupts>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a92:	d104      	bne.n	8005a9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f005 ff04 	bl	800b8b0 <USB_ReadInterrupts>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab2:	d104      	bne.n	8005abe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005abc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f005 fef4 	bl	800b8b0 <USB_ReadInterrupts>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d103      	bne.n	8005ada <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f005 fee6 	bl	800b8b0 <USB_ReadInterrupts>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aee:	d115      	bne.n	8005b1c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005af8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d108      	bne.n	8005b1c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f00b fec0 	bl	8011890 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2101      	movs	r1, #1
 8005b16:	4618      	mov	r0, r3
 8005b18:	f005 ffd0 	bl	800babc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f005 fec5 	bl	800b8b0 <USB_ReadInterrupts>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b30:	d102      	bne.n	8005b38 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 f966 	bl	8006e04 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f005 feb7 	bl	800b8b0 <USB_ReadInterrupts>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d106      	bne.n	8005b5a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f00b fe83 	bl	8011858 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2208      	movs	r2, #8
 8005b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f005 fea6 	bl	800b8b0 <USB_ReadInterrupts>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6e:	d138      	bne.n	8005be2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f006 fab5 	bl	800c0e4 <USB_HC_ReadInterrupt>
 8005b7a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e025      	b.n	8005bce <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d018      	beq.n	8005bc8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bac:	d106      	bne.n	8005bbc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f8cf 	bl	8005d58 <HCD_HC_IN_IRQHandler>
 8005bba:	e005      	b.n	8005bc8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fcfd 	bl	80065c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d3d4      	bcc.n	8005b82 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f005 fe62 	bl	800b8b0 <USB_ReadInterrupts>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d101      	bne.n	8005bfa <HAL_HCD_IRQHandler+0x1d2>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <HAL_HCD_IRQHandler+0x1d4>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d014      	beq.n	8005c2a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0210 	bic.w	r2, r2, #16
 8005c0e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 f84b 	bl	8006cac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0210 	orr.w	r2, r2, #16
 8005c24:	619a      	str	r2, [r3, #24]
 8005c26:	e000      	b.n	8005c2a <HAL_HCD_IRQHandler+0x202>
      return;
 8005c28:	bf00      	nop
    }
  }
}
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_HCD_Start+0x16>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e013      	b.n	8005c6e <HAL_HCD_Start+0x3e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f005 fd3a 	bl	800b6cc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f005 ff90 	bl	800bb84 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_HCD_Stop+0x16>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e00d      	b.n	8005ca8 <HAL_HCD_Stop+0x32>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f006 fb6f 	bl	800c37c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f005 ff37 	bl	800bb30 <USB_ResetPort>
 8005cc2:	4603      	mov	r3, r0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	335c      	adds	r3, #92	; 0x5c
 8005ce8:	781b      	ldrb	r3, [r3, #0]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	440b      	add	r3, r1
 8005d10:	334c      	adds	r3, #76	; 0x4c
 8005d12:	681b      	ldr	r3, [r3, #0]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f005 ff79 	bl	800bc24 <USB_GetCurrentFrame>
 8005d32:	4603      	mov	r3, r0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f005 ff54 	bl	800bbf6 <USB_GetHostSpeed>
 8005d4e:	4603      	mov	r3, r0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d119      	bne.n	8005dbc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d94:	461a      	mov	r2, r3
 8005d96:	2304      	movs	r3, #4
 8005d98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db4:	f043 0302 	orr.w	r3, r3, #2
 8005db8:	60d3      	str	r3, [r2, #12]
 8005dba:	e0ce      	b.n	8005f5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd2:	d12c      	bne.n	8005e2e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de0:	461a      	mov	r2, r3
 8005de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005de6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	440b      	add	r3, r1
 8005df6:	335d      	adds	r3, #93	; 0x5d
 8005df8:	2207      	movs	r2, #7
 8005dfa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e16:	f043 0302 	orr.w	r3, r3, #2
 8005e1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f006 f96d 	bl	800c106 <USB_HC_Halt>
 8005e2c:	e095      	b.n	8005f5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d109      	bne.n	8005e58 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	461a      	mov	r2, r3
 8005e52:	2320      	movs	r3, #32
 8005e54:	6093      	str	r3, [r2, #8]
 8005e56:	e080      	b.n	8005f5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d134      	bne.n	8005ed8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e88:	f043 0302 	orr.w	r3, r3, #2
 8005e8c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	440b      	add	r3, r1
 8005e9c:	335d      	adds	r3, #93	; 0x5d
 8005e9e:	2205      	movs	r2, #5
 8005ea0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eae:	461a      	mov	r2, r3
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f006 f918 	bl	800c106 <USB_HC_Halt>
 8005ed6:	e040      	b.n	8005f5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d134      	bne.n	8005f5a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f0a:	f043 0302 	orr.w	r3, r3, #2
 8005f0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	4611      	mov	r1, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f006 f8f3 	bl	800c106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2310      	movs	r3, #16
 8005f30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	440b      	add	r3, r1
 8005f40:	335d      	adds	r3, #93	; 0x5d
 8005f42:	2208      	movs	r2, #8
 8005f44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f52:	461a      	mov	r2, r3
 8005f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f58:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f70:	d122      	bne.n	8005fb8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8c:	f043 0302 	orr.w	r3, r3, #2
 8005f90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f006 f8b2 	bl	800c106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fb4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005fb6:	e300      	b.n	80065ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	f040 80fd 	bne.w	80061ca <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	440b      	add	r3, r1
 8005fe6:	3348      	adds	r3, #72	; 0x48
 8005fe8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	0159      	lsls	r1, r3, #5
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	440b      	add	r3, r1
 8005ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005ffc:	1ad1      	subs	r1, r2, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4403      	add	r3, r0
 800600c:	334c      	adds	r3, #76	; 0x4c
 800600e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	440b      	add	r3, r1
 800601e:	335d      	adds	r3, #93	; 0x5d
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	440b      	add	r3, r1
 8006032:	3358      	adds	r3, #88	; 0x58
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4413      	add	r3, r2
 8006040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006044:	461a      	mov	r2, r3
 8006046:	2301      	movs	r3, #1
 8006048:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	440b      	add	r3, r1
 8006058:	333f      	adds	r3, #63	; 0x3f
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	440b      	add	r3, r1
 800606e:	333f      	adds	r3, #63	; 0x3f
 8006070:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006072:	2b02      	cmp	r3, #2
 8006074:	d121      	bne.n	80060ba <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	440a      	add	r2, r1
 800608c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006090:	f043 0302 	orr.w	r3, r3, #2
 8006094:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f006 f830 	bl	800c106 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b2:	461a      	mov	r2, r3
 80060b4:	2310      	movs	r3, #16
 80060b6:	6093      	str	r3, [r2, #8]
 80060b8:	e070      	b.n	800619c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	440b      	add	r3, r1
 80060c8:	333f      	adds	r3, #63	; 0x3f
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d12a      	bne.n	8006126 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	440b      	add	r3, r1
 80060fe:	335c      	adds	r3, #92	; 0x5c
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	b2d8      	uxtb	r0, r3
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	440b      	add	r3, r1
 8006116:	335c      	adds	r3, #92	; 0x5c
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	4601      	mov	r1, r0
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f00b fbc4 	bl	80118ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8006124:	e03a      	b.n	800619c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	440b      	add	r3, r1
 8006134:	333f      	adds	r3, #63	; 0x3f
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d12f      	bne.n	800619c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	440b      	add	r3, r1
 800614a:	335c      	adds	r3, #92	; 0x5c
 800614c:	2201      	movs	r2, #1
 800614e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	440b      	add	r3, r1
 800615e:	3350      	adds	r3, #80	; 0x50
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	f083 0301 	eor.w	r3, r3, #1
 8006166:	b2d8      	uxtb	r0, r3
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	440b      	add	r3, r1
 8006176:	3350      	adds	r3, #80	; 0x50
 8006178:	4602      	mov	r2, r0
 800617a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	b2d8      	uxtb	r0, r3
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	440b      	add	r3, r1
 800618e:	335c      	adds	r3, #92	; 0x5c
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	4601      	mov	r1, r0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f00b fb88 	bl	80118ac <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	440b      	add	r3, r1
 80061aa:	3350      	adds	r3, #80	; 0x50
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	f083 0301 	eor.w	r3, r3, #1
 80061b2:	b2d8      	uxtb	r0, r3
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	440b      	add	r3, r1
 80061c2:	3350      	adds	r3, #80	; 0x50
 80061c4:	4602      	mov	r2, r0
 80061c6:	701a      	strb	r2, [r3, #0]
}
 80061c8:	e1f7      	b.n	80065ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	f040 811a 	bne.w	8006416 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061fc:	f023 0302 	bic.w	r3, r3, #2
 8006200:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	440b      	add	r3, r1
 8006210:	335d      	adds	r3, #93	; 0x5d
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d10a      	bne.n	800622e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	440b      	add	r3, r1
 8006226:	335c      	adds	r3, #92	; 0x5c
 8006228:	2201      	movs	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e0d9      	b.n	80063e2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	440b      	add	r3, r1
 800623c:	335d      	adds	r3, #93	; 0x5d
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b05      	cmp	r3, #5
 8006242:	d10a      	bne.n	800625a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	440b      	add	r3, r1
 8006252:	335c      	adds	r3, #92	; 0x5c
 8006254:	2205      	movs	r2, #5
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	e0c3      	b.n	80063e2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	440b      	add	r3, r1
 8006268:	335d      	adds	r3, #93	; 0x5d
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b06      	cmp	r3, #6
 800626e:	d00a      	beq.n	8006286 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	440b      	add	r3, r1
 800627e:	335d      	adds	r3, #93	; 0x5d
 8006280:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006282:	2b08      	cmp	r3, #8
 8006284:	d156      	bne.n	8006334 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	440b      	add	r3, r1
 8006294:	3358      	adds	r3, #88	; 0x58
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	1c59      	adds	r1, r3, #1
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4403      	add	r3, r0
 80062a8:	3358      	adds	r3, #88	; 0x58
 80062aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	440b      	add	r3, r1
 80062ba:	3358      	adds	r3, #88	; 0x58
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d914      	bls.n	80062ec <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	440b      	add	r3, r1
 80062d0:	3358      	adds	r3, #88	; 0x58
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	440b      	add	r3, r1
 80062e4:	335c      	adds	r3, #92	; 0x5c
 80062e6:	2204      	movs	r2, #4
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e009      	b.n	8006300 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	440b      	add	r3, r1
 80062fa:	335c      	adds	r3, #92	; 0x5c
 80062fc:	2202      	movs	r2, #2
 80062fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006316:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800631e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632c:	461a      	mov	r2, r3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e056      	b.n	80063e2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	440b      	add	r3, r1
 8006342:	335d      	adds	r3, #93	; 0x5d
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b03      	cmp	r3, #3
 8006348:	d123      	bne.n	8006392 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	440b      	add	r3, r1
 8006358:	335c      	adds	r3, #92	; 0x5c
 800635a:	2202      	movs	r2, #2
 800635c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006374:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800637c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	461a      	mov	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	e027      	b.n	80063e2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	440b      	add	r3, r1
 80063a0:	335d      	adds	r3, #93	; 0x5d
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b07      	cmp	r3, #7
 80063a6:	d11c      	bne.n	80063e2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	440b      	add	r3, r1
 80063b6:	3358      	adds	r3, #88	; 0x58
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	1c59      	adds	r1, r3, #1
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4403      	add	r3, r0
 80063ca:	3358      	adds	r3, #88	; 0x58
 80063cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	335c      	adds	r3, #92	; 0x5c
 80063de:	2204      	movs	r2, #4
 80063e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ee:	461a      	mov	r2, r3
 80063f0:	2302      	movs	r3, #2
 80063f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	b2d8      	uxtb	r0, r3
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	440b      	add	r3, r1
 8006406:	335c      	adds	r3, #92	; 0x5c
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	4601      	mov	r1, r0
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f00b fa4c 	bl	80118ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006414:	e0d1      	b.n	80065ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d13e      	bne.n	80064aa <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	440a      	add	r2, r1
 8006442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006446:	f043 0302 	orr.w	r3, r3, #2
 800644a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	440b      	add	r3, r1
 800645a:	3358      	adds	r3, #88	; 0x58
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	1c59      	adds	r1, r3, #1
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	4403      	add	r3, r0
 800646e:	3358      	adds	r3, #88	; 0x58
 8006470:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	440b      	add	r3, r1
 8006480:	335d      	adds	r3, #93	; 0x5d
 8006482:	2206      	movs	r2, #6
 8006484:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	4611      	mov	r1, r2
 8006490:	4618      	mov	r0, r3
 8006492:	f005 fe38 	bl	800c106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a2:	461a      	mov	r2, r3
 80064a4:	2380      	movs	r3, #128	; 0x80
 80064a6:	6093      	str	r3, [r2, #8]
}
 80064a8:	e087      	b.n	80065ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d17c      	bne.n	80065ba <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	440b      	add	r3, r1
 80064ce:	333f      	adds	r3, #63	; 0x3f
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d122      	bne.n	800651c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	440b      	add	r3, r1
 80064e4:	3358      	adds	r3, #88	; 0x58
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006504:	f043 0302 	orr.w	r3, r3, #2
 8006508:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	4611      	mov	r1, r2
 8006514:	4618      	mov	r0, r3
 8006516:	f005 fdf6 	bl	800c106 <USB_HC_Halt>
 800651a:	e045      	b.n	80065a8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	440b      	add	r3, r1
 800652a:	333f      	adds	r3, #63	; 0x3f
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	440b      	add	r3, r1
 8006540:	333f      	adds	r3, #63	; 0x3f
 8006542:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006544:	2b02      	cmp	r3, #2
 8006546:	d12f      	bne.n	80065a8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	440b      	add	r3, r1
 8006556:	3358      	adds	r3, #88	; 0x58
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d121      	bne.n	80065a8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	440b      	add	r3, r1
 8006572:	335d      	adds	r3, #93	; 0x5d
 8006574:	2203      	movs	r2, #3
 8006576:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	440a      	add	r2, r1
 800658e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006592:	f043 0302 	orr.w	r3, r3, #2
 8006596:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	4611      	mov	r1, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f005 fdaf 	bl	800c106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	461a      	mov	r2, r3
 80065b6:	2310      	movs	r3, #16
 80065b8:	6093      	str	r3, [r2, #8]
}
 80065ba:	bf00      	nop
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d119      	bne.n	8006626 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	461a      	mov	r2, r3
 8006600:	2304      	movs	r3, #4
 8006602:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	4413      	add	r3, r2
 800660c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	440a      	add	r2, r1
 800661a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661e:	f043 0302 	orr.w	r3, r3, #2
 8006622:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006624:	e33e      	b.n	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b20      	cmp	r3, #32
 800663a:	d141      	bne.n	80066c0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4413      	add	r3, r2
 8006644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006648:	461a      	mov	r2, r3
 800664a:	2320      	movs	r3, #32
 800664c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	440b      	add	r3, r1
 800665c:	333d      	adds	r3, #61	; 0x3d
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b01      	cmp	r3, #1
 8006662:	f040 831f 	bne.w	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	333d      	adds	r3, #61	; 0x3d
 8006676:	2200      	movs	r2, #0
 8006678:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	440b      	add	r3, r1
 8006688:	335c      	adds	r3, #92	; 0x5c
 800668a:	2202      	movs	r2, #2
 800668c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a8:	f043 0302 	orr.w	r3, r3, #2
 80066ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f005 fd24 	bl	800c106 <USB_HC_Halt>
}
 80066be:	e2f1      	b.n	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d2:	2b40      	cmp	r3, #64	; 0x40
 80066d4:	d13f      	bne.n	8006756 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	440b      	add	r3, r1
 80066e4:	335d      	adds	r3, #93	; 0x5d
 80066e6:	2204      	movs	r2, #4
 80066e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	440b      	add	r3, r1
 80066f8:	333d      	adds	r3, #61	; 0x3d
 80066fa:	2201      	movs	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	440b      	add	r3, r1
 800670c:	3358      	adds	r3, #88	; 0x58
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	4413      	add	r3, r2
 800671a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	0151      	lsls	r1, r2, #5
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	440a      	add	r2, r1
 8006728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800672c:	f043 0302 	orr.w	r3, r3, #2
 8006730:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	4611      	mov	r1, r2
 800673c:	4618      	mov	r0, r3
 800673e:	f005 fce2 	bl	800c106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	4413      	add	r3, r2
 800674a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674e:	461a      	mov	r2, r3
 8006750:	2340      	movs	r3, #64	; 0x40
 8006752:	6093      	str	r3, [r2, #8]
}
 8006754:	e2a6      	b.n	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800676c:	d122      	bne.n	80067b4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	440a      	add	r2, r1
 8006784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006788:	f043 0302 	orr.w	r3, r3, #2
 800678c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	4611      	mov	r1, r2
 8006798:	4618      	mov	r0, r3
 800679a:	f005 fcb4 	bl	800c106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067aa:	461a      	mov	r2, r3
 80067ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067b0:	6093      	str	r3, [r2, #8]
}
 80067b2:	e277      	b.n	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d135      	bne.n	8006836 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	440b      	add	r3, r1
 80067d8:	3358      	adds	r3, #88	; 0x58
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f8:	f043 0302 	orr.w	r3, r3, #2
 80067fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	4611      	mov	r1, r2
 8006808:	4618      	mov	r0, r3
 800680a:	f005 fc7c 	bl	800c106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681a:	461a      	mov	r2, r3
 800681c:	2301      	movs	r3, #1
 800681e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	440b      	add	r3, r1
 800682e:	335d      	adds	r3, #93	; 0x5d
 8006830:	2201      	movs	r2, #1
 8006832:	701a      	strb	r2, [r3, #0]
}
 8006834:	e236      	b.n	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b08      	cmp	r3, #8
 800684a:	d12b      	bne.n	80068a4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006858:	461a      	mov	r2, r3
 800685a:	2308      	movs	r3, #8
 800685c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	0151      	lsls	r1, r2, #5
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	440a      	add	r2, r1
 8006874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f005 fc3c 	bl	800c106 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	440b      	add	r3, r1
 800689c:	335d      	adds	r3, #93	; 0x5d
 800689e:	2205      	movs	r2, #5
 80068a0:	701a      	strb	r2, [r3, #0]
}
 80068a2:	e1ff      	b.n	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d155      	bne.n	8006966 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	440b      	add	r3, r1
 80068c8:	3358      	adds	r3, #88	; 0x58
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	440b      	add	r3, r1
 80068dc:	335d      	adds	r3, #93	; 0x5d
 80068de:	2203      	movs	r2, #3
 80068e0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	440b      	add	r3, r1
 80068f0:	333d      	adds	r3, #61	; 0x3d
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d114      	bne.n	8006922 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	440b      	add	r3, r1
 8006906:	333c      	adds	r3, #60	; 0x3c
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	440b      	add	r3, r1
 800691c:	333d      	adds	r3, #61	; 0x3d
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4413      	add	r3, r2
 800692a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	440a      	add	r2, r1
 8006938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800693c:	f043 0302 	orr.w	r3, r3, #2
 8006940:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	4611      	mov	r1, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f005 fbda 	bl	800c106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	461a      	mov	r2, r3
 8006960:	2310      	movs	r3, #16
 8006962:	6093      	str	r3, [r2, #8]
}
 8006964:	e19e      	b.n	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006978:	2b80      	cmp	r3, #128	; 0x80
 800697a:	d12b      	bne.n	80069d4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	440a      	add	r2, r1
 8006992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006996:	f043 0302 	orr.w	r3, r3, #2
 800699a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	4611      	mov	r1, r2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f005 fbad 	bl	800c106 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	440b      	add	r3, r1
 80069ba:	335d      	adds	r3, #93	; 0x5d
 80069bc:	2206      	movs	r2, #6
 80069be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069cc:	461a      	mov	r2, r3
 80069ce:	2380      	movs	r3, #128	; 0x80
 80069d0:	6093      	str	r3, [r2, #8]
}
 80069d2:	e167      	b.n	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ea:	d135      	bne.n	8006a58 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	0151      	lsls	r1, r2, #5
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	440a      	add	r2, r1
 8006a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a06:	f043 0302 	orr.w	r3, r3, #2
 8006a0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	4611      	mov	r1, r2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f005 fb75 	bl	800c106 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a28:	461a      	mov	r2, r3
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	440b      	add	r3, r1
 8006a50:	335d      	adds	r3, #93	; 0x5d
 8006a52:	2208      	movs	r2, #8
 8006a54:	701a      	strb	r2, [r3, #0]
}
 8006a56:	e125      	b.n	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	f040 811a 	bne.w	8006ca4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a8a:	f023 0302 	bic.w	r3, r3, #2
 8006a8e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	440b      	add	r3, r1
 8006a9e:	335d      	adds	r3, #93	; 0x5d
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d137      	bne.n	8006b16 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	440b      	add	r3, r1
 8006ab4:	335c      	adds	r3, #92	; 0x5c
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	440b      	add	r3, r1
 8006ac8:	333f      	adds	r3, #63	; 0x3f
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d00b      	beq.n	8006ae8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	440b      	add	r3, r1
 8006ade:	333f      	adds	r3, #63	; 0x3f
 8006ae0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	f040 80c5 	bne.w	8006c72 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	440b      	add	r3, r1
 8006af6:	3351      	adds	r3, #81	; 0x51
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f083 0301 	eor.w	r3, r3, #1
 8006afe:	b2d8      	uxtb	r0, r3
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	440b      	add	r3, r1
 8006b0e:	3351      	adds	r3, #81	; 0x51
 8006b10:	4602      	mov	r2, r0
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	e0ad      	b.n	8006c72 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	440b      	add	r3, r1
 8006b24:	335d      	adds	r3, #93	; 0x5d
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d10a      	bne.n	8006b42 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	440b      	add	r3, r1
 8006b3a:	335c      	adds	r3, #92	; 0x5c
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	e097      	b.n	8006c72 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	440b      	add	r3, r1
 8006b50:	335d      	adds	r3, #93	; 0x5d
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d10a      	bne.n	8006b6e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	440b      	add	r3, r1
 8006b66:	335c      	adds	r3, #92	; 0x5c
 8006b68:	2202      	movs	r2, #2
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e081      	b.n	8006c72 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	440b      	add	r3, r1
 8006b7c:	335d      	adds	r3, #93	; 0x5d
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	d10a      	bne.n	8006b9a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	440b      	add	r3, r1
 8006b92:	335c      	adds	r3, #92	; 0x5c
 8006b94:	2205      	movs	r2, #5
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e06b      	b.n	8006c72 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	440b      	add	r3, r1
 8006ba8:	335d      	adds	r3, #93	; 0x5d
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	d00a      	beq.n	8006bc6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	440b      	add	r3, r1
 8006bbe:	335d      	adds	r3, #93	; 0x5d
 8006bc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d155      	bne.n	8006c72 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	00db      	lsls	r3, r3, #3
 8006bd2:	440b      	add	r3, r1
 8006bd4:	3358      	adds	r3, #88	; 0x58
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	1c59      	adds	r1, r3, #1
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	4403      	add	r3, r0
 8006be8:	3358      	adds	r3, #88	; 0x58
 8006bea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3358      	adds	r3, #88	; 0x58
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d914      	bls.n	8006c2c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	440b      	add	r3, r1
 8006c10:	3358      	adds	r3, #88	; 0x58
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	440b      	add	r3, r1
 8006c24:	335c      	adds	r3, #92	; 0x5c
 8006c26:	2204      	movs	r2, #4
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e009      	b.n	8006c40 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	440b      	add	r3, r1
 8006c3a:	335c      	adds	r3, #92	; 0x5c
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7e:	461a      	mov	r2, r3
 8006c80:	2302      	movs	r3, #2
 8006c82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	b2d8      	uxtb	r0, r3
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	440b      	add	r3, r1
 8006c96:	335c      	adds	r3, #92	; 0x5c
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f00a fe04 	bl	80118ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006ca4:	bf00      	nop
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	0c5b      	lsrs	r3, r3, #17
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	091b      	lsrs	r3, r3, #4
 8006cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d003      	beq.n	8006cf0 <HCD_RXQLVL_IRQHandler+0x44>
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	f000 8082 	beq.w	8006df2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006cee:	e083      	b.n	8006df8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d07f      	beq.n	8006df6 <HCD_RXQLVL_IRQHandler+0x14a>
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	440b      	add	r3, r1
 8006d04:	3344      	adds	r3, #68	; 0x44
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d074      	beq.n	8006df6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	440b      	add	r3, r1
 8006d1e:	3344      	adds	r3, #68	; 0x44
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	b292      	uxth	r2, r2
 8006d26:	4619      	mov	r1, r3
 8006d28:	f004 fd99 	bl	800b85e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	440b      	add	r3, r1
 8006d3a:	3344      	adds	r3, #68	; 0x44
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	18d1      	adds	r1, r2, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	4403      	add	r3, r0
 8006d50:	3344      	adds	r3, #68	; 0x44
 8006d52:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	440b      	add	r3, r1
 8006d62:	334c      	adds	r3, #76	; 0x4c
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	18d1      	adds	r1, r2, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4403      	add	r3, r0
 8006d78:	334c      	adds	r3, #76	; 0x4c
 8006d7a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <HCD_RXQLVL_IRQHandler+0x154>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d031      	beq.n	8006df6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006da8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006db0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	440b      	add	r3, r1
 8006dd2:	3350      	adds	r3, #80	; 0x50
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f083 0301 	eor.w	r3, r3, #1
 8006dda:	b2d8      	uxtb	r0, r3
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	440b      	add	r3, r1
 8006dea:	3350      	adds	r3, #80	; 0x50
 8006dec:	4602      	mov	r2, r0
 8006dee:	701a      	strb	r2, [r3, #0]
      break;
 8006df0:	e001      	b.n	8006df6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006df2:	bf00      	nop
 8006df4:	e000      	b.n	8006df8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006df6:	bf00      	nop
  }
}
 8006df8:	bf00      	nop
 8006dfa:	3728      	adds	r7, #40	; 0x28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	1ff80000 	.word	0x1ff80000

08006e04 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e30:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d10b      	bne.n	8006e54 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d102      	bne.n	8006e4c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f00a fd14 	bl	8011874 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f043 0302 	orr.w	r3, r3, #2
 8006e52:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d132      	bne.n	8006ec4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f043 0308 	orr.w	r3, r3, #8
 8006e64:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d126      	bne.n	8006ebe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d113      	bne.n	8006ea0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006e7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e82:	d106      	bne.n	8006e92 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2102      	movs	r1, #2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f004 fe16 	bl	800babc <USB_InitFSLSPClkSel>
 8006e90:	e011      	b.n	8006eb6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2101      	movs	r1, #1
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f004 fe0f 	bl	800babc <USB_InitFSLSPClkSel>
 8006e9e:	e00a      	b.n	8006eb6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d106      	bne.n	8006eb6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006eb4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f00a fd0a 	bl	80118d0 <HAL_HCD_PortEnabled_Callback>
 8006ebc:	e002      	b.n	8006ec4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f00a fd14 	bl	80118ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	d103      	bne.n	8006ed6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f043 0320 	orr.w	r3, r3, #32
 8006ed4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006edc:	461a      	mov	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6013      	str	r3, [r2, #0]
}
 8006ee2:	bf00      	nop
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e07f      	b.n	8006ffe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fa ff78 	bl	8001e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2224      	movs	r2, #36	; 0x24
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d107      	bne.n	8006f66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f62:	609a      	str	r2, [r3, #8]
 8006f64:	e006      	b.n	8006f74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d104      	bne.n	8006f86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6859      	ldr	r1, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <HAL_I2C_Init+0x11c>)
 8006f92:	430b      	orrs	r3, r1
 8006f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691a      	ldr	r2, [r3, #16]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	ea42 0103 	orr.w	r1, r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	021a      	lsls	r2, r3, #8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69d9      	ldr	r1, [r3, #28]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1a      	ldr	r2, [r3, #32]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 0201 	orr.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	02008000 	.word	0x02008000

0800700c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b20      	cmp	r3, #32
 8007020:	d138      	bne.n	8007094 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800702c:	2302      	movs	r3, #2
 800702e:	e032      	b.n	8007096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2224      	movs	r2, #36	; 0x24
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800705e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6819      	ldr	r1, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	e000      	b.n	8007096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d139      	bne.n	800712c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e033      	b.n	800712e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2224      	movs	r2, #36	; 0x24
 80070d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	e000      	b.n	800712e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800712c:	2302      	movs	r3, #2
  }
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e0bf      	b.n	80072ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fa fec8 	bl	8001ef8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800717e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6999      	ldr	r1, [r3, #24]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007194:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6899      	ldr	r1, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b4a      	ldr	r3, [pc, #296]	; (80072d8 <HAL_LTDC_Init+0x19c>)
 80071b0:	400b      	ands	r3, r1
 80071b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6899      	ldr	r1, [r3, #8]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	431a      	orrs	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68d9      	ldr	r1, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	4b3e      	ldr	r3, [pc, #248]	; (80072d8 <HAL_LTDC_Init+0x19c>)
 80071de:	400b      	ands	r3, r1
 80071e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68d9      	ldr	r1, [r3, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6919      	ldr	r1, [r3, #16]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b33      	ldr	r3, [pc, #204]	; (80072d8 <HAL_LTDC_Init+0x19c>)
 800720c:	400b      	ands	r3, r1
 800720e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6919      	ldr	r1, [r3, #16]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6959      	ldr	r1, [r3, #20]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4b27      	ldr	r3, [pc, #156]	; (80072d8 <HAL_LTDC_Init+0x19c>)
 800723a:	400b      	ands	r3, r1
 800723c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	041b      	lsls	r3, r3, #16
 8007244:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6959      	ldr	r1, [r3, #20]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800726c:	041b      	lsls	r3, r3, #16
 800726e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800727e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0206 	orr.w	r2, r2, #6
 80072aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	f000f800 	.word	0xf000f800

080072dc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d023      	beq.n	8007346 <HAL_LTDC_IRQHandler+0x6a>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01e      	beq.n	8007346 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0204 	bic.w	r2, r2, #4
 8007316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2204      	movs	r2, #4
 800731e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007326:	f043 0201 	orr.w	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2204      	movs	r2, #4
 8007334:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f86f 	bl	8007424 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d023      	beq.n	8007398 <HAL_LTDC_IRQHandler+0xbc>
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01e      	beq.n	8007398 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0202 	bic.w	r2, r2, #2
 8007368:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2202      	movs	r2, #2
 8007370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007378:	f043 0202 	orr.w	r2, r3, #2
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2204      	movs	r2, #4
 8007386:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f846 	bl	8007424 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01b      	beq.n	80073da <HAL_LTDC_IRQHandler+0xfe>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d016      	beq.n	80073da <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0201 	bic.w	r2, r2, #1
 80073ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2201      	movs	r2, #1
 80073c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f82f 	bl	8007438 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01b      	beq.n	800741c <HAL_LTDC_IRQHandler+0x140>
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d016      	beq.n	800741c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0208 	bic.w	r2, r2, #8
 80073fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2208      	movs	r2, #8
 8007404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f818 	bl	800744c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007460:	b5b0      	push	{r4, r5, r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_LTDC_ConfigLayer+0x1a>
 8007476:	2302      	movs	r3, #2
 8007478:	e02c      	b.n	80074d4 <HAL_LTDC_ConfigLayer+0x74>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2202      	movs	r2, #2
 8007486:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2134      	movs	r1, #52	; 0x34
 8007490:	fb01 f303 	mul.w	r3, r1, r3
 8007494:	4413      	add	r3, r2
 8007496:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	4614      	mov	r4, r2
 800749e:	461d      	mov	r5, r3
 80074a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f81f 	bl	80074f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2201      	movs	r2, #1
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bdb0      	pop	{r4, r5, r7, pc}

080074dc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80074ea:	b2db      	uxtb	r3, r3
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b089      	sub	sp, #36	; 0x24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	0c1b      	lsrs	r3, r3, #16
 8007510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007514:	4413      	add	r3, r2
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	01db      	lsls	r3, r3, #7
 8007524:	4413      	add	r3, r2
 8007526:	3384      	adds	r3, #132	; 0x84
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	6812      	ldr	r2, [r2, #0]
 800752e:	4611      	mov	r1, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	01d2      	lsls	r2, r2, #7
 8007534:	440a      	add	r2, r1
 8007536:	3284      	adds	r2, #132	; 0x84
 8007538:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800753c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800754e:	4413      	add	r3, r2
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4619      	mov	r1, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	01db      	lsls	r3, r3, #7
 800755c:	440b      	add	r3, r1
 800755e:	3384      	adds	r3, #132	; 0x84
 8007560:	4619      	mov	r1, r3
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	4313      	orrs	r3, r2
 8007566:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007576:	4413      	add	r3, r2
 8007578:	041b      	lsls	r3, r3, #16
 800757a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	01db      	lsls	r3, r3, #7
 8007586:	4413      	add	r3, r2
 8007588:	3384      	adds	r3, #132	; 0x84
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	6812      	ldr	r2, [r2, #0]
 8007590:	4611      	mov	r1, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	01d2      	lsls	r2, r2, #7
 8007596:	440a      	add	r2, r1
 8007598:	3284      	adds	r2, #132	; 0x84
 800759a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800759e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ae:	4413      	add	r3, r2
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4619      	mov	r1, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	01db      	lsls	r3, r3, #7
 80075bc:	440b      	add	r3, r1
 80075be:	3384      	adds	r3, #132	; 0x84
 80075c0:	4619      	mov	r1, r3
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	01db      	lsls	r3, r3, #7
 80075d2:	4413      	add	r3, r2
 80075d4:	3384      	adds	r3, #132	; 0x84
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	4611      	mov	r1, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	01d2      	lsls	r2, r2, #7
 80075e2:	440a      	add	r2, r1
 80075e4:	3284      	adds	r2, #132	; 0x84
 80075e6:	f023 0307 	bic.w	r3, r3, #7
 80075ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	01db      	lsls	r3, r3, #7
 80075f6:	4413      	add	r3, r2
 80075f8:	3384      	adds	r3, #132	; 0x84
 80075fa:	461a      	mov	r2, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007612:	041b      	lsls	r3, r3, #16
 8007614:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	061b      	lsls	r3, r3, #24
 800761c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	01db      	lsls	r3, r3, #7
 8007628:	4413      	add	r3, r2
 800762a:	3384      	adds	r3, #132	; 0x84
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	4413      	add	r3, r2
 800763a:	3384      	adds	r3, #132	; 0x84
 800763c:	461a      	mov	r2, r3
 800763e:	2300      	movs	r3, #0
 8007640:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007648:	461a      	mov	r2, r3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	431a      	orrs	r2, r3
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	431a      	orrs	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4619      	mov	r1, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	440b      	add	r3, r1
 800765e:	3384      	adds	r3, #132	; 0x84
 8007660:	4619      	mov	r1, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	01db      	lsls	r3, r3, #7
 8007672:	4413      	add	r3, r2
 8007674:	3384      	adds	r3, #132	; 0x84
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	4611      	mov	r1, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	01d2      	lsls	r2, r2, #7
 8007682:	440a      	add	r2, r1
 8007684:	3284      	adds	r2, #132	; 0x84
 8007686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800768a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	01db      	lsls	r3, r3, #7
 8007696:	4413      	add	r3, r2
 8007698:	3384      	adds	r3, #132	; 0x84
 800769a:	461a      	mov	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	01db      	lsls	r3, r3, #7
 80076ac:	4413      	add	r3, r2
 80076ae:	3384      	adds	r3, #132	; 0x84
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4619      	mov	r1, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	01db      	lsls	r3, r3, #7
 80076bc:	440b      	add	r3, r1
 80076be:	3384      	adds	r3, #132	; 0x84
 80076c0:	4619      	mov	r1, r3
 80076c2:	4b58      	ldr	r3, [pc, #352]	; (8007824 <LTDC_SetConfig+0x32c>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	68f9      	ldr	r1, [r7, #12]
 80076d2:	6809      	ldr	r1, [r1, #0]
 80076d4:	4608      	mov	r0, r1
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	01c9      	lsls	r1, r1, #7
 80076da:	4401      	add	r1, r0
 80076dc:	3184      	adds	r1, #132	; 0x84
 80076de:	4313      	orrs	r3, r2
 80076e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	01db      	lsls	r3, r3, #7
 80076ec:	4413      	add	r3, r2
 80076ee:	3384      	adds	r3, #132	; 0x84
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	01db      	lsls	r3, r3, #7
 80076fc:	4413      	add	r3, r2
 80076fe:	3384      	adds	r3, #132	; 0x84
 8007700:	461a      	mov	r2, r3
 8007702:	2300      	movs	r3, #0
 8007704:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	01db      	lsls	r3, r3, #7
 8007710:	4413      	add	r3, r2
 8007712:	3384      	adds	r3, #132	; 0x84
 8007714:	461a      	mov	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d102      	bne.n	800772a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007724:	2304      	movs	r3, #4
 8007726:	61fb      	str	r3, [r7, #28]
 8007728:	e01b      	b.n	8007762 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d102      	bne.n	8007738 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007732:	2303      	movs	r3, #3
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	e014      	b.n	8007762 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	2b04      	cmp	r3, #4
 800773e:	d00b      	beq.n	8007758 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007744:	2b02      	cmp	r3, #2
 8007746:	d007      	beq.n	8007758 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800774c:	2b03      	cmp	r3, #3
 800774e:	d003      	beq.n	8007758 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007754:	2b07      	cmp	r3, #7
 8007756:	d102      	bne.n	800775e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007758:	2302      	movs	r3, #2
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	e001      	b.n	8007762 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800775e:	2301      	movs	r3, #1
 8007760:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	01db      	lsls	r3, r3, #7
 800776c:	4413      	add	r3, r2
 800776e:	3384      	adds	r3, #132	; 0x84
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	6812      	ldr	r2, [r2, #0]
 8007776:	4611      	mov	r1, r2
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	01d2      	lsls	r2, r2, #7
 800777c:	440a      	add	r2, r1
 800777e:	3284      	adds	r2, #132	; 0x84
 8007780:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007784:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	fb02 f303 	mul.w	r3, r2, r3
 8007790:	041a      	lsls	r2, r3, #16
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	6859      	ldr	r1, [r3, #4]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	1acb      	subs	r3, r1, r3
 800779c:	69f9      	ldr	r1, [r7, #28]
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	3303      	adds	r3, #3
 80077a4:	68f9      	ldr	r1, [r7, #12]
 80077a6:	6809      	ldr	r1, [r1, #0]
 80077a8:	4608      	mov	r0, r1
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	01c9      	lsls	r1, r1, #7
 80077ae:	4401      	add	r1, r0
 80077b0:	3184      	adds	r1, #132	; 0x84
 80077b2:	4313      	orrs	r3, r2
 80077b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	4413      	add	r3, r2
 80077c2:	3384      	adds	r3, #132	; 0x84
 80077c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4619      	mov	r1, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	01db      	lsls	r3, r3, #7
 80077d0:	440b      	add	r3, r1
 80077d2:	3384      	adds	r3, #132	; 0x84
 80077d4:	4619      	mov	r1, r3
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <LTDC_SetConfig+0x330>)
 80077d8:	4013      	ands	r3, r2
 80077da:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	01db      	lsls	r3, r3, #7
 80077e6:	4413      	add	r3, r2
 80077e8:	3384      	adds	r3, #132	; 0x84
 80077ea:	461a      	mov	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	01db      	lsls	r3, r3, #7
 80077fc:	4413      	add	r3, r2
 80077fe:	3384      	adds	r3, #132	; 0x84
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	4611      	mov	r1, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	01d2      	lsls	r2, r2, #7
 800780c:	440a      	add	r2, r1
 800780e:	3284      	adds	r2, #132	; 0x84
 8007810:	f043 0301 	orr.w	r3, r3, #1
 8007814:	6013      	str	r3, [r2, #0]
}
 8007816:	bf00      	nop
 8007818:	3724      	adds	r7, #36	; 0x24
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	fffff8f8 	.word	0xfffff8f8
 8007828:	fffff800 	.word	0xfffff800

0800782c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007830:	4b05      	ldr	r3, [pc, #20]	; (8007848 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a04      	ldr	r2, [pc, #16]	; (8007848 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800783a:	6013      	str	r3, [r2, #0]
}
 800783c:	bf00      	nop
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40007000 	.word	0x40007000

0800784c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007856:	4b23      	ldr	r3, [pc, #140]	; (80078e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	4a22      	ldr	r2, [pc, #136]	; (80078e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800785c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007860:	6413      	str	r3, [r2, #64]	; 0x40
 8007862:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800786e:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007878:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800787a:	f7fc f8a5 	bl	80039c8 <HAL_GetTick>
 800787e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007880:	e009      	b.n	8007896 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007882:	f7fc f8a1 	bl	80039c8 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007890:	d901      	bls.n	8007896 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e022      	b.n	80078dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007896:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800789e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a2:	d1ee      	bne.n	8007882 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078a4:	4b10      	ldr	r3, [pc, #64]	; (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a0f      	ldr	r2, [pc, #60]	; (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078b0:	f7fc f88a 	bl	80039c8 <HAL_GetTick>
 80078b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078b6:	e009      	b.n	80078cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078b8:	f7fc f886 	bl	80039c8 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078c6:	d901      	bls.n	80078cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e007      	b.n	80078dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078cc:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078d8:	d1ee      	bne.n	80078b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40023800 	.word	0x40023800
 80078e8:	40007000 	.word	0x40007000

080078ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80078f4:	f7fc f868 	bl	80039c8 <HAL_GetTick>
 80078f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e067      	b.n	80079d4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10b      	bne.n	8007928 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fa fbb5 	bl	8002088 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800791e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f85e 	bl	80079e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	3b01      	subs	r3, #1
 8007938:	021a      	lsls	r2, r3, #8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	2120      	movs	r1, #32
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f856 	bl	8007a00 <QSPI_WaitFlagStateUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007958:	7afb      	ldrb	r3, [r7, #11]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d135      	bne.n	80079ca <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	4b1d      	ldr	r3, [pc, #116]	; (80079dc <HAL_QSPI_Init+0xf0>)
 8007966:	4013      	ands	r3, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6852      	ldr	r2, [r2, #4]
 800796c:	0611      	lsls	r1, r2, #24
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68d2      	ldr	r2, [r2, #12]
 8007972:	4311      	orrs	r1, r2
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	69d2      	ldr	r2, [r2, #28]
 8007978:	4311      	orrs	r1, r2
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6a12      	ldr	r2, [r2, #32]
 800797e:	4311      	orrs	r1, r2
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	430b      	orrs	r3, r1
 8007986:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <HAL_QSPI_Init+0xf4>)
 8007990:	4013      	ands	r3, r2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6912      	ldr	r2, [r2, #16]
 8007996:	0411      	lsls	r1, r2, #16
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6952      	ldr	r2, [r2, #20]
 800799c:	4311      	orrs	r1, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6992      	ldr	r2, [r2, #24]
 80079a2:	4311      	orrs	r1, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0201 	orr.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80079d2:	7afb      	ldrb	r3, [r7, #11]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	00ffff2f 	.word	0x00ffff2f
 80079e0:	ffe0f8fe 	.word	0xffe0f8fe

080079e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007a10:	e01a      	b.n	8007a48 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a18:	d016      	beq.n	8007a48 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a1a:	f7fb ffd5 	bl	80039c8 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d302      	bcc.n	8007a30 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10b      	bne.n	8007a48 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2204      	movs	r2, #4
 8007a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3c:	f043 0201 	orr.w	r2, r3, #1
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e00e      	b.n	8007a66 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689a      	ldr	r2, [r3, #8]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	4013      	ands	r3, r2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bf14      	ite	ne
 8007a56:	2301      	movne	r3, #1
 8007a58:	2300      	moveq	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d1d6      	bne.n	8007a12 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e291      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 8087 	beq.w	8007ba2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a94:	4b96      	ldr	r3, [pc, #600]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 030c 	and.w	r3, r3, #12
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d00c      	beq.n	8007aba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007aa0:	4b93      	ldr	r3, [pc, #588]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 030c 	and.w	r3, r3, #12
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d112      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x62>
 8007aac:	4b90      	ldr	r3, [pc, #576]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ab8:	d10b      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aba:	4b8d      	ldr	r3, [pc, #564]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d06c      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x130>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d168      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e26b      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ada:	d106      	bne.n	8007aea <HAL_RCC_OscConfig+0x7a>
 8007adc:	4b84      	ldr	r3, [pc, #528]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a83      	ldr	r2, [pc, #524]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	e02e      	b.n	8007b48 <HAL_RCC_OscConfig+0xd8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10c      	bne.n	8007b0c <HAL_RCC_OscConfig+0x9c>
 8007af2:	4b7f      	ldr	r3, [pc, #508]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a7e      	ldr	r2, [pc, #504]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	4b7c      	ldr	r3, [pc, #496]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a7b      	ldr	r2, [pc, #492]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	e01d      	b.n	8007b48 <HAL_RCC_OscConfig+0xd8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b14:	d10c      	bne.n	8007b30 <HAL_RCC_OscConfig+0xc0>
 8007b16:	4b76      	ldr	r3, [pc, #472]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a75      	ldr	r2, [pc, #468]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	4b73      	ldr	r3, [pc, #460]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a72      	ldr	r2, [pc, #456]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	e00b      	b.n	8007b48 <HAL_RCC_OscConfig+0xd8>
 8007b30:	4b6f      	ldr	r3, [pc, #444]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a6e      	ldr	r2, [pc, #440]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	4b6c      	ldr	r3, [pc, #432]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a6b      	ldr	r2, [pc, #428]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d013      	beq.n	8007b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b50:	f7fb ff3a 	bl	80039c8 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b56:	e008      	b.n	8007b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b58:	f7fb ff36 	bl	80039c8 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b64      	cmp	r3, #100	; 0x64
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e21f      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b6a:	4b61      	ldr	r3, [pc, #388]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0f0      	beq.n	8007b58 <HAL_RCC_OscConfig+0xe8>
 8007b76:	e014      	b.n	8007ba2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b78:	f7fb ff26 	bl	80039c8 <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b7e:	e008      	b.n	8007b92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b80:	f7fb ff22 	bl	80039c8 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	2b64      	cmp	r3, #100	; 0x64
 8007b8c:	d901      	bls.n	8007b92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e20b      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b92:	4b57      	ldr	r3, [pc, #348]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1f0      	bne.n	8007b80 <HAL_RCC_OscConfig+0x110>
 8007b9e:	e000      	b.n	8007ba2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d069      	beq.n	8007c82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007bae:	4b50      	ldr	r3, [pc, #320]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 030c 	and.w	r3, r3, #12
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00b      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bba:	4b4d      	ldr	r3, [pc, #308]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 030c 	and.w	r3, r3, #12
 8007bc2:	2b08      	cmp	r3, #8
 8007bc4:	d11c      	bne.n	8007c00 <HAL_RCC_OscConfig+0x190>
 8007bc6:	4b4a      	ldr	r3, [pc, #296]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d116      	bne.n	8007c00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bd2:	4b47      	ldr	r3, [pc, #284]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <HAL_RCC_OscConfig+0x17a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d001      	beq.n	8007bea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e1df      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bea:	4b41      	ldr	r3, [pc, #260]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	493d      	ldr	r1, [pc, #244]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bfe:	e040      	b.n	8007c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d023      	beq.n	8007c50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c08:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a38      	ldr	r2, [pc, #224]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c0e:	f043 0301 	orr.w	r3, r3, #1
 8007c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c14:	f7fb fed8 	bl	80039c8 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c1c:	f7fb fed4 	bl	80039c8 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e1bd      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c2e:	4b30      	ldr	r3, [pc, #192]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f0      	beq.n	8007c1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c3a:	4b2d      	ldr	r3, [pc, #180]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4929      	ldr	r1, [pc, #164]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	600b      	str	r3, [r1, #0]
 8007c4e:	e018      	b.n	8007c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c50:	4b27      	ldr	r3, [pc, #156]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a26      	ldr	r2, [pc, #152]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c56:	f023 0301 	bic.w	r3, r3, #1
 8007c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fb feb4 	bl	80039c8 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c64:	f7fb feb0 	bl	80039c8 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e199      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c76:	4b1e      	ldr	r3, [pc, #120]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d038      	beq.n	8007d00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d019      	beq.n	8007cca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c96:	4b16      	ldr	r3, [pc, #88]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9a:	4a15      	ldr	r2, [pc, #84]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca2:	f7fb fe91 	bl	80039c8 <HAL_GetTick>
 8007ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ca8:	e008      	b.n	8007cbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007caa:	f7fb fe8d 	bl	80039c8 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e176      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0f0      	beq.n	8007caa <HAL_RCC_OscConfig+0x23a>
 8007cc8:	e01a      	b.n	8007d00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cca:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cce:	4a08      	ldr	r2, [pc, #32]	; (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007cd0:	f023 0301 	bic.w	r3, r3, #1
 8007cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd6:	f7fb fe77 	bl	80039c8 <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cde:	f7fb fe73 	bl	80039c8 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d903      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e15c      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
 8007cf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cf4:	4b91      	ldr	r3, [pc, #580]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1ee      	bne.n	8007cde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 80a4 	beq.w	8007e56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d0e:	4b8b      	ldr	r3, [pc, #556]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10d      	bne.n	8007d36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d1a:	4b88      	ldr	r3, [pc, #544]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	4a87      	ldr	r2, [pc, #540]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d24:	6413      	str	r3, [r2, #64]	; 0x40
 8007d26:	4b85      	ldr	r3, [pc, #532]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d32:	2301      	movs	r3, #1
 8007d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d36:	4b82      	ldr	r3, [pc, #520]	; (8007f40 <HAL_RCC_OscConfig+0x4d0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d118      	bne.n	8007d74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007d42:	4b7f      	ldr	r3, [pc, #508]	; (8007f40 <HAL_RCC_OscConfig+0x4d0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a7e      	ldr	r2, [pc, #504]	; (8007f40 <HAL_RCC_OscConfig+0x4d0>)
 8007d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d4e:	f7fb fe3b 	bl	80039c8 <HAL_GetTick>
 8007d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d54:	e008      	b.n	8007d68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d56:	f7fb fe37 	bl	80039c8 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b64      	cmp	r3, #100	; 0x64
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e120      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d68:	4b75      	ldr	r3, [pc, #468]	; (8007f40 <HAL_RCC_OscConfig+0x4d0>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0f0      	beq.n	8007d56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d106      	bne.n	8007d8a <HAL_RCC_OscConfig+0x31a>
 8007d7c:	4b6f      	ldr	r3, [pc, #444]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d80:	4a6e      	ldr	r2, [pc, #440]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007d82:	f043 0301 	orr.w	r3, r3, #1
 8007d86:	6713      	str	r3, [r2, #112]	; 0x70
 8007d88:	e02d      	b.n	8007de6 <HAL_RCC_OscConfig+0x376>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10c      	bne.n	8007dac <HAL_RCC_OscConfig+0x33c>
 8007d92:	4b6a      	ldr	r3, [pc, #424]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d96:	4a69      	ldr	r2, [pc, #420]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007d98:	f023 0301 	bic.w	r3, r3, #1
 8007d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d9e:	4b67      	ldr	r3, [pc, #412]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da2:	4a66      	ldr	r2, [pc, #408]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007da4:	f023 0304 	bic.w	r3, r3, #4
 8007da8:	6713      	str	r3, [r2, #112]	; 0x70
 8007daa:	e01c      	b.n	8007de6 <HAL_RCC_OscConfig+0x376>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b05      	cmp	r3, #5
 8007db2:	d10c      	bne.n	8007dce <HAL_RCC_OscConfig+0x35e>
 8007db4:	4b61      	ldr	r3, [pc, #388]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db8:	4a60      	ldr	r2, [pc, #384]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007dba:	f043 0304 	orr.w	r3, r3, #4
 8007dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8007dc0:	4b5e      	ldr	r3, [pc, #376]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc4:	4a5d      	ldr	r2, [pc, #372]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	6713      	str	r3, [r2, #112]	; 0x70
 8007dcc:	e00b      	b.n	8007de6 <HAL_RCC_OscConfig+0x376>
 8007dce:	4b5b      	ldr	r3, [pc, #364]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd2:	4a5a      	ldr	r2, [pc, #360]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007dd4:	f023 0301 	bic.w	r3, r3, #1
 8007dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8007dda:	4b58      	ldr	r3, [pc, #352]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	4a57      	ldr	r2, [pc, #348]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007de0:	f023 0304 	bic.w	r3, r3, #4
 8007de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d015      	beq.n	8007e1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dee:	f7fb fdeb 	bl	80039c8 <HAL_GetTick>
 8007df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007df4:	e00a      	b.n	8007e0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007df6:	f7fb fde7 	bl	80039c8 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d901      	bls.n	8007e0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e0ce      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e0c:	4b4b      	ldr	r3, [pc, #300]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0ee      	beq.n	8007df6 <HAL_RCC_OscConfig+0x386>
 8007e18:	e014      	b.n	8007e44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e1a:	f7fb fdd5 	bl	80039c8 <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e20:	e00a      	b.n	8007e38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e22:	f7fb fdd1 	bl	80039c8 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d901      	bls.n	8007e38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e0b8      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e38:	4b40      	ldr	r3, [pc, #256]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1ee      	bne.n	8007e22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d105      	bne.n	8007e56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e4a:	4b3c      	ldr	r3, [pc, #240]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4e:	4a3b      	ldr	r2, [pc, #236]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 80a4 	beq.w	8007fa8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e60:	4b36      	ldr	r3, [pc, #216]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 030c 	and.w	r3, r3, #12
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d06b      	beq.n	8007f44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d149      	bne.n	8007f08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e74:	4b31      	ldr	r3, [pc, #196]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a30      	ldr	r2, [pc, #192]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e80:	f7fb fda2 	bl	80039c8 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e88:	f7fb fd9e 	bl	80039c8 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e087      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e9a:	4b28      	ldr	r3, [pc, #160]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f0      	bne.n	8007e88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	69da      	ldr	r2, [r3, #28]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	019b      	lsls	r3, r3, #6
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	085b      	lsrs	r3, r3, #1
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	041b      	lsls	r3, r3, #16
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	061b      	lsls	r3, r3, #24
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	4a1b      	ldr	r2, [pc, #108]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007ece:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ed2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ed4:	4b19      	ldr	r3, [pc, #100]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a18      	ldr	r2, [pc, #96]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee0:	f7fb fd72 	bl	80039c8 <HAL_GetTick>
 8007ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ee8:	f7fb fd6e 	bl	80039c8 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e057      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007efa:	4b10      	ldr	r3, [pc, #64]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0f0      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x478>
 8007f06:	e04f      	b.n	8007fa8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f08:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a0b      	ldr	r2, [pc, #44]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f14:	f7fb fd58 	bl	80039c8 <HAL_GetTick>
 8007f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f1c:	f7fb fd54 	bl	80039c8 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e03d      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f2e:	4b03      	ldr	r3, [pc, #12]	; (8007f3c <HAL_RCC_OscConfig+0x4cc>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f0      	bne.n	8007f1c <HAL_RCC_OscConfig+0x4ac>
 8007f3a:	e035      	b.n	8007fa8 <HAL_RCC_OscConfig+0x538>
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007f44:	4b1b      	ldr	r3, [pc, #108]	; (8007fb4 <HAL_RCC_OscConfig+0x544>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d028      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d121      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d11a      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f74:	4013      	ands	r3, r2
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d111      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d107      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d001      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e000      	b.n	8007faa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40023800 	.word	0x40023800

08007fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0d0      	b.n	8008172 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fd0:	4b6a      	ldr	r3, [pc, #424]	; (800817c <HAL_RCC_ClockConfig+0x1c4>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 030f 	and.w	r3, r3, #15
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d910      	bls.n	8008000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fde:	4b67      	ldr	r3, [pc, #412]	; (800817c <HAL_RCC_ClockConfig+0x1c4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f023 020f 	bic.w	r2, r3, #15
 8007fe6:	4965      	ldr	r1, [pc, #404]	; (800817c <HAL_RCC_ClockConfig+0x1c4>)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fee:	4b63      	ldr	r3, [pc, #396]	; (800817c <HAL_RCC_ClockConfig+0x1c4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d001      	beq.n	8008000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e0b8      	b.n	8008172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d020      	beq.n	800804e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008018:	4b59      	ldr	r3, [pc, #356]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	4a58      	ldr	r2, [pc, #352]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 800801e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0308 	and.w	r3, r3, #8
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008030:	4b53      	ldr	r3, [pc, #332]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	4a52      	ldr	r2, [pc, #328]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 8008036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800803a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800803c:	4b50      	ldr	r3, [pc, #320]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	494d      	ldr	r1, [pc, #308]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 800804a:	4313      	orrs	r3, r2
 800804c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d040      	beq.n	80080dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d107      	bne.n	8008072 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008062:	4b47      	ldr	r3, [pc, #284]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d115      	bne.n	800809a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e07f      	b.n	8008172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d107      	bne.n	800808a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800807a:	4b41      	ldr	r3, [pc, #260]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d109      	bne.n	800809a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e073      	b.n	8008172 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800808a:	4b3d      	ldr	r3, [pc, #244]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e06b      	b.n	8008172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800809a:	4b39      	ldr	r3, [pc, #228]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f023 0203 	bic.w	r2, r3, #3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	4936      	ldr	r1, [pc, #216]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ac:	f7fb fc8c 	bl	80039c8 <HAL_GetTick>
 80080b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080b2:	e00a      	b.n	80080ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080b4:	f7fb fc88 	bl	80039c8 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e053      	b.n	8008172 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ca:	4b2d      	ldr	r3, [pc, #180]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 020c 	and.w	r2, r3, #12
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	429a      	cmp	r2, r3
 80080da:	d1eb      	bne.n	80080b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080dc:	4b27      	ldr	r3, [pc, #156]	; (800817c <HAL_RCC_ClockConfig+0x1c4>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 030f 	and.w	r3, r3, #15
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d210      	bcs.n	800810c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ea:	4b24      	ldr	r3, [pc, #144]	; (800817c <HAL_RCC_ClockConfig+0x1c4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f023 020f 	bic.w	r2, r3, #15
 80080f2:	4922      	ldr	r1, [pc, #136]	; (800817c <HAL_RCC_ClockConfig+0x1c4>)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080fa:	4b20      	ldr	r3, [pc, #128]	; (800817c <HAL_RCC_ClockConfig+0x1c4>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d001      	beq.n	800810c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e032      	b.n	8008172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	d008      	beq.n	800812a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008118:	4b19      	ldr	r3, [pc, #100]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	4916      	ldr	r1, [pc, #88]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 8008126:	4313      	orrs	r3, r2
 8008128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008136:	4b12      	ldr	r3, [pc, #72]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	490e      	ldr	r1, [pc, #56]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 8008146:	4313      	orrs	r3, r2
 8008148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800814a:	f000 f821 	bl	8008190 <HAL_RCC_GetSysClockFreq>
 800814e:	4601      	mov	r1, r0
 8008150:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <HAL_RCC_ClockConfig+0x1c8>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	091b      	lsrs	r3, r3, #4
 8008156:	f003 030f 	and.w	r3, r3, #15
 800815a:	4a0a      	ldr	r2, [pc, #40]	; (8008184 <HAL_RCC_ClockConfig+0x1cc>)
 800815c:	5cd3      	ldrb	r3, [r2, r3]
 800815e:	fa21 f303 	lsr.w	r3, r1, r3
 8008162:	4a09      	ldr	r2, [pc, #36]	; (8008188 <HAL_RCC_ClockConfig+0x1d0>)
 8008164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008166:	4b09      	ldr	r3, [pc, #36]	; (800818c <HAL_RCC_ClockConfig+0x1d4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f7fa fb6c 	bl	8002848 <HAL_InitTick>

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40023c00 	.word	0x40023c00
 8008180:	40023800 	.word	0x40023800
 8008184:	080130fc 	.word	0x080130fc
 8008188:	20000000 	.word	0x20000000
 800818c:	20000020 	.word	0x20000020

08008190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	607b      	str	r3, [r7, #4]
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	2300      	movs	r3, #0
 80081a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081a6:	4b50      	ldr	r3, [pc, #320]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 030c 	and.w	r3, r3, #12
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d007      	beq.n	80081c2 <HAL_RCC_GetSysClockFreq+0x32>
 80081b2:	2b08      	cmp	r3, #8
 80081b4:	d008      	beq.n	80081c8 <HAL_RCC_GetSysClockFreq+0x38>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f040 808d 	bne.w	80082d6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081bc:	4b4b      	ldr	r3, [pc, #300]	; (80082ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80081be:	60bb      	str	r3, [r7, #8]
      break;
 80081c0:	e08c      	b.n	80082dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081c2:	4b4b      	ldr	r3, [pc, #300]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80081c4:	60bb      	str	r3, [r7, #8]
      break;
 80081c6:	e089      	b.n	80082dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081c8:	4b47      	ldr	r3, [pc, #284]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80081d2:	4b45      	ldr	r3, [pc, #276]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d023      	beq.n	8008226 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081de:	4b42      	ldr	r3, [pc, #264]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	099b      	lsrs	r3, r3, #6
 80081e4:	f04f 0400 	mov.w	r4, #0
 80081e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	ea03 0501 	and.w	r5, r3, r1
 80081f4:	ea04 0602 	and.w	r6, r4, r2
 80081f8:	4a3d      	ldr	r2, [pc, #244]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80081fa:	fb02 f106 	mul.w	r1, r2, r6
 80081fe:	2200      	movs	r2, #0
 8008200:	fb02 f205 	mul.w	r2, r2, r5
 8008204:	440a      	add	r2, r1
 8008206:	493a      	ldr	r1, [pc, #232]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008208:	fba5 0101 	umull	r0, r1, r5, r1
 800820c:	1853      	adds	r3, r2, r1
 800820e:	4619      	mov	r1, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f04f 0400 	mov.w	r4, #0
 8008216:	461a      	mov	r2, r3
 8008218:	4623      	mov	r3, r4
 800821a:	f7f8 f849 	bl	80002b0 <__aeabi_uldivmod>
 800821e:	4603      	mov	r3, r0
 8008220:	460c      	mov	r4, r1
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e049      	b.n	80082ba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008226:	4b30      	ldr	r3, [pc, #192]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	099b      	lsrs	r3, r3, #6
 800822c:	f04f 0400 	mov.w	r4, #0
 8008230:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	ea03 0501 	and.w	r5, r3, r1
 800823c:	ea04 0602 	and.w	r6, r4, r2
 8008240:	4629      	mov	r1, r5
 8008242:	4632      	mov	r2, r6
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	f04f 0400 	mov.w	r4, #0
 800824c:	0154      	lsls	r4, r2, #5
 800824e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008252:	014b      	lsls	r3, r1, #5
 8008254:	4619      	mov	r1, r3
 8008256:	4622      	mov	r2, r4
 8008258:	1b49      	subs	r1, r1, r5
 800825a:	eb62 0206 	sbc.w	r2, r2, r6
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	f04f 0400 	mov.w	r4, #0
 8008266:	0194      	lsls	r4, r2, #6
 8008268:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800826c:	018b      	lsls	r3, r1, #6
 800826e:	1a5b      	subs	r3, r3, r1
 8008270:	eb64 0402 	sbc.w	r4, r4, r2
 8008274:	f04f 0100 	mov.w	r1, #0
 8008278:	f04f 0200 	mov.w	r2, #0
 800827c:	00e2      	lsls	r2, r4, #3
 800827e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008282:	00d9      	lsls	r1, r3, #3
 8008284:	460b      	mov	r3, r1
 8008286:	4614      	mov	r4, r2
 8008288:	195b      	adds	r3, r3, r5
 800828a:	eb44 0406 	adc.w	r4, r4, r6
 800828e:	f04f 0100 	mov.w	r1, #0
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	02a2      	lsls	r2, r4, #10
 8008298:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800829c:	0299      	lsls	r1, r3, #10
 800829e:	460b      	mov	r3, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	4621      	mov	r1, r4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f04f 0400 	mov.w	r4, #0
 80082ac:	461a      	mov	r2, r3
 80082ae:	4623      	mov	r3, r4
 80082b0:	f7f7 fffe 	bl	80002b0 <__aeabi_uldivmod>
 80082b4:	4603      	mov	r3, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80082ba:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	3301      	adds	r3, #1
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d2:	60bb      	str	r3, [r7, #8]
      break;
 80082d4:	e002      	b.n	80082dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80082d8:	60bb      	str	r3, [r7, #8]
      break;
 80082da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082dc:	68bb      	ldr	r3, [r7, #8]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40023800 	.word	0x40023800
 80082ec:	00f42400 	.word	0x00f42400
 80082f0:	017d7840 	.word	0x017d7840

080082f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082f8:	4b03      	ldr	r3, [pc, #12]	; (8008308 <HAL_RCC_GetHCLKFreq+0x14>)
 80082fa:	681b      	ldr	r3, [r3, #0]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000000 	.word	0x20000000

0800830c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008310:	f7ff fff0 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 8008314:	4601      	mov	r1, r0
 8008316:	4b05      	ldr	r3, [pc, #20]	; (800832c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	0a9b      	lsrs	r3, r3, #10
 800831c:	f003 0307 	and.w	r3, r3, #7
 8008320:	4a03      	ldr	r2, [pc, #12]	; (8008330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008322:	5cd3      	ldrb	r3, [r2, r3]
 8008324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008328:	4618      	mov	r0, r3
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40023800 	.word	0x40023800
 8008330:	0801310c 	.word	0x0801310c

08008334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008338:	f7ff ffdc 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 800833c:	4601      	mov	r1, r0
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	0b5b      	lsrs	r3, r3, #13
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	4a03      	ldr	r2, [pc, #12]	; (8008358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800834a:	5cd3      	ldrb	r3, [r2, r3]
 800834c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008350:	4618      	mov	r0, r3
 8008352:	bd80      	pop	{r7, pc}
 8008354:	40023800 	.word	0x40023800
 8008358:	0801310c 	.word	0x0801310c

0800835c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	220f      	movs	r2, #15
 800836a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800836c:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <HAL_RCC_GetClockConfig+0x5c>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f003 0203 	and.w	r2, r3, #3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008378:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <HAL_RCC_GetClockConfig+0x5c>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008384:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008390:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	08db      	lsrs	r3, r3, #3
 8008396:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <HAL_RCC_GetClockConfig+0x60>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 020f 	and.w	r2, r3, #15
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40023800 	.word	0x40023800
 80083bc:	40023c00 	.word	0x40023c00

080083c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d012      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083e8:	4b69      	ldr	r3, [pc, #420]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	4a68      	ldr	r2, [pc, #416]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80083f2:	6093      	str	r3, [r2, #8]
 80083f4:	4b66      	ldr	r3, [pc, #408]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fc:	4964      	ldr	r1, [pc, #400]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800840a:	2301      	movs	r3, #1
 800840c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d017      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800841a:	4b5d      	ldr	r3, [pc, #372]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008428:	4959      	ldr	r1, [pc, #356]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008438:	d101      	bne.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800843a:	2301      	movs	r3, #1
 800843c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008446:	2301      	movs	r3, #1
 8008448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d017      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008456:	4b4e      	ldr	r3, [pc, #312]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800845c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008464:	494a      	ldr	r1, [pc, #296]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008466:	4313      	orrs	r3, r2
 8008468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008474:	d101      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008476:	2301      	movs	r3, #1
 8008478:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008482:	2301      	movs	r3, #1
 8008484:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008492:	2301      	movs	r3, #1
 8008494:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 808b 	beq.w	80085ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084a4:	4b3a      	ldr	r3, [pc, #232]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a8:	4a39      	ldr	r2, [pc, #228]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ae:	6413      	str	r3, [r2, #64]	; 0x40
 80084b0:	4b37      	ldr	r3, [pc, #220]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b8:	60bb      	str	r3, [r7, #8]
 80084ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084bc:	4b35      	ldr	r3, [pc, #212]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a34      	ldr	r2, [pc, #208]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c8:	f7fb fa7e 	bl	80039c8 <HAL_GetTick>
 80084cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084ce:	e008      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084d0:	f7fb fa7a 	bl	80039c8 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b64      	cmp	r3, #100	; 0x64
 80084dc:	d901      	bls.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e355      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084e2:	4b2c      	ldr	r3, [pc, #176]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0f0      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084ee:	4b28      	ldr	r3, [pc, #160]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d035      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	429a      	cmp	r2, r3
 800850a:	d02e      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800850c:	4b20      	ldr	r3, [pc, #128]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800850e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008514:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008516:	4b1e      	ldr	r3, [pc, #120]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	4a1d      	ldr	r2, [pc, #116]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800851c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008520:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008522:	4b1b      	ldr	r3, [pc, #108]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008526:	4a1a      	ldr	r2, [pc, #104]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800852c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800852e:	4a18      	ldr	r2, [pc, #96]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008534:	4b16      	ldr	r3, [pc, #88]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b01      	cmp	r3, #1
 800853e:	d114      	bne.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008540:	f7fb fa42 	bl	80039c8 <HAL_GetTick>
 8008544:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008546:	e00a      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008548:	f7fb fa3e 	bl	80039c8 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	f241 3288 	movw	r2, #5000	; 0x1388
 8008556:	4293      	cmp	r3, r2
 8008558:	d901      	bls.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e317      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800855e:	4b0c      	ldr	r3, [pc, #48]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0ee      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008576:	d111      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008584:	4b04      	ldr	r3, [pc, #16]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008586:	400b      	ands	r3, r1
 8008588:	4901      	ldr	r1, [pc, #4]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800858a:	4313      	orrs	r3, r2
 800858c:	608b      	str	r3, [r1, #8]
 800858e:	e00b      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008590:	40023800 	.word	0x40023800
 8008594:	40007000 	.word	0x40007000
 8008598:	0ffffcff 	.word	0x0ffffcff
 800859c:	4bb0      	ldr	r3, [pc, #704]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	4aaf      	ldr	r2, [pc, #700]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80085a6:	6093      	str	r3, [r2, #8]
 80085a8:	4bad      	ldr	r3, [pc, #692]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085b4:	49aa      	ldr	r1, [pc, #680]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0310 	and.w	r3, r3, #16
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d010      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085c6:	4ba6      	ldr	r3, [pc, #664]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085cc:	4aa4      	ldr	r2, [pc, #656]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80085d6:	4ba2      	ldr	r3, [pc, #648]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	499f      	ldr	r1, [pc, #636]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085f4:	4b9a      	ldr	r3, [pc, #616]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008602:	4997      	ldr	r1, [pc, #604]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008604:	4313      	orrs	r3, r2
 8008606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008616:	4b92      	ldr	r3, [pc, #584]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008624:	498e      	ldr	r1, [pc, #568]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008638:	4b89      	ldr	r3, [pc, #548]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008646:	4986      	ldr	r1, [pc, #536]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008648:	4313      	orrs	r3, r2
 800864a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800865a:	4b81      	ldr	r3, [pc, #516]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800865c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008660:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008668:	497d      	ldr	r1, [pc, #500]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800866a:	4313      	orrs	r3, r2
 800866c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800867c:	4b78      	ldr	r3, [pc, #480]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008682:	f023 0203 	bic.w	r2, r3, #3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868a:	4975      	ldr	r1, [pc, #468]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800868c:	4313      	orrs	r3, r2
 800868e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800869e:	4b70      	ldr	r3, [pc, #448]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a4:	f023 020c 	bic.w	r2, r3, #12
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ac:	496c      	ldr	r1, [pc, #432]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00a      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086c0:	4b67      	ldr	r3, [pc, #412]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ce:	4964      	ldr	r1, [pc, #400]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086e2:	4b5f      	ldr	r3, [pc, #380]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f0:	495b      	ldr	r1, [pc, #364]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00a      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008704:	4b56      	ldr	r3, [pc, #344]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800870a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008712:	4953      	ldr	r1, [pc, #332]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008714:	4313      	orrs	r3, r2
 8008716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008726:	4b4e      	ldr	r3, [pc, #312]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800872c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008734:	494a      	ldr	r1, [pc, #296]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008736:	4313      	orrs	r3, r2
 8008738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00a      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008748:	4b45      	ldr	r3, [pc, #276]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800874a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008756:	4942      	ldr	r1, [pc, #264]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008758:	4313      	orrs	r3, r2
 800875a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800876a:	4b3d      	ldr	r3, [pc, #244]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800876c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008770:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008778:	4939      	ldr	r1, [pc, #228]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800877a:	4313      	orrs	r3, r2
 800877c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00a      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800878c:	4b34      	ldr	r3, [pc, #208]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800878e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008792:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800879a:	4931      	ldr	r1, [pc, #196]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800879c:	4313      	orrs	r3, r2
 800879e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d011      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80087ae:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087bc:	4928      	ldr	r1, [pc, #160]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087cc:	d101      	bne.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80087ce:	2301      	movs	r3, #1
 80087d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80087de:	2301      	movs	r3, #1
 80087e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ee:	4b1c      	ldr	r3, [pc, #112]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087fc:	4918      	ldr	r1, [pc, #96]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00b      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008810:	4b13      	ldr	r3, [pc, #76]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008816:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008820:	490f      	ldr	r1, [pc, #60]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d005      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008836:	f040 80d8 	bne.w	80089ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800883a:	4b09      	ldr	r3, [pc, #36]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a08      	ldr	r2, [pc, #32]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008840:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008846:	f7fb f8bf 	bl	80039c8 <HAL_GetTick>
 800884a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800884c:	e00a      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800884e:	f7fb f8bb 	bl	80039c8 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b64      	cmp	r3, #100	; 0x64
 800885a:	d903      	bls.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e196      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008860:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008864:	4b6c      	ldr	r3, [pc, #432]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1ee      	bne.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d021      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11d      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008884:	4b64      	ldr	r3, [pc, #400]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800888a:	0c1b      	lsrs	r3, r3, #16
 800888c:	f003 0303 	and.w	r3, r3, #3
 8008890:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008892:	4b61      	ldr	r3, [pc, #388]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008898:	0e1b      	lsrs	r3, r3, #24
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	019a      	lsls	r2, r3, #6
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	041b      	lsls	r3, r3, #16
 80088aa:	431a      	orrs	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	061b      	lsls	r3, r3, #24
 80088b0:	431a      	orrs	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	071b      	lsls	r3, r3, #28
 80088b8:	4957      	ldr	r1, [pc, #348]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d004      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088d4:	d00a      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d02e      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088ea:	d129      	bne.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088ec:	4b4a      	ldr	r3, [pc, #296]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f2:	0c1b      	lsrs	r3, r3, #16
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088fa:	4b47      	ldr	r3, [pc, #284]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008900:	0f1b      	lsrs	r3, r3, #28
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	019a      	lsls	r2, r3, #6
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	041b      	lsls	r3, r3, #16
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	061b      	lsls	r3, r3, #24
 800891a:	431a      	orrs	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	071b      	lsls	r3, r3, #28
 8008920:	493d      	ldr	r1, [pc, #244]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008922:	4313      	orrs	r3, r2
 8008924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008928:	4b3b      	ldr	r3, [pc, #236]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800892a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800892e:	f023 021f 	bic.w	r2, r3, #31
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	3b01      	subs	r3, #1
 8008938:	4937      	ldr	r1, [pc, #220]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800893a:	4313      	orrs	r3, r2
 800893c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01d      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800894c:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800894e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008952:	0e1b      	lsrs	r3, r3, #24
 8008954:	f003 030f 	and.w	r3, r3, #15
 8008958:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800895a:	4b2f      	ldr	r3, [pc, #188]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800895c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008960:	0f1b      	lsrs	r3, r3, #28
 8008962:	f003 0307 	and.w	r3, r3, #7
 8008966:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	019a      	lsls	r2, r3, #6
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	041b      	lsls	r3, r3, #16
 8008974:	431a      	orrs	r2, r3
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	061b      	lsls	r3, r3, #24
 800897a:	431a      	orrs	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	071b      	lsls	r3, r3, #28
 8008980:	4925      	ldr	r1, [pc, #148]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008982:	4313      	orrs	r3, r2
 8008984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d011      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	019a      	lsls	r2, r3, #6
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	431a      	orrs	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	061b      	lsls	r3, r3, #24
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	071b      	lsls	r3, r3, #28
 80089b0:	4919      	ldr	r1, [pc, #100]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80089b8:	4b17      	ldr	r3, [pc, #92]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a16      	ldr	r2, [pc, #88]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089c4:	f7fb f800 	bl	80039c8 <HAL_GetTick>
 80089c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089ca:	e008      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089cc:	f7fa fffc 	bl	80039c8 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b64      	cmp	r3, #100	; 0x64
 80089d8:	d901      	bls.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e0d7      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089de:	4b0e      	ldr	r3, [pc, #56]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	f040 80cd 	bne.w	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a08      	ldr	r2, [pc, #32]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089fe:	f7fa ffe3 	bl	80039c8 <HAL_GetTick>
 8008a02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a04:	e00a      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a06:	f7fa ffdf 	bl	80039c8 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	2b64      	cmp	r3, #100	; 0x64
 8008a12:	d903      	bls.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e0ba      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008a18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a1c:	4b5e      	ldr	r3, [pc, #376]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a28:	d0ed      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d02e      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d12a      	bne.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a52:	4b51      	ldr	r3, [pc, #324]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a58:	0c1b      	lsrs	r3, r3, #16
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a60:	4b4d      	ldr	r3, [pc, #308]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a66:	0f1b      	lsrs	r3, r3, #28
 8008a68:	f003 0307 	and.w	r3, r3, #7
 8008a6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	019a      	lsls	r2, r3, #6
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	041b      	lsls	r3, r3, #16
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	061b      	lsls	r3, r3, #24
 8008a80:	431a      	orrs	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	071b      	lsls	r3, r3, #28
 8008a86:	4944      	ldr	r1, [pc, #272]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a8e:	4b42      	ldr	r3, [pc, #264]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	021b      	lsls	r3, r3, #8
 8008aa0:	493d      	ldr	r1, [pc, #244]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d022      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008abc:	d11d      	bne.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008abe:	4b36      	ldr	r3, [pc, #216]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac4:	0e1b      	lsrs	r3, r3, #24
 8008ac6:	f003 030f 	and.w	r3, r3, #15
 8008aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008acc:	4b32      	ldr	r3, [pc, #200]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad2:	0f1b      	lsrs	r3, r3, #28
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	019a      	lsls	r2, r3, #6
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	041b      	lsls	r3, r3, #16
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	061b      	lsls	r3, r3, #24
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	071b      	lsls	r3, r3, #28
 8008af2:	4929      	ldr	r1, [pc, #164]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d028      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b06:	4b24      	ldr	r3, [pc, #144]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b0c:	0e1b      	lsrs	r3, r3, #24
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b14:	4b20      	ldr	r3, [pc, #128]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b1a:	0c1b      	lsrs	r3, r3, #16
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	019a      	lsls	r2, r3, #6
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	041b      	lsls	r3, r3, #16
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	061b      	lsls	r3, r3, #24
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	071b      	lsls	r3, r3, #28
 8008b3a:	4917      	ldr	r1, [pc, #92]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b42:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	4911      	ldr	r1, [pc, #68]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b58:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a0e      	ldr	r2, [pc, #56]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b64:	f7fa ff30 	bl	80039c8 <HAL_GetTick>
 8008b68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b6c:	f7fa ff2c 	bl	80039c8 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b64      	cmp	r3, #100	; 0x64
 8008b78:	d901      	bls.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e007      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b7e:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b8a:	d1ef      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3720      	adds	r7, #32
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	40023800 	.word	0x40023800

08008b9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008bba:	f040 8086 	bne.w	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008bbe:	4b8d      	ldr	r3, [pc, #564]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bc4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008bcc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bd4:	d03e      	beq.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8008bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bda:	d073      	beq.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d000      	beq.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008be0:	e074      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008be2:	4b84      	ldr	r3, [pc, #528]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d108      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008bee:	4b81      	ldr	r3, [pc, #516]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bf6:	4a80      	ldr	r2, [pc, #512]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	e007      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008c00:	4b7c      	ldr	r3, [pc, #496]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c08:	4a7c      	ldr	r2, [pc, #496]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008c10:	4b78      	ldr	r3, [pc, #480]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c16:	0e1b      	lsrs	r3, r3, #24
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008c1e:	4b75      	ldr	r3, [pc, #468]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c24:	099b      	lsrs	r3, r3, #6
 8008c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	fb02 f203 	mul.w	r2, r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c36:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008c38:	4b6e      	ldr	r3, [pc, #440]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c3e:	0a1b      	lsrs	r3, r3, #8
 8008c40:	f003 031f 	and.w	r3, r3, #31
 8008c44:	3301      	adds	r3, #1
 8008c46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c50:	617b      	str	r3, [r7, #20]
        break;
 8008c52:	e03b      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008c54:	4b67      	ldr	r3, [pc, #412]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d108      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c60:	4b64      	ldr	r3, [pc, #400]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c68:	4a63      	ldr	r2, [pc, #396]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	e007      	b.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008c72:	4b60      	ldr	r3, [pc, #384]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c7a:	4a60      	ldr	r2, [pc, #384]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c80:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008c82:	4b5c      	ldr	r3, [pc, #368]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c88:	0e1b      	lsrs	r3, r3, #24
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008c90:	4b58      	ldr	r3, [pc, #352]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c96:	099b      	lsrs	r3, r3, #6
 8008c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	fb02 f203 	mul.w	r2, r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008caa:	4b52      	ldr	r3, [pc, #328]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb0:	f003 031f 	and.w	r3, r3, #31
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc0:	617b      	str	r3, [r7, #20]
        break;
 8008cc2:	e003      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008cc4:	4b4e      	ldr	r3, [pc, #312]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008cc6:	617b      	str	r3, [r7, #20]
        break;
 8008cc8:	e000      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8008cca:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cd2:	f040 8086 	bne.w	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008cd6:	4b47      	ldr	r3, [pc, #284]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cdc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008ce4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cec:	d03e      	beq.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cf2:	d073      	beq.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d000      	beq.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008cf8:	e074      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008cfa:	4b3e      	ldr	r3, [pc, #248]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d108      	bne.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008d06:	4b3b      	ldr	r3, [pc, #236]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d0e:	4a3a      	ldr	r2, [pc, #232]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	e007      	b.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008d18:	4b36      	ldr	r3, [pc, #216]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d20:	4a36      	ldr	r2, [pc, #216]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d26:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008d28:	4b32      	ldr	r3, [pc, #200]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2e:	0e1b      	lsrs	r3, r3, #24
 8008d30:	f003 030f 	and.w	r3, r3, #15
 8008d34:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008d36:	4b2f      	ldr	r3, [pc, #188]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d3c:	099b      	lsrs	r3, r3, #6
 8008d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	fb02 f203 	mul.w	r2, r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008d50:	4b28      	ldr	r3, [pc, #160]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d56:	0a1b      	lsrs	r3, r3, #8
 8008d58:	f003 031f 	and.w	r3, r3, #31
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d68:	617b      	str	r3, [r7, #20]
        break;
 8008d6a:	e03b      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008d6c:	4b21      	ldr	r3, [pc, #132]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d108      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008d78:	4b1e      	ldr	r3, [pc, #120]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d80:	4a1d      	ldr	r2, [pc, #116]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	e007      	b.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008d8a:	4b1a      	ldr	r3, [pc, #104]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d92:	4a1a      	ldr	r2, [pc, #104]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d98:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008d9a:	4b16      	ldr	r3, [pc, #88]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008da0:	0e1b      	lsrs	r3, r3, #24
 8008da2:	f003 030f 	and.w	r3, r3, #15
 8008da6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008da8:	4b12      	ldr	r3, [pc, #72]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dae:	099b      	lsrs	r3, r3, #6
 8008db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	fb02 f203 	mul.w	r2, r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc8:	f003 031f 	and.w	r3, r3, #31
 8008dcc:	3301      	adds	r3, #1
 8008dce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd8:	617b      	str	r3, [r7, #20]
        break;
 8008dda:	e003      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ddc:	4b08      	ldr	r3, [pc, #32]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008dde:	617b      	str	r3, [r7, #20]
        break;
 8008de0:	e000      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8008de2:	bf00      	nop

  return frequency;
 8008de4:	697b      	ldr	r3, [r7, #20]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	40023800 	.word	0x40023800
 8008df8:	00f42400 	.word	0x00f42400
 8008dfc:	017d7840 	.word	0x017d7840
 8008e00:	00bb8000 	.word	0x00bb8000

08008e04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e06b      	b.n	8008eee <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	7f5b      	ldrb	r3, [r3, #29]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7f9 f9be 	bl	80021a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	22ca      	movs	r2, #202	; 0xca
 8008e38:	625a      	str	r2, [r3, #36]	; 0x24
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2253      	movs	r2, #83	; 0x53
 8008e40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fb00 	bl	8009448 <RTC_EnterInitMode>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	22ff      	movs	r2, #255	; 0xff
 8008e54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2204      	movs	r2, #4
 8008e5a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e046      	b.n	8008eee <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6899      	ldr	r1, [r3, #8]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <HAL_RTC_Init+0xf4>)
 8008e6c:	400b      	ands	r3, r1
 8008e6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6899      	ldr	r1, [r3, #8]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	68d2      	ldr	r2, [r2, #12]
 8008e96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6919      	ldr	r1, [r3, #16]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	041a      	lsls	r2, r3, #16
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008eba:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0208 	bic.w	r2, r2, #8
 8008eca:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699a      	ldr	r2, [r3, #24]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	22ff      	movs	r2, #255	; 0xff
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008eec:	2300      	movs	r3, #0
  }
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	ff8fffbf 	.word	0xff8fffbf

08008efc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008efc:	b590      	push	{r4, r7, lr}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	7f1b      	ldrb	r3, [r3, #28]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <HAL_RTC_SetTime+0x1c>
 8008f14:	2302      	movs	r3, #2
 8008f16:	e0a8      	b.n	800906a <HAL_RTC_SetTime+0x16e>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2202      	movs	r2, #2
 8008f22:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d126      	bne.n	8008f78 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 faac 	bl	80094a0 <RTC_ByteToBcd2>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 faa5 	bl	80094a0 <RTC_ByteToBcd2>
 8008f56:	4603      	mov	r3, r0
 8008f58:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008f5a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	789b      	ldrb	r3, [r3, #2]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 fa9d 	bl	80094a0 <RTC_ByteToBcd2>
 8008f66:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008f68:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	7b1b      	ldrb	r3, [r3, #12]
 8008f70:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008f72:	4313      	orrs	r3, r2
 8008f74:	617b      	str	r3, [r7, #20]
 8008f76:	e018      	b.n	8008faa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d102      	bne.n	8008f8c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	785b      	ldrb	r3, [r3, #1]
 8008f96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008f98:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008f9e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	7b1b      	ldrb	r3, [r3, #12]
 8008fa4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	22ca      	movs	r2, #202	; 0xca
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2253      	movs	r2, #83	; 0x53
 8008fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fa44 	bl	8009448 <RTC_EnterInitMode>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	22ff      	movs	r2, #255	; 0xff
 8008fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2204      	movs	r2, #4
 8008fd2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e045      	b.n	800906a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	6979      	ldr	r1, [r7, #20]
 8008fe4:	4b23      	ldr	r3, [pc, #140]	; (8009074 <HAL_RTC_SetTime+0x178>)
 8008fe6:	400b      	ands	r3, r1
 8008fe8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ff8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6899      	ldr	r1, [r3, #8]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	431a      	orrs	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009020:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d111      	bne.n	8009054 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f9e1 	bl	80093f8 <HAL_RTC_WaitForSynchro>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	22ff      	movs	r2, #255	; 0xff
 8009042:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2204      	movs	r2, #4
 8009048:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e00a      	b.n	800906a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	22ff      	movs	r2, #255	; 0xff
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2201      	movs	r2, #1
 8009060:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009068:	2300      	movs	r3, #0
  }
}
 800906a:	4618      	mov	r0, r3
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	bd90      	pop	{r4, r7, pc}
 8009072:	bf00      	nop
 8009074:	007f7f7f 	.word	0x007f7f7f

08009078 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009078:	b590      	push	{r4, r7, lr}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	7f1b      	ldrb	r3, [r3, #28]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <HAL_RTC_SetDate+0x1c>
 8009090:	2302      	movs	r3, #2
 8009092:	e092      	b.n	80091ba <HAL_RTC_SetDate+0x142>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2202      	movs	r2, #2
 800909e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10e      	bne.n	80090c4 <HAL_RTC_SetDate+0x4c>
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	f003 0310 	and.w	r3, r3, #16
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d008      	beq.n	80090c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	f023 0310 	bic.w	r3, r3, #16
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	330a      	adds	r3, #10
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d11c      	bne.n	8009104 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	78db      	ldrb	r3, [r3, #3]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f9e6 	bl	80094a0 <RTC_ByteToBcd2>
 80090d4:	4603      	mov	r3, r0
 80090d6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 f9df 	bl	80094a0 <RTC_ByteToBcd2>
 80090e2:	4603      	mov	r3, r0
 80090e4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80090e6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	789b      	ldrb	r3, [r3, #2]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f9d7 	bl	80094a0 <RTC_ByteToBcd2>
 80090f2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80090f4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80090fe:	4313      	orrs	r3, r2
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	e00e      	b.n	8009122 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	78db      	ldrb	r3, [r3, #3]
 8009108:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009110:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009116:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800911e:	4313      	orrs	r3, r2
 8009120:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	22ca      	movs	r2, #202	; 0xca
 8009128:	625a      	str	r2, [r3, #36]	; 0x24
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2253      	movs	r2, #83	; 0x53
 8009130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 f988 	bl	8009448 <RTC_EnterInitMode>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00b      	beq.n	8009156 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	22ff      	movs	r2, #255	; 0xff
 8009144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2204      	movs	r2, #4
 800914a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e031      	b.n	80091ba <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	6979      	ldr	r1, [r7, #20]
 800915c:	4b19      	ldr	r3, [pc, #100]	; (80091c4 <HAL_RTC_SetDate+0x14c>)
 800915e:	400b      	ands	r3, r1
 8009160:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009170:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b00      	cmp	r3, #0
 800917e:	d111      	bne.n	80091a4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 f939 	bl	80093f8 <HAL_RTC_WaitForSynchro>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	22ff      	movs	r2, #255	; 0xff
 8009192:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2204      	movs	r2, #4
 8009198:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e00a      	b.n	80091ba <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	22ff      	movs	r2, #255	; 0xff
 80091aa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2201      	movs	r2, #1
 80091b0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80091b8:	2300      	movs	r3, #0
  }
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd90      	pop	{r4, r7, pc}
 80091c2:	bf00      	nop
 80091c4:	00ffff3f 	.word	0x00ffff3f

080091c8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80091c8:	b590      	push	{r4, r7, lr}
 80091ca:	b089      	sub	sp, #36	; 0x24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	61fb      	str	r3, [r7, #28]
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	7f1b      	ldrb	r3, [r3, #28]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d101      	bne.n	80091ec <HAL_RTC_SetAlarm+0x24>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e101      	b.n	80093f0 <HAL_RTC_SetAlarm+0x228>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2201      	movs	r2, #1
 80091f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2202      	movs	r2, #2
 80091f6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d137      	bne.n	800926e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d102      	bne.n	8009212 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2200      	movs	r2, #0
 8009210:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	4618      	mov	r0, r3
 8009218:	f000 f942 	bl	80094a0 <RTC_ByteToBcd2>
 800921c:	4603      	mov	r3, r0
 800921e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	785b      	ldrb	r3, [r3, #1]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f93b 	bl	80094a0 <RTC_ByteToBcd2>
 800922a:	4603      	mov	r3, r0
 800922c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800922e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	789b      	ldrb	r3, [r3, #2]
 8009234:	4618      	mov	r0, r3
 8009236:	f000 f933 	bl	80094a0 <RTC_ByteToBcd2>
 800923a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800923c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	7b1b      	ldrb	r3, [r3, #12]
 8009244:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009246:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009250:	4618      	mov	r0, r3
 8009252:	f000 f925 	bl	80094a0 <RTC_ByteToBcd2>
 8009256:	4603      	mov	r3, r0
 8009258:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800925a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009262:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009268:	4313      	orrs	r3, r2
 800926a:	61fb      	str	r3, [r7, #28]
 800926c:	e023      	b.n	80092b6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d102      	bne.n	8009282 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	785b      	ldrb	r3, [r3, #1]
 800928c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800928e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009294:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	7b1b      	ldrb	r3, [r3, #12]
 800929a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800929c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80092a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80092ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80092b2:	4313      	orrs	r3, r2
 80092b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	4313      	orrs	r3, r2
 80092c0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	22ca      	movs	r2, #202	; 0xca
 80092c8:	625a      	str	r2, [r3, #36]	; 0x24
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2253      	movs	r2, #83	; 0x53
 80092d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092da:	d13f      	bne.n	800935c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092ea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689a      	ldr	r2, [r3, #8]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092fa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092fc:	f7fa fb64 	bl	80039c8 <HAL_GetTick>
 8009300:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009302:	e013      	b.n	800932c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009304:	f7fa fb60 	bl	80039c8 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009312:	d90b      	bls.n	800932c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	22ff      	movs	r2, #255	; 0xff
 800931a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2203      	movs	r2, #3
 8009320:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e061      	b.n	80093f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0e4      	beq.n	8009304 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009358:	609a      	str	r2, [r3, #8]
 800935a:	e03e      	b.n	80093da <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800936a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800937a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800937c:	f7fa fb24 	bl	80039c8 <HAL_GetTick>
 8009380:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009382:	e013      	b.n	80093ac <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009384:	f7fa fb20 	bl	80039c8 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009392:	d90b      	bls.n	80093ac <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	22ff      	movs	r2, #255	; 0xff
 800939a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2203      	movs	r2, #3
 80093a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e021      	b.n	80093f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0e4      	beq.n	8009384 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	22ff      	movs	r2, #255	; 0xff
 80093e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3724      	adds	r7, #36	; 0x24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd90      	pop	{r4, r7, pc}

080093f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009412:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009414:	f7fa fad8 	bl	80039c8 <HAL_GetTick>
 8009418:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800941a:	e009      	b.n	8009430 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800941c:	f7fa fad4 	bl	80039c8 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800942a:	d901      	bls.n	8009430 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e007      	b.n	8009440 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0ee      	beq.n	800941c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945e:	2b00      	cmp	r3, #0
 8009460:	d119      	bne.n	8009496 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f04f 32ff 	mov.w	r2, #4294967295
 800946a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800946c:	f7fa faac 	bl	80039c8 <HAL_GetTick>
 8009470:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009472:	e009      	b.n	8009488 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009474:	f7fa faa8 	bl	80039c8 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009482:	d901      	bls.n	8009488 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e007      	b.n	8009498 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0ee      	beq.n	8009474 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80094ae:	e005      	b.n	80094bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3301      	adds	r3, #1
 80094b4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	3b0a      	subs	r3, #10
 80094ba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80094bc:	79fb      	ldrb	r3, [r7, #7]
 80094be:	2b09      	cmp	r3, #9
 80094c0:	d8f6      	bhi.n	80094b0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	b2db      	uxtb	r3, r3
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	7f1b      	ldrb	r3, [r3, #28]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e03e      	b.n	8009576 <HAL_RTCEx_SetTimeStamp+0x9a>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2201      	movs	r2, #1
 80094fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2202      	movs	r2, #2
 8009502:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689a      	ldr	r2, [r3, #8]
 800950a:	4b1e      	ldr	r3, [pc, #120]	; (8009584 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800950c:	4013      	ands	r3, r2
 800950e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	4313      	orrs	r3, r2
 8009516:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	22ca      	movs	r2, #202	; 0xca
 800951e:	625a      	str	r2, [r3, #36]	; 0x24
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2253      	movs	r2, #83	; 0x53
 8009526:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0206 	bic.w	r2, r2, #6
 8009536:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	430a      	orrs	r2, r1
 8009546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	697a      	ldr	r2, [r7, #20]
 800954e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800955e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	22ff      	movs	r2, #255	; 0xff
 8009566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	fffff7f7 	.word	0xfffff7f7

08009588 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b088      	sub	sp, #32
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e149      	b.n	800983a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d106      	bne.n	80095c0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7f9 f8da 	bl	8002774 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f94f 	bl	800986c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d007      	beq.n	80095e6 <HAL_SAI_Init+0x5e>
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d302      	bcc.n	80095e0 <HAL_SAI_Init+0x58>
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d006      	beq.n	80095ec <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80095de:	e008      	b.n	80095f2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	61fb      	str	r3, [r7, #28]
      break;
 80095e4:	e005      	b.n	80095f2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80095e6:	2310      	movs	r3, #16
 80095e8:	61fb      	str	r3, [r7, #28]
      break;
 80095ea:	e002      	b.n	80095f2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80095ec:	2320      	movs	r3, #32
 80095ee:	61fb      	str	r3, [r7, #28]
      break;
 80095f0:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d81d      	bhi.n	8009636 <HAL_SAI_Init+0xae>
 80095fa:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <HAL_SAI_Init+0x78>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009611 	.word	0x08009611
 8009604:	08009617 	.word	0x08009617
 8009608:	0800961f 	.word	0x0800961f
 800960c:	08009627 	.word	0x08009627
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	617b      	str	r3, [r7, #20]
      }
      break;
 8009614:	e010      	b.n	8009638 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8009616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800961a:	617b      	str	r3, [r7, #20]
      }
      break;
 800961c:	e00c      	b.n	8009638 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800961e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009622:	617b      	str	r3, [r7, #20]
      }
      break;
 8009624:	e008      	b.n	8009638 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8009626:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800962a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	f043 0301 	orr.w	r3, r3, #1
 8009632:	61fb      	str	r3, [r7, #28]
      }
      break;
 8009634:	e000      	b.n	8009638 <HAL_SAI_Init+0xb0>
  default:
    break;
 8009636:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a81      	ldr	r2, [pc, #516]	; (8009844 <HAL_SAI_Init+0x2bc>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d004      	beq.n	800964c <HAL_SAI_Init+0xc4>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a80      	ldr	r2, [pc, #512]	; (8009848 <HAL_SAI_Init+0x2c0>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d103      	bne.n	8009654 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800964c:	4a7f      	ldr	r2, [pc, #508]	; (800984c <HAL_SAI_Init+0x2c4>)
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	e002      	b.n	800965a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009654:	4a7e      	ldr	r2, [pc, #504]	; (8009850 <HAL_SAI_Init+0x2c8>)
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d043      	beq.n	80096ea <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a76      	ldr	r2, [pc, #472]	; (8009844 <HAL_SAI_Init+0x2bc>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d004      	beq.n	800967a <HAL_SAI_Init+0xf2>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a74      	ldr	r2, [pc, #464]	; (8009848 <HAL_SAI_Init+0x2c0>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d104      	bne.n	8009684 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800967a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800967e:	f7ff fa8d 	bl	8008b9c <HAL_RCCEx_GetPeriphCLKFreq>
 8009682:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a72      	ldr	r2, [pc, #456]	; (8009854 <HAL_SAI_Init+0x2cc>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d004      	beq.n	8009698 <HAL_SAI_Init+0x110>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a71      	ldr	r2, [pc, #452]	; (8009858 <HAL_SAI_Init+0x2d0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d104      	bne.n	80096a2 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009698:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800969c:	f7ff fa7e 	bl	8008b9c <HAL_RCCEx_GetPeriphCLKFreq>
 80096a0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	025b      	lsls	r3, r3, #9
 80096b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4a67      	ldr	r2, [pc, #412]	; (800985c <HAL_SAI_Init+0x2d4>)
 80096be:	fba2 2303 	umull	r2, r3, r2, r3
 80096c2:	08da      	lsrs	r2, r3, #3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80096c8:	68f9      	ldr	r1, [r7, #12]
 80096ca:	4b64      	ldr	r3, [pc, #400]	; (800985c <HAL_SAI_Init+0x2d4>)
 80096cc:	fba3 2301 	umull	r2, r3, r3, r1
 80096d0:	08da      	lsrs	r2, r3, #3
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	1aca      	subs	r2, r1, r3
 80096dc:	2a08      	cmp	r2, #8
 80096de:	d904      	bls.n	80096ea <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <HAL_SAI_Init+0x172>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d109      	bne.n	800970e <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d101      	bne.n	8009706 <HAL_SAI_Init+0x17e>
 8009702:	2300      	movs	r3, #0
 8009704:	e001      	b.n	800970a <HAL_SAI_Init+0x182>
 8009706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	e008      	b.n	8009720 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009712:	2b01      	cmp	r3, #1
 8009714:	d102      	bne.n	800971c <HAL_SAI_Init+0x194>
 8009716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800971a:	e000      	b.n	800971e <HAL_SAI_Init+0x196>
 800971c:	2300      	movs	r3, #0
 800971e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6819      	ldr	r1, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	4b4d      	ldr	r3, [pc, #308]	; (8009860 <HAL_SAI_Init+0x2d8>)
 800972c:	400b      	ands	r3, r1
 800972e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6819      	ldr	r1, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009744:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974a:	431a      	orrs	r2, r3
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8009758:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009764:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	051b      	lsls	r3, r3, #20
 800976c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6859      	ldr	r1, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	4b38      	ldr	r3, [pc, #224]	; (8009864 <HAL_SAI_Init+0x2dc>)
 8009782:	400b      	ands	r3, r1
 8009784:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6859      	ldr	r1, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699a      	ldr	r2, [r3, #24]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979a:	431a      	orrs	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6899      	ldr	r1, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	4b2e      	ldr	r3, [pc, #184]	; (8009868 <HAL_SAI_Init+0x2e0>)
 80097b0:	400b      	ands	r3, r1
 80097b2:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6899      	ldr	r1, [r3, #8]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80097c4:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80097ca:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80097d0:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d6:	3b01      	subs	r3, #1
 80097d8:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80097da:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	430a      	orrs	r2, r1
 80097e2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68d9      	ldr	r1, [r3, #12]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	f24f 0320 	movw	r3, #61472	; 0xf020
 80097f2:	400b      	ands	r3, r1
 80097f4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68d9      	ldr	r1, [r3, #12]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009804:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980a:	041b      	lsls	r3, r3, #16
 800980c:	431a      	orrs	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009812:	3b01      	subs	r3, #1
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	430a      	orrs	r2, r1
 800981e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3720      	adds	r7, #32
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	40015804 	.word	0x40015804
 8009848:	40015824 	.word	0x40015824
 800984c:	40015800 	.word	0x40015800
 8009850:	40015c00 	.word	0x40015c00
 8009854:	40015c04 	.word	0x40015c04
 8009858:	40015c24 	.word	0x40015c24
 800985c:	cccccccd 	.word	0xcccccccd
 8009860:	ff05c010 	.word	0xff05c010
 8009864:	ffff1ff0 	.word	0xffff1ff0
 8009868:	fff88000 	.word	0xfff88000

0800986c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800986c:	b490      	push	{r4, r7}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8009874:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <SAI_Disable+0x64>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a16      	ldr	r2, [pc, #88]	; (80098d4 <SAI_Disable+0x68>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	0b1b      	lsrs	r3, r3, #12
 8009880:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009894:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009896:	4623      	mov	r3, r4
 8009898:	1e5c      	subs	r4, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10a      	bne.n	80098b4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	73fb      	strb	r3, [r7, #15]
      break;
 80098b2:	e006      	b.n	80098c2 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1e9      	bne.n	8009896 <SAI_Disable+0x2a>

  return status;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bc90      	pop	{r4, r7}
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20000000 	.word	0x20000000
 80098d4:	95cbec1b 	.word	0x95cbec1b

080098d8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e025      	b.n	8009938 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d106      	bne.n	8009906 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7f8 ff2d 	bl	8002760 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2202      	movs	r2, #2
 800990a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3304      	adds	r3, #4
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f001 fd59 	bl	800b3d0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	461a      	mov	r2, r3
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	f001 fdc3 	bl	800b4b4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b02      	cmp	r3, #2
 8009956:	d101      	bne.n	800995c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009958:	2302      	movs	r3, #2
 800995a:	e018      	b.n	800998e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	4618      	mov	r0, r3
 800996e:	f001 fe21 	bl	800b5b4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b02      	cmp	r3, #2
 8009978:	d104      	bne.n	8009984 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2205      	movs	r2, #5
 800997e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009982:	e003      	b.n	800998c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d101      	bne.n	80099b0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80099ac:	2302      	movs	r3, #2
 80099ae:	e00e      	b.n	80099ce <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	4618      	mov	r0, r3
 80099c0:	f001 fe19 	bl	800b5f6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e04c      	b.n	8009a84 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d106      	bne.n	8009a04 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7f8 fbec 	bl	80021dc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2202      	movs	r2, #2
 8009a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0203 	bic.w	r2, r2, #3
 8009a1a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	4b19      	ldr	r3, [pc, #100]	; (8009a8c <HAL_SPDIFRX_Init+0xb4>)
 8009a28:	4013      	ands	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009a34:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009a3a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009a40:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009a46:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009a4c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009a52:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009a58:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009a5e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009a64:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	fff88407 	.word	0xfff88407

08009a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e01d      	b.n	8009ade <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7f8 fbd2 	bl	8002260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4619      	mov	r1, r3
 8009ace:	4610      	mov	r0, r2
 8009ad0:	f000 fb78 	bl	800a1c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
	...

08009ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f042 0201 	orr.w	r2, r2, #1
 8009afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689a      	ldr	r2, [r3, #8]
 8009b06:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <HAL_TIM_Base_Start_IT+0x50>)
 8009b08:	4013      	ands	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b06      	cmp	r3, #6
 8009b10:	d00b      	beq.n	8009b2a <HAL_TIM_Base_Start_IT+0x42>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b18:	d007      	beq.n	8009b2a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f042 0201 	orr.w	r2, r2, #1
 8009b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	00010007 	.word	0x00010007

08009b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e01d      	b.n	8009b8a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f8 fbea 	bl	800233c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	f000 fb22 	bl	800a1c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d122      	bne.n	8009bee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d11b      	bne.n	8009bee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f06f 0202 	mvn.w	r2, #2
 8009bbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	f003 0303 	and.w	r3, r3, #3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fad7 	bl	800a188 <HAL_TIM_IC_CaptureCallback>
 8009bda:	e005      	b.n	8009be8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fac9 	bl	800a174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fada 	bl	800a19c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	d122      	bne.n	8009c42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	2b04      	cmp	r3, #4
 8009c08:	d11b      	bne.n	8009c42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f06f 0204 	mvn.w	r2, #4
 8009c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2202      	movs	r2, #2
 8009c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d003      	beq.n	8009c30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 faad 	bl	800a188 <HAL_TIM_IC_CaptureCallback>
 8009c2e:	e005      	b.n	8009c3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fa9f 	bl	800a174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fab0 	bl	800a19c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	f003 0308 	and.w	r3, r3, #8
 8009c4c:	2b08      	cmp	r3, #8
 8009c4e:	d122      	bne.n	8009c96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b08      	cmp	r3, #8
 8009c5c:	d11b      	bne.n	8009c96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f06f 0208 	mvn.w	r2, #8
 8009c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2204      	movs	r2, #4
 8009c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fa83 	bl	800a188 <HAL_TIM_IC_CaptureCallback>
 8009c82:	e005      	b.n	8009c90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fa75 	bl	800a174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fa86 	bl	800a19c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f003 0310 	and.w	r3, r3, #16
 8009ca0:	2b10      	cmp	r3, #16
 8009ca2:	d122      	bne.n	8009cea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	f003 0310 	and.w	r3, r3, #16
 8009cae:	2b10      	cmp	r3, #16
 8009cb0:	d11b      	bne.n	8009cea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f06f 0210 	mvn.w	r2, #16
 8009cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2208      	movs	r2, #8
 8009cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	69db      	ldr	r3, [r3, #28]
 8009cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d003      	beq.n	8009cd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fa59 	bl	800a188 <HAL_TIM_IC_CaptureCallback>
 8009cd6:	e005      	b.n	8009ce4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fa4b 	bl	800a174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fa5c 	bl	800a19c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d10e      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d107      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f06f 0201 	mvn.w	r2, #1
 8009d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7f7 fed9 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d20:	2b80      	cmp	r3, #128	; 0x80
 8009d22:	d10e      	bne.n	8009d42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d2e:	2b80      	cmp	r3, #128	; 0x80
 8009d30:	d107      	bne.n	8009d42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 feef 	bl	800ab20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d50:	d10e      	bne.n	8009d70 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d5c:	2b80      	cmp	r3, #128	; 0x80
 8009d5e:	d107      	bne.n	8009d70 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fee2 	bl	800ab34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d7a:	2b40      	cmp	r3, #64	; 0x40
 8009d7c:	d10e      	bne.n	8009d9c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d88:	2b40      	cmp	r3, #64	; 0x40
 8009d8a:	d107      	bne.n	8009d9c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fa0a 	bl	800a1b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	f003 0320 	and.w	r3, r3, #32
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	d10e      	bne.n	8009dc8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d107      	bne.n	8009dc8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f06f 0220 	mvn.w	r2, #32
 8009dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fea2 	bl	800ab0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dc8:	bf00      	nop
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009de6:	2302      	movs	r3, #2
 8009de8:	e105      	b.n	8009ff6 <HAL_TIM_PWM_ConfigChannel+0x226>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2202      	movs	r2, #2
 8009df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b14      	cmp	r3, #20
 8009dfe:	f200 80f0 	bhi.w	8009fe2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009e02:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e5d 	.word	0x08009e5d
 8009e0c:	08009fe3 	.word	0x08009fe3
 8009e10:	08009fe3 	.word	0x08009fe3
 8009e14:	08009fe3 	.word	0x08009fe3
 8009e18:	08009e9d 	.word	0x08009e9d
 8009e1c:	08009fe3 	.word	0x08009fe3
 8009e20:	08009fe3 	.word	0x08009fe3
 8009e24:	08009fe3 	.word	0x08009fe3
 8009e28:	08009edf 	.word	0x08009edf
 8009e2c:	08009fe3 	.word	0x08009fe3
 8009e30:	08009fe3 	.word	0x08009fe3
 8009e34:	08009fe3 	.word	0x08009fe3
 8009e38:	08009f1f 	.word	0x08009f1f
 8009e3c:	08009fe3 	.word	0x08009fe3
 8009e40:	08009fe3 	.word	0x08009fe3
 8009e44:	08009fe3 	.word	0x08009fe3
 8009e48:	08009f61 	.word	0x08009f61
 8009e4c:	08009fe3 	.word	0x08009fe3
 8009e50:	08009fe3 	.word	0x08009fe3
 8009e54:	08009fe3 	.word	0x08009fe3
 8009e58:	08009fa1 	.word	0x08009fa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fa4e 	bl	800a304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	699a      	ldr	r2, [r3, #24]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0208 	orr.w	r2, r2, #8
 8009e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	699a      	ldr	r2, [r3, #24]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0204 	bic.w	r2, r2, #4
 8009e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6999      	ldr	r1, [r3, #24]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	691a      	ldr	r2, [r3, #16]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	619a      	str	r2, [r3, #24]
      break;
 8009e9a:	e0a3      	b.n	8009fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68b9      	ldr	r1, [r7, #8]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 faa0 	bl	800a3e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699a      	ldr	r2, [r3, #24]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6999      	ldr	r1, [r3, #24]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	021a      	lsls	r2, r3, #8
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	619a      	str	r2, [r3, #24]
      break;
 8009edc:	e082      	b.n	8009fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 faf7 	bl	800a4d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	69da      	ldr	r2, [r3, #28]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f042 0208 	orr.w	r2, r2, #8
 8009ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69da      	ldr	r2, [r3, #28]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0204 	bic.w	r2, r2, #4
 8009f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	69d9      	ldr	r1, [r3, #28]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	691a      	ldr	r2, [r3, #16]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	61da      	str	r2, [r3, #28]
      break;
 8009f1c:	e062      	b.n	8009fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68b9      	ldr	r1, [r7, #8]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 fb4d 	bl	800a5c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	69da      	ldr	r2, [r3, #28]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69da      	ldr	r2, [r3, #28]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69d9      	ldr	r1, [r3, #28]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	021a      	lsls	r2, r3, #8
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	61da      	str	r2, [r3, #28]
      break;
 8009f5e:	e041      	b.n	8009fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68b9      	ldr	r1, [r7, #8]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fb84 	bl	800a674 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0208 	orr.w	r2, r2, #8
 8009f7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0204 	bic.w	r2, r2, #4
 8009f8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	691a      	ldr	r2, [r3, #16]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f9e:	e021      	b.n	8009fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 fbb6 	bl	800a718 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	021a      	lsls	r2, r3, #8
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009fe0:	e000      	b.n	8009fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009fe2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop

0800a000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a010:	2b01      	cmp	r3, #1
 800a012:	d101      	bne.n	800a018 <HAL_TIM_ConfigClockSource+0x18>
 800a014:	2302      	movs	r3, #2
 800a016:	e0a6      	b.n	800a166 <HAL_TIM_ConfigClockSource+0x166>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	4b4f      	ldr	r3, [pc, #316]	; (800a170 <HAL_TIM_ConfigClockSource+0x170>)
 800a034:	4013      	ands	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a03e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b40      	cmp	r3, #64	; 0x40
 800a04e:	d067      	beq.n	800a120 <HAL_TIM_ConfigClockSource+0x120>
 800a050:	2b40      	cmp	r3, #64	; 0x40
 800a052:	d80b      	bhi.n	800a06c <HAL_TIM_ConfigClockSource+0x6c>
 800a054:	2b10      	cmp	r3, #16
 800a056:	d073      	beq.n	800a140 <HAL_TIM_ConfigClockSource+0x140>
 800a058:	2b10      	cmp	r3, #16
 800a05a:	d802      	bhi.n	800a062 <HAL_TIM_ConfigClockSource+0x62>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d06f      	beq.n	800a140 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a060:	e078      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a062:	2b20      	cmp	r3, #32
 800a064:	d06c      	beq.n	800a140 <HAL_TIM_ConfigClockSource+0x140>
 800a066:	2b30      	cmp	r3, #48	; 0x30
 800a068:	d06a      	beq.n	800a140 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a06a:	e073      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a06c:	2b70      	cmp	r3, #112	; 0x70
 800a06e:	d00d      	beq.n	800a08c <HAL_TIM_ConfigClockSource+0x8c>
 800a070:	2b70      	cmp	r3, #112	; 0x70
 800a072:	d804      	bhi.n	800a07e <HAL_TIM_ConfigClockSource+0x7e>
 800a074:	2b50      	cmp	r3, #80	; 0x50
 800a076:	d033      	beq.n	800a0e0 <HAL_TIM_ConfigClockSource+0xe0>
 800a078:	2b60      	cmp	r3, #96	; 0x60
 800a07a:	d041      	beq.n	800a100 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a07c:	e06a      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a07e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a082:	d066      	beq.n	800a152 <HAL_TIM_ConfigClockSource+0x152>
 800a084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a088:	d017      	beq.n	800a0ba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a08a:	e063      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	6899      	ldr	r1, [r3, #8]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f000 fc0a 	bl	800a8b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	609a      	str	r2, [r3, #8]
      break;
 800a0b8:	e04c      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6818      	ldr	r0, [r3, #0]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	6899      	ldr	r1, [r3, #8]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	f000 fbf3 	bl	800a8b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0dc:	609a      	str	r2, [r3, #8]
      break;
 800a0de:	e039      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6818      	ldr	r0, [r3, #0]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	6859      	ldr	r1, [r3, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	f000 fb67 	bl	800a7c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2150      	movs	r1, #80	; 0x50
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fbc0 	bl	800a87e <TIM_ITRx_SetConfig>
      break;
 800a0fe:	e029      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	6859      	ldr	r1, [r3, #4]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	461a      	mov	r2, r3
 800a10e:	f000 fb86 	bl	800a81e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2160      	movs	r1, #96	; 0x60
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 fbb0 	bl	800a87e <TIM_ITRx_SetConfig>
      break;
 800a11e:	e019      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	6859      	ldr	r1, [r3, #4]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	461a      	mov	r2, r3
 800a12e:	f000 fb47 	bl	800a7c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2140      	movs	r1, #64	; 0x40
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 fba0 	bl	800a87e <TIM_ITRx_SetConfig>
      break;
 800a13e:	e009      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4619      	mov	r1, r3
 800a14a:	4610      	mov	r0, r2
 800a14c:	f000 fb97 	bl	800a87e <TIM_ITRx_SetConfig>
      break;
 800a150:	e000      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	fffeff88 	.word	0xfffeff88

0800a174 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a40      	ldr	r2, [pc, #256]	; (800a2d8 <TIM_Base_SetConfig+0x114>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d013      	beq.n	800a204 <TIM_Base_SetConfig+0x40>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e2:	d00f      	beq.n	800a204 <TIM_Base_SetConfig+0x40>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a3d      	ldr	r2, [pc, #244]	; (800a2dc <TIM_Base_SetConfig+0x118>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d00b      	beq.n	800a204 <TIM_Base_SetConfig+0x40>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a3c      	ldr	r2, [pc, #240]	; (800a2e0 <TIM_Base_SetConfig+0x11c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d007      	beq.n	800a204 <TIM_Base_SetConfig+0x40>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a3b      	ldr	r2, [pc, #236]	; (800a2e4 <TIM_Base_SetConfig+0x120>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d003      	beq.n	800a204 <TIM_Base_SetConfig+0x40>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a3a      	ldr	r2, [pc, #232]	; (800a2e8 <TIM_Base_SetConfig+0x124>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d108      	bne.n	800a216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a20a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	4313      	orrs	r3, r2
 800a214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a2f      	ldr	r2, [pc, #188]	; (800a2d8 <TIM_Base_SetConfig+0x114>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d02b      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a224:	d027      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a2c      	ldr	r2, [pc, #176]	; (800a2dc <TIM_Base_SetConfig+0x118>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d023      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a2b      	ldr	r2, [pc, #172]	; (800a2e0 <TIM_Base_SetConfig+0x11c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d01f      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a2a      	ldr	r2, [pc, #168]	; (800a2e4 <TIM_Base_SetConfig+0x120>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d01b      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a29      	ldr	r2, [pc, #164]	; (800a2e8 <TIM_Base_SetConfig+0x124>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d017      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a28      	ldr	r2, [pc, #160]	; (800a2ec <TIM_Base_SetConfig+0x128>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d013      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a27      	ldr	r2, [pc, #156]	; (800a2f0 <TIM_Base_SetConfig+0x12c>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d00f      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a26      	ldr	r2, [pc, #152]	; (800a2f4 <TIM_Base_SetConfig+0x130>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d00b      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a25      	ldr	r2, [pc, #148]	; (800a2f8 <TIM_Base_SetConfig+0x134>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d007      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a24      	ldr	r2, [pc, #144]	; (800a2fc <TIM_Base_SetConfig+0x138>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d003      	beq.n	800a276 <TIM_Base_SetConfig+0xb2>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a23      	ldr	r2, [pc, #140]	; (800a300 <TIM_Base_SetConfig+0x13c>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d108      	bne.n	800a288 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a27c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	4313      	orrs	r3, r2
 800a286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a0a      	ldr	r2, [pc, #40]	; (800a2d8 <TIM_Base_SetConfig+0x114>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d003      	beq.n	800a2bc <TIM_Base_SetConfig+0xf8>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a0c      	ldr	r2, [pc, #48]	; (800a2e8 <TIM_Base_SetConfig+0x124>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d103      	bne.n	800a2c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	691a      	ldr	r2, [r3, #16]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	615a      	str	r2, [r3, #20]
}
 800a2ca:	bf00      	nop
 800a2cc:	3714      	adds	r7, #20
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	40010000 	.word	0x40010000
 800a2dc:	40000400 	.word	0x40000400
 800a2e0:	40000800 	.word	0x40000800
 800a2e4:	40000c00 	.word	0x40000c00
 800a2e8:	40010400 	.word	0x40010400
 800a2ec:	40014000 	.word	0x40014000
 800a2f0:	40014400 	.word	0x40014400
 800a2f4:	40014800 	.word	0x40014800
 800a2f8:	40001800 	.word	0x40001800
 800a2fc:	40001c00 	.word	0x40001c00
 800a300:	40002000 	.word	0x40002000

0800a304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	f023 0201 	bic.w	r2, r3, #1
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4b2b      	ldr	r3, [pc, #172]	; (800a3dc <TIM_OC1_SetConfig+0xd8>)
 800a330:	4013      	ands	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0303 	bic.w	r3, r3, #3
 800a33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f023 0302 	bic.w	r3, r3, #2
 800a34c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	4313      	orrs	r3, r2
 800a356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a21      	ldr	r2, [pc, #132]	; (800a3e0 <TIM_OC1_SetConfig+0xdc>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d003      	beq.n	800a368 <TIM_OC1_SetConfig+0x64>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a20      	ldr	r2, [pc, #128]	; (800a3e4 <TIM_OC1_SetConfig+0xe0>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d10c      	bne.n	800a382 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f023 0308 	bic.w	r3, r3, #8
 800a36e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	4313      	orrs	r3, r2
 800a378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f023 0304 	bic.w	r3, r3, #4
 800a380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a16      	ldr	r2, [pc, #88]	; (800a3e0 <TIM_OC1_SetConfig+0xdc>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d003      	beq.n	800a392 <TIM_OC1_SetConfig+0x8e>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a15      	ldr	r2, [pc, #84]	; (800a3e4 <TIM_OC1_SetConfig+0xe0>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d111      	bne.n	800a3b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	685a      	ldr	r2, [r3, #4]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	621a      	str	r2, [r3, #32]
}
 800a3d0:	bf00      	nop
 800a3d2:	371c      	adds	r7, #28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	fffeff8f 	.word	0xfffeff8f
 800a3e0:	40010000 	.word	0x40010000
 800a3e4:	40010400 	.word	0x40010400

0800a3e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	f023 0210 	bic.w	r2, r3, #16
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4b2e      	ldr	r3, [pc, #184]	; (800a4cc <TIM_OC2_SetConfig+0xe4>)
 800a414:	4013      	ands	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a41e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	021b      	lsls	r3, r3, #8
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	4313      	orrs	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f023 0320 	bic.w	r3, r3, #32
 800a432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	011b      	lsls	r3, r3, #4
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a23      	ldr	r2, [pc, #140]	; (800a4d0 <TIM_OC2_SetConfig+0xe8>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d003      	beq.n	800a450 <TIM_OC2_SetConfig+0x68>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a22      	ldr	r2, [pc, #136]	; (800a4d4 <TIM_OC2_SetConfig+0xec>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d10d      	bne.n	800a46c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	4313      	orrs	r3, r2
 800a462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a46a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a18      	ldr	r2, [pc, #96]	; (800a4d0 <TIM_OC2_SetConfig+0xe8>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d003      	beq.n	800a47c <TIM_OC2_SetConfig+0x94>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a17      	ldr	r2, [pc, #92]	; (800a4d4 <TIM_OC2_SetConfig+0xec>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d113      	bne.n	800a4a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a48a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	4313      	orrs	r3, r2
 800a496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	621a      	str	r2, [r3, #32]
}
 800a4be:	bf00      	nop
 800a4c0:	371c      	adds	r7, #28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	feff8fff 	.word	0xfeff8fff
 800a4d0:	40010000 	.word	0x40010000
 800a4d4:	40010400 	.word	0x40010400

0800a4d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	4b2d      	ldr	r3, [pc, #180]	; (800a5b8 <TIM_OC3_SetConfig+0xe0>)
 800a504:	4013      	ands	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f023 0303 	bic.w	r3, r3, #3
 800a50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4313      	orrs	r3, r2
 800a518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a22      	ldr	r2, [pc, #136]	; (800a5bc <TIM_OC3_SetConfig+0xe4>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d003      	beq.n	800a53e <TIM_OC3_SetConfig+0x66>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a21      	ldr	r2, [pc, #132]	; (800a5c0 <TIM_OC3_SetConfig+0xe8>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d10d      	bne.n	800a55a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	021b      	lsls	r3, r3, #8
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	4313      	orrs	r3, r2
 800a550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a17      	ldr	r2, [pc, #92]	; (800a5bc <TIM_OC3_SetConfig+0xe4>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d003      	beq.n	800a56a <TIM_OC3_SetConfig+0x92>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a16      	ldr	r2, [pc, #88]	; (800a5c0 <TIM_OC3_SetConfig+0xe8>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d113      	bne.n	800a592 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	011b      	lsls	r3, r3, #4
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	4313      	orrs	r3, r2
 800a584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	011b      	lsls	r3, r3, #4
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	621a      	str	r2, [r3, #32]
}
 800a5ac:	bf00      	nop
 800a5ae:	371c      	adds	r7, #28
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	fffeff8f 	.word	0xfffeff8f
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40010400 	.word	0x40010400

0800a5c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	4b1e      	ldr	r3, [pc, #120]	; (800a668 <TIM_OC4_SetConfig+0xa4>)
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	021b      	lsls	r3, r3, #8
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	4313      	orrs	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a60e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	031b      	lsls	r3, r3, #12
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	4313      	orrs	r3, r2
 800a61a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a13      	ldr	r2, [pc, #76]	; (800a66c <TIM_OC4_SetConfig+0xa8>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d003      	beq.n	800a62c <TIM_OC4_SetConfig+0x68>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a12      	ldr	r2, [pc, #72]	; (800a670 <TIM_OC4_SetConfig+0xac>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d109      	bne.n	800a640 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	019b      	lsls	r3, r3, #6
 800a63a:	697a      	ldr	r2, [r7, #20]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	621a      	str	r2, [r3, #32]
}
 800a65a:	bf00      	nop
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	feff8fff 	.word	0xfeff8fff
 800a66c:	40010000 	.word	0x40010000
 800a670:	40010400 	.word	0x40010400

0800a674 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a674:	b480      	push	{r7}
 800a676:	b087      	sub	sp, #28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4b1b      	ldr	r3, [pc, #108]	; (800a70c <TIM_OC5_SetConfig+0x98>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	041b      	lsls	r3, r3, #16
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a12      	ldr	r2, [pc, #72]	; (800a710 <TIM_OC5_SetConfig+0x9c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d003      	beq.n	800a6d2 <TIM_OC5_SetConfig+0x5e>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a11      	ldr	r2, [pc, #68]	; (800a714 <TIM_OC5_SetConfig+0xa0>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d109      	bne.n	800a6e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	021b      	lsls	r3, r3, #8
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	621a      	str	r2, [r3, #32]
}
 800a700:	bf00      	nop
 800a702:	371c      	adds	r7, #28
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	fffeff8f 	.word	0xfffeff8f
 800a710:	40010000 	.word	0x40010000
 800a714:	40010400 	.word	0x40010400

0800a718 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4b1c      	ldr	r3, [pc, #112]	; (800a7b4 <TIM_OC6_SetConfig+0x9c>)
 800a744:	4013      	ands	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	021b      	lsls	r3, r3, #8
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4313      	orrs	r3, r2
 800a752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a75a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	051b      	lsls	r3, r3, #20
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	4313      	orrs	r3, r2
 800a766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a13      	ldr	r2, [pc, #76]	; (800a7b8 <TIM_OC6_SetConfig+0xa0>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d003      	beq.n	800a778 <TIM_OC6_SetConfig+0x60>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a12      	ldr	r2, [pc, #72]	; (800a7bc <TIM_OC6_SetConfig+0xa4>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d109      	bne.n	800a78c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a77e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	029b      	lsls	r3, r3, #10
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	4313      	orrs	r3, r2
 800a78a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	621a      	str	r2, [r3, #32]
}
 800a7a6:	bf00      	nop
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	feff8fff 	.word	0xfeff8fff
 800a7b8:	40010000 	.word	0x40010000
 800a7bc:	40010400 	.word	0x40010400

0800a7c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	f023 0201 	bic.w	r2, r3, #1
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	011b      	lsls	r3, r3, #4
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f023 030a 	bic.w	r3, r3, #10
 800a7fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	4313      	orrs	r3, r2
 800a804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	621a      	str	r2, [r3, #32]
}
 800a812:	bf00      	nop
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a81e:	b480      	push	{r7}
 800a820:	b087      	sub	sp, #28
 800a822:	af00      	add	r7, sp, #0
 800a824:	60f8      	str	r0, [r7, #12]
 800a826:	60b9      	str	r1, [r7, #8]
 800a828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	f023 0210 	bic.w	r2, r3, #16
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	031b      	lsls	r3, r3, #12
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	4313      	orrs	r3, r2
 800a852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a85a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	4313      	orrs	r3, r2
 800a864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	621a      	str	r2, [r3, #32]
}
 800a872:	bf00      	nop
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a87e:	b480      	push	{r7}
 800a880:	b085      	sub	sp, #20
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	f043 0307 	orr.w	r3, r3, #7
 800a8a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	609a      	str	r2, [r3, #8]
}
 800a8a8:	bf00      	nop
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b087      	sub	sp, #28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
 800a8c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	021a      	lsls	r2, r3, #8
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	609a      	str	r2, [r3, #8]
}
 800a8e8:	bf00      	nop
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a908:	2302      	movs	r3, #2
 800a90a:	e06d      	b.n	800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2202      	movs	r2, #2
 800a918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a30      	ldr	r2, [pc, #192]	; (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d004      	beq.n	800a940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a2f      	ldr	r2, [pc, #188]	; (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d108      	bne.n	800a952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4313      	orrs	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a20      	ldr	r2, [pc, #128]	; (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d022      	beq.n	800a9bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a97e:	d01d      	beq.n	800a9bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a1d      	ldr	r2, [pc, #116]	; (800a9fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d018      	beq.n	800a9bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a1c      	ldr	r2, [pc, #112]	; (800aa00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d013      	beq.n	800a9bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a1a      	ldr	r2, [pc, #104]	; (800aa04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d00e      	beq.n	800a9bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a15      	ldr	r2, [pc, #84]	; (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d009      	beq.n	800a9bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a16      	ldr	r2, [pc, #88]	; (800aa08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d004      	beq.n	800a9bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a15      	ldr	r2, [pc, #84]	; (800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d10c      	bne.n	800a9d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	40010000 	.word	0x40010000
 800a9f8:	40010400 	.word	0x40010400
 800a9fc:	40000400 	.word	0x40000400
 800aa00:	40000800 	.word	0x40000800
 800aa04:	40000c00 	.word	0x40000c00
 800aa08:	40014000 	.word	0x40014000
 800aa0c:	40001800 	.word	0x40001800

0800aa10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d101      	bne.n	800aa2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e065      	b.n	800aaf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	041b      	lsls	r3, r3, #16
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a16      	ldr	r2, [pc, #88]	; (800ab04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d004      	beq.n	800aaba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a14      	ldr	r2, [pc, #80]	; (800ab08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d115      	bne.n	800aae6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	051b      	lsls	r3, r3, #20
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	40010000 	.word	0x40010000
 800ab08:	40010400 	.word	0x40010400

0800ab0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e040      	b.n	800abdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7f7 fcd4 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2224      	movs	r2, #36	; 0x24
 800ab74:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f022 0201 	bic.w	r2, r2, #1
 800ab84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f82c 	bl	800abe4 <UART_SetConfig>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d101      	bne.n	800ab96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e022      	b.n	800abdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 faca 	bl	800b138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689a      	ldr	r2, [r3, #8]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f042 0201 	orr.w	r2, r2, #1
 800abd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fb51 	bl	800b27c <UART_CheckIdleState>
 800abda:	4603      	mov	r3, r0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800abec:	2300      	movs	r3, #0
 800abee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689a      	ldr	r2, [r3, #8]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	431a      	orrs	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	431a      	orrs	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	69db      	ldr	r3, [r3, #28]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	4bb1      	ldr	r3, [pc, #708]	; (800aed8 <UART_SetConfig+0x2f4>)
 800ac14:	4013      	ands	r3, r2
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	6812      	ldr	r2, [r2, #0]
 800ac1a:	6939      	ldr	r1, [r7, #16]
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68da      	ldr	r2, [r3, #12]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a1b      	ldr	r3, [r3, #32]
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	430a      	orrs	r2, r1
 800ac58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a9f      	ldr	r2, [pc, #636]	; (800aedc <UART_SetConfig+0x2f8>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d121      	bne.n	800aca8 <UART_SetConfig+0xc4>
 800ac64:	4b9e      	ldr	r3, [pc, #632]	; (800aee0 <UART_SetConfig+0x2fc>)
 800ac66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac6a:	f003 0303 	and.w	r3, r3, #3
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d816      	bhi.n	800aca0 <UART_SetConfig+0xbc>
 800ac72:	a201      	add	r2, pc, #4	; (adr r2, 800ac78 <UART_SetConfig+0x94>)
 800ac74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac78:	0800ac89 	.word	0x0800ac89
 800ac7c:	0800ac95 	.word	0x0800ac95
 800ac80:	0800ac8f 	.word	0x0800ac8f
 800ac84:	0800ac9b 	.word	0x0800ac9b
 800ac88:	2301      	movs	r3, #1
 800ac8a:	77fb      	strb	r3, [r7, #31]
 800ac8c:	e151      	b.n	800af32 <UART_SetConfig+0x34e>
 800ac8e:	2302      	movs	r3, #2
 800ac90:	77fb      	strb	r3, [r7, #31]
 800ac92:	e14e      	b.n	800af32 <UART_SetConfig+0x34e>
 800ac94:	2304      	movs	r3, #4
 800ac96:	77fb      	strb	r3, [r7, #31]
 800ac98:	e14b      	b.n	800af32 <UART_SetConfig+0x34e>
 800ac9a:	2308      	movs	r3, #8
 800ac9c:	77fb      	strb	r3, [r7, #31]
 800ac9e:	e148      	b.n	800af32 <UART_SetConfig+0x34e>
 800aca0:	2310      	movs	r3, #16
 800aca2:	77fb      	strb	r3, [r7, #31]
 800aca4:	bf00      	nop
 800aca6:	e144      	b.n	800af32 <UART_SetConfig+0x34e>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a8d      	ldr	r2, [pc, #564]	; (800aee4 <UART_SetConfig+0x300>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d134      	bne.n	800ad1c <UART_SetConfig+0x138>
 800acb2:	4b8b      	ldr	r3, [pc, #556]	; (800aee0 <UART_SetConfig+0x2fc>)
 800acb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acb8:	f003 030c 	and.w	r3, r3, #12
 800acbc:	2b0c      	cmp	r3, #12
 800acbe:	d829      	bhi.n	800ad14 <UART_SetConfig+0x130>
 800acc0:	a201      	add	r2, pc, #4	; (adr r2, 800acc8 <UART_SetConfig+0xe4>)
 800acc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc6:	bf00      	nop
 800acc8:	0800acfd 	.word	0x0800acfd
 800accc:	0800ad15 	.word	0x0800ad15
 800acd0:	0800ad15 	.word	0x0800ad15
 800acd4:	0800ad15 	.word	0x0800ad15
 800acd8:	0800ad09 	.word	0x0800ad09
 800acdc:	0800ad15 	.word	0x0800ad15
 800ace0:	0800ad15 	.word	0x0800ad15
 800ace4:	0800ad15 	.word	0x0800ad15
 800ace8:	0800ad03 	.word	0x0800ad03
 800acec:	0800ad15 	.word	0x0800ad15
 800acf0:	0800ad15 	.word	0x0800ad15
 800acf4:	0800ad15 	.word	0x0800ad15
 800acf8:	0800ad0f 	.word	0x0800ad0f
 800acfc:	2300      	movs	r3, #0
 800acfe:	77fb      	strb	r3, [r7, #31]
 800ad00:	e117      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad02:	2302      	movs	r3, #2
 800ad04:	77fb      	strb	r3, [r7, #31]
 800ad06:	e114      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad08:	2304      	movs	r3, #4
 800ad0a:	77fb      	strb	r3, [r7, #31]
 800ad0c:	e111      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad0e:	2308      	movs	r3, #8
 800ad10:	77fb      	strb	r3, [r7, #31]
 800ad12:	e10e      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad14:	2310      	movs	r3, #16
 800ad16:	77fb      	strb	r3, [r7, #31]
 800ad18:	bf00      	nop
 800ad1a:	e10a      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a71      	ldr	r2, [pc, #452]	; (800aee8 <UART_SetConfig+0x304>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d120      	bne.n	800ad68 <UART_SetConfig+0x184>
 800ad26:	4b6e      	ldr	r3, [pc, #440]	; (800aee0 <UART_SetConfig+0x2fc>)
 800ad28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad30:	2b10      	cmp	r3, #16
 800ad32:	d00f      	beq.n	800ad54 <UART_SetConfig+0x170>
 800ad34:	2b10      	cmp	r3, #16
 800ad36:	d802      	bhi.n	800ad3e <UART_SetConfig+0x15a>
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d005      	beq.n	800ad48 <UART_SetConfig+0x164>
 800ad3c:	e010      	b.n	800ad60 <UART_SetConfig+0x17c>
 800ad3e:	2b20      	cmp	r3, #32
 800ad40:	d005      	beq.n	800ad4e <UART_SetConfig+0x16a>
 800ad42:	2b30      	cmp	r3, #48	; 0x30
 800ad44:	d009      	beq.n	800ad5a <UART_SetConfig+0x176>
 800ad46:	e00b      	b.n	800ad60 <UART_SetConfig+0x17c>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	77fb      	strb	r3, [r7, #31]
 800ad4c:	e0f1      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad4e:	2302      	movs	r3, #2
 800ad50:	77fb      	strb	r3, [r7, #31]
 800ad52:	e0ee      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad54:	2304      	movs	r3, #4
 800ad56:	77fb      	strb	r3, [r7, #31]
 800ad58:	e0eb      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad5a:	2308      	movs	r3, #8
 800ad5c:	77fb      	strb	r3, [r7, #31]
 800ad5e:	e0e8      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad60:	2310      	movs	r3, #16
 800ad62:	77fb      	strb	r3, [r7, #31]
 800ad64:	bf00      	nop
 800ad66:	e0e4      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a5f      	ldr	r2, [pc, #380]	; (800aeec <UART_SetConfig+0x308>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d120      	bne.n	800adb4 <UART_SetConfig+0x1d0>
 800ad72:	4b5b      	ldr	r3, [pc, #364]	; (800aee0 <UART_SetConfig+0x2fc>)
 800ad74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad7c:	2b40      	cmp	r3, #64	; 0x40
 800ad7e:	d00f      	beq.n	800ada0 <UART_SetConfig+0x1bc>
 800ad80:	2b40      	cmp	r3, #64	; 0x40
 800ad82:	d802      	bhi.n	800ad8a <UART_SetConfig+0x1a6>
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <UART_SetConfig+0x1b0>
 800ad88:	e010      	b.n	800adac <UART_SetConfig+0x1c8>
 800ad8a:	2b80      	cmp	r3, #128	; 0x80
 800ad8c:	d005      	beq.n	800ad9a <UART_SetConfig+0x1b6>
 800ad8e:	2bc0      	cmp	r3, #192	; 0xc0
 800ad90:	d009      	beq.n	800ada6 <UART_SetConfig+0x1c2>
 800ad92:	e00b      	b.n	800adac <UART_SetConfig+0x1c8>
 800ad94:	2300      	movs	r3, #0
 800ad96:	77fb      	strb	r3, [r7, #31]
 800ad98:	e0cb      	b.n	800af32 <UART_SetConfig+0x34e>
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	77fb      	strb	r3, [r7, #31]
 800ad9e:	e0c8      	b.n	800af32 <UART_SetConfig+0x34e>
 800ada0:	2304      	movs	r3, #4
 800ada2:	77fb      	strb	r3, [r7, #31]
 800ada4:	e0c5      	b.n	800af32 <UART_SetConfig+0x34e>
 800ada6:	2308      	movs	r3, #8
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e0c2      	b.n	800af32 <UART_SetConfig+0x34e>
 800adac:	2310      	movs	r3, #16
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	bf00      	nop
 800adb2:	e0be      	b.n	800af32 <UART_SetConfig+0x34e>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a4d      	ldr	r2, [pc, #308]	; (800aef0 <UART_SetConfig+0x30c>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d124      	bne.n	800ae08 <UART_SetConfig+0x224>
 800adbe:	4b48      	ldr	r3, [pc, #288]	; (800aee0 <UART_SetConfig+0x2fc>)
 800adc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adcc:	d012      	beq.n	800adf4 <UART_SetConfig+0x210>
 800adce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add2:	d802      	bhi.n	800adda <UART_SetConfig+0x1f6>
 800add4:	2b00      	cmp	r3, #0
 800add6:	d007      	beq.n	800ade8 <UART_SetConfig+0x204>
 800add8:	e012      	b.n	800ae00 <UART_SetConfig+0x21c>
 800adda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adde:	d006      	beq.n	800adee <UART_SetConfig+0x20a>
 800ade0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ade4:	d009      	beq.n	800adfa <UART_SetConfig+0x216>
 800ade6:	e00b      	b.n	800ae00 <UART_SetConfig+0x21c>
 800ade8:	2300      	movs	r3, #0
 800adea:	77fb      	strb	r3, [r7, #31]
 800adec:	e0a1      	b.n	800af32 <UART_SetConfig+0x34e>
 800adee:	2302      	movs	r3, #2
 800adf0:	77fb      	strb	r3, [r7, #31]
 800adf2:	e09e      	b.n	800af32 <UART_SetConfig+0x34e>
 800adf4:	2304      	movs	r3, #4
 800adf6:	77fb      	strb	r3, [r7, #31]
 800adf8:	e09b      	b.n	800af32 <UART_SetConfig+0x34e>
 800adfa:	2308      	movs	r3, #8
 800adfc:	77fb      	strb	r3, [r7, #31]
 800adfe:	e098      	b.n	800af32 <UART_SetConfig+0x34e>
 800ae00:	2310      	movs	r3, #16
 800ae02:	77fb      	strb	r3, [r7, #31]
 800ae04:	bf00      	nop
 800ae06:	e094      	b.n	800af32 <UART_SetConfig+0x34e>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a39      	ldr	r2, [pc, #228]	; (800aef4 <UART_SetConfig+0x310>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d124      	bne.n	800ae5c <UART_SetConfig+0x278>
 800ae12:	4b33      	ldr	r3, [pc, #204]	; (800aee0 <UART_SetConfig+0x2fc>)
 800ae14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae20:	d012      	beq.n	800ae48 <UART_SetConfig+0x264>
 800ae22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae26:	d802      	bhi.n	800ae2e <UART_SetConfig+0x24a>
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d007      	beq.n	800ae3c <UART_SetConfig+0x258>
 800ae2c:	e012      	b.n	800ae54 <UART_SetConfig+0x270>
 800ae2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae32:	d006      	beq.n	800ae42 <UART_SetConfig+0x25e>
 800ae34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae38:	d009      	beq.n	800ae4e <UART_SetConfig+0x26a>
 800ae3a:	e00b      	b.n	800ae54 <UART_SetConfig+0x270>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	77fb      	strb	r3, [r7, #31]
 800ae40:	e077      	b.n	800af32 <UART_SetConfig+0x34e>
 800ae42:	2302      	movs	r3, #2
 800ae44:	77fb      	strb	r3, [r7, #31]
 800ae46:	e074      	b.n	800af32 <UART_SetConfig+0x34e>
 800ae48:	2304      	movs	r3, #4
 800ae4a:	77fb      	strb	r3, [r7, #31]
 800ae4c:	e071      	b.n	800af32 <UART_SetConfig+0x34e>
 800ae4e:	2308      	movs	r3, #8
 800ae50:	77fb      	strb	r3, [r7, #31]
 800ae52:	e06e      	b.n	800af32 <UART_SetConfig+0x34e>
 800ae54:	2310      	movs	r3, #16
 800ae56:	77fb      	strb	r3, [r7, #31]
 800ae58:	bf00      	nop
 800ae5a:	e06a      	b.n	800af32 <UART_SetConfig+0x34e>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a25      	ldr	r2, [pc, #148]	; (800aef8 <UART_SetConfig+0x314>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d124      	bne.n	800aeb0 <UART_SetConfig+0x2cc>
 800ae66:	4b1e      	ldr	r3, [pc, #120]	; (800aee0 <UART_SetConfig+0x2fc>)
 800ae68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ae70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae74:	d012      	beq.n	800ae9c <UART_SetConfig+0x2b8>
 800ae76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae7a:	d802      	bhi.n	800ae82 <UART_SetConfig+0x29e>
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d007      	beq.n	800ae90 <UART_SetConfig+0x2ac>
 800ae80:	e012      	b.n	800aea8 <UART_SetConfig+0x2c4>
 800ae82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae86:	d006      	beq.n	800ae96 <UART_SetConfig+0x2b2>
 800ae88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae8c:	d009      	beq.n	800aea2 <UART_SetConfig+0x2be>
 800ae8e:	e00b      	b.n	800aea8 <UART_SetConfig+0x2c4>
 800ae90:	2300      	movs	r3, #0
 800ae92:	77fb      	strb	r3, [r7, #31]
 800ae94:	e04d      	b.n	800af32 <UART_SetConfig+0x34e>
 800ae96:	2302      	movs	r3, #2
 800ae98:	77fb      	strb	r3, [r7, #31]
 800ae9a:	e04a      	b.n	800af32 <UART_SetConfig+0x34e>
 800ae9c:	2304      	movs	r3, #4
 800ae9e:	77fb      	strb	r3, [r7, #31]
 800aea0:	e047      	b.n	800af32 <UART_SetConfig+0x34e>
 800aea2:	2308      	movs	r3, #8
 800aea4:	77fb      	strb	r3, [r7, #31]
 800aea6:	e044      	b.n	800af32 <UART_SetConfig+0x34e>
 800aea8:	2310      	movs	r3, #16
 800aeaa:	77fb      	strb	r3, [r7, #31]
 800aeac:	bf00      	nop
 800aeae:	e040      	b.n	800af32 <UART_SetConfig+0x34e>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a11      	ldr	r2, [pc, #68]	; (800aefc <UART_SetConfig+0x318>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d139      	bne.n	800af2e <UART_SetConfig+0x34a>
 800aeba:	4b09      	ldr	r3, [pc, #36]	; (800aee0 <UART_SetConfig+0x2fc>)
 800aebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aec8:	d027      	beq.n	800af1a <UART_SetConfig+0x336>
 800aeca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aece:	d817      	bhi.n	800af00 <UART_SetConfig+0x31c>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d01c      	beq.n	800af0e <UART_SetConfig+0x32a>
 800aed4:	e027      	b.n	800af26 <UART_SetConfig+0x342>
 800aed6:	bf00      	nop
 800aed8:	efff69f3 	.word	0xefff69f3
 800aedc:	40011000 	.word	0x40011000
 800aee0:	40023800 	.word	0x40023800
 800aee4:	40004400 	.word	0x40004400
 800aee8:	40004800 	.word	0x40004800
 800aeec:	40004c00 	.word	0x40004c00
 800aef0:	40005000 	.word	0x40005000
 800aef4:	40011400 	.word	0x40011400
 800aef8:	40007800 	.word	0x40007800
 800aefc:	40007c00 	.word	0x40007c00
 800af00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af04:	d006      	beq.n	800af14 <UART_SetConfig+0x330>
 800af06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800af0a:	d009      	beq.n	800af20 <UART_SetConfig+0x33c>
 800af0c:	e00b      	b.n	800af26 <UART_SetConfig+0x342>
 800af0e:	2300      	movs	r3, #0
 800af10:	77fb      	strb	r3, [r7, #31]
 800af12:	e00e      	b.n	800af32 <UART_SetConfig+0x34e>
 800af14:	2302      	movs	r3, #2
 800af16:	77fb      	strb	r3, [r7, #31]
 800af18:	e00b      	b.n	800af32 <UART_SetConfig+0x34e>
 800af1a:	2304      	movs	r3, #4
 800af1c:	77fb      	strb	r3, [r7, #31]
 800af1e:	e008      	b.n	800af32 <UART_SetConfig+0x34e>
 800af20:	2308      	movs	r3, #8
 800af22:	77fb      	strb	r3, [r7, #31]
 800af24:	e005      	b.n	800af32 <UART_SetConfig+0x34e>
 800af26:	2310      	movs	r3, #16
 800af28:	77fb      	strb	r3, [r7, #31]
 800af2a:	bf00      	nop
 800af2c:	e001      	b.n	800af32 <UART_SetConfig+0x34e>
 800af2e:	2310      	movs	r3, #16
 800af30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af3a:	d17f      	bne.n	800b03c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800af3c:	7ffb      	ldrb	r3, [r7, #31]
 800af3e:	2b08      	cmp	r3, #8
 800af40:	d85c      	bhi.n	800affc <UART_SetConfig+0x418>
 800af42:	a201      	add	r2, pc, #4	; (adr r2, 800af48 <UART_SetConfig+0x364>)
 800af44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af48:	0800af6d 	.word	0x0800af6d
 800af4c:	0800af8d 	.word	0x0800af8d
 800af50:	0800afad 	.word	0x0800afad
 800af54:	0800affd 	.word	0x0800affd
 800af58:	0800afc5 	.word	0x0800afc5
 800af5c:	0800affd 	.word	0x0800affd
 800af60:	0800affd 	.word	0x0800affd
 800af64:	0800affd 	.word	0x0800affd
 800af68:	0800afe5 	.word	0x0800afe5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af6c:	f7fd f9ce 	bl	800830c <HAL_RCC_GetPCLK1Freq>
 800af70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	005a      	lsls	r2, r3, #1
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	085b      	lsrs	r3, r3, #1
 800af7c:	441a      	add	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	fbb2 f3f3 	udiv	r3, r2, r3
 800af86:	b29b      	uxth	r3, r3
 800af88:	61bb      	str	r3, [r7, #24]
        break;
 800af8a:	e03a      	b.n	800b002 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af8c:	f7fd f9d2 	bl	8008334 <HAL_RCC_GetPCLK2Freq>
 800af90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	005a      	lsls	r2, r3, #1
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	085b      	lsrs	r3, r3, #1
 800af9c:	441a      	add	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	61bb      	str	r3, [r7, #24]
        break;
 800afaa:	e02a      	b.n	800b002 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	085a      	lsrs	r2, r3, #1
 800afb2:	4b5f      	ldr	r3, [pc, #380]	; (800b130 <UART_SetConfig+0x54c>)
 800afb4:	4413      	add	r3, r2
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	6852      	ldr	r2, [r2, #4]
 800afba:	fbb3 f3f2 	udiv	r3, r3, r2
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	61bb      	str	r3, [r7, #24]
        break;
 800afc2:	e01e      	b.n	800b002 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afc4:	f7fd f8e4 	bl	8008190 <HAL_RCC_GetSysClockFreq>
 800afc8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	005a      	lsls	r2, r3, #1
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	085b      	lsrs	r3, r3, #1
 800afd4:	441a      	add	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	fbb2 f3f3 	udiv	r3, r2, r3
 800afde:	b29b      	uxth	r3, r3
 800afe0:	61bb      	str	r3, [r7, #24]
        break;
 800afe2:	e00e      	b.n	800b002 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	085b      	lsrs	r3, r3, #1
 800afea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	61bb      	str	r3, [r7, #24]
        break;
 800affa:	e002      	b.n	800b002 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	75fb      	strb	r3, [r7, #23]
        break;
 800b000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	2b0f      	cmp	r3, #15
 800b006:	d916      	bls.n	800b036 <UART_SetConfig+0x452>
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b00e:	d212      	bcs.n	800b036 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	b29b      	uxth	r3, r3
 800b014:	f023 030f 	bic.w	r3, r3, #15
 800b018:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	085b      	lsrs	r3, r3, #1
 800b01e:	b29b      	uxth	r3, r3
 800b020:	f003 0307 	and.w	r3, r3, #7
 800b024:	b29a      	uxth	r2, r3
 800b026:	897b      	ldrh	r3, [r7, #10]
 800b028:	4313      	orrs	r3, r2
 800b02a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	897a      	ldrh	r2, [r7, #10]
 800b032:	60da      	str	r2, [r3, #12]
 800b034:	e070      	b.n	800b118 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	75fb      	strb	r3, [r7, #23]
 800b03a:	e06d      	b.n	800b118 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b03c:	7ffb      	ldrb	r3, [r7, #31]
 800b03e:	2b08      	cmp	r3, #8
 800b040:	d859      	bhi.n	800b0f6 <UART_SetConfig+0x512>
 800b042:	a201      	add	r2, pc, #4	; (adr r2, 800b048 <UART_SetConfig+0x464>)
 800b044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b048:	0800b06d 	.word	0x0800b06d
 800b04c:	0800b08b 	.word	0x0800b08b
 800b050:	0800b0a9 	.word	0x0800b0a9
 800b054:	0800b0f7 	.word	0x0800b0f7
 800b058:	0800b0c1 	.word	0x0800b0c1
 800b05c:	0800b0f7 	.word	0x0800b0f7
 800b060:	0800b0f7 	.word	0x0800b0f7
 800b064:	0800b0f7 	.word	0x0800b0f7
 800b068:	0800b0df 	.word	0x0800b0df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b06c:	f7fd f94e 	bl	800830c <HAL_RCC_GetPCLK1Freq>
 800b070:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	085a      	lsrs	r2, r3, #1
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	441a      	add	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	fbb2 f3f3 	udiv	r3, r2, r3
 800b084:	b29b      	uxth	r3, r3
 800b086:	61bb      	str	r3, [r7, #24]
        break;
 800b088:	e038      	b.n	800b0fc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b08a:	f7fd f953 	bl	8008334 <HAL_RCC_GetPCLK2Freq>
 800b08e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	085a      	lsrs	r2, r3, #1
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	441a      	add	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	61bb      	str	r3, [r7, #24]
        break;
 800b0a6:	e029      	b.n	800b0fc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	085a      	lsrs	r2, r3, #1
 800b0ae:	4b21      	ldr	r3, [pc, #132]	; (800b134 <UART_SetConfig+0x550>)
 800b0b0:	4413      	add	r3, r2
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	6852      	ldr	r2, [r2, #4]
 800b0b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	61bb      	str	r3, [r7, #24]
        break;
 800b0be:	e01d      	b.n	800b0fc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0c0:	f7fd f866 	bl	8008190 <HAL_RCC_GetSysClockFreq>
 800b0c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	085a      	lsrs	r2, r3, #1
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	441a      	add	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	61bb      	str	r3, [r7, #24]
        break;
 800b0dc:	e00e      	b.n	800b0fc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	085b      	lsrs	r3, r3, #1
 800b0e4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	61bb      	str	r3, [r7, #24]
        break;
 800b0f4:	e002      	b.n	800b0fc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	75fb      	strb	r3, [r7, #23]
        break;
 800b0fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	2b0f      	cmp	r3, #15
 800b100:	d908      	bls.n	800b114 <UART_SetConfig+0x530>
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b108:	d204      	bcs.n	800b114 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	60da      	str	r2, [r3, #12]
 800b112:	e001      	b.n	800b118 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b124:	7dfb      	ldrb	r3, [r7, #23]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3720      	adds	r7, #32
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	01e84800 	.word	0x01e84800
 800b134:	00f42400 	.word	0x00f42400

0800b138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	f003 0301 	and.w	r3, r3, #1
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00a      	beq.n	800b162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	f003 0302 	and.w	r3, r3, #2
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00a      	beq.n	800b184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	430a      	orrs	r2, r1
 800b182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	f003 0304 	and.w	r3, r3, #4
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00a      	beq.n	800b1a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	430a      	orrs	r2, r1
 800b1a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	f003 0308 	and.w	r3, r3, #8
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00a      	beq.n	800b1c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	430a      	orrs	r2, r1
 800b1c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	f003 0310 	and.w	r3, r3, #16
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00a      	beq.n	800b1ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	f003 0320 	and.w	r3, r3, #32
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01a      	beq.n	800b24e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	430a      	orrs	r2, r1
 800b22c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b236:	d10a      	bne.n	800b24e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00a      	beq.n	800b270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	430a      	orrs	r2, r1
 800b26e:	605a      	str	r2, [r3, #4]
  }
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af02      	add	r7, sp, #8
 800b282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b28a:	f7f8 fb9d 	bl	80039c8 <HAL_GetTick>
 800b28e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0308 	and.w	r3, r3, #8
 800b29a:	2b08      	cmp	r3, #8
 800b29c:	d10e      	bne.n	800b2bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b29e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f814 	bl	800b2da <UART_WaitOnFlagUntilTimeout>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e00a      	b.n	800b2d2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	60f8      	str	r0, [r7, #12]
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	603b      	str	r3, [r7, #0]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2ea:	e05d      	b.n	800b3a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f2:	d059      	beq.n	800b3a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2f4:	f7f8 fb68 	bl	80039c8 <HAL_GetTick>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	429a      	cmp	r2, r3
 800b302:	d302      	bcc.n	800b30a <UART_WaitOnFlagUntilTimeout+0x30>
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d11b      	bne.n	800b342 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b318:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f022 0201 	bic.w	r2, r2, #1
 800b328:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2220      	movs	r2, #32
 800b32e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2220      	movs	r2, #32
 800b334:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b33e:	2303      	movs	r3, #3
 800b340:	e042      	b.n	800b3c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d02b      	beq.n	800b3a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	69db      	ldr	r3, [r3, #28]
 800b356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b35a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b35e:	d123      	bne.n	800b3a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b368:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b378:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689a      	ldr	r2, [r3, #8]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f022 0201 	bic.w	r2, r2, #1
 800b388:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2220      	movs	r2, #32
 800b38e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2220      	movs	r2, #32
 800b394:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2220      	movs	r2, #32
 800b39a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e00f      	b.n	800b3c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	69da      	ldr	r2, [r3, #28]
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	bf0c      	ite	eq
 800b3b8:	2301      	moveq	r3, #1
 800b3ba:	2300      	movne	r3, #0
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d092      	beq.n	800b2ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d027      	beq.n	800b43a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4b2f      	ldr	r3, [pc, #188]	; (800b4b0 <FMC_SDRAM_Init+0xe0>)
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b400:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b406:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b40c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b412:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b418:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b41e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b424:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b42a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	4313      	orrs	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	e032      	b.n	800b4a0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b446:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b450:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b456:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	4b12      	ldr	r3, [pc, #72]	; (800b4b0 <FMC_SDRAM_Init+0xe0>)
 800b468:	4013      	ands	r3, r2
 800b46a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b474:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b47a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b480:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b486:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b48c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	4313      	orrs	r3, r2
 800b492:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	ffff8000 	.word	0xffff8000

0800b4b4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d02e      	beq.n	800b52c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4da:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4ea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4f4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4fe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	3b01      	subs	r3, #1
 800b506:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b508:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	3b01      	subs	r3, #1
 800b510:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b512:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	3b01      	subs	r3, #1
 800b51a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b51c:	4313      	orrs	r3, r2
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	4313      	orrs	r3, r2
 800b522:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	609a      	str	r2, [r3, #8]
 800b52a:	e039      	b.n	800b5a0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	4b1e      	ldr	r3, [pc, #120]	; (800b5b0 <FMC_SDRAM_Timing_Init+0xfc>)
 800b536:	4013      	ands	r3, r2
 800b538:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	3b01      	subs	r3, #1
 800b540:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	3b01      	subs	r3, #1
 800b548:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b54a:	4313      	orrs	r3, r2
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	4313      	orrs	r3, r2
 800b550:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b55e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	3b01      	subs	r3, #1
 800b56c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b56e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	3b01      	subs	r3, #1
 800b576:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b578:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	3b01      	subs	r3, #1
 800b580:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b582:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	3b01      	subs	r3, #1
 800b58a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b58c:	4313      	orrs	r3, r2
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	4313      	orrs	r3, r2
 800b592:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	371c      	adds	r7, #28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	ff0f0fff 	.word	0xff0f0fff

0800b5b4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5cc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b5d6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	371c      	adds	r7, #28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	695a      	ldr	r2, [r3, #20]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	431a      	orrs	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b61c:	b084      	sub	sp, #16
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	f107 001c 	add.w	r0, r7, #28
 800b62a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	2b01      	cmp	r3, #1
 800b632:	d120      	bne.n	800b676 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b638:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68da      	ldr	r2, [r3, #12]
 800b644:	4b20      	ldr	r3, [pc, #128]	; (800b6c8 <USB_CoreInit+0xac>)
 800b646:	4013      	ands	r3, r2
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d105      	bne.n	800b66a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f942 	bl	800b8f4 <USB_CoreReset>
 800b670:	4603      	mov	r3, r0
 800b672:	73fb      	strb	r3, [r7, #15]
 800b674:	e010      	b.n	800b698 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f936 	bl	800b8f4 <USB_CoreReset>
 800b688:	4603      	mov	r3, r0
 800b68a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d10b      	bne.n	800b6b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	f043 0206 	orr.w	r2, r3, #6
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f043 0220 	orr.w	r2, r3, #32
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3710      	adds	r7, #16
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6c2:	b004      	add	sp, #16
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	ffbdffbf 	.word	0xffbdffbf

0800b6cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	f043 0201 	orr.w	r2, r3, #1
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b083      	sub	sp, #12
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	f023 0201 	bic.w	r2, r3, #1
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b728:	78fb      	ldrb	r3, [r7, #3]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d106      	bne.n	800b73c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	60da      	str	r2, [r3, #12]
 800b73a:	e00b      	b.n	800b754 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b73c:	78fb      	ldrb	r3, [r7, #3]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d106      	bne.n	800b750 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	60da      	str	r2, [r3, #12]
 800b74e:	e001      	b.n	800b754 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	e003      	b.n	800b75c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b754:	2032      	movs	r0, #50	; 0x32
 800b756:	f7f8 f943 	bl	80039e0 <HAL_Delay>

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b76e:	2300      	movs	r3, #0
 800b770:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	019b      	lsls	r3, r3, #6
 800b776:	f043 0220 	orr.w	r2, r3, #32
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3301      	adds	r3, #1
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <USB_FlushTxFifo+0x48>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d901      	bls.n	800b790 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e006      	b.n	800b79e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	f003 0320 	and.w	r3, r3, #32
 800b798:	2b20      	cmp	r3, #32
 800b79a:	d0f0      	beq.n	800b77e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	00030d40 	.word	0x00030d40

0800b7b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2210      	movs	r2, #16
 800b7c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	60fb      	str	r3, [r7, #12]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	4a09      	ldr	r2, [pc, #36]	; (800b7f0 <USB_FlushRxFifo+0x40>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d901      	bls.n	800b7d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e006      	b.n	800b7e2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	f003 0310 	and.w	r3, r3, #16
 800b7dc:	2b10      	cmp	r3, #16
 800b7de:	d0f0      	beq.n	800b7c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	00030d40 	.word	0x00030d40

0800b7f4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b089      	sub	sp, #36	; 0x24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	4611      	mov	r1, r2
 800b800:	461a      	mov	r2, r3
 800b802:	460b      	mov	r3, r1
 800b804:	71fb      	strb	r3, [r7, #7]
 800b806:	4613      	mov	r3, r2
 800b808:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b816:	2b00      	cmp	r3, #0
 800b818:	d11a      	bne.n	800b850 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b81a:	88bb      	ldrh	r3, [r7, #4]
 800b81c:	3303      	adds	r3, #3
 800b81e:	089b      	lsrs	r3, r3, #2
 800b820:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b822:	2300      	movs	r3, #0
 800b824:	61bb      	str	r3, [r7, #24]
 800b826:	e00f      	b.n	800b848 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	031a      	lsls	r2, r3, #12
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b834:	461a      	mov	r2, r3
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	3304      	adds	r3, #4
 800b840:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	3301      	adds	r3, #1
 800b846:	61bb      	str	r3, [r7, #24]
 800b848:	69ba      	ldr	r2, [r7, #24]
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d3eb      	bcc.n	800b828 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3724      	adds	r7, #36	; 0x24
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b85e:	b480      	push	{r7}
 800b860:	b089      	sub	sp, #36	; 0x24
 800b862:	af00      	add	r7, sp, #0
 800b864:	60f8      	str	r0, [r7, #12]
 800b866:	60b9      	str	r1, [r7, #8]
 800b868:	4613      	mov	r3, r2
 800b86a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b874:	88fb      	ldrh	r3, [r7, #6]
 800b876:	3303      	adds	r3, #3
 800b878:	089b      	lsrs	r3, r3, #2
 800b87a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b87c:	2300      	movs	r3, #0
 800b87e:	61bb      	str	r3, [r7, #24]
 800b880:	e00b      	b.n	800b89a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	3304      	adds	r3, #4
 800b892:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	3301      	adds	r3, #1
 800b898:	61bb      	str	r3, [r7, #24]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d3ef      	bcc.n	800b882 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b8a2:	69fb      	ldr	r3, [r7, #28]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3724      	adds	r7, #36	; 0x24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b083      	sub	sp, #12
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	f003 0301 	and.w	r3, r3, #1
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
	...

0800b8f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3301      	adds	r3, #1
 800b904:	60fb      	str	r3, [r7, #12]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	4a13      	ldr	r2, [pc, #76]	; (800b958 <USB_CoreReset+0x64>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d901      	bls.n	800b912 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b90e:	2303      	movs	r3, #3
 800b910:	e01b      	b.n	800b94a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	daf2      	bge.n	800b900 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b91a:	2300      	movs	r3, #0
 800b91c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	f043 0201 	orr.w	r2, r3, #1
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3301      	adds	r3, #1
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	4a09      	ldr	r2, [pc, #36]	; (800b958 <USB_CoreReset+0x64>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d901      	bls.n	800b93c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b938:	2303      	movs	r3, #3
 800b93a:	e006      	b.n	800b94a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	f003 0301 	and.w	r3, r3, #1
 800b944:	2b01      	cmp	r3, #1
 800b946:	d0f0      	beq.n	800b92a <USB_CoreReset+0x36>

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	00030d40 	.word	0x00030d40

0800b95c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b95c:	b084      	sub	sp, #16
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	f107 001c 	add.w	r0, r7, #28
 800b96a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b978:	461a      	mov	r2, r3
 800b97a:	2300      	movs	r3, #0
 800b97c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b982:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b992:	2b00      	cmp	r3, #0
 800b994:	d018      	beq.n	800b9c8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d10a      	bne.n	800b9b2 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9aa:	f043 0304 	orr.w	r3, r3, #4
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	e014      	b.n	800b9dc <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9c0:	f023 0304 	bic.w	r3, r3, #4
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	e009      	b.n	800b9dc <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9d6:	f023 0304 	bic.w	r3, r3, #4
 800b9da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b9dc:	2110      	movs	r1, #16
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7ff fec0 	bl	800b764 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7ff fee3 	bl	800b7b0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]
 800b9ee:	e015      	b.n	800ba1c <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800ba02:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba10:	461a      	mov	r2, r3
 800ba12:	2300      	movs	r3, #0
 800ba14:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d3e5      	bcc.n	800b9f0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ba24:	2101      	movs	r1, #1
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f8ac 	bl	800bb84 <USB_DriveVbus>

  HAL_Delay(200U);
 800ba2c:	20c8      	movs	r0, #200	; 0xc8
 800ba2e:	f7f7 ffd7 	bl	80039e0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba3e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00b      	beq.n	800ba64 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba52:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4a14      	ldr	r2, [pc, #80]	; (800baa8 <USB_HostInit+0x14c>)
 800ba58:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a13      	ldr	r2, [pc, #76]	; (800baac <USB_HostInit+0x150>)
 800ba5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ba62:	e009      	b.n	800ba78 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2280      	movs	r2, #128	; 0x80
 800ba68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a10      	ldr	r2, [pc, #64]	; (800bab0 <USB_HostInit+0x154>)
 800ba6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a10      	ldr	r2, [pc, #64]	; (800bab4 <USB_HostInit+0x158>)
 800ba74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d105      	bne.n	800ba8a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	f043 0210 	orr.w	r2, r3, #16
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	699a      	ldr	r2, [r3, #24]
 800ba8e:	4b0a      	ldr	r3, [pc, #40]	; (800bab8 <USB_HostInit+0x15c>)
 800ba90:	4313      	orrs	r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800baa2:	b004      	add	sp, #16
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	01000200 	.word	0x01000200
 800baac:	00e00300 	.word	0x00e00300
 800bab0:	00600080 	.word	0x00600080
 800bab4:	004000e0 	.word	0x004000e0
 800bab8:	a3200008 	.word	0xa3200008

0800babc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bada:	f023 0303 	bic.w	r3, r3, #3
 800bade:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	78fb      	ldrb	r3, [r7, #3]
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	68f9      	ldr	r1, [r7, #12]
 800baf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800baf4:	4313      	orrs	r3, r2
 800baf6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800baf8:	78fb      	ldrb	r3, [r7, #3]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d107      	bne.n	800bb0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb04:	461a      	mov	r2, r3
 800bb06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bb0a:	6053      	str	r3, [r2, #4]
 800bb0c:	e009      	b.n	800bb22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bb0e:	78fb      	ldrb	r3, [r7, #3]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d106      	bne.n	800bb22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	f241 7370 	movw	r3, #6000	; 0x1770
 800bb20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bb50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bb5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bb60:	2064      	movs	r0, #100	; 0x64
 800bb62:	f7f7 ff3d 	bl	80039e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bb6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb72:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bb74:	200a      	movs	r0, #10
 800bb76:	f7f7 ff33 	bl	80039e0 <HAL_Delay>

  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bba8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d109      	bne.n	800bbc8 <USB_DriveVbus+0x44>
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d106      	bne.n	800bbc8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bbc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bbc6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbd2:	d109      	bne.n	800bbe8 <USB_DriveVbus+0x64>
 800bbd4:	78fb      	ldrb	r3, [r7, #3]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d106      	bne.n	800bbe8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bbe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbe6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b085      	sub	sp, #20
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bc02:	2300      	movs	r3, #0
 800bc04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	0c5b      	lsrs	r3, r3, #17
 800bc14:	f003 0303 	and.w	r3, r3, #3
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	b29b      	uxth	r3, r3
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
	...

0800bc48 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	4608      	mov	r0, r1
 800bc52:	4611      	mov	r1, r2
 800bc54:	461a      	mov	r2, r3
 800bc56:	4603      	mov	r3, r0
 800bc58:	70fb      	strb	r3, [r7, #3]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70bb      	strb	r3, [r7, #2]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bc6a:	78fb      	ldrb	r3, [r7, #3]
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc76:	461a      	mov	r2, r3
 800bc78:	f04f 33ff 	mov.w	r3, #4294967295
 800bc7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bc7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d87e      	bhi.n	800bd84 <USB_HC_Init+0x13c>
 800bc86:	a201      	add	r2, pc, #4	; (adr r2, 800bc8c <USB_HC_Init+0x44>)
 800bc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8c:	0800bc9d 	.word	0x0800bc9d
 800bc90:	0800bd47 	.word	0x0800bd47
 800bc94:	0800bc9d 	.word	0x0800bc9d
 800bc98:	0800bd09 	.word	0x0800bd09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bc9c:	78fb      	ldrb	r3, [r7, #3]
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bca8:	461a      	mov	r2, r3
 800bcaa:	f240 439d 	movw	r3, #1181	; 0x49d
 800bcae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800bcb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	da10      	bge.n	800bcda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bcb8:	78fb      	ldrb	r3, [r7, #3]
 800bcba:	015a      	lsls	r2, r3, #5
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	78fa      	ldrb	r2, [r7, #3]
 800bcc8:	0151      	lsls	r1, r2, #5
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	440a      	add	r2, r1
 800bcce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcd6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800bcd8:	e057      	b.n	800bd8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d051      	beq.n	800bd8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bce6:	78fb      	ldrb	r3, [r7, #3]
 800bce8:	015a      	lsls	r2, r3, #5
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	4413      	add	r3, r2
 800bcee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	78fa      	ldrb	r2, [r7, #3]
 800bcf6:	0151      	lsls	r1, r2, #5
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	440a      	add	r2, r1
 800bcfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bd04:	60d3      	str	r3, [r2, #12]
      break;
 800bd06:	e040      	b.n	800bd8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bd08:	78fb      	ldrb	r3, [r7, #3]
 800bd0a:	015a      	lsls	r2, r3, #5
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	4413      	add	r3, r2
 800bd10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd14:	461a      	mov	r2, r3
 800bd16:	f240 639d 	movw	r3, #1693	; 0x69d
 800bd1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bd1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	da34      	bge.n	800bd8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bd24:	78fb      	ldrb	r3, [r7, #3]
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	78fa      	ldrb	r2, [r7, #3]
 800bd34:	0151      	lsls	r1, r2, #5
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	440a      	add	r2, r1
 800bd3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd42:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bd44:	e023      	b.n	800bd8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bd46:	78fb      	ldrb	r3, [r7, #3]
 800bd48:	015a      	lsls	r2, r3, #5
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd52:	461a      	mov	r2, r3
 800bd54:	f240 2325 	movw	r3, #549	; 0x225
 800bd58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bd5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	da17      	bge.n	800bd92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bd62:	78fb      	ldrb	r3, [r7, #3]
 800bd64:	015a      	lsls	r2, r3, #5
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	4413      	add	r3, r2
 800bd6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	78fa      	ldrb	r2, [r7, #3]
 800bd72:	0151      	lsls	r1, r2, #5
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	440a      	add	r2, r1
 800bd78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bd80:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bd82:	e006      	b.n	800bd92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	75fb      	strb	r3, [r7, #23]
      break;
 800bd88:	e004      	b.n	800bd94 <USB_HC_Init+0x14c>
      break;
 800bd8a:	bf00      	nop
 800bd8c:	e002      	b.n	800bd94 <USB_HC_Init+0x14c>
      break;
 800bd8e:	bf00      	nop
 800bd90:	e000      	b.n	800bd94 <USB_HC_Init+0x14c>
      break;
 800bd92:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd9a:	699a      	ldr	r2, [r3, #24]
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	f003 030f 	and.w	r3, r3, #15
 800bda2:	2101      	movs	r1, #1
 800bda4:	fa01 f303 	lsl.w	r3, r1, r3
 800bda8:	68b9      	ldr	r1, [r7, #8]
 800bdaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bdbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	da03      	bge.n	800bdce <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bdc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdca:	613b      	str	r3, [r7, #16]
 800bdcc:	e001      	b.n	800bdd2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bdd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d103      	bne.n	800bde2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bdda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e001      	b.n	800bde6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bde6:	787b      	ldrb	r3, [r7, #1]
 800bde8:	059b      	lsls	r3, r3, #22
 800bdea:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bdee:	78bb      	ldrb	r3, [r7, #2]
 800bdf0:	02db      	lsls	r3, r3, #11
 800bdf2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bdf6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bdf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bdfc:	049b      	lsls	r3, r3, #18
 800bdfe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800be02:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800be04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be06:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800be0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800be10:	78fb      	ldrb	r3, [r7, #3]
 800be12:	0159      	lsls	r1, r3, #5
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	440b      	add	r3, r1
 800be18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be1c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800be22:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800be24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be28:	2b03      	cmp	r3, #3
 800be2a:	d10f      	bne.n	800be4c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800be2c:	78fb      	ldrb	r3, [r7, #3]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4413      	add	r3, r2
 800be34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	78fa      	ldrb	r2, [r7, #3]
 800be3c:	0151      	lsls	r1, r2, #5
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	440a      	add	r2, r1
 800be42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be4a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop

0800be5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08c      	sub	sp, #48	; 0x30
 800be60:	af02      	add	r7, sp, #8
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	4613      	mov	r3, r2
 800be68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	785b      	ldrb	r3, [r3, #1]
 800be72:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800be74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be78:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be82:	2b00      	cmp	r3, #0
 800be84:	d028      	beq.n	800bed8 <USB_HC_StartXfer+0x7c>
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	791b      	ldrb	r3, [r3, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d124      	bne.n	800bed8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800be8e:	79fb      	ldrb	r3, [r7, #7]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10b      	bne.n	800beac <USB_HC_StartXfer+0x50>
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	795b      	ldrb	r3, [r3, #5]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d107      	bne.n	800beac <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	785b      	ldrb	r3, [r3, #1]
 800bea0:	4619      	mov	r1, r3
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 fa2e 	bl	800c304 <USB_DoPing>
      return HAL_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	e112      	b.n	800c0d2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d112      	bne.n	800bed8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	69fa      	ldr	r2, [r7, #28]
 800bec2:	0151      	lsls	r1, r2, #5
 800bec4:	6a3a      	ldr	r2, [r7, #32]
 800bec6:	440a      	add	r2, r1
 800bec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800becc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800bed0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2200      	movs	r2, #0
 800bed6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d018      	beq.n	800bf12 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	8912      	ldrh	r2, [r2, #8]
 800bee8:	4413      	add	r3, r2
 800beea:	3b01      	subs	r3, #1
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	8912      	ldrh	r2, [r2, #8]
 800bef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bef4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bef6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bef8:	8b7b      	ldrh	r3, [r7, #26]
 800befa:	429a      	cmp	r2, r3
 800befc:	d90b      	bls.n	800bf16 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800befe:	8b7b      	ldrh	r3, [r7, #26]
 800bf00:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bf02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	8912      	ldrh	r2, [r2, #8]
 800bf08:	fb02 f203 	mul.w	r2, r2, r3
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	611a      	str	r2, [r3, #16]
 800bf10:	e001      	b.n	800bf16 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800bf12:	2301      	movs	r3, #1
 800bf14:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	78db      	ldrb	r3, [r3, #3]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d006      	beq.n	800bf2c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bf1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	8912      	ldrh	r2, [r2, #8]
 800bf24:	fb02 f203 	mul.w	r2, r2, r3
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bf34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf36:	04d9      	lsls	r1, r3, #19
 800bf38:	4b68      	ldr	r3, [pc, #416]	; (800c0dc <USB_HC_StartXfer+0x280>)
 800bf3a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bf3c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	7a9b      	ldrb	r3, [r3, #10]
 800bf42:	075b      	lsls	r3, r3, #29
 800bf44:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bf48:	69f9      	ldr	r1, [r7, #28]
 800bf4a:	0148      	lsls	r0, r1, #5
 800bf4c:	6a39      	ldr	r1, [r7, #32]
 800bf4e:	4401      	add	r1, r0
 800bf50:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bf54:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bf56:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d009      	beq.n	800bf72 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	68d9      	ldr	r1, [r3, #12]
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	015a      	lsls	r2, r3, #5
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	4413      	add	r3, r2
 800bf6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf6e:	460a      	mov	r2, r1
 800bf70:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	f003 0301 	and.w	r3, r3, #1
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bf0c      	ite	eq
 800bf82:	2301      	moveq	r3, #1
 800bf84:	2300      	movne	r3, #0
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	015a      	lsls	r2, r3, #5
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	4413      	add	r3, r2
 800bf92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	69fa      	ldr	r2, [r7, #28]
 800bf9a:	0151      	lsls	r1, r2, #5
 800bf9c:	6a3a      	ldr	r2, [r7, #32]
 800bf9e:	440a      	add	r2, r1
 800bfa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfa4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bfa8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	015a      	lsls	r2, r3, #5
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	7e7b      	ldrb	r3, [r7, #25]
 800bfba:	075b      	lsls	r3, r3, #29
 800bfbc:	69f9      	ldr	r1, [r7, #28]
 800bfbe:	0148      	lsls	r0, r1, #5
 800bfc0:	6a39      	ldr	r1, [r7, #32]
 800bfc2:	4401      	add	r1, r0
 800bfc4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	015a      	lsls	r2, r3, #5
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a41      	ldr	r2, [pc, #260]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800bfdc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bfde:	4b40      	ldr	r3, [pc, #256]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bfe6:	4a3e      	ldr	r2, [pc, #248]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800bfe8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	78db      	ldrb	r3, [r3, #3]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d006      	beq.n	800c000 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bff2:	4b3b      	ldr	r3, [pc, #236]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bffa:	4a39      	ldr	r2, [pc, #228]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800bffc:	6013      	str	r3, [r2, #0]
 800bffe:	e005      	b.n	800c00c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c000:	4b37      	ldr	r3, [pc, #220]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c008:	4a35      	ldr	r2, [pc, #212]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800c00a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c00c:	4b34      	ldr	r3, [pc, #208]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c014:	4a32      	ldr	r2, [pc, #200]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800c016:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	015a      	lsls	r2, r3, #5
 800c01c:	6a3b      	ldr	r3, [r7, #32]
 800c01e:	4413      	add	r3, r2
 800c020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c024:	461a      	mov	r2, r3
 800c026:	4b2e      	ldr	r3, [pc, #184]	; (800c0e0 <USB_HC_StartXfer+0x284>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800c02c:	79fb      	ldrb	r3, [r7, #7]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d14e      	bne.n	800c0d0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	78db      	ldrb	r3, [r3, #3]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d14a      	bne.n	800c0d0 <USB_HC_StartXfer+0x274>
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d046      	beq.n	800c0d0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	79db      	ldrb	r3, [r3, #7]
 800c046:	2b03      	cmp	r3, #3
 800c048:	d830      	bhi.n	800c0ac <USB_HC_StartXfer+0x250>
 800c04a:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <USB_HC_StartXfer+0x1f4>)
 800c04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c050:	0800c061 	.word	0x0800c061
 800c054:	0800c085 	.word	0x0800c085
 800c058:	0800c061 	.word	0x0800c061
 800c05c:	0800c085 	.word	0x0800c085
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	3303      	adds	r3, #3
 800c066:	089b      	lsrs	r3, r3, #2
 800c068:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c06a:	8afa      	ldrh	r2, [r7, #22]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c070:	b29b      	uxth	r3, r3
 800c072:	429a      	cmp	r2, r3
 800c074:	d91c      	bls.n	800c0b0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	f043 0220 	orr.w	r2, r3, #32
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	619a      	str	r2, [r3, #24]
          }
          break;
 800c082:	e015      	b.n	800c0b0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	3303      	adds	r3, #3
 800c08a:	089b      	lsrs	r3, r3, #2
 800c08c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c08e:	8afa      	ldrh	r2, [r7, #22]
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d90a      	bls.n	800c0b4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	619a      	str	r2, [r3, #24]
          }
          break;
 800c0aa:	e003      	b.n	800c0b4 <USB_HC_StartXfer+0x258>

        default:
          break;
 800c0ac:	bf00      	nop
 800c0ae:	e002      	b.n	800c0b6 <USB_HC_StartXfer+0x25a>
          break;
 800c0b0:	bf00      	nop
 800c0b2:	e000      	b.n	800c0b6 <USB_HC_StartXfer+0x25a>
          break;
 800c0b4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	68d9      	ldr	r1, [r3, #12]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	785a      	ldrb	r2, [r3, #1]
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	b298      	uxth	r0, r3
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f7ff fb92 	bl	800b7f4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3728      	adds	r7, #40	; 0x28
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	1ff80000 	.word	0x1ff80000
 800c0e0:	200002c8 	.word	0x200002c8

0800c0e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	b29b      	uxth	r3, r3
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c106:	b480      	push	{r7}
 800c108:	b087      	sub	sp, #28
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	460b      	mov	r3, r1
 800c110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c116:	78fb      	ldrb	r3, [r7, #3]
 800c118:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c11a:	2300      	movs	r3, #0
 800c11c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	015a      	lsls	r2, r3, #5
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	4413      	add	r3, r2
 800c126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	0c9b      	lsrs	r3, r3, #18
 800c12e:	f003 0303 	and.w	r3, r3, #3
 800c132:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d002      	beq.n	800c140 <USB_HC_Halt+0x3a>
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d16c      	bne.n	800c21a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	4413      	add	r3, r2
 800c148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	0151      	lsls	r1, r2, #5
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	440a      	add	r2, r1
 800c156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c15a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c15e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c164:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d143      	bne.n	800c1f4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	4413      	add	r3, r2
 800c174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	0151      	lsls	r1, r2, #5
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	440a      	add	r2, r1
 800c182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c18a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	015a      	lsls	r2, r3, #5
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	4413      	add	r3, r2
 800c194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	0151      	lsls	r1, r2, #5
 800c19e:	693a      	ldr	r2, [r7, #16]
 800c1a0:	440a      	add	r2, r1
 800c1a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	0151      	lsls	r1, r2, #5
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	440a      	add	r2, r1
 800c1c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1ca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	617b      	str	r3, [r7, #20]
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1d8:	d81d      	bhi.n	800c216 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	015a      	lsls	r2, r3, #5
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1f0:	d0ec      	beq.n	800c1cc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c1f2:	e080      	b.n	800c2f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	015a      	lsls	r2, r3, #5
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	0151      	lsls	r1, r2, #5
 800c206:	693a      	ldr	r2, [r7, #16]
 800c208:	440a      	add	r2, r1
 800c20a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c20e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c212:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c214:	e06f      	b.n	800c2f6 <USB_HC_Halt+0x1f0>
          break;
 800c216:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c218:	e06d      	b.n	800c2f6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	015a      	lsls	r2, r3, #5
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	4413      	add	r3, r2
 800c222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	0151      	lsls	r1, r2, #5
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	440a      	add	r2, r1
 800c230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c234:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c238:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c246:	2b00      	cmp	r3, #0
 800c248:	d143      	bne.n	800c2d2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	015a      	lsls	r2, r3, #5
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	4413      	add	r3, r2
 800c252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	0151      	lsls	r1, r2, #5
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	440a      	add	r2, r1
 800c260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c268:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	4413      	add	r3, r2
 800c272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	0151      	lsls	r1, r2, #5
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	440a      	add	r2, r1
 800c280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c288:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	4413      	add	r3, r2
 800c292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	0151      	lsls	r1, r2, #5
 800c29c:	693a      	ldr	r2, [r7, #16]
 800c29e:	440a      	add	r2, r1
 800c2a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2a8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	617b      	str	r3, [r7, #20]
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2b6:	d81d      	bhi.n	800c2f4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	015a      	lsls	r2, r3, #5
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	4413      	add	r3, r2
 800c2c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2ce:	d0ec      	beq.n	800c2aa <USB_HC_Halt+0x1a4>
 800c2d0:	e011      	b.n	800c2f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	015a      	lsls	r2, r3, #5
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	4413      	add	r3, r2
 800c2da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	0151      	lsls	r1, r2, #5
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	440a      	add	r2, r1
 800c2e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	e000      	b.n	800c2f6 <USB_HC_Halt+0x1f0>
          break;
 800c2f4:	bf00      	nop
    }
  }

  return HAL_OK;
 800c2f6:	2300      	movs	r3, #0
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	371c      	adds	r7, #28
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	460b      	mov	r3, r1
 800c30e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c314:	78fb      	ldrb	r3, [r7, #3]
 800c316:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c318:	2301      	movs	r3, #1
 800c31a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	04da      	lsls	r2, r3, #19
 800c320:	4b15      	ldr	r3, [pc, #84]	; (800c378 <USB_DoPing+0x74>)
 800c322:	4013      	ands	r3, r2
 800c324:	693a      	ldr	r2, [r7, #16]
 800c326:	0151      	lsls	r1, r2, #5
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	440a      	add	r2, r1
 800c32c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c334:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	015a      	lsls	r2, r3, #5
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	4413      	add	r3, r2
 800c33e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c34c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c354:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	015a      	lsls	r2, r3, #5
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	4413      	add	r3, r2
 800c35e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c362:	461a      	mov	r2, r3
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	371c      	adds	r7, #28
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	1ff80000 	.word	0x1ff80000

0800c37c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c388:	2300      	movs	r3, #0
 800c38a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff f9ae 	bl	800b6ee <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c392:	2110      	movs	r1, #16
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f7ff f9e5 	bl	800b764 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fa08 	bl	800b7b0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	613b      	str	r3, [r7, #16]
 800c3a4:	e01f      	b.n	800c3e6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	015a      	lsls	r2, r3, #5
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	015a      	lsls	r2, r3, #5
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3da:	461a      	mov	r2, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	613b      	str	r3, [r7, #16]
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	2b0f      	cmp	r3, #15
 800c3ea:	d9dc      	bls.n	800c3a6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	613b      	str	r3, [r7, #16]
 800c3f0:	e034      	b.n	800c45c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	015a      	lsls	r2, r3, #5
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c408:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c410:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c418:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	4413      	add	r3, r2
 800c422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c426:	461a      	mov	r2, r3
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	3301      	adds	r3, #1
 800c430:	617b      	str	r3, [r7, #20]
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c438:	d80c      	bhi.n	800c454 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	015a      	lsls	r2, r3, #5
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4413      	add	r3, r2
 800c442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c44c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c450:	d0ec      	beq.n	800c42c <USB_StopHost+0xb0>
 800c452:	e000      	b.n	800c456 <USB_StopHost+0xda>
        break;
 800c454:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	3301      	adds	r3, #1
 800c45a:	613b      	str	r3, [r7, #16]
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	2b0f      	cmp	r3, #15
 800c460:	d9c7      	bls.n	800c3f2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c468:	461a      	mov	r2, r3
 800c46a:	f04f 33ff 	mov.w	r3, #4294967295
 800c46e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f04f 32ff 	mov.w	r2, #4294967295
 800c476:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7ff f927 	bl	800b6cc <USB_EnableGlobalInt>

  return HAL_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3718      	adds	r7, #24
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c488:	b590      	push	{r4, r7, lr}
 800c48a:	b089      	sub	sp, #36	; 0x24
 800c48c:	af04      	add	r7, sp, #16
 800c48e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c490:	2301      	movs	r3, #1
 800c492:	2202      	movs	r2, #2
 800c494:	2102      	movs	r1, #2
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fcb4 	bl	800ce04 <USBH_FindInterface>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	2bff      	cmp	r3, #255	; 0xff
 800c4a4:	d002      	beq.n	800c4ac <USBH_CDC_InterfaceInit+0x24>
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d901      	bls.n	800c4b0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	e13d      	b.n	800c72c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fc89 	bl	800cdcc <USBH_SelectInterface>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c4be:	7bbb      	ldrb	r3, [r7, #14]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d001      	beq.n	800c4c8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	e131      	b.n	800c72c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c4ce:	2050      	movs	r0, #80	; 0x50
 800c4d0:	f005 fe6c 	bl	80121ac <malloc>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4de:	69db      	ldr	r3, [r3, #28]
 800c4e0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	e11f      	b.n	800c72c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c4ec:	2250      	movs	r2, #80	; 0x50
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	68b8      	ldr	r0, [r7, #8]
 800c4f2:	f005 fe76 	bl	80121e2 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	211a      	movs	r1, #26
 800c4fc:	fb01 f303 	mul.w	r3, r1, r3
 800c500:	4413      	add	r3, r2
 800c502:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	b25b      	sxtb	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	da15      	bge.n	800c53a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	211a      	movs	r1, #26
 800c514:	fb01 f303 	mul.w	r3, r1, r3
 800c518:	4413      	add	r3, r2
 800c51a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c51e:	781a      	ldrb	r2, [r3, #0]
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c524:	7bfb      	ldrb	r3, [r7, #15]
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	211a      	movs	r1, #26
 800c52a:	fb01 f303 	mul.w	r3, r1, r3
 800c52e:	4413      	add	r3, r2
 800c530:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c534:	881a      	ldrh	r2, [r3, #0]
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	785b      	ldrb	r3, [r3, #1]
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f002 f890 	bl	800e666 <USBH_AllocPipe>
 800c546:	4603      	mov	r3, r0
 800c548:	461a      	mov	r2, r3
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	7819      	ldrb	r1, [r3, #0]
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	7858      	ldrb	r0, [r3, #1]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	8952      	ldrh	r2, [r2, #10]
 800c566:	9202      	str	r2, [sp, #8]
 800c568:	2203      	movs	r2, #3
 800c56a:	9201      	str	r2, [sp, #4]
 800c56c:	9300      	str	r3, [sp, #0]
 800c56e:	4623      	mov	r3, r4
 800c570:	4602      	mov	r2, r0
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f002 f848 	bl	800e608 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2200      	movs	r2, #0
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f005 fb2f 	bl	8011be4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c586:	2300      	movs	r3, #0
 800c588:	2200      	movs	r2, #0
 800c58a:	210a      	movs	r1, #10
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fc39 	bl	800ce04 <USBH_FindInterface>
 800c592:	4603      	mov	r3, r0
 800c594:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	2bff      	cmp	r3, #255	; 0xff
 800c59a:	d002      	beq.n	800c5a2 <USBH_CDC_InterfaceInit+0x11a>
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d901      	bls.n	800c5a6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	e0c2      	b.n	800c72c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	211a      	movs	r1, #26
 800c5ac:	fb01 f303 	mul.w	r3, r1, r3
 800c5b0:	4413      	add	r3, r2
 800c5b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	b25b      	sxtb	r3, r3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	da16      	bge.n	800c5ec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c5be:	7bfb      	ldrb	r3, [r7, #15]
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	211a      	movs	r1, #26
 800c5c4:	fb01 f303 	mul.w	r3, r1, r3
 800c5c8:	4413      	add	r3, r2
 800c5ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c5ce:	781a      	ldrb	r2, [r3, #0]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c5d4:	7bfb      	ldrb	r3, [r7, #15]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	211a      	movs	r1, #26
 800c5da:	fb01 f303 	mul.w	r3, r1, r3
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c5e4:	881a      	ldrh	r2, [r3, #0]
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	835a      	strh	r2, [r3, #26]
 800c5ea:	e015      	b.n	800c618 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	211a      	movs	r1, #26
 800c5f2:	fb01 f303 	mul.w	r3, r1, r3
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c5fc:	781a      	ldrb	r2, [r3, #0]
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	211a      	movs	r1, #26
 800c608:	fb01 f303 	mul.w	r3, r1, r3
 800c60c:	4413      	add	r3, r2
 800c60e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c612:	881a      	ldrh	r2, [r3, #0]
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c618:	7bfb      	ldrb	r3, [r7, #15]
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	211a      	movs	r1, #26
 800c61e:	fb01 f303 	mul.w	r3, r1, r3
 800c622:	4413      	add	r3, r2
 800c624:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	b25b      	sxtb	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	da16      	bge.n	800c65e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	211a      	movs	r1, #26
 800c636:	fb01 f303 	mul.w	r3, r1, r3
 800c63a:	4413      	add	r3, r2
 800c63c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c640:	781a      	ldrb	r2, [r3, #0]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c646:	7bfb      	ldrb	r3, [r7, #15]
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	211a      	movs	r1, #26
 800c64c:	fb01 f303 	mul.w	r3, r1, r3
 800c650:	4413      	add	r3, r2
 800c652:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c656:	881a      	ldrh	r2, [r3, #0]
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	835a      	strh	r2, [r3, #26]
 800c65c:	e015      	b.n	800c68a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	211a      	movs	r1, #26
 800c664:	fb01 f303 	mul.w	r3, r1, r3
 800c668:	4413      	add	r3, r2
 800c66a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c66e:	781a      	ldrb	r2, [r3, #0]
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c674:	7bfb      	ldrb	r3, [r7, #15]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	211a      	movs	r1, #26
 800c67a:	fb01 f303 	mul.w	r3, r1, r3
 800c67e:	4413      	add	r3, r2
 800c680:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c684:	881a      	ldrh	r2, [r3, #0]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	7b9b      	ldrb	r3, [r3, #14]
 800c68e:	4619      	mov	r1, r3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f001 ffe8 	bl	800e666 <USBH_AllocPipe>
 800c696:	4603      	mov	r3, r0
 800c698:	461a      	mov	r2, r3
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	7bdb      	ldrb	r3, [r3, #15]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f001 ffde 	bl	800e666 <USBH_AllocPipe>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	7b59      	ldrb	r1, [r3, #13]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	7b98      	ldrb	r0, [r3, #14]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	8b12      	ldrh	r2, [r2, #24]
 800c6ca:	9202      	str	r2, [sp, #8]
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	9201      	str	r2, [sp, #4]
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	4623      	mov	r3, r4
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f001 ff96 	bl	800e608 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	7b19      	ldrb	r1, [r3, #12]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	7bd8      	ldrb	r0, [r3, #15]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c6f0:	68ba      	ldr	r2, [r7, #8]
 800c6f2:	8b52      	ldrh	r2, [r2, #26]
 800c6f4:	9202      	str	r2, [sp, #8]
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	9201      	str	r2, [sp, #4]
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	4623      	mov	r3, r4
 800c6fe:	4602      	mov	r2, r0
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f001 ff81 	bl	800e608 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	7b5b      	ldrb	r3, [r3, #13]
 800c712:	2200      	movs	r2, #0
 800c714:	4619      	mov	r1, r3
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f005 fa64 	bl	8011be4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	7b1b      	ldrb	r3, [r3, #12]
 800c720:	2200      	movs	r2, #0
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f005 fa5d 	bl	8011be4 <USBH_LL_SetToggle>

  return USBH_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	bd90      	pop	{r4, r7, pc}

0800c734 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c742:	69db      	ldr	r3, [r3, #28]
 800c744:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00e      	beq.n	800c76c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f001 ff76 	bl	800e646 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f001 ffa1 	bl	800e6a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	7b1b      	ldrb	r3, [r3, #12]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00e      	beq.n	800c792 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	7b1b      	ldrb	r3, [r3, #12]
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f001 ff63 	bl	800e646 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	7b1b      	ldrb	r3, [r3, #12]
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f001 ff8e 	bl	800e6a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2200      	movs	r2, #0
 800c790:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	7b5b      	ldrb	r3, [r3, #13]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00e      	beq.n	800c7b8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	7b5b      	ldrb	r3, [r3, #13]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f001 ff50 	bl	800e646 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	7b5b      	ldrb	r3, [r3, #13]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f001 ff7b 	bl	800e6a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7be:	69db      	ldr	r3, [r3, #28]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00b      	beq.n	800c7dc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f005 fcf5 	bl	80121bc <free>
    phost->pActiveClass->pData = 0U;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7d8:	2200      	movs	r2, #0
 800c7da:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3340      	adds	r3, #64	; 0x40
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f8b1 	bl	800c966 <GetLineCoding>
 800c804:	4603      	mov	r3, r0
 800c806:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c808:	7afb      	ldrb	r3, [r7, #11]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d105      	bne.n	800c81a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c814:	2102      	movs	r1, #2
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c81a:	7afb      	ldrb	r3, [r7, #11]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c82c:	2301      	movs	r3, #1
 800c82e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c844:	2b04      	cmp	r3, #4
 800c846:	d877      	bhi.n	800c938 <USBH_CDC_Process+0x114>
 800c848:	a201      	add	r2, pc, #4	; (adr r2, 800c850 <USBH_CDC_Process+0x2c>)
 800c84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84e:	bf00      	nop
 800c850:	0800c865 	.word	0x0800c865
 800c854:	0800c86b 	.word	0x0800c86b
 800c858:	0800c89b 	.word	0x0800c89b
 800c85c:	0800c90f 	.word	0x0800c90f
 800c860:	0800c91d 	.word	0x0800c91d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c864:	2300      	movs	r3, #0
 800c866:	73fb      	strb	r3, [r7, #15]
      break;
 800c868:	e06d      	b.n	800c946 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c86e:	4619      	mov	r1, r3
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 f897 	bl	800c9a4 <SetLineCoding>
 800c876:	4603      	mov	r3, r0
 800c878:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c87a:	7bbb      	ldrb	r3, [r7, #14]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d104      	bne.n	800c88a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	2202      	movs	r2, #2
 800c884:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c888:	e058      	b.n	800c93c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c88a:	7bbb      	ldrb	r3, [r7, #14]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d055      	beq.n	800c93c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2204      	movs	r2, #4
 800c894:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c898:	e050      	b.n	800c93c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	3340      	adds	r3, #64	; 0x40
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f860 	bl	800c966 <GetLineCoding>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d126      	bne.n	800c8fe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8c2:	791b      	ldrb	r3, [r3, #4]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d13b      	bne.n	800c940 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8d2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d133      	bne.n	800c940 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8e2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d12b      	bne.n	800c940 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8f0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d124      	bne.n	800c940 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 f984 	bl	800cc04 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c8fc:	e020      	b.n	800c940 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c8fe:	7bbb      	ldrb	r3, [r7, #14]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d01d      	beq.n	800c940 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2204      	movs	r2, #4
 800c908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c90c:	e018      	b.n	800c940 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f867 	bl	800c9e2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 f8f8 	bl	800cb0a <CDC_ProcessReception>
      break;
 800c91a:	e014      	b.n	800c946 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c91c:	2100      	movs	r1, #0
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f001 f94f 	bl	800dbc2 <USBH_ClrFeature>
 800c924:	4603      	mov	r3, r0
 800c926:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c928:	7bbb      	ldrb	r3, [r7, #14]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	2200      	movs	r2, #0
 800c932:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c936:	e005      	b.n	800c944 <USBH_CDC_Process+0x120>

    default:
      break;
 800c938:	bf00      	nop
 800c93a:	e004      	b.n	800c946 <USBH_CDC_Process+0x122>
      break;
 800c93c:	bf00      	nop
 800c93e:	e002      	b.n	800c946 <USBH_CDC_Process+0x122>
      break;
 800c940:	bf00      	nop
 800c942:	e000      	b.n	800c946 <USBH_CDC_Process+0x122>
      break;
 800c944:	bf00      	nop

  }

  return status;
 800c946:	7bfb      	ldrb	r3, [r7, #15]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b082      	sub	sp, #8
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	22a1      	movs	r2, #161	; 0xa1
 800c974:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2221      	movs	r2, #33	; 0x21
 800c97a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2207      	movs	r2, #7
 800c98c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2207      	movs	r2, #7
 800c992:	4619      	mov	r1, r3
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f001 faf4 	bl	800df82 <USBH_CtlReq>
 800c99a:	4603      	mov	r3, r0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2221      	movs	r2, #33	; 0x21
 800c9b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2220      	movs	r2, #32
 800c9b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2207      	movs	r2, #7
 800c9ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2207      	movs	r2, #7
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f001 fad5 	bl	800df82 <USBH_CtlReq>
 800c9d8:	4603      	mov	r3, r0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b086      	sub	sp, #24
 800c9e6:	af02      	add	r7, sp, #8
 800c9e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d002      	beq.n	800ca08 <CDC_ProcessTransmission+0x26>
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d025      	beq.n	800ca52 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800ca06:	e07c      	b.n	800cb02 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	8b12      	ldrh	r2, [r2, #24]
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d90c      	bls.n	800ca2e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	69d9      	ldr	r1, [r3, #28]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	8b1a      	ldrh	r2, [r3, #24]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	7b58      	ldrb	r0, [r3, #13]
 800ca20:	2301      	movs	r3, #1
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	4603      	mov	r3, r0
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f001 fdab 	bl	800e582 <USBH_BulkSendData>
 800ca2c:	e00c      	b.n	800ca48 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	7b58      	ldrb	r0, [r3, #13]
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	9300      	str	r3, [sp, #0]
 800ca40:	4603      	mov	r3, r0
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f001 fd9d 	bl	800e582 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2202      	movs	r2, #2
 800ca4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ca50:	e057      	b.n	800cb02 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	7b5b      	ldrb	r3, [r3, #13]
 800ca56:	4619      	mov	r1, r3
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f005 f899 	bl	8011b90 <USBH_LL_GetURBState>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ca62:	7afb      	ldrb	r3, [r7, #11]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d136      	bne.n	800cad6 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	8b12      	ldrh	r2, [r2, #24]
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d90e      	bls.n	800ca92 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	8b12      	ldrh	r2, [r2, #24]
 800ca7c:	1a9a      	subs	r2, r3, r2
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	69db      	ldr	r3, [r3, #28]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	8b12      	ldrh	r2, [r2, #24]
 800ca8a:	441a      	add	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	61da      	str	r2, [r3, #28]
 800ca90:	e002      	b.n	800ca98 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d004      	beq.n	800caaa <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800caa8:	e006      	b.n	800cab8 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f892 	bl	800cbdc <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2204      	movs	r2, #4
 800cabc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cacc:	2300      	movs	r3, #0
 800cace:	2200      	movs	r2, #0
 800cad0:	f001 fff8 	bl	800eac4 <osMessageQueuePut>
      break;
 800cad4:	e014      	b.n	800cb00 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800cad6:	7afb      	ldrb	r3, [r7, #11]
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d111      	bne.n	800cb00 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2204      	movs	r2, #4
 800cae8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800caf8:	2300      	movs	r3, #0
 800cafa:	2200      	movs	r2, #0
 800cafc:	f001 ffe2 	bl	800eac4 <osMessageQueuePut>
      break;
 800cb00:	bf00      	nop
  }
}
 800cb02:	bf00      	nop
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b086      	sub	sp, #24
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb18:	69db      	ldr	r3, [r3, #28]
 800cb1a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cb26:	2b03      	cmp	r3, #3
 800cb28:	d002      	beq.n	800cb30 <CDC_ProcessReception+0x26>
 800cb2a:	2b04      	cmp	r3, #4
 800cb2c:	d00e      	beq.n	800cb4c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800cb2e:	e051      	b.n	800cbd4 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	6a19      	ldr	r1, [r3, #32]
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	8b5a      	ldrh	r2, [r3, #26]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	7b1b      	ldrb	r3, [r3, #12]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f001 fd45 	bl	800e5cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2204      	movs	r2, #4
 800cb46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cb4a:	e043      	b.n	800cbd4 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	7b1b      	ldrb	r3, [r3, #12]
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f005 f81c 	bl	8011b90 <USBH_LL_GetURBState>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cb5c:	7cfb      	ldrb	r3, [r7, #19]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d137      	bne.n	800cbd2 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	7b1b      	ldrb	r3, [r3, #12]
 800cb66:	4619      	mov	r1, r3
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f004 ff7f 	bl	8011a6c <USBH_LL_GetLastXferSize>
 800cb6e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d016      	beq.n	800cba8 <CDC_ProcessReception+0x9e>
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	8b5b      	ldrh	r3, [r3, #26]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d910      	bls.n	800cba8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	1ad2      	subs	r2, r2, r3
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	6a1a      	ldr	r2, [r3, #32]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	441a      	add	r2, r3
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	2203      	movs	r2, #3
 800cba2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800cba6:	e006      	b.n	800cbb6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 f81d 	bl	800cbf0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2204      	movs	r2, #4
 800cbba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cbca:	2300      	movs	r3, #0
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f001 ff79 	bl	800eac4 <osMessageQueuePut>
      break;
 800cbd2:	bf00      	nop
  }
}
 800cbd4:	bf00      	nop
 800cbd6:	3718      	adds	r7, #24
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	4613      	mov	r3, r2
 800cc24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d101      	bne.n	800cc30 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	e044      	b.n	800ccba <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	79fa      	ldrb	r2, [r7, #7]
 800cc34:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 f841 	bl	800ccd0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d003      	beq.n	800cc7c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	2104      	movs	r1, #4
 800cc80:	2010      	movs	r0, #16
 800cc82:	f001 fe99 	bl	800e9b8 <osMessageQueueNew>
 800cc86:	4602      	mov	r2, r0
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800cc8e:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <USBH_Init+0xac>)
 800cc90:	4a0d      	ldr	r2, [pc, #52]	; (800ccc8 <USBH_Init+0xb0>)
 800cc92:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800cc94:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <USBH_Init+0xac>)
 800cc96:	2280      	movs	r2, #128	; 0x80
 800cc98:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800cc9a:	4b0a      	ldr	r3, [pc, #40]	; (800ccc4 <USBH_Init+0xac>)
 800cc9c:	2218      	movs	r2, #24
 800cc9e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800cca0:	4a08      	ldr	r2, [pc, #32]	; (800ccc4 <USBH_Init+0xac>)
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	4809      	ldr	r0, [pc, #36]	; (800cccc <USBH_Init+0xb4>)
 800cca6:	f001 fdb3 	bl	800e810 <osThreadNew>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f004 fe28 	bl	8011908 <USBH_LL_Init>

  return USBH_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	2000b10c 	.word	0x2000b10c
 800ccc8:	0801306c 	.word	0x0801306c
 800cccc:	0800d939 	.word	0x0800d939

0800ccd0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]
 800cce0:	e009      	b.n	800ccf6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	33e0      	adds	r3, #224	; 0xe0
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	2200      	movs	r2, #0
 800ccee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2b0e      	cmp	r3, #14
 800ccfa:	d9f2      	bls.n	800cce2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	e009      	b.n	800cd16 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	3301      	adds	r3, #1
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd1c:	d3f1      	bcc.n	800cd02 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2240      	movs	r2, #64	; 0x40
 800cd42:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d016      	beq.n	800cdba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10e      	bne.n	800cdb4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cd9c:	1c59      	adds	r1, r3, #1
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	33de      	adds	r3, #222	; 0xde
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	73fb      	strb	r3, [r7, #15]
 800cdb2:	e004      	b.n	800cdbe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	73fb      	strb	r3, [r7, #15]
 800cdb8:	e001      	b.n	800cdbe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cdba:	2302      	movs	r3, #2
 800cdbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800cde2:	78fa      	ldrb	r2, [r7, #3]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d204      	bcs.n	800cdf2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	78fa      	ldrb	r2, [r7, #3]
 800cdec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800cdf0:	e001      	b.n	800cdf6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cdf2:	2302      	movs	r3, #2
 800cdf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b087      	sub	sp, #28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	4608      	mov	r0, r1
 800ce0e:	4611      	mov	r1, r2
 800ce10:	461a      	mov	r2, r3
 800ce12:	4603      	mov	r3, r0
 800ce14:	70fb      	strb	r3, [r7, #3]
 800ce16:	460b      	mov	r3, r1
 800ce18:	70bb      	strb	r3, [r7, #2]
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ce2c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ce2e:	e025      	b.n	800ce7c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ce30:	7dfb      	ldrb	r3, [r7, #23]
 800ce32:	221a      	movs	r2, #26
 800ce34:	fb02 f303 	mul.w	r3, r2, r3
 800ce38:	3308      	adds	r3, #8
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	3302      	adds	r3, #2
 800ce40:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	795b      	ldrb	r3, [r3, #5]
 800ce46:	78fa      	ldrb	r2, [r7, #3]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d002      	beq.n	800ce52 <USBH_FindInterface+0x4e>
 800ce4c:	78fb      	ldrb	r3, [r7, #3]
 800ce4e:	2bff      	cmp	r3, #255	; 0xff
 800ce50:	d111      	bne.n	800ce76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ce56:	78ba      	ldrb	r2, [r7, #2]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d002      	beq.n	800ce62 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ce5c:	78bb      	ldrb	r3, [r7, #2]
 800ce5e:	2bff      	cmp	r3, #255	; 0xff
 800ce60:	d109      	bne.n	800ce76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ce66:	787a      	ldrb	r2, [r7, #1]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d002      	beq.n	800ce72 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ce6c:	787b      	ldrb	r3, [r7, #1]
 800ce6e:	2bff      	cmp	r3, #255	; 0xff
 800ce70:	d101      	bne.n	800ce76 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ce72:	7dfb      	ldrb	r3, [r7, #23]
 800ce74:	e006      	b.n	800ce84 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ce76:	7dfb      	ldrb	r3, [r7, #23]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d9d6      	bls.n	800ce30 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ce82:	23ff      	movs	r3, #255	; 0xff
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	371c      	adds	r7, #28
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f004 fd71 	bl	8011980 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ce9e:	2101      	movs	r1, #1
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f004 fe88 	bl	8011bb6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b088      	sub	sp, #32
 800ceb4:	af04      	add	r7, sp, #16
 800ceb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ceb8:	2302      	movs	r3, #2
 800ceba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d102      	bne.n	800ced2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2203      	movs	r2, #3
 800ced0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	2b0b      	cmp	r3, #11
 800ceda:	f200 823c 	bhi.w	800d356 <USBH_Process+0x4a6>
 800cede:	a201      	add	r2, pc, #4	; (adr r2, 800cee4 <USBH_Process+0x34>)
 800cee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee4:	0800cf15 	.word	0x0800cf15
 800cee8:	0800cf63 	.word	0x0800cf63
 800ceec:	0800cfe7 	.word	0x0800cfe7
 800cef0:	0800d2d5 	.word	0x0800d2d5
 800cef4:	0800d357 	.word	0x0800d357
 800cef8:	0800d0a7 	.word	0x0800d0a7
 800cefc:	0800d25f 	.word	0x0800d25f
 800cf00:	0800d0f9 	.word	0x0800d0f9
 800cf04:	0800d135 	.word	0x0800d135
 800cf08:	0800d16f 	.word	0x0800d16f
 800cf0c:	0800d1b7 	.word	0x0800d1b7
 800cf10:	0800d2bd 	.word	0x0800d2bd
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f000 821c 	beq.w	800d35a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cf28:	20c8      	movs	r0, #200	; 0xc8
 800cf2a:	f004 fe8e 	bl	8011c4a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f004 fd81 	bl	8011a36 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf58:	2300      	movs	r3, #0
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f001 fdb2 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cf60:	e1fb      	b.n	800d35a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d107      	bne.n	800cf7c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	e025      	b.n	800cfc8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cf82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf86:	d914      	bls.n	800cfb2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cf8e:	3301      	adds	r3, #1
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d903      	bls.n	800cfaa <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	220d      	movs	r2, #13
 800cfa6:	701a      	strb	r2, [r3, #0]
 800cfa8:	e00e      	b.n	800cfc8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	701a      	strb	r2, [r3, #0]
 800cfb0:	e00a      	b.n	800cfc8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cfb8:	f103 020a 	add.w	r2, r3, #10
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800cfc2:	200a      	movs	r0, #10
 800cfc4:	f004 fe41 	bl	8011c4a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfdc:	2300      	movs	r3, #0
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f001 fd70 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      break;
 800cfe4:	e1c0      	b.n	800d368 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d005      	beq.n	800cffc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cff6:	2104      	movs	r1, #4
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cffc:	2064      	movs	r0, #100	; 0x64
 800cffe:	f004 fe24 	bl	8011c4a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f004 fcf2 	bl	80119ec <USBH_LL_GetSpeed>
 800d008:	4603      	mov	r3, r0
 800d00a:	461a      	mov	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2205      	movs	r2, #5
 800d016:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d018:	2100      	movs	r1, #0
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f001 fb23 	bl	800e666 <USBH_AllocPipe>
 800d020:	4603      	mov	r3, r0
 800d022:	461a      	mov	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d028:	2180      	movs	r1, #128	; 0x80
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f001 fb1b 	bl	800e666 <USBH_AllocPipe>
 800d030:	4603      	mov	r3, r0
 800d032:	461a      	mov	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	7919      	ldrb	r1, [r3, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d04c:	b292      	uxth	r2, r2
 800d04e:	9202      	str	r2, [sp, #8]
 800d050:	2200      	movs	r2, #0
 800d052:	9201      	str	r2, [sp, #4]
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	4603      	mov	r3, r0
 800d058:	2280      	movs	r2, #128	; 0x80
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f001 fad4 	bl	800e608 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7959      	ldrb	r1, [r3, #5]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d074:	b292      	uxth	r2, r2
 800d076:	9202      	str	r2, [sp, #8]
 800d078:	2200      	movs	r2, #0
 800d07a:	9201      	str	r2, [sp, #4]
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	4603      	mov	r3, r0
 800d080:	2200      	movs	r2, #0
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f001 fac0 	bl	800e608 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d09c:	2300      	movs	r3, #0
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f001 fd10 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      break;
 800d0a4:	e160      	b.n	800d368 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 f964 	bl	800d374 <USBH_HandleEnum>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d0b0:	7bbb      	ldrb	r3, [r7, #14]
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f040 8152 	bne.w	800d35e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d103      	bne.n	800d0d4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2208      	movs	r2, #8
 800d0d0:	701a      	strb	r2, [r3, #0]
 800d0d2:	e002      	b.n	800d0da <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2207      	movs	r2, #7
 800d0d8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2205      	movs	r2, #5
 800d0de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f001 fce7 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d0f6:	e132      	b.n	800d35e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 812f 	beq.w	800d362 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d10a:	2101      	movs	r1, #1
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2208      	movs	r2, #8
 800d114:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2205      	movs	r2, #5
 800d11a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d12a:	2300      	movs	r3, #0
 800d12c:	2200      	movs	r2, #0
 800d12e:	f001 fcc9 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800d132:	e116      	b.n	800d362 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	4619      	mov	r1, r3
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fcf8 	bl	800db34 <USBH_SetCfg>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d102      	bne.n	800d150 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2209      	movs	r2, #9
 800d14e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d164:	2300      	movs	r3, #0
 800d166:	2200      	movs	r2, #0
 800d168:	f001 fcac 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      break;
 800d16c:	e0fc      	b.n	800d368 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d174:	f003 0320 	and.w	r3, r3, #32
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00a      	beq.n	800d192 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d17c:	2101      	movs	r1, #1
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 fcfb 	bl	800db7a <USBH_SetFeature>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d106      	bne.n	800d198 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	220a      	movs	r2, #10
 800d18e:	701a      	strb	r2, [r3, #0]
 800d190:	e002      	b.n	800d198 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	220a      	movs	r2, #10
 800d196:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f001 fc88 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      break;
 800d1b4:	e0d8      	b.n	800d368 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d03f      	beq.n	800d240 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	73fb      	strb	r3, [r7, #15]
 800d1cc:	e016      	b.n	800d1fc <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d1ce:	7bfa      	ldrb	r2, [r7, #15]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	32de      	adds	r2, #222	; 0xde
 800d1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1d8:	791a      	ldrb	r2, [r3, #4]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d108      	bne.n	800d1f6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d1e4:	7bfa      	ldrb	r2, [r7, #15]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	32de      	adds	r2, #222	; 0xde
 800d1ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d1f4:	e005      	b.n	800d202 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	73fb      	strb	r3, [r7, #15]
 800d1fc:	7bfb      	ldrb	r3, [r7, #15]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0e5      	beq.n	800d1ce <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d016      	beq.n	800d23a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	4798      	blx	r3
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d109      	bne.n	800d232 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2206      	movs	r2, #6
 800d222:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d22a:	2103      	movs	r1, #3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	4798      	blx	r3
 800d230:	e006      	b.n	800d240 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	220d      	movs	r2, #13
 800d236:	701a      	strb	r2, [r3, #0]
 800d238:	e002      	b.n	800d240 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	220d      	movs	r2, #13
 800d23e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2205      	movs	r2, #5
 800d244:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d254:	2300      	movs	r3, #0
 800d256:	2200      	movs	r2, #0
 800d258:	f001 fc34 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      break;
 800d25c:	e084      	b.n	800d368 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d264:	2b00      	cmp	r3, #0
 800d266:	d017      	beq.n	800d298 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	4798      	blx	r3
 800d274:	4603      	mov	r3, r0
 800d276:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d278:	7bbb      	ldrb	r3, [r7, #14]
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d103      	bne.n	800d288 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	220b      	movs	r2, #11
 800d284:	701a      	strb	r2, [r3, #0]
 800d286:	e00a      	b.n	800d29e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800d288:	7bbb      	ldrb	r3, [r7, #14]
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d106      	bne.n	800d29e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	220d      	movs	r2, #13
 800d294:	701a      	strb	r2, [r3, #0]
 800d296:	e002      	b.n	800d29e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	220d      	movs	r2, #13
 800d29c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2205      	movs	r2, #5
 800d2a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f001 fc05 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      break;
 800d2ba:	e055      	b.n	800d368 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d04f      	beq.n	800d366 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2cc:	695b      	ldr	r3, [r3, #20]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	4798      	blx	r3
      }
      break;
 800d2d2:	e048      	b.n	800d366 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff fcf7 	bl	800ccd0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d009      	beq.n	800d300 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d306:	2b00      	cmp	r3, #0
 800d308:	d005      	beq.n	800d316 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d310:	2105      	movs	r1, #5
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d107      	bne.n	800d332 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7ff fdb0 	bl	800ce90 <USBH_Start>
 800d330:	e002      	b.n	800d338 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f004 fb24 	bl	8011980 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2201      	movs	r2, #1
 800d33c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d34c:	2300      	movs	r3, #0
 800d34e:	2200      	movs	r2, #0
 800d350:	f001 fbb8 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      break;
 800d354:	e008      	b.n	800d368 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d356:	bf00      	nop
 800d358:	e006      	b.n	800d368 <USBH_Process+0x4b8>
      break;
 800d35a:	bf00      	nop
 800d35c:	e004      	b.n	800d368 <USBH_Process+0x4b8>
      break;
 800d35e:	bf00      	nop
 800d360:	e002      	b.n	800d368 <USBH_Process+0x4b8>
    break;
 800d362:	bf00      	nop
 800d364:	e000      	b.n	800d368 <USBH_Process+0x4b8>
      break;
 800d366:	bf00      	nop
  }
  return USBH_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop

0800d374 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b088      	sub	sp, #32
 800d378:	af04      	add	r7, sp, #16
 800d37a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d37c:	2301      	movs	r3, #1
 800d37e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d380:	2301      	movs	r3, #1
 800d382:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	785b      	ldrb	r3, [r3, #1]
 800d388:	2b07      	cmp	r3, #7
 800d38a:	f200 8208 	bhi.w	800d79e <USBH_HandleEnum+0x42a>
 800d38e:	a201      	add	r2, pc, #4	; (adr r2, 800d394 <USBH_HandleEnum+0x20>)
 800d390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d394:	0800d3b5 	.word	0x0800d3b5
 800d398:	0800d473 	.word	0x0800d473
 800d39c:	0800d4dd 	.word	0x0800d4dd
 800d3a0:	0800d56b 	.word	0x0800d56b
 800d3a4:	0800d5d5 	.word	0x0800d5d5
 800d3a8:	0800d645 	.word	0x0800d645
 800d3ac:	0800d6e1 	.word	0x0800d6e1
 800d3b0:	0800d75f 	.word	0x0800d75f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d3b4:	2108      	movs	r1, #8
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 faec 	bl	800d994 <USBH_Get_DevDesc>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d3c0:	7bbb      	ldrb	r3, [r7, #14]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d130      	bne.n	800d428 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7919      	ldrb	r1, [r3, #4]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d3ea:	b292      	uxth	r2, r2
 800d3ec:	9202      	str	r2, [sp, #8]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	9201      	str	r2, [sp, #4]
 800d3f2:	9300      	str	r3, [sp, #0]
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2280      	movs	r2, #128	; 0x80
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f001 f905 	bl	800e608 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	7959      	ldrb	r1, [r3, #5]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d412:	b292      	uxth	r2, r2
 800d414:	9202      	str	r2, [sp, #8]
 800d416:	2200      	movs	r2, #0
 800d418:	9201      	str	r2, [sp, #4]
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	4603      	mov	r3, r0
 800d41e:	2200      	movs	r2, #0
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f001 f8f1 	bl	800e608 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d426:	e1bc      	b.n	800d7a2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d428:	7bbb      	ldrb	r3, [r7, #14]
 800d42a:	2b03      	cmp	r3, #3
 800d42c:	f040 81b9 	bne.w	800d7a2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d436:	3301      	adds	r3, #1
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d446:	2b03      	cmp	r3, #3
 800d448:	d903      	bls.n	800d452 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	220d      	movs	r2, #13
 800d44e:	701a      	strb	r2, [r3, #0]
      break;
 800d450:	e1a7      	b.n	800d7a2 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	795b      	ldrb	r3, [r3, #5]
 800d456:	4619      	mov	r1, r3
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f001 f925 	bl	800e6a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	791b      	ldrb	r3, [r3, #4]
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f001 f91f 	bl	800e6a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	701a      	strb	r2, [r3, #0]
      break;
 800d470:	e197      	b.n	800d7a2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d472:	2112      	movs	r1, #18
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 fa8d 	bl	800d994 <USBH_Get_DevDesc>
 800d47a:	4603      	mov	r3, r0
 800d47c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d47e:	7bbb      	ldrb	r3, [r7, #14]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d103      	bne.n	800d48c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2202      	movs	r2, #2
 800d488:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d48a:	e18c      	b.n	800d7a6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d48c:	7bbb      	ldrb	r3, [r7, #14]
 800d48e:	2b03      	cmp	r3, #3
 800d490:	f040 8189 	bne.w	800d7a6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d49a:	3301      	adds	r3, #1
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	d903      	bls.n	800d4b6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	220d      	movs	r2, #13
 800d4b2:	701a      	strb	r2, [r3, #0]
      break;
 800d4b4:	e177      	b.n	800d7a6 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	795b      	ldrb	r3, [r3, #5]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f001 f8f3 	bl	800e6a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	791b      	ldrb	r3, [r3, #4]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f001 f8ed 	bl	800e6a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	701a      	strb	r2, [r3, #0]
      break;
 800d4da:	e164      	b.n	800d7a6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d4dc:	2101      	movs	r1, #1
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fb04 	bl	800daec <USBH_SetAddress>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d4e8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d132      	bne.n	800d554 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d4ee:	2002      	movs	r0, #2
 800d4f0:	f004 fbab 	bl	8011c4a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2203      	movs	r2, #3
 800d500:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	7919      	ldrb	r1, [r3, #4]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d516:	b292      	uxth	r2, r2
 800d518:	9202      	str	r2, [sp, #8]
 800d51a:	2200      	movs	r2, #0
 800d51c:	9201      	str	r2, [sp, #4]
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	4603      	mov	r3, r0
 800d522:	2280      	movs	r2, #128	; 0x80
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f001 f86f 	bl	800e608 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	7959      	ldrb	r1, [r3, #5]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d53e:	b292      	uxth	r2, r2
 800d540:	9202      	str	r2, [sp, #8]
 800d542:	2200      	movs	r2, #0
 800d544:	9201      	str	r2, [sp, #4]
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	4603      	mov	r3, r0
 800d54a:	2200      	movs	r2, #0
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f001 f85b 	bl	800e608 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d552:	e12a      	b.n	800d7aa <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d554:	7bbb      	ldrb	r3, [r7, #14]
 800d556:	2b03      	cmp	r3, #3
 800d558:	f040 8127 	bne.w	800d7aa <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	220d      	movs	r2, #13
 800d560:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	705a      	strb	r2, [r3, #1]
      break;
 800d568:	e11f      	b.n	800d7aa <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d56a:	2109      	movs	r1, #9
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 fa39 	bl	800d9e4 <USBH_Get_CfgDesc>
 800d572:	4603      	mov	r3, r0
 800d574:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d576:	7bbb      	ldrb	r3, [r7, #14]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d103      	bne.n	800d584 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2204      	movs	r2, #4
 800d580:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d582:	e114      	b.n	800d7ae <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d584:	7bbb      	ldrb	r3, [r7, #14]
 800d586:	2b03      	cmp	r3, #3
 800d588:	f040 8111 	bne.w	800d7ae <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d592:	3301      	adds	r3, #1
 800d594:	b2da      	uxtb	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d903      	bls.n	800d5ae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	220d      	movs	r2, #13
 800d5aa:	701a      	strb	r2, [r3, #0]
      break;
 800d5ac:	e0ff      	b.n	800d7ae <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	795b      	ldrb	r3, [r3, #5]
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f001 f877 	bl	800e6a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	791b      	ldrb	r3, [r3, #4]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f001 f871 	bl	800e6a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	701a      	strb	r2, [r3, #0]
      break;
 800d5d2:	e0ec      	b.n	800d7ae <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d5da:	4619      	mov	r1, r3
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 fa01 	bl	800d9e4 <USBH_Get_CfgDesc>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d5e6:	7bbb      	ldrb	r3, [r7, #14]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d103      	bne.n	800d5f4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2205      	movs	r2, #5
 800d5f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d5f2:	e0de      	b.n	800d7b2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5f4:	7bbb      	ldrb	r3, [r7, #14]
 800d5f6:	2b03      	cmp	r3, #3
 800d5f8:	f040 80db 	bne.w	800d7b2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d602:	3301      	adds	r3, #1
 800d604:	b2da      	uxtb	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d612:	2b03      	cmp	r3, #3
 800d614:	d903      	bls.n	800d61e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	220d      	movs	r2, #13
 800d61a:	701a      	strb	r2, [r3, #0]
      break;
 800d61c:	e0c9      	b.n	800d7b2 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	795b      	ldrb	r3, [r3, #5]
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f001 f83f 	bl	800e6a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	791b      	ldrb	r3, [r3, #4]
 800d62e:	4619      	mov	r1, r3
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f001 f839 	bl	800e6a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	701a      	strb	r2, [r3, #0]
      break;
 800d642:	e0b6      	b.n	800d7b2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d036      	beq.n	800d6bc <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d65a:	23ff      	movs	r3, #255	; 0xff
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f9e5 	bl	800da2c <USBH_Get_StringDesc>
 800d662:	4603      	mov	r3, r0
 800d664:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d666:	7bbb      	ldrb	r3, [r7, #14]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d111      	bne.n	800d690 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2206      	movs	r2, #6
 800d670:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2205      	movs	r2, #5
 800d676:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d686:	2300      	movs	r3, #0
 800d688:	2200      	movs	r2, #0
 800d68a:	f001 fa1b 	bl	800eac4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d68e:	e092      	b.n	800d7b6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d690:	7bbb      	ldrb	r3, [r7, #14]
 800d692:	2b03      	cmp	r3, #3
 800d694:	f040 808f 	bne.w	800d7b6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2206      	movs	r2, #6
 800d69c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2205      	movs	r2, #5
 800d6a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f001 fa05 	bl	800eac4 <osMessageQueuePut>
      break;
 800d6ba:	e07c      	b.n	800d7b6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2206      	movs	r2, #6
 800d6c0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2205      	movs	r2, #5
 800d6c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f001 f9f3 	bl	800eac4 <osMessageQueuePut>
      break;
 800d6de:	e06a      	b.n	800d7b6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d027      	beq.n	800d73a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d6f6:	23ff      	movs	r3, #255	; 0xff
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f997 	bl	800da2c <USBH_Get_StringDesc>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d103      	bne.n	800d710 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2207      	movs	r2, #7
 800d70c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d70e:	e054      	b.n	800d7ba <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	2b03      	cmp	r3, #3
 800d714:	d151      	bne.n	800d7ba <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2207      	movs	r2, #7
 800d71a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2205      	movs	r2, #5
 800d720:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d730:	2300      	movs	r3, #0
 800d732:	2200      	movs	r2, #0
 800d734:	f001 f9c6 	bl	800eac4 <osMessageQueuePut>
      break;
 800d738:	e03f      	b.n	800d7ba <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2207      	movs	r2, #7
 800d73e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2205      	movs	r2, #5
 800d744:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d754:	2300      	movs	r3, #0
 800d756:	2200      	movs	r2, #0
 800d758:	f001 f9b4 	bl	800eac4 <osMessageQueuePut>
      break;
 800d75c:	e02d      	b.n	800d7ba <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d764:	2b00      	cmp	r3, #0
 800d766:	d017      	beq.n	800d798 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d774:	23ff      	movs	r3, #255	; 0xff
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f958 	bl	800da2c <USBH_Get_StringDesc>
 800d77c:	4603      	mov	r3, r0
 800d77e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d780:	7bbb      	ldrb	r3, [r7, #14]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d102      	bne.n	800d78c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d786:	2300      	movs	r3, #0
 800d788:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d78a:	e018      	b.n	800d7be <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d78c:	7bbb      	ldrb	r3, [r7, #14]
 800d78e:	2b03      	cmp	r3, #3
 800d790:	d115      	bne.n	800d7be <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d792:	2300      	movs	r3, #0
 800d794:	73fb      	strb	r3, [r7, #15]
      break;
 800d796:	e012      	b.n	800d7be <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	73fb      	strb	r3, [r7, #15]
      break;
 800d79c:	e00f      	b.n	800d7be <USBH_HandleEnum+0x44a>

    default:
      break;
 800d79e:	bf00      	nop
 800d7a0:	e00e      	b.n	800d7c0 <USBH_HandleEnum+0x44c>
      break;
 800d7a2:	bf00      	nop
 800d7a4:	e00c      	b.n	800d7c0 <USBH_HandleEnum+0x44c>
      break;
 800d7a6:	bf00      	nop
 800d7a8:	e00a      	b.n	800d7c0 <USBH_HandleEnum+0x44c>
      break;
 800d7aa:	bf00      	nop
 800d7ac:	e008      	b.n	800d7c0 <USBH_HandleEnum+0x44c>
      break;
 800d7ae:	bf00      	nop
 800d7b0:	e006      	b.n	800d7c0 <USBH_HandleEnum+0x44c>
      break;
 800d7b2:	bf00      	nop
 800d7b4:	e004      	b.n	800d7c0 <USBH_HandleEnum+0x44c>
      break;
 800d7b6:	bf00      	nop
 800d7b8:	e002      	b.n	800d7c0 <USBH_HandleEnum+0x44c>
      break;
 800d7ba:	bf00      	nop
 800d7bc:	e000      	b.n	800d7c0 <USBH_HandleEnum+0x44c>
      break;
 800d7be:	bf00      	nop
  }
  return Status;
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop

0800d7cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d7de:	bf00      	nop
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b082      	sub	sp, #8
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f804 	bl	800d80e <USBH_HandleSof>
}
 800d806:	bf00      	nop
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b082      	sub	sp, #8
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b0b      	cmp	r3, #11
 800d81e:	d10a      	bne.n	800d836 <USBH_HandleSof+0x28>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d005      	beq.n	800d836 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	4798      	blx	r3
  }
}
 800d836:	bf00      	nop
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d862:	2300      	movs	r3, #0
 800d864:	2200      	movs	r2, #0
 800d866:	f001 f92d 	bl	800eac4 <osMessageQueuePut>
#endif
#endif

  return;
 800d86a:	bf00      	nop
}
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d872:	b480      	push	{r7}
 800d874:	b083      	sub	sp, #12
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d882:	bf00      	nop
}
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b082      	sub	sp, #8
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f001 f8fd 	bl	800eac4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f004 f85e 	bl	80119b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	791b      	ldrb	r3, [r3, #4]
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fed1 	bl	800e6a8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	795b      	ldrb	r3, [r3, #5]
 800d90a:	4619      	mov	r1, r3
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fecb 	bl	800e6a8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d926:	2300      	movs	r3, #0
 800d928:	2200      	movs	r2, #0
 800d92a:	f001 f8cb 	bl	800eac4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d94c:	f04f 33ff 	mov.w	r3, #4294967295
 800d950:	2200      	movs	r2, #0
 800d952:	f001 f92b 	bl	800ebac <osMessageQueueGet>
 800d956:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1f0      	bne.n	800d940 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7ff faa6 	bl	800ceb0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d964:	e7ec      	b.n	800d940 <USBH_Process_OS+0x8>

0800d966 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b082      	sub	sp, #8
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d982:	2300      	movs	r3, #0
 800d984:	2200      	movs	r2, #0
 800d986:	f001 f89d 	bl	800eac4 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af02      	add	r7, sp, #8
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d9a6:	78fb      	ldrb	r3, [r7, #3]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 f864 	bl	800da82 <USBH_GetDescriptor>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	73fb      	strb	r3, [r7, #15]
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10a      	bne.n	800d9da <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d9d0:	78fa      	ldrb	r2, [r7, #3]
 800d9d2:	b292      	uxth	r2, r2
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	f000 f918 	bl	800dc0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3710      	adds	r7, #16
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af02      	add	r7, sp, #8
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	331c      	adds	r3, #28
 800d9f4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d9f6:	887b      	ldrh	r3, [r7, #2]
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da00:	2100      	movs	r1, #0
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f83d 	bl	800da82 <USBH_GetDescriptor>
 800da08:	4603      	mov	r3, r0
 800da0a:	72fb      	strb	r3, [r7, #11]
 800da0c:	7afb      	ldrb	r3, [r7, #11]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d107      	bne.n	800da22 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800da18:	887a      	ldrh	r2, [r7, #2]
 800da1a:	68f9      	ldr	r1, [r7, #12]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 f964 	bl	800dcea <USBH_ParseCfgDesc>
  }

  return status;
 800da22:	7afb      	ldrb	r3, [r7, #11]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b088      	sub	sp, #32
 800da30:	af02      	add	r7, sp, #8
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	607a      	str	r2, [r7, #4]
 800da36:	461a      	mov	r2, r3
 800da38:	460b      	mov	r3, r1
 800da3a:	72fb      	strb	r3, [r7, #11]
 800da3c:	4613      	mov	r3, r2
 800da3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800da40:	7afb      	ldrb	r3, [r7, #11]
 800da42:	b29b      	uxth	r3, r3
 800da44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800da48:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800da50:	893b      	ldrh	r3, [r7, #8]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	460b      	mov	r3, r1
 800da56:	2100      	movs	r1, #0
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f000 f812 	bl	800da82 <USBH_GetDescriptor>
 800da5e:	4603      	mov	r3, r0
 800da60:	75fb      	strb	r3, [r7, #23]
 800da62:	7dfb      	ldrb	r3, [r7, #23]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d107      	bne.n	800da78 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800da6e:	893a      	ldrh	r2, [r7, #8]
 800da70:	6879      	ldr	r1, [r7, #4]
 800da72:	4618      	mov	r0, r3
 800da74:	f000 fa37 	bl	800dee6 <USBH_ParseStringDesc>
  }

  return status;
 800da78:	7dfb      	ldrb	r3, [r7, #23]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3718      	adds	r7, #24
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b084      	sub	sp, #16
 800da86:	af00      	add	r7, sp, #0
 800da88:	60f8      	str	r0, [r7, #12]
 800da8a:	607b      	str	r3, [r7, #4]
 800da8c:	460b      	mov	r3, r1
 800da8e:	72fb      	strb	r3, [r7, #11]
 800da90:	4613      	mov	r3, r2
 800da92:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	789b      	ldrb	r3, [r3, #2]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d11c      	bne.n	800dad6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800da9c:	7afb      	ldrb	r3, [r7, #11]
 800da9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2206      	movs	r2, #6
 800daac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	893a      	ldrh	r2, [r7, #8]
 800dab2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dab4:	893b      	ldrh	r3, [r7, #8]
 800dab6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800daba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dabe:	d104      	bne.n	800daca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f240 4209 	movw	r2, #1033	; 0x409
 800dac6:	829a      	strh	r2, [r3, #20]
 800dac8:	e002      	b.n	800dad0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2200      	movs	r2, #0
 800dace:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	8b3a      	ldrh	r2, [r7, #24]
 800dad4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dad6:	8b3b      	ldrh	r3, [r7, #24]
 800dad8:	461a      	mov	r2, r3
 800dada:	6879      	ldr	r1, [r7, #4]
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f000 fa50 	bl	800df82 <USBH_CtlReq>
 800dae2:	4603      	mov	r3, r0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	789b      	ldrb	r3, [r3, #2]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d10f      	bne.n	800db20 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2205      	movs	r2, #5
 800db0a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800db0c:	78fb      	ldrb	r3, [r7, #3]
 800db0e:	b29a      	uxth	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800db20:	2200      	movs	r2, #0
 800db22:	2100      	movs	r1, #0
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 fa2c 	bl	800df82 <USBH_CtlReq>
 800db2a:	4603      	mov	r3, r0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	789b      	ldrb	r3, [r3, #2]
 800db44:	2b01      	cmp	r3, #1
 800db46:	d10e      	bne.n	800db66 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2209      	movs	r2, #9
 800db52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	887a      	ldrh	r2, [r7, #2]
 800db58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800db66:	2200      	movs	r2, #0
 800db68:	2100      	movs	r1, #0
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fa09 	bl	800df82 <USBH_CtlReq>
 800db70:	4603      	mov	r3, r0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b082      	sub	sp, #8
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	460b      	mov	r3, r1
 800db84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	789b      	ldrb	r3, [r3, #2]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d10f      	bne.n	800dbae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2203      	movs	r2, #3
 800db98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800db9a:	78fb      	ldrb	r3, [r7, #3]
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dbae:	2200      	movs	r2, #0
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 f9e5 	bl	800df82 <USBH_CtlReq>
 800dbb8:	4603      	mov	r3, r0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
 800dbca:	460b      	mov	r3, r1
 800dbcc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	789b      	ldrb	r3, [r3, #2]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d10f      	bne.n	800dbf6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2202      	movs	r2, #2
 800dbda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2201      	movs	r2, #1
 800dbe0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dbe8:	78fb      	ldrb	r3, [r7, #3]
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f9c1 	bl	800df82 <USBH_CtlReq>
 800dc00:	4603      	mov	r3, r0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b085      	sub	sp, #20
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	60f8      	str	r0, [r7, #12]
 800dc12:	60b9      	str	r1, [r7, #8]
 800dc14:	4613      	mov	r3, r2
 800dc16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	781a      	ldrb	r2, [r3, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	785a      	ldrb	r2, [r3, #1]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	3302      	adds	r3, #2
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	3303      	adds	r3, #3
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	021b      	lsls	r3, r3, #8
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	791a      	ldrb	r2, [r3, #4]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	795a      	ldrb	r2, [r3, #5]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	799a      	ldrb	r2, [r3, #6]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	79da      	ldrb	r2, [r3, #7]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800dc64:	88fb      	ldrh	r3, [r7, #6]
 800dc66:	2b08      	cmp	r3, #8
 800dc68:	d939      	bls.n	800dcde <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	3308      	adds	r3, #8
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	3309      	adds	r3, #9
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	021b      	lsls	r3, r3, #8
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	330a      	adds	r3, #10
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	330b      	adds	r3, #11
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	021b      	lsls	r3, r3, #8
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	330c      	adds	r3, #12
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	330d      	adds	r3, #13
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	021b      	lsls	r3, r3, #8
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	7b9a      	ldrb	r2, [r3, #14]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	7bda      	ldrb	r2, [r3, #15]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	7c1a      	ldrb	r2, [r3, #16]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	7c5a      	ldrb	r2, [r3, #17]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	745a      	strb	r2, [r3, #17]
  }
}
 800dcde:	bf00      	nop
 800dce0:	3714      	adds	r7, #20
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b08a      	sub	sp, #40	; 0x28
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	60b9      	str	r1, [r7, #8]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800dd02:	2300      	movs	r3, #0
 800dd04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	781a      	ldrb	r2, [r3, #0]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	785a      	ldrb	r2, [r3, #1]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	3302      	adds	r3, #2
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	3303      	adds	r3, #3
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	021b      	lsls	r3, r3, #8
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	4313      	orrs	r3, r2
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	791a      	ldrb	r2, [r3, #4]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	795a      	ldrb	r2, [r3, #5]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	799a      	ldrb	r2, [r3, #6]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	79da      	ldrb	r2, [r3, #7]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	7a1a      	ldrb	r2, [r3, #8]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800dd60:	88fb      	ldrh	r3, [r7, #6]
 800dd62:	2b09      	cmp	r3, #9
 800dd64:	d95f      	bls.n	800de26 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800dd66:	2309      	movs	r3, #9
 800dd68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dd6e:	e051      	b.n	800de14 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dd70:	f107 0316 	add.w	r3, r7, #22
 800dd74:	4619      	mov	r1, r3
 800dd76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd78:	f000 f8e8 	bl	800df4c <USBH_GetNextDesc>
 800dd7c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800dd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd80:	785b      	ldrb	r3, [r3, #1]
 800dd82:	2b04      	cmp	r3, #4
 800dd84:	d146      	bne.n	800de14 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800dd86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd8a:	221a      	movs	r2, #26
 800dd8c:	fb02 f303 	mul.w	r3, r2, r3
 800dd90:	3308      	adds	r3, #8
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	4413      	add	r3, r2
 800dd96:	3302      	adds	r3, #2
 800dd98:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800dd9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd9c:	69f8      	ldr	r0, [r7, #28]
 800dd9e:	f000 f846 	bl	800de2e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800dda2:	2300      	movs	r3, #0
 800dda4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ddac:	e022      	b.n	800ddf4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ddae:	f107 0316 	add.w	r3, r7, #22
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddb6:	f000 f8c9 	bl	800df4c <USBH_GetNextDesc>
 800ddba:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbe:	785b      	ldrb	r3, [r3, #1]
 800ddc0:	2b05      	cmp	r3, #5
 800ddc2:	d117      	bne.n	800ddf4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ddc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ddc8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ddcc:	3201      	adds	r2, #1
 800ddce:	00d2      	lsls	r2, r2, #3
 800ddd0:	211a      	movs	r1, #26
 800ddd2:	fb01 f303 	mul.w	r3, r1, r3
 800ddd6:	4413      	add	r3, r2
 800ddd8:	3308      	adds	r3, #8
 800ddda:	68fa      	ldr	r2, [r7, #12]
 800dddc:	4413      	add	r3, r2
 800ddde:	3304      	adds	r3, #4
 800dde0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800dde2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dde4:	69b8      	ldr	r0, [r7, #24]
 800dde6:	f000 f851 	bl	800de8c <USBH_ParseEPDesc>
            ep_ix++;
 800ddea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ddee:	3301      	adds	r3, #1
 800ddf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	791b      	ldrb	r3, [r3, #4]
 800ddf8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d204      	bcs.n	800de0a <USBH_ParseCfgDesc+0x120>
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	885a      	ldrh	r2, [r3, #2]
 800de04:	8afb      	ldrh	r3, [r7, #22]
 800de06:	429a      	cmp	r2, r3
 800de08:	d8d1      	bhi.n	800ddae <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800de0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de0e:	3301      	adds	r3, #1
 800de10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800de14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d804      	bhi.n	800de26 <USBH_ParseCfgDesc+0x13c>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	885a      	ldrh	r2, [r3, #2]
 800de20:	8afb      	ldrh	r3, [r7, #22]
 800de22:	429a      	cmp	r2, r3
 800de24:	d8a4      	bhi.n	800dd70 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800de26:	bf00      	nop
 800de28:	3728      	adds	r7, #40	; 0x28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800de2e:	b480      	push	{r7}
 800de30:	b083      	sub	sp, #12
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
 800de36:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	781a      	ldrb	r2, [r3, #0]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	785a      	ldrb	r2, [r3, #1]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	789a      	ldrb	r2, [r3, #2]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	78da      	ldrb	r2, [r3, #3]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	791a      	ldrb	r2, [r3, #4]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	795a      	ldrb	r2, [r3, #5]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	799a      	ldrb	r2, [r3, #6]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	79da      	ldrb	r2, [r3, #7]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	7a1a      	ldrb	r2, [r3, #8]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	721a      	strb	r2, [r3, #8]
}
 800de80:	bf00      	nop
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	781a      	ldrb	r2, [r3, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	785a      	ldrb	r2, [r3, #1]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	789a      	ldrb	r2, [r3, #2]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	78da      	ldrb	r2, [r3, #3]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	3304      	adds	r3, #4
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	b29a      	uxth	r2, r3
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	3305      	adds	r3, #5
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	021b      	lsls	r3, r3, #8
 800dec8:	b29b      	uxth	r3, r3
 800deca:	4313      	orrs	r3, r2
 800decc:	b29a      	uxth	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	799a      	ldrb	r2, [r3, #6]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	719a      	strb	r2, [r3, #6]
}
 800deda:	bf00      	nop
 800dedc:	370c      	adds	r7, #12
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dee6:	b480      	push	{r7}
 800dee8:	b087      	sub	sp, #28
 800deea:	af00      	add	r7, sp, #0
 800deec:	60f8      	str	r0, [r7, #12]
 800deee:	60b9      	str	r1, [r7, #8]
 800def0:	4613      	mov	r3, r2
 800def2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3301      	adds	r3, #1
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	2b03      	cmp	r3, #3
 800defc:	d120      	bne.n	800df40 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	1e9a      	subs	r2, r3, #2
 800df04:	88fb      	ldrh	r3, [r7, #6]
 800df06:	4293      	cmp	r3, r2
 800df08:	bf28      	it	cs
 800df0a:	4613      	movcs	r3, r2
 800df0c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3302      	adds	r3, #2
 800df12:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800df14:	2300      	movs	r3, #0
 800df16:	82fb      	strh	r3, [r7, #22]
 800df18:	e00b      	b.n	800df32 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800df1a:	8afb      	ldrh	r3, [r7, #22]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	4413      	add	r3, r2
 800df20:	781a      	ldrb	r2, [r3, #0]
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	701a      	strb	r2, [r3, #0]
      pdest++;
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	3301      	adds	r3, #1
 800df2a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800df2c:	8afb      	ldrh	r3, [r7, #22]
 800df2e:	3302      	adds	r3, #2
 800df30:	82fb      	strh	r3, [r7, #22]
 800df32:	8afa      	ldrh	r2, [r7, #22]
 800df34:	8abb      	ldrh	r3, [r7, #20]
 800df36:	429a      	cmp	r2, r3
 800df38:	d3ef      	bcc.n	800df1a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	2200      	movs	r2, #0
 800df3e:	701a      	strb	r2, [r3, #0]
  }
}
 800df40:	bf00      	nop
 800df42:	371c      	adds	r7, #28
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	881a      	ldrh	r2, [r3, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	b29b      	uxth	r3, r3
 800df60:	4413      	add	r3, r2
 800df62:	b29a      	uxth	r2, r3
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4413      	add	r3, r2
 800df72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800df74:	68fb      	ldr	r3, [r7, #12]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b086      	sub	sp, #24
 800df86:	af00      	add	r7, sp, #0
 800df88:	60f8      	str	r0, [r7, #12]
 800df8a:	60b9      	str	r1, [r7, #8]
 800df8c:	4613      	mov	r3, r2
 800df8e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800df90:	2301      	movs	r3, #1
 800df92:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	789b      	ldrb	r3, [r3, #2]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d002      	beq.n	800dfa2 <USBH_CtlReq+0x20>
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d01d      	beq.n	800dfdc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800dfa0:	e043      	b.n	800e02a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	88fa      	ldrh	r2, [r7, #6]
 800dfac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2202      	movs	r2, #2
 800dfb8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2203      	movs	r2, #3
 800dfc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	f000 fd75 	bl	800eac4 <osMessageQueuePut>
      break;
 800dfda:	e026      	b.n	800e02a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f000 f829 	bl	800e034 <USBH_HandleControl>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dfe6:	7dfb      	ldrb	r3, [r7, #23]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <USBH_CtlReq+0x70>
 800dfec:	7dfb      	ldrb	r3, [r7, #23]
 800dfee:	2b03      	cmp	r3, #3
 800dff0:	d106      	bne.n	800e000 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2201      	movs	r2, #1
 800dff6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2200      	movs	r2, #0
 800dffc:	761a      	strb	r2, [r3, #24]
 800dffe:	e005      	b.n	800e00c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800e000:	7dfb      	ldrb	r3, [r7, #23]
 800e002:	2b02      	cmp	r3, #2
 800e004:	d102      	bne.n	800e00c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2201      	movs	r2, #1
 800e00a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2203      	movs	r2, #3
 800e010:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e020:	2300      	movs	r3, #0
 800e022:	2200      	movs	r2, #0
 800e024:	f000 fd4e 	bl	800eac4 <osMessageQueuePut>
      break;
 800e028:	bf00      	nop
  }
  return status;
 800e02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3718      	adds	r7, #24
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af02      	add	r7, sp, #8
 800e03a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e03c:	2301      	movs	r3, #1
 800e03e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e040:	2300      	movs	r3, #0
 800e042:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	7e1b      	ldrb	r3, [r3, #24]
 800e048:	3b01      	subs	r3, #1
 800e04a:	2b0a      	cmp	r3, #10
 800e04c:	f200 822b 	bhi.w	800e4a6 <USBH_HandleControl+0x472>
 800e050:	a201      	add	r2, pc, #4	; (adr r2, 800e058 <USBH_HandleControl+0x24>)
 800e052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e056:	bf00      	nop
 800e058:	0800e085 	.word	0x0800e085
 800e05c:	0800e09f 	.word	0x0800e09f
 800e060:	0800e141 	.word	0x0800e141
 800e064:	0800e167 	.word	0x0800e167
 800e068:	0800e1f3 	.word	0x0800e1f3
 800e06c:	0800e21f 	.word	0x0800e21f
 800e070:	0800e2e1 	.word	0x0800e2e1
 800e074:	0800e303 	.word	0x0800e303
 800e078:	0800e395 	.word	0x0800e395
 800e07c:	0800e3bd 	.word	0x0800e3bd
 800e080:	0800e44f 	.word	0x0800e44f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f103 0110 	add.w	r1, r3, #16
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	795b      	ldrb	r3, [r3, #5]
 800e08e:	461a      	mov	r2, r3
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fa19 	bl	800e4c8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2202      	movs	r2, #2
 800e09a:	761a      	strb	r2, [r3, #24]
      break;
 800e09c:	e20e      	b.n	800e4bc <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	795b      	ldrb	r3, [r3, #5]
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f003 fd73 	bl	8011b90 <USBH_LL_GetURBState>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e0ae:	7bbb      	ldrb	r3, [r7, #14]
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d12c      	bne.n	800e10e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	7c1b      	ldrb	r3, [r3, #16]
 800e0b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e0bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	8adb      	ldrh	r3, [r3, #22]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00a      	beq.n	800e0dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e0c6:	7b7b      	ldrb	r3, [r7, #13]
 800e0c8:	2b80      	cmp	r3, #128	; 0x80
 800e0ca:	d103      	bne.n	800e0d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2203      	movs	r2, #3
 800e0d0:	761a      	strb	r2, [r3, #24]
 800e0d2:	e00d      	b.n	800e0f0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2205      	movs	r2, #5
 800e0d8:	761a      	strb	r2, [r3, #24]
 800e0da:	e009      	b.n	800e0f0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800e0dc:	7b7b      	ldrb	r3, [r7, #13]
 800e0de:	2b80      	cmp	r3, #128	; 0x80
 800e0e0:	d103      	bne.n	800e0ea <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2209      	movs	r2, #9
 800e0e6:	761a      	strb	r2, [r3, #24]
 800e0e8:	e002      	b.n	800e0f0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2207      	movs	r2, #7
 800e0ee:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2203      	movs	r2, #3
 800e0f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e104:	2300      	movs	r3, #0
 800e106:	2200      	movs	r2, #0
 800e108:	f000 fcdc 	bl	800eac4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e10c:	e1cd      	b.n	800e4aa <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e10e:	7bbb      	ldrb	r3, [r7, #14]
 800e110:	2b04      	cmp	r3, #4
 800e112:	d003      	beq.n	800e11c <USBH_HandleControl+0xe8>
 800e114:	7bbb      	ldrb	r3, [r7, #14]
 800e116:	2b02      	cmp	r3, #2
 800e118:	f040 81c7 	bne.w	800e4aa <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	220b      	movs	r2, #11
 800e120:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2203      	movs	r2, #3
 800e126:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e136:	2300      	movs	r3, #0
 800e138:	2200      	movs	r2, #0
 800e13a:	f000 fcc3 	bl	800eac4 <osMessageQueuePut>
      break;
 800e13e:	e1b4      	b.n	800e4aa <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e146:	b29a      	uxth	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6899      	ldr	r1, [r3, #8]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	899a      	ldrh	r2, [r3, #12]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	791b      	ldrb	r3, [r3, #4]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 f9f4 	bl	800e546 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2204      	movs	r2, #4
 800e162:	761a      	strb	r2, [r3, #24]
      break;
 800e164:	e1aa      	b.n	800e4bc <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	791b      	ldrb	r3, [r3, #4]
 800e16a:	4619      	mov	r1, r3
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f003 fd0f 	bl	8011b90 <USBH_LL_GetURBState>
 800e172:	4603      	mov	r3, r0
 800e174:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e176:	7bbb      	ldrb	r3, [r7, #14]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d110      	bne.n	800e19e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2209      	movs	r2, #9
 800e180:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2203      	movs	r2, #3
 800e186:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e196:	2300      	movs	r3, #0
 800e198:	2200      	movs	r2, #0
 800e19a:	f000 fc93 	bl	800eac4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
 800e1a0:	2b05      	cmp	r3, #5
 800e1a2:	d110      	bne.n	800e1c6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e1a4:	2303      	movs	r3, #3
 800e1a6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2203      	movs	r2, #3
 800e1ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1bc:	2300      	movs	r3, #0
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f000 fc80 	bl	800eac4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e1c4:	e173      	b.n	800e4ae <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e1c6:	7bbb      	ldrb	r3, [r7, #14]
 800e1c8:	2b04      	cmp	r3, #4
 800e1ca:	f040 8170 	bne.w	800e4ae <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	220b      	movs	r2, #11
 800e1d2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2203      	movs	r2, #3
 800e1d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f000 fc6a 	bl	800eac4 <osMessageQueuePut>
      break;
 800e1f0:	e15d      	b.n	800e4ae <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6899      	ldr	r1, [r3, #8]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	899a      	ldrh	r2, [r3, #12]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	7958      	ldrb	r0, [r3, #5]
 800e1fe:	2301      	movs	r3, #1
 800e200:	9300      	str	r3, [sp, #0]
 800e202:	4603      	mov	r3, r0
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 f979 	bl	800e4fc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e210:	b29a      	uxth	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2206      	movs	r2, #6
 800e21a:	761a      	strb	r2, [r3, #24]
      break;
 800e21c:	e14e      	b.n	800e4bc <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	795b      	ldrb	r3, [r3, #5]
 800e222:	4619      	mov	r1, r3
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f003 fcb3 	bl	8011b90 <USBH_LL_GetURBState>
 800e22a:	4603      	mov	r3, r0
 800e22c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e22e:	7bbb      	ldrb	r3, [r7, #14]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d111      	bne.n	800e258 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2207      	movs	r2, #7
 800e238:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2203      	movs	r2, #3
 800e23e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e24e:	2300      	movs	r3, #0
 800e250:	2200      	movs	r2, #0
 800e252:	f000 fc37 	bl	800eac4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e256:	e12c      	b.n	800e4b2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800e258:	7bbb      	ldrb	r3, [r7, #14]
 800e25a:	2b05      	cmp	r3, #5
 800e25c:	d113      	bne.n	800e286 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	220c      	movs	r2, #12
 800e262:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e264:	2303      	movs	r3, #3
 800e266:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2203      	movs	r2, #3
 800e26c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e27c:	2300      	movs	r3, #0
 800e27e:	2200      	movs	r2, #0
 800e280:	f000 fc20 	bl	800eac4 <osMessageQueuePut>
      break;
 800e284:	e115      	b.n	800e4b2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e286:	7bbb      	ldrb	r3, [r7, #14]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d111      	bne.n	800e2b0 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2205      	movs	r2, #5
 800e290:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2203      	movs	r2, #3
 800e296:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f000 fc0b 	bl	800eac4 <osMessageQueuePut>
      break;
 800e2ae:	e100      	b.n	800e4b2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
 800e2b2:	2b04      	cmp	r3, #4
 800e2b4:	f040 80fd 	bne.w	800e4b2 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	220b      	movs	r2, #11
 800e2bc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e2be:	2302      	movs	r3, #2
 800e2c0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2203      	movs	r2, #3
 800e2c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f000 fbf3 	bl	800eac4 <osMessageQueuePut>
      break;
 800e2de:	e0e8      	b.n	800e4b2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	791b      	ldrb	r3, [r3, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 f92c 	bl	800e546 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e2f4:	b29a      	uxth	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2208      	movs	r2, #8
 800e2fe:	761a      	strb	r2, [r3, #24]

      break;
 800e300:	e0dc      	b.n	800e4bc <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	791b      	ldrb	r3, [r3, #4]
 800e306:	4619      	mov	r1, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f003 fc41 	bl	8011b90 <USBH_LL_GetURBState>
 800e30e:	4603      	mov	r3, r0
 800e310:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d113      	bne.n	800e340 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	220d      	movs	r2, #13
 800e31c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2203      	movs	r2, #3
 800e326:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e336:	2300      	movs	r3, #0
 800e338:	2200      	movs	r2, #0
 800e33a:	f000 fbc3 	bl	800eac4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e33e:	e0ba      	b.n	800e4b6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800e340:	7bbb      	ldrb	r3, [r7, #14]
 800e342:	2b04      	cmp	r3, #4
 800e344:	d111      	bne.n	800e36a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	220b      	movs	r2, #11
 800e34a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2203      	movs	r2, #3
 800e350:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e360:	2300      	movs	r3, #0
 800e362:	2200      	movs	r2, #0
 800e364:	f000 fbae 	bl	800eac4 <osMessageQueuePut>
      break;
 800e368:	e0a5      	b.n	800e4b6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800e36a:	7bbb      	ldrb	r3, [r7, #14]
 800e36c:	2b05      	cmp	r3, #5
 800e36e:	f040 80a2 	bne.w	800e4b6 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800e372:	2303      	movs	r3, #3
 800e374:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2203      	movs	r2, #3
 800e37a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e38a:	2300      	movs	r3, #0
 800e38c:	2200      	movs	r2, #0
 800e38e:	f000 fb99 	bl	800eac4 <osMessageQueuePut>
      break;
 800e392:	e090      	b.n	800e4b6 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	795a      	ldrb	r2, [r3, #5]
 800e398:	2301      	movs	r3, #1
 800e39a:	9300      	str	r3, [sp, #0]
 800e39c:	4613      	mov	r3, r2
 800e39e:	2200      	movs	r2, #0
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f8aa 	bl	800e4fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	220a      	movs	r2, #10
 800e3b8:	761a      	strb	r2, [r3, #24]
      break;
 800e3ba:	e07f      	b.n	800e4bc <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	795b      	ldrb	r3, [r3, #5]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f003 fbe4 	bl	8011b90 <USBH_LL_GetURBState>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e3cc:	7bbb      	ldrb	r3, [r7, #14]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d113      	bne.n	800e3fa <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	220d      	movs	r2, #13
 800e3da:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2203      	movs	r2, #3
 800e3e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f000 fb66 	bl	800eac4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e3f8:	e05f      	b.n	800e4ba <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e3fa:	7bbb      	ldrb	r3, [r7, #14]
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d111      	bne.n	800e424 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2209      	movs	r2, #9
 800e404:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2203      	movs	r2, #3
 800e40a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e41a:	2300      	movs	r3, #0
 800e41c:	2200      	movs	r2, #0
 800e41e:	f000 fb51 	bl	800eac4 <osMessageQueuePut>
      break;
 800e422:	e04a      	b.n	800e4ba <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800e424:	7bbb      	ldrb	r3, [r7, #14]
 800e426:	2b04      	cmp	r3, #4
 800e428:	d147      	bne.n	800e4ba <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	220b      	movs	r2, #11
 800e42e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2203      	movs	r2, #3
 800e434:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e444:	2300      	movs	r3, #0
 800e446:	2200      	movs	r2, #0
 800e448:	f000 fb3c 	bl	800eac4 <osMessageQueuePut>
      break;
 800e44c:	e035      	b.n	800e4ba <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	7e5b      	ldrb	r3, [r3, #25]
 800e452:	3301      	adds	r3, #1
 800e454:	b2da      	uxtb	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	765a      	strb	r2, [r3, #25]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	7e5b      	ldrb	r3, [r3, #25]
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d806      	bhi.n	800e470 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2201      	movs	r2, #1
 800e466:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2201      	movs	r2, #1
 800e46c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e46e:	e025      	b.n	800e4bc <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e476:	2106      	movs	r1, #6
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	795b      	ldrb	r3, [r3, #5]
 800e486:	4619      	mov	r1, r3
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 f90d 	bl	800e6a8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	791b      	ldrb	r3, [r3, #4]
 800e492:	4619      	mov	r1, r3
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f907 	bl	800e6a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e4a0:	2302      	movs	r3, #2
 800e4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e4a4:	e00a      	b.n	800e4bc <USBH_HandleControl+0x488>

    default:
      break;
 800e4a6:	bf00      	nop
 800e4a8:	e008      	b.n	800e4bc <USBH_HandleControl+0x488>
      break;
 800e4aa:	bf00      	nop
 800e4ac:	e006      	b.n	800e4bc <USBH_HandleControl+0x488>
      break;
 800e4ae:	bf00      	nop
 800e4b0:	e004      	b.n	800e4bc <USBH_HandleControl+0x488>
      break;
 800e4b2:	bf00      	nop
 800e4b4:	e002      	b.n	800e4bc <USBH_HandleControl+0x488>
      break;
 800e4b6:	bf00      	nop
 800e4b8:	e000      	b.n	800e4bc <USBH_HandleControl+0x488>
      break;
 800e4ba:	bf00      	nop
  }

  return status;
 800e4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop

0800e4c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af04      	add	r7, sp, #16
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e4d6:	79f9      	ldrb	r1, [r7, #7]
 800e4d8:	2300      	movs	r3, #0
 800e4da:	9303      	str	r3, [sp, #12]
 800e4dc:	2308      	movs	r3, #8
 800e4de:	9302      	str	r3, [sp, #8]
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	9301      	str	r3, [sp, #4]
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f003 fb1e 	bl	8011b2e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e4f2:	2300      	movs	r3, #0
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b088      	sub	sp, #32
 800e500:	af04      	add	r7, sp, #16
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	4611      	mov	r1, r2
 800e508:	461a      	mov	r2, r3
 800e50a:	460b      	mov	r3, r1
 800e50c:	80fb      	strh	r3, [r7, #6]
 800e50e:	4613      	mov	r3, r2
 800e510:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e51c:	2300      	movs	r3, #0
 800e51e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e520:	7979      	ldrb	r1, [r7, #5]
 800e522:	7e3b      	ldrb	r3, [r7, #24]
 800e524:	9303      	str	r3, [sp, #12]
 800e526:	88fb      	ldrh	r3, [r7, #6]
 800e528:	9302      	str	r3, [sp, #8]
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	9301      	str	r3, [sp, #4]
 800e52e:	2301      	movs	r3, #1
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	2300      	movs	r3, #0
 800e534:	2200      	movs	r2, #0
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f003 faf9 	bl	8011b2e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3710      	adds	r7, #16
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}

0800e546 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b088      	sub	sp, #32
 800e54a:	af04      	add	r7, sp, #16
 800e54c:	60f8      	str	r0, [r7, #12]
 800e54e:	60b9      	str	r1, [r7, #8]
 800e550:	4611      	mov	r1, r2
 800e552:	461a      	mov	r2, r3
 800e554:	460b      	mov	r3, r1
 800e556:	80fb      	strh	r3, [r7, #6]
 800e558:	4613      	mov	r3, r2
 800e55a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e55c:	7979      	ldrb	r1, [r7, #5]
 800e55e:	2300      	movs	r3, #0
 800e560:	9303      	str	r3, [sp, #12]
 800e562:	88fb      	ldrh	r3, [r7, #6]
 800e564:	9302      	str	r3, [sp, #8]
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	9301      	str	r3, [sp, #4]
 800e56a:	2301      	movs	r3, #1
 800e56c:	9300      	str	r3, [sp, #0]
 800e56e:	2300      	movs	r3, #0
 800e570:	2201      	movs	r2, #1
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f003 fadb 	bl	8011b2e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e578:	2300      	movs	r3, #0

}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b088      	sub	sp, #32
 800e586:	af04      	add	r7, sp, #16
 800e588:	60f8      	str	r0, [r7, #12]
 800e58a:	60b9      	str	r1, [r7, #8]
 800e58c:	4611      	mov	r1, r2
 800e58e:	461a      	mov	r2, r3
 800e590:	460b      	mov	r3, r1
 800e592:	80fb      	strh	r3, [r7, #6]
 800e594:	4613      	mov	r3, r2
 800e596:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d001      	beq.n	800e5a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e5a6:	7979      	ldrb	r1, [r7, #5]
 800e5a8:	7e3b      	ldrb	r3, [r7, #24]
 800e5aa:	9303      	str	r3, [sp, #12]
 800e5ac:	88fb      	ldrh	r3, [r7, #6]
 800e5ae:	9302      	str	r3, [sp, #8]
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	9301      	str	r3, [sp, #4]
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	2302      	movs	r3, #2
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f003 fab6 	bl	8011b2e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b088      	sub	sp, #32
 800e5d0:	af04      	add	r7, sp, #16
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	461a      	mov	r2, r3
 800e5da:	460b      	mov	r3, r1
 800e5dc:	80fb      	strh	r3, [r7, #6]
 800e5de:	4613      	mov	r3, r2
 800e5e0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e5e2:	7979      	ldrb	r1, [r7, #5]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	9303      	str	r3, [sp, #12]
 800e5e8:	88fb      	ldrh	r3, [r7, #6]
 800e5ea:	9302      	str	r3, [sp, #8]
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	9301      	str	r3, [sp, #4]
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	2302      	movs	r3, #2
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f003 fa98 	bl	8011b2e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af04      	add	r7, sp, #16
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	4608      	mov	r0, r1
 800e612:	4611      	mov	r1, r2
 800e614:	461a      	mov	r2, r3
 800e616:	4603      	mov	r3, r0
 800e618:	70fb      	strb	r3, [r7, #3]
 800e61a:	460b      	mov	r3, r1
 800e61c:	70bb      	strb	r3, [r7, #2]
 800e61e:	4613      	mov	r3, r2
 800e620:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e622:	7878      	ldrb	r0, [r7, #1]
 800e624:	78ba      	ldrb	r2, [r7, #2]
 800e626:	78f9      	ldrb	r1, [r7, #3]
 800e628:	8b3b      	ldrh	r3, [r7, #24]
 800e62a:	9302      	str	r3, [sp, #8]
 800e62c:	7d3b      	ldrb	r3, [r7, #20]
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	7c3b      	ldrb	r3, [r7, #16]
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	4603      	mov	r3, r0
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f003 fa2b 	bl	8011a92 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e63c:	2300      	movs	r3, #0
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3708      	adds	r7, #8
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b082      	sub	sp, #8
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	460b      	mov	r3, r1
 800e650:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e652:	78fb      	ldrb	r3, [r7, #3]
 800e654:	4619      	mov	r1, r3
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f003 fa4a 	bl	8011af0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e666:	b580      	push	{r7, lr}
 800e668:	b084      	sub	sp, #16
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
 800e66e:	460b      	mov	r3, r1
 800e670:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 f836 	bl	800e6e4 <USBH_GetFreePipe>
 800e678:	4603      	mov	r3, r0
 800e67a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e67c:	89fb      	ldrh	r3, [r7, #14]
 800e67e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e682:	4293      	cmp	r3, r2
 800e684:	d00a      	beq.n	800e69c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e686:	78fa      	ldrb	r2, [r7, #3]
 800e688:	89fb      	ldrh	r3, [r7, #14]
 800e68a:	f003 030f 	and.w	r3, r3, #15
 800e68e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e692:	6879      	ldr	r1, [r7, #4]
 800e694:	33e0      	adds	r3, #224	; 0xe0
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	440b      	add	r3, r1
 800e69a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e69c:	89fb      	ldrh	r3, [r7, #14]
 800e69e:	b2db      	uxtb	r3, r3
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e6b4:	78fb      	ldrb	r3, [r7, #3]
 800e6b6:	2b0a      	cmp	r3, #10
 800e6b8:	d80d      	bhi.n	800e6d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e6ba:	78fb      	ldrb	r3, [r7, #3]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	33e0      	adds	r3, #224	; 0xe0
 800e6c0:	009b      	lsls	r3, r3, #2
 800e6c2:	4413      	add	r3, r2
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	78fb      	ldrb	r3, [r7, #3]
 800e6c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e6cc:	6879      	ldr	r1, [r7, #4]
 800e6ce:	33e0      	adds	r3, #224	; 0xe0
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	440b      	add	r3, r1
 800e6d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	73fb      	strb	r3, [r7, #15]
 800e6f4:	e00f      	b.n	800e716 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e6f6:	7bfb      	ldrb	r3, [r7, #15]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	33e0      	adds	r3, #224	; 0xe0
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e706:	2b00      	cmp	r3, #0
 800e708:	d102      	bne.n	800e710 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e70a:	7bfb      	ldrb	r3, [r7, #15]
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	e007      	b.n	800e720 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	3301      	adds	r3, #1
 800e714:	73fb      	strb	r3, [r7, #15]
 800e716:	7bfb      	ldrb	r3, [r7, #15]
 800e718:	2b0a      	cmp	r3, #10
 800e71a:	d9ec      	bls.n	800e6f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e71c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e720:	4618      	mov	r0, r3
 800e722:	3714      	adds	r7, #20
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e730:	bf00      	nop
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
	...

0800e73c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e742:	f3ef 8305 	mrs	r3, IPSR
 800e746:	60bb      	str	r3, [r7, #8]
  return(result);
 800e748:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d10f      	bne.n	800e76e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e74e:	f3ef 8310 	mrs	r3, PRIMASK
 800e752:	607b      	str	r3, [r7, #4]
  return(result);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d105      	bne.n	800e766 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e75a:	f3ef 8311 	mrs	r3, BASEPRI
 800e75e:	603b      	str	r3, [r7, #0]
  return(result);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d007      	beq.n	800e776 <osKernelInitialize+0x3a>
 800e766:	4b0e      	ldr	r3, [pc, #56]	; (800e7a0 <osKernelInitialize+0x64>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d103      	bne.n	800e776 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e76e:	f06f 0305 	mvn.w	r3, #5
 800e772:	60fb      	str	r3, [r7, #12]
 800e774:	e00c      	b.n	800e790 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e776:	4b0a      	ldr	r3, [pc, #40]	; (800e7a0 <osKernelInitialize+0x64>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d105      	bne.n	800e78a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e77e:	4b08      	ldr	r3, [pc, #32]	; (800e7a0 <osKernelInitialize+0x64>)
 800e780:	2201      	movs	r2, #1
 800e782:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e784:	2300      	movs	r3, #0
 800e786:	60fb      	str	r3, [r7, #12]
 800e788:	e002      	b.n	800e790 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e78a:	f04f 33ff 	mov.w	r3, #4294967295
 800e78e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e790:	68fb      	ldr	r3, [r7, #12]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	200002cc 	.word	0x200002cc

0800e7a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7aa:	f3ef 8305 	mrs	r3, IPSR
 800e7ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800e7b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d10f      	bne.n	800e7d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7b6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ba:	607b      	str	r3, [r7, #4]
  return(result);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d105      	bne.n	800e7ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e7c2:	f3ef 8311 	mrs	r3, BASEPRI
 800e7c6:	603b      	str	r3, [r7, #0]
  return(result);
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d007      	beq.n	800e7de <osKernelStart+0x3a>
 800e7ce:	4b0f      	ldr	r3, [pc, #60]	; (800e80c <osKernelStart+0x68>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d103      	bne.n	800e7de <osKernelStart+0x3a>
    stat = osErrorISR;
 800e7d6:	f06f 0305 	mvn.w	r3, #5
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	e010      	b.n	800e800 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e7de:	4b0b      	ldr	r3, [pc, #44]	; (800e80c <osKernelStart+0x68>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d109      	bne.n	800e7fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e7e6:	f7ff ffa1 	bl	800e72c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e7ea:	4b08      	ldr	r3, [pc, #32]	; (800e80c <osKernelStart+0x68>)
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e7f0:	f001 fad0 	bl	800fd94 <vTaskStartScheduler>
      stat = osOK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	e002      	b.n	800e800 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e7fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e800:	68fb      	ldr	r3, [r7, #12]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	200002cc 	.word	0x200002cc

0800e810 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e810:	b580      	push	{r7, lr}
 800e812:	b090      	sub	sp, #64	; 0x40
 800e814:	af04      	add	r7, sp, #16
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e81c:	2300      	movs	r3, #0
 800e81e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e820:	f3ef 8305 	mrs	r3, IPSR
 800e824:	61fb      	str	r3, [r7, #28]
  return(result);
 800e826:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e828:	2b00      	cmp	r3, #0
 800e82a:	f040 808f 	bne.w	800e94c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e82e:	f3ef 8310 	mrs	r3, PRIMASK
 800e832:	61bb      	str	r3, [r7, #24]
  return(result);
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d105      	bne.n	800e846 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e83a:	f3ef 8311 	mrs	r3, BASEPRI
 800e83e:	617b      	str	r3, [r7, #20]
  return(result);
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d003      	beq.n	800e84e <osThreadNew+0x3e>
 800e846:	4b44      	ldr	r3, [pc, #272]	; (800e958 <osThreadNew+0x148>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b02      	cmp	r3, #2
 800e84c:	d07e      	beq.n	800e94c <osThreadNew+0x13c>
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d07b      	beq.n	800e94c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e854:	2380      	movs	r3, #128	; 0x80
 800e856:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e858:	2318      	movs	r3, #24
 800e85a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e85c:	2300      	movs	r3, #0
 800e85e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e860:	f04f 33ff 	mov.w	r3, #4294967295
 800e864:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d045      	beq.n	800e8f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <osThreadNew+0x6a>
        name = attr->name;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d002      	beq.n	800e888 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	699b      	ldr	r3, [r3, #24]
 800e886:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d008      	beq.n	800e8a0 <osThreadNew+0x90>
 800e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e890:	2b38      	cmp	r3, #56	; 0x38
 800e892:	d805      	bhi.n	800e8a0 <osThreadNew+0x90>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	f003 0301 	and.w	r3, r3, #1
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d001      	beq.n	800e8a4 <osThreadNew+0x94>
        return (NULL);
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	e054      	b.n	800e94e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	695b      	ldr	r3, [r3, #20]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d003      	beq.n	800e8b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	695b      	ldr	r3, [r3, #20]
 800e8b0:	089b      	lsrs	r3, r3, #2
 800e8b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00e      	beq.n	800e8da <osThreadNew+0xca>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	2b5f      	cmp	r3, #95	; 0x5f
 800e8c2:	d90a      	bls.n	800e8da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d006      	beq.n	800e8da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	695b      	ldr	r3, [r3, #20]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <osThreadNew+0xca>
        mem = 1;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	623b      	str	r3, [r7, #32]
 800e8d8:	e010      	b.n	800e8fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d10c      	bne.n	800e8fc <osThreadNew+0xec>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d108      	bne.n	800e8fc <osThreadNew+0xec>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d104      	bne.n	800e8fc <osThreadNew+0xec>
          mem = 0;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	623b      	str	r3, [r7, #32]
 800e8f6:	e001      	b.n	800e8fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d110      	bne.n	800e924 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e90a:	9202      	str	r2, [sp, #8]
 800e90c:	9301      	str	r3, [sp, #4]
 800e90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f001 f85d 	bl	800f9d8 <xTaskCreateStatic>
 800e91e:	4603      	mov	r3, r0
 800e920:	613b      	str	r3, [r7, #16]
 800e922:	e013      	b.n	800e94c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d110      	bne.n	800e94c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	f107 0310 	add.w	r3, r7, #16
 800e932:	9301      	str	r3, [sp, #4]
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f001 f8ab 	bl	800fa98 <xTaskCreate>
 800e942:	4603      	mov	r3, r0
 800e944:	2b01      	cmp	r3, #1
 800e946:	d001      	beq.n	800e94c <osThreadNew+0x13c>
          hTask = NULL;
 800e948:	2300      	movs	r3, #0
 800e94a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e94c:	693b      	ldr	r3, [r7, #16]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3730      	adds	r7, #48	; 0x30
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	200002cc 	.word	0x200002cc

0800e95c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e964:	f3ef 8305 	mrs	r3, IPSR
 800e968:	613b      	str	r3, [r7, #16]
  return(result);
 800e96a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10f      	bne.n	800e990 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e970:	f3ef 8310 	mrs	r3, PRIMASK
 800e974:	60fb      	str	r3, [r7, #12]
  return(result);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d105      	bne.n	800e988 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e97c:	f3ef 8311 	mrs	r3, BASEPRI
 800e980:	60bb      	str	r3, [r7, #8]
  return(result);
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d007      	beq.n	800e998 <osDelay+0x3c>
 800e988:	4b0a      	ldr	r3, [pc, #40]	; (800e9b4 <osDelay+0x58>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b02      	cmp	r3, #2
 800e98e:	d103      	bne.n	800e998 <osDelay+0x3c>
    stat = osErrorISR;
 800e990:	f06f 0305 	mvn.w	r3, #5
 800e994:	617b      	str	r3, [r7, #20]
 800e996:	e007      	b.n	800e9a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e998:	2300      	movs	r3, #0
 800e99a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d002      	beq.n	800e9a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f001 f9c0 	bl	800fd28 <vTaskDelay>
    }
  }

  return (stat);
 800e9a8:	697b      	ldr	r3, [r7, #20]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	200002cc 	.word	0x200002cc

0800e9b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b08c      	sub	sp, #48	; 0x30
 800e9bc:	af02      	add	r7, sp, #8
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9c8:	f3ef 8305 	mrs	r3, IPSR
 800e9cc:	61bb      	str	r3, [r7, #24]
  return(result);
 800e9ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d170      	bne.n	800eab6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800e9d8:	617b      	str	r3, [r7, #20]
  return(result);
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d105      	bne.n	800e9ec <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9e0:	f3ef 8311 	mrs	r3, BASEPRI
 800e9e4:	613b      	str	r3, [r7, #16]
  return(result);
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d003      	beq.n	800e9f4 <osMessageQueueNew+0x3c>
 800e9ec:	4b34      	ldr	r3, [pc, #208]	; (800eac0 <osMessageQueueNew+0x108>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2b02      	cmp	r3, #2
 800e9f2:	d060      	beq.n	800eab6 <osMessageQueueNew+0xfe>
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d05d      	beq.n	800eab6 <osMessageQueueNew+0xfe>
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d05a      	beq.n	800eab6 <osMessageQueueNew+0xfe>
    mem = -1;
 800ea00:	f04f 33ff 	mov.w	r3, #4294967295
 800ea04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d029      	beq.n	800ea60 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d012      	beq.n	800ea3a <osMessageQueueNew+0x82>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	2b4f      	cmp	r3, #79	; 0x4f
 800ea1a:	d90e      	bls.n	800ea3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00a      	beq.n	800ea3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	695a      	ldr	r2, [r3, #20]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	68b9      	ldr	r1, [r7, #8]
 800ea2c:	fb01 f303 	mul.w	r3, r1, r3
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d302      	bcc.n	800ea3a <osMessageQueueNew+0x82>
        mem = 1;
 800ea34:	2301      	movs	r3, #1
 800ea36:	623b      	str	r3, [r7, #32]
 800ea38:	e014      	b.n	800ea64 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d110      	bne.n	800ea64 <osMessageQueueNew+0xac>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d10c      	bne.n	800ea64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d108      	bne.n	800ea64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	695b      	ldr	r3, [r3, #20]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d104      	bne.n	800ea64 <osMessageQueueNew+0xac>
          mem = 0;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	623b      	str	r3, [r7, #32]
 800ea5e:	e001      	b.n	800ea64 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ea60:	2300      	movs	r3, #0
 800ea62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d10c      	bne.n	800ea84 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	691a      	ldr	r2, [r3, #16]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6899      	ldr	r1, [r3, #8]
 800ea72:	2300      	movs	r3, #0
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	460b      	mov	r3, r1
 800ea78:	68b9      	ldr	r1, [r7, #8]
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f000 fa5a 	bl	800ef34 <xQueueGenericCreateStatic>
 800ea80:	6278      	str	r0, [r7, #36]	; 0x24
 800ea82:	e008      	b.n	800ea96 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d105      	bne.n	800ea96 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	68b9      	ldr	r1, [r7, #8]
 800ea8e:	68f8      	ldr	r0, [r7, #12]
 800ea90:	f000 facd 	bl	800f02e <xQueueGenericCreate>
 800ea94:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00c      	beq.n	800eab6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d003      	beq.n	800eaaa <osMessageQueueNew+0xf2>
        name = attr->name;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	61fb      	str	r3, [r7, #28]
 800eaa8:	e001      	b.n	800eaae <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800eaae:	69f9      	ldr	r1, [r7, #28]
 800eab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eab2:	f000 ff35 	bl	800f920 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800eab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3728      	adds	r7, #40	; 0x28
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	200002cc 	.word	0x200002cc

0800eac4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b08a      	sub	sp, #40	; 0x28
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	603b      	str	r3, [r7, #0]
 800ead0:	4613      	mov	r3, r2
 800ead2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ead8:	2300      	movs	r3, #0
 800eada:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eadc:	f3ef 8305 	mrs	r3, IPSR
 800eae0:	61fb      	str	r3, [r7, #28]
  return(result);
 800eae2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10f      	bne.n	800eb08 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eae8:	f3ef 8310 	mrs	r3, PRIMASK
 800eaec:	61bb      	str	r3, [r7, #24]
  return(result);
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d105      	bne.n	800eb00 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eaf4:	f3ef 8311 	mrs	r3, BASEPRI
 800eaf8:	617b      	str	r3, [r7, #20]
  return(result);
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d02c      	beq.n	800eb5a <osMessageQueuePut+0x96>
 800eb00:	4b28      	ldr	r3, [pc, #160]	; (800eba4 <osMessageQueuePut+0xe0>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b02      	cmp	r3, #2
 800eb06:	d128      	bne.n	800eb5a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb08:	6a3b      	ldr	r3, [r7, #32]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d005      	beq.n	800eb1a <osMessageQueuePut+0x56>
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d002      	beq.n	800eb1a <osMessageQueuePut+0x56>
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d003      	beq.n	800eb22 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800eb1a:	f06f 0303 	mvn.w	r3, #3
 800eb1e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb20:	e039      	b.n	800eb96 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800eb22:	2300      	movs	r3, #0
 800eb24:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800eb26:	f107 0210 	add.w	r2, r7, #16
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	68b9      	ldr	r1, [r7, #8]
 800eb2e:	6a38      	ldr	r0, [r7, #32]
 800eb30:	f000 fbe4 	bl	800f2fc <xQueueGenericSendFromISR>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d003      	beq.n	800eb42 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800eb3a:	f06f 0302 	mvn.w	r3, #2
 800eb3e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb40:	e029      	b.n	800eb96 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d026      	beq.n	800eb96 <osMessageQueuePut+0xd2>
 800eb48:	4b17      	ldr	r3, [pc, #92]	; (800eba8 <osMessageQueuePut+0xe4>)
 800eb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb4e:	601a      	str	r2, [r3, #0]
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb58:	e01d      	b.n	800eb96 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eb5a:	6a3b      	ldr	r3, [r7, #32]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d002      	beq.n	800eb66 <osMessageQueuePut+0xa2>
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d103      	bne.n	800eb6e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800eb66:	f06f 0303 	mvn.w	r3, #3
 800eb6a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb6c:	e014      	b.n	800eb98 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eb6e:	2300      	movs	r3, #0
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	68b9      	ldr	r1, [r7, #8]
 800eb74:	6a38      	ldr	r0, [r7, #32]
 800eb76:	f000 fabf 	bl	800f0f8 <xQueueGenericSend>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d00b      	beq.n	800eb98 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d003      	beq.n	800eb8e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800eb86:	f06f 0301 	mvn.w	r3, #1
 800eb8a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb8c:	e004      	b.n	800eb98 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800eb8e:	f06f 0302 	mvn.w	r3, #2
 800eb92:	627b      	str	r3, [r7, #36]	; 0x24
 800eb94:	e000      	b.n	800eb98 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb96:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800eb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3728      	adds	r7, #40	; 0x28
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	200002cc 	.word	0x200002cc
 800eba8:	e000ed04 	.word	0xe000ed04

0800ebac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08a      	sub	sp, #40	; 0x28
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebc2:	f3ef 8305 	mrs	r3, IPSR
 800ebc6:	61fb      	str	r3, [r7, #28]
  return(result);
 800ebc8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d10f      	bne.n	800ebee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebce:	f3ef 8310 	mrs	r3, PRIMASK
 800ebd2:	61bb      	str	r3, [r7, #24]
  return(result);
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d105      	bne.n	800ebe6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebda:	f3ef 8311 	mrs	r3, BASEPRI
 800ebde:	617b      	str	r3, [r7, #20]
  return(result);
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d02c      	beq.n	800ec40 <osMessageQueueGet+0x94>
 800ebe6:	4b28      	ldr	r3, [pc, #160]	; (800ec88 <osMessageQueueGet+0xdc>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	d128      	bne.n	800ec40 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ebee:	6a3b      	ldr	r3, [r7, #32]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d005      	beq.n	800ec00 <osMessageQueueGet+0x54>
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d002      	beq.n	800ec00 <osMessageQueueGet+0x54>
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d003      	beq.n	800ec08 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ec00:	f06f 0303 	mvn.w	r3, #3
 800ec04:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec06:	e038      	b.n	800ec7a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ec0c:	f107 0310 	add.w	r3, r7, #16
 800ec10:	461a      	mov	r2, r3
 800ec12:	68b9      	ldr	r1, [r7, #8]
 800ec14:	6a38      	ldr	r0, [r7, #32]
 800ec16:	f000 fcef 	bl	800f5f8 <xQueueReceiveFromISR>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d003      	beq.n	800ec28 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ec20:	f06f 0302 	mvn.w	r3, #2
 800ec24:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec26:	e028      	b.n	800ec7a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d025      	beq.n	800ec7a <osMessageQueueGet+0xce>
 800ec2e:	4b17      	ldr	r3, [pc, #92]	; (800ec8c <osMessageQueueGet+0xe0>)
 800ec30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec3e:	e01c      	b.n	800ec7a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ec40:	6a3b      	ldr	r3, [r7, #32]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d002      	beq.n	800ec4c <osMessageQueueGet+0xa0>
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d103      	bne.n	800ec54 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ec4c:	f06f 0303 	mvn.w	r3, #3
 800ec50:	627b      	str	r3, [r7, #36]	; 0x24
 800ec52:	e013      	b.n	800ec7c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	68b9      	ldr	r1, [r7, #8]
 800ec58:	6a38      	ldr	r0, [r7, #32]
 800ec5a:	f000 fbeb 	bl	800f434 <xQueueReceive>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d00b      	beq.n	800ec7c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d003      	beq.n	800ec72 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ec6a:	f06f 0301 	mvn.w	r3, #1
 800ec6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec70:	e004      	b.n	800ec7c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ec72:	f06f 0302 	mvn.w	r3, #2
 800ec76:	627b      	str	r3, [r7, #36]	; 0x24
 800ec78:	e000      	b.n	800ec7c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec7a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3728      	adds	r7, #40	; 0x28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	200002cc 	.word	0x200002cc
 800ec8c:	e000ed04 	.word	0xe000ed04

0800ec90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ec90:	b480      	push	{r7}
 800ec92:	b085      	sub	sp, #20
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	4a07      	ldr	r2, [pc, #28]	; (800ecbc <vApplicationGetIdleTaskMemory+0x2c>)
 800eca0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	4a06      	ldr	r2, [pc, #24]	; (800ecc0 <vApplicationGetIdleTaskMemory+0x30>)
 800eca6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2280      	movs	r2, #128	; 0x80
 800ecac:	601a      	str	r2, [r3, #0]
}
 800ecae:	bf00      	nop
 800ecb0:	3714      	adds	r7, #20
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	200002d0 	.word	0x200002d0
 800ecc0:	20000330 	.word	0x20000330

0800ecc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	4a07      	ldr	r2, [pc, #28]	; (800ecf0 <vApplicationGetTimerTaskMemory+0x2c>)
 800ecd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	4a06      	ldr	r2, [pc, #24]	; (800ecf4 <vApplicationGetTimerTaskMemory+0x30>)
 800ecda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ece2:	601a      	str	r2, [r3, #0]
}
 800ece4:	bf00      	nop
 800ece6:	3714      	adds	r7, #20
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr
 800ecf0:	20000530 	.word	0x20000530
 800ecf4:	20000590 	.word	0x20000590

0800ecf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f103 0208 	add.w	r2, r3, #8
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f103 0208 	add.w	r2, r3, #8
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f103 0208 	add.w	r2, r3, #8
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b083      	sub	sp, #12
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ed46:	bf00      	nop
 800ed48:	370c      	adds	r7, #12
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr

0800ed52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed52:	b480      	push	{r7}
 800ed54:	b085      	sub	sp, #20
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
 800ed5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	689a      	ldr	r2, [r3, #8]
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	683a      	ldr	r2, [r7, #0]
 800ed76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	1c5a      	adds	r2, r3, #1
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	601a      	str	r2, [r3, #0]
}
 800ed8e:	bf00      	nop
 800ed90:	3714      	adds	r7, #20
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr

0800ed9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b085      	sub	sp, #20
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb0:	d103      	bne.n	800edba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	691b      	ldr	r3, [r3, #16]
 800edb6:	60fb      	str	r3, [r7, #12]
 800edb8:	e00c      	b.n	800edd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	3308      	adds	r3, #8
 800edbe:	60fb      	str	r3, [r7, #12]
 800edc0:	e002      	b.n	800edc8 <vListInsert+0x2e>
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	60fb      	str	r3, [r7, #12]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d2f6      	bcs.n	800edc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	685a      	ldr	r2, [r3, #4]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	683a      	ldr	r2, [r7, #0]
 800ede2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	1c5a      	adds	r2, r3, #1
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	601a      	str	r2, [r3, #0]
}
 800ee00:	bf00      	nop
 800ee02:	3714      	adds	r7, #20
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	691b      	ldr	r3, [r3, #16]
 800ee18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	6892      	ldr	r2, [r2, #8]
 800ee22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	6852      	ldr	r2, [r2, #4]
 800ee2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d103      	bne.n	800ee40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	689a      	ldr	r2, [r3, #8]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	1e5a      	subs	r2, r3, #1
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10b      	bne.n	800ee8c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ee74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee78:	b672      	cpsid	i
 800ee7a:	f383 8811 	msr	BASEPRI, r3
 800ee7e:	f3bf 8f6f 	isb	sy
 800ee82:	f3bf 8f4f 	dsb	sy
 800ee86:	b662      	cpsie	i
 800ee88:	60bb      	str	r3, [r7, #8]
 800ee8a:	e7fe      	b.n	800ee8a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800ee8c:	f002 f934 	bl	80110f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee98:	68f9      	ldr	r1, [r7, #12]
 800ee9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee9c:	fb01 f303 	mul.w	r3, r1, r3
 800eea0:	441a      	add	r2, r3
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eebc:	3b01      	subs	r3, #1
 800eebe:	68f9      	ldr	r1, [r7, #12]
 800eec0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eec2:	fb01 f303 	mul.w	r3, r1, r3
 800eec6:	441a      	add	r2, r3
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	22ff      	movs	r2, #255	; 0xff
 800eed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	22ff      	movs	r2, #255	; 0xff
 800eed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d114      	bne.n	800ef0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	691b      	ldr	r3, [r3, #16]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d01a      	beq.n	800ef20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	3310      	adds	r3, #16
 800eeee:	4618      	mov	r0, r3
 800eef0:	f001 fa04 	bl	80102fc <xTaskRemoveFromEventList>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d012      	beq.n	800ef20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eefa:	4b0d      	ldr	r3, [pc, #52]	; (800ef30 <xQueueGenericReset+0xd0>)
 800eefc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef00:	601a      	str	r2, [r3, #0]
 800ef02:	f3bf 8f4f 	dsb	sy
 800ef06:	f3bf 8f6f 	isb	sy
 800ef0a:	e009      	b.n	800ef20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	3310      	adds	r3, #16
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7ff fef1 	bl	800ecf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	3324      	adds	r3, #36	; 0x24
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7ff feec 	bl	800ecf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ef20:	f002 f91c 	bl	801115c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ef24:	2301      	movs	r3, #1
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	e000ed04 	.word	0xe000ed04

0800ef34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b08e      	sub	sp, #56	; 0x38
 800ef38:	af02      	add	r7, sp, #8
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
 800ef40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d10b      	bne.n	800ef60 <xQueueGenericCreateStatic+0x2c>
 800ef48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4c:	b672      	cpsid	i
 800ef4e:	f383 8811 	msr	BASEPRI, r3
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	b662      	cpsie	i
 800ef5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef5e:	e7fe      	b.n	800ef5e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d10b      	bne.n	800ef7e <xQueueGenericCreateStatic+0x4a>
 800ef66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6a:	b672      	cpsid	i
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	b662      	cpsie	i
 800ef7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef7c:	e7fe      	b.n	800ef7c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d002      	beq.n	800ef8a <xQueueGenericCreateStatic+0x56>
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d001      	beq.n	800ef8e <xQueueGenericCreateStatic+0x5a>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e000      	b.n	800ef90 <xQueueGenericCreateStatic+0x5c>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d10b      	bne.n	800efac <xQueueGenericCreateStatic+0x78>
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	b672      	cpsid	i
 800ef9a:	f383 8811 	msr	BASEPRI, r3
 800ef9e:	f3bf 8f6f 	isb	sy
 800efa2:	f3bf 8f4f 	dsb	sy
 800efa6:	b662      	cpsie	i
 800efa8:	623b      	str	r3, [r7, #32]
 800efaa:	e7fe      	b.n	800efaa <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d102      	bne.n	800efb8 <xQueueGenericCreateStatic+0x84>
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d101      	bne.n	800efbc <xQueueGenericCreateStatic+0x88>
 800efb8:	2301      	movs	r3, #1
 800efba:	e000      	b.n	800efbe <xQueueGenericCreateStatic+0x8a>
 800efbc:	2300      	movs	r3, #0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d10b      	bne.n	800efda <xQueueGenericCreateStatic+0xa6>
 800efc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc6:	b672      	cpsid	i
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	b662      	cpsie	i
 800efd6:	61fb      	str	r3, [r7, #28]
 800efd8:	e7fe      	b.n	800efd8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800efda:	2350      	movs	r3, #80	; 0x50
 800efdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	2b50      	cmp	r3, #80	; 0x50
 800efe2:	d00b      	beq.n	800effc <xQueueGenericCreateStatic+0xc8>
 800efe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe8:	b672      	cpsid	i
 800efea:	f383 8811 	msr	BASEPRI, r3
 800efee:	f3bf 8f6f 	isb	sy
 800eff2:	f3bf 8f4f 	dsb	sy
 800eff6:	b662      	cpsie	i
 800eff8:	61bb      	str	r3, [r7, #24]
 800effa:	e7fe      	b.n	800effa <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800effc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f004:	2b00      	cmp	r3, #0
 800f006:	d00d      	beq.n	800f024 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f010:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	4613      	mov	r3, r2
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	68b9      	ldr	r1, [r7, #8]
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f000 f846 	bl	800f0b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f026:	4618      	mov	r0, r3
 800f028:	3730      	adds	r7, #48	; 0x30
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b08a      	sub	sp, #40	; 0x28
 800f032:	af02      	add	r7, sp, #8
 800f034:	60f8      	str	r0, [r7, #12]
 800f036:	60b9      	str	r1, [r7, #8]
 800f038:	4613      	mov	r3, r2
 800f03a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10b      	bne.n	800f05a <xQueueGenericCreate+0x2c>
 800f042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f046:	b672      	cpsid	i
 800f048:	f383 8811 	msr	BASEPRI, r3
 800f04c:	f3bf 8f6f 	isb	sy
 800f050:	f3bf 8f4f 	dsb	sy
 800f054:	b662      	cpsie	i
 800f056:	613b      	str	r3, [r7, #16]
 800f058:	e7fe      	b.n	800f058 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d102      	bne.n	800f066 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f060:	2300      	movs	r3, #0
 800f062:	61fb      	str	r3, [r7, #28]
 800f064:	e004      	b.n	800f070 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	68ba      	ldr	r2, [r7, #8]
 800f06a:	fb02 f303 	mul.w	r3, r2, r3
 800f06e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	3350      	adds	r3, #80	; 0x50
 800f074:	4618      	mov	r0, r3
 800f076:	f002 f961 	bl	801133c <pvPortMalloc>
 800f07a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f07c:	69bb      	ldr	r3, [r7, #24]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d011      	beq.n	800f0a6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	3350      	adds	r3, #80	; 0x50
 800f08a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	2200      	movs	r2, #0
 800f090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f094:	79fa      	ldrb	r2, [r7, #7]
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	4613      	mov	r3, r2
 800f09c:	697a      	ldr	r2, [r7, #20]
 800f09e:	68b9      	ldr	r1, [r7, #8]
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f000 f805 	bl	800f0b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f0a6:	69bb      	ldr	r3, [r7, #24]
	}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3720      	adds	r7, #32
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	607a      	str	r2, [r7, #4]
 800f0bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d103      	bne.n	800f0cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	69ba      	ldr	r2, [r7, #24]
 800f0c8:	601a      	str	r2, [r3, #0]
 800f0ca:	e002      	b.n	800f0d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f0cc:	69bb      	ldr	r3, [r7, #24]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	68ba      	ldr	r2, [r7, #8]
 800f0dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f0de:	2101      	movs	r1, #1
 800f0e0:	69b8      	ldr	r0, [r7, #24]
 800f0e2:	f7ff febd 	bl	800ee60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	78fa      	ldrb	r2, [r7, #3]
 800f0ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f0ee:	bf00      	nop
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
	...

0800f0f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b08e      	sub	sp, #56	; 0x38
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
 800f104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f106:	2300      	movs	r3, #0
 800f108:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10b      	bne.n	800f12c <xQueueGenericSend+0x34>
 800f114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f118:	b672      	cpsid	i
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	b662      	cpsie	i
 800f128:	62bb      	str	r3, [r7, #40]	; 0x28
 800f12a:	e7fe      	b.n	800f12a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d103      	bne.n	800f13a <xQueueGenericSend+0x42>
 800f132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f136:	2b00      	cmp	r3, #0
 800f138:	d101      	bne.n	800f13e <xQueueGenericSend+0x46>
 800f13a:	2301      	movs	r3, #1
 800f13c:	e000      	b.n	800f140 <xQueueGenericSend+0x48>
 800f13e:	2300      	movs	r3, #0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10b      	bne.n	800f15c <xQueueGenericSend+0x64>
 800f144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f148:	b672      	cpsid	i
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	b662      	cpsie	i
 800f158:	627b      	str	r3, [r7, #36]	; 0x24
 800f15a:	e7fe      	b.n	800f15a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	2b02      	cmp	r3, #2
 800f160:	d103      	bne.n	800f16a <xQueueGenericSend+0x72>
 800f162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f166:	2b01      	cmp	r3, #1
 800f168:	d101      	bne.n	800f16e <xQueueGenericSend+0x76>
 800f16a:	2301      	movs	r3, #1
 800f16c:	e000      	b.n	800f170 <xQueueGenericSend+0x78>
 800f16e:	2300      	movs	r3, #0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d10b      	bne.n	800f18c <xQueueGenericSend+0x94>
 800f174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f178:	b672      	cpsid	i
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	b662      	cpsie	i
 800f188:	623b      	str	r3, [r7, #32]
 800f18a:	e7fe      	b.n	800f18a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f18c:	f001 fa76 	bl	801067c <xTaskGetSchedulerState>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d102      	bne.n	800f19c <xQueueGenericSend+0xa4>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d101      	bne.n	800f1a0 <xQueueGenericSend+0xa8>
 800f19c:	2301      	movs	r3, #1
 800f19e:	e000      	b.n	800f1a2 <xQueueGenericSend+0xaa>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d10b      	bne.n	800f1be <xQueueGenericSend+0xc6>
 800f1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1aa:	b672      	cpsid	i
 800f1ac:	f383 8811 	msr	BASEPRI, r3
 800f1b0:	f3bf 8f6f 	isb	sy
 800f1b4:	f3bf 8f4f 	dsb	sy
 800f1b8:	b662      	cpsie	i
 800f1ba:	61fb      	str	r3, [r7, #28]
 800f1bc:	e7fe      	b.n	800f1bc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1be:	f001 ff9b 	bl	80110f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d302      	bcc.n	800f1d4 <xQueueGenericSend+0xdc>
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	2b02      	cmp	r3, #2
 800f1d2:	d129      	bne.n	800f228 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	68b9      	ldr	r1, [r7, #8]
 800f1d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1da:	f000 fa90 	bl	800f6fe <prvCopyDataToQueue>
 800f1de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d010      	beq.n	800f20a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ea:	3324      	adds	r3, #36	; 0x24
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f001 f885 	bl	80102fc <xTaskRemoveFromEventList>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d013      	beq.n	800f220 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f1f8:	4b3f      	ldr	r3, [pc, #252]	; (800f2f8 <xQueueGenericSend+0x200>)
 800f1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1fe:	601a      	str	r2, [r3, #0]
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	f3bf 8f6f 	isb	sy
 800f208:	e00a      	b.n	800f220 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d007      	beq.n	800f220 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f210:	4b39      	ldr	r3, [pc, #228]	; (800f2f8 <xQueueGenericSend+0x200>)
 800f212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f216:	601a      	str	r2, [r3, #0]
 800f218:	f3bf 8f4f 	dsb	sy
 800f21c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f220:	f001 ff9c 	bl	801115c <vPortExitCritical>
				return pdPASS;
 800f224:	2301      	movs	r3, #1
 800f226:	e063      	b.n	800f2f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d103      	bne.n	800f236 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f22e:	f001 ff95 	bl	801115c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f232:	2300      	movs	r3, #0
 800f234:	e05c      	b.n	800f2f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d106      	bne.n	800f24a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f23c:	f107 0314 	add.w	r3, r7, #20
 800f240:	4618      	mov	r0, r3
 800f242:	f001 f8bf 	bl	80103c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f246:	2301      	movs	r3, #1
 800f248:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f24a:	f001 ff87 	bl	801115c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f24e:	f000 fe09 	bl	800fe64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f252:	f001 ff51 	bl	80110f8 <vPortEnterCritical>
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f25c:	b25b      	sxtb	r3, r3
 800f25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f262:	d103      	bne.n	800f26c <xQueueGenericSend+0x174>
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	2200      	movs	r2, #0
 800f268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f272:	b25b      	sxtb	r3, r3
 800f274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f278:	d103      	bne.n	800f282 <xQueueGenericSend+0x18a>
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	2200      	movs	r2, #0
 800f27e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f282:	f001 ff6b 	bl	801115c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f286:	1d3a      	adds	r2, r7, #4
 800f288:	f107 0314 	add.w	r3, r7, #20
 800f28c:	4611      	mov	r1, r2
 800f28e:	4618      	mov	r0, r3
 800f290:	f001 f8ae 	bl	80103f0 <xTaskCheckForTimeOut>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d124      	bne.n	800f2e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f29a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f29c:	f000 fb27 	bl	800f8ee <prvIsQueueFull>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d018      	beq.n	800f2d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a8:	3310      	adds	r3, #16
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	4611      	mov	r1, r2
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f000 ffd2 	bl	8010258 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f2b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2b6:	f000 fab2 	bl	800f81e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f2ba:	f000 fde1 	bl	800fe80 <xTaskResumeAll>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f47f af7c 	bne.w	800f1be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f2c6:	4b0c      	ldr	r3, [pc, #48]	; (800f2f8 <xQueueGenericSend+0x200>)
 800f2c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2cc:	601a      	str	r2, [r3, #0]
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	f3bf 8f6f 	isb	sy
 800f2d6:	e772      	b.n	800f1be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f2d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2da:	f000 faa0 	bl	800f81e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2de:	f000 fdcf 	bl	800fe80 <xTaskResumeAll>
 800f2e2:	e76c      	b.n	800f1be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f2e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2e6:	f000 fa9a 	bl	800f81e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2ea:	f000 fdc9 	bl	800fe80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f2ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3738      	adds	r7, #56	; 0x38
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	e000ed04 	.word	0xe000ed04

0800f2fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08e      	sub	sp, #56	; 0x38
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10b      	bne.n	800f32c <xQueueGenericSendFromISR+0x30>
 800f314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f318:	b672      	cpsid	i
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	b662      	cpsie	i
 800f328:	627b      	str	r3, [r7, #36]	; 0x24
 800f32a:	e7fe      	b.n	800f32a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d103      	bne.n	800f33a <xQueueGenericSendFromISR+0x3e>
 800f332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f336:	2b00      	cmp	r3, #0
 800f338:	d101      	bne.n	800f33e <xQueueGenericSendFromISR+0x42>
 800f33a:	2301      	movs	r3, #1
 800f33c:	e000      	b.n	800f340 <xQueueGenericSendFromISR+0x44>
 800f33e:	2300      	movs	r3, #0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10b      	bne.n	800f35c <xQueueGenericSendFromISR+0x60>
 800f344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f348:	b672      	cpsid	i
 800f34a:	f383 8811 	msr	BASEPRI, r3
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f3bf 8f4f 	dsb	sy
 800f356:	b662      	cpsie	i
 800f358:	623b      	str	r3, [r7, #32]
 800f35a:	e7fe      	b.n	800f35a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2b02      	cmp	r3, #2
 800f360:	d103      	bne.n	800f36a <xQueueGenericSendFromISR+0x6e>
 800f362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f366:	2b01      	cmp	r3, #1
 800f368:	d101      	bne.n	800f36e <xQueueGenericSendFromISR+0x72>
 800f36a:	2301      	movs	r3, #1
 800f36c:	e000      	b.n	800f370 <xQueueGenericSendFromISR+0x74>
 800f36e:	2300      	movs	r3, #0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10b      	bne.n	800f38c <xQueueGenericSendFromISR+0x90>
 800f374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f378:	b672      	cpsid	i
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	b662      	cpsie	i
 800f388:	61fb      	str	r3, [r7, #28]
 800f38a:	e7fe      	b.n	800f38a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f38c:	f001 ff94 	bl	80112b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f390:	f3ef 8211 	mrs	r2, BASEPRI
 800f394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f398:	b672      	cpsid	i
 800f39a:	f383 8811 	msr	BASEPRI, r3
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	f3bf 8f4f 	dsb	sy
 800f3a6:	b662      	cpsie	i
 800f3a8:	61ba      	str	r2, [r7, #24]
 800f3aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f3ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d302      	bcc.n	800f3c2 <xQueueGenericSendFromISR+0xc6>
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d12c      	bne.n	800f41c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f3cc:	683a      	ldr	r2, [r7, #0]
 800f3ce:	68b9      	ldr	r1, [r7, #8]
 800f3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3d2:	f000 f994 	bl	800f6fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f3d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3de:	d112      	bne.n	800f406 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d016      	beq.n	800f416 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ea:	3324      	adds	r3, #36	; 0x24
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f000 ff85 	bl	80102fc <xTaskRemoveFromEventList>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00e      	beq.n	800f416 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00b      	beq.n	800f416 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2201      	movs	r2, #1
 800f402:	601a      	str	r2, [r3, #0]
 800f404:	e007      	b.n	800f416 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f40a:	3301      	adds	r3, #1
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	b25a      	sxtb	r2, r3
 800f410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f416:	2301      	movs	r3, #1
 800f418:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f41a:	e001      	b.n	800f420 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f41c:	2300      	movs	r3, #0
 800f41e:	637b      	str	r3, [r7, #52]	; 0x34
 800f420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f422:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3738      	adds	r7, #56	; 0x38
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b08c      	sub	sp, #48	; 0x30
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f440:	2300      	movs	r3, #0
 800f442:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d10b      	bne.n	800f466 <xQueueReceive+0x32>
	__asm volatile
 800f44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f452:	b672      	cpsid	i
 800f454:	f383 8811 	msr	BASEPRI, r3
 800f458:	f3bf 8f6f 	isb	sy
 800f45c:	f3bf 8f4f 	dsb	sy
 800f460:	b662      	cpsie	i
 800f462:	623b      	str	r3, [r7, #32]
 800f464:	e7fe      	b.n	800f464 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d103      	bne.n	800f474 <xQueueReceive+0x40>
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f470:	2b00      	cmp	r3, #0
 800f472:	d101      	bne.n	800f478 <xQueueReceive+0x44>
 800f474:	2301      	movs	r3, #1
 800f476:	e000      	b.n	800f47a <xQueueReceive+0x46>
 800f478:	2300      	movs	r3, #0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10b      	bne.n	800f496 <xQueueReceive+0x62>
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	b672      	cpsid	i
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	b662      	cpsie	i
 800f492:	61fb      	str	r3, [r7, #28]
 800f494:	e7fe      	b.n	800f494 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f496:	f001 f8f1 	bl	801067c <xTaskGetSchedulerState>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d102      	bne.n	800f4a6 <xQueueReceive+0x72>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d101      	bne.n	800f4aa <xQueueReceive+0x76>
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e000      	b.n	800f4ac <xQueueReceive+0x78>
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d10b      	bne.n	800f4c8 <xQueueReceive+0x94>
 800f4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b4:	b672      	cpsid	i
 800f4b6:	f383 8811 	msr	BASEPRI, r3
 800f4ba:	f3bf 8f6f 	isb	sy
 800f4be:	f3bf 8f4f 	dsb	sy
 800f4c2:	b662      	cpsie	i
 800f4c4:	61bb      	str	r3, [r7, #24]
 800f4c6:	e7fe      	b.n	800f4c6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4c8:	f001 fe16 	bl	80110f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d01f      	beq.n	800f518 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f4d8:	68b9      	ldr	r1, [r7, #8]
 800f4da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4dc:	f000 f979 	bl	800f7d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	1e5a      	subs	r2, r3, #1
 800f4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00f      	beq.n	800f510 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	3310      	adds	r3, #16
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f000 ff01 	bl	80102fc <xTaskRemoveFromEventList>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d007      	beq.n	800f510 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f500:	4b3c      	ldr	r3, [pc, #240]	; (800f5f4 <xQueueReceive+0x1c0>)
 800f502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f506:	601a      	str	r2, [r3, #0]
 800f508:	f3bf 8f4f 	dsb	sy
 800f50c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f510:	f001 fe24 	bl	801115c <vPortExitCritical>
				return pdPASS;
 800f514:	2301      	movs	r3, #1
 800f516:	e069      	b.n	800f5ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d103      	bne.n	800f526 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f51e:	f001 fe1d 	bl	801115c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f522:	2300      	movs	r3, #0
 800f524:	e062      	b.n	800f5ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d106      	bne.n	800f53a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f52c:	f107 0310 	add.w	r3, r7, #16
 800f530:	4618      	mov	r0, r3
 800f532:	f000 ff47 	bl	80103c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f536:	2301      	movs	r3, #1
 800f538:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f53a:	f001 fe0f 	bl	801115c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f53e:	f000 fc91 	bl	800fe64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f542:	f001 fdd9 	bl	80110f8 <vPortEnterCritical>
 800f546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f54c:	b25b      	sxtb	r3, r3
 800f54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f552:	d103      	bne.n	800f55c <xQueueReceive+0x128>
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	2200      	movs	r2, #0
 800f558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f562:	b25b      	sxtb	r3, r3
 800f564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f568:	d103      	bne.n	800f572 <xQueueReceive+0x13e>
 800f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56c:	2200      	movs	r2, #0
 800f56e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f572:	f001 fdf3 	bl	801115c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f576:	1d3a      	adds	r2, r7, #4
 800f578:	f107 0310 	add.w	r3, r7, #16
 800f57c:	4611      	mov	r1, r2
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 ff36 	bl	80103f0 <xTaskCheckForTimeOut>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d123      	bne.n	800f5d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f58a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f58c:	f000 f999 	bl	800f8c2 <prvIsQueueEmpty>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d017      	beq.n	800f5c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f598:	3324      	adds	r3, #36	; 0x24
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	4611      	mov	r1, r2
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 fe5a 	bl	8010258 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5a6:	f000 f93a 	bl	800f81e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f5aa:	f000 fc69 	bl	800fe80 <xTaskResumeAll>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d189      	bne.n	800f4c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f5b4:	4b0f      	ldr	r3, [pc, #60]	; (800f5f4 <xQueueReceive+0x1c0>)
 800f5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ba:	601a      	str	r2, [r3, #0]
 800f5bc:	f3bf 8f4f 	dsb	sy
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	e780      	b.n	800f4c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f5c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5c8:	f000 f929 	bl	800f81e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5cc:	f000 fc58 	bl	800fe80 <xTaskResumeAll>
 800f5d0:	e77a      	b.n	800f4c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f5d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5d4:	f000 f923 	bl	800f81e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5d8:	f000 fc52 	bl	800fe80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5de:	f000 f970 	bl	800f8c2 <prvIsQueueEmpty>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	f43f af6f 	beq.w	800f4c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f5ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3730      	adds	r7, #48	; 0x30
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	e000ed04 	.word	0xe000ed04

0800f5f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b08e      	sub	sp, #56	; 0x38
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10b      	bne.n	800f626 <xQueueReceiveFromISR+0x2e>
 800f60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f612:	b672      	cpsid	i
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	b662      	cpsie	i
 800f622:	623b      	str	r3, [r7, #32]
 800f624:	e7fe      	b.n	800f624 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d103      	bne.n	800f634 <xQueueReceiveFromISR+0x3c>
 800f62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f630:	2b00      	cmp	r3, #0
 800f632:	d101      	bne.n	800f638 <xQueueReceiveFromISR+0x40>
 800f634:	2301      	movs	r3, #1
 800f636:	e000      	b.n	800f63a <xQueueReceiveFromISR+0x42>
 800f638:	2300      	movs	r3, #0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d10b      	bne.n	800f656 <xQueueReceiveFromISR+0x5e>
 800f63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f642:	b672      	cpsid	i
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	b662      	cpsie	i
 800f652:	61fb      	str	r3, [r7, #28]
 800f654:	e7fe      	b.n	800f654 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f656:	f001 fe2f 	bl	80112b8 <vPortValidateInterruptPriority>
	__asm volatile
 800f65a:	f3ef 8211 	mrs	r2, BASEPRI
 800f65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f662:	b672      	cpsid	i
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	b662      	cpsie	i
 800f672:	61ba      	str	r2, [r7, #24]
 800f674:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f676:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f678:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f67e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f682:	2b00      	cmp	r3, #0
 800f684:	d02f      	beq.n	800f6e6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f690:	68b9      	ldr	r1, [r7, #8]
 800f692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f694:	f000 f89d 	bl	800f7d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69a:	1e5a      	subs	r2, r3, #1
 800f69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f6a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a8:	d112      	bne.n	800f6d0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ac:	691b      	ldr	r3, [r3, #16]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d016      	beq.n	800f6e0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b4:	3310      	adds	r3, #16
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f000 fe20 	bl	80102fc <xTaskRemoveFromEventList>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00e      	beq.n	800f6e0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d00b      	beq.n	800f6e0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	e007      	b.n	800f6e0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	b2db      	uxtb	r3, r3
 800f6d8:	b25a      	sxtb	r2, r3
 800f6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	637b      	str	r3, [r7, #52]	; 0x34
 800f6e4:	e001      	b.n	800f6ea <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3738      	adds	r7, #56	; 0x38
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b086      	sub	sp, #24
 800f702:	af00      	add	r7, sp, #0
 800f704:	60f8      	str	r0, [r7, #12]
 800f706:	60b9      	str	r1, [r7, #8]
 800f708:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f70a:	2300      	movs	r3, #0
 800f70c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f712:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d10d      	bne.n	800f738 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d14d      	bne.n	800f7c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 ffc5 	bl	80106b8 <xTaskPriorityDisinherit>
 800f72e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2200      	movs	r2, #0
 800f734:	609a      	str	r2, [r3, #8]
 800f736:	e043      	b.n	800f7c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d119      	bne.n	800f772 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6858      	ldr	r0, [r3, #4]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f746:	461a      	mov	r2, r3
 800f748:	68b9      	ldr	r1, [r7, #8]
 800f74a:	f002 fd3f 	bl	80121cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	685a      	ldr	r2, [r3, #4]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f756:	441a      	add	r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	685a      	ldr	r2, [r3, #4]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	429a      	cmp	r2, r3
 800f766:	d32b      	bcc.n	800f7c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	605a      	str	r2, [r3, #4]
 800f770:	e026      	b.n	800f7c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	68d8      	ldr	r0, [r3, #12]
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f77a:	461a      	mov	r2, r3
 800f77c:	68b9      	ldr	r1, [r7, #8]
 800f77e:	f002 fd25 	bl	80121cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	68da      	ldr	r2, [r3, #12]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f78a:	425b      	negs	r3, r3
 800f78c:	441a      	add	r2, r3
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	68da      	ldr	r2, [r3, #12]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d207      	bcs.n	800f7ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	689a      	ldr	r2, [r3, #8]
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a6:	425b      	negs	r3, r3
 800f7a8:	441a      	add	r2, r3
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	d105      	bne.n	800f7c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d002      	beq.n	800f7c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	3b01      	subs	r3, #1
 800f7be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	1c5a      	adds	r2, r3, #1
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f7c8:	697b      	ldr	r3, [r7, #20]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3718      	adds	r7, #24
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b082      	sub	sp, #8
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
 800f7da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d018      	beq.n	800f816 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	68da      	ldr	r2, [r3, #12]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ec:	441a      	add	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	68da      	ldr	r2, [r3, #12]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	689b      	ldr	r3, [r3, #8]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d303      	bcc.n	800f806 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	68d9      	ldr	r1, [r3, #12]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f80e:	461a      	mov	r2, r3
 800f810:	6838      	ldr	r0, [r7, #0]
 800f812:	f002 fcdb 	bl	80121cc <memcpy>
	}
}
 800f816:	bf00      	nop
 800f818:	3708      	adds	r7, #8
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f81e:	b580      	push	{r7, lr}
 800f820:	b084      	sub	sp, #16
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f826:	f001 fc67 	bl	80110f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f830:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f832:	e011      	b.n	800f858 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d012      	beq.n	800f862 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	3324      	adds	r3, #36	; 0x24
 800f840:	4618      	mov	r0, r3
 800f842:	f000 fd5b 	bl	80102fc <xTaskRemoveFromEventList>
 800f846:	4603      	mov	r3, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d001      	beq.n	800f850 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f84c:	f000 fe34 	bl	80104b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f850:	7bfb      	ldrb	r3, [r7, #15]
 800f852:	3b01      	subs	r3, #1
 800f854:	b2db      	uxtb	r3, r3
 800f856:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	dce9      	bgt.n	800f834 <prvUnlockQueue+0x16>
 800f860:	e000      	b.n	800f864 <prvUnlockQueue+0x46>
					break;
 800f862:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	22ff      	movs	r2, #255	; 0xff
 800f868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f86c:	f001 fc76 	bl	801115c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f870:	f001 fc42 	bl	80110f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f87a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f87c:	e011      	b.n	800f8a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	691b      	ldr	r3, [r3, #16]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d012      	beq.n	800f8ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	3310      	adds	r3, #16
 800f88a:	4618      	mov	r0, r3
 800f88c:	f000 fd36 	bl	80102fc <xTaskRemoveFromEventList>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f896:	f000 fe0f 	bl	80104b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f89a:	7bbb      	ldrb	r3, [r7, #14]
 800f89c:	3b01      	subs	r3, #1
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f8a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	dce9      	bgt.n	800f87e <prvUnlockQueue+0x60>
 800f8aa:	e000      	b.n	800f8ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f8ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	22ff      	movs	r2, #255	; 0xff
 800f8b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f8b6:	f001 fc51 	bl	801115c <vPortExitCritical>
}
 800f8ba:	bf00      	nop
 800f8bc:	3710      	adds	r7, #16
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}

0800f8c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f8c2:	b580      	push	{r7, lr}
 800f8c4:	b084      	sub	sp, #16
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8ca:	f001 fc15 	bl	80110f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d102      	bne.n	800f8dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	60fb      	str	r3, [r7, #12]
 800f8da:	e001      	b.n	800f8e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8e0:	f001 fc3c 	bl	801115c <vPortExitCritical>

	return xReturn;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}

0800f8ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f8ee:	b580      	push	{r7, lr}
 800f8f0:	b084      	sub	sp, #16
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8f6:	f001 fbff 	bl	80110f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f902:	429a      	cmp	r2, r3
 800f904:	d102      	bne.n	800f90c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f906:	2301      	movs	r3, #1
 800f908:	60fb      	str	r3, [r7, #12]
 800f90a:	e001      	b.n	800f910 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f90c:	2300      	movs	r3, #0
 800f90e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f910:	f001 fc24 	bl	801115c <vPortExitCritical>

	return xReturn;
 800f914:	68fb      	ldr	r3, [r7, #12]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
	...

0800f920 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f92a:	2300      	movs	r3, #0
 800f92c:	60fb      	str	r3, [r7, #12]
 800f92e:	e014      	b.n	800f95a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f930:	4a0e      	ldr	r2, [pc, #56]	; (800f96c <vQueueAddToRegistry+0x4c>)
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d10b      	bne.n	800f954 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f93c:	490b      	ldr	r1, [pc, #44]	; (800f96c <vQueueAddToRegistry+0x4c>)
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	683a      	ldr	r2, [r7, #0]
 800f942:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f946:	4a09      	ldr	r2, [pc, #36]	; (800f96c <vQueueAddToRegistry+0x4c>)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	00db      	lsls	r3, r3, #3
 800f94c:	4413      	add	r3, r2
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f952:	e005      	b.n	800f960 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	3301      	adds	r3, #1
 800f958:	60fb      	str	r3, [r7, #12]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2b07      	cmp	r3, #7
 800f95e:	d9e7      	bls.n	800f930 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f960:	bf00      	nop
 800f962:	3714      	adds	r7, #20
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr
 800f96c:	2000b130 	.word	0x2000b130

0800f970 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f970:	b580      	push	{r7, lr}
 800f972:	b086      	sub	sp, #24
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f980:	f001 fbba 	bl	80110f8 <vPortEnterCritical>
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f98a:	b25b      	sxtb	r3, r3
 800f98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f990:	d103      	bne.n	800f99a <vQueueWaitForMessageRestricted+0x2a>
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2200      	movs	r2, #0
 800f996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9a0:	b25b      	sxtb	r3, r3
 800f9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a6:	d103      	bne.n	800f9b0 <vQueueWaitForMessageRestricted+0x40>
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9b0:	f001 fbd4 	bl	801115c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d106      	bne.n	800f9ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	3324      	adds	r3, #36	; 0x24
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	68b9      	ldr	r1, [r7, #8]
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f000 fc6d 	bl	80102a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f9ca:	6978      	ldr	r0, [r7, #20]
 800f9cc:	f7ff ff27 	bl	800f81e <prvUnlockQueue>
	}
 800f9d0:	bf00      	nop
 800f9d2:	3718      	adds	r7, #24
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b08e      	sub	sp, #56	; 0x38
 800f9dc:	af04      	add	r7, sp, #16
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d10b      	bne.n	800fa04 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f0:	b672      	cpsid	i
 800f9f2:	f383 8811 	msr	BASEPRI, r3
 800f9f6:	f3bf 8f6f 	isb	sy
 800f9fa:	f3bf 8f4f 	dsb	sy
 800f9fe:	b662      	cpsie	i
 800fa00:	623b      	str	r3, [r7, #32]
 800fa02:	e7fe      	b.n	800fa02 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d10b      	bne.n	800fa22 <xTaskCreateStatic+0x4a>
 800fa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0e:	b672      	cpsid	i
 800fa10:	f383 8811 	msr	BASEPRI, r3
 800fa14:	f3bf 8f6f 	isb	sy
 800fa18:	f3bf 8f4f 	dsb	sy
 800fa1c:	b662      	cpsie	i
 800fa1e:	61fb      	str	r3, [r7, #28]
 800fa20:	e7fe      	b.n	800fa20 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fa22:	2360      	movs	r3, #96	; 0x60
 800fa24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	2b60      	cmp	r3, #96	; 0x60
 800fa2a:	d00b      	beq.n	800fa44 <xTaskCreateStatic+0x6c>
 800fa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa30:	b672      	cpsid	i
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	b662      	cpsie	i
 800fa40:	61bb      	str	r3, [r7, #24]
 800fa42:	e7fe      	b.n	800fa42 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fa44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d01e      	beq.n	800fa8a <xTaskCreateStatic+0xb2>
 800fa4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d01b      	beq.n	800fa8a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	2202      	movs	r2, #2
 800fa60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fa64:	2300      	movs	r3, #0
 800fa66:	9303      	str	r3, [sp, #12]
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	9302      	str	r3, [sp, #8]
 800fa6c:	f107 0314 	add.w	r3, r7, #20
 800fa70:	9301      	str	r3, [sp, #4]
 800fa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa74:	9300      	str	r3, [sp, #0]
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	68b9      	ldr	r1, [r7, #8]
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f000 f850 	bl	800fb22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa84:	f000 f8e0 	bl	800fc48 <prvAddNewTaskToReadyList>
 800fa88:	e001      	b.n	800fa8e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fa8e:	697b      	ldr	r3, [r7, #20]
	}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3728      	adds	r7, #40	; 0x28
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b08c      	sub	sp, #48	; 0x30
 800fa9c:	af04      	add	r7, sp, #16
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	603b      	str	r3, [r7, #0]
 800faa4:	4613      	mov	r3, r2
 800faa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800faa8:	88fb      	ldrh	r3, [r7, #6]
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	4618      	mov	r0, r3
 800faae:	f001 fc45 	bl	801133c <pvPortMalloc>
 800fab2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00e      	beq.n	800fad8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800faba:	2060      	movs	r0, #96	; 0x60
 800fabc:	f001 fc3e 	bl	801133c <pvPortMalloc>
 800fac0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d003      	beq.n	800fad0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	697a      	ldr	r2, [r7, #20]
 800facc:	631a      	str	r2, [r3, #48]	; 0x30
 800face:	e005      	b.n	800fadc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fad0:	6978      	ldr	r0, [r7, #20]
 800fad2:	f001 fcff 	bl	80114d4 <vPortFree>
 800fad6:	e001      	b.n	800fadc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fad8:	2300      	movs	r3, #0
 800fada:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d017      	beq.n	800fb12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	2200      	movs	r2, #0
 800fae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800faea:	88fa      	ldrh	r2, [r7, #6]
 800faec:	2300      	movs	r3, #0
 800faee:	9303      	str	r3, [sp, #12]
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	9302      	str	r3, [sp, #8]
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	9301      	str	r3, [sp, #4]
 800faf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	68b9      	ldr	r1, [r7, #8]
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f000 f80e 	bl	800fb22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb06:	69f8      	ldr	r0, [r7, #28]
 800fb08:	f000 f89e 	bl	800fc48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	61bb      	str	r3, [r7, #24]
 800fb10:	e002      	b.n	800fb18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb12:	f04f 33ff 	mov.w	r3, #4294967295
 800fb16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fb18:	69bb      	ldr	r3, [r7, #24]
	}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3720      	adds	r7, #32
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b088      	sub	sp, #32
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	60f8      	str	r0, [r7, #12]
 800fb2a:	60b9      	str	r1, [r7, #8]
 800fb2c:	607a      	str	r2, [r7, #4]
 800fb2e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	461a      	mov	r2, r3
 800fb3a:	21a5      	movs	r1, #165	; 0xa5
 800fb3c:	f002 fb51 	bl	80121e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb44:	6879      	ldr	r1, [r7, #4]
 800fb46:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fb4a:	440b      	add	r3, r1
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	4413      	add	r3, r2
 800fb50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	f023 0307 	bic.w	r3, r3, #7
 800fb58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	f003 0307 	and.w	r3, r3, #7
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00b      	beq.n	800fb7c <prvInitialiseNewTask+0x5a>
 800fb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb68:	b672      	cpsid	i
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	b662      	cpsie	i
 800fb78:	617b      	str	r3, [r7, #20]
 800fb7a:	e7fe      	b.n	800fb7a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d01f      	beq.n	800fbc2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb82:	2300      	movs	r3, #0
 800fb84:	61fb      	str	r3, [r7, #28]
 800fb86:	e012      	b.n	800fbae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fb88:	68ba      	ldr	r2, [r7, #8]
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	7819      	ldrb	r1, [r3, #0]
 800fb90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	4413      	add	r3, r2
 800fb96:	3334      	adds	r3, #52	; 0x34
 800fb98:	460a      	mov	r2, r1
 800fb9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	4413      	add	r3, r2
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d006      	beq.n	800fbb6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	61fb      	str	r3, [r7, #28]
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	2b0f      	cmp	r3, #15
 800fbb2:	d9e9      	bls.n	800fb88 <prvInitialiseNewTask+0x66>
 800fbb4:	e000      	b.n	800fbb8 <prvInitialiseNewTask+0x96>
			{
				break;
 800fbb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fbc0:	e003      	b.n	800fbca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbcc:	2b37      	cmp	r3, #55	; 0x37
 800fbce:	d901      	bls.n	800fbd4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fbd0:	2337      	movs	r3, #55	; 0x37
 800fbd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe8:	3304      	adds	r3, #4
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7ff f8a4 	bl	800ed38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf2:	3318      	adds	r3, #24
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7ff f89f 	bl	800ed38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc12:	2200      	movs	r2, #0
 800fc14:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc18:	2200      	movs	r2, #0
 800fc1a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fc24:	683a      	ldr	r2, [r7, #0]
 800fc26:	68f9      	ldr	r1, [r7, #12]
 800fc28:	69b8      	ldr	r0, [r7, #24]
 800fc2a:	f001 f95d 	bl	8010ee8 <pxPortInitialiseStack>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc40:	bf00      	nop
 800fc42:	3720      	adds	r7, #32
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fc50:	f001 fa52 	bl	80110f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fc54:	4b2d      	ldr	r3, [pc, #180]	; (800fd0c <prvAddNewTaskToReadyList+0xc4>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	4a2c      	ldr	r2, [pc, #176]	; (800fd0c <prvAddNewTaskToReadyList+0xc4>)
 800fc5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fc5e:	4b2c      	ldr	r3, [pc, #176]	; (800fd10 <prvAddNewTaskToReadyList+0xc8>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d109      	bne.n	800fc7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fc66:	4a2a      	ldr	r2, [pc, #168]	; (800fd10 <prvAddNewTaskToReadyList+0xc8>)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc6c:	4b27      	ldr	r3, [pc, #156]	; (800fd0c <prvAddNewTaskToReadyList+0xc4>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d110      	bne.n	800fc96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc74:	f000 fc46 	bl	8010504 <prvInitialiseTaskLists>
 800fc78:	e00d      	b.n	800fc96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fc7a:	4b26      	ldr	r3, [pc, #152]	; (800fd14 <prvAddNewTaskToReadyList+0xcc>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d109      	bne.n	800fc96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fc82:	4b23      	ldr	r3, [pc, #140]	; (800fd10 <prvAddNewTaskToReadyList+0xc8>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d802      	bhi.n	800fc96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fc90:	4a1f      	ldr	r2, [pc, #124]	; (800fd10 <prvAddNewTaskToReadyList+0xc8>)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fc96:	4b20      	ldr	r3, [pc, #128]	; (800fd18 <prvAddNewTaskToReadyList+0xd0>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	4a1e      	ldr	r2, [pc, #120]	; (800fd18 <prvAddNewTaskToReadyList+0xd0>)
 800fc9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fca0:	4b1d      	ldr	r3, [pc, #116]	; (800fd18 <prvAddNewTaskToReadyList+0xd0>)
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcac:	4b1b      	ldr	r3, [pc, #108]	; (800fd1c <prvAddNewTaskToReadyList+0xd4>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d903      	bls.n	800fcbc <prvAddNewTaskToReadyList+0x74>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb8:	4a18      	ldr	r2, [pc, #96]	; (800fd1c <prvAddNewTaskToReadyList+0xd4>)
 800fcba:	6013      	str	r3, [r2, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	4413      	add	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4a15      	ldr	r2, [pc, #84]	; (800fd20 <prvAddNewTaskToReadyList+0xd8>)
 800fcca:	441a      	add	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	3304      	adds	r3, #4
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	4610      	mov	r0, r2
 800fcd4:	f7ff f83d 	bl	800ed52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fcd8:	f001 fa40 	bl	801115c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fcdc:	4b0d      	ldr	r3, [pc, #52]	; (800fd14 <prvAddNewTaskToReadyList+0xcc>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00e      	beq.n	800fd02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fce4:	4b0a      	ldr	r3, [pc, #40]	; (800fd10 <prvAddNewTaskToReadyList+0xc8>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d207      	bcs.n	800fd02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fcf2:	4b0c      	ldr	r3, [pc, #48]	; (800fd24 <prvAddNewTaskToReadyList+0xdc>)
 800fcf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcf8:	601a      	str	r2, [r3, #0]
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd02:	bf00      	nop
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	20000e64 	.word	0x20000e64
 800fd10:	20000990 	.word	0x20000990
 800fd14:	20000e70 	.word	0x20000e70
 800fd18:	20000e80 	.word	0x20000e80
 800fd1c:	20000e6c 	.word	0x20000e6c
 800fd20:	20000994 	.word	0x20000994
 800fd24:	e000ed04 	.word	0xe000ed04

0800fd28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fd30:	2300      	movs	r3, #0
 800fd32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d018      	beq.n	800fd6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fd3a:	4b14      	ldr	r3, [pc, #80]	; (800fd8c <vTaskDelay+0x64>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00b      	beq.n	800fd5a <vTaskDelay+0x32>
 800fd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd46:	b672      	cpsid	i
 800fd48:	f383 8811 	msr	BASEPRI, r3
 800fd4c:	f3bf 8f6f 	isb	sy
 800fd50:	f3bf 8f4f 	dsb	sy
 800fd54:	b662      	cpsie	i
 800fd56:	60bb      	str	r3, [r7, #8]
 800fd58:	e7fe      	b.n	800fd58 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800fd5a:	f000 f883 	bl	800fe64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd5e:	2100      	movs	r1, #0
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 fd19 	bl	8010798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd66:	f000 f88b 	bl	800fe80 <xTaskResumeAll>
 800fd6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d107      	bne.n	800fd82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800fd72:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <vTaskDelay+0x68>)
 800fd74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd78:	601a      	str	r2, [r3, #0]
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd82:	bf00      	nop
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	20000e8c 	.word	0x20000e8c
 800fd90:	e000ed04 	.word	0xe000ed04

0800fd94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b08a      	sub	sp, #40	; 0x28
 800fd98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fda2:	463a      	mov	r2, r7
 800fda4:	1d39      	adds	r1, r7, #4
 800fda6:	f107 0308 	add.w	r3, r7, #8
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fe ff70 	bl	800ec90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fdb0:	6839      	ldr	r1, [r7, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68ba      	ldr	r2, [r7, #8]
 800fdb6:	9202      	str	r2, [sp, #8]
 800fdb8:	9301      	str	r3, [sp, #4]
 800fdba:	2300      	movs	r3, #0
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	460a      	mov	r2, r1
 800fdc2:	4922      	ldr	r1, [pc, #136]	; (800fe4c <vTaskStartScheduler+0xb8>)
 800fdc4:	4822      	ldr	r0, [pc, #136]	; (800fe50 <vTaskStartScheduler+0xbc>)
 800fdc6:	f7ff fe07 	bl	800f9d8 <xTaskCreateStatic>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	4b21      	ldr	r3, [pc, #132]	; (800fe54 <vTaskStartScheduler+0xc0>)
 800fdce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fdd0:	4b20      	ldr	r3, [pc, #128]	; (800fe54 <vTaskStartScheduler+0xc0>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d002      	beq.n	800fdde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fdd8:	2301      	movs	r3, #1
 800fdda:	617b      	str	r3, [r7, #20]
 800fddc:	e001      	b.n	800fde2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fdde:	2300      	movs	r3, #0
 800fde0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d102      	bne.n	800fdee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fde8:	f000 fd2a 	bl	8010840 <xTimerCreateTimerTask>
 800fdec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d117      	bne.n	800fe24 <vTaskStartScheduler+0x90>
 800fdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf8:	b672      	cpsid	i
 800fdfa:	f383 8811 	msr	BASEPRI, r3
 800fdfe:	f3bf 8f6f 	isb	sy
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	b662      	cpsie	i
 800fe08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fe0a:	4b13      	ldr	r3, [pc, #76]	; (800fe58 <vTaskStartScheduler+0xc4>)
 800fe0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fe12:	4b12      	ldr	r3, [pc, #72]	; (800fe5c <vTaskStartScheduler+0xc8>)
 800fe14:	2201      	movs	r2, #1
 800fe16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fe18:	4b11      	ldr	r3, [pc, #68]	; (800fe60 <vTaskStartScheduler+0xcc>)
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fe1e:	f001 f8ef 	bl	8011000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fe22:	e00f      	b.n	800fe44 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe2a:	d10b      	bne.n	800fe44 <vTaskStartScheduler+0xb0>
 800fe2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe30:	b672      	cpsid	i
 800fe32:	f383 8811 	msr	BASEPRI, r3
 800fe36:	f3bf 8f6f 	isb	sy
 800fe3a:	f3bf 8f4f 	dsb	sy
 800fe3e:	b662      	cpsie	i
 800fe40:	60fb      	str	r3, [r7, #12]
 800fe42:	e7fe      	b.n	800fe42 <vTaskStartScheduler+0xae>
}
 800fe44:	bf00      	nop
 800fe46:	3718      	adds	r7, #24
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	08013078 	.word	0x08013078
 800fe50:	080104d1 	.word	0x080104d1
 800fe54:	20000e88 	.word	0x20000e88
 800fe58:	20000e84 	.word	0x20000e84
 800fe5c:	20000e70 	.word	0x20000e70
 800fe60:	20000e68 	.word	0x20000e68

0800fe64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe64:	b480      	push	{r7}
 800fe66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fe68:	4b04      	ldr	r3, [pc, #16]	; (800fe7c <vTaskSuspendAll+0x18>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	3301      	adds	r3, #1
 800fe6e:	4a03      	ldr	r2, [pc, #12]	; (800fe7c <vTaskSuspendAll+0x18>)
 800fe70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fe72:	bf00      	nop
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr
 800fe7c:	20000e8c 	.word	0x20000e8c

0800fe80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fe86:	2300      	movs	r3, #0
 800fe88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe8e:	4b42      	ldr	r3, [pc, #264]	; (800ff98 <xTaskResumeAll+0x118>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d10b      	bne.n	800feae <xTaskResumeAll+0x2e>
 800fe96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9a:	b672      	cpsid	i
 800fe9c:	f383 8811 	msr	BASEPRI, r3
 800fea0:	f3bf 8f6f 	isb	sy
 800fea4:	f3bf 8f4f 	dsb	sy
 800fea8:	b662      	cpsie	i
 800feaa:	603b      	str	r3, [r7, #0]
 800feac:	e7fe      	b.n	800feac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800feae:	f001 f923 	bl	80110f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800feb2:	4b39      	ldr	r3, [pc, #228]	; (800ff98 <xTaskResumeAll+0x118>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	3b01      	subs	r3, #1
 800feb8:	4a37      	ldr	r2, [pc, #220]	; (800ff98 <xTaskResumeAll+0x118>)
 800feba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800febc:	4b36      	ldr	r3, [pc, #216]	; (800ff98 <xTaskResumeAll+0x118>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d162      	bne.n	800ff8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fec4:	4b35      	ldr	r3, [pc, #212]	; (800ff9c <xTaskResumeAll+0x11c>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d05e      	beq.n	800ff8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fecc:	e02f      	b.n	800ff2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fece:	4b34      	ldr	r3, [pc, #208]	; (800ffa0 <xTaskResumeAll+0x120>)
 800fed0:	68db      	ldr	r3, [r3, #12]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	3318      	adds	r3, #24
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fe ff96 	bl	800ee0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	3304      	adds	r3, #4
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fe ff91 	bl	800ee0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feee:	4b2d      	ldr	r3, [pc, #180]	; (800ffa4 <xTaskResumeAll+0x124>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d903      	bls.n	800fefe <xTaskResumeAll+0x7e>
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefa:	4a2a      	ldr	r2, [pc, #168]	; (800ffa4 <xTaskResumeAll+0x124>)
 800fefc:	6013      	str	r3, [r2, #0]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff02:	4613      	mov	r3, r2
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	4413      	add	r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	4a27      	ldr	r2, [pc, #156]	; (800ffa8 <xTaskResumeAll+0x128>)
 800ff0c:	441a      	add	r2, r3
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	3304      	adds	r3, #4
 800ff12:	4619      	mov	r1, r3
 800ff14:	4610      	mov	r0, r2
 800ff16:	f7fe ff1c 	bl	800ed52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff1e:	4b23      	ldr	r3, [pc, #140]	; (800ffac <xTaskResumeAll+0x12c>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d302      	bcc.n	800ff2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ff28:	4b21      	ldr	r3, [pc, #132]	; (800ffb0 <xTaskResumeAll+0x130>)
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff2e:	4b1c      	ldr	r3, [pc, #112]	; (800ffa0 <xTaskResumeAll+0x120>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d1cb      	bne.n	800fece <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d001      	beq.n	800ff40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ff3c:	f000 fb7e 	bl	801063c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ff40:	4b1c      	ldr	r3, [pc, #112]	; (800ffb4 <xTaskResumeAll+0x134>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d010      	beq.n	800ff6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ff4c:	f000 f846 	bl	800ffdc <xTaskIncrementTick>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d002      	beq.n	800ff5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ff56:	4b16      	ldr	r3, [pc, #88]	; (800ffb0 <xTaskResumeAll+0x130>)
 800ff58:	2201      	movs	r2, #1
 800ff5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	3b01      	subs	r3, #1
 800ff60:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1f1      	bne.n	800ff4c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ff68:	4b12      	ldr	r3, [pc, #72]	; (800ffb4 <xTaskResumeAll+0x134>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ff6e:	4b10      	ldr	r3, [pc, #64]	; (800ffb0 <xTaskResumeAll+0x130>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d009      	beq.n	800ff8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ff76:	2301      	movs	r3, #1
 800ff78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ff7a:	4b0f      	ldr	r3, [pc, #60]	; (800ffb8 <xTaskResumeAll+0x138>)
 800ff7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff80:	601a      	str	r2, [r3, #0]
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff8a:	f001 f8e7 	bl	801115c <vPortExitCritical>

	return xAlreadyYielded;
 800ff8e:	68bb      	ldr	r3, [r7, #8]
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	20000e8c 	.word	0x20000e8c
 800ff9c:	20000e64 	.word	0x20000e64
 800ffa0:	20000e24 	.word	0x20000e24
 800ffa4:	20000e6c 	.word	0x20000e6c
 800ffa8:	20000994 	.word	0x20000994
 800ffac:	20000990 	.word	0x20000990
 800ffb0:	20000e78 	.word	0x20000e78
 800ffb4:	20000e74 	.word	0x20000e74
 800ffb8:	e000ed04 	.word	0xe000ed04

0800ffbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ffc2:	4b05      	ldr	r3, [pc, #20]	; (800ffd8 <xTaskGetTickCount+0x1c>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ffc8:	687b      	ldr	r3, [r7, #4]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	370c      	adds	r7, #12
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop
 800ffd8:	20000e68 	.word	0x20000e68

0800ffdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b086      	sub	sp, #24
 800ffe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffe6:	4b4f      	ldr	r3, [pc, #316]	; (8010124 <xTaskIncrementTick+0x148>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f040 808a 	bne.w	8010104 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fff0:	4b4d      	ldr	r3, [pc, #308]	; (8010128 <xTaskIncrementTick+0x14c>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3301      	adds	r3, #1
 800fff6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fff8:	4a4b      	ldr	r2, [pc, #300]	; (8010128 <xTaskIncrementTick+0x14c>)
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d121      	bne.n	8010048 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010004:	4b49      	ldr	r3, [pc, #292]	; (801012c <xTaskIncrementTick+0x150>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d00b      	beq.n	8010026 <xTaskIncrementTick+0x4a>
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	b672      	cpsid	i
 8010014:	f383 8811 	msr	BASEPRI, r3
 8010018:	f3bf 8f6f 	isb	sy
 801001c:	f3bf 8f4f 	dsb	sy
 8010020:	b662      	cpsie	i
 8010022:	603b      	str	r3, [r7, #0]
 8010024:	e7fe      	b.n	8010024 <xTaskIncrementTick+0x48>
 8010026:	4b41      	ldr	r3, [pc, #260]	; (801012c <xTaskIncrementTick+0x150>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	60fb      	str	r3, [r7, #12]
 801002c:	4b40      	ldr	r3, [pc, #256]	; (8010130 <xTaskIncrementTick+0x154>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4a3e      	ldr	r2, [pc, #248]	; (801012c <xTaskIncrementTick+0x150>)
 8010032:	6013      	str	r3, [r2, #0]
 8010034:	4a3e      	ldr	r2, [pc, #248]	; (8010130 <xTaskIncrementTick+0x154>)
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	6013      	str	r3, [r2, #0]
 801003a:	4b3e      	ldr	r3, [pc, #248]	; (8010134 <xTaskIncrementTick+0x158>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	3301      	adds	r3, #1
 8010040:	4a3c      	ldr	r2, [pc, #240]	; (8010134 <xTaskIncrementTick+0x158>)
 8010042:	6013      	str	r3, [r2, #0]
 8010044:	f000 fafa 	bl	801063c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010048:	4b3b      	ldr	r3, [pc, #236]	; (8010138 <xTaskIncrementTick+0x15c>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	693a      	ldr	r2, [r7, #16]
 801004e:	429a      	cmp	r2, r3
 8010050:	d349      	bcc.n	80100e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010052:	4b36      	ldr	r3, [pc, #216]	; (801012c <xTaskIncrementTick+0x150>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d104      	bne.n	8010066 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801005c:	4b36      	ldr	r3, [pc, #216]	; (8010138 <xTaskIncrementTick+0x15c>)
 801005e:	f04f 32ff 	mov.w	r2, #4294967295
 8010062:	601a      	str	r2, [r3, #0]
					break;
 8010064:	e03f      	b.n	80100e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010066:	4b31      	ldr	r3, [pc, #196]	; (801012c <xTaskIncrementTick+0x150>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010076:	693a      	ldr	r2, [r7, #16]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	429a      	cmp	r2, r3
 801007c:	d203      	bcs.n	8010086 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801007e:	4a2e      	ldr	r2, [pc, #184]	; (8010138 <xTaskIncrementTick+0x15c>)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010084:	e02f      	b.n	80100e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	3304      	adds	r3, #4
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe febe 	bl	800ee0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010094:	2b00      	cmp	r3, #0
 8010096:	d004      	beq.n	80100a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	3318      	adds	r3, #24
 801009c:	4618      	mov	r0, r3
 801009e:	f7fe feb5 	bl	800ee0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100a6:	4b25      	ldr	r3, [pc, #148]	; (801013c <xTaskIncrementTick+0x160>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d903      	bls.n	80100b6 <xTaskIncrementTick+0xda>
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b2:	4a22      	ldr	r2, [pc, #136]	; (801013c <xTaskIncrementTick+0x160>)
 80100b4:	6013      	str	r3, [r2, #0]
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ba:	4613      	mov	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4413      	add	r3, r2
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	4a1f      	ldr	r2, [pc, #124]	; (8010140 <xTaskIncrementTick+0x164>)
 80100c4:	441a      	add	r2, r3
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	3304      	adds	r3, #4
 80100ca:	4619      	mov	r1, r3
 80100cc:	4610      	mov	r0, r2
 80100ce:	f7fe fe40 	bl	800ed52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100d6:	4b1b      	ldr	r3, [pc, #108]	; (8010144 <xTaskIncrementTick+0x168>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100dc:	429a      	cmp	r2, r3
 80100de:	d3b8      	bcc.n	8010052 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80100e0:	2301      	movs	r3, #1
 80100e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100e4:	e7b5      	b.n	8010052 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80100e6:	4b17      	ldr	r3, [pc, #92]	; (8010144 <xTaskIncrementTick+0x168>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ec:	4914      	ldr	r1, [pc, #80]	; (8010140 <xTaskIncrementTick+0x164>)
 80100ee:	4613      	mov	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	4413      	add	r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	440b      	add	r3, r1
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d907      	bls.n	801010e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80100fe:	2301      	movs	r3, #1
 8010100:	617b      	str	r3, [r7, #20]
 8010102:	e004      	b.n	801010e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010104:	4b10      	ldr	r3, [pc, #64]	; (8010148 <xTaskIncrementTick+0x16c>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	3301      	adds	r3, #1
 801010a:	4a0f      	ldr	r2, [pc, #60]	; (8010148 <xTaskIncrementTick+0x16c>)
 801010c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801010e:	4b0f      	ldr	r3, [pc, #60]	; (801014c <xTaskIncrementTick+0x170>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d001      	beq.n	801011a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8010116:	2301      	movs	r3, #1
 8010118:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801011a:	697b      	ldr	r3, [r7, #20]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3718      	adds	r7, #24
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	20000e8c 	.word	0x20000e8c
 8010128:	20000e68 	.word	0x20000e68
 801012c:	20000e1c 	.word	0x20000e1c
 8010130:	20000e20 	.word	0x20000e20
 8010134:	20000e7c 	.word	0x20000e7c
 8010138:	20000e84 	.word	0x20000e84
 801013c:	20000e6c 	.word	0x20000e6c
 8010140:	20000994 	.word	0x20000994
 8010144:	20000990 	.word	0x20000990
 8010148:	20000e74 	.word	0x20000e74
 801014c:	20000e78 	.word	0x20000e78

08010150 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010156:	4b3b      	ldr	r3, [pc, #236]	; (8010244 <vTaskSwitchContext+0xf4>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d003      	beq.n	8010166 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801015e:	4b3a      	ldr	r3, [pc, #232]	; (8010248 <vTaskSwitchContext+0xf8>)
 8010160:	2201      	movs	r2, #1
 8010162:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010164:	e069      	b.n	801023a <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8010166:	4b38      	ldr	r3, [pc, #224]	; (8010248 <vTaskSwitchContext+0xf8>)
 8010168:	2200      	movs	r2, #0
 801016a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801016c:	4b37      	ldr	r3, [pc, #220]	; (801024c <vTaskSwitchContext+0xfc>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010172:	613b      	str	r3, [r7, #16]
 8010174:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8010178:	60fb      	str	r3, [r7, #12]
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	68fa      	ldr	r2, [r7, #12]
 8010180:	429a      	cmp	r2, r3
 8010182:	d111      	bne.n	80101a8 <vTaskSwitchContext+0x58>
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	3304      	adds	r3, #4
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	429a      	cmp	r2, r3
 801018e:	d10b      	bne.n	80101a8 <vTaskSwitchContext+0x58>
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	3308      	adds	r3, #8
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	429a      	cmp	r2, r3
 801019a:	d105      	bne.n	80101a8 <vTaskSwitchContext+0x58>
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	330c      	adds	r3, #12
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	68fa      	ldr	r2, [r7, #12]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d008      	beq.n	80101ba <vTaskSwitchContext+0x6a>
 80101a8:	4b28      	ldr	r3, [pc, #160]	; (801024c <vTaskSwitchContext+0xfc>)
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	4b27      	ldr	r3, [pc, #156]	; (801024c <vTaskSwitchContext+0xfc>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3334      	adds	r3, #52	; 0x34
 80101b2:	4619      	mov	r1, r3
 80101b4:	4610      	mov	r0, r2
 80101b6:	f7f0 fa02 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101ba:	4b25      	ldr	r3, [pc, #148]	; (8010250 <vTaskSwitchContext+0x100>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	617b      	str	r3, [r7, #20]
 80101c0:	e011      	b.n	80101e6 <vTaskSwitchContext+0x96>
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d10b      	bne.n	80101e0 <vTaskSwitchContext+0x90>
 80101c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101cc:	b672      	cpsid	i
 80101ce:	f383 8811 	msr	BASEPRI, r3
 80101d2:	f3bf 8f6f 	isb	sy
 80101d6:	f3bf 8f4f 	dsb	sy
 80101da:	b662      	cpsie	i
 80101dc:	607b      	str	r3, [r7, #4]
 80101de:	e7fe      	b.n	80101de <vTaskSwitchContext+0x8e>
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	3b01      	subs	r3, #1
 80101e4:	617b      	str	r3, [r7, #20]
 80101e6:	491b      	ldr	r1, [pc, #108]	; (8010254 <vTaskSwitchContext+0x104>)
 80101e8:	697a      	ldr	r2, [r7, #20]
 80101ea:	4613      	mov	r3, r2
 80101ec:	009b      	lsls	r3, r3, #2
 80101ee:	4413      	add	r3, r2
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	440b      	add	r3, r1
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d0e3      	beq.n	80101c2 <vTaskSwitchContext+0x72>
 80101fa:	697a      	ldr	r2, [r7, #20]
 80101fc:	4613      	mov	r3, r2
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	4413      	add	r3, r2
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4a13      	ldr	r2, [pc, #76]	; (8010254 <vTaskSwitchContext+0x104>)
 8010206:	4413      	add	r3, r2
 8010208:	60bb      	str	r3, [r7, #8]
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	685a      	ldr	r2, [r3, #4]
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	605a      	str	r2, [r3, #4]
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	3308      	adds	r3, #8
 801021c:	429a      	cmp	r2, r3
 801021e:	d104      	bne.n	801022a <vTaskSwitchContext+0xda>
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	685a      	ldr	r2, [r3, #4]
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	605a      	str	r2, [r3, #4]
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	4a06      	ldr	r2, [pc, #24]	; (801024c <vTaskSwitchContext+0xfc>)
 8010232:	6013      	str	r3, [r2, #0]
 8010234:	4a06      	ldr	r2, [pc, #24]	; (8010250 <vTaskSwitchContext+0x100>)
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	6013      	str	r3, [r2, #0]
}
 801023a:	bf00      	nop
 801023c:	3718      	adds	r7, #24
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	20000e8c 	.word	0x20000e8c
 8010248:	20000e78 	.word	0x20000e78
 801024c:	20000990 	.word	0x20000990
 8010250:	20000e6c 	.word	0x20000e6c
 8010254:	20000994 	.word	0x20000994

08010258 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d10b      	bne.n	8010280 <vTaskPlaceOnEventList+0x28>
 8010268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026c:	b672      	cpsid	i
 801026e:	f383 8811 	msr	BASEPRI, r3
 8010272:	f3bf 8f6f 	isb	sy
 8010276:	f3bf 8f4f 	dsb	sy
 801027a:	b662      	cpsie	i
 801027c:	60fb      	str	r3, [r7, #12]
 801027e:	e7fe      	b.n	801027e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010280:	4b07      	ldr	r3, [pc, #28]	; (80102a0 <vTaskPlaceOnEventList+0x48>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	3318      	adds	r3, #24
 8010286:	4619      	mov	r1, r3
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7fe fd86 	bl	800ed9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801028e:	2101      	movs	r1, #1
 8010290:	6838      	ldr	r0, [r7, #0]
 8010292:	f000 fa81 	bl	8010798 <prvAddCurrentTaskToDelayedList>
}
 8010296:	bf00      	nop
 8010298:	3710      	adds	r7, #16
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	20000990 	.word	0x20000990

080102a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b086      	sub	sp, #24
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d10b      	bne.n	80102ce <vTaskPlaceOnEventListRestricted+0x2a>
 80102b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ba:	b672      	cpsid	i
 80102bc:	f383 8811 	msr	BASEPRI, r3
 80102c0:	f3bf 8f6f 	isb	sy
 80102c4:	f3bf 8f4f 	dsb	sy
 80102c8:	b662      	cpsie	i
 80102ca:	617b      	str	r3, [r7, #20]
 80102cc:	e7fe      	b.n	80102cc <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102ce:	4b0a      	ldr	r3, [pc, #40]	; (80102f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	3318      	adds	r3, #24
 80102d4:	4619      	mov	r1, r3
 80102d6:	68f8      	ldr	r0, [r7, #12]
 80102d8:	f7fe fd3b 	bl	800ed52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d002      	beq.n	80102e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80102e2:	f04f 33ff 	mov.w	r3, #4294967295
 80102e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80102e8:	6879      	ldr	r1, [r7, #4]
 80102ea:	68b8      	ldr	r0, [r7, #8]
 80102ec:	f000 fa54 	bl	8010798 <prvAddCurrentTaskToDelayedList>
	}
 80102f0:	bf00      	nop
 80102f2:	3718      	adds	r7, #24
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	20000990 	.word	0x20000990

080102fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b086      	sub	sp, #24
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d10b      	bne.n	801032a <xTaskRemoveFromEventList+0x2e>
 8010312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010316:	b672      	cpsid	i
 8010318:	f383 8811 	msr	BASEPRI, r3
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f3bf 8f4f 	dsb	sy
 8010324:	b662      	cpsie	i
 8010326:	60fb      	str	r3, [r7, #12]
 8010328:	e7fe      	b.n	8010328 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	3318      	adds	r3, #24
 801032e:	4618      	mov	r0, r3
 8010330:	f7fe fd6c 	bl	800ee0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010334:	4b1d      	ldr	r3, [pc, #116]	; (80103ac <xTaskRemoveFromEventList+0xb0>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d11d      	bne.n	8010378 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	3304      	adds	r3, #4
 8010340:	4618      	mov	r0, r3
 8010342:	f7fe fd63 	bl	800ee0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034a:	4b19      	ldr	r3, [pc, #100]	; (80103b0 <xTaskRemoveFromEventList+0xb4>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	429a      	cmp	r2, r3
 8010350:	d903      	bls.n	801035a <xTaskRemoveFromEventList+0x5e>
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010356:	4a16      	ldr	r2, [pc, #88]	; (80103b0 <xTaskRemoveFromEventList+0xb4>)
 8010358:	6013      	str	r3, [r2, #0]
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801035e:	4613      	mov	r3, r2
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	4413      	add	r3, r2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4a13      	ldr	r2, [pc, #76]	; (80103b4 <xTaskRemoveFromEventList+0xb8>)
 8010368:	441a      	add	r2, r3
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	3304      	adds	r3, #4
 801036e:	4619      	mov	r1, r3
 8010370:	4610      	mov	r0, r2
 8010372:	f7fe fcee 	bl	800ed52 <vListInsertEnd>
 8010376:	e005      	b.n	8010384 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	3318      	adds	r3, #24
 801037c:	4619      	mov	r1, r3
 801037e:	480e      	ldr	r0, [pc, #56]	; (80103b8 <xTaskRemoveFromEventList+0xbc>)
 8010380:	f7fe fce7 	bl	800ed52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010388:	4b0c      	ldr	r3, [pc, #48]	; (80103bc <xTaskRemoveFromEventList+0xc0>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801038e:	429a      	cmp	r2, r3
 8010390:	d905      	bls.n	801039e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010392:	2301      	movs	r3, #1
 8010394:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010396:	4b0a      	ldr	r3, [pc, #40]	; (80103c0 <xTaskRemoveFromEventList+0xc4>)
 8010398:	2201      	movs	r2, #1
 801039a:	601a      	str	r2, [r3, #0]
 801039c:	e001      	b.n	80103a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801039e:	2300      	movs	r3, #0
 80103a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80103a2:	697b      	ldr	r3, [r7, #20]
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3718      	adds	r7, #24
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	20000e8c 	.word	0x20000e8c
 80103b0:	20000e6c 	.word	0x20000e6c
 80103b4:	20000994 	.word	0x20000994
 80103b8:	20000e24 	.word	0x20000e24
 80103bc:	20000990 	.word	0x20000990
 80103c0:	20000e78 	.word	0x20000e78

080103c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80103cc:	4b06      	ldr	r3, [pc, #24]	; (80103e8 <vTaskInternalSetTimeOutState+0x24>)
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80103d4:	4b05      	ldr	r3, [pc, #20]	; (80103ec <vTaskInternalSetTimeOutState+0x28>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	605a      	str	r2, [r3, #4]
}
 80103dc:	bf00      	nop
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr
 80103e8:	20000e7c 	.word	0x20000e7c
 80103ec:	20000e68 	.word	0x20000e68

080103f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b088      	sub	sp, #32
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d10b      	bne.n	8010418 <xTaskCheckForTimeOut+0x28>
 8010400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010404:	b672      	cpsid	i
 8010406:	f383 8811 	msr	BASEPRI, r3
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	b662      	cpsie	i
 8010414:	613b      	str	r3, [r7, #16]
 8010416:	e7fe      	b.n	8010416 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d10b      	bne.n	8010436 <xTaskCheckForTimeOut+0x46>
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	b672      	cpsid	i
 8010424:	f383 8811 	msr	BASEPRI, r3
 8010428:	f3bf 8f6f 	isb	sy
 801042c:	f3bf 8f4f 	dsb	sy
 8010430:	b662      	cpsie	i
 8010432:	60fb      	str	r3, [r7, #12]
 8010434:	e7fe      	b.n	8010434 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8010436:	f000 fe5f 	bl	80110f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801043a:	4b1d      	ldr	r3, [pc, #116]	; (80104b0 <xTaskCheckForTimeOut+0xc0>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010452:	d102      	bne.n	801045a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010454:	2300      	movs	r3, #0
 8010456:	61fb      	str	r3, [r7, #28]
 8010458:	e023      	b.n	80104a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	4b15      	ldr	r3, [pc, #84]	; (80104b4 <xTaskCheckForTimeOut+0xc4>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	429a      	cmp	r2, r3
 8010464:	d007      	beq.n	8010476 <xTaskCheckForTimeOut+0x86>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	429a      	cmp	r2, r3
 801046e:	d302      	bcc.n	8010476 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010470:	2301      	movs	r3, #1
 8010472:	61fb      	str	r3, [r7, #28]
 8010474:	e015      	b.n	80104a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	697a      	ldr	r2, [r7, #20]
 801047c:	429a      	cmp	r2, r3
 801047e:	d20b      	bcs.n	8010498 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	1ad2      	subs	r2, r2, r3
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f7ff ff99 	bl	80103c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010492:	2300      	movs	r3, #0
 8010494:	61fb      	str	r3, [r7, #28]
 8010496:	e004      	b.n	80104a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	2200      	movs	r2, #0
 801049c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801049e:	2301      	movs	r3, #1
 80104a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80104a2:	f000 fe5b 	bl	801115c <vPortExitCritical>

	return xReturn;
 80104a6:	69fb      	ldr	r3, [r7, #28]
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3720      	adds	r7, #32
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	20000e68 	.word	0x20000e68
 80104b4:	20000e7c 	.word	0x20000e7c

080104b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80104b8:	b480      	push	{r7}
 80104ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80104bc:	4b03      	ldr	r3, [pc, #12]	; (80104cc <vTaskMissedYield+0x14>)
 80104be:	2201      	movs	r2, #1
 80104c0:	601a      	str	r2, [r3, #0]
}
 80104c2:	bf00      	nop
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr
 80104cc:	20000e78 	.word	0x20000e78

080104d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80104d8:	f000 f854 	bl	8010584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80104dc:	4b07      	ldr	r3, [pc, #28]	; (80104fc <prvIdleTask+0x2c>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	d907      	bls.n	80104f4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80104e4:	4b06      	ldr	r3, [pc, #24]	; (8010500 <prvIdleTask+0x30>)
 80104e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ea:	601a      	str	r2, [r3, #0]
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80104f4:	f7f0 f85c 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80104f8:	e7ee      	b.n	80104d8 <prvIdleTask+0x8>
 80104fa:	bf00      	nop
 80104fc:	20000994 	.word	0x20000994
 8010500:	e000ed04 	.word	0xe000ed04

08010504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801050a:	2300      	movs	r3, #0
 801050c:	607b      	str	r3, [r7, #4]
 801050e:	e00c      	b.n	801052a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010510:	687a      	ldr	r2, [r7, #4]
 8010512:	4613      	mov	r3, r2
 8010514:	009b      	lsls	r3, r3, #2
 8010516:	4413      	add	r3, r2
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	4a12      	ldr	r2, [pc, #72]	; (8010564 <prvInitialiseTaskLists+0x60>)
 801051c:	4413      	add	r3, r2
 801051e:	4618      	mov	r0, r3
 8010520:	f7fe fbea 	bl	800ecf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	3301      	adds	r3, #1
 8010528:	607b      	str	r3, [r7, #4]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2b37      	cmp	r3, #55	; 0x37
 801052e:	d9ef      	bls.n	8010510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010530:	480d      	ldr	r0, [pc, #52]	; (8010568 <prvInitialiseTaskLists+0x64>)
 8010532:	f7fe fbe1 	bl	800ecf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010536:	480d      	ldr	r0, [pc, #52]	; (801056c <prvInitialiseTaskLists+0x68>)
 8010538:	f7fe fbde 	bl	800ecf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801053c:	480c      	ldr	r0, [pc, #48]	; (8010570 <prvInitialiseTaskLists+0x6c>)
 801053e:	f7fe fbdb 	bl	800ecf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010542:	480c      	ldr	r0, [pc, #48]	; (8010574 <prvInitialiseTaskLists+0x70>)
 8010544:	f7fe fbd8 	bl	800ecf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010548:	480b      	ldr	r0, [pc, #44]	; (8010578 <prvInitialiseTaskLists+0x74>)
 801054a:	f7fe fbd5 	bl	800ecf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801054e:	4b0b      	ldr	r3, [pc, #44]	; (801057c <prvInitialiseTaskLists+0x78>)
 8010550:	4a05      	ldr	r2, [pc, #20]	; (8010568 <prvInitialiseTaskLists+0x64>)
 8010552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010554:	4b0a      	ldr	r3, [pc, #40]	; (8010580 <prvInitialiseTaskLists+0x7c>)
 8010556:	4a05      	ldr	r2, [pc, #20]	; (801056c <prvInitialiseTaskLists+0x68>)
 8010558:	601a      	str	r2, [r3, #0]
}
 801055a:	bf00      	nop
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	20000994 	.word	0x20000994
 8010568:	20000df4 	.word	0x20000df4
 801056c:	20000e08 	.word	0x20000e08
 8010570:	20000e24 	.word	0x20000e24
 8010574:	20000e38 	.word	0x20000e38
 8010578:	20000e50 	.word	0x20000e50
 801057c:	20000e1c 	.word	0x20000e1c
 8010580:	20000e20 	.word	0x20000e20

08010584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801058a:	e019      	b.n	80105c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801058c:	f000 fdb4 	bl	80110f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010590:	4b0f      	ldr	r3, [pc, #60]	; (80105d0 <prvCheckTasksWaitingTermination+0x4c>)
 8010592:	68db      	ldr	r3, [r3, #12]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	3304      	adds	r3, #4
 801059c:	4618      	mov	r0, r3
 801059e:	f7fe fc35 	bl	800ee0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80105a2:	4b0c      	ldr	r3, [pc, #48]	; (80105d4 <prvCheckTasksWaitingTermination+0x50>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	3b01      	subs	r3, #1
 80105a8:	4a0a      	ldr	r2, [pc, #40]	; (80105d4 <prvCheckTasksWaitingTermination+0x50>)
 80105aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80105ac:	4b0a      	ldr	r3, [pc, #40]	; (80105d8 <prvCheckTasksWaitingTermination+0x54>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	3b01      	subs	r3, #1
 80105b2:	4a09      	ldr	r2, [pc, #36]	; (80105d8 <prvCheckTasksWaitingTermination+0x54>)
 80105b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80105b6:	f000 fdd1 	bl	801115c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 f80e 	bl	80105dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105c0:	4b05      	ldr	r3, [pc, #20]	; (80105d8 <prvCheckTasksWaitingTermination+0x54>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d1e1      	bne.n	801058c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80105c8:	bf00      	nop
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	20000e38 	.word	0x20000e38
 80105d4:	20000e64 	.word	0x20000e64
 80105d8:	20000e4c 	.word	0x20000e4c

080105dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d108      	bne.n	8010600 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f2:	4618      	mov	r0, r3
 80105f4:	f000 ff6e 	bl	80114d4 <vPortFree>
				vPortFree( pxTCB );
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f000 ff6b 	bl	80114d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80105fe:	e019      	b.n	8010634 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010606:	2b01      	cmp	r3, #1
 8010608:	d103      	bne.n	8010612 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 ff62 	bl	80114d4 <vPortFree>
	}
 8010610:	e010      	b.n	8010634 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010618:	2b02      	cmp	r3, #2
 801061a:	d00b      	beq.n	8010634 <prvDeleteTCB+0x58>
 801061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010620:	b672      	cpsid	i
 8010622:	f383 8811 	msr	BASEPRI, r3
 8010626:	f3bf 8f6f 	isb	sy
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	b662      	cpsie	i
 8010630:	60fb      	str	r3, [r7, #12]
 8010632:	e7fe      	b.n	8010632 <prvDeleteTCB+0x56>
	}
 8010634:	bf00      	nop
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010642:	4b0c      	ldr	r3, [pc, #48]	; (8010674 <prvResetNextTaskUnblockTime+0x38>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d104      	bne.n	8010656 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801064c:	4b0a      	ldr	r3, [pc, #40]	; (8010678 <prvResetNextTaskUnblockTime+0x3c>)
 801064e:	f04f 32ff 	mov.w	r2, #4294967295
 8010652:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010654:	e008      	b.n	8010668 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010656:	4b07      	ldr	r3, [pc, #28]	; (8010674 <prvResetNextTaskUnblockTime+0x38>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	68db      	ldr	r3, [r3, #12]
 801065e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	4a04      	ldr	r2, [pc, #16]	; (8010678 <prvResetNextTaskUnblockTime+0x3c>)
 8010666:	6013      	str	r3, [r2, #0]
}
 8010668:	bf00      	nop
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr
 8010674:	20000e1c 	.word	0x20000e1c
 8010678:	20000e84 	.word	0x20000e84

0801067c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010682:	4b0b      	ldr	r3, [pc, #44]	; (80106b0 <xTaskGetSchedulerState+0x34>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d102      	bne.n	8010690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801068a:	2301      	movs	r3, #1
 801068c:	607b      	str	r3, [r7, #4]
 801068e:	e008      	b.n	80106a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010690:	4b08      	ldr	r3, [pc, #32]	; (80106b4 <xTaskGetSchedulerState+0x38>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d102      	bne.n	801069e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010698:	2302      	movs	r3, #2
 801069a:	607b      	str	r3, [r7, #4]
 801069c:	e001      	b.n	80106a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801069e:	2300      	movs	r3, #0
 80106a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80106a2:	687b      	ldr	r3, [r7, #4]
	}
 80106a4:	4618      	mov	r0, r3
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr
 80106b0:	20000e70 	.word	0x20000e70
 80106b4:	20000e8c 	.word	0x20000e8c

080106b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b086      	sub	sp, #24
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80106c4:	2300      	movs	r3, #0
 80106c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d058      	beq.n	8010780 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80106ce:	4b2f      	ldr	r3, [pc, #188]	; (801078c <xTaskPriorityDisinherit+0xd4>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	693a      	ldr	r2, [r7, #16]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d00b      	beq.n	80106f0 <xTaskPriorityDisinherit+0x38>
 80106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106dc:	b672      	cpsid	i
 80106de:	f383 8811 	msr	BASEPRI, r3
 80106e2:	f3bf 8f6f 	isb	sy
 80106e6:	f3bf 8f4f 	dsb	sy
 80106ea:	b662      	cpsie	i
 80106ec:	60fb      	str	r3, [r7, #12]
 80106ee:	e7fe      	b.n	80106ee <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d10b      	bne.n	8010710 <xTaskPriorityDisinherit+0x58>
 80106f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fc:	b672      	cpsid	i
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	b662      	cpsie	i
 801070c:	60bb      	str	r3, [r7, #8]
 801070e:	e7fe      	b.n	801070e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010714:	1e5a      	subs	r2, r3, #1
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010722:	429a      	cmp	r2, r3
 8010724:	d02c      	beq.n	8010780 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801072a:	2b00      	cmp	r3, #0
 801072c:	d128      	bne.n	8010780 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	3304      	adds	r3, #4
 8010732:	4618      	mov	r0, r3
 8010734:	f7fe fb6a 	bl	800ee0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010744:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010750:	4b0f      	ldr	r3, [pc, #60]	; (8010790 <xTaskPriorityDisinherit+0xd8>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	429a      	cmp	r2, r3
 8010756:	d903      	bls.n	8010760 <xTaskPriorityDisinherit+0xa8>
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801075c:	4a0c      	ldr	r2, [pc, #48]	; (8010790 <xTaskPriorityDisinherit+0xd8>)
 801075e:	6013      	str	r3, [r2, #0]
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010764:	4613      	mov	r3, r2
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	4413      	add	r3, r2
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	4a09      	ldr	r2, [pc, #36]	; (8010794 <xTaskPriorityDisinherit+0xdc>)
 801076e:	441a      	add	r2, r3
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	3304      	adds	r3, #4
 8010774:	4619      	mov	r1, r3
 8010776:	4610      	mov	r0, r2
 8010778:	f7fe faeb 	bl	800ed52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801077c:	2301      	movs	r3, #1
 801077e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010780:	697b      	ldr	r3, [r7, #20]
	}
 8010782:	4618      	mov	r0, r3
 8010784:	3718      	adds	r7, #24
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	20000990 	.word	0x20000990
 8010790:	20000e6c 	.word	0x20000e6c
 8010794:	20000994 	.word	0x20000994

08010798 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80107a2:	4b21      	ldr	r3, [pc, #132]	; (8010828 <prvAddCurrentTaskToDelayedList+0x90>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107a8:	4b20      	ldr	r3, [pc, #128]	; (801082c <prvAddCurrentTaskToDelayedList+0x94>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	3304      	adds	r3, #4
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe fb2c 	bl	800ee0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ba:	d10a      	bne.n	80107d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d007      	beq.n	80107d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107c2:	4b1a      	ldr	r3, [pc, #104]	; (801082c <prvAddCurrentTaskToDelayedList+0x94>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	3304      	adds	r3, #4
 80107c8:	4619      	mov	r1, r3
 80107ca:	4819      	ldr	r0, [pc, #100]	; (8010830 <prvAddCurrentTaskToDelayedList+0x98>)
 80107cc:	f7fe fac1 	bl	800ed52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80107d0:	e026      	b.n	8010820 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80107d2:	68fa      	ldr	r2, [r7, #12]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	4413      	add	r3, r2
 80107d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80107da:	4b14      	ldr	r3, [pc, #80]	; (801082c <prvAddCurrentTaskToDelayedList+0x94>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	68ba      	ldr	r2, [r7, #8]
 80107e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d209      	bcs.n	80107fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107ea:	4b12      	ldr	r3, [pc, #72]	; (8010834 <prvAddCurrentTaskToDelayedList+0x9c>)
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	4b0f      	ldr	r3, [pc, #60]	; (801082c <prvAddCurrentTaskToDelayedList+0x94>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	3304      	adds	r3, #4
 80107f4:	4619      	mov	r1, r3
 80107f6:	4610      	mov	r0, r2
 80107f8:	f7fe facf 	bl	800ed9a <vListInsert>
}
 80107fc:	e010      	b.n	8010820 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107fe:	4b0e      	ldr	r3, [pc, #56]	; (8010838 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	4b0a      	ldr	r3, [pc, #40]	; (801082c <prvAddCurrentTaskToDelayedList+0x94>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	3304      	adds	r3, #4
 8010808:	4619      	mov	r1, r3
 801080a:	4610      	mov	r0, r2
 801080c:	f7fe fac5 	bl	800ed9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010810:	4b0a      	ldr	r3, [pc, #40]	; (801083c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	68ba      	ldr	r2, [r7, #8]
 8010816:	429a      	cmp	r2, r3
 8010818:	d202      	bcs.n	8010820 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801081a:	4a08      	ldr	r2, [pc, #32]	; (801083c <prvAddCurrentTaskToDelayedList+0xa4>)
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	6013      	str	r3, [r2, #0]
}
 8010820:	bf00      	nop
 8010822:	3710      	adds	r7, #16
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	20000e68 	.word	0x20000e68
 801082c:	20000990 	.word	0x20000990
 8010830:	20000e50 	.word	0x20000e50
 8010834:	20000e20 	.word	0x20000e20
 8010838:	20000e1c 	.word	0x20000e1c
 801083c:	20000e84 	.word	0x20000e84

08010840 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b08a      	sub	sp, #40	; 0x28
 8010844:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010846:	2300      	movs	r3, #0
 8010848:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801084a:	f000 fb0d 	bl	8010e68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801084e:	4b1d      	ldr	r3, [pc, #116]	; (80108c4 <xTimerCreateTimerTask+0x84>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d021      	beq.n	801089a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010856:	2300      	movs	r3, #0
 8010858:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801085a:	2300      	movs	r3, #0
 801085c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801085e:	1d3a      	adds	r2, r7, #4
 8010860:	f107 0108 	add.w	r1, r7, #8
 8010864:	f107 030c 	add.w	r3, r7, #12
 8010868:	4618      	mov	r0, r3
 801086a:	f7fe fa2b 	bl	800ecc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801086e:	6879      	ldr	r1, [r7, #4]
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	68fa      	ldr	r2, [r7, #12]
 8010874:	9202      	str	r2, [sp, #8]
 8010876:	9301      	str	r3, [sp, #4]
 8010878:	2302      	movs	r3, #2
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	2300      	movs	r3, #0
 801087e:	460a      	mov	r2, r1
 8010880:	4911      	ldr	r1, [pc, #68]	; (80108c8 <xTimerCreateTimerTask+0x88>)
 8010882:	4812      	ldr	r0, [pc, #72]	; (80108cc <xTimerCreateTimerTask+0x8c>)
 8010884:	f7ff f8a8 	bl	800f9d8 <xTaskCreateStatic>
 8010888:	4602      	mov	r2, r0
 801088a:	4b11      	ldr	r3, [pc, #68]	; (80108d0 <xTimerCreateTimerTask+0x90>)
 801088c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801088e:	4b10      	ldr	r3, [pc, #64]	; (80108d0 <xTimerCreateTimerTask+0x90>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d001      	beq.n	801089a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010896:	2301      	movs	r3, #1
 8010898:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d10b      	bne.n	80108b8 <xTimerCreateTimerTask+0x78>
 80108a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a4:	b672      	cpsid	i
 80108a6:	f383 8811 	msr	BASEPRI, r3
 80108aa:	f3bf 8f6f 	isb	sy
 80108ae:	f3bf 8f4f 	dsb	sy
 80108b2:	b662      	cpsie	i
 80108b4:	613b      	str	r3, [r7, #16]
 80108b6:	e7fe      	b.n	80108b6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80108b8:	697b      	ldr	r3, [r7, #20]
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3718      	adds	r7, #24
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	20000ec0 	.word	0x20000ec0
 80108c8:	08013080 	.word	0x08013080
 80108cc:	08010a0d 	.word	0x08010a0d
 80108d0:	20000ec4 	.word	0x20000ec4

080108d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b08a      	sub	sp, #40	; 0x28
 80108d8:	af00      	add	r7, sp, #0
 80108da:	60f8      	str	r0, [r7, #12]
 80108dc:	60b9      	str	r1, [r7, #8]
 80108de:	607a      	str	r2, [r7, #4]
 80108e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80108e2:	2300      	movs	r3, #0
 80108e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d10b      	bne.n	8010904 <xTimerGenericCommand+0x30>
 80108ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f0:	b672      	cpsid	i
 80108f2:	f383 8811 	msr	BASEPRI, r3
 80108f6:	f3bf 8f6f 	isb	sy
 80108fa:	f3bf 8f4f 	dsb	sy
 80108fe:	b662      	cpsie	i
 8010900:	623b      	str	r3, [r7, #32]
 8010902:	e7fe      	b.n	8010902 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010904:	4b19      	ldr	r3, [pc, #100]	; (801096c <xTimerGenericCommand+0x98>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d02a      	beq.n	8010962 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	2b05      	cmp	r3, #5
 801091c:	dc18      	bgt.n	8010950 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801091e:	f7ff fead 	bl	801067c <xTaskGetSchedulerState>
 8010922:	4603      	mov	r3, r0
 8010924:	2b02      	cmp	r3, #2
 8010926:	d109      	bne.n	801093c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010928:	4b10      	ldr	r3, [pc, #64]	; (801096c <xTimerGenericCommand+0x98>)
 801092a:	6818      	ldr	r0, [r3, #0]
 801092c:	f107 0110 	add.w	r1, r7, #16
 8010930:	2300      	movs	r3, #0
 8010932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010934:	f7fe fbe0 	bl	800f0f8 <xQueueGenericSend>
 8010938:	6278      	str	r0, [r7, #36]	; 0x24
 801093a:	e012      	b.n	8010962 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801093c:	4b0b      	ldr	r3, [pc, #44]	; (801096c <xTimerGenericCommand+0x98>)
 801093e:	6818      	ldr	r0, [r3, #0]
 8010940:	f107 0110 	add.w	r1, r7, #16
 8010944:	2300      	movs	r3, #0
 8010946:	2200      	movs	r2, #0
 8010948:	f7fe fbd6 	bl	800f0f8 <xQueueGenericSend>
 801094c:	6278      	str	r0, [r7, #36]	; 0x24
 801094e:	e008      	b.n	8010962 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010950:	4b06      	ldr	r3, [pc, #24]	; (801096c <xTimerGenericCommand+0x98>)
 8010952:	6818      	ldr	r0, [r3, #0]
 8010954:	f107 0110 	add.w	r1, r7, #16
 8010958:	2300      	movs	r3, #0
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	f7fe fcce 	bl	800f2fc <xQueueGenericSendFromISR>
 8010960:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010964:	4618      	mov	r0, r3
 8010966:	3728      	adds	r7, #40	; 0x28
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	20000ec0 	.word	0x20000ec0

08010970 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b088      	sub	sp, #32
 8010974:	af02      	add	r7, sp, #8
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801097a:	4b23      	ldr	r3, [pc, #140]	; (8010a08 <prvProcessExpiredTimer+0x98>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	68db      	ldr	r3, [r3, #12]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	3304      	adds	r3, #4
 8010988:	4618      	mov	r0, r3
 801098a:	f7fe fa3f 	bl	800ee0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010994:	f003 0304 	and.w	r3, r3, #4
 8010998:	2b00      	cmp	r3, #0
 801099a:	d023      	beq.n	80109e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	699a      	ldr	r2, [r3, #24]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	18d1      	adds	r1, r2, r3
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	683a      	ldr	r2, [r7, #0]
 80109a8:	6978      	ldr	r0, [r7, #20]
 80109aa:	f000 f8d3 	bl	8010b54 <prvInsertTimerInActiveList>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d020      	beq.n	80109f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109b4:	2300      	movs	r3, #0
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	2300      	movs	r3, #0
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	2100      	movs	r1, #0
 80109be:	6978      	ldr	r0, [r7, #20]
 80109c0:	f7ff ff88 	bl	80108d4 <xTimerGenericCommand>
 80109c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d114      	bne.n	80109f6 <prvProcessExpiredTimer+0x86>
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	b672      	cpsid	i
 80109d2:	f383 8811 	msr	BASEPRI, r3
 80109d6:	f3bf 8f6f 	isb	sy
 80109da:	f3bf 8f4f 	dsb	sy
 80109de:	b662      	cpsie	i
 80109e0:	60fb      	str	r3, [r7, #12]
 80109e2:	e7fe      	b.n	80109e2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109ea:	f023 0301 	bic.w	r3, r3, #1
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	6a1b      	ldr	r3, [r3, #32]
 80109fa:	6978      	ldr	r0, [r7, #20]
 80109fc:	4798      	blx	r3
}
 80109fe:	bf00      	nop
 8010a00:	3718      	adds	r7, #24
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	20000eb8 	.word	0x20000eb8

08010a0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a14:	f107 0308 	add.w	r3, r7, #8
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f000 f857 	bl	8010acc <prvGetNextExpireTime>
 8010a1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	4619      	mov	r1, r3
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f000 f803 	bl	8010a30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010a2a:	f000 f8d5 	bl	8010bd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a2e:	e7f1      	b.n	8010a14 <prvTimerTask+0x8>

08010a30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010a3a:	f7ff fa13 	bl	800fe64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a3e:	f107 0308 	add.w	r3, r7, #8
 8010a42:	4618      	mov	r0, r3
 8010a44:	f000 f866 	bl	8010b14 <prvSampleTimeNow>
 8010a48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d130      	bne.n	8010ab2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d10a      	bne.n	8010a6c <prvProcessTimerOrBlockTask+0x3c>
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d806      	bhi.n	8010a6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010a5e:	f7ff fa0f 	bl	800fe80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010a62:	68f9      	ldr	r1, [r7, #12]
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f7ff ff83 	bl	8010970 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010a6a:	e024      	b.n	8010ab6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d008      	beq.n	8010a84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010a72:	4b13      	ldr	r3, [pc, #76]	; (8010ac0 <prvProcessTimerOrBlockTask+0x90>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d101      	bne.n	8010a80 <prvProcessTimerOrBlockTask+0x50>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e000      	b.n	8010a82 <prvProcessTimerOrBlockTask+0x52>
 8010a80:	2300      	movs	r3, #0
 8010a82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010a84:	4b0f      	ldr	r3, [pc, #60]	; (8010ac4 <prvProcessTimerOrBlockTask+0x94>)
 8010a86:	6818      	ldr	r0, [r3, #0]
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	1ad3      	subs	r3, r2, r3
 8010a8e:	683a      	ldr	r2, [r7, #0]
 8010a90:	4619      	mov	r1, r3
 8010a92:	f7fe ff6d 	bl	800f970 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010a96:	f7ff f9f3 	bl	800fe80 <xTaskResumeAll>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d10a      	bne.n	8010ab6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010aa0:	4b09      	ldr	r3, [pc, #36]	; (8010ac8 <prvProcessTimerOrBlockTask+0x98>)
 8010aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010aa6:	601a      	str	r2, [r3, #0]
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	f3bf 8f6f 	isb	sy
}
 8010ab0:	e001      	b.n	8010ab6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010ab2:	f7ff f9e5 	bl	800fe80 <xTaskResumeAll>
}
 8010ab6:	bf00      	nop
 8010ab8:	3710      	adds	r7, #16
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	20000ebc 	.word	0x20000ebc
 8010ac4:	20000ec0 	.word	0x20000ec0
 8010ac8:	e000ed04 	.word	0xe000ed04

08010acc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010acc:	b480      	push	{r7}
 8010ace:	b085      	sub	sp, #20
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ad4:	4b0e      	ldr	r3, [pc, #56]	; (8010b10 <prvGetNextExpireTime+0x44>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d101      	bne.n	8010ae2 <prvGetNextExpireTime+0x16>
 8010ade:	2201      	movs	r2, #1
 8010ae0:	e000      	b.n	8010ae4 <prvGetNextExpireTime+0x18>
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d105      	bne.n	8010afc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010af0:	4b07      	ldr	r3, [pc, #28]	; (8010b10 <prvGetNextExpireTime+0x44>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	68db      	ldr	r3, [r3, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	60fb      	str	r3, [r7, #12]
 8010afa:	e001      	b.n	8010b00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010afc:	2300      	movs	r3, #0
 8010afe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010b00:	68fb      	ldr	r3, [r7, #12]
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3714      	adds	r7, #20
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr
 8010b0e:	bf00      	nop
 8010b10:	20000eb8 	.word	0x20000eb8

08010b14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010b1c:	f7ff fa4e 	bl	800ffbc <xTaskGetTickCount>
 8010b20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010b22:	4b0b      	ldr	r3, [pc, #44]	; (8010b50 <prvSampleTimeNow+0x3c>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	68fa      	ldr	r2, [r7, #12]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d205      	bcs.n	8010b38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010b2c:	f000 f936 	bl	8010d9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2201      	movs	r2, #1
 8010b34:	601a      	str	r2, [r3, #0]
 8010b36:	e002      	b.n	8010b3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010b3e:	4a04      	ldr	r2, [pc, #16]	; (8010b50 <prvSampleTimeNow+0x3c>)
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010b44:	68fb      	ldr	r3, [r7, #12]
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3710      	adds	r7, #16
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	20000ec8 	.word	0x20000ec8

08010b54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b086      	sub	sp, #24
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	607a      	str	r2, [r7, #4]
 8010b60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010b62:	2300      	movs	r3, #0
 8010b64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	68fa      	ldr	r2, [r7, #12]
 8010b70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010b72:	68ba      	ldr	r2, [r7, #8]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d812      	bhi.n	8010ba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	1ad2      	subs	r2, r2, r3
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	699b      	ldr	r3, [r3, #24]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d302      	bcc.n	8010b8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010b88:	2301      	movs	r3, #1
 8010b8a:	617b      	str	r3, [r7, #20]
 8010b8c:	e01b      	b.n	8010bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b8e:	4b10      	ldr	r3, [pc, #64]	; (8010bd0 <prvInsertTimerInActiveList+0x7c>)
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	3304      	adds	r3, #4
 8010b96:	4619      	mov	r1, r3
 8010b98:	4610      	mov	r0, r2
 8010b9a:	f7fe f8fe 	bl	800ed9a <vListInsert>
 8010b9e:	e012      	b.n	8010bc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d206      	bcs.n	8010bb6 <prvInsertTimerInActiveList+0x62>
 8010ba8:	68ba      	ldr	r2, [r7, #8]
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d302      	bcc.n	8010bb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	617b      	str	r3, [r7, #20]
 8010bb4:	e007      	b.n	8010bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010bb6:	4b07      	ldr	r3, [pc, #28]	; (8010bd4 <prvInsertTimerInActiveList+0x80>)
 8010bb8:	681a      	ldr	r2, [r3, #0]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	3304      	adds	r3, #4
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	4610      	mov	r0, r2
 8010bc2:	f7fe f8ea 	bl	800ed9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010bc6:	697b      	ldr	r3, [r7, #20]
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3718      	adds	r7, #24
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	20000ebc 	.word	0x20000ebc
 8010bd4:	20000eb8 	.word	0x20000eb8

08010bd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b08e      	sub	sp, #56	; 0x38
 8010bdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bde:	e0cc      	b.n	8010d7a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	da19      	bge.n	8010c1a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010be6:	1d3b      	adds	r3, r7, #4
 8010be8:	3304      	adds	r3, #4
 8010bea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d10b      	bne.n	8010c0a <prvProcessReceivedCommands+0x32>
 8010bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf6:	b672      	cpsid	i
 8010bf8:	f383 8811 	msr	BASEPRI, r3
 8010bfc:	f3bf 8f6f 	isb	sy
 8010c00:	f3bf 8f4f 	dsb	sy
 8010c04:	b662      	cpsie	i
 8010c06:	61fb      	str	r3, [r7, #28]
 8010c08:	e7fe      	b.n	8010c08 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c10:	6850      	ldr	r0, [r2, #4]
 8010c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c14:	6892      	ldr	r2, [r2, #8]
 8010c16:	4611      	mov	r1, r2
 8010c18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	f2c0 80ab 	blt.w	8010d78 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c28:	695b      	ldr	r3, [r3, #20]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d004      	beq.n	8010c38 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c30:	3304      	adds	r3, #4
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7fe f8ea 	bl	800ee0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c38:	463b      	mov	r3, r7
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7ff ff6a 	bl	8010b14 <prvSampleTimeNow>
 8010c40:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2b09      	cmp	r3, #9
 8010c46:	f200 8098 	bhi.w	8010d7a <prvProcessReceivedCommands+0x1a2>
 8010c4a:	a201      	add	r2, pc, #4	; (adr r2, 8010c50 <prvProcessReceivedCommands+0x78>)
 8010c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c50:	08010c79 	.word	0x08010c79
 8010c54:	08010c79 	.word	0x08010c79
 8010c58:	08010c79 	.word	0x08010c79
 8010c5c:	08010cef 	.word	0x08010cef
 8010c60:	08010d03 	.word	0x08010d03
 8010c64:	08010d4f 	.word	0x08010d4f
 8010c68:	08010c79 	.word	0x08010c79
 8010c6c:	08010c79 	.word	0x08010c79
 8010c70:	08010cef 	.word	0x08010cef
 8010c74:	08010d03 	.word	0x08010d03
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c7e:	f043 0301 	orr.w	r3, r3, #1
 8010c82:	b2da      	uxtb	r2, r3
 8010c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8e:	699b      	ldr	r3, [r3, #24]
 8010c90:	18d1      	adds	r1, r2, r3
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c98:	f7ff ff5c 	bl	8010b54 <prvInsertTimerInActiveList>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d06b      	beq.n	8010d7a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca4:	6a1b      	ldr	r3, [r3, #32]
 8010ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ca8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cb0:	f003 0304 	and.w	r3, r3, #4
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d060      	beq.n	8010d7a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010cb8:	68ba      	ldr	r2, [r7, #8]
 8010cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cbc:	699b      	ldr	r3, [r3, #24]
 8010cbe:	441a      	add	r2, r3
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cca:	f7ff fe03 	bl	80108d4 <xTimerGenericCommand>
 8010cce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010cd0:	6a3b      	ldr	r3, [r7, #32]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d151      	bne.n	8010d7a <prvProcessReceivedCommands+0x1a2>
 8010cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cda:	b672      	cpsid	i
 8010cdc:	f383 8811 	msr	BASEPRI, r3
 8010ce0:	f3bf 8f6f 	isb	sy
 8010ce4:	f3bf 8f4f 	dsb	sy
 8010ce8:	b662      	cpsie	i
 8010cea:	61bb      	str	r3, [r7, #24]
 8010cec:	e7fe      	b.n	8010cec <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cf4:	f023 0301 	bic.w	r3, r3, #1
 8010cf8:	b2da      	uxtb	r2, r3
 8010cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010d00:	e03b      	b.n	8010d7a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d08:	f043 0301 	orr.w	r3, r3, #1
 8010d0c:	b2da      	uxtb	r2, r3
 8010d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010d14:	68ba      	ldr	r2, [r7, #8]
 8010d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d18:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1c:	699b      	ldr	r3, [r3, #24]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d10b      	bne.n	8010d3a <prvProcessReceivedCommands+0x162>
 8010d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d26:	b672      	cpsid	i
 8010d28:	f383 8811 	msr	BASEPRI, r3
 8010d2c:	f3bf 8f6f 	isb	sy
 8010d30:	f3bf 8f4f 	dsb	sy
 8010d34:	b662      	cpsie	i
 8010d36:	617b      	str	r3, [r7, #20]
 8010d38:	e7fe      	b.n	8010d38 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3c:	699a      	ldr	r2, [r3, #24]
 8010d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d40:	18d1      	adds	r1, r2, r3
 8010d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d48:	f7ff ff04 	bl	8010b54 <prvInsertTimerInActiveList>
					break;
 8010d4c:	e015      	b.n	8010d7a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d54:	f003 0302 	and.w	r3, r3, #2
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d103      	bne.n	8010d64 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d5e:	f000 fbb9 	bl	80114d4 <vPortFree>
 8010d62:	e00a      	b.n	8010d7a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d6a:	f023 0301 	bic.w	r3, r3, #1
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d76:	e000      	b.n	8010d7a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010d78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d7a:	4b07      	ldr	r3, [pc, #28]	; (8010d98 <prvProcessReceivedCommands+0x1c0>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	1d39      	adds	r1, r7, #4
 8010d80:	2200      	movs	r2, #0
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fe fb56 	bl	800f434 <xQueueReceive>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f47f af28 	bne.w	8010be0 <prvProcessReceivedCommands+0x8>
	}
}
 8010d90:	bf00      	nop
 8010d92:	3730      	adds	r7, #48	; 0x30
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	20000ec0 	.word	0x20000ec0

08010d9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b088      	sub	sp, #32
 8010da0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010da2:	e049      	b.n	8010e38 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010da4:	4b2e      	ldr	r3, [pc, #184]	; (8010e60 <prvSwitchTimerLists+0xc4>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dae:	4b2c      	ldr	r3, [pc, #176]	; (8010e60 <prvSwitchTimerLists+0xc4>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	68db      	ldr	r3, [r3, #12]
 8010db6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	3304      	adds	r3, #4
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f7fe f825 	bl	800ee0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	6a1b      	ldr	r3, [r3, #32]
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dd0:	f003 0304 	and.w	r3, r3, #4
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d02f      	beq.n	8010e38 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	699b      	ldr	r3, [r3, #24]
 8010ddc:	693a      	ldr	r2, [r7, #16]
 8010dde:	4413      	add	r3, r2
 8010de0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010de2:	68ba      	ldr	r2, [r7, #8]
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d90e      	bls.n	8010e08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	68ba      	ldr	r2, [r7, #8]
 8010dee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	68fa      	ldr	r2, [r7, #12]
 8010df4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010df6:	4b1a      	ldr	r3, [pc, #104]	; (8010e60 <prvSwitchTimerLists+0xc4>)
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	3304      	adds	r3, #4
 8010dfe:	4619      	mov	r1, r3
 8010e00:	4610      	mov	r0, r2
 8010e02:	f7fd ffca 	bl	800ed9a <vListInsert>
 8010e06:	e017      	b.n	8010e38 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e08:	2300      	movs	r3, #0
 8010e0a:	9300      	str	r3, [sp, #0]
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	693a      	ldr	r2, [r7, #16]
 8010e10:	2100      	movs	r1, #0
 8010e12:	68f8      	ldr	r0, [r7, #12]
 8010e14:	f7ff fd5e 	bl	80108d4 <xTimerGenericCommand>
 8010e18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d10b      	bne.n	8010e38 <prvSwitchTimerLists+0x9c>
 8010e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e24:	b672      	cpsid	i
 8010e26:	f383 8811 	msr	BASEPRI, r3
 8010e2a:	f3bf 8f6f 	isb	sy
 8010e2e:	f3bf 8f4f 	dsb	sy
 8010e32:	b662      	cpsie	i
 8010e34:	603b      	str	r3, [r7, #0]
 8010e36:	e7fe      	b.n	8010e36 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e38:	4b09      	ldr	r3, [pc, #36]	; (8010e60 <prvSwitchTimerLists+0xc4>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d1b0      	bne.n	8010da4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010e42:	4b07      	ldr	r3, [pc, #28]	; (8010e60 <prvSwitchTimerLists+0xc4>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010e48:	4b06      	ldr	r3, [pc, #24]	; (8010e64 <prvSwitchTimerLists+0xc8>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a04      	ldr	r2, [pc, #16]	; (8010e60 <prvSwitchTimerLists+0xc4>)
 8010e4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e50:	4a04      	ldr	r2, [pc, #16]	; (8010e64 <prvSwitchTimerLists+0xc8>)
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	6013      	str	r3, [r2, #0]
}
 8010e56:	bf00      	nop
 8010e58:	3718      	adds	r7, #24
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	20000eb8 	.word	0x20000eb8
 8010e64:	20000ebc 	.word	0x20000ebc

08010e68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e6e:	f000 f943 	bl	80110f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e72:	4b15      	ldr	r3, [pc, #84]	; (8010ec8 <prvCheckForValidListAndQueue+0x60>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d120      	bne.n	8010ebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e7a:	4814      	ldr	r0, [pc, #80]	; (8010ecc <prvCheckForValidListAndQueue+0x64>)
 8010e7c:	f7fd ff3c 	bl	800ecf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e80:	4813      	ldr	r0, [pc, #76]	; (8010ed0 <prvCheckForValidListAndQueue+0x68>)
 8010e82:	f7fd ff39 	bl	800ecf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e86:	4b13      	ldr	r3, [pc, #76]	; (8010ed4 <prvCheckForValidListAndQueue+0x6c>)
 8010e88:	4a10      	ldr	r2, [pc, #64]	; (8010ecc <prvCheckForValidListAndQueue+0x64>)
 8010e8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010e8c:	4b12      	ldr	r3, [pc, #72]	; (8010ed8 <prvCheckForValidListAndQueue+0x70>)
 8010e8e:	4a10      	ldr	r2, [pc, #64]	; (8010ed0 <prvCheckForValidListAndQueue+0x68>)
 8010e90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e92:	2300      	movs	r3, #0
 8010e94:	9300      	str	r3, [sp, #0]
 8010e96:	4b11      	ldr	r3, [pc, #68]	; (8010edc <prvCheckForValidListAndQueue+0x74>)
 8010e98:	4a11      	ldr	r2, [pc, #68]	; (8010ee0 <prvCheckForValidListAndQueue+0x78>)
 8010e9a:	2110      	movs	r1, #16
 8010e9c:	200a      	movs	r0, #10
 8010e9e:	f7fe f849 	bl	800ef34 <xQueueGenericCreateStatic>
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	4b08      	ldr	r3, [pc, #32]	; (8010ec8 <prvCheckForValidListAndQueue+0x60>)
 8010ea6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ea8:	4b07      	ldr	r3, [pc, #28]	; (8010ec8 <prvCheckForValidListAndQueue+0x60>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d005      	beq.n	8010ebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010eb0:	4b05      	ldr	r3, [pc, #20]	; (8010ec8 <prvCheckForValidListAndQueue+0x60>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	490b      	ldr	r1, [pc, #44]	; (8010ee4 <prvCheckForValidListAndQueue+0x7c>)
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fe fd32 	bl	800f920 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ebc:	f000 f94e 	bl	801115c <vPortExitCritical>
}
 8010ec0:	bf00      	nop
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	20000ec0 	.word	0x20000ec0
 8010ecc:	20000e90 	.word	0x20000e90
 8010ed0:	20000ea4 	.word	0x20000ea4
 8010ed4:	20000eb8 	.word	0x20000eb8
 8010ed8:	20000ebc 	.word	0x20000ebc
 8010edc:	20000f6c 	.word	0x20000f6c
 8010ee0:	20000ecc 	.word	0x20000ecc
 8010ee4:	08013088 	.word	0x08013088

08010ee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	3b04      	subs	r3, #4
 8010ef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	3b04      	subs	r3, #4
 8010f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	f023 0201 	bic.w	r2, r3, #1
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	3b04      	subs	r3, #4
 8010f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010f18:	4a0c      	ldr	r2, [pc, #48]	; (8010f4c <pxPortInitialiseStack+0x64>)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	3b14      	subs	r3, #20
 8010f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	3b04      	subs	r3, #4
 8010f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f06f 0202 	mvn.w	r2, #2
 8010f36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	3b20      	subs	r3, #32
 8010f3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3714      	adds	r7, #20
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr
 8010f4c:	08010f51 	.word	0x08010f51

08010f50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010f50:	b480      	push	{r7}
 8010f52:	b085      	sub	sp, #20
 8010f54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010f56:	2300      	movs	r3, #0
 8010f58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010f5a:	4b13      	ldr	r3, [pc, #76]	; (8010fa8 <prvTaskExitError+0x58>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f62:	d00b      	beq.n	8010f7c <prvTaskExitError+0x2c>
 8010f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f68:	b672      	cpsid	i
 8010f6a:	f383 8811 	msr	BASEPRI, r3
 8010f6e:	f3bf 8f6f 	isb	sy
 8010f72:	f3bf 8f4f 	dsb	sy
 8010f76:	b662      	cpsie	i
 8010f78:	60fb      	str	r3, [r7, #12]
 8010f7a:	e7fe      	b.n	8010f7a <prvTaskExitError+0x2a>
 8010f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f80:	b672      	cpsid	i
 8010f82:	f383 8811 	msr	BASEPRI, r3
 8010f86:	f3bf 8f6f 	isb	sy
 8010f8a:	f3bf 8f4f 	dsb	sy
 8010f8e:	b662      	cpsie	i
 8010f90:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010f92:	bf00      	nop
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d0fc      	beq.n	8010f94 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010f9a:	bf00      	nop
 8010f9c:	3714      	adds	r7, #20
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
 8010fa6:	bf00      	nop
 8010fa8:	20000048 	.word	0x20000048
 8010fac:	00000000 	.word	0x00000000

08010fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010fb0:	4b07      	ldr	r3, [pc, #28]	; (8010fd0 <pxCurrentTCBConst2>)
 8010fb2:	6819      	ldr	r1, [r3, #0]
 8010fb4:	6808      	ldr	r0, [r1, #0]
 8010fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fba:	f380 8809 	msr	PSP, r0
 8010fbe:	f3bf 8f6f 	isb	sy
 8010fc2:	f04f 0000 	mov.w	r0, #0
 8010fc6:	f380 8811 	msr	BASEPRI, r0
 8010fca:	4770      	bx	lr
 8010fcc:	f3af 8000 	nop.w

08010fd0 <pxCurrentTCBConst2>:
 8010fd0:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010fd4:	bf00      	nop
 8010fd6:	bf00      	nop

08010fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010fd8:	4808      	ldr	r0, [pc, #32]	; (8010ffc <prvPortStartFirstTask+0x24>)
 8010fda:	6800      	ldr	r0, [r0, #0]
 8010fdc:	6800      	ldr	r0, [r0, #0]
 8010fde:	f380 8808 	msr	MSP, r0
 8010fe2:	f04f 0000 	mov.w	r0, #0
 8010fe6:	f380 8814 	msr	CONTROL, r0
 8010fea:	b662      	cpsie	i
 8010fec:	b661      	cpsie	f
 8010fee:	f3bf 8f4f 	dsb	sy
 8010ff2:	f3bf 8f6f 	isb	sy
 8010ff6:	df00      	svc	0
 8010ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010ffa:	bf00      	nop
 8010ffc:	e000ed08 	.word	0xe000ed08

08011000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011006:	4b36      	ldr	r3, [pc, #216]	; (80110e0 <xPortStartScheduler+0xe0>)
 8011008:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	b2db      	uxtb	r3, r3
 8011010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	22ff      	movs	r2, #255	; 0xff
 8011016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	b2db      	uxtb	r3, r3
 801101e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011020:	78fb      	ldrb	r3, [r7, #3]
 8011022:	b2db      	uxtb	r3, r3
 8011024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011028:	b2da      	uxtb	r2, r3
 801102a:	4b2e      	ldr	r3, [pc, #184]	; (80110e4 <xPortStartScheduler+0xe4>)
 801102c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801102e:	4b2e      	ldr	r3, [pc, #184]	; (80110e8 <xPortStartScheduler+0xe8>)
 8011030:	2207      	movs	r2, #7
 8011032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011034:	e009      	b.n	801104a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011036:	4b2c      	ldr	r3, [pc, #176]	; (80110e8 <xPortStartScheduler+0xe8>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	3b01      	subs	r3, #1
 801103c:	4a2a      	ldr	r2, [pc, #168]	; (80110e8 <xPortStartScheduler+0xe8>)
 801103e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011040:	78fb      	ldrb	r3, [r7, #3]
 8011042:	b2db      	uxtb	r3, r3
 8011044:	005b      	lsls	r3, r3, #1
 8011046:	b2db      	uxtb	r3, r3
 8011048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801104a:	78fb      	ldrb	r3, [r7, #3]
 801104c:	b2db      	uxtb	r3, r3
 801104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011052:	2b80      	cmp	r3, #128	; 0x80
 8011054:	d0ef      	beq.n	8011036 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011056:	4b24      	ldr	r3, [pc, #144]	; (80110e8 <xPortStartScheduler+0xe8>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	f1c3 0307 	rsb	r3, r3, #7
 801105e:	2b04      	cmp	r3, #4
 8011060:	d00b      	beq.n	801107a <xPortStartScheduler+0x7a>
 8011062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011066:	b672      	cpsid	i
 8011068:	f383 8811 	msr	BASEPRI, r3
 801106c:	f3bf 8f6f 	isb	sy
 8011070:	f3bf 8f4f 	dsb	sy
 8011074:	b662      	cpsie	i
 8011076:	60bb      	str	r3, [r7, #8]
 8011078:	e7fe      	b.n	8011078 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801107a:	4b1b      	ldr	r3, [pc, #108]	; (80110e8 <xPortStartScheduler+0xe8>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	021b      	lsls	r3, r3, #8
 8011080:	4a19      	ldr	r2, [pc, #100]	; (80110e8 <xPortStartScheduler+0xe8>)
 8011082:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011084:	4b18      	ldr	r3, [pc, #96]	; (80110e8 <xPortStartScheduler+0xe8>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801108c:	4a16      	ldr	r2, [pc, #88]	; (80110e8 <xPortStartScheduler+0xe8>)
 801108e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	b2da      	uxtb	r2, r3
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011098:	4b14      	ldr	r3, [pc, #80]	; (80110ec <xPortStartScheduler+0xec>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	4a13      	ldr	r2, [pc, #76]	; (80110ec <xPortStartScheduler+0xec>)
 801109e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80110a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80110a4:	4b11      	ldr	r3, [pc, #68]	; (80110ec <xPortStartScheduler+0xec>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4a10      	ldr	r2, [pc, #64]	; (80110ec <xPortStartScheduler+0xec>)
 80110aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80110ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80110b0:	f000 f8d4 	bl	801125c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80110b4:	4b0e      	ldr	r3, [pc, #56]	; (80110f0 <xPortStartScheduler+0xf0>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80110ba:	f000 f8f3 	bl	80112a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80110be:	4b0d      	ldr	r3, [pc, #52]	; (80110f4 <xPortStartScheduler+0xf4>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4a0c      	ldr	r2, [pc, #48]	; (80110f4 <xPortStartScheduler+0xf4>)
 80110c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80110c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80110ca:	f7ff ff85 	bl	8010fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80110ce:	f7ff f83f 	bl	8010150 <vTaskSwitchContext>
	prvTaskExitError();
 80110d2:	f7ff ff3d 	bl	8010f50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80110d6:	2300      	movs	r3, #0
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3710      	adds	r7, #16
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	e000e400 	.word	0xe000e400
 80110e4:	20000fbc 	.word	0x20000fbc
 80110e8:	20000fc0 	.word	0x20000fc0
 80110ec:	e000ed20 	.word	0xe000ed20
 80110f0:	20000048 	.word	0x20000048
 80110f4:	e000ef34 	.word	0xe000ef34

080110f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011102:	b672      	cpsid	i
 8011104:	f383 8811 	msr	BASEPRI, r3
 8011108:	f3bf 8f6f 	isb	sy
 801110c:	f3bf 8f4f 	dsb	sy
 8011110:	b662      	cpsie	i
 8011112:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011114:	4b0f      	ldr	r3, [pc, #60]	; (8011154 <vPortEnterCritical+0x5c>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	3301      	adds	r3, #1
 801111a:	4a0e      	ldr	r2, [pc, #56]	; (8011154 <vPortEnterCritical+0x5c>)
 801111c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801111e:	4b0d      	ldr	r3, [pc, #52]	; (8011154 <vPortEnterCritical+0x5c>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2b01      	cmp	r3, #1
 8011124:	d110      	bne.n	8011148 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011126:	4b0c      	ldr	r3, [pc, #48]	; (8011158 <vPortEnterCritical+0x60>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	b2db      	uxtb	r3, r3
 801112c:	2b00      	cmp	r3, #0
 801112e:	d00b      	beq.n	8011148 <vPortEnterCritical+0x50>
 8011130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011134:	b672      	cpsid	i
 8011136:	f383 8811 	msr	BASEPRI, r3
 801113a:	f3bf 8f6f 	isb	sy
 801113e:	f3bf 8f4f 	dsb	sy
 8011142:	b662      	cpsie	i
 8011144:	603b      	str	r3, [r7, #0]
 8011146:	e7fe      	b.n	8011146 <vPortEnterCritical+0x4e>
	}
}
 8011148:	bf00      	nop
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr
 8011154:	20000048 	.word	0x20000048
 8011158:	e000ed04 	.word	0xe000ed04

0801115c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801115c:	b480      	push	{r7}
 801115e:	b083      	sub	sp, #12
 8011160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011162:	4b12      	ldr	r3, [pc, #72]	; (80111ac <vPortExitCritical+0x50>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d10b      	bne.n	8011182 <vPortExitCritical+0x26>
 801116a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116e:	b672      	cpsid	i
 8011170:	f383 8811 	msr	BASEPRI, r3
 8011174:	f3bf 8f6f 	isb	sy
 8011178:	f3bf 8f4f 	dsb	sy
 801117c:	b662      	cpsie	i
 801117e:	607b      	str	r3, [r7, #4]
 8011180:	e7fe      	b.n	8011180 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8011182:	4b0a      	ldr	r3, [pc, #40]	; (80111ac <vPortExitCritical+0x50>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	3b01      	subs	r3, #1
 8011188:	4a08      	ldr	r2, [pc, #32]	; (80111ac <vPortExitCritical+0x50>)
 801118a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801118c:	4b07      	ldr	r3, [pc, #28]	; (80111ac <vPortExitCritical+0x50>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d104      	bne.n	801119e <vPortExitCritical+0x42>
 8011194:	2300      	movs	r3, #0
 8011196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801119e:	bf00      	nop
 80111a0:	370c      	adds	r7, #12
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop
 80111ac:	20000048 	.word	0x20000048

080111b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80111b0:	f3ef 8009 	mrs	r0, PSP
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	4b15      	ldr	r3, [pc, #84]	; (8011210 <pxCurrentTCBConst>)
 80111ba:	681a      	ldr	r2, [r3, #0]
 80111bc:	f01e 0f10 	tst.w	lr, #16
 80111c0:	bf08      	it	eq
 80111c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80111c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ca:	6010      	str	r0, [r2, #0]
 80111cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80111d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80111d4:	b672      	cpsid	i
 80111d6:	f380 8811 	msr	BASEPRI, r0
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	f3bf 8f6f 	isb	sy
 80111e2:	b662      	cpsie	i
 80111e4:	f7fe ffb4 	bl	8010150 <vTaskSwitchContext>
 80111e8:	f04f 0000 	mov.w	r0, #0
 80111ec:	f380 8811 	msr	BASEPRI, r0
 80111f0:	bc09      	pop	{r0, r3}
 80111f2:	6819      	ldr	r1, [r3, #0]
 80111f4:	6808      	ldr	r0, [r1, #0]
 80111f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111fa:	f01e 0f10 	tst.w	lr, #16
 80111fe:	bf08      	it	eq
 8011200:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011204:	f380 8809 	msr	PSP, r0
 8011208:	f3bf 8f6f 	isb	sy
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop

08011210 <pxCurrentTCBConst>:
 8011210:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011214:	bf00      	nop
 8011216:	bf00      	nop

08011218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
	__asm volatile
 801121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011222:	b672      	cpsid	i
 8011224:	f383 8811 	msr	BASEPRI, r3
 8011228:	f3bf 8f6f 	isb	sy
 801122c:	f3bf 8f4f 	dsb	sy
 8011230:	b662      	cpsie	i
 8011232:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011234:	f7fe fed2 	bl	800ffdc <xTaskIncrementTick>
 8011238:	4603      	mov	r3, r0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d003      	beq.n	8011246 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801123e:	4b06      	ldr	r3, [pc, #24]	; (8011258 <SysTick_Handler+0x40>)
 8011240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011244:	601a      	str	r2, [r3, #0]
 8011246:	2300      	movs	r3, #0
 8011248:	603b      	str	r3, [r7, #0]
	__asm volatile
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	e000ed04 	.word	0xe000ed04

0801125c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801125c:	b480      	push	{r7}
 801125e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011260:	4b0b      	ldr	r3, [pc, #44]	; (8011290 <vPortSetupTimerInterrupt+0x34>)
 8011262:	2200      	movs	r2, #0
 8011264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011266:	4b0b      	ldr	r3, [pc, #44]	; (8011294 <vPortSetupTimerInterrupt+0x38>)
 8011268:	2200      	movs	r2, #0
 801126a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801126c:	4b0a      	ldr	r3, [pc, #40]	; (8011298 <vPortSetupTimerInterrupt+0x3c>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4a0a      	ldr	r2, [pc, #40]	; (801129c <vPortSetupTimerInterrupt+0x40>)
 8011272:	fba2 2303 	umull	r2, r3, r2, r3
 8011276:	099b      	lsrs	r3, r3, #6
 8011278:	4a09      	ldr	r2, [pc, #36]	; (80112a0 <vPortSetupTimerInterrupt+0x44>)
 801127a:	3b01      	subs	r3, #1
 801127c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801127e:	4b04      	ldr	r3, [pc, #16]	; (8011290 <vPortSetupTimerInterrupt+0x34>)
 8011280:	2207      	movs	r2, #7
 8011282:	601a      	str	r2, [r3, #0]
}
 8011284:	bf00      	nop
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	e000e010 	.word	0xe000e010
 8011294:	e000e018 	.word	0xe000e018
 8011298:	20000000 	.word	0x20000000
 801129c:	10624dd3 	.word	0x10624dd3
 80112a0:	e000e014 	.word	0xe000e014

080112a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80112a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80112b4 <vPortEnableVFP+0x10>
 80112a8:	6801      	ldr	r1, [r0, #0]
 80112aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80112ae:	6001      	str	r1, [r0, #0]
 80112b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80112b2:	bf00      	nop
 80112b4:	e000ed88 	.word	0xe000ed88

080112b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80112b8:	b480      	push	{r7}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80112be:	f3ef 8305 	mrs	r3, IPSR
 80112c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b0f      	cmp	r3, #15
 80112c8:	d915      	bls.n	80112f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80112ca:	4a18      	ldr	r2, [pc, #96]	; (801132c <vPortValidateInterruptPriority+0x74>)
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	4413      	add	r3, r2
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80112d4:	4b16      	ldr	r3, [pc, #88]	; (8011330 <vPortValidateInterruptPriority+0x78>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	7afa      	ldrb	r2, [r7, #11]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d20b      	bcs.n	80112f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e2:	b672      	cpsid	i
 80112e4:	f383 8811 	msr	BASEPRI, r3
 80112e8:	f3bf 8f6f 	isb	sy
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	b662      	cpsie	i
 80112f2:	607b      	str	r3, [r7, #4]
 80112f4:	e7fe      	b.n	80112f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80112f6:	4b0f      	ldr	r3, [pc, #60]	; (8011334 <vPortValidateInterruptPriority+0x7c>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80112fe:	4b0e      	ldr	r3, [pc, #56]	; (8011338 <vPortValidateInterruptPriority+0x80>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	429a      	cmp	r2, r3
 8011304:	d90b      	bls.n	801131e <vPortValidateInterruptPriority+0x66>
 8011306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801130a:	b672      	cpsid	i
 801130c:	f383 8811 	msr	BASEPRI, r3
 8011310:	f3bf 8f6f 	isb	sy
 8011314:	f3bf 8f4f 	dsb	sy
 8011318:	b662      	cpsie	i
 801131a:	603b      	str	r3, [r7, #0]
 801131c:	e7fe      	b.n	801131c <vPortValidateInterruptPriority+0x64>
	}
 801131e:	bf00      	nop
 8011320:	3714      	adds	r7, #20
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
 801132a:	bf00      	nop
 801132c:	e000e3f0 	.word	0xe000e3f0
 8011330:	20000fbc 	.word	0x20000fbc
 8011334:	e000ed0c 	.word	0xe000ed0c
 8011338:	20000fc0 	.word	0x20000fc0

0801133c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b08a      	sub	sp, #40	; 0x28
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011344:	2300      	movs	r3, #0
 8011346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011348:	f7fe fd8c 	bl	800fe64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801134c:	4b5c      	ldr	r3, [pc, #368]	; (80114c0 <pvPortMalloc+0x184>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d101      	bne.n	8011358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011354:	f000 f91a 	bl	801158c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011358:	4b5a      	ldr	r3, [pc, #360]	; (80114c4 <pvPortMalloc+0x188>)
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	4013      	ands	r3, r2
 8011360:	2b00      	cmp	r3, #0
 8011362:	f040 8090 	bne.w	8011486 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d01e      	beq.n	80113aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801136c:	2208      	movs	r2, #8
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4413      	add	r3, r2
 8011372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f003 0307 	and.w	r3, r3, #7
 801137a:	2b00      	cmp	r3, #0
 801137c:	d015      	beq.n	80113aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f023 0307 	bic.w	r3, r3, #7
 8011384:	3308      	adds	r3, #8
 8011386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f003 0307 	and.w	r3, r3, #7
 801138e:	2b00      	cmp	r3, #0
 8011390:	d00b      	beq.n	80113aa <pvPortMalloc+0x6e>
 8011392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011396:	b672      	cpsid	i
 8011398:	f383 8811 	msr	BASEPRI, r3
 801139c:	f3bf 8f6f 	isb	sy
 80113a0:	f3bf 8f4f 	dsb	sy
 80113a4:	b662      	cpsie	i
 80113a6:	617b      	str	r3, [r7, #20]
 80113a8:	e7fe      	b.n	80113a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d06a      	beq.n	8011486 <pvPortMalloc+0x14a>
 80113b0:	4b45      	ldr	r3, [pc, #276]	; (80114c8 <pvPortMalloc+0x18c>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d865      	bhi.n	8011486 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80113ba:	4b44      	ldr	r3, [pc, #272]	; (80114cc <pvPortMalloc+0x190>)
 80113bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80113be:	4b43      	ldr	r3, [pc, #268]	; (80114cc <pvPortMalloc+0x190>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80113c4:	e004      	b.n	80113d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80113c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80113ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80113d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d903      	bls.n	80113e2 <pvPortMalloc+0xa6>
 80113da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1f1      	bne.n	80113c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80113e2:	4b37      	ldr	r3, [pc, #220]	; (80114c0 <pvPortMalloc+0x184>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d04c      	beq.n	8011486 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80113ec:	6a3b      	ldr	r3, [r7, #32]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2208      	movs	r2, #8
 80113f2:	4413      	add	r3, r2
 80113f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80113f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	6a3b      	ldr	r3, [r7, #32]
 80113fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80113fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011400:	685a      	ldr	r2, [r3, #4]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	1ad2      	subs	r2, r2, r3
 8011406:	2308      	movs	r3, #8
 8011408:	005b      	lsls	r3, r3, #1
 801140a:	429a      	cmp	r2, r3
 801140c:	d920      	bls.n	8011450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	4413      	add	r3, r2
 8011414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	f003 0307 	and.w	r3, r3, #7
 801141c:	2b00      	cmp	r3, #0
 801141e:	d00b      	beq.n	8011438 <pvPortMalloc+0xfc>
 8011420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011424:	b672      	cpsid	i
 8011426:	f383 8811 	msr	BASEPRI, r3
 801142a:	f3bf 8f6f 	isb	sy
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	b662      	cpsie	i
 8011434:	613b      	str	r3, [r7, #16]
 8011436:	e7fe      	b.n	8011436 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143a:	685a      	ldr	r2, [r3, #4]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	1ad2      	subs	r2, r2, r3
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801144a:	69b8      	ldr	r0, [r7, #24]
 801144c:	f000 f900 	bl	8011650 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011450:	4b1d      	ldr	r3, [pc, #116]	; (80114c8 <pvPortMalloc+0x18c>)
 8011452:	681a      	ldr	r2, [r3, #0]
 8011454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	1ad3      	subs	r3, r2, r3
 801145a:	4a1b      	ldr	r2, [pc, #108]	; (80114c8 <pvPortMalloc+0x18c>)
 801145c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801145e:	4b1a      	ldr	r3, [pc, #104]	; (80114c8 <pvPortMalloc+0x18c>)
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	4b1b      	ldr	r3, [pc, #108]	; (80114d0 <pvPortMalloc+0x194>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	429a      	cmp	r2, r3
 8011468:	d203      	bcs.n	8011472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801146a:	4b17      	ldr	r3, [pc, #92]	; (80114c8 <pvPortMalloc+0x18c>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4a18      	ldr	r2, [pc, #96]	; (80114d0 <pvPortMalloc+0x194>)
 8011470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011474:	685a      	ldr	r2, [r3, #4]
 8011476:	4b13      	ldr	r3, [pc, #76]	; (80114c4 <pvPortMalloc+0x188>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	431a      	orrs	r2, r3
 801147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011482:	2200      	movs	r2, #0
 8011484:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011486:	f7fe fcfb 	bl	800fe80 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d101      	bne.n	8011494 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011490:	f7ef f8a0 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	f003 0307 	and.w	r3, r3, #7
 801149a:	2b00      	cmp	r3, #0
 801149c:	d00b      	beq.n	80114b6 <pvPortMalloc+0x17a>
 801149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a2:	b672      	cpsid	i
 80114a4:	f383 8811 	msr	BASEPRI, r3
 80114a8:	f3bf 8f6f 	isb	sy
 80114ac:	f3bf 8f4f 	dsb	sy
 80114b0:	b662      	cpsie	i
 80114b2:	60fb      	str	r3, [r7, #12]
 80114b4:	e7fe      	b.n	80114b4 <pvPortMalloc+0x178>
	return pvReturn;
 80114b6:	69fb      	ldr	r3, [r7, #28]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3728      	adds	r7, #40	; 0x28
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	20008fcc 	.word	0x20008fcc
 80114c4:	20008fd8 	.word	0x20008fd8
 80114c8:	20008fd0 	.word	0x20008fd0
 80114cc:	20008fc4 	.word	0x20008fc4
 80114d0:	20008fd4 	.word	0x20008fd4

080114d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b086      	sub	sp, #24
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d04a      	beq.n	801157c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80114e6:	2308      	movs	r3, #8
 80114e8:	425b      	negs	r3, r3
 80114ea:	697a      	ldr	r2, [r7, #20]
 80114ec:	4413      	add	r3, r2
 80114ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	685a      	ldr	r2, [r3, #4]
 80114f8:	4b22      	ldr	r3, [pc, #136]	; (8011584 <vPortFree+0xb0>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	4013      	ands	r3, r2
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10b      	bne.n	801151a <vPortFree+0x46>
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	b672      	cpsid	i
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	b662      	cpsie	i
 8011516:	60fb      	str	r3, [r7, #12]
 8011518:	e7fe      	b.n	8011518 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00b      	beq.n	801153a <vPortFree+0x66>
 8011522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011526:	b672      	cpsid	i
 8011528:	f383 8811 	msr	BASEPRI, r3
 801152c:	f3bf 8f6f 	isb	sy
 8011530:	f3bf 8f4f 	dsb	sy
 8011534:	b662      	cpsie	i
 8011536:	60bb      	str	r3, [r7, #8]
 8011538:	e7fe      	b.n	8011538 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	685a      	ldr	r2, [r3, #4]
 801153e:	4b11      	ldr	r3, [pc, #68]	; (8011584 <vPortFree+0xb0>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4013      	ands	r3, r2
 8011544:	2b00      	cmp	r3, #0
 8011546:	d019      	beq.n	801157c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d115      	bne.n	801157c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	685a      	ldr	r2, [r3, #4]
 8011554:	4b0b      	ldr	r3, [pc, #44]	; (8011584 <vPortFree+0xb0>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	43db      	mvns	r3, r3
 801155a:	401a      	ands	r2, r3
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011560:	f7fe fc80 	bl	800fe64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	685a      	ldr	r2, [r3, #4]
 8011568:	4b07      	ldr	r3, [pc, #28]	; (8011588 <vPortFree+0xb4>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4413      	add	r3, r2
 801156e:	4a06      	ldr	r2, [pc, #24]	; (8011588 <vPortFree+0xb4>)
 8011570:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011572:	6938      	ldr	r0, [r7, #16]
 8011574:	f000 f86c 	bl	8011650 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011578:	f7fe fc82 	bl	800fe80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801157c:	bf00      	nop
 801157e:	3718      	adds	r7, #24
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	20008fd8 	.word	0x20008fd8
 8011588:	20008fd0 	.word	0x20008fd0

0801158c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801158c:	b480      	push	{r7}
 801158e:	b085      	sub	sp, #20
 8011590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011598:	4b27      	ldr	r3, [pc, #156]	; (8011638 <prvHeapInit+0xac>)
 801159a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f003 0307 	and.w	r3, r3, #7
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d00c      	beq.n	80115c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	3307      	adds	r3, #7
 80115aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f023 0307 	bic.w	r3, r3, #7
 80115b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80115b4:	68ba      	ldr	r2, [r7, #8]
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	1ad3      	subs	r3, r2, r3
 80115ba:	4a1f      	ldr	r2, [pc, #124]	; (8011638 <prvHeapInit+0xac>)
 80115bc:	4413      	add	r3, r2
 80115be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80115c4:	4a1d      	ldr	r2, [pc, #116]	; (801163c <prvHeapInit+0xb0>)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80115ca:	4b1c      	ldr	r3, [pc, #112]	; (801163c <prvHeapInit+0xb0>)
 80115cc:	2200      	movs	r2, #0
 80115ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	68ba      	ldr	r2, [r7, #8]
 80115d4:	4413      	add	r3, r2
 80115d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80115d8:	2208      	movs	r2, #8
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	1a9b      	subs	r3, r3, r2
 80115de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f023 0307 	bic.w	r3, r3, #7
 80115e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	4a15      	ldr	r2, [pc, #84]	; (8011640 <prvHeapInit+0xb4>)
 80115ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80115ee:	4b14      	ldr	r3, [pc, #80]	; (8011640 <prvHeapInit+0xb4>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2200      	movs	r2, #0
 80115f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80115f6:	4b12      	ldr	r3, [pc, #72]	; (8011640 <prvHeapInit+0xb4>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	2200      	movs	r2, #0
 80115fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	68fa      	ldr	r2, [r7, #12]
 8011606:	1ad2      	subs	r2, r2, r3
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801160c:	4b0c      	ldr	r3, [pc, #48]	; (8011640 <prvHeapInit+0xb4>)
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	4a0a      	ldr	r2, [pc, #40]	; (8011644 <prvHeapInit+0xb8>)
 801161a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	4a09      	ldr	r2, [pc, #36]	; (8011648 <prvHeapInit+0xbc>)
 8011622:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011624:	4b09      	ldr	r3, [pc, #36]	; (801164c <prvHeapInit+0xc0>)
 8011626:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801162a:	601a      	str	r2, [r3, #0]
}
 801162c:	bf00      	nop
 801162e:	3714      	adds	r7, #20
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr
 8011638:	20000fc4 	.word	0x20000fc4
 801163c:	20008fc4 	.word	0x20008fc4
 8011640:	20008fcc 	.word	0x20008fcc
 8011644:	20008fd4 	.word	0x20008fd4
 8011648:	20008fd0 	.word	0x20008fd0
 801164c:	20008fd8 	.word	0x20008fd8

08011650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011650:	b480      	push	{r7}
 8011652:	b085      	sub	sp, #20
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011658:	4b28      	ldr	r3, [pc, #160]	; (80116fc <prvInsertBlockIntoFreeList+0xac>)
 801165a:	60fb      	str	r3, [r7, #12]
 801165c:	e002      	b.n	8011664 <prvInsertBlockIntoFreeList+0x14>
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	60fb      	str	r3, [r7, #12]
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	429a      	cmp	r2, r3
 801166c:	d8f7      	bhi.n	801165e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	68ba      	ldr	r2, [r7, #8]
 8011678:	4413      	add	r3, r2
 801167a:	687a      	ldr	r2, [r7, #4]
 801167c:	429a      	cmp	r2, r3
 801167e:	d108      	bne.n	8011692 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	685a      	ldr	r2, [r3, #4]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	441a      	add	r2, r3
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	68ba      	ldr	r2, [r7, #8]
 801169c:	441a      	add	r2, r3
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d118      	bne.n	80116d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681a      	ldr	r2, [r3, #0]
 80116aa:	4b15      	ldr	r3, [pc, #84]	; (8011700 <prvInsertBlockIntoFreeList+0xb0>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d00d      	beq.n	80116ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	685a      	ldr	r2, [r3, #4]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	441a      	add	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	601a      	str	r2, [r3, #0]
 80116cc:	e008      	b.n	80116e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80116ce:	4b0c      	ldr	r3, [pc, #48]	; (8011700 <prvInsertBlockIntoFreeList+0xb0>)
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	e003      	b.n	80116e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d002      	beq.n	80116ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116ee:	bf00      	nop
 80116f0:	3714      	adds	r7, #20
 80116f2:	46bd      	mov	sp, r7
 80116f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f8:	4770      	bx	lr
 80116fa:	bf00      	nop
 80116fc:	20008fc4 	.word	0x20008fc4
 8011700:	20008fcc 	.word	0x20008fcc

08011704 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011708:	2201      	movs	r2, #1
 801170a:	490e      	ldr	r1, [pc, #56]	; (8011744 <MX_USB_HOST_Init+0x40>)
 801170c:	480e      	ldr	r0, [pc, #56]	; (8011748 <MX_USB_HOST_Init+0x44>)
 801170e:	f7fb fa83 	bl	800cc18 <USBH_Init>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d001      	beq.n	801171c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011718:	f7f0 f9e8 	bl	8001aec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801171c:	490b      	ldr	r1, [pc, #44]	; (801174c <MX_USB_HOST_Init+0x48>)
 801171e:	480a      	ldr	r0, [pc, #40]	; (8011748 <MX_USB_HOST_Init+0x44>)
 8011720:	f7fb fb2a 	bl	800cd78 <USBH_RegisterClass>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801172a:	f7f0 f9df 	bl	8001aec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801172e:	4806      	ldr	r0, [pc, #24]	; (8011748 <MX_USB_HOST_Init+0x44>)
 8011730:	f7fb fbae 	bl	800ce90 <USBH_Start>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801173a:	f7f0 f9d7 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801173e:	bf00      	nop
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	08011751 	.word	0x08011751
 8011748:	2000b170 	.word	0x2000b170
 801174c:	20000028 	.word	0x20000028

08011750 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	460b      	mov	r3, r1
 801175a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801175c:	78fb      	ldrb	r3, [r7, #3]
 801175e:	3b01      	subs	r3, #1
 8011760:	2b04      	cmp	r3, #4
 8011762:	d819      	bhi.n	8011798 <USBH_UserProcess+0x48>
 8011764:	a201      	add	r2, pc, #4	; (adr r2, 801176c <USBH_UserProcess+0x1c>)
 8011766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801176a:	bf00      	nop
 801176c:	08011799 	.word	0x08011799
 8011770:	08011789 	.word	0x08011789
 8011774:	08011799 	.word	0x08011799
 8011778:	08011791 	.word	0x08011791
 801177c:	08011781 	.word	0x08011781
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011780:	4b09      	ldr	r3, [pc, #36]	; (80117a8 <USBH_UserProcess+0x58>)
 8011782:	2203      	movs	r2, #3
 8011784:	701a      	strb	r2, [r3, #0]
  break;
 8011786:	e008      	b.n	801179a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011788:	4b07      	ldr	r3, [pc, #28]	; (80117a8 <USBH_UserProcess+0x58>)
 801178a:	2202      	movs	r2, #2
 801178c:	701a      	strb	r2, [r3, #0]
  break;
 801178e:	e004      	b.n	801179a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011790:	4b05      	ldr	r3, [pc, #20]	; (80117a8 <USBH_UserProcess+0x58>)
 8011792:	2201      	movs	r2, #1
 8011794:	701a      	strb	r2, [r3, #0]
  break;
 8011796:	e000      	b.n	801179a <USBH_UserProcess+0x4a>

  default:
  break;
 8011798:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801179a:	bf00      	nop
 801179c:	370c      	adds	r7, #12
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop
 80117a8:	20008fdc 	.word	0x20008fdc

080117ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b08a      	sub	sp, #40	; 0x28
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80117b4:	f107 0314 	add.w	r3, r7, #20
 80117b8:	2200      	movs	r2, #0
 80117ba:	601a      	str	r2, [r3, #0]
 80117bc:	605a      	str	r2, [r3, #4]
 80117be:	609a      	str	r2, [r3, #8]
 80117c0:	60da      	str	r2, [r3, #12]
 80117c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80117cc:	d13c      	bne.n	8011848 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117ce:	4b20      	ldr	r3, [pc, #128]	; (8011850 <HAL_HCD_MspInit+0xa4>)
 80117d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117d2:	4a1f      	ldr	r2, [pc, #124]	; (8011850 <HAL_HCD_MspInit+0xa4>)
 80117d4:	f043 0301 	orr.w	r3, r3, #1
 80117d8:	6313      	str	r3, [r2, #48]	; 0x30
 80117da:	4b1d      	ldr	r3, [pc, #116]	; (8011850 <HAL_HCD_MspInit+0xa4>)
 80117dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117de:	f003 0301 	and.w	r3, r3, #1
 80117e2:	613b      	str	r3, [r7, #16]
 80117e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80117e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80117ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117ec:	2302      	movs	r3, #2
 80117ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117f0:	2300      	movs	r3, #0
 80117f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80117f4:	2303      	movs	r3, #3
 80117f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80117f8:	230a      	movs	r3, #10
 80117fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117fc:	f107 0314 	add.w	r3, r7, #20
 8011800:	4619      	mov	r1, r3
 8011802:	4814      	ldr	r0, [pc, #80]	; (8011854 <HAL_HCD_MspInit+0xa8>)
 8011804:	f7f3 fcbe 	bl	8005184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011808:	4b11      	ldr	r3, [pc, #68]	; (8011850 <HAL_HCD_MspInit+0xa4>)
 801180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801180c:	4a10      	ldr	r2, [pc, #64]	; (8011850 <HAL_HCD_MspInit+0xa4>)
 801180e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011812:	6353      	str	r3, [r2, #52]	; 0x34
 8011814:	4b0e      	ldr	r3, [pc, #56]	; (8011850 <HAL_HCD_MspInit+0xa4>)
 8011816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801181c:	60fb      	str	r3, [r7, #12]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <HAL_HCD_MspInit+0xa4>)
 8011822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011824:	4a0a      	ldr	r2, [pc, #40]	; (8011850 <HAL_HCD_MspInit+0xa4>)
 8011826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801182a:	6453      	str	r3, [r2, #68]	; 0x44
 801182c:	4b08      	ldr	r3, [pc, #32]	; (8011850 <HAL_HCD_MspInit+0xa4>)
 801182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011834:	60bb      	str	r3, [r7, #8]
 8011836:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011838:	2200      	movs	r2, #0
 801183a:	2100      	movs	r1, #0
 801183c:	2043      	movs	r0, #67	; 0x43
 801183e:	f7f2 fc31 	bl	80040a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011842:	2043      	movs	r0, #67	; 0x43
 8011844:	f7f2 fc4a 	bl	80040dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011848:	bf00      	nop
 801184a:	3728      	adds	r7, #40	; 0x28
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	40023800 	.word	0x40023800
 8011854:	40020000 	.word	0x40020000

08011858 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011866:	4618      	mov	r0, r3
 8011868:	f7fb ffbf 	bl	800d7ea <USBH_LL_IncTimer>
}
 801186c:	bf00      	nop
 801186e:	3708      	adds	r7, #8
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011882:	4618      	mov	r0, r3
 8011884:	f7fc f803 	bl	800d88e <USBH_LL_Connect>
}
 8011888:	bf00      	nop
 801188a:	3708      	adds	r7, #8
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801189e:	4618      	mov	r0, r3
 80118a0:	f7fc f818 	bl	800d8d4 <USBH_LL_Disconnect>
}
 80118a4:	bf00      	nop
 80118a6:	3708      	adds	r7, #8
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	460b      	mov	r3, r1
 80118b6:	70fb      	strb	r3, [r7, #3]
 80118b8:	4613      	mov	r3, r2
 80118ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fc f84f 	bl	800d966 <USBH_LL_NotifyURBChange>
#endif
}
 80118c8:	bf00      	nop
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fb ffad 	bl	800d83e <USBH_LL_PortEnabled>
}
 80118e4:	bf00      	nop
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7fb ffb9 	bl	800d872 <USBH_LL_PortDisabled>
}
 8011900:	bf00      	nop
 8011902:	3708      	adds	r7, #8
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011916:	2b01      	cmp	r3, #1
 8011918:	d12a      	bne.n	8011970 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801191a:	4a18      	ldr	r2, [pc, #96]	; (801197c <USBH_LL_Init+0x74>)
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4a15      	ldr	r2, [pc, #84]	; (801197c <USBH_LL_Init+0x74>)
 8011926:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801192a:	4b14      	ldr	r3, [pc, #80]	; (801197c <USBH_LL_Init+0x74>)
 801192c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011930:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8011932:	4b12      	ldr	r3, [pc, #72]	; (801197c <USBH_LL_Init+0x74>)
 8011934:	2208      	movs	r2, #8
 8011936:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011938:	4b10      	ldr	r3, [pc, #64]	; (801197c <USBH_LL_Init+0x74>)
 801193a:	2201      	movs	r2, #1
 801193c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801193e:	4b0f      	ldr	r3, [pc, #60]	; (801197c <USBH_LL_Init+0x74>)
 8011940:	2200      	movs	r2, #0
 8011942:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011944:	4b0d      	ldr	r3, [pc, #52]	; (801197c <USBH_LL_Init+0x74>)
 8011946:	2202      	movs	r2, #2
 8011948:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801194a:	4b0c      	ldr	r3, [pc, #48]	; (801197c <USBH_LL_Init+0x74>)
 801194c:	2200      	movs	r2, #0
 801194e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011950:	480a      	ldr	r0, [pc, #40]	; (801197c <USBH_LL_Init+0x74>)
 8011952:	f7f3 fdda 	bl	800550a <HAL_HCD_Init>
 8011956:	4603      	mov	r3, r0
 8011958:	2b00      	cmp	r3, #0
 801195a:	d001      	beq.n	8011960 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801195c:	f7f0 f8c6 	bl	8001aec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011960:	4806      	ldr	r0, [pc, #24]	; (801197c <USBH_LL_Init+0x74>)
 8011962:	f7f4 f9dd 	bl	8005d20 <HAL_HCD_GetCurrentFrame>
 8011966:	4603      	mov	r3, r0
 8011968:	4619      	mov	r1, r3
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f7fb ff2e 	bl	800d7cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011970:	2300      	movs	r3, #0
}
 8011972:	4618      	mov	r0, r3
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	2000b554 	.word	0x2000b554

08011980 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011988:	2300      	movs	r3, #0
 801198a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801198c:	2300      	movs	r3, #0
 801198e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011996:	4618      	mov	r0, r3
 8011998:	f7f4 f94a 	bl	8005c30 <HAL_HCD_Start>
 801199c:	4603      	mov	r3, r0
 801199e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80119a0:	7bfb      	ldrb	r3, [r7, #15]
 80119a2:	4618      	mov	r0, r3
 80119a4:	f000 f95c 	bl	8011c60 <USBH_Get_USB_Status>
 80119a8:	4603      	mov	r3, r0
 80119aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b084      	sub	sp, #16
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119be:	2300      	movs	r3, #0
 80119c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80119c2:	2300      	movs	r3, #0
 80119c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7f4 f952 	bl	8005c76 <HAL_HCD_Stop>
 80119d2:	4603      	mov	r3, r0
 80119d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80119d6:	7bfb      	ldrb	r3, [r7, #15]
 80119d8:	4618      	mov	r0, r3
 80119da:	f000 f941 	bl	8011c60 <USBH_Get_USB_Status>
 80119de:	4603      	mov	r3, r0
 80119e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3710      	adds	r7, #16
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80119f4:	2301      	movs	r3, #1
 80119f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7f4 f99c 	bl	8005d3c <HAL_HCD_GetCurrentSpeed>
 8011a04:	4603      	mov	r3, r0
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	d007      	beq.n	8011a1a <USBH_LL_GetSpeed+0x2e>
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d302      	bcc.n	8011a14 <USBH_LL_GetSpeed+0x28>
 8011a0e:	2b02      	cmp	r3, #2
 8011a10:	d006      	beq.n	8011a20 <USBH_LL_GetSpeed+0x34>
 8011a12:	e008      	b.n	8011a26 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011a14:	2300      	movs	r3, #0
 8011a16:	73fb      	strb	r3, [r7, #15]
    break;
 8011a18:	e008      	b.n	8011a2c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8011a1e:	e005      	b.n	8011a2c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011a20:	2302      	movs	r3, #2
 8011a22:	73fb      	strb	r3, [r7, #15]
    break;
 8011a24:	e002      	b.n	8011a2c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8011a26:	2301      	movs	r3, #1
 8011a28:	73fb      	strb	r3, [r7, #15]
    break;
 8011a2a:	bf00      	nop
  }
  return  speed;
 8011a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3710      	adds	r7, #16
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}

08011a36 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011a36:	b580      	push	{r7, lr}
 8011a38:	b084      	sub	sp, #16
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a42:	2300      	movs	r3, #0
 8011a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7f4 f92f 	bl	8005cb0 <HAL_HCD_ResetPort>
 8011a52:	4603      	mov	r3, r0
 8011a54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011a56:	7bfb      	ldrb	r3, [r7, #15]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f000 f901 	bl	8011c60 <USBH_Get_USB_Status>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a62:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3710      	adds	r7, #16
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b082      	sub	sp, #8
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	460b      	mov	r3, r1
 8011a76:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a7e:	78fa      	ldrb	r2, [r7, #3]
 8011a80:	4611      	mov	r1, r2
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7f4 f937 	bl	8005cf6 <HAL_HCD_HC_GetXferCount>
 8011a88:	4603      	mov	r3, r0
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011a92:	b590      	push	{r4, r7, lr}
 8011a94:	b089      	sub	sp, #36	; 0x24
 8011a96:	af04      	add	r7, sp, #16
 8011a98:	6078      	str	r0, [r7, #4]
 8011a9a:	4608      	mov	r0, r1
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	70fb      	strb	r3, [r7, #3]
 8011aa4:	460b      	mov	r3, r1
 8011aa6:	70bb      	strb	r3, [r7, #2]
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aac:	2300      	movs	r3, #0
 8011aae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011aba:	787c      	ldrb	r4, [r7, #1]
 8011abc:	78ba      	ldrb	r2, [r7, #2]
 8011abe:	78f9      	ldrb	r1, [r7, #3]
 8011ac0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011ac2:	9302      	str	r3, [sp, #8]
 8011ac4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011ac8:	9301      	str	r3, [sp, #4]
 8011aca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011ace:	9300      	str	r3, [sp, #0]
 8011ad0:	4623      	mov	r3, r4
 8011ad2:	f7f3 fd7c 	bl	80055ce <HAL_HCD_HC_Init>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011ada:	7bfb      	ldrb	r3, [r7, #15]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f000 f8bf 	bl	8011c60 <USBH_Get_USB_Status>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ae8:	4618      	mov	r0, r3
 8011aea:	3714      	adds	r7, #20
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd90      	pop	{r4, r7, pc}

08011af0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	460b      	mov	r3, r1
 8011afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b00:	2300      	movs	r3, #0
 8011b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011b0a:	78fa      	ldrb	r2, [r7, #3]
 8011b0c:	4611      	mov	r1, r2
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7f3 fdf5 	bl	80056fe <HAL_HCD_HC_Halt>
 8011b14:	4603      	mov	r3, r0
 8011b16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f000 f8a0 	bl	8011c60 <USBH_Get_USB_Status>
 8011b20:	4603      	mov	r3, r0
 8011b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3710      	adds	r7, #16
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}

08011b2e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011b2e:	b590      	push	{r4, r7, lr}
 8011b30:	b089      	sub	sp, #36	; 0x24
 8011b32:	af04      	add	r7, sp, #16
 8011b34:	6078      	str	r0, [r7, #4]
 8011b36:	4608      	mov	r0, r1
 8011b38:	4611      	mov	r1, r2
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	70fb      	strb	r3, [r7, #3]
 8011b40:	460b      	mov	r3, r1
 8011b42:	70bb      	strb	r3, [r7, #2]
 8011b44:	4613      	mov	r3, r2
 8011b46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011b56:	787c      	ldrb	r4, [r7, #1]
 8011b58:	78ba      	ldrb	r2, [r7, #2]
 8011b5a:	78f9      	ldrb	r1, [r7, #3]
 8011b5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011b60:	9303      	str	r3, [sp, #12]
 8011b62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011b64:	9302      	str	r3, [sp, #8]
 8011b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b68:	9301      	str	r3, [sp, #4]
 8011b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b6e:	9300      	str	r3, [sp, #0]
 8011b70:	4623      	mov	r3, r4
 8011b72:	f7f3 fde7 	bl	8005744 <HAL_HCD_HC_SubmitRequest>
 8011b76:	4603      	mov	r3, r0
 8011b78:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011b7a:	7bfb      	ldrb	r3, [r7, #15]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f000 f86f 	bl	8011c60 <USBH_Get_USB_Status>
 8011b82:	4603      	mov	r3, r0
 8011b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3714      	adds	r7, #20
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd90      	pop	{r4, r7, pc}

08011b90 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	460b      	mov	r3, r1
 8011b9a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011ba2:	78fa      	ldrb	r2, [r7, #3]
 8011ba4:	4611      	mov	r1, r2
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7f4 f890 	bl	8005ccc <HAL_HCD_HC_GetURBState>
 8011bac:	4603      	mov	r3, r0
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3708      	adds	r7, #8
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b082      	sub	sp, #8
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d103      	bne.n	8011bd4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011bcc:	78fb      	ldrb	r3, [r7, #3]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f000 f872 	bl	8011cb8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011bd4:	20c8      	movs	r0, #200	; 0xc8
 8011bd6:	f7f1 ff03 	bl	80039e0 <HAL_Delay>
  return USBH_OK;
 8011bda:	2300      	movs	r3, #0
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011be4:	b480      	push	{r7}
 8011be6:	b085      	sub	sp, #20
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	460b      	mov	r3, r1
 8011bee:	70fb      	strb	r3, [r7, #3]
 8011bf0:	4613      	mov	r3, r2
 8011bf2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011bfa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011bfc:	78fa      	ldrb	r2, [r7, #3]
 8011bfe:	68f9      	ldr	r1, [r7, #12]
 8011c00:	4613      	mov	r3, r2
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	4413      	add	r3, r2
 8011c06:	00db      	lsls	r3, r3, #3
 8011c08:	440b      	add	r3, r1
 8011c0a:	333b      	adds	r3, #59	; 0x3b
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d00a      	beq.n	8011c28 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011c12:	78fa      	ldrb	r2, [r7, #3]
 8011c14:	68f9      	ldr	r1, [r7, #12]
 8011c16:	4613      	mov	r3, r2
 8011c18:	009b      	lsls	r3, r3, #2
 8011c1a:	4413      	add	r3, r2
 8011c1c:	00db      	lsls	r3, r3, #3
 8011c1e:	440b      	add	r3, r1
 8011c20:	3350      	adds	r3, #80	; 0x50
 8011c22:	78ba      	ldrb	r2, [r7, #2]
 8011c24:	701a      	strb	r2, [r3, #0]
 8011c26:	e009      	b.n	8011c3c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011c28:	78fa      	ldrb	r2, [r7, #3]
 8011c2a:	68f9      	ldr	r1, [r7, #12]
 8011c2c:	4613      	mov	r3, r2
 8011c2e:	009b      	lsls	r3, r3, #2
 8011c30:	4413      	add	r3, r2
 8011c32:	00db      	lsls	r3, r3, #3
 8011c34:	440b      	add	r3, r1
 8011c36:	3351      	adds	r3, #81	; 0x51
 8011c38:	78ba      	ldrb	r2, [r7, #2]
 8011c3a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011c3c:	2300      	movs	r3, #0
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3714      	adds	r7, #20
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr

08011c4a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011c4a:	b580      	push	{r7, lr}
 8011c4c:	b082      	sub	sp, #8
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7f1 fec4 	bl	80039e0 <HAL_Delay>
}
 8011c58:	bf00      	nop
 8011c5a:	3708      	adds	r7, #8
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b085      	sub	sp, #20
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	4603      	mov	r3, r0
 8011c68:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011c6e:	79fb      	ldrb	r3, [r7, #7]
 8011c70:	2b03      	cmp	r3, #3
 8011c72:	d817      	bhi.n	8011ca4 <USBH_Get_USB_Status+0x44>
 8011c74:	a201      	add	r2, pc, #4	; (adr r2, 8011c7c <USBH_Get_USB_Status+0x1c>)
 8011c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c7a:	bf00      	nop
 8011c7c:	08011c8d 	.word	0x08011c8d
 8011c80:	08011c93 	.word	0x08011c93
 8011c84:	08011c99 	.word	0x08011c99
 8011c88:	08011c9f 	.word	0x08011c9f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8011c90:	e00b      	b.n	8011caa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011c92:	2302      	movs	r3, #2
 8011c94:	73fb      	strb	r3, [r7, #15]
    break;
 8011c96:	e008      	b.n	8011caa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011c98:	2301      	movs	r3, #1
 8011c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c9c:	e005      	b.n	8011caa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011c9e:	2302      	movs	r3, #2
 8011ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8011ca2:	e002      	b.n	8011caa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011ca4:	2302      	movs	r3, #2
 8011ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ca8:	bf00      	nop
  }
  return usb_status;
 8011caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3714      	adds	r7, #20
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr

08011cb8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b084      	sub	sp, #16
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011cc2:	79fb      	ldrb	r3, [r7, #7]
 8011cc4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011cc6:	79fb      	ldrb	r3, [r7, #7]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d102      	bne.n	8011cd2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011ccc:	2301      	movs	r3, #1
 8011cce:	73fb      	strb	r3, [r7, #15]
 8011cd0:	e001      	b.n	8011cd6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
 8011cd8:	461a      	mov	r2, r3
 8011cda:	2120      	movs	r1, #32
 8011cdc:	4803      	ldr	r0, [pc, #12]	; (8011cec <MX_DriverVbusFS+0x34>)
 8011cde:	f7f3 fbfb 	bl	80054d8 <HAL_GPIO_WritePin>
}
 8011ce2:	bf00      	nop
 8011ce4:	3710      	adds	r7, #16
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	40020c00 	.word	0x40020c00

08011cf0 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 8011cf4:	f000 f806 	bl	8011d04 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8011cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfc:	f7f1 f888 	bl	8002e10 <BSP_LCD_Clear>
}
 8011d00:	bf00      	nop
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 8011d04:	b480      	push	{r7}
 8011d06:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8011d08:	4b12      	ldr	r3, [pc, #72]	; (8011d54 <LCD_LOG_DeInit+0x50>)
 8011d0a:	4a13      	ldr	r2, [pc, #76]	; (8011d58 <LCD_LOG_DeInit+0x54>)
 8011d0c:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8011d0e:	4b13      	ldr	r3, [pc, #76]	; (8011d5c <LCD_LOG_DeInit+0x58>)
 8011d10:	2200      	movs	r2, #0
 8011d12:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8011d14:	4b12      	ldr	r3, [pc, #72]	; (8011d60 <LCD_LOG_DeInit+0x5c>)
 8011d16:	2200      	movs	r2, #0
 8011d18:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8011d1a:	4b12      	ldr	r3, [pc, #72]	; (8011d64 <LCD_LOG_DeInit+0x60>)
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8011d20:	4b11      	ldr	r3, [pc, #68]	; (8011d68 <LCD_LOG_DeInit+0x64>)
 8011d22:	2200      	movs	r2, #0
 8011d24:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8011d26:	4b11      	ldr	r3, [pc, #68]	; (8011d6c <LCD_LOG_DeInit+0x68>)
 8011d28:	2200      	movs	r2, #0
 8011d2a:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8011d2c:	4b10      	ldr	r3, [pc, #64]	; (8011d70 <LCD_LOG_DeInit+0x6c>)
 8011d2e:	2201      	movs	r2, #1
 8011d30:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8011d32:	4b10      	ldr	r3, [pc, #64]	; (8011d74 <LCD_LOG_DeInit+0x70>)
 8011d34:	2200      	movs	r2, #0
 8011d36:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8011d38:	4b0f      	ldr	r3, [pc, #60]	; (8011d78 <LCD_LOG_DeInit+0x74>)
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 8011d3e:	4b0f      	ldr	r3, [pc, #60]	; (8011d7c <LCD_LOG_DeInit+0x78>)
 8011d40:	2200      	movs	r2, #0
 8011d42:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8011d44:	4b0e      	ldr	r3, [pc, #56]	; (8011d80 <LCD_LOG_DeInit+0x7c>)
 8011d46:	2200      	movs	r2, #0
 8011d48:	801a      	strh	r2, [r3, #0]
}
 8011d4a:	bf00      	nop
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr
 8011d54:	2000f47c 	.word	0x2000f47c
 8011d58:	ff000080 	.word	0xff000080
 8011d5c:	2000b81e 	.word	0x2000b81e
 8011d60:	2000b824 	.word	0x2000b824
 8011d64:	2000b81c 	.word	0x2000b81c
 8011d68:	2000b81a 	.word	0x2000b81a
 8011d6c:	2000b818 	.word	0x2000b818
 8011d70:	2000b820 	.word	0x2000b820
 8011d74:	2000b826 	.word	0x2000b826
 8011d78:	2000b821 	.word	0x2000b821
 8011d7c:	2000b822 	.word	0x2000b822
 8011d80:	2000f480 	.word	0x2000f480

08011d84 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8011d8c:	4817      	ldr	r0, [pc, #92]	; (8011dec <LCD_LOG_SetHeader+0x68>)
 8011d8e:	f7f1 f80f 	bl	8002db0 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8011d92:	4817      	ldr	r0, [pc, #92]	; (8011df0 <LCD_LOG_SetHeader+0x6c>)
 8011d94:	f7f0 ffda 	bl	8002d4c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8011d98:	f7f0 ff50 	bl	8002c3c <BSP_LCD_GetXSize>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	b29a      	uxth	r2, r3
 8011da0:	4b12      	ldr	r3, [pc, #72]	; (8011dec <LCD_LOG_SetHeader+0x68>)
 8011da2:	88db      	ldrh	r3, [r3, #6]
 8011da4:	4619      	mov	r1, r3
 8011da6:	0049      	lsls	r1, r1, #1
 8011da8:	440b      	add	r3, r1
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	2100      	movs	r1, #0
 8011dae:	2000      	movs	r0, #0
 8011db0:	f7f1 f9be 	bl	8003130 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8011db4:	f04f 30ff 	mov.w	r0, #4294967295
 8011db8:	f7f0 ffc8 	bl	8002d4c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8011dbc:	480c      	ldr	r0, [pc, #48]	; (8011df0 <LCD_LOG_SetHeader+0x6c>)
 8011dbe:	f7f0 ffdd 	bl	8002d7c <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 8011dc2:	4b0a      	ldr	r3, [pc, #40]	; (8011dec <LCD_LOG_SetHeader+0x68>)
 8011dc4:	88d9      	ldrh	r1, [r3, #6]
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	2000      	movs	r0, #0
 8011dcc:	f7f1 f88c 	bl	8002ee8 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8011dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd4:	f7f0 ffd2 	bl	8002d7c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8011dd8:	4806      	ldr	r0, [pc, #24]	; (8011df4 <LCD_LOG_SetHeader+0x70>)
 8011dda:	f7f0 ffb7 	bl	8002d4c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8011dde:	4806      	ldr	r0, [pc, #24]	; (8011df8 <LCD_LOG_SetHeader+0x74>)
 8011de0:	f7f0 ffe6 	bl	8002db0 <BSP_LCD_SetFont>
}
 8011de4:	bf00      	nop
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	2000000c 	.word	0x2000000c
 8011df0:	ff0000ff 	.word	0xff0000ff
 8011df4:	ff000080 	.word	0xff000080
 8011df8:	20000014 	.word	0x20000014

08011dfc <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8011dfc:	b590      	push	{r4, r7, lr}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8011e04:	481e      	ldr	r0, [pc, #120]	; (8011e80 <LCD_LOG_SetFooter+0x84>)
 8011e06:	f7f0 ffd3 	bl	8002db0 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8011e0a:	481e      	ldr	r0, [pc, #120]	; (8011e84 <LCD_LOG_SetFooter+0x88>)
 8011e0c:	f7f0 ff9e 	bl	8002d4c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8011e10:	f7f0 ff28 	bl	8002c64 <BSP_LCD_GetYSize>
 8011e14:	4603      	mov	r3, r0
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	4b19      	ldr	r3, [pc, #100]	; (8011e80 <LCD_LOG_SetFooter+0x84>)
 8011e1a:	88db      	ldrh	r3, [r3, #6]
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	3b04      	subs	r3, #4
 8011e22:	b29c      	uxth	r4, r3
 8011e24:	f7f0 ff0a 	bl	8002c3c <BSP_LCD_GetXSize>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	b29a      	uxth	r2, r3
 8011e2c:	4b14      	ldr	r3, [pc, #80]	; (8011e80 <LCD_LOG_SetFooter+0x84>)
 8011e2e:	88db      	ldrh	r3, [r3, #6]
 8011e30:	3304      	adds	r3, #4
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	4621      	mov	r1, r4
 8011e36:	2000      	movs	r0, #0
 8011e38:	f7f1 f97a 	bl	8003130 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8011e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e40:	f7f0 ff84 	bl	8002d4c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8011e44:	480f      	ldr	r0, [pc, #60]	; (8011e84 <LCD_LOG_SetFooter+0x88>)
 8011e46:	f7f0 ff99 	bl	8002d7c <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 8011e4a:	f7f0 ff0b 	bl	8002c64 <BSP_LCD_GetYSize>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	4b0b      	ldr	r3, [pc, #44]	; (8011e80 <LCD_LOG_SetFooter+0x84>)
 8011e54:	88db      	ldrh	r3, [r3, #6]
 8011e56:	1ad3      	subs	r3, r2, r3
 8011e58:	b299      	uxth	r1, r3
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	2000      	movs	r0, #0
 8011e60:	f7f1 f842 	bl	8002ee8 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8011e64:	f04f 30ff 	mov.w	r0, #4294967295
 8011e68:	f7f0 ff88 	bl	8002d7c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8011e6c:	4806      	ldr	r0, [pc, #24]	; (8011e88 <LCD_LOG_SetFooter+0x8c>)
 8011e6e:	f7f0 ff6d 	bl	8002d4c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8011e72:	4803      	ldr	r0, [pc, #12]	; (8011e80 <LCD_LOG_SetFooter+0x84>)
 8011e74:	f7f0 ff9c 	bl	8002db0 <BSP_LCD_SetFont>
}
 8011e78:	bf00      	nop
 8011e7a:	370c      	adds	r7, #12
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd90      	pop	{r4, r7, pc}
 8011e80:	20000014 	.word	0x20000014
 8011e84:	ff0000ff 	.word	0xff0000ff
 8011e88:	ff000080 	.word	0xff000080

08011e8c <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 8011e8c:	b590      	push	{r4, r7, lr}
 8011e8e:	b085      	sub	sp, #20
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8011e94:	f7f0 ffa6 	bl	8002de4 <BSP_LCD_GetFont>
 8011e98:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 8011e9a:	4b60      	ldr	r3, [pc, #384]	; (801201c <__io_putchar+0x190>)
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	f040 80b6 	bne.w	8012010 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 8011ea4:	4b5e      	ldr	r3, [pc, #376]	; (8012020 <__io_putchar+0x194>)
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	d110      	bne.n	8011ece <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8011eac:	4b5d      	ldr	r3, [pc, #372]	; (8012024 <__io_putchar+0x198>)
 8011eae:	881a      	ldrh	r2, [r3, #0]
 8011eb0:	4b5d      	ldr	r3, [pc, #372]	; (8012028 <__io_putchar+0x19c>)
 8011eb2:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8011eb4:	4b5d      	ldr	r3, [pc, #372]	; (801202c <__io_putchar+0x1a0>)
 8011eb6:	881a      	ldrh	r2, [r3, #0]
 8011eb8:	4b5d      	ldr	r3, [pc, #372]	; (8012030 <__io_putchar+0x1a4>)
 8011eba:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8011ebc:	4b58      	ldr	r3, [pc, #352]	; (8012020 <__io_putchar+0x194>)
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 8011ec2:	4b5c      	ldr	r3, [pc, #368]	; (8012034 <__io_putchar+0x1a8>)
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8011ec8:	4b5b      	ldr	r3, [pc, #364]	; (8012038 <__io_putchar+0x1ac>)
 8011eca:	2200      	movs	r2, #0
 8011ecc:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8011ece:	4b5b      	ldr	r3, [pc, #364]	; (801203c <__io_putchar+0x1b0>)
 8011ed0:	881b      	ldrh	r3, [r3, #0]
 8011ed2:	461c      	mov	r4, r3
 8011ed4:	f7f0 feb2 	bl	8002c3c <BSP_LCD_GetXSize>
 8011ed8:	4602      	mov	r2, r0
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	889b      	ldrh	r3, [r3, #4]
 8011ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ee2:	429c      	cmp	r4, r3
 8011ee4:	d218      	bcs.n	8011f18 <__io_putchar+0x8c>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2b0a      	cmp	r3, #10
 8011eea:	d015      	beq.n	8011f18 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8011eec:	4b4e      	ldr	r3, [pc, #312]	; (8012028 <__io_putchar+0x19c>)
 8011eee:	881b      	ldrh	r3, [r3, #0]
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	4b52      	ldr	r3, [pc, #328]	; (801203c <__io_putchar+0x1b0>)
 8011ef4:	881b      	ldrh	r3, [r3, #0]
 8011ef6:	1c5a      	adds	r2, r3, #1
 8011ef8:	b290      	uxth	r0, r2
 8011efa:	4a50      	ldr	r2, [pc, #320]	; (801203c <__io_putchar+0x1b0>)
 8011efc:	8010      	strh	r0, [r2, #0]
 8011efe:	461c      	mov	r4, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	b2d8      	uxtb	r0, r3
 8011f04:	4a4e      	ldr	r2, [pc, #312]	; (8012040 <__io_putchar+0x1b4>)
 8011f06:	460b      	mov	r3, r1
 8011f08:	015b      	lsls	r3, r3, #5
 8011f0a:	440b      	add	r3, r1
 8011f0c:	009b      	lsls	r3, r3, #2
 8011f0e:	4413      	add	r3, r2
 8011f10:	4423      	add	r3, r4
 8011f12:	4602      	mov	r2, r0
 8011f14:	701a      	strb	r2, [r3, #0]
 8011f16:	e07b      	b.n	8012010 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8011f18:	4b45      	ldr	r3, [pc, #276]	; (8012030 <__io_putchar+0x1a4>)
 8011f1a:	881a      	ldrh	r2, [r3, #0]
 8011f1c:	4b42      	ldr	r3, [pc, #264]	; (8012028 <__io_putchar+0x19c>)
 8011f1e:	881b      	ldrh	r3, [r3, #0]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d314      	bcc.n	8011f4e <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8011f24:	4b47      	ldr	r3, [pc, #284]	; (8012044 <__io_putchar+0x1b8>)
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d10d      	bne.n	8011f48 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 8011f2c:	4b40      	ldr	r3, [pc, #256]	; (8012030 <__io_putchar+0x1a4>)
 8011f2e:	881b      	ldrh	r3, [r3, #0]
 8011f30:	3301      	adds	r3, #1
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	4b3e      	ldr	r3, [pc, #248]	; (8012030 <__io_putchar+0x1a4>)
 8011f36:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8011f38:	4b3d      	ldr	r3, [pc, #244]	; (8012030 <__io_putchar+0x1a4>)
 8011f3a:	881b      	ldrh	r3, [r3, #0]
 8011f3c:	2b75      	cmp	r3, #117	; 0x75
 8011f3e:	d106      	bne.n	8011f4e <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8011f40:	4b3b      	ldr	r3, [pc, #236]	; (8012030 <__io_putchar+0x1a4>)
 8011f42:	2200      	movs	r2, #0
 8011f44:	801a      	strh	r2, [r3, #0]
 8011f46:	e002      	b.n	8011f4e <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8011f48:	4b3e      	ldr	r3, [pc, #248]	; (8012044 <__io_putchar+0x1b8>)
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8011f4e:	4b3b      	ldr	r3, [pc, #236]	; (801203c <__io_putchar+0x1b0>)
 8011f50:	881b      	ldrh	r3, [r3, #0]
 8011f52:	60fb      	str	r3, [r7, #12]
 8011f54:	e015      	b.n	8011f82 <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8011f56:	4b34      	ldr	r3, [pc, #208]	; (8012028 <__io_putchar+0x19c>)
 8011f58:	881b      	ldrh	r3, [r3, #0]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	4b37      	ldr	r3, [pc, #220]	; (801203c <__io_putchar+0x1b0>)
 8011f5e:	881b      	ldrh	r3, [r3, #0]
 8011f60:	1c5a      	adds	r2, r3, #1
 8011f62:	b290      	uxth	r0, r2
 8011f64:	4a35      	ldr	r2, [pc, #212]	; (801203c <__io_putchar+0x1b0>)
 8011f66:	8010      	strh	r0, [r2, #0]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	4a35      	ldr	r2, [pc, #212]	; (8012040 <__io_putchar+0x1b4>)
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	015b      	lsls	r3, r3, #5
 8011f70:	440b      	add	r3, r1
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	4413      	add	r3, r2
 8011f76:	4403      	add	r3, r0
 8011f78:	2220      	movs	r2, #32
 8011f7a:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	60fb      	str	r3, [r7, #12]
 8011f82:	f7f0 fe5b 	bl	8002c3c <BSP_LCD_GetXSize>
 8011f86:	4602      	mov	r2, r0
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	889b      	ldrh	r3, [r3, #4]
 8011f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f90:	68fa      	ldr	r2, [r7, #12]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d3df      	bcc.n	8011f56 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8011f96:	4b24      	ldr	r3, [pc, #144]	; (8012028 <__io_putchar+0x19c>)
 8011f98:	881b      	ldrh	r3, [r3, #0]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	4b2a      	ldr	r3, [pc, #168]	; (8012048 <__io_putchar+0x1bc>)
 8011f9e:	681a      	ldr	r2, [r3, #0]
 8011fa0:	4927      	ldr	r1, [pc, #156]	; (8012040 <__io_putchar+0x1b4>)
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	015b      	lsls	r3, r3, #5
 8011fa6:	4403      	add	r3, r0
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	440b      	add	r3, r1
 8011fac:	3380      	adds	r3, #128	; 0x80
 8011fae:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 8011fb0:	4b22      	ldr	r3, [pc, #136]	; (801203c <__io_putchar+0x1b0>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8011fb6:	f000 f849 	bl	801204c <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8011fba:	4b1b      	ldr	r3, [pc, #108]	; (8012028 <__io_putchar+0x19c>)
 8011fbc:	881b      	ldrh	r3, [r3, #0]
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	b29a      	uxth	r2, r3
 8011fc2:	4b19      	ldr	r3, [pc, #100]	; (8012028 <__io_putchar+0x19c>)
 8011fc4:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8011fc6:	4b18      	ldr	r3, [pc, #96]	; (8012028 <__io_putchar+0x19c>)
 8011fc8:	881b      	ldrh	r3, [r3, #0]
 8011fca:	2b75      	cmp	r3, #117	; 0x75
 8011fcc:	d108      	bne.n	8011fe0 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 8011fce:	4b16      	ldr	r3, [pc, #88]	; (8012028 <__io_putchar+0x19c>)
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8011fd4:	4b16      	ldr	r3, [pc, #88]	; (8012030 <__io_putchar+0x1a4>)
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8011fda:	4b1a      	ldr	r3, [pc, #104]	; (8012044 <__io_putchar+0x1b8>)
 8011fdc:	2201      	movs	r2, #1
 8011fde:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2b0a      	cmp	r3, #10
 8011fe4:	d014      	beq.n	8012010 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8011fe6:	4b10      	ldr	r3, [pc, #64]	; (8012028 <__io_putchar+0x19c>)
 8011fe8:	881b      	ldrh	r3, [r3, #0]
 8011fea:	4619      	mov	r1, r3
 8011fec:	4b13      	ldr	r3, [pc, #76]	; (801203c <__io_putchar+0x1b0>)
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	1c5a      	adds	r2, r3, #1
 8011ff2:	b290      	uxth	r0, r2
 8011ff4:	4a11      	ldr	r2, [pc, #68]	; (801203c <__io_putchar+0x1b0>)
 8011ff6:	8010      	strh	r0, [r2, #0]
 8011ff8:	461c      	mov	r4, r3
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	b2d8      	uxtb	r0, r3
 8011ffe:	4a10      	ldr	r2, [pc, #64]	; (8012040 <__io_putchar+0x1b4>)
 8012000:	460b      	mov	r3, r1
 8012002:	015b      	lsls	r3, r3, #5
 8012004:	440b      	add	r3, r1
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	4413      	add	r3, r2
 801200a:	4423      	add	r3, r4
 801200c:	4602      	mov	r2, r0
 801200e:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 8012010:	687b      	ldr	r3, [r7, #4]
}
 8012012:	4618      	mov	r0, r3
 8012014:	3714      	adds	r7, #20
 8012016:	46bd      	mov	sp, r7
 8012018:	bd90      	pop	{r4, r7, pc}
 801201a:	bf00      	nop
 801201c:	2000b821 	.word	0x2000b821
 8012020:	2000b826 	.word	0x2000b826
 8012024:	2000b818 	.word	0x2000b818
 8012028:	2000b81c 	.word	0x2000b81c
 801202c:	2000b81a 	.word	0x2000b81a
 8012030:	2000b824 	.word	0x2000b824
 8012034:	2000b822 	.word	0x2000b822
 8012038:	2000f480 	.word	0x2000f480
 801203c:	2000b81e 	.word	0x2000b81e
 8012040:	2000b828 	.word	0x2000b828
 8012044:	2000b820 	.word	0x2000b820
 8012048:	2000f47c 	.word	0x2000f47c

0801204c <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 8012052:	2300      	movs	r3, #0
 8012054:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8012056:	2300      	movs	r3, #0
 8012058:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 801205a:	2300      	movs	r3, #0
 801205c:	807b      	strh	r3, [r7, #2]
 801205e:	2300      	movs	r3, #0
 8012060:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8012062:	4b39      	ldr	r3, [pc, #228]	; (8012148 <LCD_LOG_UpdateDisplay+0xfc>)
 8012064:	881b      	ldrh	r3, [r3, #0]
 8012066:	2b0f      	cmp	r3, #15
 8012068:	d826      	bhi.n	80120b8 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 801206a:	4b37      	ldr	r3, [pc, #220]	; (8012148 <LCD_LOG_UpdateDisplay+0xfc>)
 801206c:	881a      	ldrh	r2, [r3, #0]
 801206e:	4b37      	ldr	r3, [pc, #220]	; (801214c <LCD_LOG_UpdateDisplay+0x100>)
 8012070:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8012072:	429a      	cmp	r2, r3
 8012074:	d320      	bcc.n	80120b8 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8012076:	79fb      	ldrb	r3, [r7, #7]
 8012078:	4a33      	ldr	r2, [pc, #204]	; (8012148 <LCD_LOG_UpdateDisplay+0xfc>)
 801207a:	8812      	ldrh	r2, [r2, #0]
 801207c:	441a      	add	r2, r3
 801207e:	4934      	ldr	r1, [pc, #208]	; (8012150 <LCD_LOG_UpdateDisplay+0x104>)
 8012080:	4613      	mov	r3, r2
 8012082:	015b      	lsls	r3, r3, #5
 8012084:	4413      	add	r3, r2
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	440b      	add	r3, r1
 801208a:	3380      	adds	r3, #128	; 0x80
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	4618      	mov	r0, r3
 8012090:	f7f0 fe5c 	bl	8002d4c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8012094:	4b2c      	ldr	r3, [pc, #176]	; (8012148 <LCD_LOG_UpdateDisplay+0xfc>)
 8012096:	881b      	ldrh	r3, [r3, #0]
 8012098:	3304      	adds	r3, #4
 801209a:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 801209c:	79fb      	ldrb	r3, [r7, #7]
 801209e:	4a2a      	ldr	r2, [pc, #168]	; (8012148 <LCD_LOG_UpdateDisplay+0xfc>)
 80120a0:	8812      	ldrh	r2, [r2, #0]
 80120a2:	441a      	add	r2, r3
 80120a4:	4613      	mov	r3, r2
 80120a6:	015b      	lsls	r3, r3, #5
 80120a8:	4413      	add	r3, r2
 80120aa:	009b      	lsls	r3, r3, #2
 80120ac:	4a28      	ldr	r2, [pc, #160]	; (8012150 <LCD_LOG_UpdateDisplay+0x104>)
 80120ae:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80120b0:	4619      	mov	r1, r3
 80120b2:	f7f0 ffdd 	bl	8003070 <BSP_LCD_DisplayStringAtLine>
 80120b6:	e043      	b.n	8012140 <LCD_LOG_UpdateDisplay+0xf4>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80120b8:	4b23      	ldr	r3, [pc, #140]	; (8012148 <LCD_LOG_UpdateDisplay+0xfc>)
 80120ba:	881a      	ldrh	r2, [r3, #0]
 80120bc:	4b23      	ldr	r3, [pc, #140]	; (801214c <LCD_LOG_UpdateDisplay+0x100>)
 80120be:	881b      	ldrh	r3, [r3, #0]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d204      	bcs.n	80120ce <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80120c4:	4b20      	ldr	r3, [pc, #128]	; (8012148 <LCD_LOG_UpdateDisplay+0xfc>)
 80120c6:	881b      	ldrh	r3, [r3, #0]
 80120c8:	3375      	adds	r3, #117	; 0x75
 80120ca:	80bb      	strh	r3, [r7, #4]
 80120cc:	e002      	b.n	80120d4 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 80120ce:	4b1e      	ldr	r3, [pc, #120]	; (8012148 <LCD_LOG_UpdateDisplay+0xfc>)
 80120d0:	881b      	ldrh	r3, [r3, #0]
 80120d2:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 80120d4:	88bb      	ldrh	r3, [r7, #4]
 80120d6:	3b10      	subs	r3, #16
 80120d8:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80120da:	2300      	movs	r3, #0
 80120dc:	71fb      	strb	r3, [r7, #7]
 80120de:	e02c      	b.n	801213a <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80120e0:	79fa      	ldrb	r2, [r7, #7]
 80120e2:	887b      	ldrh	r3, [r7, #2]
 80120e4:	4413      	add	r3, r2
 80120e6:	4a1b      	ldr	r2, [pc, #108]	; (8012154 <LCD_LOG_UpdateDisplay+0x108>)
 80120e8:	fb82 1203 	smull	r1, r2, r2, r3
 80120ec:	441a      	add	r2, r3
 80120ee:	1191      	asrs	r1, r2, #6
 80120f0:	17da      	asrs	r2, r3, #31
 80120f2:	1a8a      	subs	r2, r1, r2
 80120f4:	2175      	movs	r1, #117	; 0x75
 80120f6:	fb01 f202 	mul.w	r2, r1, r2
 80120fa:	1a9a      	subs	r2, r3, r2
 80120fc:	4613      	mov	r3, r2
 80120fe:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8012100:	883a      	ldrh	r2, [r7, #0]
 8012102:	4913      	ldr	r1, [pc, #76]	; (8012150 <LCD_LOG_UpdateDisplay+0x104>)
 8012104:	4613      	mov	r3, r2
 8012106:	015b      	lsls	r3, r3, #5
 8012108:	4413      	add	r3, r2
 801210a:	009b      	lsls	r3, r3, #2
 801210c:	440b      	add	r3, r1
 801210e:	3380      	adds	r3, #128	; 0x80
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	4618      	mov	r0, r3
 8012114:	f7f0 fe1a 	bl	8002d4c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8012118:	79fb      	ldrb	r3, [r7, #7]
 801211a:	b29b      	uxth	r3, r3
 801211c:	3304      	adds	r3, #4
 801211e:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 8012120:	883a      	ldrh	r2, [r7, #0]
 8012122:	4613      	mov	r3, r2
 8012124:	015b      	lsls	r3, r3, #5
 8012126:	4413      	add	r3, r2
 8012128:	009b      	lsls	r3, r3, #2
 801212a:	4a09      	ldr	r2, [pc, #36]	; (8012150 <LCD_LOG_UpdateDisplay+0x104>)
 801212c:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 801212e:	4619      	mov	r1, r3
 8012130:	f7f0 ff9e 	bl	8003070 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8012134:	79fb      	ldrb	r3, [r7, #7]
 8012136:	3301      	adds	r3, #1
 8012138:	71fb      	strb	r3, [r7, #7]
 801213a:	79fb      	ldrb	r3, [r7, #7]
 801213c:	2b10      	cmp	r3, #16
 801213e:	d9cf      	bls.n	80120e0 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 8012140:	bf00      	nop
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	2000b81c 	.word	0x2000b81c
 801214c:	2000b824 	.word	0x2000b824
 8012150:	2000b828 	.word	0x2000b828
 8012154:	8c08c08d 	.word	0x8c08c08d

08012158 <__errno>:
 8012158:	4b01      	ldr	r3, [pc, #4]	; (8012160 <__errno+0x8>)
 801215a:	6818      	ldr	r0, [r3, #0]
 801215c:	4770      	bx	lr
 801215e:	bf00      	nop
 8012160:	2000004c 	.word	0x2000004c

08012164 <__libc_init_array>:
 8012164:	b570      	push	{r4, r5, r6, lr}
 8012166:	4e0d      	ldr	r6, [pc, #52]	; (801219c <__libc_init_array+0x38>)
 8012168:	4c0d      	ldr	r4, [pc, #52]	; (80121a0 <__libc_init_array+0x3c>)
 801216a:	1ba4      	subs	r4, r4, r6
 801216c:	10a4      	asrs	r4, r4, #2
 801216e:	2500      	movs	r5, #0
 8012170:	42a5      	cmp	r5, r4
 8012172:	d109      	bne.n	8012188 <__libc_init_array+0x24>
 8012174:	4e0b      	ldr	r6, [pc, #44]	; (80121a4 <__libc_init_array+0x40>)
 8012176:	4c0c      	ldr	r4, [pc, #48]	; (80121a8 <__libc_init_array+0x44>)
 8012178:	f000 ff20 	bl	8012fbc <_init>
 801217c:	1ba4      	subs	r4, r4, r6
 801217e:	10a4      	asrs	r4, r4, #2
 8012180:	2500      	movs	r5, #0
 8012182:	42a5      	cmp	r5, r4
 8012184:	d105      	bne.n	8012192 <__libc_init_array+0x2e>
 8012186:	bd70      	pop	{r4, r5, r6, pc}
 8012188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801218c:	4798      	blx	r3
 801218e:	3501      	adds	r5, #1
 8012190:	e7ee      	b.n	8012170 <__libc_init_array+0xc>
 8012192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012196:	4798      	blx	r3
 8012198:	3501      	adds	r5, #1
 801219a:	e7f2      	b.n	8012182 <__libc_init_array+0x1e>
 801219c:	08015cc8 	.word	0x08015cc8
 80121a0:	08015cc8 	.word	0x08015cc8
 80121a4:	08015cc8 	.word	0x08015cc8
 80121a8:	08015ccc 	.word	0x08015ccc

080121ac <malloc>:
 80121ac:	4b02      	ldr	r3, [pc, #8]	; (80121b8 <malloc+0xc>)
 80121ae:	4601      	mov	r1, r0
 80121b0:	6818      	ldr	r0, [r3, #0]
 80121b2:	f000 b86d 	b.w	8012290 <_malloc_r>
 80121b6:	bf00      	nop
 80121b8:	2000004c 	.word	0x2000004c

080121bc <free>:
 80121bc:	4b02      	ldr	r3, [pc, #8]	; (80121c8 <free+0xc>)
 80121be:	4601      	mov	r1, r0
 80121c0:	6818      	ldr	r0, [r3, #0]
 80121c2:	f000 b817 	b.w	80121f4 <_free_r>
 80121c6:	bf00      	nop
 80121c8:	2000004c 	.word	0x2000004c

080121cc <memcpy>:
 80121cc:	b510      	push	{r4, lr}
 80121ce:	1e43      	subs	r3, r0, #1
 80121d0:	440a      	add	r2, r1
 80121d2:	4291      	cmp	r1, r2
 80121d4:	d100      	bne.n	80121d8 <memcpy+0xc>
 80121d6:	bd10      	pop	{r4, pc}
 80121d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121e0:	e7f7      	b.n	80121d2 <memcpy+0x6>

080121e2 <memset>:
 80121e2:	4402      	add	r2, r0
 80121e4:	4603      	mov	r3, r0
 80121e6:	4293      	cmp	r3, r2
 80121e8:	d100      	bne.n	80121ec <memset+0xa>
 80121ea:	4770      	bx	lr
 80121ec:	f803 1b01 	strb.w	r1, [r3], #1
 80121f0:	e7f9      	b.n	80121e6 <memset+0x4>
	...

080121f4 <_free_r>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	4605      	mov	r5, r0
 80121f8:	2900      	cmp	r1, #0
 80121fa:	d045      	beq.n	8012288 <_free_r+0x94>
 80121fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012200:	1f0c      	subs	r4, r1, #4
 8012202:	2b00      	cmp	r3, #0
 8012204:	bfb8      	it	lt
 8012206:	18e4      	addlt	r4, r4, r3
 8012208:	f000 f98e 	bl	8012528 <__malloc_lock>
 801220c:	4a1f      	ldr	r2, [pc, #124]	; (801228c <_free_r+0x98>)
 801220e:	6813      	ldr	r3, [r2, #0]
 8012210:	4610      	mov	r0, r2
 8012212:	b933      	cbnz	r3, 8012222 <_free_r+0x2e>
 8012214:	6063      	str	r3, [r4, #4]
 8012216:	6014      	str	r4, [r2, #0]
 8012218:	4628      	mov	r0, r5
 801221a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801221e:	f000 b984 	b.w	801252a <__malloc_unlock>
 8012222:	42a3      	cmp	r3, r4
 8012224:	d90c      	bls.n	8012240 <_free_r+0x4c>
 8012226:	6821      	ldr	r1, [r4, #0]
 8012228:	1862      	adds	r2, r4, r1
 801222a:	4293      	cmp	r3, r2
 801222c:	bf04      	itt	eq
 801222e:	681a      	ldreq	r2, [r3, #0]
 8012230:	685b      	ldreq	r3, [r3, #4]
 8012232:	6063      	str	r3, [r4, #4]
 8012234:	bf04      	itt	eq
 8012236:	1852      	addeq	r2, r2, r1
 8012238:	6022      	streq	r2, [r4, #0]
 801223a:	6004      	str	r4, [r0, #0]
 801223c:	e7ec      	b.n	8012218 <_free_r+0x24>
 801223e:	4613      	mov	r3, r2
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	b10a      	cbz	r2, 8012248 <_free_r+0x54>
 8012244:	42a2      	cmp	r2, r4
 8012246:	d9fa      	bls.n	801223e <_free_r+0x4a>
 8012248:	6819      	ldr	r1, [r3, #0]
 801224a:	1858      	adds	r0, r3, r1
 801224c:	42a0      	cmp	r0, r4
 801224e:	d10b      	bne.n	8012268 <_free_r+0x74>
 8012250:	6820      	ldr	r0, [r4, #0]
 8012252:	4401      	add	r1, r0
 8012254:	1858      	adds	r0, r3, r1
 8012256:	4282      	cmp	r2, r0
 8012258:	6019      	str	r1, [r3, #0]
 801225a:	d1dd      	bne.n	8012218 <_free_r+0x24>
 801225c:	6810      	ldr	r0, [r2, #0]
 801225e:	6852      	ldr	r2, [r2, #4]
 8012260:	605a      	str	r2, [r3, #4]
 8012262:	4401      	add	r1, r0
 8012264:	6019      	str	r1, [r3, #0]
 8012266:	e7d7      	b.n	8012218 <_free_r+0x24>
 8012268:	d902      	bls.n	8012270 <_free_r+0x7c>
 801226a:	230c      	movs	r3, #12
 801226c:	602b      	str	r3, [r5, #0]
 801226e:	e7d3      	b.n	8012218 <_free_r+0x24>
 8012270:	6820      	ldr	r0, [r4, #0]
 8012272:	1821      	adds	r1, r4, r0
 8012274:	428a      	cmp	r2, r1
 8012276:	bf04      	itt	eq
 8012278:	6811      	ldreq	r1, [r2, #0]
 801227a:	6852      	ldreq	r2, [r2, #4]
 801227c:	6062      	str	r2, [r4, #4]
 801227e:	bf04      	itt	eq
 8012280:	1809      	addeq	r1, r1, r0
 8012282:	6021      	streq	r1, [r4, #0]
 8012284:	605c      	str	r4, [r3, #4]
 8012286:	e7c7      	b.n	8012218 <_free_r+0x24>
 8012288:	bd38      	pop	{r3, r4, r5, pc}
 801228a:	bf00      	nop
 801228c:	20008fe0 	.word	0x20008fe0

08012290 <_malloc_r>:
 8012290:	b570      	push	{r4, r5, r6, lr}
 8012292:	1ccd      	adds	r5, r1, #3
 8012294:	f025 0503 	bic.w	r5, r5, #3
 8012298:	3508      	adds	r5, #8
 801229a:	2d0c      	cmp	r5, #12
 801229c:	bf38      	it	cc
 801229e:	250c      	movcc	r5, #12
 80122a0:	2d00      	cmp	r5, #0
 80122a2:	4606      	mov	r6, r0
 80122a4:	db01      	blt.n	80122aa <_malloc_r+0x1a>
 80122a6:	42a9      	cmp	r1, r5
 80122a8:	d903      	bls.n	80122b2 <_malloc_r+0x22>
 80122aa:	230c      	movs	r3, #12
 80122ac:	6033      	str	r3, [r6, #0]
 80122ae:	2000      	movs	r0, #0
 80122b0:	bd70      	pop	{r4, r5, r6, pc}
 80122b2:	f000 f939 	bl	8012528 <__malloc_lock>
 80122b6:	4a21      	ldr	r2, [pc, #132]	; (801233c <_malloc_r+0xac>)
 80122b8:	6814      	ldr	r4, [r2, #0]
 80122ba:	4621      	mov	r1, r4
 80122bc:	b991      	cbnz	r1, 80122e4 <_malloc_r+0x54>
 80122be:	4c20      	ldr	r4, [pc, #128]	; (8012340 <_malloc_r+0xb0>)
 80122c0:	6823      	ldr	r3, [r4, #0]
 80122c2:	b91b      	cbnz	r3, 80122cc <_malloc_r+0x3c>
 80122c4:	4630      	mov	r0, r6
 80122c6:	f000 f855 	bl	8012374 <_sbrk_r>
 80122ca:	6020      	str	r0, [r4, #0]
 80122cc:	4629      	mov	r1, r5
 80122ce:	4630      	mov	r0, r6
 80122d0:	f000 f850 	bl	8012374 <_sbrk_r>
 80122d4:	1c43      	adds	r3, r0, #1
 80122d6:	d124      	bne.n	8012322 <_malloc_r+0x92>
 80122d8:	230c      	movs	r3, #12
 80122da:	6033      	str	r3, [r6, #0]
 80122dc:	4630      	mov	r0, r6
 80122de:	f000 f924 	bl	801252a <__malloc_unlock>
 80122e2:	e7e4      	b.n	80122ae <_malloc_r+0x1e>
 80122e4:	680b      	ldr	r3, [r1, #0]
 80122e6:	1b5b      	subs	r3, r3, r5
 80122e8:	d418      	bmi.n	801231c <_malloc_r+0x8c>
 80122ea:	2b0b      	cmp	r3, #11
 80122ec:	d90f      	bls.n	801230e <_malloc_r+0x7e>
 80122ee:	600b      	str	r3, [r1, #0]
 80122f0:	50cd      	str	r5, [r1, r3]
 80122f2:	18cc      	adds	r4, r1, r3
 80122f4:	4630      	mov	r0, r6
 80122f6:	f000 f918 	bl	801252a <__malloc_unlock>
 80122fa:	f104 000b 	add.w	r0, r4, #11
 80122fe:	1d23      	adds	r3, r4, #4
 8012300:	f020 0007 	bic.w	r0, r0, #7
 8012304:	1ac3      	subs	r3, r0, r3
 8012306:	d0d3      	beq.n	80122b0 <_malloc_r+0x20>
 8012308:	425a      	negs	r2, r3
 801230a:	50e2      	str	r2, [r4, r3]
 801230c:	e7d0      	b.n	80122b0 <_malloc_r+0x20>
 801230e:	428c      	cmp	r4, r1
 8012310:	684b      	ldr	r3, [r1, #4]
 8012312:	bf16      	itet	ne
 8012314:	6063      	strne	r3, [r4, #4]
 8012316:	6013      	streq	r3, [r2, #0]
 8012318:	460c      	movne	r4, r1
 801231a:	e7eb      	b.n	80122f4 <_malloc_r+0x64>
 801231c:	460c      	mov	r4, r1
 801231e:	6849      	ldr	r1, [r1, #4]
 8012320:	e7cc      	b.n	80122bc <_malloc_r+0x2c>
 8012322:	1cc4      	adds	r4, r0, #3
 8012324:	f024 0403 	bic.w	r4, r4, #3
 8012328:	42a0      	cmp	r0, r4
 801232a:	d005      	beq.n	8012338 <_malloc_r+0xa8>
 801232c:	1a21      	subs	r1, r4, r0
 801232e:	4630      	mov	r0, r6
 8012330:	f000 f820 	bl	8012374 <_sbrk_r>
 8012334:	3001      	adds	r0, #1
 8012336:	d0cf      	beq.n	80122d8 <_malloc_r+0x48>
 8012338:	6025      	str	r5, [r4, #0]
 801233a:	e7db      	b.n	80122f4 <_malloc_r+0x64>
 801233c:	20008fe0 	.word	0x20008fe0
 8012340:	20008fe4 	.word	0x20008fe4

08012344 <iprintf>:
 8012344:	b40f      	push	{r0, r1, r2, r3}
 8012346:	4b0a      	ldr	r3, [pc, #40]	; (8012370 <iprintf+0x2c>)
 8012348:	b513      	push	{r0, r1, r4, lr}
 801234a:	681c      	ldr	r4, [r3, #0]
 801234c:	b124      	cbz	r4, 8012358 <iprintf+0x14>
 801234e:	69a3      	ldr	r3, [r4, #24]
 8012350:	b913      	cbnz	r3, 8012358 <iprintf+0x14>
 8012352:	4620      	mov	r0, r4
 8012354:	f000 f85e 	bl	8012414 <__sinit>
 8012358:	ab05      	add	r3, sp, #20
 801235a:	9a04      	ldr	r2, [sp, #16]
 801235c:	68a1      	ldr	r1, [r4, #8]
 801235e:	9301      	str	r3, [sp, #4]
 8012360:	4620      	mov	r0, r4
 8012362:	f000 f90d 	bl	8012580 <_vfiprintf_r>
 8012366:	b002      	add	sp, #8
 8012368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801236c:	b004      	add	sp, #16
 801236e:	4770      	bx	lr
 8012370:	2000004c 	.word	0x2000004c

08012374 <_sbrk_r>:
 8012374:	b538      	push	{r3, r4, r5, lr}
 8012376:	4c06      	ldr	r4, [pc, #24]	; (8012390 <_sbrk_r+0x1c>)
 8012378:	2300      	movs	r3, #0
 801237a:	4605      	mov	r5, r0
 801237c:	4608      	mov	r0, r1
 801237e:	6023      	str	r3, [r4, #0]
 8012380:	f7f0 fb76 	bl	8002a70 <_sbrk>
 8012384:	1c43      	adds	r3, r0, #1
 8012386:	d102      	bne.n	801238e <_sbrk_r+0x1a>
 8012388:	6823      	ldr	r3, [r4, #0]
 801238a:	b103      	cbz	r3, 801238e <_sbrk_r+0x1a>
 801238c:	602b      	str	r3, [r5, #0]
 801238e:	bd38      	pop	{r3, r4, r5, pc}
 8012390:	2000f484 	.word	0x2000f484

08012394 <std>:
 8012394:	2300      	movs	r3, #0
 8012396:	b510      	push	{r4, lr}
 8012398:	4604      	mov	r4, r0
 801239a:	e9c0 3300 	strd	r3, r3, [r0]
 801239e:	6083      	str	r3, [r0, #8]
 80123a0:	8181      	strh	r1, [r0, #12]
 80123a2:	6643      	str	r3, [r0, #100]	; 0x64
 80123a4:	81c2      	strh	r2, [r0, #14]
 80123a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80123aa:	6183      	str	r3, [r0, #24]
 80123ac:	4619      	mov	r1, r3
 80123ae:	2208      	movs	r2, #8
 80123b0:	305c      	adds	r0, #92	; 0x5c
 80123b2:	f7ff ff16 	bl	80121e2 <memset>
 80123b6:	4b05      	ldr	r3, [pc, #20]	; (80123cc <std+0x38>)
 80123b8:	6263      	str	r3, [r4, #36]	; 0x24
 80123ba:	4b05      	ldr	r3, [pc, #20]	; (80123d0 <std+0x3c>)
 80123bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80123be:	4b05      	ldr	r3, [pc, #20]	; (80123d4 <std+0x40>)
 80123c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80123c2:	4b05      	ldr	r3, [pc, #20]	; (80123d8 <std+0x44>)
 80123c4:	6224      	str	r4, [r4, #32]
 80123c6:	6323      	str	r3, [r4, #48]	; 0x30
 80123c8:	bd10      	pop	{r4, pc}
 80123ca:	bf00      	nop
 80123cc:	08012abd 	.word	0x08012abd
 80123d0:	08012adf 	.word	0x08012adf
 80123d4:	08012b17 	.word	0x08012b17
 80123d8:	08012b3b 	.word	0x08012b3b

080123dc <_cleanup_r>:
 80123dc:	4901      	ldr	r1, [pc, #4]	; (80123e4 <_cleanup_r+0x8>)
 80123de:	f000 b885 	b.w	80124ec <_fwalk_reent>
 80123e2:	bf00      	nop
 80123e4:	08012e15 	.word	0x08012e15

080123e8 <__sfmoreglue>:
 80123e8:	b570      	push	{r4, r5, r6, lr}
 80123ea:	1e4a      	subs	r2, r1, #1
 80123ec:	2568      	movs	r5, #104	; 0x68
 80123ee:	4355      	muls	r5, r2
 80123f0:	460e      	mov	r6, r1
 80123f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80123f6:	f7ff ff4b 	bl	8012290 <_malloc_r>
 80123fa:	4604      	mov	r4, r0
 80123fc:	b140      	cbz	r0, 8012410 <__sfmoreglue+0x28>
 80123fe:	2100      	movs	r1, #0
 8012400:	e9c0 1600 	strd	r1, r6, [r0]
 8012404:	300c      	adds	r0, #12
 8012406:	60a0      	str	r0, [r4, #8]
 8012408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801240c:	f7ff fee9 	bl	80121e2 <memset>
 8012410:	4620      	mov	r0, r4
 8012412:	bd70      	pop	{r4, r5, r6, pc}

08012414 <__sinit>:
 8012414:	6983      	ldr	r3, [r0, #24]
 8012416:	b510      	push	{r4, lr}
 8012418:	4604      	mov	r4, r0
 801241a:	bb33      	cbnz	r3, 801246a <__sinit+0x56>
 801241c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012420:	6503      	str	r3, [r0, #80]	; 0x50
 8012422:	4b12      	ldr	r3, [pc, #72]	; (801246c <__sinit+0x58>)
 8012424:	4a12      	ldr	r2, [pc, #72]	; (8012470 <__sinit+0x5c>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	6282      	str	r2, [r0, #40]	; 0x28
 801242a:	4298      	cmp	r0, r3
 801242c:	bf04      	itt	eq
 801242e:	2301      	moveq	r3, #1
 8012430:	6183      	streq	r3, [r0, #24]
 8012432:	f000 f81f 	bl	8012474 <__sfp>
 8012436:	6060      	str	r0, [r4, #4]
 8012438:	4620      	mov	r0, r4
 801243a:	f000 f81b 	bl	8012474 <__sfp>
 801243e:	60a0      	str	r0, [r4, #8]
 8012440:	4620      	mov	r0, r4
 8012442:	f000 f817 	bl	8012474 <__sfp>
 8012446:	2200      	movs	r2, #0
 8012448:	60e0      	str	r0, [r4, #12]
 801244a:	2104      	movs	r1, #4
 801244c:	6860      	ldr	r0, [r4, #4]
 801244e:	f7ff ffa1 	bl	8012394 <std>
 8012452:	2201      	movs	r2, #1
 8012454:	2109      	movs	r1, #9
 8012456:	68a0      	ldr	r0, [r4, #8]
 8012458:	f7ff ff9c 	bl	8012394 <std>
 801245c:	2202      	movs	r2, #2
 801245e:	2112      	movs	r1, #18
 8012460:	68e0      	ldr	r0, [r4, #12]
 8012462:	f7ff ff97 	bl	8012394 <std>
 8012466:	2301      	movs	r3, #1
 8012468:	61a3      	str	r3, [r4, #24]
 801246a:	bd10      	pop	{r4, pc}
 801246c:	08015c28 	.word	0x08015c28
 8012470:	080123dd 	.word	0x080123dd

08012474 <__sfp>:
 8012474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012476:	4b1b      	ldr	r3, [pc, #108]	; (80124e4 <__sfp+0x70>)
 8012478:	681e      	ldr	r6, [r3, #0]
 801247a:	69b3      	ldr	r3, [r6, #24]
 801247c:	4607      	mov	r7, r0
 801247e:	b913      	cbnz	r3, 8012486 <__sfp+0x12>
 8012480:	4630      	mov	r0, r6
 8012482:	f7ff ffc7 	bl	8012414 <__sinit>
 8012486:	3648      	adds	r6, #72	; 0x48
 8012488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801248c:	3b01      	subs	r3, #1
 801248e:	d503      	bpl.n	8012498 <__sfp+0x24>
 8012490:	6833      	ldr	r3, [r6, #0]
 8012492:	b133      	cbz	r3, 80124a2 <__sfp+0x2e>
 8012494:	6836      	ldr	r6, [r6, #0]
 8012496:	e7f7      	b.n	8012488 <__sfp+0x14>
 8012498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801249c:	b16d      	cbz	r5, 80124ba <__sfp+0x46>
 801249e:	3468      	adds	r4, #104	; 0x68
 80124a0:	e7f4      	b.n	801248c <__sfp+0x18>
 80124a2:	2104      	movs	r1, #4
 80124a4:	4638      	mov	r0, r7
 80124a6:	f7ff ff9f 	bl	80123e8 <__sfmoreglue>
 80124aa:	6030      	str	r0, [r6, #0]
 80124ac:	2800      	cmp	r0, #0
 80124ae:	d1f1      	bne.n	8012494 <__sfp+0x20>
 80124b0:	230c      	movs	r3, #12
 80124b2:	603b      	str	r3, [r7, #0]
 80124b4:	4604      	mov	r4, r0
 80124b6:	4620      	mov	r0, r4
 80124b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124ba:	4b0b      	ldr	r3, [pc, #44]	; (80124e8 <__sfp+0x74>)
 80124bc:	6665      	str	r5, [r4, #100]	; 0x64
 80124be:	e9c4 5500 	strd	r5, r5, [r4]
 80124c2:	60a5      	str	r5, [r4, #8]
 80124c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80124c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80124cc:	2208      	movs	r2, #8
 80124ce:	4629      	mov	r1, r5
 80124d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80124d4:	f7ff fe85 	bl	80121e2 <memset>
 80124d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80124dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80124e0:	e7e9      	b.n	80124b6 <__sfp+0x42>
 80124e2:	bf00      	nop
 80124e4:	08015c28 	.word	0x08015c28
 80124e8:	ffff0001 	.word	0xffff0001

080124ec <_fwalk_reent>:
 80124ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124f0:	4680      	mov	r8, r0
 80124f2:	4689      	mov	r9, r1
 80124f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80124f8:	2600      	movs	r6, #0
 80124fa:	b914      	cbnz	r4, 8012502 <_fwalk_reent+0x16>
 80124fc:	4630      	mov	r0, r6
 80124fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012502:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012506:	3f01      	subs	r7, #1
 8012508:	d501      	bpl.n	801250e <_fwalk_reent+0x22>
 801250a:	6824      	ldr	r4, [r4, #0]
 801250c:	e7f5      	b.n	80124fa <_fwalk_reent+0xe>
 801250e:	89ab      	ldrh	r3, [r5, #12]
 8012510:	2b01      	cmp	r3, #1
 8012512:	d907      	bls.n	8012524 <_fwalk_reent+0x38>
 8012514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012518:	3301      	adds	r3, #1
 801251a:	d003      	beq.n	8012524 <_fwalk_reent+0x38>
 801251c:	4629      	mov	r1, r5
 801251e:	4640      	mov	r0, r8
 8012520:	47c8      	blx	r9
 8012522:	4306      	orrs	r6, r0
 8012524:	3568      	adds	r5, #104	; 0x68
 8012526:	e7ee      	b.n	8012506 <_fwalk_reent+0x1a>

08012528 <__malloc_lock>:
 8012528:	4770      	bx	lr

0801252a <__malloc_unlock>:
 801252a:	4770      	bx	lr

0801252c <__sfputc_r>:
 801252c:	6893      	ldr	r3, [r2, #8]
 801252e:	3b01      	subs	r3, #1
 8012530:	2b00      	cmp	r3, #0
 8012532:	b410      	push	{r4}
 8012534:	6093      	str	r3, [r2, #8]
 8012536:	da08      	bge.n	801254a <__sfputc_r+0x1e>
 8012538:	6994      	ldr	r4, [r2, #24]
 801253a:	42a3      	cmp	r3, r4
 801253c:	db01      	blt.n	8012542 <__sfputc_r+0x16>
 801253e:	290a      	cmp	r1, #10
 8012540:	d103      	bne.n	801254a <__sfputc_r+0x1e>
 8012542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012546:	f000 bafd 	b.w	8012b44 <__swbuf_r>
 801254a:	6813      	ldr	r3, [r2, #0]
 801254c:	1c58      	adds	r0, r3, #1
 801254e:	6010      	str	r0, [r2, #0]
 8012550:	7019      	strb	r1, [r3, #0]
 8012552:	4608      	mov	r0, r1
 8012554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012558:	4770      	bx	lr

0801255a <__sfputs_r>:
 801255a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255c:	4606      	mov	r6, r0
 801255e:	460f      	mov	r7, r1
 8012560:	4614      	mov	r4, r2
 8012562:	18d5      	adds	r5, r2, r3
 8012564:	42ac      	cmp	r4, r5
 8012566:	d101      	bne.n	801256c <__sfputs_r+0x12>
 8012568:	2000      	movs	r0, #0
 801256a:	e007      	b.n	801257c <__sfputs_r+0x22>
 801256c:	463a      	mov	r2, r7
 801256e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012572:	4630      	mov	r0, r6
 8012574:	f7ff ffda 	bl	801252c <__sfputc_r>
 8012578:	1c43      	adds	r3, r0, #1
 801257a:	d1f3      	bne.n	8012564 <__sfputs_r+0xa>
 801257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012580 <_vfiprintf_r>:
 8012580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012584:	460c      	mov	r4, r1
 8012586:	b09d      	sub	sp, #116	; 0x74
 8012588:	4617      	mov	r7, r2
 801258a:	461d      	mov	r5, r3
 801258c:	4606      	mov	r6, r0
 801258e:	b118      	cbz	r0, 8012598 <_vfiprintf_r+0x18>
 8012590:	6983      	ldr	r3, [r0, #24]
 8012592:	b90b      	cbnz	r3, 8012598 <_vfiprintf_r+0x18>
 8012594:	f7ff ff3e 	bl	8012414 <__sinit>
 8012598:	4b7c      	ldr	r3, [pc, #496]	; (801278c <_vfiprintf_r+0x20c>)
 801259a:	429c      	cmp	r4, r3
 801259c:	d158      	bne.n	8012650 <_vfiprintf_r+0xd0>
 801259e:	6874      	ldr	r4, [r6, #4]
 80125a0:	89a3      	ldrh	r3, [r4, #12]
 80125a2:	0718      	lsls	r0, r3, #28
 80125a4:	d55e      	bpl.n	8012664 <_vfiprintf_r+0xe4>
 80125a6:	6923      	ldr	r3, [r4, #16]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d05b      	beq.n	8012664 <_vfiprintf_r+0xe4>
 80125ac:	2300      	movs	r3, #0
 80125ae:	9309      	str	r3, [sp, #36]	; 0x24
 80125b0:	2320      	movs	r3, #32
 80125b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125b6:	2330      	movs	r3, #48	; 0x30
 80125b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80125bc:	9503      	str	r5, [sp, #12]
 80125be:	f04f 0b01 	mov.w	fp, #1
 80125c2:	46b8      	mov	r8, r7
 80125c4:	4645      	mov	r5, r8
 80125c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80125ca:	b10b      	cbz	r3, 80125d0 <_vfiprintf_r+0x50>
 80125cc:	2b25      	cmp	r3, #37	; 0x25
 80125ce:	d154      	bne.n	801267a <_vfiprintf_r+0xfa>
 80125d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80125d4:	d00b      	beq.n	80125ee <_vfiprintf_r+0x6e>
 80125d6:	4653      	mov	r3, sl
 80125d8:	463a      	mov	r2, r7
 80125da:	4621      	mov	r1, r4
 80125dc:	4630      	mov	r0, r6
 80125de:	f7ff ffbc 	bl	801255a <__sfputs_r>
 80125e2:	3001      	adds	r0, #1
 80125e4:	f000 80c2 	beq.w	801276c <_vfiprintf_r+0x1ec>
 80125e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125ea:	4453      	add	r3, sl
 80125ec:	9309      	str	r3, [sp, #36]	; 0x24
 80125ee:	f898 3000 	ldrb.w	r3, [r8]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	f000 80ba 	beq.w	801276c <_vfiprintf_r+0x1ec>
 80125f8:	2300      	movs	r3, #0
 80125fa:	f04f 32ff 	mov.w	r2, #4294967295
 80125fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012602:	9304      	str	r3, [sp, #16]
 8012604:	9307      	str	r3, [sp, #28]
 8012606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801260a:	931a      	str	r3, [sp, #104]	; 0x68
 801260c:	46a8      	mov	r8, r5
 801260e:	2205      	movs	r2, #5
 8012610:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012614:	485e      	ldr	r0, [pc, #376]	; (8012790 <_vfiprintf_r+0x210>)
 8012616:	f7ed fdfb 	bl	8000210 <memchr>
 801261a:	9b04      	ldr	r3, [sp, #16]
 801261c:	bb78      	cbnz	r0, 801267e <_vfiprintf_r+0xfe>
 801261e:	06d9      	lsls	r1, r3, #27
 8012620:	bf44      	itt	mi
 8012622:	2220      	movmi	r2, #32
 8012624:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012628:	071a      	lsls	r2, r3, #28
 801262a:	bf44      	itt	mi
 801262c:	222b      	movmi	r2, #43	; 0x2b
 801262e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012632:	782a      	ldrb	r2, [r5, #0]
 8012634:	2a2a      	cmp	r2, #42	; 0x2a
 8012636:	d02a      	beq.n	801268e <_vfiprintf_r+0x10e>
 8012638:	9a07      	ldr	r2, [sp, #28]
 801263a:	46a8      	mov	r8, r5
 801263c:	2000      	movs	r0, #0
 801263e:	250a      	movs	r5, #10
 8012640:	4641      	mov	r1, r8
 8012642:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012646:	3b30      	subs	r3, #48	; 0x30
 8012648:	2b09      	cmp	r3, #9
 801264a:	d969      	bls.n	8012720 <_vfiprintf_r+0x1a0>
 801264c:	b360      	cbz	r0, 80126a8 <_vfiprintf_r+0x128>
 801264e:	e024      	b.n	801269a <_vfiprintf_r+0x11a>
 8012650:	4b50      	ldr	r3, [pc, #320]	; (8012794 <_vfiprintf_r+0x214>)
 8012652:	429c      	cmp	r4, r3
 8012654:	d101      	bne.n	801265a <_vfiprintf_r+0xda>
 8012656:	68b4      	ldr	r4, [r6, #8]
 8012658:	e7a2      	b.n	80125a0 <_vfiprintf_r+0x20>
 801265a:	4b4f      	ldr	r3, [pc, #316]	; (8012798 <_vfiprintf_r+0x218>)
 801265c:	429c      	cmp	r4, r3
 801265e:	bf08      	it	eq
 8012660:	68f4      	ldreq	r4, [r6, #12]
 8012662:	e79d      	b.n	80125a0 <_vfiprintf_r+0x20>
 8012664:	4621      	mov	r1, r4
 8012666:	4630      	mov	r0, r6
 8012668:	f000 fad0 	bl	8012c0c <__swsetup_r>
 801266c:	2800      	cmp	r0, #0
 801266e:	d09d      	beq.n	80125ac <_vfiprintf_r+0x2c>
 8012670:	f04f 30ff 	mov.w	r0, #4294967295
 8012674:	b01d      	add	sp, #116	; 0x74
 8012676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267a:	46a8      	mov	r8, r5
 801267c:	e7a2      	b.n	80125c4 <_vfiprintf_r+0x44>
 801267e:	4a44      	ldr	r2, [pc, #272]	; (8012790 <_vfiprintf_r+0x210>)
 8012680:	1a80      	subs	r0, r0, r2
 8012682:	fa0b f000 	lsl.w	r0, fp, r0
 8012686:	4318      	orrs	r0, r3
 8012688:	9004      	str	r0, [sp, #16]
 801268a:	4645      	mov	r5, r8
 801268c:	e7be      	b.n	801260c <_vfiprintf_r+0x8c>
 801268e:	9a03      	ldr	r2, [sp, #12]
 8012690:	1d11      	adds	r1, r2, #4
 8012692:	6812      	ldr	r2, [r2, #0]
 8012694:	9103      	str	r1, [sp, #12]
 8012696:	2a00      	cmp	r2, #0
 8012698:	db01      	blt.n	801269e <_vfiprintf_r+0x11e>
 801269a:	9207      	str	r2, [sp, #28]
 801269c:	e004      	b.n	80126a8 <_vfiprintf_r+0x128>
 801269e:	4252      	negs	r2, r2
 80126a0:	f043 0302 	orr.w	r3, r3, #2
 80126a4:	9207      	str	r2, [sp, #28]
 80126a6:	9304      	str	r3, [sp, #16]
 80126a8:	f898 3000 	ldrb.w	r3, [r8]
 80126ac:	2b2e      	cmp	r3, #46	; 0x2e
 80126ae:	d10e      	bne.n	80126ce <_vfiprintf_r+0x14e>
 80126b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80126b4:	2b2a      	cmp	r3, #42	; 0x2a
 80126b6:	d138      	bne.n	801272a <_vfiprintf_r+0x1aa>
 80126b8:	9b03      	ldr	r3, [sp, #12]
 80126ba:	1d1a      	adds	r2, r3, #4
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	9203      	str	r2, [sp, #12]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	bfb8      	it	lt
 80126c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80126c8:	f108 0802 	add.w	r8, r8, #2
 80126cc:	9305      	str	r3, [sp, #20]
 80126ce:	4d33      	ldr	r5, [pc, #204]	; (801279c <_vfiprintf_r+0x21c>)
 80126d0:	f898 1000 	ldrb.w	r1, [r8]
 80126d4:	2203      	movs	r2, #3
 80126d6:	4628      	mov	r0, r5
 80126d8:	f7ed fd9a 	bl	8000210 <memchr>
 80126dc:	b140      	cbz	r0, 80126f0 <_vfiprintf_r+0x170>
 80126de:	2340      	movs	r3, #64	; 0x40
 80126e0:	1b40      	subs	r0, r0, r5
 80126e2:	fa03 f000 	lsl.w	r0, r3, r0
 80126e6:	9b04      	ldr	r3, [sp, #16]
 80126e8:	4303      	orrs	r3, r0
 80126ea:	f108 0801 	add.w	r8, r8, #1
 80126ee:	9304      	str	r3, [sp, #16]
 80126f0:	f898 1000 	ldrb.w	r1, [r8]
 80126f4:	482a      	ldr	r0, [pc, #168]	; (80127a0 <_vfiprintf_r+0x220>)
 80126f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80126fa:	2206      	movs	r2, #6
 80126fc:	f108 0701 	add.w	r7, r8, #1
 8012700:	f7ed fd86 	bl	8000210 <memchr>
 8012704:	2800      	cmp	r0, #0
 8012706:	d037      	beq.n	8012778 <_vfiprintf_r+0x1f8>
 8012708:	4b26      	ldr	r3, [pc, #152]	; (80127a4 <_vfiprintf_r+0x224>)
 801270a:	bb1b      	cbnz	r3, 8012754 <_vfiprintf_r+0x1d4>
 801270c:	9b03      	ldr	r3, [sp, #12]
 801270e:	3307      	adds	r3, #7
 8012710:	f023 0307 	bic.w	r3, r3, #7
 8012714:	3308      	adds	r3, #8
 8012716:	9303      	str	r3, [sp, #12]
 8012718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801271a:	444b      	add	r3, r9
 801271c:	9309      	str	r3, [sp, #36]	; 0x24
 801271e:	e750      	b.n	80125c2 <_vfiprintf_r+0x42>
 8012720:	fb05 3202 	mla	r2, r5, r2, r3
 8012724:	2001      	movs	r0, #1
 8012726:	4688      	mov	r8, r1
 8012728:	e78a      	b.n	8012640 <_vfiprintf_r+0xc0>
 801272a:	2300      	movs	r3, #0
 801272c:	f108 0801 	add.w	r8, r8, #1
 8012730:	9305      	str	r3, [sp, #20]
 8012732:	4619      	mov	r1, r3
 8012734:	250a      	movs	r5, #10
 8012736:	4640      	mov	r0, r8
 8012738:	f810 2b01 	ldrb.w	r2, [r0], #1
 801273c:	3a30      	subs	r2, #48	; 0x30
 801273e:	2a09      	cmp	r2, #9
 8012740:	d903      	bls.n	801274a <_vfiprintf_r+0x1ca>
 8012742:	2b00      	cmp	r3, #0
 8012744:	d0c3      	beq.n	80126ce <_vfiprintf_r+0x14e>
 8012746:	9105      	str	r1, [sp, #20]
 8012748:	e7c1      	b.n	80126ce <_vfiprintf_r+0x14e>
 801274a:	fb05 2101 	mla	r1, r5, r1, r2
 801274e:	2301      	movs	r3, #1
 8012750:	4680      	mov	r8, r0
 8012752:	e7f0      	b.n	8012736 <_vfiprintf_r+0x1b6>
 8012754:	ab03      	add	r3, sp, #12
 8012756:	9300      	str	r3, [sp, #0]
 8012758:	4622      	mov	r2, r4
 801275a:	4b13      	ldr	r3, [pc, #76]	; (80127a8 <_vfiprintf_r+0x228>)
 801275c:	a904      	add	r1, sp, #16
 801275e:	4630      	mov	r0, r6
 8012760:	f3af 8000 	nop.w
 8012764:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012768:	4681      	mov	r9, r0
 801276a:	d1d5      	bne.n	8012718 <_vfiprintf_r+0x198>
 801276c:	89a3      	ldrh	r3, [r4, #12]
 801276e:	065b      	lsls	r3, r3, #25
 8012770:	f53f af7e 	bmi.w	8012670 <_vfiprintf_r+0xf0>
 8012774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012776:	e77d      	b.n	8012674 <_vfiprintf_r+0xf4>
 8012778:	ab03      	add	r3, sp, #12
 801277a:	9300      	str	r3, [sp, #0]
 801277c:	4622      	mov	r2, r4
 801277e:	4b0a      	ldr	r3, [pc, #40]	; (80127a8 <_vfiprintf_r+0x228>)
 8012780:	a904      	add	r1, sp, #16
 8012782:	4630      	mov	r0, r6
 8012784:	f000 f888 	bl	8012898 <_printf_i>
 8012788:	e7ec      	b.n	8012764 <_vfiprintf_r+0x1e4>
 801278a:	bf00      	nop
 801278c:	08015c4c 	.word	0x08015c4c
 8012790:	08015c8c 	.word	0x08015c8c
 8012794:	08015c6c 	.word	0x08015c6c
 8012798:	08015c2c 	.word	0x08015c2c
 801279c:	08015c92 	.word	0x08015c92
 80127a0:	08015c96 	.word	0x08015c96
 80127a4:	00000000 	.word	0x00000000
 80127a8:	0801255b 	.word	0x0801255b

080127ac <_printf_common>:
 80127ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b0:	4691      	mov	r9, r2
 80127b2:	461f      	mov	r7, r3
 80127b4:	688a      	ldr	r2, [r1, #8]
 80127b6:	690b      	ldr	r3, [r1, #16]
 80127b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127bc:	4293      	cmp	r3, r2
 80127be:	bfb8      	it	lt
 80127c0:	4613      	movlt	r3, r2
 80127c2:	f8c9 3000 	str.w	r3, [r9]
 80127c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127ca:	4606      	mov	r6, r0
 80127cc:	460c      	mov	r4, r1
 80127ce:	b112      	cbz	r2, 80127d6 <_printf_common+0x2a>
 80127d0:	3301      	adds	r3, #1
 80127d2:	f8c9 3000 	str.w	r3, [r9]
 80127d6:	6823      	ldr	r3, [r4, #0]
 80127d8:	0699      	lsls	r1, r3, #26
 80127da:	bf42      	ittt	mi
 80127dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80127e0:	3302      	addmi	r3, #2
 80127e2:	f8c9 3000 	strmi.w	r3, [r9]
 80127e6:	6825      	ldr	r5, [r4, #0]
 80127e8:	f015 0506 	ands.w	r5, r5, #6
 80127ec:	d107      	bne.n	80127fe <_printf_common+0x52>
 80127ee:	f104 0a19 	add.w	sl, r4, #25
 80127f2:	68e3      	ldr	r3, [r4, #12]
 80127f4:	f8d9 2000 	ldr.w	r2, [r9]
 80127f8:	1a9b      	subs	r3, r3, r2
 80127fa:	42ab      	cmp	r3, r5
 80127fc:	dc28      	bgt.n	8012850 <_printf_common+0xa4>
 80127fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012802:	6822      	ldr	r2, [r4, #0]
 8012804:	3300      	adds	r3, #0
 8012806:	bf18      	it	ne
 8012808:	2301      	movne	r3, #1
 801280a:	0692      	lsls	r2, r2, #26
 801280c:	d42d      	bmi.n	801286a <_printf_common+0xbe>
 801280e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012812:	4639      	mov	r1, r7
 8012814:	4630      	mov	r0, r6
 8012816:	47c0      	blx	r8
 8012818:	3001      	adds	r0, #1
 801281a:	d020      	beq.n	801285e <_printf_common+0xb2>
 801281c:	6823      	ldr	r3, [r4, #0]
 801281e:	68e5      	ldr	r5, [r4, #12]
 8012820:	f8d9 2000 	ldr.w	r2, [r9]
 8012824:	f003 0306 	and.w	r3, r3, #6
 8012828:	2b04      	cmp	r3, #4
 801282a:	bf08      	it	eq
 801282c:	1aad      	subeq	r5, r5, r2
 801282e:	68a3      	ldr	r3, [r4, #8]
 8012830:	6922      	ldr	r2, [r4, #16]
 8012832:	bf0c      	ite	eq
 8012834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012838:	2500      	movne	r5, #0
 801283a:	4293      	cmp	r3, r2
 801283c:	bfc4      	itt	gt
 801283e:	1a9b      	subgt	r3, r3, r2
 8012840:	18ed      	addgt	r5, r5, r3
 8012842:	f04f 0900 	mov.w	r9, #0
 8012846:	341a      	adds	r4, #26
 8012848:	454d      	cmp	r5, r9
 801284a:	d11a      	bne.n	8012882 <_printf_common+0xd6>
 801284c:	2000      	movs	r0, #0
 801284e:	e008      	b.n	8012862 <_printf_common+0xb6>
 8012850:	2301      	movs	r3, #1
 8012852:	4652      	mov	r2, sl
 8012854:	4639      	mov	r1, r7
 8012856:	4630      	mov	r0, r6
 8012858:	47c0      	blx	r8
 801285a:	3001      	adds	r0, #1
 801285c:	d103      	bne.n	8012866 <_printf_common+0xba>
 801285e:	f04f 30ff 	mov.w	r0, #4294967295
 8012862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012866:	3501      	adds	r5, #1
 8012868:	e7c3      	b.n	80127f2 <_printf_common+0x46>
 801286a:	18e1      	adds	r1, r4, r3
 801286c:	1c5a      	adds	r2, r3, #1
 801286e:	2030      	movs	r0, #48	; 0x30
 8012870:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012874:	4422      	add	r2, r4
 8012876:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801287a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801287e:	3302      	adds	r3, #2
 8012880:	e7c5      	b.n	801280e <_printf_common+0x62>
 8012882:	2301      	movs	r3, #1
 8012884:	4622      	mov	r2, r4
 8012886:	4639      	mov	r1, r7
 8012888:	4630      	mov	r0, r6
 801288a:	47c0      	blx	r8
 801288c:	3001      	adds	r0, #1
 801288e:	d0e6      	beq.n	801285e <_printf_common+0xb2>
 8012890:	f109 0901 	add.w	r9, r9, #1
 8012894:	e7d8      	b.n	8012848 <_printf_common+0x9c>
	...

08012898 <_printf_i>:
 8012898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801289c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80128a0:	460c      	mov	r4, r1
 80128a2:	7e09      	ldrb	r1, [r1, #24]
 80128a4:	b085      	sub	sp, #20
 80128a6:	296e      	cmp	r1, #110	; 0x6e
 80128a8:	4617      	mov	r7, r2
 80128aa:	4606      	mov	r6, r0
 80128ac:	4698      	mov	r8, r3
 80128ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80128b0:	f000 80b3 	beq.w	8012a1a <_printf_i+0x182>
 80128b4:	d822      	bhi.n	80128fc <_printf_i+0x64>
 80128b6:	2963      	cmp	r1, #99	; 0x63
 80128b8:	d036      	beq.n	8012928 <_printf_i+0x90>
 80128ba:	d80a      	bhi.n	80128d2 <_printf_i+0x3a>
 80128bc:	2900      	cmp	r1, #0
 80128be:	f000 80b9 	beq.w	8012a34 <_printf_i+0x19c>
 80128c2:	2958      	cmp	r1, #88	; 0x58
 80128c4:	f000 8083 	beq.w	80129ce <_printf_i+0x136>
 80128c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80128d0:	e032      	b.n	8012938 <_printf_i+0xa0>
 80128d2:	2964      	cmp	r1, #100	; 0x64
 80128d4:	d001      	beq.n	80128da <_printf_i+0x42>
 80128d6:	2969      	cmp	r1, #105	; 0x69
 80128d8:	d1f6      	bne.n	80128c8 <_printf_i+0x30>
 80128da:	6820      	ldr	r0, [r4, #0]
 80128dc:	6813      	ldr	r3, [r2, #0]
 80128de:	0605      	lsls	r5, r0, #24
 80128e0:	f103 0104 	add.w	r1, r3, #4
 80128e4:	d52a      	bpl.n	801293c <_printf_i+0xa4>
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	6011      	str	r1, [r2, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	da03      	bge.n	80128f6 <_printf_i+0x5e>
 80128ee:	222d      	movs	r2, #45	; 0x2d
 80128f0:	425b      	negs	r3, r3
 80128f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80128f6:	486f      	ldr	r0, [pc, #444]	; (8012ab4 <_printf_i+0x21c>)
 80128f8:	220a      	movs	r2, #10
 80128fa:	e039      	b.n	8012970 <_printf_i+0xd8>
 80128fc:	2973      	cmp	r1, #115	; 0x73
 80128fe:	f000 809d 	beq.w	8012a3c <_printf_i+0x1a4>
 8012902:	d808      	bhi.n	8012916 <_printf_i+0x7e>
 8012904:	296f      	cmp	r1, #111	; 0x6f
 8012906:	d020      	beq.n	801294a <_printf_i+0xb2>
 8012908:	2970      	cmp	r1, #112	; 0x70
 801290a:	d1dd      	bne.n	80128c8 <_printf_i+0x30>
 801290c:	6823      	ldr	r3, [r4, #0]
 801290e:	f043 0320 	orr.w	r3, r3, #32
 8012912:	6023      	str	r3, [r4, #0]
 8012914:	e003      	b.n	801291e <_printf_i+0x86>
 8012916:	2975      	cmp	r1, #117	; 0x75
 8012918:	d017      	beq.n	801294a <_printf_i+0xb2>
 801291a:	2978      	cmp	r1, #120	; 0x78
 801291c:	d1d4      	bne.n	80128c8 <_printf_i+0x30>
 801291e:	2378      	movs	r3, #120	; 0x78
 8012920:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012924:	4864      	ldr	r0, [pc, #400]	; (8012ab8 <_printf_i+0x220>)
 8012926:	e055      	b.n	80129d4 <_printf_i+0x13c>
 8012928:	6813      	ldr	r3, [r2, #0]
 801292a:	1d19      	adds	r1, r3, #4
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	6011      	str	r1, [r2, #0]
 8012930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012938:	2301      	movs	r3, #1
 801293a:	e08c      	b.n	8012a56 <_printf_i+0x1be>
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	6011      	str	r1, [r2, #0]
 8012940:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012944:	bf18      	it	ne
 8012946:	b21b      	sxthne	r3, r3
 8012948:	e7cf      	b.n	80128ea <_printf_i+0x52>
 801294a:	6813      	ldr	r3, [r2, #0]
 801294c:	6825      	ldr	r5, [r4, #0]
 801294e:	1d18      	adds	r0, r3, #4
 8012950:	6010      	str	r0, [r2, #0]
 8012952:	0628      	lsls	r0, r5, #24
 8012954:	d501      	bpl.n	801295a <_printf_i+0xc2>
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	e002      	b.n	8012960 <_printf_i+0xc8>
 801295a:	0668      	lsls	r0, r5, #25
 801295c:	d5fb      	bpl.n	8012956 <_printf_i+0xbe>
 801295e:	881b      	ldrh	r3, [r3, #0]
 8012960:	4854      	ldr	r0, [pc, #336]	; (8012ab4 <_printf_i+0x21c>)
 8012962:	296f      	cmp	r1, #111	; 0x6f
 8012964:	bf14      	ite	ne
 8012966:	220a      	movne	r2, #10
 8012968:	2208      	moveq	r2, #8
 801296a:	2100      	movs	r1, #0
 801296c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012970:	6865      	ldr	r5, [r4, #4]
 8012972:	60a5      	str	r5, [r4, #8]
 8012974:	2d00      	cmp	r5, #0
 8012976:	f2c0 8095 	blt.w	8012aa4 <_printf_i+0x20c>
 801297a:	6821      	ldr	r1, [r4, #0]
 801297c:	f021 0104 	bic.w	r1, r1, #4
 8012980:	6021      	str	r1, [r4, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d13d      	bne.n	8012a02 <_printf_i+0x16a>
 8012986:	2d00      	cmp	r5, #0
 8012988:	f040 808e 	bne.w	8012aa8 <_printf_i+0x210>
 801298c:	4665      	mov	r5, ip
 801298e:	2a08      	cmp	r2, #8
 8012990:	d10b      	bne.n	80129aa <_printf_i+0x112>
 8012992:	6823      	ldr	r3, [r4, #0]
 8012994:	07db      	lsls	r3, r3, #31
 8012996:	d508      	bpl.n	80129aa <_printf_i+0x112>
 8012998:	6923      	ldr	r3, [r4, #16]
 801299a:	6862      	ldr	r2, [r4, #4]
 801299c:	429a      	cmp	r2, r3
 801299e:	bfde      	ittt	le
 80129a0:	2330      	movle	r3, #48	; 0x30
 80129a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80129a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80129aa:	ebac 0305 	sub.w	r3, ip, r5
 80129ae:	6123      	str	r3, [r4, #16]
 80129b0:	f8cd 8000 	str.w	r8, [sp]
 80129b4:	463b      	mov	r3, r7
 80129b6:	aa03      	add	r2, sp, #12
 80129b8:	4621      	mov	r1, r4
 80129ba:	4630      	mov	r0, r6
 80129bc:	f7ff fef6 	bl	80127ac <_printf_common>
 80129c0:	3001      	adds	r0, #1
 80129c2:	d14d      	bne.n	8012a60 <_printf_i+0x1c8>
 80129c4:	f04f 30ff 	mov.w	r0, #4294967295
 80129c8:	b005      	add	sp, #20
 80129ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129ce:	4839      	ldr	r0, [pc, #228]	; (8012ab4 <_printf_i+0x21c>)
 80129d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80129d4:	6813      	ldr	r3, [r2, #0]
 80129d6:	6821      	ldr	r1, [r4, #0]
 80129d8:	1d1d      	adds	r5, r3, #4
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	6015      	str	r5, [r2, #0]
 80129de:	060a      	lsls	r2, r1, #24
 80129e0:	d50b      	bpl.n	80129fa <_printf_i+0x162>
 80129e2:	07ca      	lsls	r2, r1, #31
 80129e4:	bf44      	itt	mi
 80129e6:	f041 0120 	orrmi.w	r1, r1, #32
 80129ea:	6021      	strmi	r1, [r4, #0]
 80129ec:	b91b      	cbnz	r3, 80129f6 <_printf_i+0x15e>
 80129ee:	6822      	ldr	r2, [r4, #0]
 80129f0:	f022 0220 	bic.w	r2, r2, #32
 80129f4:	6022      	str	r2, [r4, #0]
 80129f6:	2210      	movs	r2, #16
 80129f8:	e7b7      	b.n	801296a <_printf_i+0xd2>
 80129fa:	064d      	lsls	r5, r1, #25
 80129fc:	bf48      	it	mi
 80129fe:	b29b      	uxthmi	r3, r3
 8012a00:	e7ef      	b.n	80129e2 <_printf_i+0x14a>
 8012a02:	4665      	mov	r5, ip
 8012a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a08:	fb02 3311 	mls	r3, r2, r1, r3
 8012a0c:	5cc3      	ldrb	r3, [r0, r3]
 8012a0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012a12:	460b      	mov	r3, r1
 8012a14:	2900      	cmp	r1, #0
 8012a16:	d1f5      	bne.n	8012a04 <_printf_i+0x16c>
 8012a18:	e7b9      	b.n	801298e <_printf_i+0xf6>
 8012a1a:	6813      	ldr	r3, [r2, #0]
 8012a1c:	6825      	ldr	r5, [r4, #0]
 8012a1e:	6961      	ldr	r1, [r4, #20]
 8012a20:	1d18      	adds	r0, r3, #4
 8012a22:	6010      	str	r0, [r2, #0]
 8012a24:	0628      	lsls	r0, r5, #24
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	d501      	bpl.n	8012a2e <_printf_i+0x196>
 8012a2a:	6019      	str	r1, [r3, #0]
 8012a2c:	e002      	b.n	8012a34 <_printf_i+0x19c>
 8012a2e:	066a      	lsls	r2, r5, #25
 8012a30:	d5fb      	bpl.n	8012a2a <_printf_i+0x192>
 8012a32:	8019      	strh	r1, [r3, #0]
 8012a34:	2300      	movs	r3, #0
 8012a36:	6123      	str	r3, [r4, #16]
 8012a38:	4665      	mov	r5, ip
 8012a3a:	e7b9      	b.n	80129b0 <_printf_i+0x118>
 8012a3c:	6813      	ldr	r3, [r2, #0]
 8012a3e:	1d19      	adds	r1, r3, #4
 8012a40:	6011      	str	r1, [r2, #0]
 8012a42:	681d      	ldr	r5, [r3, #0]
 8012a44:	6862      	ldr	r2, [r4, #4]
 8012a46:	2100      	movs	r1, #0
 8012a48:	4628      	mov	r0, r5
 8012a4a:	f7ed fbe1 	bl	8000210 <memchr>
 8012a4e:	b108      	cbz	r0, 8012a54 <_printf_i+0x1bc>
 8012a50:	1b40      	subs	r0, r0, r5
 8012a52:	6060      	str	r0, [r4, #4]
 8012a54:	6863      	ldr	r3, [r4, #4]
 8012a56:	6123      	str	r3, [r4, #16]
 8012a58:	2300      	movs	r3, #0
 8012a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a5e:	e7a7      	b.n	80129b0 <_printf_i+0x118>
 8012a60:	6923      	ldr	r3, [r4, #16]
 8012a62:	462a      	mov	r2, r5
 8012a64:	4639      	mov	r1, r7
 8012a66:	4630      	mov	r0, r6
 8012a68:	47c0      	blx	r8
 8012a6a:	3001      	adds	r0, #1
 8012a6c:	d0aa      	beq.n	80129c4 <_printf_i+0x12c>
 8012a6e:	6823      	ldr	r3, [r4, #0]
 8012a70:	079b      	lsls	r3, r3, #30
 8012a72:	d413      	bmi.n	8012a9c <_printf_i+0x204>
 8012a74:	68e0      	ldr	r0, [r4, #12]
 8012a76:	9b03      	ldr	r3, [sp, #12]
 8012a78:	4298      	cmp	r0, r3
 8012a7a:	bfb8      	it	lt
 8012a7c:	4618      	movlt	r0, r3
 8012a7e:	e7a3      	b.n	80129c8 <_printf_i+0x130>
 8012a80:	2301      	movs	r3, #1
 8012a82:	464a      	mov	r2, r9
 8012a84:	4639      	mov	r1, r7
 8012a86:	4630      	mov	r0, r6
 8012a88:	47c0      	blx	r8
 8012a8a:	3001      	adds	r0, #1
 8012a8c:	d09a      	beq.n	80129c4 <_printf_i+0x12c>
 8012a8e:	3501      	adds	r5, #1
 8012a90:	68e3      	ldr	r3, [r4, #12]
 8012a92:	9a03      	ldr	r2, [sp, #12]
 8012a94:	1a9b      	subs	r3, r3, r2
 8012a96:	42ab      	cmp	r3, r5
 8012a98:	dcf2      	bgt.n	8012a80 <_printf_i+0x1e8>
 8012a9a:	e7eb      	b.n	8012a74 <_printf_i+0x1dc>
 8012a9c:	2500      	movs	r5, #0
 8012a9e:	f104 0919 	add.w	r9, r4, #25
 8012aa2:	e7f5      	b.n	8012a90 <_printf_i+0x1f8>
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d1ac      	bne.n	8012a02 <_printf_i+0x16a>
 8012aa8:	7803      	ldrb	r3, [r0, #0]
 8012aaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012aae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ab2:	e76c      	b.n	801298e <_printf_i+0xf6>
 8012ab4:	08015c9d 	.word	0x08015c9d
 8012ab8:	08015cae 	.word	0x08015cae

08012abc <__sread>:
 8012abc:	b510      	push	{r4, lr}
 8012abe:	460c      	mov	r4, r1
 8012ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ac4:	f000 fa46 	bl	8012f54 <_read_r>
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	bfab      	itete	ge
 8012acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ace:	89a3      	ldrhlt	r3, [r4, #12]
 8012ad0:	181b      	addge	r3, r3, r0
 8012ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012ad6:	bfac      	ite	ge
 8012ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8012ada:	81a3      	strhlt	r3, [r4, #12]
 8012adc:	bd10      	pop	{r4, pc}

08012ade <__swrite>:
 8012ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae2:	461f      	mov	r7, r3
 8012ae4:	898b      	ldrh	r3, [r1, #12]
 8012ae6:	05db      	lsls	r3, r3, #23
 8012ae8:	4605      	mov	r5, r0
 8012aea:	460c      	mov	r4, r1
 8012aec:	4616      	mov	r6, r2
 8012aee:	d505      	bpl.n	8012afc <__swrite+0x1e>
 8012af0:	2302      	movs	r3, #2
 8012af2:	2200      	movs	r2, #0
 8012af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012af8:	f000 f9b6 	bl	8012e68 <_lseek_r>
 8012afc:	89a3      	ldrh	r3, [r4, #12]
 8012afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b06:	81a3      	strh	r3, [r4, #12]
 8012b08:	4632      	mov	r2, r6
 8012b0a:	463b      	mov	r3, r7
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b12:	f000 b869 	b.w	8012be8 <_write_r>

08012b16 <__sseek>:
 8012b16:	b510      	push	{r4, lr}
 8012b18:	460c      	mov	r4, r1
 8012b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b1e:	f000 f9a3 	bl	8012e68 <_lseek_r>
 8012b22:	1c43      	adds	r3, r0, #1
 8012b24:	89a3      	ldrh	r3, [r4, #12]
 8012b26:	bf15      	itete	ne
 8012b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b32:	81a3      	strheq	r3, [r4, #12]
 8012b34:	bf18      	it	ne
 8012b36:	81a3      	strhne	r3, [r4, #12]
 8012b38:	bd10      	pop	{r4, pc}

08012b3a <__sclose>:
 8012b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b3e:	f000 b8d3 	b.w	8012ce8 <_close_r>
	...

08012b44 <__swbuf_r>:
 8012b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b46:	460e      	mov	r6, r1
 8012b48:	4614      	mov	r4, r2
 8012b4a:	4605      	mov	r5, r0
 8012b4c:	b118      	cbz	r0, 8012b56 <__swbuf_r+0x12>
 8012b4e:	6983      	ldr	r3, [r0, #24]
 8012b50:	b90b      	cbnz	r3, 8012b56 <__swbuf_r+0x12>
 8012b52:	f7ff fc5f 	bl	8012414 <__sinit>
 8012b56:	4b21      	ldr	r3, [pc, #132]	; (8012bdc <__swbuf_r+0x98>)
 8012b58:	429c      	cmp	r4, r3
 8012b5a:	d12a      	bne.n	8012bb2 <__swbuf_r+0x6e>
 8012b5c:	686c      	ldr	r4, [r5, #4]
 8012b5e:	69a3      	ldr	r3, [r4, #24]
 8012b60:	60a3      	str	r3, [r4, #8]
 8012b62:	89a3      	ldrh	r3, [r4, #12]
 8012b64:	071a      	lsls	r2, r3, #28
 8012b66:	d52e      	bpl.n	8012bc6 <__swbuf_r+0x82>
 8012b68:	6923      	ldr	r3, [r4, #16]
 8012b6a:	b363      	cbz	r3, 8012bc6 <__swbuf_r+0x82>
 8012b6c:	6923      	ldr	r3, [r4, #16]
 8012b6e:	6820      	ldr	r0, [r4, #0]
 8012b70:	1ac0      	subs	r0, r0, r3
 8012b72:	6963      	ldr	r3, [r4, #20]
 8012b74:	b2f6      	uxtb	r6, r6
 8012b76:	4283      	cmp	r3, r0
 8012b78:	4637      	mov	r7, r6
 8012b7a:	dc04      	bgt.n	8012b86 <__swbuf_r+0x42>
 8012b7c:	4621      	mov	r1, r4
 8012b7e:	4628      	mov	r0, r5
 8012b80:	f000 f948 	bl	8012e14 <_fflush_r>
 8012b84:	bb28      	cbnz	r0, 8012bd2 <__swbuf_r+0x8e>
 8012b86:	68a3      	ldr	r3, [r4, #8]
 8012b88:	3b01      	subs	r3, #1
 8012b8a:	60a3      	str	r3, [r4, #8]
 8012b8c:	6823      	ldr	r3, [r4, #0]
 8012b8e:	1c5a      	adds	r2, r3, #1
 8012b90:	6022      	str	r2, [r4, #0]
 8012b92:	701e      	strb	r6, [r3, #0]
 8012b94:	6963      	ldr	r3, [r4, #20]
 8012b96:	3001      	adds	r0, #1
 8012b98:	4283      	cmp	r3, r0
 8012b9a:	d004      	beq.n	8012ba6 <__swbuf_r+0x62>
 8012b9c:	89a3      	ldrh	r3, [r4, #12]
 8012b9e:	07db      	lsls	r3, r3, #31
 8012ba0:	d519      	bpl.n	8012bd6 <__swbuf_r+0x92>
 8012ba2:	2e0a      	cmp	r6, #10
 8012ba4:	d117      	bne.n	8012bd6 <__swbuf_r+0x92>
 8012ba6:	4621      	mov	r1, r4
 8012ba8:	4628      	mov	r0, r5
 8012baa:	f000 f933 	bl	8012e14 <_fflush_r>
 8012bae:	b190      	cbz	r0, 8012bd6 <__swbuf_r+0x92>
 8012bb0:	e00f      	b.n	8012bd2 <__swbuf_r+0x8e>
 8012bb2:	4b0b      	ldr	r3, [pc, #44]	; (8012be0 <__swbuf_r+0x9c>)
 8012bb4:	429c      	cmp	r4, r3
 8012bb6:	d101      	bne.n	8012bbc <__swbuf_r+0x78>
 8012bb8:	68ac      	ldr	r4, [r5, #8]
 8012bba:	e7d0      	b.n	8012b5e <__swbuf_r+0x1a>
 8012bbc:	4b09      	ldr	r3, [pc, #36]	; (8012be4 <__swbuf_r+0xa0>)
 8012bbe:	429c      	cmp	r4, r3
 8012bc0:	bf08      	it	eq
 8012bc2:	68ec      	ldreq	r4, [r5, #12]
 8012bc4:	e7cb      	b.n	8012b5e <__swbuf_r+0x1a>
 8012bc6:	4621      	mov	r1, r4
 8012bc8:	4628      	mov	r0, r5
 8012bca:	f000 f81f 	bl	8012c0c <__swsetup_r>
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	d0cc      	beq.n	8012b6c <__swbuf_r+0x28>
 8012bd2:	f04f 37ff 	mov.w	r7, #4294967295
 8012bd6:	4638      	mov	r0, r7
 8012bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	08015c4c 	.word	0x08015c4c
 8012be0:	08015c6c 	.word	0x08015c6c
 8012be4:	08015c2c 	.word	0x08015c2c

08012be8 <_write_r>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	4c07      	ldr	r4, [pc, #28]	; (8012c08 <_write_r+0x20>)
 8012bec:	4605      	mov	r5, r0
 8012bee:	4608      	mov	r0, r1
 8012bf0:	4611      	mov	r1, r2
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	6022      	str	r2, [r4, #0]
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	f7ef fee9 	bl	80029ce <_write>
 8012bfc:	1c43      	adds	r3, r0, #1
 8012bfe:	d102      	bne.n	8012c06 <_write_r+0x1e>
 8012c00:	6823      	ldr	r3, [r4, #0]
 8012c02:	b103      	cbz	r3, 8012c06 <_write_r+0x1e>
 8012c04:	602b      	str	r3, [r5, #0]
 8012c06:	bd38      	pop	{r3, r4, r5, pc}
 8012c08:	2000f484 	.word	0x2000f484

08012c0c <__swsetup_r>:
 8012c0c:	4b32      	ldr	r3, [pc, #200]	; (8012cd8 <__swsetup_r+0xcc>)
 8012c0e:	b570      	push	{r4, r5, r6, lr}
 8012c10:	681d      	ldr	r5, [r3, #0]
 8012c12:	4606      	mov	r6, r0
 8012c14:	460c      	mov	r4, r1
 8012c16:	b125      	cbz	r5, 8012c22 <__swsetup_r+0x16>
 8012c18:	69ab      	ldr	r3, [r5, #24]
 8012c1a:	b913      	cbnz	r3, 8012c22 <__swsetup_r+0x16>
 8012c1c:	4628      	mov	r0, r5
 8012c1e:	f7ff fbf9 	bl	8012414 <__sinit>
 8012c22:	4b2e      	ldr	r3, [pc, #184]	; (8012cdc <__swsetup_r+0xd0>)
 8012c24:	429c      	cmp	r4, r3
 8012c26:	d10f      	bne.n	8012c48 <__swsetup_r+0x3c>
 8012c28:	686c      	ldr	r4, [r5, #4]
 8012c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c2e:	b29a      	uxth	r2, r3
 8012c30:	0715      	lsls	r5, r2, #28
 8012c32:	d42c      	bmi.n	8012c8e <__swsetup_r+0x82>
 8012c34:	06d0      	lsls	r0, r2, #27
 8012c36:	d411      	bmi.n	8012c5c <__swsetup_r+0x50>
 8012c38:	2209      	movs	r2, #9
 8012c3a:	6032      	str	r2, [r6, #0]
 8012c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c40:	81a3      	strh	r3, [r4, #12]
 8012c42:	f04f 30ff 	mov.w	r0, #4294967295
 8012c46:	e03e      	b.n	8012cc6 <__swsetup_r+0xba>
 8012c48:	4b25      	ldr	r3, [pc, #148]	; (8012ce0 <__swsetup_r+0xd4>)
 8012c4a:	429c      	cmp	r4, r3
 8012c4c:	d101      	bne.n	8012c52 <__swsetup_r+0x46>
 8012c4e:	68ac      	ldr	r4, [r5, #8]
 8012c50:	e7eb      	b.n	8012c2a <__swsetup_r+0x1e>
 8012c52:	4b24      	ldr	r3, [pc, #144]	; (8012ce4 <__swsetup_r+0xd8>)
 8012c54:	429c      	cmp	r4, r3
 8012c56:	bf08      	it	eq
 8012c58:	68ec      	ldreq	r4, [r5, #12]
 8012c5a:	e7e6      	b.n	8012c2a <__swsetup_r+0x1e>
 8012c5c:	0751      	lsls	r1, r2, #29
 8012c5e:	d512      	bpl.n	8012c86 <__swsetup_r+0x7a>
 8012c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c62:	b141      	cbz	r1, 8012c76 <__swsetup_r+0x6a>
 8012c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c68:	4299      	cmp	r1, r3
 8012c6a:	d002      	beq.n	8012c72 <__swsetup_r+0x66>
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	f7ff fac1 	bl	80121f4 <_free_r>
 8012c72:	2300      	movs	r3, #0
 8012c74:	6363      	str	r3, [r4, #52]	; 0x34
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c7c:	81a3      	strh	r3, [r4, #12]
 8012c7e:	2300      	movs	r3, #0
 8012c80:	6063      	str	r3, [r4, #4]
 8012c82:	6923      	ldr	r3, [r4, #16]
 8012c84:	6023      	str	r3, [r4, #0]
 8012c86:	89a3      	ldrh	r3, [r4, #12]
 8012c88:	f043 0308 	orr.w	r3, r3, #8
 8012c8c:	81a3      	strh	r3, [r4, #12]
 8012c8e:	6923      	ldr	r3, [r4, #16]
 8012c90:	b94b      	cbnz	r3, 8012ca6 <__swsetup_r+0x9a>
 8012c92:	89a3      	ldrh	r3, [r4, #12]
 8012c94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c9c:	d003      	beq.n	8012ca6 <__swsetup_r+0x9a>
 8012c9e:	4621      	mov	r1, r4
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	f000 f917 	bl	8012ed4 <__smakebuf_r>
 8012ca6:	89a2      	ldrh	r2, [r4, #12]
 8012ca8:	f012 0301 	ands.w	r3, r2, #1
 8012cac:	d00c      	beq.n	8012cc8 <__swsetup_r+0xbc>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	60a3      	str	r3, [r4, #8]
 8012cb2:	6963      	ldr	r3, [r4, #20]
 8012cb4:	425b      	negs	r3, r3
 8012cb6:	61a3      	str	r3, [r4, #24]
 8012cb8:	6923      	ldr	r3, [r4, #16]
 8012cba:	b953      	cbnz	r3, 8012cd2 <__swsetup_r+0xc6>
 8012cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012cc4:	d1ba      	bne.n	8012c3c <__swsetup_r+0x30>
 8012cc6:	bd70      	pop	{r4, r5, r6, pc}
 8012cc8:	0792      	lsls	r2, r2, #30
 8012cca:	bf58      	it	pl
 8012ccc:	6963      	ldrpl	r3, [r4, #20]
 8012cce:	60a3      	str	r3, [r4, #8]
 8012cd0:	e7f2      	b.n	8012cb8 <__swsetup_r+0xac>
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	e7f7      	b.n	8012cc6 <__swsetup_r+0xba>
 8012cd6:	bf00      	nop
 8012cd8:	2000004c 	.word	0x2000004c
 8012cdc:	08015c4c 	.word	0x08015c4c
 8012ce0:	08015c6c 	.word	0x08015c6c
 8012ce4:	08015c2c 	.word	0x08015c2c

08012ce8 <_close_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4c06      	ldr	r4, [pc, #24]	; (8012d04 <_close_r+0x1c>)
 8012cec:	2300      	movs	r3, #0
 8012cee:	4605      	mov	r5, r0
 8012cf0:	4608      	mov	r0, r1
 8012cf2:	6023      	str	r3, [r4, #0]
 8012cf4:	f7ef fe87 	bl	8002a06 <_close>
 8012cf8:	1c43      	adds	r3, r0, #1
 8012cfa:	d102      	bne.n	8012d02 <_close_r+0x1a>
 8012cfc:	6823      	ldr	r3, [r4, #0]
 8012cfe:	b103      	cbz	r3, 8012d02 <_close_r+0x1a>
 8012d00:	602b      	str	r3, [r5, #0]
 8012d02:	bd38      	pop	{r3, r4, r5, pc}
 8012d04:	2000f484 	.word	0x2000f484

08012d08 <__sflush_r>:
 8012d08:	898a      	ldrh	r2, [r1, #12]
 8012d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0e:	4605      	mov	r5, r0
 8012d10:	0710      	lsls	r0, r2, #28
 8012d12:	460c      	mov	r4, r1
 8012d14:	d458      	bmi.n	8012dc8 <__sflush_r+0xc0>
 8012d16:	684b      	ldr	r3, [r1, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	dc05      	bgt.n	8012d28 <__sflush_r+0x20>
 8012d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	dc02      	bgt.n	8012d28 <__sflush_r+0x20>
 8012d22:	2000      	movs	r0, #0
 8012d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d2a:	2e00      	cmp	r6, #0
 8012d2c:	d0f9      	beq.n	8012d22 <__sflush_r+0x1a>
 8012d2e:	2300      	movs	r3, #0
 8012d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d34:	682f      	ldr	r7, [r5, #0]
 8012d36:	6a21      	ldr	r1, [r4, #32]
 8012d38:	602b      	str	r3, [r5, #0]
 8012d3a:	d032      	beq.n	8012da2 <__sflush_r+0x9a>
 8012d3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d3e:	89a3      	ldrh	r3, [r4, #12]
 8012d40:	075a      	lsls	r2, r3, #29
 8012d42:	d505      	bpl.n	8012d50 <__sflush_r+0x48>
 8012d44:	6863      	ldr	r3, [r4, #4]
 8012d46:	1ac0      	subs	r0, r0, r3
 8012d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d4a:	b10b      	cbz	r3, 8012d50 <__sflush_r+0x48>
 8012d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d4e:	1ac0      	subs	r0, r0, r3
 8012d50:	2300      	movs	r3, #0
 8012d52:	4602      	mov	r2, r0
 8012d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d56:	6a21      	ldr	r1, [r4, #32]
 8012d58:	4628      	mov	r0, r5
 8012d5a:	47b0      	blx	r6
 8012d5c:	1c43      	adds	r3, r0, #1
 8012d5e:	89a3      	ldrh	r3, [r4, #12]
 8012d60:	d106      	bne.n	8012d70 <__sflush_r+0x68>
 8012d62:	6829      	ldr	r1, [r5, #0]
 8012d64:	291d      	cmp	r1, #29
 8012d66:	d848      	bhi.n	8012dfa <__sflush_r+0xf2>
 8012d68:	4a29      	ldr	r2, [pc, #164]	; (8012e10 <__sflush_r+0x108>)
 8012d6a:	40ca      	lsrs	r2, r1
 8012d6c:	07d6      	lsls	r6, r2, #31
 8012d6e:	d544      	bpl.n	8012dfa <__sflush_r+0xf2>
 8012d70:	2200      	movs	r2, #0
 8012d72:	6062      	str	r2, [r4, #4]
 8012d74:	04d9      	lsls	r1, r3, #19
 8012d76:	6922      	ldr	r2, [r4, #16]
 8012d78:	6022      	str	r2, [r4, #0]
 8012d7a:	d504      	bpl.n	8012d86 <__sflush_r+0x7e>
 8012d7c:	1c42      	adds	r2, r0, #1
 8012d7e:	d101      	bne.n	8012d84 <__sflush_r+0x7c>
 8012d80:	682b      	ldr	r3, [r5, #0]
 8012d82:	b903      	cbnz	r3, 8012d86 <__sflush_r+0x7e>
 8012d84:	6560      	str	r0, [r4, #84]	; 0x54
 8012d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d88:	602f      	str	r7, [r5, #0]
 8012d8a:	2900      	cmp	r1, #0
 8012d8c:	d0c9      	beq.n	8012d22 <__sflush_r+0x1a>
 8012d8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d92:	4299      	cmp	r1, r3
 8012d94:	d002      	beq.n	8012d9c <__sflush_r+0x94>
 8012d96:	4628      	mov	r0, r5
 8012d98:	f7ff fa2c 	bl	80121f4 <_free_r>
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	6360      	str	r0, [r4, #52]	; 0x34
 8012da0:	e7c0      	b.n	8012d24 <__sflush_r+0x1c>
 8012da2:	2301      	movs	r3, #1
 8012da4:	4628      	mov	r0, r5
 8012da6:	47b0      	blx	r6
 8012da8:	1c41      	adds	r1, r0, #1
 8012daa:	d1c8      	bne.n	8012d3e <__sflush_r+0x36>
 8012dac:	682b      	ldr	r3, [r5, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d0c5      	beq.n	8012d3e <__sflush_r+0x36>
 8012db2:	2b1d      	cmp	r3, #29
 8012db4:	d001      	beq.n	8012dba <__sflush_r+0xb2>
 8012db6:	2b16      	cmp	r3, #22
 8012db8:	d101      	bne.n	8012dbe <__sflush_r+0xb6>
 8012dba:	602f      	str	r7, [r5, #0]
 8012dbc:	e7b1      	b.n	8012d22 <__sflush_r+0x1a>
 8012dbe:	89a3      	ldrh	r3, [r4, #12]
 8012dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dc4:	81a3      	strh	r3, [r4, #12]
 8012dc6:	e7ad      	b.n	8012d24 <__sflush_r+0x1c>
 8012dc8:	690f      	ldr	r7, [r1, #16]
 8012dca:	2f00      	cmp	r7, #0
 8012dcc:	d0a9      	beq.n	8012d22 <__sflush_r+0x1a>
 8012dce:	0793      	lsls	r3, r2, #30
 8012dd0:	680e      	ldr	r6, [r1, #0]
 8012dd2:	bf08      	it	eq
 8012dd4:	694b      	ldreq	r3, [r1, #20]
 8012dd6:	600f      	str	r7, [r1, #0]
 8012dd8:	bf18      	it	ne
 8012dda:	2300      	movne	r3, #0
 8012ddc:	eba6 0807 	sub.w	r8, r6, r7
 8012de0:	608b      	str	r3, [r1, #8]
 8012de2:	f1b8 0f00 	cmp.w	r8, #0
 8012de6:	dd9c      	ble.n	8012d22 <__sflush_r+0x1a>
 8012de8:	4643      	mov	r3, r8
 8012dea:	463a      	mov	r2, r7
 8012dec:	6a21      	ldr	r1, [r4, #32]
 8012dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012df0:	4628      	mov	r0, r5
 8012df2:	47b0      	blx	r6
 8012df4:	2800      	cmp	r0, #0
 8012df6:	dc06      	bgt.n	8012e06 <__sflush_r+0xfe>
 8012df8:	89a3      	ldrh	r3, [r4, #12]
 8012dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dfe:	81a3      	strh	r3, [r4, #12]
 8012e00:	f04f 30ff 	mov.w	r0, #4294967295
 8012e04:	e78e      	b.n	8012d24 <__sflush_r+0x1c>
 8012e06:	4407      	add	r7, r0
 8012e08:	eba8 0800 	sub.w	r8, r8, r0
 8012e0c:	e7e9      	b.n	8012de2 <__sflush_r+0xda>
 8012e0e:	bf00      	nop
 8012e10:	20400001 	.word	0x20400001

08012e14 <_fflush_r>:
 8012e14:	b538      	push	{r3, r4, r5, lr}
 8012e16:	690b      	ldr	r3, [r1, #16]
 8012e18:	4605      	mov	r5, r0
 8012e1a:	460c      	mov	r4, r1
 8012e1c:	b1db      	cbz	r3, 8012e56 <_fflush_r+0x42>
 8012e1e:	b118      	cbz	r0, 8012e28 <_fflush_r+0x14>
 8012e20:	6983      	ldr	r3, [r0, #24]
 8012e22:	b90b      	cbnz	r3, 8012e28 <_fflush_r+0x14>
 8012e24:	f7ff faf6 	bl	8012414 <__sinit>
 8012e28:	4b0c      	ldr	r3, [pc, #48]	; (8012e5c <_fflush_r+0x48>)
 8012e2a:	429c      	cmp	r4, r3
 8012e2c:	d109      	bne.n	8012e42 <_fflush_r+0x2e>
 8012e2e:	686c      	ldr	r4, [r5, #4]
 8012e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e34:	b17b      	cbz	r3, 8012e56 <_fflush_r+0x42>
 8012e36:	4621      	mov	r1, r4
 8012e38:	4628      	mov	r0, r5
 8012e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e3e:	f7ff bf63 	b.w	8012d08 <__sflush_r>
 8012e42:	4b07      	ldr	r3, [pc, #28]	; (8012e60 <_fflush_r+0x4c>)
 8012e44:	429c      	cmp	r4, r3
 8012e46:	d101      	bne.n	8012e4c <_fflush_r+0x38>
 8012e48:	68ac      	ldr	r4, [r5, #8]
 8012e4a:	e7f1      	b.n	8012e30 <_fflush_r+0x1c>
 8012e4c:	4b05      	ldr	r3, [pc, #20]	; (8012e64 <_fflush_r+0x50>)
 8012e4e:	429c      	cmp	r4, r3
 8012e50:	bf08      	it	eq
 8012e52:	68ec      	ldreq	r4, [r5, #12]
 8012e54:	e7ec      	b.n	8012e30 <_fflush_r+0x1c>
 8012e56:	2000      	movs	r0, #0
 8012e58:	bd38      	pop	{r3, r4, r5, pc}
 8012e5a:	bf00      	nop
 8012e5c:	08015c4c 	.word	0x08015c4c
 8012e60:	08015c6c 	.word	0x08015c6c
 8012e64:	08015c2c 	.word	0x08015c2c

08012e68 <_lseek_r>:
 8012e68:	b538      	push	{r3, r4, r5, lr}
 8012e6a:	4c07      	ldr	r4, [pc, #28]	; (8012e88 <_lseek_r+0x20>)
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	4608      	mov	r0, r1
 8012e70:	4611      	mov	r1, r2
 8012e72:	2200      	movs	r2, #0
 8012e74:	6022      	str	r2, [r4, #0]
 8012e76:	461a      	mov	r2, r3
 8012e78:	f7ef fdec 	bl	8002a54 <_lseek>
 8012e7c:	1c43      	adds	r3, r0, #1
 8012e7e:	d102      	bne.n	8012e86 <_lseek_r+0x1e>
 8012e80:	6823      	ldr	r3, [r4, #0]
 8012e82:	b103      	cbz	r3, 8012e86 <_lseek_r+0x1e>
 8012e84:	602b      	str	r3, [r5, #0]
 8012e86:	bd38      	pop	{r3, r4, r5, pc}
 8012e88:	2000f484 	.word	0x2000f484

08012e8c <__swhatbuf_r>:
 8012e8c:	b570      	push	{r4, r5, r6, lr}
 8012e8e:	460e      	mov	r6, r1
 8012e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e94:	2900      	cmp	r1, #0
 8012e96:	b096      	sub	sp, #88	; 0x58
 8012e98:	4614      	mov	r4, r2
 8012e9a:	461d      	mov	r5, r3
 8012e9c:	da07      	bge.n	8012eae <__swhatbuf_r+0x22>
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	602b      	str	r3, [r5, #0]
 8012ea2:	89b3      	ldrh	r3, [r6, #12]
 8012ea4:	061a      	lsls	r2, r3, #24
 8012ea6:	d410      	bmi.n	8012eca <__swhatbuf_r+0x3e>
 8012ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012eac:	e00e      	b.n	8012ecc <__swhatbuf_r+0x40>
 8012eae:	466a      	mov	r2, sp
 8012eb0:	f000 f862 	bl	8012f78 <_fstat_r>
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	dbf2      	blt.n	8012e9e <__swhatbuf_r+0x12>
 8012eb8:	9a01      	ldr	r2, [sp, #4]
 8012eba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012ebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012ec2:	425a      	negs	r2, r3
 8012ec4:	415a      	adcs	r2, r3
 8012ec6:	602a      	str	r2, [r5, #0]
 8012ec8:	e7ee      	b.n	8012ea8 <__swhatbuf_r+0x1c>
 8012eca:	2340      	movs	r3, #64	; 0x40
 8012ecc:	2000      	movs	r0, #0
 8012ece:	6023      	str	r3, [r4, #0]
 8012ed0:	b016      	add	sp, #88	; 0x58
 8012ed2:	bd70      	pop	{r4, r5, r6, pc}

08012ed4 <__smakebuf_r>:
 8012ed4:	898b      	ldrh	r3, [r1, #12]
 8012ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012ed8:	079d      	lsls	r5, r3, #30
 8012eda:	4606      	mov	r6, r0
 8012edc:	460c      	mov	r4, r1
 8012ede:	d507      	bpl.n	8012ef0 <__smakebuf_r+0x1c>
 8012ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012ee4:	6023      	str	r3, [r4, #0]
 8012ee6:	6123      	str	r3, [r4, #16]
 8012ee8:	2301      	movs	r3, #1
 8012eea:	6163      	str	r3, [r4, #20]
 8012eec:	b002      	add	sp, #8
 8012eee:	bd70      	pop	{r4, r5, r6, pc}
 8012ef0:	ab01      	add	r3, sp, #4
 8012ef2:	466a      	mov	r2, sp
 8012ef4:	f7ff ffca 	bl	8012e8c <__swhatbuf_r>
 8012ef8:	9900      	ldr	r1, [sp, #0]
 8012efa:	4605      	mov	r5, r0
 8012efc:	4630      	mov	r0, r6
 8012efe:	f7ff f9c7 	bl	8012290 <_malloc_r>
 8012f02:	b948      	cbnz	r0, 8012f18 <__smakebuf_r+0x44>
 8012f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f08:	059a      	lsls	r2, r3, #22
 8012f0a:	d4ef      	bmi.n	8012eec <__smakebuf_r+0x18>
 8012f0c:	f023 0303 	bic.w	r3, r3, #3
 8012f10:	f043 0302 	orr.w	r3, r3, #2
 8012f14:	81a3      	strh	r3, [r4, #12]
 8012f16:	e7e3      	b.n	8012ee0 <__smakebuf_r+0xc>
 8012f18:	4b0d      	ldr	r3, [pc, #52]	; (8012f50 <__smakebuf_r+0x7c>)
 8012f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012f1c:	89a3      	ldrh	r3, [r4, #12]
 8012f1e:	6020      	str	r0, [r4, #0]
 8012f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f24:	81a3      	strh	r3, [r4, #12]
 8012f26:	9b00      	ldr	r3, [sp, #0]
 8012f28:	6163      	str	r3, [r4, #20]
 8012f2a:	9b01      	ldr	r3, [sp, #4]
 8012f2c:	6120      	str	r0, [r4, #16]
 8012f2e:	b15b      	cbz	r3, 8012f48 <__smakebuf_r+0x74>
 8012f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f34:	4630      	mov	r0, r6
 8012f36:	f000 f831 	bl	8012f9c <_isatty_r>
 8012f3a:	b128      	cbz	r0, 8012f48 <__smakebuf_r+0x74>
 8012f3c:	89a3      	ldrh	r3, [r4, #12]
 8012f3e:	f023 0303 	bic.w	r3, r3, #3
 8012f42:	f043 0301 	orr.w	r3, r3, #1
 8012f46:	81a3      	strh	r3, [r4, #12]
 8012f48:	89a3      	ldrh	r3, [r4, #12]
 8012f4a:	431d      	orrs	r5, r3
 8012f4c:	81a5      	strh	r5, [r4, #12]
 8012f4e:	e7cd      	b.n	8012eec <__smakebuf_r+0x18>
 8012f50:	080123dd 	.word	0x080123dd

08012f54 <_read_r>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	4c07      	ldr	r4, [pc, #28]	; (8012f74 <_read_r+0x20>)
 8012f58:	4605      	mov	r5, r0
 8012f5a:	4608      	mov	r0, r1
 8012f5c:	4611      	mov	r1, r2
 8012f5e:	2200      	movs	r2, #0
 8012f60:	6022      	str	r2, [r4, #0]
 8012f62:	461a      	mov	r2, r3
 8012f64:	f7ef fd16 	bl	8002994 <_read>
 8012f68:	1c43      	adds	r3, r0, #1
 8012f6a:	d102      	bne.n	8012f72 <_read_r+0x1e>
 8012f6c:	6823      	ldr	r3, [r4, #0]
 8012f6e:	b103      	cbz	r3, 8012f72 <_read_r+0x1e>
 8012f70:	602b      	str	r3, [r5, #0]
 8012f72:	bd38      	pop	{r3, r4, r5, pc}
 8012f74:	2000f484 	.word	0x2000f484

08012f78 <_fstat_r>:
 8012f78:	b538      	push	{r3, r4, r5, lr}
 8012f7a:	4c07      	ldr	r4, [pc, #28]	; (8012f98 <_fstat_r+0x20>)
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	4605      	mov	r5, r0
 8012f80:	4608      	mov	r0, r1
 8012f82:	4611      	mov	r1, r2
 8012f84:	6023      	str	r3, [r4, #0]
 8012f86:	f7ef fd4a 	bl	8002a1e <_fstat>
 8012f8a:	1c43      	adds	r3, r0, #1
 8012f8c:	d102      	bne.n	8012f94 <_fstat_r+0x1c>
 8012f8e:	6823      	ldr	r3, [r4, #0]
 8012f90:	b103      	cbz	r3, 8012f94 <_fstat_r+0x1c>
 8012f92:	602b      	str	r3, [r5, #0]
 8012f94:	bd38      	pop	{r3, r4, r5, pc}
 8012f96:	bf00      	nop
 8012f98:	2000f484 	.word	0x2000f484

08012f9c <_isatty_r>:
 8012f9c:	b538      	push	{r3, r4, r5, lr}
 8012f9e:	4c06      	ldr	r4, [pc, #24]	; (8012fb8 <_isatty_r+0x1c>)
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	4605      	mov	r5, r0
 8012fa4:	4608      	mov	r0, r1
 8012fa6:	6023      	str	r3, [r4, #0]
 8012fa8:	f7ef fd49 	bl	8002a3e <_isatty>
 8012fac:	1c43      	adds	r3, r0, #1
 8012fae:	d102      	bne.n	8012fb6 <_isatty_r+0x1a>
 8012fb0:	6823      	ldr	r3, [r4, #0]
 8012fb2:	b103      	cbz	r3, 8012fb6 <_isatty_r+0x1a>
 8012fb4:	602b      	str	r3, [r5, #0]
 8012fb6:	bd38      	pop	{r3, r4, r5, pc}
 8012fb8:	2000f484 	.word	0x2000f484

08012fbc <_init>:
 8012fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fbe:	bf00      	nop
 8012fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fc2:	bc08      	pop	{r3}
 8012fc4:	469e      	mov	lr, r3
 8012fc6:	4770      	bx	lr

08012fc8 <_fini>:
 8012fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fca:	bf00      	nop
 8012fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fce:	bc08      	pop	{r3}
 8012fd0:	469e      	mov	lr, r3
 8012fd2:	4770      	bx	lr
