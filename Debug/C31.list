
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c10  08010e64  08010e64  00020e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a74  08013a74  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  08013a74  08013a74  00023a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a7c  08013a7c  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a7c  08013a7c  00023a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a80  08013a80  00023a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08013a84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006538  200000c4  08013b48  000300c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200065fc  08013b48  000365fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c4af  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006d06  00000000  00000000  0006c5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002e90  00000000  00000000  000732b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002b80  00000000  00000000  00076140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000337b7  00000000  00000000  00078cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00029650  00000000  00000000  000ac477  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00127e12  00000000  00000000  000d5ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fd8d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cca8  00000000  00000000  001fd954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010e4c 	.word	0x08010e4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c8 	.word	0x200000c8
 800020c:	08010e4c 	.word	0x08010e4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/* USER CODE BEGIN 0 */
#define AUDIO_IN_SAMPLES 1600
uint16_t audio_in_buffer[AUDIO_IN_SAMPLES * 2 ]; // L+R interleaved

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f003 fe06 	bl	80041dc <BSP_LED_On>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <BSP_AUDIO_IN_TransferComplete_CallBack>:
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 80005d8:	2000      	movs	r0, #0
 80005da:	f003 fe17 	bl	800420c <BSP_LED_Off>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <BSP_AUDIO_IN_Error_CallBack>:
void BSP_AUDIO_IN_Error_CallBack(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 80005f6:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <main+0xf4>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	4a3a      	ldr	r2, [pc, #232]	; (80006e4 <main+0xf4>)
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f005 fa69 	bl	8005ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f87b 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f001 f84d 	bl	80016a8 <MX_GPIO_Init>
  MX_ADC3_Init();
 800060e:	f000 f935 	bl	800087c <MX_ADC3_Init>
  MX_CRC_Init();
 8000612:	f000 f985 	bl	8000920 <MX_CRC_Init>
  MX_DCMI_Init();
 8000616:	f000 f9a5 	bl	8000964 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800061a:	f000 f9d7 	bl	80009cc <MX_DMA2D_Init>
  //MX_ETH_Init();
  MX_FMC_Init();
 800061e:	f000 fff3 	bl	8001608 <MX_FMC_Init>
  MX_I2C1_Init();
 8000622:	f000 fa05 	bl	8000a30 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000626:	f000 fa43 	bl	8000ab0 <MX_I2C3_Init>
  MX_LTDC_Init();
 800062a:	f000 fa81 	bl	8000b30 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800062e:	f000 fb35 	bl	8000c9c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000632:	f000 fb5f 	bl	8000cf4 <MX_RTC_Init>
  MX_SAI2_Init();
 8000636:	f000 fc03 	bl	8000e40 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800063a:	f000 fca9 	bl	8000f90 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800063e:	f000 fcd7 	bl	8000ff0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000642:	f000 fd81 	bl	8001148 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000646:	f000 fdf5 	bl	8001234 <MX_TIM3_Init>
  MX_TIM5_Init();
 800064a:	f000 fe6b 	bl	8001324 <MX_TIM5_Init>
  MX_TIM8_Init();
 800064e:	f000 fee1 	bl	8001414 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000652:	f000 ff33 	bl	80014bc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000656:	f000 ff77 	bl	8001548 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800065a:	f000 ffa5 	bl	80015a8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800065e:	f004 fb27 	bl	8004cb0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000662:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000666:	2000      	movs	r0, #0
 8000668:	f004 fbba 	bl	8004de0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 800066c:	481e      	ldr	r0, [pc, #120]	; (80006e8 <main+0xf8>)
 800066e:	f004 fc79 	bl	8004f64 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000672:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000676:	f004 fc13 	bl	8004ea0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800067a:	481b      	ldr	r0, [pc, #108]	; (80006e8 <main+0xf8>)
 800067c:	f004 fc28 	bl	8004ed0 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 8000680:	f004 fb9a 	bl	8004db8 <BSP_LCD_GetYSize>
 8000684:	4603      	mov	r3, r0
 8000686:	085b      	lsrs	r3, r3, #1
 8000688:	b299      	uxth	r1, r3
 800068a:	2301      	movs	r3, #1
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <main+0xfc>)
 800068e:	2000      	movs	r0, #0
 8000690:	f004 fcd4 	bl	800503c <BSP_LCD_DisplayStringAt>


  LCD_LOG_Init();
 8000694:	f00f fa84 	bl	800fba0 <LCD_LOG_Init>
  LCD_LOG_SetHeader("Header");
 8000698:	4815      	ldr	r0, [pc, #84]	; (80006f0 <main+0x100>)
 800069a:	f00f facb 	bl	800fc34 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter("Footer");
 800069e:	4815      	ldr	r0, [pc, #84]	; (80006f4 <main+0x104>)
 80006a0:	f00f fb04 	bl	800fcac <LCD_LOG_SetFooter>
  printf("\n hello World !! hello hello hello world \n ");
 80006a4:	4814      	ldr	r0, [pc, #80]	; (80006f8 <main+0x108>)
 80006a6:	f00f fd95 	bl	80101d4 <iprintf>

  uint8_t ok;
  ok = BSP_AUDIO_IN_Init(4800, 16, 2);
 80006aa:	2202      	movs	r2, #2
 80006ac:	2110      	movs	r1, #16
 80006ae:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80006b2:	f004 f8d4 	bl	800485e <BSP_AUDIO_IN_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	77fb      	strb	r3, [r7, #31]
  if (ok != AUDIO_OK){
 80006ba:	7ffb      	ldrb	r3, [r7, #31]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <main+0xd4>
	  Error_Handler();
 80006c0:	f001 f9e8 	bl	8001a94 <Error_Handler>
  }
  ok = BSP_AUDIO_IN_Record(audio_in_buffer, AUDIO_IN_SAMPLES);
 80006c4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <main+0x10c>)
 80006ca:	f004 f947 	bl	800495c <BSP_AUDIO_IN_Record>
 80006ce:	4603      	mov	r3, r0
 80006d0:	77fb      	strb	r3, [r7, #31]
  if (ok != AUDIO_OK){
 80006d2:	7ffb      	ldrb	r3, [r7, #31]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <main+0xec>
  	  Error_Handler();
 80006d8:	f001 f9dc 	bl	8001a94 <Error_Handler>
    }
while(1){
	//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_1);
	HAL_Delay(250);
 80006dc:	20fa      	movs	r0, #250	; 0xfa
 80006de:	f005 fa29 	bl	8005b34 <HAL_Delay>
 80006e2:	e7fb      	b.n	80006dc <main+0xec>
 80006e4:	e0042000 	.word	0xe0042000
 80006e8:	ff0000ff 	.word	0xff0000ff
 80006ec:	08010e64 	.word	0x08010e64
 80006f0:	08010e74 	.word	0x08010e74
 80006f4:	08010e7c 	.word	0x08010e7c
 80006f8:	08010e84 	.word	0x08010e84
 80006fc:	20000a5c 	.word	0x20000a5c

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0b4      	sub	sp, #208	; 0xd0
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f00f fcaf 	bl	8010072 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2284      	movs	r2, #132	; 0x84
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f00f fca0 	bl	8010072 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000732:	f009 fc3f 	bl	8009fb4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b4e      	ldr	r3, [pc, #312]	; (8000870 <SystemClock_Config+0x170>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a4d      	ldr	r2, [pc, #308]	; (8000870 <SystemClock_Config+0x170>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <SystemClock_Config+0x170>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074e:	4b49      	ldr	r3, [pc, #292]	; (8000874 <SystemClock_Config+0x174>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a48      	ldr	r2, [pc, #288]	; (8000874 <SystemClock_Config+0x174>)
 8000754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	4b46      	ldr	r3, [pc, #280]	; (8000874 <SystemClock_Config+0x174>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000766:	2309      	movs	r3, #9
 8000768:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000780:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000784:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000788:	2319      	movs	r3, #25
 800078a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800078e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800079c:	2309      	movs	r3, #9
 800079e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 fd26 	bl	800a1f8 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007b2:	f001 f96f 	bl	8001a94 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b6:	f009 fc0d 	bl	8009fd4 <HAL_PWREx_EnableOverDrive>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c0:	f001 f968 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007ea:	2106      	movs	r1, #6
 80007ec:	4618      	mov	r0, r3
 80007ee:	f009 ffa7 	bl	800a740 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80007f8:	f001 f94c 	bl	8001a94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <SystemClock_Config+0x178>)
 80007fe:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000810:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000814:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000816:	2305      	movs	r3, #5
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800081e:	2303      	movs	r3, #3
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800082a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000836:	2300      	movs	r3, #0
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800083a:	2300      	movs	r3, #0
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800083e:	2300      	movs	r3, #0
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000842:	2300      	movs	r3, #0
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000846:	2300      	movs	r3, #0
 8000848:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800084a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800084e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	4618      	mov	r0, r3
 8000858:	f00a f976 	bl	800ab48 <HAL_RCCEx_PeriphCLKConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000862:	f001 f917 	bl	8001a94 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	37d0      	adds	r7, #208	; 0xd0
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000
 8000878:	01314868 	.word	0x01314868

0800087c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_ADC3_Init+0x98>)
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <MX_ADC3_Init+0x9c>)
 8000892:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_ADC3_Init+0x98>)
 8000896:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800089a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_ADC3_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_ADC3_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_ADC3_Init+0x98>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_ADC3_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_ADC3_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_ADC3_Init+0x98>)
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <MX_ADC3_Init+0xa0>)
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_ADC3_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_ADC3_Init+0x98>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_ADC3_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_ADC3_Init+0x98>)
 80008d8:	2201      	movs	r2, #1
 80008da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_ADC3_Init+0x98>)
 80008de:	f005 f94b 	bl	8005b78 <HAL_ADC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008e8:	f001 f8d4 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_ADC3_Init+0x98>)
 80008fe:	f005 f97f 	bl	8005c00 <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000908:	f001 f8c4 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200008e4 	.word	0x200008e4
 8000918:	40012200 	.word	0x40012200
 800091c:	0f000001 	.word	0x0f000001

08000920 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_CRC_Init+0x3c>)
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <MX_CRC_Init+0x40>)
 8000928:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_CRC_Init+0x3c>)
 800092c:	2200      	movs	r2, #0
 800092e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_CRC_Init+0x3c>)
 8000932:	2200      	movs	r2, #0
 8000934:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_CRC_Init+0x3c>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_CRC_Init+0x3c>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_CRC_Init+0x3c>)
 8000944:	2201      	movs	r2, #1
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_CRC_Init+0x3c>)
 800094a:	f005 fc7f 	bl	800624c <HAL_CRC_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000954:	f001 f89e 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000798 	.word	0x20000798
 8000960:	40023000 	.word	0x40023000

08000964 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_DCMI_Init+0x60>)
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <MX_DCMI_Init+0x64>)
 800096c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_DCMI_Init+0x60>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_DCMI_Init+0x60>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_DCMI_Init+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_DCMI_Init+0x60>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_DCMI_Init+0x60>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <MX_DCMI_Init+0x60>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_DCMI_Init+0x60>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_DCMI_Init+0x60>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_DCMI_Init+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_DCMI_Init+0x60>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_DCMI_Init+0x60>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_DCMI_Init+0x60>)
 80009b2:	f005 fd35 	bl	8006420 <HAL_DCMI_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80009bc:	f001 f86a 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000092c 	.word	0x2000092c
 80009c8:	50050000 	.word	0x50050000

080009cc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 80009d2:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <MX_DMA2D_Init+0x60>)
 80009d4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 8000a02:	f006 f95b 	bl	8006cbc <HAL_DMA2D_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a0c:	f001 f842 	bl	8001a94 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a10:	2101      	movs	r1, #1
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_DMA2D_Init+0x5c>)
 8000a14:	f006 fbc0 	bl	8007198 <HAL_DMA2D_ConfigLayer>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a1e:	f001 f839 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200023dc 	.word	0x200023dc
 8000a2c:	4002b000 	.word	0x4002b000

08000a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <MX_I2C1_Init+0x7c>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6a:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a6c:	f008 f97a 	bl	8008d64 <HAL_I2C_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a76:	f001 f80d 	bl	8001a94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a7e:	f008 fe89 	bl	8009794 <HAL_I2CEx_ConfigAnalogFilter>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f001 f804 	bl	8001a94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_I2C1_Init+0x74>)
 8000a90:	f008 fecb 	bl	800982a <HAL_I2CEx_ConfigDigitalFilter>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 fffb 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000074c 	.word	0x2000074c
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	00c0eaff 	.word	0x00c0eaff

08000ab0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_I2C3_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <MX_I2C3_Init+0x7c>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000aec:	f008 f93a 	bl	8008d64 <HAL_I2C_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000af6:	f000 ffcd 	bl	8001a94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000afe:	f008 fe49 	bl	8009794 <HAL_I2CEx_ConfigAnalogFilter>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b08:	f000 ffc4 	bl	8001a94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_I2C3_Init+0x74>)
 8000b10:	f008 fe8b 	bl	800982a <HAL_I2CEx_ConfigDigitalFilter>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 ffbb 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200005f0 	.word	0x200005f0
 8000b28:	40005c00 	.word	0x40005c00
 8000b2c:	00c0eaff 	.word	0x00c0eaff

08000b30 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09a      	sub	sp, #104	; 0x68
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b3a:	2234      	movs	r2, #52	; 0x34
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00f fa97 	bl	8010072 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b44:	463b      	mov	r3, r7
 8000b46:	2234      	movs	r2, #52	; 0x34
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f00f fa91 	bl	8010072 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b50:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b52:	4a51      	ldr	r2, [pc, #324]	; (8000c98 <MX_LTDC_Init+0x168>)
 8000b54:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b56:	4b4f      	ldr	r3, [pc, #316]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b5c:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b62:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b68:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b6e:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b70:	2228      	movs	r2, #40	; 0x28
 8000b72:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b74:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b76:	2209      	movs	r2, #9
 8000b78:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b7a:	4b46      	ldr	r3, [pc, #280]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b7c:	2235      	movs	r2, #53	; 0x35
 8000b7e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b80:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b82:	220b      	movs	r2, #11
 8000b84:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b86:	4b43      	ldr	r3, [pc, #268]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b88:	f240 2215 	movw	r2, #533	; 0x215
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b8e:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b90:	f240 121b 	movw	r2, #283	; 0x11b
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000b96:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000b98:	f240 2235 	movw	r2, #565	; 0x235
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b9e:	4b3d      	ldr	r3, [pc, #244]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000ba0:	f240 121d 	movw	r2, #285	; 0x11d
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bae:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bb6:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bbe:	4835      	ldr	r0, [pc, #212]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000bc0:	f008 fe80 	bl	80098c4 <HAL_LTDC_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000bca:	f000 ff63 	bl	8001a94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000bd2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000bdc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000be0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000be2:	2302      	movs	r3, #2
 8000be4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000be6:	23ff      	movs	r3, #255	; 0xff
 8000be8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bf2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bf8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000bfe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c02:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000c04:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c08:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	481b      	ldr	r0, [pc, #108]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000c26:	f008 ffdf 	bl	8009be8 <HAL_LTDC_ConfigLayer>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000c30:	f000 ff30 	bl	8001a94 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c50:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c52:	2305      	movs	r3, #5
 8000c54:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	2201      	movs	r2, #1
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <MX_LTDC_Init+0x164>)
 8000c7c:	f008 ffb4 	bl	8009be8 <HAL_LTDC_ConfigLayer>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000c86:	f000 ff05 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3768      	adds	r7, #104	; 0x68
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000083c 	.word	0x2000083c
 8000c98:	40016800 	.word	0x40016800

08000c9c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <MX_QUADSPI_Init+0x54>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000ca8:	22ff      	movs	r2, #255	; 0xff
 8000caa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_QUADSPI_Init+0x50>)
 8000cd8:	f009 f9cc 	bl	800a074 <HAL_QSPI_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 fed7 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20002518 	.word	0x20002518
 8000cf0:	a0001000 	.word	0xa0001000

08000cf4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b092      	sub	sp, #72	; 0x48
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	222c      	movs	r2, #44	; 0x2c
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00f f9ab 	bl	8010072 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <MX_RTC_Init+0x144>)
 8000d1e:	4a47      	ldr	r2, [pc, #284]	; (8000e3c <MX_RTC_Init+0x148>)
 8000d20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d22:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <MX_RTC_Init+0x144>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d28:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <MX_RTC_Init+0x144>)
 8000d2a:	227f      	movs	r2, #127	; 0x7f
 8000d2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d2e:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <MX_RTC_Init+0x144>)
 8000d30:	22ff      	movs	r2, #255	; 0xff
 8000d32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d34:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <MX_RTC_Init+0x144>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	; (8000e38 <MX_RTC_Init+0x144>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d40:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <MX_RTC_Init+0x144>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d46:	483c      	ldr	r0, [pc, #240]	; (8000e38 <MX_RTC_Init+0x144>)
 8000d48:	f00a fd2c 	bl	800b7a4 <HAL_RTC_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000d52:	f000 fe9f 	bl	8001a94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d74:	2201      	movs	r2, #1
 8000d76:	4619      	mov	r1, r3
 8000d78:	482f      	ldr	r0, [pc, #188]	; (8000e38 <MX_RTC_Init+0x144>)
 8000d7a:	f00a fd8f 	bl	800b89c <HAL_RTC_SetTime>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000d84:	f000 fe86 	bl	8001a94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da4:	2201      	movs	r2, #1
 8000da6:	4619      	mov	r1, r3
 8000da8:	4823      	ldr	r0, [pc, #140]	; (8000e38 <MX_RTC_Init+0x144>)
 8000daa:	f00a fe35 	bl	800ba18 <HAL_RTC_SetDate>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000db4:	f000 fe6e 	bl	8001a94 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	2201      	movs	r2, #1
 8000dec:	4619      	mov	r1, r3
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <MX_RTC_Init+0x144>)
 8000df0:	f00a feba 	bl	800bb68 <HAL_RTC_SetAlarm>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000dfa:	f000 fe4b 	bl	8001a94 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	2201      	movs	r2, #1
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <MX_RTC_Init+0x144>)
 8000e0c:	f00a feac 	bl	800bb68 <HAL_RTC_SetAlarm>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000e16:	f000 fe3d 	bl	8001a94 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_RTC_Init+0x144>)
 8000e20:	f00b f82c 	bl	800be7c <HAL_RTCEx_SetTimeStamp>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000e2a:	f000 fe33 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3748      	adds	r7, #72	; 0x48
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200009fc 	.word	0x200009fc
 8000e3c:	40002800 	.word	0x40002800

08000e40 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e44:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e46:	4a4e      	ldr	r2, [pc, #312]	; (8000f80 <MX_SAI2_Init+0x140>)
 8000e48:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e50:	4b4a      	ldr	r3, [pc, #296]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e56:	4b49      	ldr	r3, [pc, #292]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e58:	2240      	movs	r2, #64	; 0x40
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e5c:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e62:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e68:	4b44      	ldr	r3, [pc, #272]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e6e:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e74:	4b41      	ldr	r3, [pc, #260]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e7a:	4b40      	ldr	r3, [pc, #256]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e80:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e82:	4a40      	ldr	r2, [pc, #256]	; (8000f84 <MX_SAI2_Init+0x144>)
 8000e84:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e86:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e92:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e98:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000e9e:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000ea4:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000eaa:	4b34      	ldr	r3, [pc, #208]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000eb0:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000eb6:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000ed4:	4829      	ldr	r0, [pc, #164]	; (8000f7c <MX_SAI2_Init+0x13c>)
 8000ed6:	f00b f827 	bl	800bf28 <HAL_SAI_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000ee0:	f000 fdd8 	bl	8001a94 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000ee6:	4a29      	ldr	r2, [pc, #164]	; (8000f8c <MX_SAI2_Init+0x14c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000eea:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f34:	2208      	movs	r2, #8
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <MX_SAI2_Init+0x148>)
 8000f6a:	f00a ffdd 	bl	800bf28 <HAL_SAI_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000f74:	f000 fd8e 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200006c8 	.word	0x200006c8
 8000f80:	40015c04 	.word	0x40015c04
 8000f84:	0002ee00 	.word	0x0002ee00
 8000f88:	20000568 	.word	0x20000568
 8000f8c:	40015c24 	.word	0x40015c24

08000f90 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000f96:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f9a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fda:	f00b fb45 	bl	800c668 <HAL_SPDIFRX_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000fe4:	f000 fd56 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000067c 	.word	0x2000067c

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09a      	sub	sp, #104	; 0x68
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	222c      	movs	r2, #44	; 0x2c
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f00f f821 	bl	8010072 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <MX_TIM1_Init+0x150>)
 8001032:	4a44      	ldr	r2, [pc, #272]	; (8001144 <MX_TIM1_Init+0x154>)
 8001034:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001036:	4b42      	ldr	r3, [pc, #264]	; (8001140 <MX_TIM1_Init+0x150>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b40      	ldr	r3, [pc, #256]	; (8001140 <MX_TIM1_Init+0x150>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001042:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <MX_TIM1_Init+0x150>)
 8001044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001048:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <MX_TIM1_Init+0x150>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001050:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <MX_TIM1_Init+0x150>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <MX_TIM1_Init+0x150>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800105c:	4838      	ldr	r0, [pc, #224]	; (8001140 <MX_TIM1_Init+0x150>)
 800105e:	f00b fb5f 	bl	800c720 <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001068:	f000 fd14 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001072:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001076:	4619      	mov	r1, r3
 8001078:	4831      	ldr	r0, [pc, #196]	; (8001140 <MX_TIM1_Init+0x150>)
 800107a:	f00b fe09 	bl	800cc90 <HAL_TIM_ConfigClockSource>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001084:	f000 fd06 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001088:	482d      	ldr	r0, [pc, #180]	; (8001140 <MX_TIM1_Init+0x150>)
 800108a:	f00b fb9f 	bl	800c7cc <HAL_TIM_PWM_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001094:	f000 fcfe 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010a8:	4619      	mov	r1, r3
 80010aa:	4825      	ldr	r0, [pc, #148]	; (8001140 <MX_TIM1_Init+0x150>)
 80010ac:	f00c fa6a 	bl	800d584 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010b6:	f000 fced 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ba:	2360      	movs	r3, #96	; 0x60
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	4818      	ldr	r0, [pc, #96]	; (8001140 <MX_TIM1_Init+0x150>)
 80010e0:	f00b fcbe 	bl	800ca60 <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010ea:	f000 fcd3 	bl	8001a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001106:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM1_Init+0x150>)
 8001124:	f00c fabc 	bl	800d6a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800112e:	f000 fcb1 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM1_Init+0x150>)
 8001134:	f001 f932 	bl	800239c <HAL_TIM_MspPostInit>

}
 8001138:	bf00      	nop
 800113a:	3768      	adds	r7, #104	; 0x68
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000a1c 	.word	0x20000a1c
 8001144:	40010000 	.word	0x40010000

08001148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	; 0x38
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_TIM2_Init+0xe8>)
 800117c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001180:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_TIM2_Init+0xe8>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_TIM2_Init+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <MX_TIM2_Init+0xe8>)
 80011a4:	f00b fabc 	bl	800c720 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011ae:	f000 fc71 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011bc:	4619      	mov	r1, r3
 80011be:	481c      	ldr	r0, [pc, #112]	; (8001230 <MX_TIM2_Init+0xe8>)
 80011c0:	f00b fd66 	bl	800cc90 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011ca:	f000 fc63 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <MX_TIM2_Init+0xe8>)
 80011d0:	f00b fafc 	bl	800c7cc <HAL_TIM_PWM_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011da:	f000 fc5b 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <MX_TIM2_Init+0xe8>)
 80011ee:	f00c f9c9 	bl	800d584 <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011f8:	f000 fc4c 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fc:	2360      	movs	r3, #96	; 0x60
 80011fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001214:	f00b fc24 	bl	800ca60 <HAL_TIM_PWM_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800121e:	f000 fc39 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001224:	f001 f8ba 	bl	800239c <HAL_TIM_MspPostInit>

}
 8001228:	bf00      	nop
 800122a:	3738      	adds	r7, #56	; 0x38
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000241c 	.word	0x2000241c

08001234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <MX_TIM3_Init+0xe8>)
 8001268:	4a2d      	ldr	r2, [pc, #180]	; (8001320 <MX_TIM3_Init+0xec>)
 800126a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <MX_TIM3_Init+0xe8>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_TIM3_Init+0xe8>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <MX_TIM3_Init+0xe8>)
 800127a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <MX_TIM3_Init+0xe8>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <MX_TIM3_Init+0xe8>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800128c:	4823      	ldr	r0, [pc, #140]	; (800131c <MX_TIM3_Init+0xe8>)
 800128e:	f00b fa47 	bl	800c720 <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001298:	f000 fbfc 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a6:	4619      	mov	r1, r3
 80012a8:	481c      	ldr	r0, [pc, #112]	; (800131c <MX_TIM3_Init+0xe8>)
 80012aa:	f00b fcf1 	bl	800cc90 <HAL_TIM_ConfigClockSource>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012b4:	f000 fbee 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b8:	4818      	ldr	r0, [pc, #96]	; (800131c <MX_TIM3_Init+0xe8>)
 80012ba:	f00b fa87 	bl	800c7cc <HAL_TIM_PWM_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012c4:	f000 fbe6 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_TIM3_Init+0xe8>)
 80012d8:	f00c f954 	bl	800d584 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012e2:	f000 fbd7 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e6:	2360      	movs	r3, #96	; 0x60
 80012e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM3_Init+0xe8>)
 80012fe:	f00b fbaf 	bl	800ca60 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001308:	f000 fbc4 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM3_Init+0xe8>)
 800130e:	f001 f845 	bl	800239c <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3738      	adds	r7, #56	; 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200007fc 	.word	0x200007fc
 8001320:	40000400 	.word	0x40000400

08001324 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	; 0x38
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <MX_TIM5_Init+0xe8>)
 8001358:	4a2d      	ldr	r2, [pc, #180]	; (8001410 <MX_TIM5_Init+0xec>)
 800135a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_TIM5_Init+0xe8>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <MX_TIM5_Init+0xe8>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_TIM5_Init+0xe8>)
 800136a:	f04f 32ff 	mov.w	r2, #4294967295
 800136e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_TIM5_Init+0xe8>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_TIM5_Init+0xe8>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800137c:	4823      	ldr	r0, [pc, #140]	; (800140c <MX_TIM5_Init+0xe8>)
 800137e:	f00b f9cf 	bl	800c720 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001388:	f000 fb84 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	4619      	mov	r1, r3
 8001398:	481c      	ldr	r0, [pc, #112]	; (800140c <MX_TIM5_Init+0xe8>)
 800139a:	f00b fc79 	bl	800cc90 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013a4:	f000 fb76 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM5_Init+0xe8>)
 80013aa:	f00b fa0f 	bl	800c7cc <HAL_TIM_PWM_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013b4:	f000 fb6e 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_TIM5_Init+0xe8>)
 80013c8:	f00c f8dc 	bl	800d584 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013d2:	f000 fb5f 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	; 0x60
 80013d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	220c      	movs	r2, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM5_Init+0xe8>)
 80013ee:	f00b fb37 	bl	800ca60 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013f8:	f000 fb4c 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM5_Init+0xe8>)
 80013fe:	f000 ffcd 	bl	800239c <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3738      	adds	r7, #56	; 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200007bc 	.word	0x200007bc
 8001410:	40000c00 	.word	0x40000c00

08001414 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001434:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <MX_TIM8_Init+0xa4>)
 8001436:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800145e:	4815      	ldr	r0, [pc, #84]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001460:	f00b f95e 	bl	800c720 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800146a:	f000 fb13 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	480e      	ldr	r0, [pc, #56]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800147c:	f00b fc08 	bl	800cc90 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001486:	f000 fb05 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800149c:	f00c f872 	bl	800d584 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014a6:	f000 faf5 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000063c 	.word	0x2000063c
 80014b8:	40010400 	.word	0x40010400

080014bc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM12_Init+0x84>)
 80014d6:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <MX_TIM12_Init+0x88>)
 80014d8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_TIM12_Init+0x84>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_TIM12_Init+0x84>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_TIM12_Init+0x84>)
 80014e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_TIM12_Init+0x84>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_TIM12_Init+0x84>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80014fa:	4811      	ldr	r0, [pc, #68]	; (8001540 <MX_TIM12_Init+0x84>)
 80014fc:	f00b f966 	bl	800c7cc <HAL_TIM_PWM_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001506:	f000 fac5 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150a:	2360      	movs	r3, #96	; 0x60
 800150c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	4619      	mov	r1, r3
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_TIM12_Init+0x84>)
 8001522:	f00b fa9d 	bl	800ca60 <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800152c:	f000 fab2 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <MX_TIM12_Init+0x84>)
 8001532:	f000 ff33 	bl	800239c <HAL_TIM_MspPostInit>

}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000245c 	.word	0x2000245c
 8001544:	40001800 	.word	0x40001800

08001548 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <MX_USART1_UART_Init+0x5c>)
 8001550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800158c:	f00c f924 	bl	800d7d8 <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001596:	f000 fa7d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000097c 	.word	0x2000097c
 80015a4:	40011000 	.word	0x40011000

080015a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <MX_USART6_UART_Init+0x5c>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015ec:	f00c f8f4 	bl	800d7d8 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80015f6:	f000 fa4d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000235c 	.word	0x2000235c
 8001604:	40011400 	.word	0x40011400

08001608 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	615a      	str	r2, [r3, #20]
 800161e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_FMC_Init+0x98>)
 8001622:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <MX_FMC_Init+0x9c>)
 8001624:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_FMC_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_FMC_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_FMC_Init+0x98>)
 8001634:	2204      	movs	r2, #4
 8001636:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_FMC_Init+0x98>)
 800163a:	2210      	movs	r2, #16
 800163c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_FMC_Init+0x98>)
 8001640:	2240      	movs	r2, #64	; 0x40
 8001642:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_FMC_Init+0x98>)
 8001646:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800164a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_FMC_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_FMC_Init+0x98>)
 8001654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001658:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_FMC_Init+0x98>)
 800165c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_FMC_Init+0x98>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001668:	2302      	movs	r3, #2
 800166a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800166c:	2307      	movs	r3, #7
 800166e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001670:	2304      	movs	r3, #4
 8001672:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001674:	2307      	movs	r3, #7
 8001676:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001678:	2303      	movs	r3, #3
 800167a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001680:	2302      	movs	r3, #2
 8001682:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_FMC_Init+0x98>)
 800168a:	f00a ff6e 	bl	800c56a <HAL_SDRAM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001694:	f000 f9fe 	bl	8001a94 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000249c 	.word	0x2000249c
 80016a4:	a0000140 	.word	0xa0000140

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	; 0x40
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016be:	4baf      	ldr	r3, [pc, #700]	; (800197c <MX_GPIO_Init+0x2d4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4aae      	ldr	r2, [pc, #696]	; (800197c <MX_GPIO_Init+0x2d4>)
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4bac      	ldr	r3, [pc, #688]	; (800197c <MX_GPIO_Init+0x2d4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016d6:	4ba9      	ldr	r3, [pc, #676]	; (800197c <MX_GPIO_Init+0x2d4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4aa8      	ldr	r2, [pc, #672]	; (800197c <MX_GPIO_Init+0x2d4>)
 80016dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4ba6      	ldr	r3, [pc, #664]	; (800197c <MX_GPIO_Init+0x2d4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4ba3      	ldr	r3, [pc, #652]	; (800197c <MX_GPIO_Init+0x2d4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4aa2      	ldr	r2, [pc, #648]	; (800197c <MX_GPIO_Init+0x2d4>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4ba0      	ldr	r3, [pc, #640]	; (800197c <MX_GPIO_Init+0x2d4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	623b      	str	r3, [r7, #32]
 8001704:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	4b9d      	ldr	r3, [pc, #628]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a9c      	ldr	r2, [pc, #624]	; (800197c <MX_GPIO_Init+0x2d4>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b9a      	ldr	r3, [pc, #616]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b97      	ldr	r3, [pc, #604]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a96      	ldr	r2, [pc, #600]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b94      	ldr	r3, [pc, #592]	; (800197c <MX_GPIO_Init+0x2d4>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b91      	ldr	r3, [pc, #580]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a90      	ldr	r2, [pc, #576]	; (800197c <MX_GPIO_Init+0x2d4>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b8e      	ldr	r3, [pc, #568]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800174e:	4b8b      	ldr	r3, [pc, #556]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a8a      	ldr	r2, [pc, #552]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b88      	ldr	r3, [pc, #544]	; (800197c <MX_GPIO_Init+0x2d4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001766:	4b85      	ldr	r3, [pc, #532]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a84      	ldr	r2, [pc, #528]	; (800197c <MX_GPIO_Init+0x2d4>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b82      	ldr	r3, [pc, #520]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800177e:	4b7f      	ldr	r3, [pc, #508]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a7e      	ldr	r2, [pc, #504]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b7c      	ldr	r3, [pc, #496]	; (800197c <MX_GPIO_Init+0x2d4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001796:	4b79      	ldr	r3, [pc, #484]	; (800197c <MX_GPIO_Init+0x2d4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a78      	ldr	r2, [pc, #480]	; (800197c <MX_GPIO_Init+0x2d4>)
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b76      	ldr	r3, [pc, #472]	; (800197c <MX_GPIO_Init+0x2d4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ae:	4b73      	ldr	r3, [pc, #460]	; (800197c <MX_GPIO_Init+0x2d4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a72      	ldr	r2, [pc, #456]	; (800197c <MX_GPIO_Init+0x2d4>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b70      	ldr	r3, [pc, #448]	; (800197c <MX_GPIO_Init+0x2d4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2120      	movs	r1, #32
 80017ca:	486d      	ldr	r0, [pc, #436]	; (8001980 <MX_GPIO_Init+0x2d8>)
 80017cc:	f006 f8c6 	bl	800795c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	210e      	movs	r1, #14
 80017d4:	486b      	ldr	r0, [pc, #428]	; (8001984 <MX_GPIO_Init+0x2dc>)
 80017d6:	f006 f8c1 	bl	800795c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	2108      	movs	r1, #8
 80017de:	486a      	ldr	r0, [pc, #424]	; (8001988 <MX_GPIO_Init+0x2e0>)
 80017e0:	f006 f8bc 	bl	800795c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ea:	4866      	ldr	r0, [pc, #408]	; (8001984 <MX_GPIO_Init+0x2dc>)
 80017ec:	f006 f8b6 	bl	800795c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f6:	4865      	ldr	r0, [pc, #404]	; (800198c <MX_GPIO_Init+0x2e4>)
 80017f8:	f006 f8b0 	bl	800795c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	21c8      	movs	r1, #200	; 0xc8
 8001800:	4863      	ldr	r0, [pc, #396]	; (8001990 <MX_GPIO_Init+0x2e8>)
 8001802:	f006 f8ab 	bl	800795c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001806:	2308      	movs	r3, #8
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001816:	4619      	mov	r1, r3
 8001818:	485e      	ldr	r0, [pc, #376]	; (8001994 <MX_GPIO_Init+0x2ec>)
 800181a:	f005 fdeb 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800181e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001830:	230a      	movs	r3, #10
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001838:	4619      	mov	r1, r3
 800183a:	4857      	ldr	r0, [pc, #348]	; (8001998 <MX_GPIO_Init+0x2f0>)
 800183c:	f005 fdda 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001840:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001852:	230c      	movs	r3, #12
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	484f      	ldr	r0, [pc, #316]	; (800199c <MX_GPIO_Init+0x2f4>)
 800185e:	f005 fdc9 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	484a      	ldr	r0, [pc, #296]	; (80019a0 <MX_GPIO_Init+0x2f8>)
 8001878:	f005 fdbc 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800187c:	2340      	movs	r3, #64	; 0x40
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <MX_GPIO_Init+0x2fc>)
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188c:	4619      	mov	r1, r3
 800188e:	483c      	ldr	r0, [pc, #240]	; (8001980 <MX_GPIO_Init+0x2d8>)
 8001890:	f005 fdb0 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001894:	2320      	movs	r3, #32
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4835      	ldr	r0, [pc, #212]	; (8001980 <MX_GPIO_Init+0x2d8>)
 80018ac:	f005 fda2 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80018b0:	f241 030e 	movw	r3, #4110	; 0x100e
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c6:	4619      	mov	r1, r3
 80018c8:	482e      	ldr	r0, [pc, #184]	; (8001984 <MX_GPIO_Init+0x2dc>)
 80018ca:	f005 fd93 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	482e      	ldr	r0, [pc, #184]	; (800199c <MX_GPIO_Init+0x2f4>)
 80018e4:	f005 fd86 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80018e8:	2308      	movs	r3, #8
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	4822      	ldr	r0, [pc, #136]	; (8001988 <MX_GPIO_Init+0x2e0>)
 8001900:	f005 fd78 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001904:	2310      	movs	r3, #16
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001914:	4619      	mov	r1, r3
 8001916:	481a      	ldr	r0, [pc, #104]	; (8001980 <MX_GPIO_Init+0x2d8>)
 8001918:	f005 fd6c 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800191c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	4619      	mov	r1, r3
 8001930:	4816      	ldr	r0, [pc, #88]	; (800198c <MX_GPIO_Init+0x2e4>)
 8001932:	f005 fd5f 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194c:	4619      	mov	r1, r3
 800194e:	480f      	ldr	r0, [pc, #60]	; (800198c <MX_GPIO_Init+0x2e4>)
 8001950:	f005 fd50 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_GPIO_Init+0x2fc>)
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	4806      	ldr	r0, [pc, #24]	; (8001984 <MX_GPIO_Init+0x2dc>)
 800196a:	f005 fd43 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800196e:	2310      	movs	r3, #16
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	e016      	b.n	80019a8 <MX_GPIO_Init+0x300>
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40022000 	.word	0x40022000
 8001988:	40022800 	.word	0x40022800
 800198c:	40021c00 	.word	0x40021c00
 8001990:	40021800 	.word	0x40021800
 8001994:	40021000 	.word	0x40021000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40022400 	.word	0x40022400
 80019a4:	10120000 	.word	0x10120000
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019ae:	230a      	movs	r3, #10
 80019b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4828      	ldr	r0, [pc, #160]	; (8001a5c <MX_GPIO_Init+0x3b4>)
 80019ba:	f005 fd1b 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80019be:	23c8      	movs	r3, #200	; 0xc8
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d2:	4619      	mov	r1, r3
 80019d4:	4822      	ldr	r0, [pc, #136]	; (8001a60 <MX_GPIO_Init+0x3b8>)
 80019d6:	f005 fd0d 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80019da:	2305      	movs	r3, #5
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019ea:	230a      	movs	r3, #10
 80019ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f2:	4619      	mov	r1, r3
 80019f4:	481b      	ldr	r0, [pc, #108]	; (8001a64 <MX_GPIO_Init+0x3bc>)
 80019f6:	f005 fcfd 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019fa:	2304      	movs	r3, #4
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fe:	2300      	movs	r3, #0
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4814      	ldr	r0, [pc, #80]	; (8001a60 <MX_GPIO_Init+0x3b8>)
 8001a0e:	f005 fcf1 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001a12:	2328      	movs	r3, #40	; 0x28
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a22:	230a      	movs	r3, #10
 8001a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480e      	ldr	r0, [pc, #56]	; (8001a68 <MX_GPIO_Init+0x3c0>)
 8001a2e:	f005 fce1 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001a32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a44:	2305      	movs	r3, #5
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <MX_GPIO_Init+0x3c4>)
 8001a50:	f005 fcd0 	bl	80073f4 <HAL_GPIO_Init>

}
 8001a54:	bf00      	nop
 8001a56:	3740      	adds	r7, #64	; 0x40
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021c00 	.word	0x40021c00
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400

08001a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a82:	f004 f837 	bl	8005af4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40001000 	.word	0x40001000

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	210f      	movs	r1, #15
 8001ade:	f06f 0001 	mvn.w	r0, #1
 8001ae2:	f004 fb89 	bl	80061f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <HAL_ADC_MspInit+0xa4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d13c      	bne.n	8001b90 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <HAL_ADC_MspInit+0xa8>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <HAL_ADC_MspInit+0xa8>)
 8001b1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_ADC_MspInit+0xa8>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_ADC_MspInit+0xa8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_ADC_MspInit+0xa8>)
 8001b34:	f043 0320 	orr.w	r3, r3, #32
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_ADC_MspInit+0xa8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_ADC_MspInit+0xa8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <HAL_ADC_MspInit+0xa8>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_ADC_MspInit+0xa8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001b5e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b62:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b64:	2303      	movs	r3, #3
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	480b      	ldr	r0, [pc, #44]	; (8001ba0 <HAL_ADC_MspInit+0xac>)
 8001b74:	f005 fc3e 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <HAL_ADC_MspInit+0xb0>)
 8001b8c:	f005 fc32 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40012200 	.word	0x40012200
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40021400 	.word	0x40021400
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_CRC_MspInit+0x38>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_CRC_MspInit+0x3c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_CRC_MspInit+0x3c>)
 8001bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_CRC_MspInit+0x3c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023000 	.word	0x40023000
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08e      	sub	sp, #56	; 0x38
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a50      	ldr	r2, [pc, #320]	; (8001d48 <HAL_DCMI_MspInit+0x160>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	f040 809a 	bne.w	8001d40 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001c0c:	4b4f      	ldr	r3, [pc, #316]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6353      	str	r3, [r2, #52]	; 0x34
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c24:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	4a48      	ldr	r2, [pc, #288]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a42      	ldr	r2, [pc, #264]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_DCMI_MspInit+0x164>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001c9c:	2360      	movs	r3, #96	; 0x60
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cac:	230d      	movs	r3, #13
 8001cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4826      	ldr	r0, [pc, #152]	; (8001d50 <HAL_DCMI_MspInit+0x168>)
 8001cb8:	f005 fb9c 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ccc:	230d      	movs	r3, #13
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	481f      	ldr	r0, [pc, #124]	; (8001d54 <HAL_DCMI_MspInit+0x16c>)
 8001cd8:	f005 fb8c 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cee:	230d      	movs	r3, #13
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4817      	ldr	r0, [pc, #92]	; (8001d58 <HAL_DCMI_MspInit+0x170>)
 8001cfa:	f005 fb7b 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001cfe:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d10:	230d      	movs	r3, #13
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4810      	ldr	r0, [pc, #64]	; (8001d5c <HAL_DCMI_MspInit+0x174>)
 8001d1c:	f005 fb6a 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001d20:	2350      	movs	r3, #80	; 0x50
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d30:	230d      	movs	r3, #13
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4809      	ldr	r0, [pc, #36]	; (8001d60 <HAL_DCMI_MspInit+0x178>)
 8001d3c:	f005 fb5a 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001d40:	bf00      	nop
 8001d42:	3738      	adds	r7, #56	; 0x38
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	50050000 	.word	0x50050000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40021c00 	.word	0x40021c00
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_DMA2D_MspInit+0x44>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d113      	bne.n	8001d9e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_DMA2D_MspInit+0x48>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <HAL_DMA2D_MspInit+0x48>)
 8001d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_DMA2D_MspInit+0x48>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	205a      	movs	r0, #90	; 0x5a
 8001d94:	f004 fa30 	bl	80061f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d98:	205a      	movs	r0, #90	; 0x5a
 8001d9a:	f004 fa49 	bl	8006230 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	4002b000 	.word	0x4002b000
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2f      	ldr	r2, [pc, #188]	; (8001e8c <HAL_I2C_MspInit+0xdc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d129      	bne.n	8001e26 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a2e      	ldr	r2, [pc, #184]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df0:	2312      	movs	r3, #18
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4823      	ldr	r0, [pc, #140]	; (8001e94 <HAL_I2C_MspInit+0xe4>)
 8001e08:	f005 faf4 	bl	80073f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e24:	e02d      	b.n	8001e82 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <HAL_I2C_MspInit+0xe8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d128      	bne.n	8001e82 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001e48:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e4e:	2312      	movs	r3, #18
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <HAL_I2C_MspInit+0xec>)
 8001e66:	f005 fac5 	bl	80073f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001e70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_I2C_MspInit+0xe0>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
}
 8001e82:	bf00      	nop
 8001e84:	3730      	adds	r7, #48	; 0x30
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40005c00 	.word	0x40005c00
 8001e9c:	40021c00 	.word	0x40021c00

08001ea0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_I2C_MspDeInit+0x64>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d110      	bne.n	8001ed4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_I2C_MspDeInit+0x68>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <HAL_I2C_MspDeInit+0x68>)
 8001eb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8001ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec2:	4812      	ldr	r0, [pc, #72]	; (8001f0c <HAL_I2C_MspDeInit+0x6c>)
 8001ec4:	f005 fc40 	bl	8007748 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8001ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ecc:	480f      	ldr	r0, [pc, #60]	; (8001f0c <HAL_I2C_MspDeInit+0x6c>)
 8001ece:	f005 fc3b 	bl	8007748 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001ed2:	e013      	b.n	8001efc <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_I2C_MspDeInit+0x70>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10e      	bne.n	8001efc <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_I2C_MspDeInit+0x68>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_I2C_MspDeInit+0x68>)
 8001ee4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	4809      	ldr	r0, [pc, #36]	; (8001f14 <HAL_I2C_MspDeInit+0x74>)
 8001eee:	f005 fc2b 	bl	8007748 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef6:	4807      	ldr	r0, [pc, #28]	; (8001f14 <HAL_I2C_MspDeInit+0x74>)
 8001ef8:	f005 fc26 	bl	8007748 <HAL_GPIO_DeInit>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005400 	.word	0x40005400
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40005c00 	.word	0x40005c00
 8001f14:	40021c00 	.word	0x40021c00

08001f18 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08e      	sub	sp, #56	; 0x38
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a55      	ldr	r2, [pc, #340]	; (800208c <HAL_LTDC_MspInit+0x174>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	f040 80a3 	bne.w	8002082 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f3c:	4b54      	ldr	r3, [pc, #336]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	4a53      	ldr	r2, [pc, #332]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f46:	6453      	str	r3, [r2, #68]	; 0x44
 8001f48:	4b51      	ldr	r3, [pc, #324]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f50:	623b      	str	r3, [r7, #32]
 8001f52:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f54:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	4a4d      	ldr	r2, [pc, #308]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f5a:	f043 0310 	orr.w	r3, r3, #16
 8001f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f6c:	4b48      	ldr	r3, [pc, #288]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b45      	ldr	r3, [pc, #276]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f84:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4a41      	ldr	r2, [pc, #260]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f90:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	4a35      	ldr	r2, [pc, #212]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc0:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_LTDC_MspInit+0x178>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001fcc:	2310      	movs	r3, #16
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fdc:	230e      	movs	r3, #14
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	482b      	ldr	r0, [pc, #172]	; (8002094 <HAL_LTDC_MspInit+0x17c>)
 8001fe8:	f005 fa04 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001fec:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ffe:	230e      	movs	r3, #14
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002006:	4619      	mov	r1, r3
 8002008:	4823      	ldr	r0, [pc, #140]	; (8002098 <HAL_LTDC_MspInit+0x180>)
 800200a:	f005 f9f3 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800200e:	23f7      	movs	r3, #247	; 0xf7
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800201e:	230e      	movs	r3, #14
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	4619      	mov	r1, r3
 8002028:	481c      	ldr	r0, [pc, #112]	; (800209c <HAL_LTDC_MspInit+0x184>)
 800202a:	f005 f9e3 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800202e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002040:	2309      	movs	r3, #9
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002048:	4619      	mov	r1, r3
 800204a:	4815      	ldr	r0, [pc, #84]	; (80020a0 <HAL_LTDC_MspInit+0x188>)
 800204c:	f005 f9d2 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002050:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002062:	230e      	movs	r3, #14
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206a:	4619      	mov	r1, r3
 800206c:	480d      	ldr	r0, [pc, #52]	; (80020a4 <HAL_LTDC_MspInit+0x18c>)
 800206e:	f005 f9c1 	bl	80073f4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2058      	movs	r0, #88	; 0x58
 8002078:	f004 f8be 	bl	80061f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800207c:	2058      	movs	r0, #88	; 0x58
 800207e:	f004 f8d7 	bl	8006230 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3738      	adds	r7, #56	; 0x38
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40016800 	.word	0x40016800
 8002090:	40023800 	.word	0x40023800
 8002094:	40021000 	.word	0x40021000
 8002098:	40022400 	.word	0x40022400
 800209c:	40022800 	.word	0x40022800
 80020a0:	40021800 	.word	0x40021800
 80020a4:	40022000 	.word	0x40022000

080020a8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a3b      	ldr	r2, [pc, #236]	; (80021b4 <HAL_QSPI_MspInit+0x10c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d170      	bne.n	80021ac <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6393      	str	r3, [r2, #56]	; 0x38
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a34      	ldr	r2, [pc, #208]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002112:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a28      	ldr	r2, [pc, #160]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_QSPI_MspInit+0x110>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800212a:	2304      	movs	r3, #4
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800213a:	2309      	movs	r3, #9
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 031c 	add.w	r3, r7, #28
 8002142:	4619      	mov	r1, r3
 8002144:	481d      	ldr	r0, [pc, #116]	; (80021bc <HAL_QSPI_MspInit+0x114>)
 8002146:	f005 f955 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800214a:	2340      	movs	r3, #64	; 0x40
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800215a:	230a      	movs	r3, #10
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4816      	ldr	r0, [pc, #88]	; (80021c0 <HAL_QSPI_MspInit+0x118>)
 8002166:	f005 f945 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800216a:	2304      	movs	r3, #4
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800217a:	2309      	movs	r3, #9
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	480e      	ldr	r0, [pc, #56]	; (80021c0 <HAL_QSPI_MspInit+0x118>)
 8002186:	f005 f935 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800218a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800218e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800219c:	2309      	movs	r3, #9
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	4619      	mov	r1, r3
 80021a6:	4807      	ldr	r0, [pc, #28]	; (80021c4 <HAL_QSPI_MspInit+0x11c>)
 80021a8:	f005 f924 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80021ac:	bf00      	nop
 80021ae:	3730      	adds	r7, #48	; 0x30
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	a0001000 	.word	0xa0001000
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40020c00 	.word	0x40020c00

080021c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <HAL_RTC_MspInit+0x2c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d105      	bne.n	80021e6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_RTC_MspInit+0x30>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_RTC_MspInit+0x30>)
 80021e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40002800 	.word	0x40002800
 80021f8:	40023800 	.word	0x40023800

080021fc <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800221c:	d127      	bne.n	800226e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_SPDIFRX_MspInit+0x7c>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_SPDIFRX_MspInit+0x7c>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_SPDIFRX_MspInit+0x7c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_SPDIFRX_MspInit+0x7c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_SPDIFRX_MspInit+0x7c>)
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_SPDIFRX_MspInit+0x7c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800225e:	2308      	movs	r3, #8
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <HAL_SPDIFRX_MspInit+0x80>)
 800226a:	f005 f8c3 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40020c00 	.word	0x40020c00

08002280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <HAL_TIM_Base_MspInit+0xc8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10c      	bne.n	80022ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002292:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a2d      	ldr	r2, [pc, #180]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b2b      	ldr	r3, [pc, #172]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80022aa:	e046      	b.n	800233a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b4:	d10c      	bne.n	80022d0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022b6:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	69bb      	ldr	r3, [r7, #24]
}
 80022ce:	e034      	b.n	800233a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_TIM_Base_MspInit+0xd0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10c      	bne.n	80022f4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a1b      	ldr	r2, [pc, #108]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]
}
 80022f2:	e022      	b.n	800233a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <HAL_TIM_Base_MspInit+0xd4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10c      	bne.n	8002318 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
}
 8002316:	e010      	b.n	800233a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_TIM_Base_MspInit+0xd8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10b      	bne.n	800233a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_TIM_Base_MspInit+0xcc>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
}
 800233a:	bf00      	nop
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40010000 	.word	0x40010000
 800234c:	40023800 	.word	0x40023800
 8002350:	40000400 	.word	0x40000400
 8002354:	40000c00 	.word	0x40000c00
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_TIM_PWM_MspInit+0x38>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10b      	bne.n	8002386 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_TIM_PWM_MspInit+0x3c>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_TIM_PWM_MspInit+0x3c>)
 8002374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_TIM_PWM_MspInit+0x3c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40001800 	.word	0x40001800
 8002398:	40023800 	.word	0x40023800

0800239c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a56      	ldr	r2, [pc, #344]	; (8002514 <HAL_TIM_MspPostInit+0x178>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d11d      	bne.n	80023fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	4b56      	ldr	r3, [pc, #344]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a55      	ldr	r2, [pc, #340]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80023d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	4619      	mov	r1, r3
 80023f2:	484a      	ldr	r0, [pc, #296]	; (800251c <HAL_TIM_MspPostInit+0x180>)
 80023f4:	f004 fffe 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023f8:	e087      	b.n	800250a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d11d      	bne.n	8002440 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	4b44      	ldr	r3, [pc, #272]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a43      	ldr	r2, [pc, #268]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6313      	str	r3, [r2, #48]	; 0x30
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800241c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800242e:	2301      	movs	r3, #1
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4619      	mov	r1, r3
 8002438:	4838      	ldr	r0, [pc, #224]	; (800251c <HAL_TIM_MspPostInit+0x180>)
 800243a:	f004 ffdb 	bl	80073f4 <HAL_GPIO_Init>
}
 800243e:	e064      	b.n	800250a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a36      	ldr	r2, [pc, #216]	; (8002520 <HAL_TIM_MspPostInit+0x184>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d11c      	bne.n	8002484 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	4b33      	ldr	r3, [pc, #204]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a32      	ldr	r2, [pc, #200]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002462:	2310      	movs	r3, #16
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002472:	2302      	movs	r3, #2
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	4619      	mov	r1, r3
 800247c:	4829      	ldr	r0, [pc, #164]	; (8002524 <HAL_TIM_MspPostInit+0x188>)
 800247e:	f004 ffb9 	bl	80073f4 <HAL_GPIO_Init>
}
 8002482:	e042      	b.n	800250a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <HAL_TIM_MspPostInit+0x18c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d11c      	bne.n	80024c8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a21      	ldr	r2, [pc, #132]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024b6:	2302      	movs	r3, #2
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	481a      	ldr	r0, [pc, #104]	; (800252c <HAL_TIM_MspPostInit+0x190>)
 80024c2:	f004 ff97 	bl	80073f4 <HAL_GPIO_Init>
}
 80024c6:	e020      	b.n	800250a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a18      	ldr	r2, [pc, #96]	; (8002530 <HAL_TIM_MspPostInit+0x194>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d11b      	bne.n	800250a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 80024d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HAL_TIM_MspPostInit+0x17c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024fa:	2309      	movs	r3, #9
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	4619      	mov	r1, r3
 8002504:	480b      	ldr	r0, [pc, #44]	; (8002534 <HAL_TIM_MspPostInit+0x198>)
 8002506:	f004 ff75 	bl	80073f4 <HAL_GPIO_Init>
}
 800250a:	bf00      	nop
 800250c:	3730      	adds	r7, #48	; 0x30
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40010000 	.word	0x40010000
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000
 8002520:	40000400 	.word	0x40000400
 8002524:	40020400 	.word	0x40020400
 8002528:	40000c00 	.word	0x40000c00
 800252c:	40022000 	.word	0x40022000
 8002530:	40001800 	.word	0x40001800
 8002534:	40021c00 	.word	0x40021c00

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 031c 	add.w	r3, r7, #28
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a3c      	ldr	r2, [pc, #240]	; (8002648 <HAL_UART_MspInit+0x110>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d145      	bne.n	80025e6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800255a:	4b3c      	ldr	r3, [pc, #240]	; (800264c <HAL_UART_MspInit+0x114>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	4a3b      	ldr	r2, [pc, #236]	; (800264c <HAL_UART_MspInit+0x114>)
 8002560:	f043 0310 	orr.w	r3, r3, #16
 8002564:	6453      	str	r3, [r2, #68]	; 0x44
 8002566:	4b39      	ldr	r3, [pc, #228]	; (800264c <HAL_UART_MspInit+0x114>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002572:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_UART_MspInit+0x114>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a35      	ldr	r2, [pc, #212]	; (800264c <HAL_UART_MspInit+0x114>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b33      	ldr	r3, [pc, #204]	; (800264c <HAL_UART_MspInit+0x114>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <HAL_UART_MspInit+0x114>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a2f      	ldr	r2, [pc, #188]	; (800264c <HAL_UART_MspInit+0x114>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_UART_MspInit+0x114>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025b2:	2307      	movs	r3, #7
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4619      	mov	r1, r3
 80025bc:	4824      	ldr	r0, [pc, #144]	; (8002650 <HAL_UART_MspInit+0x118>)
 80025be:	f004 ff19 	bl	80073f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80025c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025d4:	2307      	movs	r3, #7
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	481d      	ldr	r0, [pc, #116]	; (8002654 <HAL_UART_MspInit+0x11c>)
 80025e0:	f004 ff08 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025e4:	e02c      	b.n	8002640 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <HAL_UART_MspInit+0x120>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d127      	bne.n	8002640 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_UART_MspInit+0x114>)
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	4a15      	ldr	r2, [pc, #84]	; (800264c <HAL_UART_MspInit+0x114>)
 80025f6:	f043 0320 	orr.w	r3, r3, #32
 80025fa:	6453      	str	r3, [r2, #68]	; 0x44
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_UART_MspInit+0x114>)
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_UART_MspInit+0x114>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_UART_MspInit+0x114>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_UART_MspInit+0x114>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002620:	23c0      	movs	r3, #192	; 0xc0
 8002622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002630:	2308      	movs	r3, #8
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	4619      	mov	r1, r3
 800263a:	4808      	ldr	r0, [pc, #32]	; (800265c <HAL_UART_MspInit+0x124>)
 800263c:	f004 feda 	bl	80073f4 <HAL_GPIO_Init>
}
 8002640:	bf00      	nop
 8002642:	3730      	adds	r7, #48	; 0x30
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40011000 	.word	0x40011000
 800264c:	40023800 	.word	0x40023800
 8002650:	40020400 	.word	0x40020400
 8002654:	40020000 	.word	0x40020000
 8002658:	40011400 	.word	0x40011400
 800265c:	40020800 	.word	0x40020800

08002660 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_FMC_MspInit+0x100>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d16d      	bne.n	8002758 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800267c:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_FMC_MspInit+0x100>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <HAL_FMC_MspInit+0x104>)
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	4a37      	ldr	r2, [pc, #220]	; (8002764 <HAL_FMC_MspInit+0x104>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6393      	str	r3, [r2, #56]	; 0x38
 800268e:	4b35      	ldr	r3, [pc, #212]	; (8002764 <HAL_FMC_MspInit+0x104>)
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800269a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800269e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026ac:	230c      	movs	r3, #12
 80026ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	482c      	ldr	r0, [pc, #176]	; (8002768 <HAL_FMC_MspInit+0x108>)
 80026b6:	f004 fe9d 	bl	80073f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80026ba:	f248 1333 	movw	r3, #33075	; 0x8133
 80026be:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026cc:	230c      	movs	r3, #12
 80026ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4825      	ldr	r0, [pc, #148]	; (800276c <HAL_FMC_MspInit+0x10c>)
 80026d6:	f004 fe8d 	bl	80073f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80026da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80026de:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026ec:	230c      	movs	r3, #12
 80026ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	481e      	ldr	r0, [pc, #120]	; (8002770 <HAL_FMC_MspInit+0x110>)
 80026f6:	f004 fe7d 	bl	80073f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80026fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80026fe:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800270c:	230c      	movs	r3, #12
 800270e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4817      	ldr	r0, [pc, #92]	; (8002774 <HAL_FMC_MspInit+0x114>)
 8002716:	f004 fe6d 	bl	80073f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800271a:	2328      	movs	r3, #40	; 0x28
 800271c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800272a:	230c      	movs	r3, #12
 800272c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4811      	ldr	r0, [pc, #68]	; (8002778 <HAL_FMC_MspInit+0x118>)
 8002734:	f004 fe5e 	bl	80073f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002738:	2308      	movs	r3, #8
 800273a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002748:	230c      	movs	r3, #12
 800274a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	4619      	mov	r1, r3
 8002750:	480a      	ldr	r0, [pc, #40]	; (800277c <HAL_FMC_MspInit+0x11c>)
 8002752:	f004 fe4f 	bl	80073f4 <HAL_GPIO_Init>
 8002756:	e000      	b.n	800275a <HAL_FMC_MspInit+0xfa>
    return;
 8002758:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200000e0 	.word	0x200000e0
 8002764:	40023800 	.word	0x40023800
 8002768:	40021000 	.word	0x40021000
 800276c:	40021800 	.word	0x40021800
 8002770:	40020c00 	.word	0x40020c00
 8002774:	40021400 	.word	0x40021400
 8002778:	40021c00 	.word	0x40021c00
 800277c:	40020800 	.word	0x40020800

08002780 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002788:	f7ff ff6a 	bl	8002660 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <HAL_SAI_MspInit+0xbc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d124      	bne.n	80027f0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_SAI_MspInit+0xc0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_SAI_MspInit+0xc4>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a29      	ldr	r2, [pc, #164]	; (8002858 <HAL_SAI_MspInit+0xc4>)
 80027b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_SAI_MspInit+0xc4>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_SAI_MspInit+0xc0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	4a21      	ldr	r2, [pc, #132]	; (8002854 <HAL_SAI_MspInit+0xc0>)
 80027ce:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80027d0:	23f0      	movs	r3, #240	; 0xf0
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80027e0:	230a      	movs	r3, #10
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	481c      	ldr	r0, [pc, #112]	; (800285c <HAL_SAI_MspInit+0xc8>)
 80027ec:	f004 fe02 	bl	80073f4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <HAL_SAI_MspInit+0xcc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d125      	bne.n	8002846 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_SAI_MspInit+0xc0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_SAI_MspInit+0xc4>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a14      	ldr	r2, [pc, #80]	; (8002858 <HAL_SAI_MspInit+0xc4>)
 8002808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_SAI_MspInit+0xc4>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_SAI_MspInit+0xc0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <HAL_SAI_MspInit+0xc0>)
 8002822:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002836:	230a      	movs	r3, #10
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	4808      	ldr	r0, [pc, #32]	; (8002864 <HAL_SAI_MspInit+0xd0>)
 8002842:	f004 fdd7 	bl	80073f4 <HAL_GPIO_Init>

    }
}
 8002846:	bf00      	nop
 8002848:	3728      	adds	r7, #40	; 0x28
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40015c04 	.word	0x40015c04
 8002854:	200000e4 	.word	0x200000e4
 8002858:	40023800 	.word	0x40023800
 800285c:	40022000 	.word	0x40022000
 8002860:	40015c24 	.word	0x40015c24
 8002864:	40021800 	.word	0x40021800

08002868 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a19      	ldr	r2, [pc, #100]	; (80028dc <HAL_SAI_MspDeInit+0x74>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d112      	bne.n	80028a0 <HAL_SAI_MspDeInit+0x38>
    {
    SAI2_client --;
 800287a:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_SAI_MspDeInit+0x78>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3b01      	subs	r3, #1
 8002880:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <HAL_SAI_MspDeInit+0x78>)
 8002882:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_SAI_MspDeInit+0x78>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 800288c:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_SAI_MspDeInit+0x7c>)
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_SAI_MspDeInit+0x7c>)
 8002892:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002896:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8002898:	21f0      	movs	r1, #240	; 0xf0
 800289a:	4813      	ldr	r0, [pc, #76]	; (80028e8 <HAL_SAI_MspDeInit+0x80>)
 800289c:	f004 ff54 	bl	8007748 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_SAI_MspDeInit+0x84>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d113      	bne.n	80028d2 <HAL_SAI_MspDeInit+0x6a>
    {
    SAI2_client --;
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_SAI_MspDeInit+0x78>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_SAI_MspDeInit+0x78>)
 80028b2:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_SAI_MspDeInit+0x78>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_SAI_MspDeInit+0x60>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_SAI_MspDeInit+0x7c>)
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <HAL_SAI_MspDeInit+0x7c>)
 80028c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028c6:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 80028c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028cc:	4808      	ldr	r0, [pc, #32]	; (80028f0 <HAL_SAI_MspDeInit+0x88>)
 80028ce:	f004 ff3b 	bl	8007748 <HAL_GPIO_DeInit>

    }
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40015c04 	.word	0x40015c04
 80028e0:	200000e4 	.word	0x200000e4
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40022000 	.word	0x40022000
 80028ec:	40015c24 	.word	0x40015c24
 80028f0:	40021800 	.word	0x40021800

080028f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002904:	2200      	movs	r2, #0
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	2036      	movs	r0, #54	; 0x36
 800290a:	f003 fc75 	bl	80061f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800290e:	2036      	movs	r0, #54	; 0x36
 8002910:	f003 fc8e 	bl	8006230 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002914:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_InitTick+0xa0>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <HAL_InitTick+0xa0>)
 800291a:	f043 0310 	orr.w	r3, r3, #16
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_InitTick+0xa0>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800292c:	f107 0210 	add.w	r2, r7, #16
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f008 f8d4 	bl	800aae4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800293c:	f008 f8aa 	bl	800aa94 <HAL_RCC_GetPCLK1Freq>
 8002940:	4603      	mov	r3, r0
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	4a13      	ldr	r2, [pc, #76]	; (8002998 <HAL_InitTick+0xa4>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0c9b      	lsrs	r3, r3, #18
 8002950:	3b01      	subs	r3, #1
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_InitTick+0xa8>)
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <HAL_InitTick+0xac>)
 8002958:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_InitTick+0xa8>)
 800295c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002960:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <HAL_InitTick+0xa8>)
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_InitTick+0xa8>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_InitTick+0xa8>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002974:	4809      	ldr	r0, [pc, #36]	; (800299c <HAL_InitTick+0xa8>)
 8002976:	f009 fed3 	bl	800c720 <HAL_TIM_Base_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d104      	bne.n	800298a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002980:	4806      	ldr	r0, [pc, #24]	; (800299c <HAL_InitTick+0xa8>)
 8002982:	f009 fef9 	bl	800c778 <HAL_TIM_Base_Start_IT>
 8002986:	4603      	mov	r3, r0
 8002988:	e000      	b.n	800298c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3730      	adds	r7, #48	; 0x30
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	431bde83 	.word	0x431bde83
 800299c:	20002564 	.word	0x20002564
 80029a0:	40001000 	.word	0x40001000

080029a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b6:	e7fe      	b.n	80029b6 <HardFault_Handler+0x4>

080029b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <MemManage_Handler+0x4>

080029be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c2:	e7fe      	b.n	80029c2 <BusFault_Handler+0x4>

080029c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <UsageFault_Handler+0x4>

080029ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <TIM6_DAC_IRQHandler+0x10>)
 80029de:	f009 ff20 	bl	800c822 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20002564 	.word	0x20002564

080029ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <OTG_FS_IRQHandler+0x10>)
 80029f2:	f004 ffcc 	bl	800798e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200026c8 	.word	0x200026c8

08002a00 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <LTDC_IRQHandler+0x10>)
 8002a06:	f007 f82d 	bl	8009a64 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000083c 	.word	0x2000083c

08002a14 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <DMA2D_IRQHandler+0x10>)
 8002a1a:	f004 faad 	bl	8006f78 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200023dc 	.word	0x200023dc

08002a28 <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
#include "stm32746g_discovery_audio.h"
extern SAI_HandleTypeDef haudio_in_sai;
 void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
 {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	 HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <DMA2_Stream7_IRQHandler+0x14>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 fedb 	bl	80067ec <HAL_DMA_IRQHandler>
 }
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200001c4 	.word	0x200001c4

08002a40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	e00a      	b.n	8002a68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a52:	f3af 8000 	nop.w
 8002a56:	4601      	mov	r1, r0
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	60ba      	str	r2, [r7, #8]
 8002a5e:	b2ca      	uxtb	r2, r1
 8002a60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	dbf0      	blt.n	8002a52 <_read+0x12>
	}

return len;
 8002a70:	687b      	ldr	r3, [r7, #4]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	e009      	b.n	8002aa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	60ba      	str	r2, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f00d f951 	bl	800fd3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	dbf1      	blt.n	8002a8c <_write+0x12>
	}
	return len;
 8002aa8:	687b      	ldr	r3, [r7, #4]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_close>:

int _close(int file)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
	return -1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ada:	605a      	str	r2, [r3, #4]
	return 0;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <_isatty>:

int _isatty(int file)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
	return 1;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <_sbrk+0x5c>)
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <_sbrk+0x60>)
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <_sbrk+0x64>)
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <_sbrk+0x68>)
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d207      	bcs.n	8002b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b4c:	f00d fa5c 	bl	8010008 <__errno>
 8002b50:	4602      	mov	r2, r0
 8002b52:	230c      	movs	r3, #12
 8002b54:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e009      	b.n	8002b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <_sbrk+0x64>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <_sbrk+0x64>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <_sbrk+0x64>)
 8002b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20050000 	.word	0x20050000
 8002b7c:	00000400 	.word	0x00000400
 8002b80:	200000e8 	.word	0x200000e8
 8002b84:	20006600 	.word	0x20006600

08002b88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <SystemInit+0x28>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <SystemInit+0x28>)
 8002b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <SystemInit+0x28>)
 8002b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ba2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bba:	e003      	b.n	8002bc4 <LoopCopyDataInit>

08002bbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bc2:	3104      	adds	r1, #4

08002bc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bc4:	480b      	ldr	r0, [pc, #44]	; (8002bf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002bc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bcc:	d3f6      	bcc.n	8002bbc <CopyDataInit>
  ldr  r2, =_sbss
 8002bce:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bd0:	e002      	b.n	8002bd8 <LoopFillZerobss>

08002bd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bd4:	f842 3b04 	str.w	r3, [r2], #4

08002bd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bdc:	d3f9      	bcc.n	8002bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bde:	f7ff ffd3 	bl	8002b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be2:	f00d fa17 	bl	8010014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be6:	f7fd fd03 	bl	80005f0 <main>
  bx  lr    
 8002bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002bf0:	08013a84 	.word	0x08013a84
  ldr  r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bf8:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 8002bfc:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 8002c00:	200065fc 	.word	0x200065fc

08002c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC_IRQHandler>
	...

08002c08 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	4603      	mov	r3, r0
 8002c12:	81fb      	strh	r3, [r7, #14]
 8002c14:	460b      	mov	r3, r1
 8002c16:	81bb      	strh	r3, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002c20:	89bb      	ldrh	r3, [r7, #12]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8002c26:	89bb      	ldrh	r3, [r7, #12]
 8002c28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c2c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002c32:	f001 fc59 	bl	80044e8 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8002c36:	89fb      	ldrh	r3, [r7, #14]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fab3 	bl	80041ac <CODEC_IO_Write>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002c50:	89fb      	ldrh	r3, [r7, #14]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	f640 0117 	movw	r1, #2071	; 0x817
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 faa6 	bl	80041ac <CODEC_IO_Write>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8002c6a:	89fb      	ldrh	r3, [r7, #14]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 fa99 	bl	80041ac <CODEC_IO_Write>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002c84:	89fb      	ldrh	r3, [r7, #14]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	226c      	movs	r2, #108	; 0x6c
 8002c8a:	2139      	movs	r1, #57	; 0x39
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 fa8d 	bl	80041ac <CODEC_IO_Write>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002c9c:	8afb      	ldrh	r3, [r7, #22]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8002ca2:	89fb      	ldrh	r3, [r7, #14]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2213      	movs	r2, #19
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 fa7e 	bl	80041ac <CODEC_IO_Write>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	e00b      	b.n	8002cd4 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002cbc:	89fb      	ldrh	r3, [r7, #14]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 fa71 	bl	80041ac <CODEC_IO_Write>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002cd4:	2032      	movs	r0, #50	; 0x32
 8002cd6:	f001 fc6f 	bl	80045b8 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002cda:	8b3b      	ldrh	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 815b 	beq.w	8002f98 <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 8002ce2:	4bbc      	ldr	r3, [pc, #752]	; (8002fd4 <wm8994_Init+0x3cc>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002ce8:	8b3b      	ldrh	r3, [r7, #24]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d047      	beq.n	8002d7e <wm8994_Init+0x176>
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	f000 8087 	beq.w	8002e02 <wm8994_Init+0x1fa>
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	f040 810c 	bne.w	8002f12 <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002d02:	2105      	movs	r1, #5
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fa51 	bl	80041ac <CODEC_IO_Write>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f240 6101 	movw	r1, #1537	; 0x601
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 fa44 	bl	80041ac <CODEC_IO_Write>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2200      	movs	r2, #0
 8002d34:	f240 6102 	movw	r1, #1538	; 0x602
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 fa37 	bl	80041ac <CODEC_IO_Write>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002d48:	89fb      	ldrh	r3, [r7, #14]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f240 6104 	movw	r1, #1540	; 0x604
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fa2a 	bl	80041ac <CODEC_IO_Write>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002d62:	89fb      	ldrh	r3, [r7, #14]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2202      	movs	r2, #2
 8002d68:	f240 6105 	movw	r1, #1541	; 0x605
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fa1d 	bl	80041ac <CODEC_IO_Write>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	61fb      	str	r3, [r7, #28]
      break;
 8002d7c:	e10f      	b.n	8002f9e <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f240 3203 	movw	r2, #771	; 0x303
 8002d86:	2105      	movs	r1, #5
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fa0f 	bl	80041ac <CODEC_IO_Write>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	4413      	add	r3, r2
 8002d96:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002d98:	89fb      	ldrh	r3, [r7, #14]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f240 6101 	movw	r1, #1537	; 0x601
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 fa02 	bl	80041ac <CODEC_IO_Write>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2201      	movs	r2, #1
 8002db8:	f240 6102 	movw	r1, #1538	; 0x602
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f9f5 	bl	80041ac <CODEC_IO_Write>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002dcc:	89fb      	ldrh	r3, [r7, #14]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f240 6104 	movw	r1, #1540	; 0x604
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 f9e8 	bl	80041ac <CODEC_IO_Write>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002de6:	89fb      	ldrh	r3, [r7, #14]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2200      	movs	r2, #0
 8002dec:	f240 6105 	movw	r1, #1541	; 0x605
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 f9db 	bl	80041ac <CODEC_IO_Write>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	61fb      	str	r3, [r7, #28]
      break;
 8002e00:	e0cd      	b.n	8002f9e <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002e02:	8afb      	ldrh	r3, [r7, #22]
 8002e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e08:	d141      	bne.n	8002e8e <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002e0a:	89fb      	ldrh	r3, [r7, #14]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002e12:	2105      	movs	r1, #5
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 f9c9 	bl	80041ac <CODEC_IO_Write>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	4413      	add	r3, r2
 8002e22:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8002e24:	89fb      	ldrh	r3, [r7, #14]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2203      	movs	r2, #3
 8002e2a:	f240 6101 	movw	r1, #1537	; 0x601
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 f9bc 	bl	80041ac <CODEC_IO_Write>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8002e3e:	89fb      	ldrh	r3, [r7, #14]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2203      	movs	r2, #3
 8002e44:	f240 6102 	movw	r1, #1538	; 0x602
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 f9af 	bl	80041ac <CODEC_IO_Write>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	461a      	mov	r2, r3
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8002e58:	89fb      	ldrh	r3, [r7, #14]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	f240 6104 	movw	r1, #1540	; 0x604
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 f9a2 	bl	80041ac <CODEC_IO_Write>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002e72:	89fb      	ldrh	r3, [r7, #14]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2203      	movs	r2, #3
 8002e78:	f240 6105 	movw	r1, #1541	; 0x605
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 f995 	bl	80041ac <CODEC_IO_Write>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002e8c:	e087      	b.n	8002f9e <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002e8e:	89fb      	ldrh	r3, [r7, #14]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002e96:	2105      	movs	r1, #5
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f001 f987 	bl	80041ac <CODEC_IO_Write>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002ea8:	89fb      	ldrh	r3, [r7, #14]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2201      	movs	r2, #1
 8002eae:	f240 6101 	movw	r1, #1537	; 0x601
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 f97a 	bl	80041ac <CODEC_IO_Write>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002ec2:	89fb      	ldrh	r3, [r7, #14]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f240 6102 	movw	r1, #1538	; 0x602
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 f96d 	bl	80041ac <CODEC_IO_Write>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4413      	add	r3, r2
 8002eda:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002edc:	89fb      	ldrh	r3, [r7, #14]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f240 6104 	movw	r1, #1540	; 0x604
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 f960 	bl	80041ac <CODEC_IO_Write>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2202      	movs	r2, #2
 8002efc:	f240 6105 	movw	r1, #1541	; 0x605
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 f953 	bl	80041ac <CODEC_IO_Write>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	61fb      	str	r3, [r7, #28]
      break;
 8002f10:	e045      	b.n	8002f9e <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002f12:	89fb      	ldrh	r3, [r7, #14]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f240 3203 	movw	r2, #771	; 0x303
 8002f1a:	2105      	movs	r1, #5
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 f945 	bl	80041ac <CODEC_IO_Write>
 8002f22:	4603      	mov	r3, r0
 8002f24:	461a      	mov	r2, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	4413      	add	r3, r2
 8002f2a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002f2c:	89fb      	ldrh	r3, [r7, #14]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2201      	movs	r2, #1
 8002f32:	f240 6101 	movw	r1, #1537	; 0x601
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 f938 	bl	80041ac <CODEC_IO_Write>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002f46:	89fb      	ldrh	r3, [r7, #14]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f240 6102 	movw	r1, #1538	; 0x602
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 f92b 	bl	80041ac <CODEC_IO_Write>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461a      	mov	r2, r3
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002f60:	89fb      	ldrh	r3, [r7, #14]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	f240 6104 	movw	r1, #1540	; 0x604
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 f91e 	bl	80041ac <CODEC_IO_Write>
 8002f70:	4603      	mov	r3, r0
 8002f72:	461a      	mov	r2, r3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f240 6105 	movw	r1, #1541	; 0x605
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 f911 	bl	80041ac <CODEC_IO_Write>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	61fb      	str	r3, [r7, #28]
      break;
 8002f94:	bf00      	nop
 8002f96:	e002      	b.n	8002f9e <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <wm8994_Init+0x3cc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002f9e:	8afb      	ldrh	r3, [r7, #22]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 81a7 	beq.w	80032f4 <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <wm8994_Init+0x3d0>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002fac:	8afb      	ldrh	r3, [r7, #22]
 8002fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb2:	d013      	beq.n	8002fdc <wm8994_Init+0x3d4>
 8002fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb8:	dc04      	bgt.n	8002fc4 <wm8994_Init+0x3bc>
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbe:	f000 80cf 	beq.w	8003160 <wm8994_Init+0x558>
 8002fc2:	e192      	b.n	80032ea <wm8994_Init+0x6e2>
 8002fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc8:	d057      	beq.n	800307a <wm8994_Init+0x472>
 8002fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fce:	f000 8116 	beq.w	80031fe <wm8994_Init+0x5f6>
 8002fd2:	e18a      	b.n	80032ea <wm8994_Init+0x6e2>
 8002fd4:	200000ec 	.word	0x200000ec
 8002fd8:	200000f0 	.word	0x200000f0
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002fdc:	89fb      	ldrh	r3, [r7, #14]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 f8e0 	bl	80041ac <CODEC_IO_Write>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	22db      	movs	r2, #219	; 0xdb
 8002ffc:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003000:	4618      	mov	r0, r3
 8003002:	f001 f8d3 	bl	80041ac <CODEC_IO_Write>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8003010:	89fb      	ldrh	r3, [r7, #14]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8003018:	2102      	movs	r1, #2
 800301a:	4618      	mov	r0, r3
 800301c:	f001 f8c6 	bl	80041ac <CODEC_IO_Write>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	4413      	add	r3, r2
 8003028:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2202      	movs	r2, #2
 8003030:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003034:	4618      	mov	r0, r3
 8003036:	f001 f8b9 	bl	80041ac <CODEC_IO_Write>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2202      	movs	r2, #2
 800304a:	f240 6109 	movw	r1, #1545	; 0x609
 800304e:	4618      	mov	r0, r3
 8003050:	f001 f8ac 	bl	80041ac <CODEC_IO_Write>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	220e      	movs	r2, #14
 8003064:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003068:	4618      	mov	r0, r3
 800306a:	f001 f89f 	bl	80041ac <CODEC_IO_Write>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]
      break;
 8003078:	e13f      	b.n	80032fa <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800307a:	89fb      	ldrh	r3, [r7, #14]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2211      	movs	r2, #17
 8003080:	2128      	movs	r1, #40	; 0x28
 8003082:	4618      	mov	r0, r3
 8003084:	f001 f892 	bl	80041ac <CODEC_IO_Write>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8003092:	89fb      	ldrh	r3, [r7, #14]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2235      	movs	r2, #53	; 0x35
 8003098:	2129      	movs	r1, #41	; 0x29
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f886 	bl	80041ac <CODEC_IO_Write>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80030aa:	89fb      	ldrh	r3, [r7, #14]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2235      	movs	r2, #53	; 0x35
 80030b0:	212a      	movs	r1, #42	; 0x2a
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f87a 	bl	80041ac <CODEC_IO_Write>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4413      	add	r3, r2
 80030c0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80030c2:	89fb      	ldrh	r3, [r7, #14]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f240 3203 	movw	r2, #771	; 0x303
 80030ca:	2104      	movs	r1, #4
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 f86d 	bl	80041ac <CODEC_IO_Write>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80030dc:	89fb      	ldrh	r3, [r7, #14]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	22db      	movs	r2, #219	; 0xdb
 80030e2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 f860 	bl	80041ac <CODEC_IO_Write>
 80030ec:	4603      	mov	r3, r0
 80030ee:	461a      	mov	r2, r3
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80030f6:	89fb      	ldrh	r3, [r7, #14]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f246 3250 	movw	r2, #25424	; 0x6350
 80030fe:	2102      	movs	r1, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f001 f853 	bl	80041ac <CODEC_IO_Write>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003110:	89fb      	ldrh	r3, [r7, #14]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2202      	movs	r2, #2
 8003116:	f240 6106 	movw	r1, #1542	; 0x606
 800311a:	4618      	mov	r0, r3
 800311c:	f001 f846 	bl	80041ac <CODEC_IO_Write>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800312a:	89fb      	ldrh	r3, [r7, #14]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2202      	movs	r2, #2
 8003130:	f240 6107 	movw	r1, #1543	; 0x607
 8003134:	4618      	mov	r0, r3
 8003136:	f001 f839 	bl	80041ac <CODEC_IO_Write>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003144:	89fb      	ldrh	r3, [r7, #14]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	220d      	movs	r2, #13
 800314a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800314e:	4618      	mov	r0, r3
 8003150:	f001 f82c 	bl	80041ac <CODEC_IO_Write>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	61fb      	str	r3, [r7, #28]
      break;
 800315e:	e0cc      	b.n	80032fa <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8003160:	89fb      	ldrh	r3, [r7, #14]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003168:	2104      	movs	r1, #4
 800316a:	4618      	mov	r0, r3
 800316c:	f001 f81e 	bl	80041ac <CODEC_IO_Write>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800317a:	89fb      	ldrh	r3, [r7, #14]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	22db      	movs	r2, #219	; 0xdb
 8003180:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003184:	4618      	mov	r0, r3
 8003186:	f001 f811 	bl	80041ac <CODEC_IO_Write>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003194:	89fb      	ldrh	r3, [r7, #14]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f246 3250 	movw	r2, #25424	; 0x6350
 800319c:	2102      	movs	r1, #2
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 f804 	bl	80041ac <CODEC_IO_Write>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	4413      	add	r3, r2
 80031ac:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80031ae:	89fb      	ldrh	r3, [r7, #14]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2202      	movs	r2, #2
 80031b4:	f240 6106 	movw	r1, #1542	; 0x606
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fff7 	bl	80041ac <CODEC_IO_Write>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2202      	movs	r2, #2
 80031ce:	f240 6107 	movw	r1, #1543	; 0x607
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 ffea 	bl	80041ac <CODEC_IO_Write>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80031e2:	89fb      	ldrh	r3, [r7, #14]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	220d      	movs	r2, #13
 80031e8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 ffdd 	bl	80041ac <CODEC_IO_Write>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	4413      	add	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]
      break; 
 80031fc:	e07d      	b.n	80032fa <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80031fe:	89fb      	ldrh	r3, [r7, #14]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f640 723c 	movw	r2, #3900	; 0xf3c
 8003206:	2104      	movs	r1, #4
 8003208:	4618      	mov	r0, r3
 800320a:	f000 ffcf 	bl	80041ac <CODEC_IO_Write>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003218:	89fb      	ldrh	r3, [r7, #14]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	22db      	movs	r2, #219	; 0xdb
 800321e:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003222:	4618      	mov	r0, r3
 8003224:	f000 ffc2 	bl	80041ac <CODEC_IO_Write>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003232:	89fb      	ldrh	r3, [r7, #14]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	22db      	movs	r2, #219	; 0xdb
 8003238:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800323c:	4618      	mov	r0, r3
 800323e:	f000 ffb5 	bl	80041ac <CODEC_IO_Write>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800324c:	89fb      	ldrh	r3, [r7, #14]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f000 ffa8 	bl	80041ac <CODEC_IO_Write>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003266:	89fb      	ldrh	r3, [r7, #14]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2202      	movs	r2, #2
 800326c:	f240 6106 	movw	r1, #1542	; 0x606
 8003270:	4618      	mov	r0, r3
 8003272:	f000 ff9b 	bl	80041ac <CODEC_IO_Write>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2202      	movs	r2, #2
 8003286:	f240 6107 	movw	r1, #1543	; 0x607
 800328a:	4618      	mov	r0, r3
 800328c:	f000 ff8e 	bl	80041ac <CODEC_IO_Write>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4413      	add	r3, r2
 8003298:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800329a:	89fb      	ldrh	r3, [r7, #14]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2202      	movs	r2, #2
 80032a0:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 ff81 	bl	80041ac <CODEC_IO_Write>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	4413      	add	r3, r2
 80032b2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80032b4:	89fb      	ldrh	r3, [r7, #14]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2202      	movs	r2, #2
 80032ba:	f240 6109 	movw	r1, #1545	; 0x609
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 ff74 	bl	80041ac <CODEC_IO_Write>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	4413      	add	r3, r2
 80032cc:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80032ce:	89fb      	ldrh	r3, [r7, #14]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	220d      	movs	r2, #13
 80032d4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 ff67 	bl	80041ac <CODEC_IO_Write>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	4413      	add	r3, r2
 80032e6:	61fb      	str	r3, [r7, #28]
      break;    
 80032e8:	e007      	b.n	80032fa <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
      break;
 80032f0:	bf00      	nop
 80032f2:	e002      	b.n	80032fa <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 80032f4:	4b95      	ldr	r3, [pc, #596]	; (800354c <wm8994_Init+0x944>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f245 6222 	movw	r2, #22050	; 0x5622
 8003300:	4293      	cmp	r3, r2
 8003302:	d076      	beq.n	80033f2 <wm8994_Init+0x7ea>
 8003304:	f245 6222 	movw	r2, #22050	; 0x5622
 8003308:	4293      	cmp	r3, r2
 800330a:	d80a      	bhi.n	8003322 <wm8994_Init+0x71a>
 800330c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003310:	4293      	cmp	r3, r2
 8003312:	d060      	beq.n	80033d6 <wm8994_Init+0x7ce>
 8003314:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003318:	d025      	beq.n	8003366 <wm8994_Init+0x75e>
 800331a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800331e:	d014      	beq.n	800334a <wm8994_Init+0x742>
 8003320:	e083      	b.n	800342a <wm8994_Init+0x822>
 8003322:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003326:	4293      	cmp	r3, r2
 8003328:	d071      	beq.n	800340e <wm8994_Init+0x806>
 800332a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800332e:	4293      	cmp	r3, r2
 8003330:	d803      	bhi.n	800333a <wm8994_Init+0x732>
 8003332:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003336:	d024      	beq.n	8003382 <wm8994_Init+0x77a>
 8003338:	e077      	b.n	800342a <wm8994_Init+0x822>
 800333a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800333e:	4293      	cmp	r3, r2
 8003340:	d02d      	beq.n	800339e <wm8994_Init+0x796>
 8003342:	4a83      	ldr	r2, [pc, #524]	; (8003550 <wm8994_Init+0x948>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d038      	beq.n	80033ba <wm8994_Init+0x7b2>
 8003348:	e06f      	b.n	800342a <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800334a:	89fb      	ldrh	r3, [r7, #14]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2203      	movs	r2, #3
 8003350:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003354:	4618      	mov	r0, r3
 8003356:	f000 ff29 	bl	80041ac <CODEC_IO_Write>
 800335a:	4603      	mov	r3, r0
 800335c:	461a      	mov	r2, r3
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	61fb      	str	r3, [r7, #28]
    break;
 8003364:	e06f      	b.n	8003446 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003366:	89fb      	ldrh	r3, [r7, #14]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2233      	movs	r2, #51	; 0x33
 800336c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003370:	4618      	mov	r0, r3
 8003372:	f000 ff1b 	bl	80041ac <CODEC_IO_Write>
 8003376:	4603      	mov	r3, r0
 8003378:	461a      	mov	r2, r3
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	4413      	add	r3, r2
 800337e:	61fb      	str	r3, [r7, #28]
    break;
 8003380:	e061      	b.n	8003446 <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003382:	89fb      	ldrh	r3, [r7, #14]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2263      	movs	r2, #99	; 0x63
 8003388:	f44f 7104 	mov.w	r1, #528	; 0x210
 800338c:	4618      	mov	r0, r3
 800338e:	f000 ff0d 	bl	80041ac <CODEC_IO_Write>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	61fb      	str	r3, [r7, #28]
    break;
 800339c:	e053      	b.n	8003446 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800339e:	89fb      	ldrh	r3, [r7, #14]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2283      	movs	r2, #131	; 0x83
 80033a4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 feff 	bl	80041ac <CODEC_IO_Write>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	61fb      	str	r3, [r7, #28]
    break;
 80033b8:	e045      	b.n	8003446 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80033ba:	89fb      	ldrh	r3, [r7, #14]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	22a3      	movs	r2, #163	; 0xa3
 80033c0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fef1 	bl	80041ac <CODEC_IO_Write>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	61fb      	str	r3, [r7, #28]
    break;
 80033d4:	e037      	b.n	8003446 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2213      	movs	r2, #19
 80033dc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fee3 	bl	80041ac <CODEC_IO_Write>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	61fb      	str	r3, [r7, #28]
    break;
 80033f0:	e029      	b.n	8003446 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80033f2:	89fb      	ldrh	r3, [r7, #14]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2243      	movs	r2, #67	; 0x43
 80033f8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fed5 	bl	80041ac <CODEC_IO_Write>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	61fb      	str	r3, [r7, #28]
    break;
 800340c:	e01b      	b.n	8003446 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800340e:	89fb      	ldrh	r3, [r7, #14]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2273      	movs	r2, #115	; 0x73
 8003414:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fec7 	bl	80041ac <CODEC_IO_Write>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	61fb      	str	r3, [r7, #28]
    break; 
 8003428:	e00d      	b.n	8003446 <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800342a:	89fb      	ldrh	r3, [r7, #14]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2283      	movs	r2, #131	; 0x83
 8003430:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003434:	4618      	mov	r0, r3
 8003436:	f000 feb9 	bl	80041ac <CODEC_IO_Write>
 800343a:	4603      	mov	r3, r0
 800343c:	461a      	mov	r2, r3
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	61fb      	str	r3, [r7, #28]
    break; 
 8003444:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003446:	8afb      	ldrh	r3, [r7, #22]
 8003448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344c:	d10e      	bne.n	800346c <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800344e:	89fb      	ldrh	r3, [r7, #14]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f244 0218 	movw	r2, #16408	; 0x4018
 8003456:	f44f 7140 	mov.w	r1, #768	; 0x300
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fea6 	bl	80041ac <CODEC_IO_Write>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e00d      	b.n	8003488 <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 800346c:	89fb      	ldrh	r3, [r7, #14]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f244 0210 	movw	r2, #16400	; 0x4010
 8003474:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fe97 	bl	80041ac <CODEC_IO_Write>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8003488:	89fb      	ldrh	r3, [r7, #14]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2200      	movs	r2, #0
 800348e:	f240 3102 	movw	r1, #770	; 0x302
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fe8a 	bl	80041ac <CODEC_IO_Write>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	4413      	add	r3, r2
 80034a0:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80034a2:	89fb      	ldrh	r3, [r7, #14]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	220a      	movs	r2, #10
 80034a8:	f44f 7102 	mov.w	r1, #520	; 0x208
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fe7d 	bl	80041ac <CODEC_IO_Write>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461a      	mov	r2, r3
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80034bc:	89fb      	ldrh	r3, [r7, #14]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2201      	movs	r2, #1
 80034c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fe70 	bl	80041ac <CODEC_IO_Write>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80034d6:	8b3b      	ldrh	r3, [r7, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 817b 	beq.w	80037d4 <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80034de:	8b3b      	ldrh	r3, [r7, #24]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d157      	bne.n	8003594 <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80034e4:	89fb      	ldrh	r3, [r7, #14]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ec:	212d      	movs	r1, #45	; 0x2d
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fe5c 	bl	80041ac <CODEC_IO_Write>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80034fe:	89fb      	ldrh	r3, [r7, #14]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003506:	212e      	movs	r1, #46	; 0x2e
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fe4f 	bl	80041ac <CODEC_IO_Write>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <wm8994_Init+0x94c>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01b      	beq.n	8003558 <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8003520:	89fb      	ldrh	r3, [r7, #14]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8003528:	f44f 7188 	mov.w	r1, #272	; 0x110
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fe3d 	bl	80041ac <CODEC_IO_Write>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <wm8994_Init+0x94c>)
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8003542:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003546:	f001 f837 	bl	80045b8 <AUDIO_IO_Delay>
 800354a:	e016      	b.n	800357a <wm8994_Init+0x972>
 800354c:	200000f0 	.word	0x200000f0
 8003550:	00017700 	.word	0x00017700
 8003554:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f248 1208 	movw	r2, #33032	; 0x8108
 8003560:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fe21 	bl	80041ac <CODEC_IO_Write>
 800356a:	4603      	mov	r3, r0
 800356c:	461a      	mov	r2, r3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8003574:	2032      	movs	r0, #50	; 0x32
 8003576:	f001 f81f 	bl	80045b8 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2200      	movs	r2, #0
 8003580:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fe11 	bl	80041ac <CODEC_IO_Write>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8003594:	89fb      	ldrh	r3, [r7, #14]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f44f 7240 	mov.w	r2, #768	; 0x300
 800359c:	2103      	movs	r1, #3
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fe04 	bl	80041ac <CODEC_IO_Write>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	4413      	add	r3, r2
 80035ac:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2200      	movs	r2, #0
 80035b4:	2122      	movs	r1, #34	; 0x22
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fdf8 	bl	80041ac <CODEC_IO_Write>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80035c6:	89fb      	ldrh	r3, [r7, #14]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2200      	movs	r2, #0
 80035cc:	2123      	movs	r1, #35	; 0x23
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fdec 	bl	80041ac <CODEC_IO_Write>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80035de:	89fb      	ldrh	r3, [r7, #14]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80035e6:	2136      	movs	r1, #54	; 0x36
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fddf 	bl	80041ac <CODEC_IO_Write>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f243 0203 	movw	r2, #12291	; 0x3003
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fdd2 	bl	80041ac <CODEC_IO_Write>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003612:	8afb      	ldrh	r3, [r7, #22]
 8003614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003618:	d10d      	bne.n	8003636 <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800361a:	89fb      	ldrh	r3, [r7, #14]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f240 2205 	movw	r2, #517	; 0x205
 8003622:	2151      	movs	r1, #81	; 0x51
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fdc1 	bl	80041ac <CODEC_IO_Write>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	e00b      	b.n	800364e <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8003636:	89fb      	ldrh	r3, [r7, #14]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2205      	movs	r2, #5
 800363c:	2151      	movs	r1, #81	; 0x51
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fdb4 	bl	80041ac <CODEC_IO_Write>
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800364e:	8b7b      	ldrh	r3, [r7, #26]
 8003650:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8003654:	f043 0303 	orr.w	r3, r3, #3
 8003658:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800365a:	89fb      	ldrh	r3, [r7, #14]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	8b7a      	ldrh	r2, [r7, #26]
 8003660:	2101      	movs	r1, #1
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fda2 	bl	80041ac <CODEC_IO_Write>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8003672:	89fb      	ldrh	r3, [r7, #14]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2222      	movs	r2, #34	; 0x22
 8003678:	2160      	movs	r1, #96	; 0x60
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd96 	bl	80041ac <CODEC_IO_Write>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800368a:	89fb      	ldrh	r3, [r7, #14]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8003692:	214c      	movs	r1, #76	; 0x4c
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fd89 	bl	80041ac <CODEC_IO_Write>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80036a4:	200f      	movs	r0, #15
 80036a6:	f000 ff87 	bl	80045b8 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80036aa:	89fb      	ldrh	r3, [r7, #14]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2201      	movs	r2, #1
 80036b0:	212d      	movs	r1, #45	; 0x2d
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fd7a 	bl	80041ac <CODEC_IO_Write>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80036c2:	89fb      	ldrh	r3, [r7, #14]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2201      	movs	r2, #1
 80036c8:	212e      	movs	r1, #46	; 0x2e
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fd6e 	bl	80041ac <CODEC_IO_Write>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80036da:	89fb      	ldrh	r3, [r7, #14]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f44f 724c 	mov.w	r2, #816	; 0x330
 80036e2:	2103      	movs	r1, #3
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fd61 	bl	80041ac <CODEC_IO_Write>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80036f4:	89fb      	ldrh	r3, [r7, #14]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2233      	movs	r2, #51	; 0x33
 80036fa:	2154      	movs	r1, #84	; 0x54
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fd55 	bl	80041ac <CODEC_IO_Write>
 8003702:	4603      	mov	r3, r0
 8003704:	461a      	mov	r2, r3
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 800370c:	f240 1001 	movw	r0, #257	; 0x101
 8003710:	f000 ff52 	bl	80045b8 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8003714:	89fb      	ldrh	r3, [r7, #14]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	22ee      	movs	r2, #238	; 0xee
 800371a:	2160      	movs	r1, #96	; 0x60
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fd45 	bl	80041ac <CODEC_IO_Write>
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 800372c:	89fb      	ldrh	r3, [r7, #14]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	22c0      	movs	r2, #192	; 0xc0
 8003732:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fd38 	bl	80041ac <CODEC_IO_Write>
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8003746:	89fb      	ldrh	r3, [r7, #14]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	22c0      	movs	r2, #192	; 0xc0
 800374c:	f240 6111 	movw	r1, #1553	; 0x611
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fd2b 	bl	80041ac <CODEC_IO_Write>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003760:	89fb      	ldrh	r3, [r7, #14]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2210      	movs	r2, #16
 8003766:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fd1e 	bl	80041ac <CODEC_IO_Write>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800377a:	89fb      	ldrh	r3, [r7, #14]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	22c0      	movs	r2, #192	; 0xc0
 8003780:	f240 6112 	movw	r1, #1554	; 0x612
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fd11 	bl	80041ac <CODEC_IO_Write>
 800378a:	4603      	mov	r3, r0
 800378c:	461a      	mov	r2, r3
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003794:	89fb      	ldrh	r3, [r7, #14]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	22c0      	movs	r2, #192	; 0xc0
 800379a:	f240 6113 	movw	r1, #1555	; 0x613
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fd04 	bl	80041ac <CODEC_IO_Write>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461a      	mov	r2, r3
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80037ae:	89fb      	ldrh	r3, [r7, #14]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2210      	movs	r2, #16
 80037b4:	f240 4122 	movw	r1, #1058	; 0x422
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fcf7 	bl	80041ac <CODEC_IO_Write>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80037c8:	7afa      	ldrb	r2, [r7, #11]
 80037ca:	89fb      	ldrh	r3, [r7, #14]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f984 	bl	8003adc <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80037d4:	8afb      	ldrh	r3, [r7, #22]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a6 	beq.w	8003928 <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80037dc:	8afb      	ldrh	r3, [r7, #22]
 80037de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e2:	d003      	beq.n	80037ec <wm8994_Init+0xbe4>
 80037e4:	8afb      	ldrh	r3, [r7, #22]
 80037e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ea:	d12b      	bne.n	8003844 <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80037ec:	8b7b      	ldrh	r3, [r7, #26]
 80037ee:	f043 0313 	orr.w	r3, r3, #19
 80037f2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80037f4:	89fb      	ldrh	r3, [r7, #14]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	8b7a      	ldrh	r2, [r7, #26]
 80037fa:	2101      	movs	r1, #1
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fcd5 	bl	80041ac <CODEC_IO_Write>
 8003802:	4603      	mov	r3, r0
 8003804:	461a      	mov	r2, r3
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800380c:	89fb      	ldrh	r3, [r7, #14]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2202      	movs	r2, #2
 8003812:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fcc8 	bl	80041ac <CODEC_IO_Write>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8003826:	89fb      	ldrh	r3, [r7, #14]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800382e:	f240 4111 	movw	r1, #1041	; 0x411
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fcba 	bl	80041ac <CODEC_IO_Write>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e06b      	b.n	800391c <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003844:	8afb      	ldrh	r3, [r7, #22]
 8003846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384a:	d139      	bne.n	80038c0 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800384c:	8b7b      	ldrh	r3, [r7, #26]
 800384e:	f043 0313 	orr.w	r3, r3, #19
 8003852:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	8b7a      	ldrh	r2, [r7, #26]
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fca5 	bl	80041ac <CODEC_IO_Write>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800386c:	89fb      	ldrh	r3, [r7, #14]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2202      	movs	r2, #2
 8003872:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fc98 	bl	80041ac <CODEC_IO_Write>
 800387c:	4603      	mov	r3, r0
 800387e:	461a      	mov	r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800388e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fc8a 	bl	80041ac <CODEC_IO_Write>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80038a2:	89fb      	ldrh	r3, [r7, #14]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80038aa:	f240 4111 	movw	r1, #1041	; 0x411
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fc7c 	bl	80041ac <CODEC_IO_Write>
 80038b4:	4603      	mov	r3, r0
 80038b6:	461a      	mov	r2, r3
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e02d      	b.n	800391c <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80038c0:	8afb      	ldrh	r3, [r7, #22]
 80038c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c6:	d003      	beq.n	80038d0 <wm8994_Init+0xcc8>
 80038c8:	8afb      	ldrh	r3, [r7, #22]
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ce:	d125      	bne.n	800391c <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80038d0:	89fb      	ldrh	r3, [r7, #14]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	220b      	movs	r2, #11
 80038d6:	2118      	movs	r1, #24
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fc67 	bl	80041ac <CODEC_IO_Write>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80038e8:	89fb      	ldrh	r3, [r7, #14]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	220b      	movs	r2, #11
 80038ee:	211a      	movs	r1, #26
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fc5b 	bl	80041ac <CODEC_IO_Write>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003900:	89fb      	ldrh	r3, [r7, #14]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003908:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fc4d 	bl	80041ac <CODEC_IO_Write>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800391c:	7afa      	ldrb	r2, [r7, #11]
 800391e:	89fb      	ldrh	r3, [r7, #14]
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f8da 	bl	8003adc <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8003928:	69fb      	ldr	r3, [r7, #28]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop

08003934 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003938:	f000 fde0 	bl	80044fc <AUDIO_IO_DeInit>
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}

08003940 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800394a:	f000 fdcd 	bl	80044e8 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fe03 	bl	8004560 <AUDIO_IO_Read>
 800395a:	4603      	mov	r3, r0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	80fb      	strh	r3, [r7, #6]
 8003970:	4613      	mov	r3, r2
 8003972:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f000 f9d1 	bl	8003d24 <wm8994_SetMute>
 8003982:	4602      	mov	r2, r0
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f9bc 	bl	8003d24 <wm8994_SetMute>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2201      	movs	r2, #1
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fbf5 	bl	80041ac <CODEC_IO_Write>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	4603      	mov	r3, r0
 80039de:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f99b 	bl	8003d24 <wm8994_SetMute>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80039f6:	68fb      	ldr	r3, [r7, #12]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8003a10:	4b31      	ldr	r3, [pc, #196]	; (8003ad8 <wm8994_Stop+0xd8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05a      	beq.n	8003ace <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f981 	bl	8003d24 <wm8994_SetMute>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d04e      	beq.n	8003ace <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a38:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fbb5 	bl	80041ac <CODEC_IO_Write>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a54:	f240 4122 	movw	r1, #1058	; 0x422
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fba7 	bl	80041ac <CODEC_IO_Write>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	212d      	movs	r1, #45	; 0x2d
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fb9b 	bl	80041ac <CODEC_IO_Write>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2200      	movs	r2, #0
 8003a86:	212e      	movs	r1, #46	; 0x2e
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fb8f 	bl	80041ac <CODEC_IO_Write>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2105      	movs	r1, #5
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fb83 	bl	80041ac <CODEC_IO_Write>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fb77 	bl	80041ac <CODEC_IO_Write>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <wm8994_Stop+0xd8>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8003ace:	68fb      	ldr	r3, [r7, #12]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200000ec 	.word	0x200000ec

08003adc <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	80fb      	strh	r3, [r7, #6]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003af0:	797b      	ldrb	r3, [r7, #5]
 8003af2:	2b64      	cmp	r3, #100	; 0x64
 8003af4:	d80b      	bhi.n	8003b0e <wm8994_SetVolume+0x32>
 8003af6:	797a      	ldrb	r2, [r7, #5]
 8003af8:	4613      	mov	r3, r2
 8003afa:	019b      	lsls	r3, r3, #6
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	4a86      	ldr	r2, [pc, #536]	; (8003d18 <wm8994_SetVolume+0x23c>)
 8003b00:	fb82 1203 	smull	r1, r2, r2, r3
 8003b04:	1152      	asrs	r2, r2, #5
 8003b06:	17db      	asrs	r3, r3, #31
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e000      	b.n	8003b10 <wm8994_SetVolume+0x34>
 8003b0e:	2364      	movs	r3, #100	; 0x64
 8003b10:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8003b12:	4b82      	ldr	r3, [pc, #520]	; (8003d1c <wm8994_SetVolume+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 809b 	beq.w	8003c52 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003b1c:	7afb      	ldrb	r3, [r7, #11]
 8003b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8003b20:	d93d      	bls.n	8003b9e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f8fc 	bl	8003d24 <wm8994_SetMute>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f240 127f 	movw	r2, #383	; 0x17f
 8003b3c:	211c      	movs	r1, #28
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fb34 	bl	80041ac <CODEC_IO_Write>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f240 127f 	movw	r2, #383	; 0x17f
 8003b56:	211d      	movs	r1, #29
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fb27 	bl	80041ac <CODEC_IO_Write>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	461a      	mov	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f240 127f 	movw	r2, #383	; 0x17f
 8003b70:	2126      	movs	r1, #38	; 0x26
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fb1a 	bl	80041ac <CODEC_IO_Write>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f240 127f 	movw	r2, #383	; 0x17f
 8003b8a:	2127      	movs	r1, #39	; 0x27
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fb0d 	bl	80041ac <CODEC_IO_Write>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e059      	b.n	8003c52 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003b9e:	797b      	ldrb	r3, [r7, #5]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f8bb 	bl	8003d24 <wm8994_SetMute>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e04c      	b.n	8003c52 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f8b1 	bl	8003d24 <wm8994_SetMute>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	b2d8      	uxtb	r0, r3
 8003bce:	7afb      	ldrb	r3, [r7, #11]
 8003bd0:	b21b      	sxth	r3, r3
 8003bd2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003bd6:	b21b      	sxth	r3, r3
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	211c      	movs	r1, #28
 8003bde:	f000 fae5 	bl	80041ac <CODEC_IO_Write>
 8003be2:	4603      	mov	r3, r0
 8003be4:	461a      	mov	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4413      	add	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	b2d8      	uxtb	r0, r3
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
 8003bf2:	b21b      	sxth	r3, r3
 8003bf4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003bf8:	b21b      	sxth	r3, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	211d      	movs	r1, #29
 8003c00:	f000 fad4 	bl	80041ac <CODEC_IO_Write>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	b2d8      	uxtb	r0, r3
 8003c12:	7afb      	ldrb	r3, [r7, #11]
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003c1a:	b21b      	sxth	r3, r3
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2126      	movs	r1, #38	; 0x26
 8003c22:	f000 fac3 	bl	80041ac <CODEC_IO_Write>
 8003c26:	4603      	mov	r3, r0
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	b2d8      	uxtb	r0, r3
 8003c34:	7afb      	ldrb	r3, [r7, #11]
 8003c36:	b21b      	sxth	r3, r3
 8003c38:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	2127      	movs	r1, #39	; 0x27
 8003c44:	f000 fab2 	bl	80041ac <CODEC_IO_Write>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8003c52:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <wm8994_SetVolume+0x244>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d059      	beq.n	8003d0e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003c5a:	797b      	ldrb	r3, [r7, #5]
 8003c5c:	2b63      	cmp	r3, #99	; 0x63
 8003c5e:	d80c      	bhi.n	8003c7a <wm8994_SetVolume+0x19e>
 8003c60:	797a      	ldrb	r2, [r7, #5]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4a2b      	ldr	r2, [pc, #172]	; (8003d18 <wm8994_SetVolume+0x23c>)
 8003c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8003c70:	1152      	asrs	r2, r2, #5
 8003c72:	17db      	asrs	r3, r3, #31
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e000      	b.n	8003c7c <wm8994_SetVolume+0x1a0>
 8003c7a:	23ef      	movs	r3, #239	; 0xef
 8003c7c:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	b2d8      	uxtb	r0, r3
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	b21b      	sxth	r3, r3
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	b21b      	sxth	r3, r3
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c94:	f000 fa8a 	bl	80041ac <CODEC_IO_Write>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	b2d8      	uxtb	r0, r3
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	b21b      	sxth	r3, r3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f240 4101 	movw	r1, #1025	; 0x401
 8003cb8:	f000 fa78 	bl	80041ac <CODEC_IO_Write>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	b2d8      	uxtb	r0, r3
 8003cca:	7afb      	ldrb	r3, [r7, #11]
 8003ccc:	b21b      	sxth	r3, r3
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	b21b      	sxth	r3, r3
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f240 4104 	movw	r1, #1028	; 0x404
 8003cdc:	f000 fa66 	bl	80041ac <CODEC_IO_Write>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	b2d8      	uxtb	r0, r3
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf6:	b21b      	sxth	r3, r3
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f240 4105 	movw	r1, #1029	; 0x405
 8003d00:	f000 fa54 	bl	80041ac <CODEC_IO_Write>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	51eb851f 	.word	0x51eb851f
 8003d1c:	200000ec 	.word	0x200000ec
 8003d20:	200000f0 	.word	0x200000f0

08003d24 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003d34:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <wm8994_SetMute+0x98>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d039      	beq.n	8003db0 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d11c      	bne.n	8003d7c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fa2c 	bl	80041ac <CODEC_IO_Write>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d66:	f240 4122 	movw	r1, #1058	; 0x422
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fa1e 	bl	80041ac <CODEC_IO_Write>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	e019      	b.n	8003db0 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2210      	movs	r2, #16
 8003d82:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fa10 	bl	80041ac <CODEC_IO_Write>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2210      	movs	r2, #16
 8003d9c:	f240 4122 	movw	r1, #1058	; 0x422
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fa03 	bl	80041ac <CODEC_IO_Write>
 8003da6:	4603      	mov	r3, r0
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003db0:	68fb      	ldr	r3, [r7, #12]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200000ec 	.word	0x200000ec

08003dc0 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	460a      	mov	r2, r1
 8003dca:	80fb      	strh	r3, [r7, #6]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003dd4:	797b      	ldrb	r3, [r7, #5]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d047      	beq.n	8003e6a <wm8994_SetOutputMode+0xaa>
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	f000 8087 	beq.w	8003eee <wm8994_SetOutputMode+0x12e>
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 80c6 	bne.w	8003f72 <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003dee:	2105      	movs	r1, #5
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f9db 	bl	80041ac <CODEC_IO_Write>
 8003df6:	4603      	mov	r3, r0
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2200      	movs	r2, #0
 8003e06:	f240 6101 	movw	r1, #1537	; 0x601
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f9ce 	bl	80041ac <CODEC_IO_Write>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f240 6102 	movw	r1, #1538	; 0x602
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 f9c1 	bl	80041ac <CODEC_IO_Write>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f240 6104 	movw	r1, #1540	; 0x604
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f9b4 	bl	80041ac <CODEC_IO_Write>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2202      	movs	r2, #2
 8003e54:	f240 6105 	movw	r1, #1541	; 0x605
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f9a7 	bl	80041ac <CODEC_IO_Write>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	461a      	mov	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
    break;
 8003e68:	e0c5      	b.n	8003ff6 <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f240 3203 	movw	r2, #771	; 0x303
 8003e72:	2105      	movs	r1, #5
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 f999 	bl	80041ac <CODEC_IO_Write>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f240 6101 	movw	r1, #1537	; 0x601
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f98c 	bl	80041ac <CODEC_IO_Write>
 8003e94:	4603      	mov	r3, r0
 8003e96:	461a      	mov	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f240 6102 	movw	r1, #1538	; 0x602
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f97f 	bl	80041ac <CODEC_IO_Write>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f240 6104 	movw	r1, #1540	; 0x604
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f972 	bl	80041ac <CODEC_IO_Write>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f240 6105 	movw	r1, #1541	; 0x605
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f965 	bl	80041ac <CODEC_IO_Write>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
    break;
 8003eec:	e083      	b.n	8003ff6 <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003ef6:	2105      	movs	r1, #5
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f957 	bl	80041ac <CODEC_IO_Write>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f240 6101 	movw	r1, #1537	; 0x601
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f94a 	bl	80041ac <CODEC_IO_Write>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2201      	movs	r2, #1
 8003f28:	f240 6102 	movw	r1, #1538	; 0x602
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f93d 	bl	80041ac <CODEC_IO_Write>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2202      	movs	r2, #2
 8003f42:	f240 6104 	movw	r1, #1540	; 0x604
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f930 	bl	80041ac <CODEC_IO_Write>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f240 6105 	movw	r1, #1541	; 0x605
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f923 	bl	80041ac <CODEC_IO_Write>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
    break;
 8003f70:	e041      	b.n	8003ff6 <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f240 3203 	movw	r2, #771	; 0x303
 8003f7a:	2105      	movs	r1, #5
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f915 	bl	80041ac <CODEC_IO_Write>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2201      	movs	r2, #1
 8003f92:	f240 6101 	movw	r1, #1537	; 0x601
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f908 	bl	80041ac <CODEC_IO_Write>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2201      	movs	r2, #1
 8003fac:	f240 6102 	movw	r1, #1538	; 0x602
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f8fb 	bl	80041ac <CODEC_IO_Write>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f240 6104 	movw	r1, #1540	; 0x604
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f8ee 	bl	80041ac <CODEC_IO_Write>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f240 6105 	movw	r1, #1541	; 0x605
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 f8e1 	bl	80041ac <CODEC_IO_Write>
 8003fea:	4603      	mov	r3, r0
 8003fec:	461a      	mov	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
    break;    
 8003ff4:	bf00      	nop
  }  
  return counter;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	6039      	str	r1, [r7, #0]
 800400a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f245 6222 	movw	r2, #22050	; 0x5622
 8004016:	4293      	cmp	r3, r2
 8004018:	d076      	beq.n	8004108 <wm8994_SetFrequency+0x108>
 800401a:	f245 6222 	movw	r2, #22050	; 0x5622
 800401e:	4293      	cmp	r3, r2
 8004020:	d80a      	bhi.n	8004038 <wm8994_SetFrequency+0x38>
 8004022:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004026:	4293      	cmp	r3, r2
 8004028:	d060      	beq.n	80040ec <wm8994_SetFrequency+0xec>
 800402a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800402e:	d025      	beq.n	800407c <wm8994_SetFrequency+0x7c>
 8004030:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004034:	d014      	beq.n	8004060 <wm8994_SetFrequency+0x60>
 8004036:	e083      	b.n	8004140 <wm8994_SetFrequency+0x140>
 8004038:	f64a 4244 	movw	r2, #44100	; 0xac44
 800403c:	4293      	cmp	r3, r2
 800403e:	d071      	beq.n	8004124 <wm8994_SetFrequency+0x124>
 8004040:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004044:	4293      	cmp	r3, r2
 8004046:	d803      	bhi.n	8004050 <wm8994_SetFrequency+0x50>
 8004048:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800404c:	d024      	beq.n	8004098 <wm8994_SetFrequency+0x98>
 800404e:	e077      	b.n	8004140 <wm8994_SetFrequency+0x140>
 8004050:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004054:	4293      	cmp	r3, r2
 8004056:	d02d      	beq.n	80040b4 <wm8994_SetFrequency+0xb4>
 8004058:	4a43      	ldr	r2, [pc, #268]	; (8004168 <wm8994_SetFrequency+0x168>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d038      	beq.n	80040d0 <wm8994_SetFrequency+0xd0>
 800405e:	e06f      	b.n	8004140 <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2203      	movs	r2, #3
 8004066:	f44f 7104 	mov.w	r1, #528	; 0x210
 800406a:	4618      	mov	r0, r3
 800406c:	f000 f89e 	bl	80041ac <CODEC_IO_Write>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    break;
 800407a:	e06f      	b.n	800415c <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2233      	movs	r2, #51	; 0x33
 8004082:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f890 	bl	80041ac <CODEC_IO_Write>
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
    break;
 8004096:	e061      	b.n	800415c <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2263      	movs	r2, #99	; 0x63
 800409e:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f882 	bl	80041ac <CODEC_IO_Write>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
    break;
 80040b2:	e053      	b.n	800415c <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2283      	movs	r2, #131	; 0x83
 80040ba:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f874 	bl	80041ac <CODEC_IO_Write>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
    break;
 80040ce:	e045      	b.n	800415c <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	22a3      	movs	r2, #163	; 0xa3
 80040d6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f866 	bl	80041ac <CODEC_IO_Write>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
    break;
 80040ea:	e037      	b.n	800415c <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2213      	movs	r2, #19
 80040f2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f858 	bl	80041ac <CODEC_IO_Write>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
    break;
 8004106:	e029      	b.n	800415c <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2243      	movs	r2, #67	; 0x43
 800410e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f84a 	bl	80041ac <CODEC_IO_Write>
 8004118:	4603      	mov	r3, r0
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
    break;
 8004122:	e01b      	b.n	800415c <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2273      	movs	r2, #115	; 0x73
 800412a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f83c 	bl	80041ac <CODEC_IO_Write>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
    break; 
 800413e:	e00d      	b.n	800415c <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2283      	movs	r2, #131	; 0x83
 8004146:	f44f 7104 	mov.w	r1, #528	; 0x210
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f82e 	bl	80041ac <CODEC_IO_Write>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    break; 
 800415a:	bf00      	nop
  }
  return counter;
 800415c:	68fb      	ldr	r3, [r7, #12]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	00017700 	.word	0x00017700

0800416c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2200      	movs	r2, #0
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f812 	bl	80041ac <CODEC_IO_Write>
 8004188:	4603      	mov	r3, r0
 800418a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <wm8994_Reset+0x38>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <wm8994_Reset+0x3c>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

  return counter;
 8004198:	68fb      	ldr	r3, [r7, #12]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	200000ec 	.word	0x200000ec
 80041a8:	200000f0 	.word	0x200000f0

080041ac <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
 80041b6:	460b      	mov	r3, r1
 80041b8:	80bb      	strh	r3, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	88b9      	ldrh	r1, [r7, #4]
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f99f 	bl	800450c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	b2db      	uxtb	r3, r3
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <BSP_LED_On>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d108      	bne.n	80041fe <BSP_LED_On+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <BSP_LED_On+0x2c>)
 80041ee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 80041f0:	2302      	movs	r3, #2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2201      	movs	r2, #1
 80041f6:	4619      	mov	r1, r3
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f003 fbaf 	bl	800795c <HAL_GPIO_WritePin>
  }
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40022000 	.word	0x40022000

0800420c <BSP_LED_Off>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1) /* Switch Off LED connected to GPIO */
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d108      	bne.n	800422e <BSP_LED_Off+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <BSP_LED_Off+0x2c>)
 800421e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8004220:	2302      	movs	r3, #2
 8004222:	b29b      	uxth	r3, r3
 8004224:	2200      	movs	r2, #0
 8004226:	4619      	mov	r1, r3
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f003 fb97 	bl	800795c <HAL_GPIO_WritePin>
  }
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40022000 	.word	0x40022000

0800423c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a51      	ldr	r2, [pc, #324]	; (800438c <I2Cx_MspInit+0x150>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d14d      	bne.n	80042e8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800424c:	4b50      	ldr	r3, [pc, #320]	; (8004390 <I2Cx_MspInit+0x154>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	4a4f      	ldr	r2, [pc, #316]	; (8004390 <I2Cx_MspInit+0x154>)
 8004252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004256:	6313      	str	r3, [r2, #48]	; 0x30
 8004258:	4b4d      	ldr	r3, [pc, #308]	; (8004390 <I2Cx_MspInit+0x154>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004268:	2312      	movs	r3, #18
 800426a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004270:	2302      	movs	r3, #2
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004274:	2304      	movs	r3, #4
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004278:	f107 031c 	add.w	r3, r7, #28
 800427c:	4619      	mov	r1, r3
 800427e:	4845      	ldr	r0, [pc, #276]	; (8004394 <I2Cx_MspInit+0x158>)
 8004280:	f003 f8b8 	bl	80073f4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800428a:	f107 031c 	add.w	r3, r7, #28
 800428e:	4619      	mov	r1, r3
 8004290:	4840      	ldr	r0, [pc, #256]	; (8004394 <I2Cx_MspInit+0x158>)
 8004292:	f003 f8af 	bl	80073f4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004296:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <I2Cx_MspInit+0x154>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <I2Cx_MspInit+0x154>)
 800429c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042a0:	6413      	str	r3, [r2, #64]	; 0x40
 80042a2:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <I2Cx_MspInit+0x154>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80042ae:	4b38      	ldr	r3, [pc, #224]	; (8004390 <I2Cx_MspInit+0x154>)
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	4a37      	ldr	r2, [pc, #220]	; (8004390 <I2Cx_MspInit+0x154>)
 80042b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042b8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80042ba:	4b35      	ldr	r3, [pc, #212]	; (8004390 <I2Cx_MspInit+0x154>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	4a34      	ldr	r2, [pc, #208]	; (8004390 <I2Cx_MspInit+0x154>)
 80042c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042c4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	210f      	movs	r1, #15
 80042ca:	2048      	movs	r0, #72	; 0x48
 80042cc:	f001 ff94 	bl	80061f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80042d0:	2048      	movs	r0, #72	; 0x48
 80042d2:	f001 ffad 	bl	8006230 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80042d6:	2200      	movs	r2, #0
 80042d8:	210f      	movs	r1, #15
 80042da:	2049      	movs	r0, #73	; 0x49
 80042dc:	f001 ff8c 	bl	80061f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80042e0:	2049      	movs	r0, #73	; 0x49
 80042e2:	f001 ffa5 	bl	8006230 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80042e6:	e04d      	b.n	8004384 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <I2Cx_MspInit+0x154>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	4a28      	ldr	r2, [pc, #160]	; (8004390 <I2Cx_MspInit+0x154>)
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	6313      	str	r3, [r2, #48]	; 0x30
 80042f4:	4b26      	ldr	r3, [pc, #152]	; (8004390 <I2Cx_MspInit+0x154>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004304:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004306:	2312      	movs	r3, #18
 8004308:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800430a:	2300      	movs	r3, #0
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800430e:	2302      	movs	r3, #2
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004312:	2304      	movs	r3, #4
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004316:	f107 031c 	add.w	r3, r7, #28
 800431a:	4619      	mov	r1, r3
 800431c:	481e      	ldr	r0, [pc, #120]	; (8004398 <I2Cx_MspInit+0x15c>)
 800431e:	f003 f869 	bl	80073f4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004328:	f107 031c 	add.w	r3, r7, #28
 800432c:	4619      	mov	r1, r3
 800432e:	481a      	ldr	r0, [pc, #104]	; (8004398 <I2Cx_MspInit+0x15c>)
 8004330:	f003 f860 	bl	80073f4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004334:	4b16      	ldr	r3, [pc, #88]	; (8004390 <I2Cx_MspInit+0x154>)
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <I2Cx_MspInit+0x154>)
 800433a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800433e:	6413      	str	r3, [r2, #64]	; 0x40
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <I2Cx_MspInit+0x154>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <I2Cx_MspInit+0x154>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <I2Cx_MspInit+0x154>)
 8004352:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004356:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <I2Cx_MspInit+0x154>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4a0c      	ldr	r2, [pc, #48]	; (8004390 <I2Cx_MspInit+0x154>)
 800435e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004362:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004364:	2200      	movs	r2, #0
 8004366:	210f      	movs	r1, #15
 8004368:	201f      	movs	r0, #31
 800436a:	f001 ff45 	bl	80061f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800436e:	201f      	movs	r0, #31
 8004370:	f001 ff5e 	bl	8006230 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004374:	2200      	movs	r2, #0
 8004376:	210f      	movs	r1, #15
 8004378:	2020      	movs	r0, #32
 800437a:	f001 ff3d 	bl	80061f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800437e:	2020      	movs	r0, #32
 8004380:	f001 ff56 	bl	8006230 <HAL_NVIC_EnableIRQ>
}
 8004384:	bf00      	nop
 8004386:	3730      	adds	r7, #48	; 0x30
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200000f4 	.word	0x200000f4
 8004390:	40023800 	.word	0x40023800
 8004394:	40021c00 	.word	0x40021c00
 8004398:	40020400 	.word	0x40020400

0800439c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f004 ffcb 	bl	8009340 <HAL_I2C_GetState>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d125      	bne.n	80043fc <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a14      	ldr	r2, [pc, #80]	; (8004404 <I2Cx_Init+0x68>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a13      	ldr	r2, [pc, #76]	; (8004408 <I2Cx_Init+0x6c>)
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e002      	b.n	80043c6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <I2Cx_Init+0x70>)
 80043c4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a11      	ldr	r2, [pc, #68]	; (8004410 <I2Cx_Init+0x74>)
 80043ca:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff ff23 	bl	800423c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f004 fcb4 	bl	8008d64 <HAL_I2C_Init>
  }
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200000f4 	.word	0x200000f4
 8004408:	40005c00 	.word	0x40005c00
 800440c:	40005400 	.word	0x40005400
 8004410:	40912732 	.word	0x40912732

08004414 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af04      	add	r7, sp, #16
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	4608      	mov	r0, r1
 800441e:	4611      	mov	r1, r2
 8004420:	461a      	mov	r2, r3
 8004422:	4603      	mov	r3, r0
 8004424:	72fb      	strb	r3, [r7, #11]
 8004426:	460b      	mov	r3, r1
 8004428:	813b      	strh	r3, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004432:	7afb      	ldrb	r3, [r7, #11]
 8004434:	b299      	uxth	r1, r3
 8004436:	88f8      	ldrh	r0, [r7, #6]
 8004438:	893a      	ldrh	r2, [r7, #8]
 800443a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800443e:	9302      	str	r3, [sp, #8]
 8004440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	4603      	mov	r3, r0
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f004 fe5e 	bl	800910c <HAL_I2C_Mem_Read>
 8004450:	4603      	mov	r3, r0
 8004452:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800445a:	7afb      	ldrb	r3, [r7, #11]
 800445c:	4619      	mov	r1, r3
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f832 	bl	80044c8 <I2Cx_Error>
  }
  return status;    
 8004464:	7dfb      	ldrb	r3, [r7, #23]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08a      	sub	sp, #40	; 0x28
 8004472:	af04      	add	r7, sp, #16
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	4608      	mov	r0, r1
 8004478:	4611      	mov	r1, r2
 800447a:	461a      	mov	r2, r3
 800447c:	4603      	mov	r3, r0
 800447e:	72fb      	strb	r3, [r7, #11]
 8004480:	460b      	mov	r3, r1
 8004482:	813b      	strh	r3, [r7, #8]
 8004484:	4613      	mov	r3, r2
 8004486:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800448c:	7afb      	ldrb	r3, [r7, #11]
 800448e:	b299      	uxth	r1, r3
 8004490:	88f8      	ldrh	r0, [r7, #6]
 8004492:	893a      	ldrh	r2, [r7, #8]
 8004494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004498:	9302      	str	r3, [sp, #8]
 800449a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	4603      	mov	r3, r0
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f004 fd1d 	bl	8008ee4 <HAL_I2C_Mem_Write>
 80044aa:	4603      	mov	r3, r0
 80044ac:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80044b4:	7afb      	ldrb	r3, [r7, #11]
 80044b6:	4619      	mov	r1, r3
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f805 	bl	80044c8 <I2Cx_Error>
  }
  return status;
 80044be:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f004 fcd5 	bl	8008e84 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ff5e 	bl	800439c <I2Cx_Init>
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80044ec:	4802      	ldr	r0, [pc, #8]	; (80044f8 <AUDIO_IO_Init+0x10>)
 80044ee:	f7ff ff55 	bl	800439c <I2Cx_Init>
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200000f4 	.word	0x200000f4

080044fc <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af02      	add	r7, sp, #8
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
 8004516:	460b      	mov	r3, r1
 8004518:	80bb      	strh	r3, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004522:	89fb      	ldrh	r3, [r7, #14]
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	b29b      	uxth	r3, r3
 8004528:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800452a:	89fb      	ldrh	r3, [r7, #14]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	b29b      	uxth	r3, r3
 8004530:	b21a      	sxth	r2, r3
 8004532:	887b      	ldrh	r3, [r7, #2]
 8004534:	b21b      	sxth	r3, r3
 8004536:	4313      	orrs	r3, r2
 8004538:	b21b      	sxth	r3, r3
 800453a:	b29b      	uxth	r3, r3
 800453c:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800453e:	88ba      	ldrh	r2, [r7, #4]
 8004540:	79f9      	ldrb	r1, [r7, #7]
 8004542:	2302      	movs	r3, #2
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	1cbb      	adds	r3, r7, #2
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	2302      	movs	r3, #2
 800454c:	4803      	ldr	r0, [pc, #12]	; (800455c <AUDIO_IO_Write+0x50>)
 800454e:	f7ff ff8e 	bl	800446e <I2Cx_WriteMultiple>
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	200000f4 	.word	0x200000f4

08004560 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af02      	add	r7, sp, #8
 8004566:	4603      	mov	r3, r0
 8004568:	460a      	mov	r2, r1
 800456a:	71fb      	strb	r3, [r7, #7]
 800456c:	4613      	mov	r3, r2
 800456e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	81bb      	strh	r3, [r7, #12]
 8004574:	2300      	movs	r3, #0
 8004576:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004578:	88ba      	ldrh	r2, [r7, #4]
 800457a:	79f9      	ldrb	r1, [r7, #7]
 800457c:	2302      	movs	r3, #2
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	2302      	movs	r3, #2
 8004588:	480a      	ldr	r0, [pc, #40]	; (80045b4 <AUDIO_IO_Read+0x54>)
 800458a:	f7ff ff43 	bl	8004414 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800458e:	89bb      	ldrh	r3, [r7, #12]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004594:	89bb      	ldrh	r3, [r7, #12]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	b29b      	uxth	r3, r3
 800459a:	b21a      	sxth	r2, r3
 800459c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	b21b      	sxth	r3, r3
 80045a4:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80045a6:	89fb      	ldrh	r3, [r7, #14]
 80045a8:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80045aa:	89bb      	ldrh	r3, [r7, #12]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	200000f4 	.word	0x200000f4

080045b8 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f001 fab7 	bl	8005b34 <HAL_Delay>
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80045d8:	480e      	ldr	r0, [pc, #56]	; (8004614 <HAL_SAI_ErrorCallback+0x44>)
 80045da:	f007 fedb 	bl	800c394 <HAL_SAI_GetState>
 80045de:	4603      	mov	r3, r0
 80045e0:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80045e2:	480d      	ldr	r0, [pc, #52]	; (8004618 <HAL_SAI_ErrorCallback+0x48>)
 80045e4:	f007 fed6 	bl	800c394 <HAL_SAI_GetState>
 80045e8:	4603      	mov	r3, r0
 80045ea:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d002      	beq.n	80045f8 <HAL_SAI_ErrorCallback+0x28>
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	2b12      	cmp	r3, #18
 80045f6:	d101      	bne.n	80045fc <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80045f8:	f000 f810 	bl	800461c <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 80045fc:	7bbb      	ldrb	r3, [r7, #14]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d002      	beq.n	8004608 <HAL_SAI_ErrorCallback+0x38>
 8004602:	7bbb      	ldrb	r3, [r7, #14]
 8004604:	2b22      	cmp	r3, #34	; 0x22
 8004606:	d101      	bne.n	800460c <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8004608:	f7fb ffeb 	bl	80005e2 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000140 	.word	0x20000140
 8004618:	200001c4 	.word	0x200001c4

0800461c <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	; 0x30
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8004636:	4b63      	ldr	r3, [pc, #396]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	4a62      	ldr	r2, [pc, #392]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800463c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004640:	6453      	str	r3, [r2, #68]	; 0x44
 8004642:	4b60      	ldr	r3, [pc, #384]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800464e:	4b5d      	ldr	r3, [pc, #372]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	4a5c      	ldr	r2, [pc, #368]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	6313      	str	r3, [r2, #48]	; 0x30
 800465a:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8004666:	4b57      	ldr	r3, [pc, #348]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	4a56      	ldr	r2, [pc, #344]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800466c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004670:	6313      	str	r3, [r2, #48]	; 0x30
 8004672:	4b54      	ldr	r3, [pc, #336]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800467e:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	4a50      	ldr	r2, [pc, #320]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004688:	6313      	str	r3, [r2, #48]	; 0x30
 800468a:	4b4e      	ldr	r3, [pc, #312]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80046a2:	2303      	movs	r3, #3
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80046a6:	230a      	movs	r3, #10
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80046aa:	f107 031c 	add.w	r3, r7, #28
 80046ae:	4619      	mov	r1, r3
 80046b0:	4845      	ldr	r0, [pc, #276]	; (80047c8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80046b2:	f002 fe9f 	bl	80073f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80046b6:	2320      	movs	r3, #32
 80046b8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80046c2:	2303      	movs	r3, #3
 80046c4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80046c6:	230a      	movs	r3, #10
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80046ca:	f107 031c 	add.w	r3, r7, #28
 80046ce:	4619      	mov	r1, r3
 80046d0:	483d      	ldr	r0, [pc, #244]	; (80047c8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80046d2:	f002 fe8f 	bl	80073f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80046d6:	2340      	movs	r3, #64	; 0x40
 80046d8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80046da:	2302      	movs	r3, #2
 80046dc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80046e2:	2303      	movs	r3, #3
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80046e6:	230a      	movs	r3, #10
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80046ea:	f107 031c 	add.w	r3, r7, #28
 80046ee:	4619      	mov	r1, r3
 80046f0:	4835      	ldr	r0, [pc, #212]	; (80047c8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80046f2:	f002 fe7f 	bl	80073f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80046f6:	2310      	movs	r3, #16
 80046f8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80046fa:	2302      	movs	r3, #2
 80046fc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004702:	2303      	movs	r3, #3
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004706:	230a      	movs	r3, #10
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800470a:	f107 031c 	add.w	r3, r7, #28
 800470e:	4619      	mov	r1, r3
 8004710:	482d      	ldr	r0, [pc, #180]	; (80047c8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004712:	f002 fe6f 	bl	80073f4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004716:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800471c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004720:	6313      	str	r3, [r2, #48]	; 0x30
 8004722:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a26      	ldr	r2, [pc, #152]	; (80047cc <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d138      	bne.n	80047aa <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004738:	4b25      	ldr	r3, [pc, #148]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800473a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800473e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004740:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004742:	2240      	movs	r2, #64	; 0x40
 8004744:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004748:	2200      	movs	r2, #0
 800474a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800474e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004752:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800475c:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800475e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004762:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800476a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800476e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004772:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004774:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004776:	2204      	movs	r2, #4
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800477c:	2203      	movs	r2, #3
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004782:	2200      	movs	r2, #0
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800478c:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800478e:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004790:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004796:	66da      	str	r2, [r3, #108]	; 0x6c
 8004798:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800479e:	480c      	ldr	r0, [pc, #48]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80047a0:	f001 ff66 	bl	8006670 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 80047a4:	480a      	ldr	r0, [pc, #40]	; (80047d0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80047a6:	f001 feb5 	bl	8006514 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80047aa:	2200      	movs	r2, #0
 80047ac:	210e      	movs	r1, #14
 80047ae:	203c      	movs	r0, #60	; 0x3c
 80047b0:	f001 fd22 	bl	80061f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80047b4:	203c      	movs	r0, #60	; 0x3c
 80047b6:	f001 fd3b 	bl	8006230 <HAL_NVIC_EnableIRQ>
}
 80047ba:	bf00      	nop
 80047bc:	3730      	adds	r7, #48	; 0x30
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40022000 	.word	0x40022000
 80047cc:	40015c04 	.word	0x40015c04
 80047d0:	20000248 	.word	0x20000248
 80047d4:	40026470 	.word	0x40026470

080047d8 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80047d8:	b580      	push	{r7, lr}
 80047da:	b0a6      	sub	sp, #152	; 0x98
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	4618      	mov	r0, r3
 80047ea:	f006 fd9b 	bl	800b324 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <BSP_AUDIO_OUT_ClockConfig+0x34>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f245 6222 	movw	r2, #22050	; 0x5622
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004808:	4293      	cmp	r3, r2
 800480a:	d112      	bne.n	8004832 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800480c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004810:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004816:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004818:	f240 13ad 	movw	r3, #429	; 0x1ad
 800481c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800481e:	2302      	movs	r3, #2
 8004820:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8004822:	2313      	movs	r3, #19
 8004824:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	4618      	mov	r0, r3
 800482c:	f006 f98c 	bl	800ab48 <HAL_RCCEx_PeriphCLKConfig>
 8004830:	e011      	b.n	8004856 <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004832:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004836:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004838:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800483c:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800483e:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8004842:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8004844:	2307      	movs	r3, #7
 8004846:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004848:	2301      	movs	r3, #1
 800484a:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	4618      	mov	r0, r3
 8004852:	f006 f979 	bl	800ab48 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8004856:	bf00      	nop
 8004858:	3798      	adds	r7, #152	; 0x98
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004874:	f000 f806 	bl	8004884 <BSP_AUDIO_IN_InitEx>
 8004878:	4603      	mov	r3, r0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	4603      	mov	r3, r0
 8004892:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 800489c:	89fb      	ldrh	r3, [r7, #14]
 800489e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a2:	d006      	beq.n	80048b2 <BSP_AUDIO_IN_InitEx+0x2e>
 80048a4:	89fb      	ldrh	r3, [r7, #14]
 80048a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048aa:	d002      	beq.n	80048b2 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e046      	b.n	8004940 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80048b2:	f000 f9e7 	bl	8004c84 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80048b6:	2200      	movs	r2, #0
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	4824      	ldr	r0, [pc, #144]	; (800494c <BSP_AUDIO_IN_InitEx+0xc8>)
 80048bc:	f7ff ff8c 	bl	80047d8 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <BSP_AUDIO_IN_InitEx+0xc8>)
 80048c2:	4a23      	ldr	r2, [pc, #140]	; (8004950 <BSP_AUDIO_IN_InitEx+0xcc>)
 80048c4:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80048c6:	4821      	ldr	r0, [pc, #132]	; (800494c <BSP_AUDIO_IN_InitEx+0xc8>)
 80048c8:	f007 fd64 	bl	800c394 <HAL_SAI_GetState>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80048d2:	2100      	movs	r1, #0
 80048d4:	481d      	ldr	r0, [pc, #116]	; (800494c <BSP_AUDIO_IN_InitEx+0xc8>)
 80048d6:	f7ff fea9 	bl	800462c <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80048da:	2100      	movs	r1, #0
 80048dc:	481b      	ldr	r0, [pc, #108]	; (800494c <BSP_AUDIO_IN_InitEx+0xc8>)
 80048de:	f000 f869 	bl	80049b4 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80048e2:	89fb      	ldrh	r3, [r7, #14]
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e8:	d102      	bne.n	80048f0 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80048ea:	230a      	movs	r3, #10
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	e001      	b.n	80048f4 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80048f0:	2305      	movs	r3, #5
 80048f2:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	69b9      	ldr	r1, [r7, #24]
 80048f8:	2001      	movs	r0, #1
 80048fa:	f000 f90d 	bl	8004b18 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2034      	movs	r0, #52	; 0x34
 8004904:	4798      	blx	r3
 8004906:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f648 1294 	movw	r2, #35220	; 0x8994
 800490e:	4293      	cmp	r3, r2
 8004910:	d109      	bne.n	8004926 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	2034      	movs	r0, #52	; 0x34
 8004918:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800491a:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <BSP_AUDIO_IN_InitEx+0xd4>)
 800491c:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <BSP_AUDIO_IN_InitEx+0xd0>)
 800491e:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e001      	b.n	800492a <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 800492a:	7ffb      	ldrb	r3, [r7, #31]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681c      	ldr	r4, [r3, #0]
 8004936:	89f9      	ldrh	r1, [r7, #14]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2264      	movs	r2, #100	; 0x64
 800493c:	2034      	movs	r0, #52	; 0x34
 800493e:	47a0      	blx	r4
    }
  }
  return ret;
 8004940:	7ffb      	ldrb	r3, [r7, #31]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd90      	pop	{r4, r7, pc}
 800494a:	bf00      	nop
 800494c:	200001c4 	.word	0x200001c4
 8004950:	40015c24 	.word	0x40015c24
 8004954:	20000004 	.word	0x20000004
 8004958:	200025e4 	.word	0x200025e4

0800495c <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4805      	ldr	r0, [pc, #20]	; (8004988 <BSP_AUDIO_IN_Record+0x2c>)
 8004974:	f007 fc80 	bl	800c278 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
  
  return ret;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	b2db      	uxtb	r3, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	200001c4 	.word	0x200001c4

0800498c <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004994:	f7fb fe1e 	bl	80005d4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004998:	bf00      	nop
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80049a8:	f7fb fe0d 	bl	80005c6 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	; 0x30
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80049be:	4b50      	ldr	r3, [pc, #320]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a4f      	ldr	r2, [pc, #316]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 80049c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b4d      	ldr	r3, [pc, #308]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80049d6:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	4a49      	ldr	r2, [pc, #292]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 80049dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e0:	6313      	str	r3, [r2, #48]	; 0x30
 80049e2:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80049ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049f2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80049f4:	2302      	movs	r3, #2
 80049f6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80049fc:	2302      	movs	r3, #2
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004a00:	230a      	movs	r3, #10
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004a04:	f107 031c 	add.w	r3, r7, #28
 8004a08:	4619      	mov	r1, r3
 8004a0a:	483e      	ldr	r0, [pc, #248]	; (8004b04 <BSP_AUDIO_IN_MspInit+0x150>)
 8004a0c:	f002 fcf2 	bl	80073f4 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8004a10:	4b3b      	ldr	r3, [pc, #236]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4a3a      	ldr	r2, [pc, #232]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1c:	4b38      	ldr	r3, [pc, #224]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004a36:	2302      	movs	r3, #2
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8004a3a:	f107 031c 	add.w	r3, r7, #28
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4831      	ldr	r0, [pc, #196]	; (8004b08 <BSP_AUDIO_IN_MspInit+0x154>)
 8004a42:	f002 fcd7 	bl	80073f4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004a46:	4b2e      	ldr	r3, [pc, #184]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	4a2d      	ldr	r2, [pc, #180]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a50:	6313      	str	r3, [r2, #48]	; 0x30
 8004a52:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2a      	ldr	r2, [pc, #168]	; (8004b0c <BSP_AUDIO_IN_MspInit+0x158>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d137      	bne.n	8004ad8 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004a68:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004a6e:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004a74:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004a7a:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a80:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004a82:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a88:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004a8a:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a90:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004a92:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a98:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004a9a:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004a9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004aa0:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004aaa:	2203      	movs	r2, #3
 8004aac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004aae:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004ab4:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004abc:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <BSP_AUDIO_IN_MspInit+0x160>)
 8004abe:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ac4:	671a      	str	r2, [r3, #112]	; 0x70
 8004ac6:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004acc:	4810      	ldr	r0, [pc, #64]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ace:	f001 fdcf 	bl	8006670 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8004ad2:	480f      	ldr	r0, [pc, #60]	; (8004b10 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ad4:	f001 fd1e 	bl	8006514 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004ad8:	2200      	movs	r2, #0
 8004ada:	210f      	movs	r1, #15
 8004adc:	2046      	movs	r0, #70	; 0x46
 8004ade:	f001 fb8b 	bl	80061f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004ae2:	2046      	movs	r0, #70	; 0x46
 8004ae4:	f001 fba4 	bl	8006230 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004ae8:	2200      	movs	r2, #0
 8004aea:	210f      	movs	r1, #15
 8004aec:	2028      	movs	r0, #40	; 0x28
 8004aee:	f001 fb83 	bl	80061f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004af2:	2028      	movs	r0, #40	; 0x28
 8004af4:	f001 fb9c 	bl	8006230 <HAL_NVIC_EnableIRQ>
}
 8004af8:	bf00      	nop
 8004afa:	3730      	adds	r7, #48	; 0x30
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40021800 	.word	0x40021800
 8004b08:	40021c00 	.word	0x40021c00
 8004b0c:	40015c24 	.word	0x40015c24
 8004b10:	200002a8 	.word	0x200002a8
 8004b14:	400264b8 	.word	0x400264b8

08004b18 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004b24:	4b53      	ldr	r3, [pc, #332]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b26:	4a54      	ldr	r2, [pc, #336]	; (8004c78 <SAIx_In_Init+0x160>)
 8004b28:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8004b2a:	4b52      	ldr	r3, [pc, #328]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b50      	ldr	r3, [pc, #320]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b38:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004b3a:	4a4e      	ldr	r2, [pc, #312]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004b40:	4a4c      	ldr	r2, [pc, #304]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004b46:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004b4c:	4b49      	ldr	r3, [pc, #292]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004b52:	4b48      	ldr	r3, [pc, #288]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b54:	2280      	movs	r2, #128	; 0x80
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004b58:	4b46      	ldr	r3, [pc, #280]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004b5e:	4b45      	ldr	r3, [pc, #276]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004b64:	4b43      	ldr	r3, [pc, #268]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004b6a:	4b42      	ldr	r3, [pc, #264]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b70:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004b72:	4b40      	ldr	r3, [pc, #256]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004b78:	4b3e      	ldr	r3, [pc, #248]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b7a:	2240      	movs	r2, #64	; 0x40
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004b7e:	4b3d      	ldr	r3, [pc, #244]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b80:	2220      	movs	r2, #32
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004b84:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b8a:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004b8c:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004b92:	4b38      	ldr	r3, [pc, #224]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004b98:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004b9a:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004ba0:	4b34      	ldr	r3, [pc, #208]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8004ba6:	4b33      	ldr	r3, [pc, #204]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004ba8:	2204      	movs	r2, #4
 8004baa:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004bac:	4a31      	ldr	r2, [pc, #196]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8004bb2:	4830      	ldr	r0, [pc, #192]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004bb4:	f007 f9b8 	bl	800bf28 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004bb8:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <SAIx_In_Init+0x164>)
 8004bba:	4a31      	ldr	r2, [pc, #196]	; (8004c80 <SAIx_In_Init+0x168>)
 8004bbc:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <SAIx_In_Init+0x164>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <SAIx_In_Init+0x164>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bcc:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004bce:	4a2b      	ldr	r2, [pc, #172]	; (8004c7c <SAIx_In_Init+0x164>)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004bd4:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <SAIx_In_Init+0x164>)
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004bda:	4b28      	ldr	r3, [pc, #160]	; (8004c7c <SAIx_In_Init+0x164>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004be0:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <SAIx_In_Init+0x164>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8004be6:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <SAIx_In_Init+0x164>)
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004bec:	4b23      	ldr	r3, [pc, #140]	; (8004c7c <SAIx_In_Init+0x164>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004bf2:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <SAIx_In_Init+0x164>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <SAIx_In_Init+0x164>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8004bfe:	4b1f      	ldr	r3, [pc, #124]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c0c:	2240      	movs	r2, #64	; 0x40
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004c10:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c12:	2220      	movs	r2, #32
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004c16:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c1c:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004c24:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c26:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004c2a:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004c2c:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8004c3e:	4a0f      	ldr	r2, [pc, #60]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004c44:	480d      	ldr	r0, [pc, #52]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c46:	f007 f96f 	bl	800bf28 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <SAIx_In_Init+0x15c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c58:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <SAIx_In_Init+0x164>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000140 	.word	0x20000140
 8004c78:	40015c04 	.word	0x40015c04
 8004c7c:	200001c4 	.word	0x200001c4
 8004c80:	40015c24 	.word	0x40015c24

08004c84 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <SAIx_In_DeInit+0x24>)
 8004c8a:	4a08      	ldr	r2, [pc, #32]	; (8004cac <SAIx_In_DeInit+0x28>)
 8004c8c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <SAIx_In_DeInit+0x24>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <SAIx_In_DeInit+0x24>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c9c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8004c9e:	4802      	ldr	r0, [pc, #8]	; (8004ca8 <SAIx_In_DeInit+0x24>)
 8004ca0:	f007 fab4 	bl	800c20c <HAL_SAI_DeInit>
}
 8004ca4:	bf00      	nop
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	200001c4 	.word	0x200001c4
 8004cac:	40015c24 	.word	0x40015c24

08004cb0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004cb4:	4b31      	ldr	r3, [pc, #196]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cb6:	2228      	movs	r2, #40	; 0x28
 8004cb8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004cba:	4b30      	ldr	r3, [pc, #192]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cbc:	2209      	movs	r2, #9
 8004cbe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004cc0:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cc2:	2235      	movs	r2, #53	; 0x35
 8004cc4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004cc6:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cc8:	220b      	movs	r2, #11
 8004cca:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004ccc:	4b2b      	ldr	r3, [pc, #172]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cce:	f240 121b 	movw	r2, #283	; 0x11b
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cd6:	f240 2215 	movw	r2, #533	; 0x215
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004cdc:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cde:	f240 121d 	movw	r2, #285	; 0x11d
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004ce6:	f240 2235 	movw	r2, #565	; 0x235
 8004cea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004cec:	2100      	movs	r1, #0
 8004cee:	4823      	ldr	r0, [pc, #140]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cf0:	f000 fc1c 	bl	800552c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cf6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004cfa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004cfc:	4b1f      	ldr	r3, [pc, #124]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004cfe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004d02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004d04:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004d34:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d36:	4a12      	ldr	r2, [pc, #72]	; (8004d80 <BSP_LCD_Init+0xd0>)
 8004d38:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004d3a:	4810      	ldr	r0, [pc, #64]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d3c:	f004 ff92 	bl	8009c64 <HAL_LTDC_GetState>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004d46:	2100      	movs	r1, #0
 8004d48:	480c      	ldr	r0, [pc, #48]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d4a:	f000 fb15 	bl	8005378 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004d4e:	480b      	ldr	r0, [pc, #44]	; (8004d7c <BSP_LCD_Init+0xcc>)
 8004d50:	f004 fdb8 	bl	80098c4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004d54:	2201      	movs	r2, #1
 8004d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d5a:	480a      	ldr	r0, [pc, #40]	; (8004d84 <BSP_LCD_Init+0xd4>)
 8004d5c:	f002 fdfe 	bl	800795c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004d60:	2201      	movs	r2, #1
 8004d62:	2108      	movs	r1, #8
 8004d64:	4808      	ldr	r0, [pc, #32]	; (8004d88 <BSP_LCD_Init+0xd8>)
 8004d66:	f002 fdf9 	bl	800795c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004d6a:	f000 fcff 	bl	800576c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004d6e:	4807      	ldr	r0, [pc, #28]	; (8004d8c <BSP_LCD_Init+0xdc>)
 8004d70:	f000 f8c8 	bl	8004f04 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	200025e8 	.word	0x200025e8
 8004d80:	40016800 	.word	0x40016800
 8004d84:	40022000 	.word	0x40022000
 8004d88:	40022800 	.word	0x40022800
 8004d8c:	20000038 	.word	0x20000038

08004d90 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <BSP_LCD_GetXSize+0x20>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a06      	ldr	r2, [pc, #24]	; (8004db4 <BSP_LCD_GetXSize+0x24>)
 8004d9a:	2134      	movs	r1, #52	; 0x34
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	4413      	add	r3, r2
 8004da2:	3360      	adds	r3, #96	; 0x60
 8004da4:	681b      	ldr	r3, [r3, #0]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	20000348 	.word	0x20000348
 8004db4:	200025e8 	.word	0x200025e8

08004db8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <BSP_LCD_GetYSize+0x20>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a06      	ldr	r2, [pc, #24]	; (8004ddc <BSP_LCD_GetYSize+0x24>)
 8004dc2:	2134      	movs	r1, #52	; 0x34
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	4413      	add	r3, r2
 8004dca:	3364      	adds	r3, #100	; 0x64
 8004dcc:	681b      	ldr	r3, [r3, #0]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	20000348 	.word	0x20000348
 8004ddc:	200025e8 	.word	0x200025e8

08004de0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b090      	sub	sp, #64	; 0x40
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004df0:	f7ff ffce 	bl	8004d90 <BSP_LCD_GetXSize>
 8004df4:	4603      	mov	r3, r0
 8004df6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004dfc:	f7ff ffdc 	bl	8004db8 <BSP_LCD_GetYSize>
 8004e00:	4603      	mov	r3, r0
 8004e02:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004e0c:	23ff      	movs	r3, #255	; 0xff
 8004e0e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004e26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004e30:	f7ff ffae 	bl	8004d90 <BSP_LCD_GetXSize>
 8004e34:	4603      	mov	r3, r0
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004e38:	f7ff ffbe 	bl	8004db8 <BSP_LCD_GetYSize>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004e40:	88fa      	ldrh	r2, [r7, #6]
 8004e42:	f107 030c 	add.w	r3, r7, #12
 8004e46:	4619      	mov	r1, r3
 8004e48:	4812      	ldr	r0, [pc, #72]	; (8004e94 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004e4a:	f004 fecd 	bl	8009be8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004e4e:	88fa      	ldrh	r2, [r7, #6]
 8004e50:	4911      	ldr	r1, [pc, #68]	; (8004e98 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e62:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	490c      	ldr	r1, [pc, #48]	; (8004e98 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	3308      	adds	r3, #8
 8004e74:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <BSP_LCD_LayerDefaultInit+0xbc>)
 8004e76:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004e78:	88fa      	ldrh	r2, [r7, #6]
 8004e7a:	4907      	ldr	r1, [pc, #28]	; (8004e98 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004e8a:	601a      	str	r2, [r3, #0]
}
 8004e8c:	bf00      	nop
 8004e8e:	3740      	adds	r7, #64	; 0x40
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	200025e8 	.word	0x200025e8
 8004e98:	2000034c 	.word	0x2000034c
 8004e9c:	20000038 	.word	0x20000038

08004ea0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <BSP_LCD_SetTextColor+0x28>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4907      	ldr	r1, [pc, #28]	; (8004ecc <BSP_LCD_SetTextColor+0x2c>)
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	601a      	str	r2, [r3, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	20000348 	.word	0x20000348
 8004ecc:	2000034c 	.word	0x2000034c

08004ed0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <BSP_LCD_SetBackColor+0x2c>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	4908      	ldr	r1, [pc, #32]	; (8004f00 <BSP_LCD_SetBackColor+0x30>)
 8004ede:	4613      	mov	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	3304      	adds	r3, #4
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	20000348 	.word	0x20000348
 8004f00:	2000034c 	.word	0x2000034c

08004f04 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <BSP_LCD_SetFont+0x2c>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4908      	ldr	r1, [pc, #32]	; (8004f34 <BSP_LCD_SetFont+0x30>)
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000348 	.word	0x20000348
 8004f34:	2000034c 	.word	0x2000034c

08004f38 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8004f3c:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <BSP_LCD_GetFont+0x24>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4907      	ldr	r1, [pc, #28]	; (8004f60 <BSP_LCD_GetFont+0x28>)
 8004f42:	4613      	mov	r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	681b      	ldr	r3, [r3, #0]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	20000348 	.word	0x20000348
 8004f60:	2000034c 	.word	0x2000034c

08004f64 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <BSP_LCD_Clear+0x48>)
 8004f6e:	681c      	ldr	r4, [r3, #0]
 8004f70:	4b0e      	ldr	r3, [pc, #56]	; (8004fac <BSP_LCD_Clear+0x48>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <BSP_LCD_Clear+0x4c>)
 8004f76:	2134      	movs	r1, #52	; 0x34
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	335c      	adds	r3, #92	; 0x5c
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461d      	mov	r5, r3
 8004f84:	f7ff ff04 	bl	8004d90 <BSP_LCD_GetXSize>
 8004f88:	4606      	mov	r6, r0
 8004f8a:	f7ff ff15 	bl	8004db8 <BSP_LCD_GetYSize>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	2300      	movs	r3, #0
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	4632      	mov	r2, r6
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f000 fb98 	bl	80056d4 <LL_FillBuffer>
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fac:	20000348 	.word	0x20000348
 8004fb0:	200025e8 	.word	0x200025e8

08004fb4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004fb4:	b590      	push	{r4, r7, lr}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	80fb      	strh	r3, [r7, #6]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	80bb      	strh	r3, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004fc6:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <BSP_LCD_DisplayChar+0x80>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	491b      	ldr	r1, [pc, #108]	; (8005038 <BSP_LCD_DisplayChar+0x84>)
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6819      	ldr	r1, [r3, #0]
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004fe2:	4b14      	ldr	r3, [pc, #80]	; (8005034 <BSP_LCD_DisplayChar+0x80>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4c14      	ldr	r4, [pc, #80]	; (8005038 <BSP_LCD_DisplayChar+0x84>)
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4423      	add	r3, r4
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004ff8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <BSP_LCD_DisplayChar+0x80>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4c0d      	ldr	r4, [pc, #52]	; (8005038 <BSP_LCD_DisplayChar+0x84>)
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4423      	add	r3, r4
 800500c:	3308      	adds	r3, #8
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	889b      	ldrh	r3, [r3, #4]
 8005012:	3307      	adds	r3, #7
 8005014:	2b00      	cmp	r3, #0
 8005016:	da00      	bge.n	800501a <BSP_LCD_DisplayChar+0x66>
 8005018:	3307      	adds	r3, #7
 800501a:	10db      	asrs	r3, r3, #3
 800501c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005020:	18ca      	adds	r2, r1, r3
 8005022:	88b9      	ldrh	r1, [r7, #4]
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fa9c 	bl	8005564 <DrawChar>
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bd90      	pop	{r4, r7, pc}
 8005034:	20000348 	.word	0x20000348
 8005038:	2000034c 	.word	0x2000034c

0800503c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800503c:	b5b0      	push	{r4, r5, r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	60ba      	str	r2, [r7, #8]
 8005044:	461a      	mov	r2, r3
 8005046:	4603      	mov	r3, r0
 8005048:	81fb      	strh	r3, [r7, #14]
 800504a:	460b      	mov	r3, r1
 800504c:	81bb      	strh	r3, [r7, #12]
 800504e:	4613      	mov	r3, r2
 8005050:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8005052:	2301      	movs	r3, #1
 8005054:	83fb      	strh	r3, [r7, #30]
 8005056:	2300      	movs	r3, #0
 8005058:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8005066:	e002      	b.n	800506e <BSP_LCD_DisplayStringAt+0x32>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	3301      	adds	r3, #1
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	617a      	str	r2, [r7, #20]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f6      	bne.n	8005068 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800507a:	f7ff fe89 	bl	8004d90 <BSP_LCD_GetXSize>
 800507e:	4b4f      	ldr	r3, [pc, #316]	; (80051bc <BSP_LCD_DisplayStringAt+0x180>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	494f      	ldr	r1, [pc, #316]	; (80051c0 <BSP_LCD_DisplayStringAt+0x184>)
 8005084:	4613      	mov	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	3308      	adds	r3, #8
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	889b      	ldrh	r3, [r3, #4]
 8005094:	fbb0 f3f3 	udiv	r3, r0, r3
 8005098:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d01c      	beq.n	80050da <BSP_LCD_DisplayStringAt+0x9e>
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d017      	beq.n	80050d4 <BSP_LCD_DisplayStringAt+0x98>
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d12e      	bne.n	8005106 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	1ad1      	subs	r1, r2, r3
 80050ae:	4b43      	ldr	r3, [pc, #268]	; (80051bc <BSP_LCD_DisplayStringAt+0x180>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4843      	ldr	r0, [pc, #268]	; (80051c0 <BSP_LCD_DisplayStringAt+0x184>)
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4403      	add	r3, r0
 80050be:	3308      	adds	r3, #8
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	889b      	ldrh	r3, [r3, #4]
 80050c4:	fb03 f301 	mul.w	r3, r3, r1
 80050c8:	085b      	lsrs	r3, r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	89fb      	ldrh	r3, [r7, #14]
 80050ce:	4413      	add	r3, r2
 80050d0:	83fb      	strh	r3, [r7, #30]
      break;
 80050d2:	e01b      	b.n	800510c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80050d4:	89fb      	ldrh	r3, [r7, #14]
 80050d6:	83fb      	strh	r3, [r7, #30]
      break;
 80050d8:	e018      	b.n	800510c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	b299      	uxth	r1, r3
 80050e2:	4b36      	ldr	r3, [pc, #216]	; (80051bc <BSP_LCD_DisplayStringAt+0x180>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4836      	ldr	r0, [pc, #216]	; (80051c0 <BSP_LCD_DisplayStringAt+0x184>)
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4403      	add	r3, r0
 80050f2:	3308      	adds	r3, #8
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	889b      	ldrh	r3, [r3, #4]
 80050f8:	fb11 f303 	smulbb	r3, r1, r3
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	89fb      	ldrh	r3, [r7, #14]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	83fb      	strh	r3, [r7, #30]
      break;
 8005104:	e002      	b.n	800510c <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	83fb      	strh	r3, [r7, #30]
      break;
 800510a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800510c:	8bfb      	ldrh	r3, [r7, #30]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <BSP_LCD_DisplayStringAt+0xde>
 8005112:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005116:	2b00      	cmp	r3, #0
 8005118:	da1d      	bge.n	8005156 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 800511a:	2301      	movs	r3, #1
 800511c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800511e:	e01a      	b.n	8005156 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	781a      	ldrb	r2, [r3, #0]
 8005124:	89b9      	ldrh	r1, [r7, #12]
 8005126:	8bfb      	ldrh	r3, [r7, #30]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff ff43 	bl	8004fb4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <BSP_LCD_DisplayStringAt+0x180>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4923      	ldr	r1, [pc, #140]	; (80051c0 <BSP_LCD_DisplayStringAt+0x184>)
 8005134:	4613      	mov	r3, r2
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	3308      	adds	r3, #8
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	889a      	ldrh	r2, [r3, #4]
 8005144:	8bfb      	ldrh	r3, [r7, #30]
 8005146:	4413      	add	r3, r2
 8005148:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	3301      	adds	r3, #1
 800514e:	60bb      	str	r3, [r7, #8]
    i++;
 8005150:	8bbb      	ldrh	r3, [r7, #28]
 8005152:	3301      	adds	r3, #1
 8005154:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bf14      	ite	ne
 800515e:	2301      	movne	r3, #1
 8005160:	2300      	moveq	r3, #0
 8005162:	b2dc      	uxtb	r4, r3
 8005164:	f7ff fe14 	bl	8004d90 <BSP_LCD_GetXSize>
 8005168:	4605      	mov	r5, r0
 800516a:	8bb9      	ldrh	r1, [r7, #28]
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <BSP_LCD_DisplayStringAt+0x180>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4813      	ldr	r0, [pc, #76]	; (80051c0 <BSP_LCD_DisplayStringAt+0x184>)
 8005172:	4613      	mov	r3, r2
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4403      	add	r3, r0
 800517c:	3308      	adds	r3, #8
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	889b      	ldrh	r3, [r3, #4]
 8005182:	fb03 f301 	mul.w	r3, r3, r1
 8005186:	1aeb      	subs	r3, r5, r3
 8005188:	b299      	uxth	r1, r3
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <BSP_LCD_DisplayStringAt+0x180>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	480c      	ldr	r0, [pc, #48]	; (80051c0 <BSP_LCD_DisplayStringAt+0x184>)
 8005190:	4613      	mov	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4403      	add	r3, r0
 800519a:	3308      	adds	r3, #8
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	889b      	ldrh	r3, [r3, #4]
 80051a0:	4299      	cmp	r1, r3
 80051a2:	bf2c      	ite	cs
 80051a4:	2301      	movcs	r3, #1
 80051a6:	2300      	movcc	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	4023      	ands	r3, r4
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1b6      	bne.n	8005120 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80051b2:	bf00      	nop
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000348 	.word	0x20000348
 80051c0:	2000034c 	.word	0x2000034c

080051c4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	6039      	str	r1, [r7, #0]
 80051ce:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80051d0:	f7ff feb2 	bl	8004f38 <BSP_LCD_GetFont>
 80051d4:	4603      	mov	r3, r0
 80051d6:	88db      	ldrh	r3, [r3, #6]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	fb12 f303 	smulbb	r3, r2, r3
 80051de:	b299      	uxth	r1, r3
 80051e0:	2303      	movs	r3, #3
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	2000      	movs	r0, #0
 80051e6:	f7ff ff29 	bl	800503c <BSP_LCD_DisplayStringAt>
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80051f4:	b5b0      	push	{r4, r5, r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	603a      	str	r2, [r7, #0]
 80051fe:	80fb      	strh	r3, [r7, #6]
 8005200:	460b      	mov	r3, r1
 8005202:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005204:	4b1d      	ldr	r3, [pc, #116]	; (800527c <BSP_LCD_DrawPixel+0x88>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <BSP_LCD_DrawPixel+0x8c>)
 800520a:	2134      	movs	r1, #52	; 0x34
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	4413      	add	r3, r2
 8005212:	3348      	adds	r3, #72	; 0x48
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d116      	bne.n	8005248 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800521a:	4b18      	ldr	r3, [pc, #96]	; (800527c <BSP_LCD_DrawPixel+0x88>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a18      	ldr	r2, [pc, #96]	; (8005280 <BSP_LCD_DrawPixel+0x8c>)
 8005220:	2134      	movs	r1, #52	; 0x34
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	4413      	add	r3, r2
 8005228:	335c      	adds	r3, #92	; 0x5c
 800522a:	681c      	ldr	r4, [r3, #0]
 800522c:	88bd      	ldrh	r5, [r7, #4]
 800522e:	f7ff fdaf 	bl	8004d90 <BSP_LCD_GetXSize>
 8005232:	4603      	mov	r3, r0
 8005234:	fb03 f205 	mul.w	r2, r3, r5
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	4413      	add	r3, r2
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4423      	add	r3, r4
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	b292      	uxth	r2, r2
 8005244:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8005246:	e015      	b.n	8005274 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <BSP_LCD_DrawPixel+0x88>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <BSP_LCD_DrawPixel+0x8c>)
 800524e:	2134      	movs	r1, #52	; 0x34
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	4413      	add	r3, r2
 8005256:	335c      	adds	r3, #92	; 0x5c
 8005258:	681c      	ldr	r4, [r3, #0]
 800525a:	88bd      	ldrh	r5, [r7, #4]
 800525c:	f7ff fd98 	bl	8004d90 <BSP_LCD_GetXSize>
 8005260:	4603      	mov	r3, r0
 8005262:	fb03 f205 	mul.w	r2, r3, r5
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4423      	add	r3, r4
 800526e:	461a      	mov	r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6013      	str	r3, [r2, #0]
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bdb0      	pop	{r4, r5, r7, pc}
 800527c:	20000348 	.word	0x20000348
 8005280:	200025e8 	.word	0x200025e8

08005284 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af02      	add	r7, sp, #8
 800528c:	4604      	mov	r4, r0
 800528e:	4608      	mov	r0, r1
 8005290:	4611      	mov	r1, r2
 8005292:	461a      	mov	r2, r3
 8005294:	4623      	mov	r3, r4
 8005296:	80fb      	strh	r3, [r7, #6]
 8005298:	4603      	mov	r3, r0
 800529a:	80bb      	strh	r3, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
 80052a0:	4613      	mov	r3, r2
 80052a2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80052a8:	4b30      	ldr	r3, [pc, #192]	; (800536c <BSP_LCD_FillRect+0xe8>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	4930      	ldr	r1, [pc, #192]	; (8005370 <BSP_LCD_FillRect+0xec>)
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fdf0 	bl	8004ea0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80052c0:	4b2a      	ldr	r3, [pc, #168]	; (800536c <BSP_LCD_FillRect+0xe8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2b      	ldr	r2, [pc, #172]	; (8005374 <BSP_LCD_FillRect+0xf0>)
 80052c6:	2134      	movs	r1, #52	; 0x34
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	4413      	add	r3, r2
 80052ce:	3348      	adds	r3, #72	; 0x48
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d114      	bne.n	8005300 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80052d6:	4b25      	ldr	r3, [pc, #148]	; (800536c <BSP_LCD_FillRect+0xe8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a26      	ldr	r2, [pc, #152]	; (8005374 <BSP_LCD_FillRect+0xf0>)
 80052dc:	2134      	movs	r1, #52	; 0x34
 80052de:	fb01 f303 	mul.w	r3, r1, r3
 80052e2:	4413      	add	r3, r2
 80052e4:	335c      	adds	r3, #92	; 0x5c
 80052e6:	681c      	ldr	r4, [r3, #0]
 80052e8:	f7ff fd52 	bl	8004d90 <BSP_LCD_GetXSize>
 80052ec:	4602      	mov	r2, r0
 80052ee:	88bb      	ldrh	r3, [r7, #4]
 80052f0:	fb03 f202 	mul.w	r2, r3, r2
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	4413      	add	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4423      	add	r3, r4
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e013      	b.n	8005328 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005300:	4b1a      	ldr	r3, [pc, #104]	; (800536c <BSP_LCD_FillRect+0xe8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1b      	ldr	r2, [pc, #108]	; (8005374 <BSP_LCD_FillRect+0xf0>)
 8005306:	2134      	movs	r1, #52	; 0x34
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	4413      	add	r3, r2
 800530e:	335c      	adds	r3, #92	; 0x5c
 8005310:	681c      	ldr	r4, [r3, #0]
 8005312:	f7ff fd3d 	bl	8004d90 <BSP_LCD_GetXSize>
 8005316:	4602      	mov	r2, r0
 8005318:	88bb      	ldrh	r3, [r7, #4]
 800531a:	fb03 f202 	mul.w	r2, r3, r2
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4423      	add	r3, r4
 8005326:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8005328:	4b10      	ldr	r3, [pc, #64]	; (800536c <BSP_LCD_FillRect+0xe8>)
 800532a:	681c      	ldr	r4, [r3, #0]
 800532c:	68fd      	ldr	r5, [r7, #12]
 800532e:	887e      	ldrh	r6, [r7, #2]
 8005330:	f8b7 8000 	ldrh.w	r8, [r7]
 8005334:	f7ff fd2c 	bl	8004d90 <BSP_LCD_GetXSize>
 8005338:	4602      	mov	r2, r0
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	1ad1      	subs	r1, r2, r3
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <BSP_LCD_FillRect+0xe8>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	480b      	ldr	r0, [pc, #44]	; (8005370 <BSP_LCD_FillRect+0xec>)
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4403      	add	r3, r0
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	9100      	str	r1, [sp, #0]
 8005354:	4643      	mov	r3, r8
 8005356:	4632      	mov	r2, r6
 8005358:	4629      	mov	r1, r5
 800535a:	4620      	mov	r0, r4
 800535c:	f000 f9ba 	bl	80056d4 <LL_FillBuffer>
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800536a:	bf00      	nop
 800536c:	20000348 	.word	0x20000348
 8005370:	2000034c 	.word	0x2000034c
 8005374:	200025e8 	.word	0x200025e8

08005378 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b090      	sub	sp, #64	; 0x40
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005382:	4b64      	ldr	r3, [pc, #400]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	4a63      	ldr	r2, [pc, #396]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800538c:	6453      	str	r3, [r2, #68]	; 0x44
 800538e:	4b61      	ldr	r3, [pc, #388]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800539a:	4b5e      	ldr	r3, [pc, #376]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	4a5d      	ldr	r2, [pc, #372]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053a4:	6313      	str	r3, [r2, #48]	; 0x30
 80053a6:	4b5b      	ldr	r3, [pc, #364]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053b2:	4b58      	ldr	r3, [pc, #352]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	4a57      	ldr	r2, [pc, #348]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053b8:	f043 0310 	orr.w	r3, r3, #16
 80053bc:	6313      	str	r3, [r2, #48]	; 0x30
 80053be:	4b55      	ldr	r3, [pc, #340]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80053ca:	4b52      	ldr	r3, [pc, #328]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	4a51      	ldr	r2, [pc, #324]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d4:	6313      	str	r3, [r2, #48]	; 0x30
 80053d6:	4b4f      	ldr	r3, [pc, #316]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80053e2:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	4a4b      	ldr	r2, [pc, #300]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ec:	6313      	str	r3, [r2, #48]	; 0x30
 80053ee:	4b49      	ldr	r3, [pc, #292]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80053fa:	4b46      	ldr	r3, [pc, #280]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4a45      	ldr	r2, [pc, #276]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005404:	6313      	str	r3, [r2, #48]	; 0x30
 8005406:	4b43      	ldr	r3, [pc, #268]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005412:	4b40      	ldr	r3, [pc, #256]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	4a3f      	ldr	r2, [pc, #252]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005418:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800541c:	6313      	str	r3, [r2, #48]	; 0x30
 800541e:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800542a:	4b3a      	ldr	r3, [pc, #232]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	4a39      	ldr	r2, [pc, #228]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005434:	6313      	str	r3, [r2, #48]	; 0x30
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005442:	4b34      	ldr	r3, [pc, #208]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	4a33      	ldr	r2, [pc, #204]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800544c:	6313      	str	r3, [r2, #48]	; 0x30
 800544e:	4b31      	ldr	r3, [pc, #196]	; (8005514 <BSP_LCD_MspInit+0x19c>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800545a:	2310      	movs	r3, #16
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800545e:	2302      	movs	r3, #2
 8005460:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005462:	2300      	movs	r3, #0
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005466:	2302      	movs	r3, #2
 8005468:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800546a:	230e      	movs	r3, #14
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800546e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005472:	4619      	mov	r1, r3
 8005474:	4828      	ldr	r0, [pc, #160]	; (8005518 <BSP_LCD_MspInit+0x1a0>)
 8005476:	f001 ffbd 	bl	80073f4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800547a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005480:	2302      	movs	r3, #2
 8005482:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005484:	2309      	movs	r3, #9
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800548c:	4619      	mov	r1, r3
 800548e:	4823      	ldr	r0, [pc, #140]	; (800551c <BSP_LCD_MspInit+0x1a4>)
 8005490:	f001 ffb0 	bl	80073f4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005494:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800549a:	2302      	movs	r3, #2
 800549c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800549e:	230e      	movs	r3, #14
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80054a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054a6:	4619      	mov	r1, r3
 80054a8:	481d      	ldr	r0, [pc, #116]	; (8005520 <BSP_LCD_MspInit+0x1a8>)
 80054aa:	f001 ffa3 	bl	80073f4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80054ae:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80054b4:	2302      	movs	r3, #2
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80054b8:	230e      	movs	r3, #14
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80054bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054c0:	4619      	mov	r1, r3
 80054c2:	4818      	ldr	r0, [pc, #96]	; (8005524 <BSP_LCD_MspInit+0x1ac>)
 80054c4:	f001 ff96 	bl	80073f4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80054c8:	23f7      	movs	r3, #247	; 0xf7
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80054cc:	2302      	movs	r3, #2
 80054ce:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80054d0:	230e      	movs	r3, #14
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80054d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054d8:	4619      	mov	r1, r3
 80054da:	4813      	ldr	r0, [pc, #76]	; (8005528 <BSP_LCD_MspInit+0x1b0>)
 80054dc:	f001 ff8a 	bl	80073f4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80054e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80054e6:	2301      	movs	r3, #1
 80054e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80054ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054ee:	4619      	mov	r1, r3
 80054f0:	480b      	ldr	r0, [pc, #44]	; (8005520 <BSP_LCD_MspInit+0x1a8>)
 80054f2:	f001 ff7f 	bl	80073f4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80054f6:	2308      	movs	r3, #8
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80054fa:	2301      	movs	r3, #1
 80054fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80054fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005502:	4619      	mov	r1, r3
 8005504:	4808      	ldr	r0, [pc, #32]	; (8005528 <BSP_LCD_MspInit+0x1b0>)
 8005506:	f001 ff75 	bl	80073f4 <HAL_GPIO_Init>
}
 800550a:	bf00      	nop
 800550c:	3740      	adds	r7, #64	; 0x40
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40023800 	.word	0x40023800
 8005518:	40021000 	.word	0x40021000
 800551c:	40021800 	.word	0x40021800
 8005520:	40022000 	.word	0x40022000
 8005524:	40022400 	.word	0x40022400
 8005528:	40022800 	.word	0x40022800

0800552c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005536:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <BSP_LCD_ClockConfig+0x34>)
 8005538:	2208      	movs	r2, #8
 800553a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800553c:	4b08      	ldr	r3, [pc, #32]	; (8005560 <BSP_LCD_ClockConfig+0x34>)
 800553e:	22c0      	movs	r2, #192	; 0xc0
 8005540:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005542:	4b07      	ldr	r3, [pc, #28]	; (8005560 <BSP_LCD_ClockConfig+0x34>)
 8005544:	2205      	movs	r2, #5
 8005546:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005548:	4b05      	ldr	r3, [pc, #20]	; (8005560 <BSP_LCD_ClockConfig+0x34>)
 800554a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800554e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005550:	4803      	ldr	r0, [pc, #12]	; (8005560 <BSP_LCD_ClockConfig+0x34>)
 8005552:	f005 faf9 	bl	800ab48 <HAL_RCCEx_PeriphCLKConfig>
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000364 	.word	0x20000364

08005564 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	603a      	str	r2, [r7, #0]
 800556e:	80fb      	strh	r3, [r7, #6]
 8005570:	460b      	mov	r3, r1
 8005572:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800557c:	4b53      	ldr	r3, [pc, #332]	; (80056cc <DrawChar+0x168>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4953      	ldr	r1, [pc, #332]	; (80056d0 <DrawChar+0x16c>)
 8005582:	4613      	mov	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	3308      	adds	r3, #8
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	88db      	ldrh	r3, [r3, #6]
 8005592:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005594:	4b4d      	ldr	r3, [pc, #308]	; (80056cc <DrawChar+0x168>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	494d      	ldr	r1, [pc, #308]	; (80056d0 <DrawChar+0x16c>)
 800559a:	4613      	mov	r3, r2
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3308      	adds	r3, #8
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	889b      	ldrh	r3, [r3, #4]
 80055aa:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80055ac:	8a3b      	ldrh	r3, [r7, #16]
 80055ae:	3307      	adds	r3, #7
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da00      	bge.n	80055b6 <DrawChar+0x52>
 80055b4:	3307      	adds	r3, #7
 80055b6:	10db      	asrs	r3, r3, #3
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	8a3b      	ldrh	r3, [r7, #16]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	e076      	b.n	80056ba <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80055cc:	8a3b      	ldrh	r3, [r7, #16]
 80055ce:	3307      	adds	r3, #7
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	da00      	bge.n	80055d6 <DrawChar+0x72>
 80055d4:	3307      	adds	r3, #7
 80055d6:	10db      	asrs	r3, r3, #3
 80055d8:	461a      	mov	r2, r3
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	fb03 f302 	mul.w	r3, r3, r2
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	4413      	add	r3, r2
 80055e4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80055e6:	8a3b      	ldrh	r3, [r7, #16]
 80055e8:	3307      	adds	r3, #7
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	da00      	bge.n	80055f0 <DrawChar+0x8c>
 80055ee:	3307      	adds	r3, #7
 80055f0:	10db      	asrs	r3, r3, #3
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d002      	beq.n	80055fc <DrawChar+0x98>
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d004      	beq.n	8005604 <DrawChar+0xa0>
 80055fa:	e00c      	b.n	8005616 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	617b      	str	r3, [r7, #20]
      break;
 8005602:	e016      	b.n	8005632 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	3201      	adds	r2, #1
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
      break;
 8005614:	e00d      	b.n	8005632 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	041a      	lsls	r2, r3, #16
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	3301      	adds	r3, #1
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	4313      	orrs	r3, r2
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	3202      	adds	r2, #2
 800562a:	7812      	ldrb	r2, [r2, #0]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
      break;
 8005630:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005632:	2300      	movs	r3, #0
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	e036      	b.n	80056a6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005638:	8a3a      	ldrh	r2, [r7, #16]
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	1ad2      	subs	r2, r2, r3
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	4413      	add	r3, r2
 8005642:	3b01      	subs	r3, #1
 8005644:	2201      	movs	r2, #1
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	461a      	mov	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d012      	beq.n	800567a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	b29a      	uxth	r2, r3
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	4413      	add	r3, r2
 800565c:	b298      	uxth	r0, r3
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <DrawChar+0x168>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	491b      	ldr	r1, [pc, #108]	; (80056d0 <DrawChar+0x16c>)
 8005664:	4613      	mov	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	88bb      	ldrh	r3, [r7, #4]
 8005672:	4619      	mov	r1, r3
 8005674:	f7ff fdbe 	bl	80051f4 <BSP_LCD_DrawPixel>
 8005678:	e012      	b.n	80056a0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	b29a      	uxth	r2, r3
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	4413      	add	r3, r2
 8005682:	b298      	uxth	r0, r3
 8005684:	4b11      	ldr	r3, [pc, #68]	; (80056cc <DrawChar+0x168>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4911      	ldr	r1, [pc, #68]	; (80056d0 <DrawChar+0x16c>)
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	3304      	adds	r3, #4
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	88bb      	ldrh	r3, [r7, #4]
 800569a:	4619      	mov	r1, r3
 800569c:	f7ff fdaa 	bl	80051f4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	8a3b      	ldrh	r3, [r7, #16]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d3c4      	bcc.n	8005638 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80056ae:	88bb      	ldrh	r3, [r7, #4]
 80056b0:	3301      	adds	r3, #1
 80056b2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	3301      	adds	r3, #1
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	8a7b      	ldrh	r3, [r7, #18]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d384      	bcc.n	80055cc <DrawChar+0x68>
  }
}
 80056c2:	bf00      	nop
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000348 	.word	0x20000348
 80056d0:	2000034c 	.word	0x2000034c

080056d4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80056e2:	4b1e      	ldr	r3, [pc, #120]	; (800575c <LL_FillBuffer+0x88>)
 80056e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80056e8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80056ea:	4b1d      	ldr	r3, [pc, #116]	; (8005760 <LL_FillBuffer+0x8c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <LL_FillBuffer+0x90>)
 80056f0:	2134      	movs	r1, #52	; 0x34
 80056f2:	fb01 f303 	mul.w	r3, r1, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	3348      	adds	r3, #72	; 0x48
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d103      	bne.n	8005708 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005700:	4b16      	ldr	r3, [pc, #88]	; (800575c <LL_FillBuffer+0x88>)
 8005702:	2202      	movs	r2, #2
 8005704:	609a      	str	r2, [r3, #8]
 8005706:	e002      	b.n	800570e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005708:	4b14      	ldr	r3, [pc, #80]	; (800575c <LL_FillBuffer+0x88>)
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800570e:	4a13      	ldr	r2, [pc, #76]	; (800575c <LL_FillBuffer+0x88>)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <LL_FillBuffer+0x88>)
 8005716:	4a14      	ldr	r2, [pc, #80]	; (8005768 <LL_FillBuffer+0x94>)
 8005718:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800571a:	4810      	ldr	r0, [pc, #64]	; (800575c <LL_FillBuffer+0x88>)
 800571c:	f001 face 	bl	8006cbc <HAL_DMA2D_Init>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d115      	bne.n	8005752 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	480c      	ldr	r0, [pc, #48]	; (800575c <LL_FillBuffer+0x88>)
 800572a:	f001 fd35 	bl	8007198 <HAL_DMA2D_ConfigLayer>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10e      	bne.n	8005752 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69f9      	ldr	r1, [r7, #28]
 800573e:	4807      	ldr	r0, [pc, #28]	; (800575c <LL_FillBuffer+0x88>)
 8005740:	f001 fb06 	bl	8006d50 <HAL_DMA2D_Start>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800574a:	210a      	movs	r1, #10
 800574c:	4803      	ldr	r0, [pc, #12]	; (800575c <LL_FillBuffer+0x88>)
 800574e:	f001 fb2a 	bl	8006da6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000308 	.word	0x20000308
 8005760:	20000348 	.word	0x20000348
 8005764:	200025e8 	.word	0x200025e8
 8005768:	4002b000 	.word	0x4002b000

0800576c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005770:	4b29      	ldr	r3, [pc, #164]	; (8005818 <BSP_SDRAM_Init+0xac>)
 8005772:	4a2a      	ldr	r2, [pc, #168]	; (800581c <BSP_SDRAM_Init+0xb0>)
 8005774:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <BSP_SDRAM_Init+0xb4>)
 8005778:	2202      	movs	r2, #2
 800577a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800577c:	4b28      	ldr	r3, [pc, #160]	; (8005820 <BSP_SDRAM_Init+0xb4>)
 800577e:	2207      	movs	r2, #7
 8005780:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005782:	4b27      	ldr	r3, [pc, #156]	; (8005820 <BSP_SDRAM_Init+0xb4>)
 8005784:	2204      	movs	r2, #4
 8005786:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <BSP_SDRAM_Init+0xb4>)
 800578a:	2207      	movs	r2, #7
 800578c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800578e:	4b24      	ldr	r3, [pc, #144]	; (8005820 <BSP_SDRAM_Init+0xb4>)
 8005790:	2202      	movs	r2, #2
 8005792:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005794:	4b22      	ldr	r3, [pc, #136]	; (8005820 <BSP_SDRAM_Init+0xb4>)
 8005796:	2202      	movs	r2, #2
 8005798:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800579a:	4b21      	ldr	r3, [pc, #132]	; (8005820 <BSP_SDRAM_Init+0xb4>)
 800579c:	2202      	movs	r2, #2
 800579e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80057a0:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80057a6:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80057ac:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057ae:	2204      	movs	r2, #4
 80057b0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80057b2:	4b19      	ldr	r3, [pc, #100]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057b4:	2210      	movs	r2, #16
 80057b6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80057be:	4b16      	ldr	r3, [pc, #88]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80057c6:	4b14      	ldr	r3, [pc, #80]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80057cc:	4b12      	ldr	r3, [pc, #72]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80057d4:	4b10      	ldr	r3, [pc, #64]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057da:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80057dc:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057de:	2200      	movs	r2, #0
 80057e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80057e2:	2100      	movs	r1, #0
 80057e4:	480c      	ldr	r0, [pc, #48]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057e6:	f000 f87f 	bl	80058e8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80057ea:	490d      	ldr	r1, [pc, #52]	; (8005820 <BSP_SDRAM_Init+0xb4>)
 80057ec:	480a      	ldr	r0, [pc, #40]	; (8005818 <BSP_SDRAM_Init+0xac>)
 80057ee:	f006 febc 	bl	800c56a <HAL_SDRAM_Init>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80057f8:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <BSP_SDRAM_Init+0xb8>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e002      	b.n	8005806 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005800:	4b08      	ldr	r3, [pc, #32]	; (8005824 <BSP_SDRAM_Init+0xb8>)
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005806:	f240 6003 	movw	r0, #1539	; 0x603
 800580a:	f000 f80d 	bl	8005828 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800580e:	4b05      	ldr	r3, [pc, #20]	; (8005824 <BSP_SDRAM_Init+0xb8>)
 8005810:	781b      	ldrb	r3, [r3, #0]
}
 8005812:	4618      	mov	r0, r3
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20002690 	.word	0x20002690
 800581c:	a0000140 	.word	0xa0000140
 8005820:	200003e8 	.word	0x200003e8
 8005824:	20000050 	.word	0x20000050

08005828 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005834:	4b2a      	ldr	r3, [pc, #168]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800583a:	4b29      	ldr	r3, [pc, #164]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800583c:	2210      	movs	r2, #16
 800583e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005840:	4b27      	ldr	r3, [pc, #156]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005842:	2201      	movs	r2, #1
 8005844:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005846:	4b26      	ldr	r3, [pc, #152]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005848:	2200      	movs	r2, #0
 800584a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800584c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005850:	4923      	ldr	r1, [pc, #140]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005852:	4824      	ldr	r0, [pc, #144]	; (80058e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005854:	f006 febd 	bl	800c5d2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005858:	2001      	movs	r0, #1
 800585a:	f000 f96b 	bl	8005b34 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800585e:	4b20      	ldr	r3, [pc, #128]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005860:	2202      	movs	r2, #2
 8005862:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005864:	4b1e      	ldr	r3, [pc, #120]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005866:	2210      	movs	r2, #16
 8005868:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800586a:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800586c:	2201      	movs	r2, #1
 800586e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005870:	4b1b      	ldr	r3, [pc, #108]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005872:	2200      	movs	r2, #0
 8005874:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800587a:	4919      	ldr	r1, [pc, #100]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800587c:	4819      	ldr	r0, [pc, #100]	; (80058e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800587e:	f006 fea8 	bl	800c5d2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005882:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005884:	2203      	movs	r2, #3
 8005886:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005888:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800588a:	2210      	movs	r2, #16
 800588c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800588e:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005890:	2208      	movs	r2, #8
 8005892:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005894:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005896:	2200      	movs	r2, #0
 8005898:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800589a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589e:	4910      	ldr	r1, [pc, #64]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058a0:	4810      	ldr	r0, [pc, #64]	; (80058e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80058a2:	f006 fe96 	bl	800c5d2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80058a6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80058aa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80058ac:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058ae:	2204      	movs	r2, #4
 80058b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80058b2:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058b4:	2210      	movs	r2, #16
 80058b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80058b8:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a07      	ldr	r2, [pc, #28]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058c2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80058c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c8:	4905      	ldr	r1, [pc, #20]	; (80058e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058ca:	4806      	ldr	r0, [pc, #24]	; (80058e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80058cc:	f006 fe81 	bl	800c5d2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4804      	ldr	r0, [pc, #16]	; (80058e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80058d4:	f006 fea8 	bl	800c628 <HAL_SDRAM_ProgramRefreshRate>
}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000404 	.word	0x20000404
 80058e4:	20002690 	.word	0x20002690

080058e8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b090      	sub	sp, #64	; 0x40
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80058f2:	4b70      	ldr	r3, [pc, #448]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	4a6f      	ldr	r2, [pc, #444]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	6393      	str	r3, [r2, #56]	; 0x38
 80058fe:	4b6d      	ldr	r3, [pc, #436]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800590a:	4b6a      	ldr	r3, [pc, #424]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	4a69      	ldr	r2, [pc, #420]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005914:	6313      	str	r3, [r2, #48]	; 0x30
 8005916:	4b67      	ldr	r3, [pc, #412]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005922:	4b64      	ldr	r3, [pc, #400]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	4a63      	ldr	r2, [pc, #396]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005928:	f043 0304 	orr.w	r3, r3, #4
 800592c:	6313      	str	r3, [r2, #48]	; 0x30
 800592e:	4b61      	ldr	r3, [pc, #388]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	623b      	str	r3, [r7, #32]
 8005938:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800593a:	4b5e      	ldr	r3, [pc, #376]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	4a5d      	ldr	r2, [pc, #372]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005940:	f043 0308 	orr.w	r3, r3, #8
 8005944:	6313      	str	r3, [r2, #48]	; 0x30
 8005946:	4b5b      	ldr	r3, [pc, #364]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	61fb      	str	r3, [r7, #28]
 8005950:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005952:	4b58      	ldr	r3, [pc, #352]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	4a57      	ldr	r2, [pc, #348]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005958:	f043 0310 	orr.w	r3, r3, #16
 800595c:	6313      	str	r3, [r2, #48]	; 0x30
 800595e:	4b55      	ldr	r3, [pc, #340]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800596a:	4b52      	ldr	r3, [pc, #328]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	4a51      	ldr	r2, [pc, #324]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005970:	f043 0320 	orr.w	r3, r3, #32
 8005974:	6313      	str	r3, [r2, #48]	; 0x30
 8005976:	4b4f      	ldr	r3, [pc, #316]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005982:	4b4c      	ldr	r3, [pc, #304]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	4a4b      	ldr	r2, [pc, #300]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598c:	6313      	str	r3, [r2, #48]	; 0x30
 800598e:	4b49      	ldr	r3, [pc, #292]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800599a:	4b46      	ldr	r3, [pc, #280]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	4a45      	ldr	r2, [pc, #276]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 80059a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a4:	6313      	str	r3, [r2, #48]	; 0x30
 80059a6:	4b43      	ldr	r3, [pc, #268]	; (8005ab4 <BSP_SDRAM_MspInit+0x1cc>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80059b2:	2302      	movs	r3, #2
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80059b6:	2301      	movs	r3, #1
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80059ba:	2302      	movs	r3, #2
 80059bc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80059be:	230c      	movs	r3, #12
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80059c2:	2308      	movs	r3, #8
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80059c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059ca:	4619      	mov	r1, r3
 80059cc:	483a      	ldr	r0, [pc, #232]	; (8005ab8 <BSP_SDRAM_MspInit+0x1d0>)
 80059ce:	f001 fd11 	bl	80073f4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80059d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80059d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059dc:	4619      	mov	r1, r3
 80059de:	4837      	ldr	r0, [pc, #220]	; (8005abc <BSP_SDRAM_MspInit+0x1d4>)
 80059e0:	f001 fd08 	bl	80073f4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80059e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80059ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059ee:	4619      	mov	r1, r3
 80059f0:	4833      	ldr	r0, [pc, #204]	; (8005ac0 <BSP_SDRAM_MspInit+0x1d8>)
 80059f2:	f001 fcff 	bl	80073f4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80059f6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80059fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a00:	4619      	mov	r1, r3
 8005a02:	4830      	ldr	r0, [pc, #192]	; (8005ac4 <BSP_SDRAM_MspInit+0x1dc>)
 8005a04:	f001 fcf6 	bl	80073f4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005a08:	f248 1333 	movw	r3, #33075	; 0x8133
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a12:	4619      	mov	r1, r3
 8005a14:	482c      	ldr	r0, [pc, #176]	; (8005ac8 <BSP_SDRAM_MspInit+0x1e0>)
 8005a16:	f001 fced 	bl	80073f4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005a1a:	2328      	movs	r3, #40	; 0x28
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a22:	4619      	mov	r1, r3
 8005a24:	4829      	ldr	r0, [pc, #164]	; (8005acc <BSP_SDRAM_MspInit+0x1e4>)
 8005a26:	f001 fce5 	bl	80073f4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005a2a:	4b29      	ldr	r3, [pc, #164]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005a30:	4b27      	ldr	r3, [pc, #156]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005a36:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005a3e:	4b24      	ldr	r3, [pc, #144]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a44:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a46:	4b22      	ldr	r3, [pc, #136]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a4c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005a4e:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a54:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005a56:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005a5c:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a62:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005a64:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005a6a:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005a76:	4b16      	ldr	r3, [pc, #88]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005a7c:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a7e:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <BSP_SDRAM_MspInit+0x1ec>)
 8005a80:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
 8005a88:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005a8e:	4810      	ldr	r0, [pc, #64]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a90:	f000 fdee 	bl	8006670 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005a94:	480e      	ldr	r0, [pc, #56]	; (8005ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8005a96:	f000 fd3d 	bl	8006514 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	210f      	movs	r1, #15
 8005a9e:	2038      	movs	r0, #56	; 0x38
 8005aa0:	f000 fbaa 	bl	80061f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005aa4:	2038      	movs	r0, #56	; 0x38
 8005aa6:	f000 fbc3 	bl	8006230 <HAL_NVIC_EnableIRQ>
}
 8005aaa:	bf00      	nop
 8005aac:	3740      	adds	r7, #64	; 0x40
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	40020800 	.word	0x40020800
 8005abc:	40020c00 	.word	0x40020c00
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	40021400 	.word	0x40021400
 8005ac8:	40021800 	.word	0x40021800
 8005acc:	40021c00 	.word	0x40021c00
 8005ad0:	20000414 	.word	0x20000414
 8005ad4:	40026410 	.word	0x40026410

08005ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005adc:	2003      	movs	r0, #3
 8005ade:	f000 fb80 	bl	80061e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f7fc ff06 	bl	80028f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005ae8:	f7fb ffdc 	bl	8001aa4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <HAL_IncTick+0x20>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <HAL_IncTick+0x24>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4413      	add	r3, r2
 8005b04:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <HAL_IncTick+0x24>)
 8005b06:	6013      	str	r3, [r2, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000058 	.word	0x20000058
 8005b18:	200026c4 	.word	0x200026c4

08005b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b20:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <HAL_GetTick+0x14>)
 8005b22:	681b      	ldr	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	200026c4 	.word	0x200026c4

08005b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b3c:	f7ff ffee 	bl	8005b1c <HAL_GetTick>
 8005b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d005      	beq.n	8005b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b4e:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <HAL_Delay+0x40>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b5a:	bf00      	nop
 8005b5c:	f7ff ffde 	bl	8005b1c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d8f7      	bhi.n	8005b5c <HAL_Delay+0x28>
  {
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000058 	.word	0x20000058

08005b78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e031      	b.n	8005bf2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fb ffac 	bl	8001af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d116      	bne.n	8005be4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <HAL_ADC_Init+0x84>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	f043 0202 	orr.w	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f964 	bl	8005e94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	f043 0201 	orr.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
 8005be2:	e001      	b.n	8005be8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	ffffeefd 	.word	0xffffeefd

08005c00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_ADC_ConfigChannel+0x1c>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e12a      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x272>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b09      	cmp	r3, #9
 8005c2a:	d93a      	bls.n	8005ca2 <HAL_ADC_ConfigChannel+0xa2>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c34:	d035      	beq.n	8005ca2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68d9      	ldr	r1, [r3, #12]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	3b1e      	subs	r3, #30
 8005c4c:	2207      	movs	r2, #7
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	43da      	mvns	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	400a      	ands	r2, r1
 8005c5a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a87      	ldr	r2, [pc, #540]	; (8005e80 <HAL_ADC_ConfigChannel+0x280>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d10a      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68d9      	ldr	r1, [r3, #12]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	061a      	lsls	r2, r3, #24
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c7a:	e035      	b.n	8005ce8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68d9      	ldr	r1, [r3, #12]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4403      	add	r3, r0
 8005c94:	3b1e      	subs	r3, #30
 8005c96:	409a      	lsls	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ca0:	e022      	b.n	8005ce8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6919      	ldr	r1, [r3, #16]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	2207      	movs	r2, #7
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	43da      	mvns	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	400a      	ands	r2, r1
 8005cc4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6919      	ldr	r1, [r3, #16]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	4603      	mov	r3, r0
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	4403      	add	r3, r0
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b06      	cmp	r3, #6
 8005cee:	d824      	bhi.n	8005d3a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	3b05      	subs	r3, #5
 8005d02:	221f      	movs	r2, #31
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	43da      	mvns	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	400a      	ands	r2, r1
 8005d10:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	4618      	mov	r0, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	3b05      	subs	r3, #5
 8005d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	635a      	str	r2, [r3, #52]	; 0x34
 8005d38:	e04c      	b.n	8005dd4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b0c      	cmp	r3, #12
 8005d40:	d824      	bhi.n	8005d8c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	3b23      	subs	r3, #35	; 0x23
 8005d54:	221f      	movs	r2, #31
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43da      	mvns	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	400a      	ands	r2, r1
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	4618      	mov	r0, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3b23      	subs	r3, #35	; 0x23
 8005d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
 8005d8a:	e023      	b.n	8005dd4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3b41      	subs	r3, #65	; 0x41
 8005d9e:	221f      	movs	r2, #31
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	43da      	mvns	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	400a      	ands	r2, r1
 8005dac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4618      	mov	r0, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3b41      	subs	r3, #65	; 0x41
 8005dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2a      	ldr	r2, [pc, #168]	; (8005e84 <HAL_ADC_ConfigChannel+0x284>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d10a      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x1f4>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de6:	d105      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005de8:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <HAL_ADC_ConfigChannel+0x288>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4a26      	ldr	r2, [pc, #152]	; (8005e88 <HAL_ADC_ConfigChannel+0x288>)
 8005dee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005df2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <HAL_ADC_ConfigChannel+0x284>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d109      	bne.n	8005e12 <HAL_ADC_ConfigChannel+0x212>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b12      	cmp	r3, #18
 8005e04:	d105      	bne.n	8005e12 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005e06:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <HAL_ADC_ConfigChannel+0x288>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4a1f      	ldr	r2, [pc, #124]	; (8005e88 <HAL_ADC_ConfigChannel+0x288>)
 8005e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e10:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <HAL_ADC_ConfigChannel+0x284>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d125      	bne.n	8005e68 <HAL_ADC_ConfigChannel+0x268>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a17      	ldr	r2, [pc, #92]	; (8005e80 <HAL_ADC_ConfigChannel+0x280>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <HAL_ADC_ConfigChannel+0x22e>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b11      	cmp	r3, #17
 8005e2c:	d11c      	bne.n	8005e68 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005e2e:	4b16      	ldr	r3, [pc, #88]	; (8005e88 <HAL_ADC_ConfigChannel+0x288>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <HAL_ADC_ConfigChannel+0x288>)
 8005e34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e38:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a10      	ldr	r2, [pc, #64]	; (8005e80 <HAL_ADC_ConfigChannel+0x280>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d111      	bne.n	8005e68 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005e44:	4b11      	ldr	r3, [pc, #68]	; (8005e8c <HAL_ADC_ConfigChannel+0x28c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a11      	ldr	r2, [pc, #68]	; (8005e90 <HAL_ADC_ConfigChannel+0x290>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	0c9a      	lsrs	r2, r3, #18
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005e5a:	e002      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f9      	bne.n	8005e5c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	10000012 	.word	0x10000012
 8005e84:	40012000 	.word	0x40012000
 8005e88:	40012300 	.word	0x40012300
 8005e8c:	20000000 	.word	0x20000000
 8005e90:	431bde83 	.word	0x431bde83

08005e94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005e9c:	4b78      	ldr	r3, [pc, #480]	; (8006080 <ADC_Init+0x1ec>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	4a77      	ldr	r2, [pc, #476]	; (8006080 <ADC_Init+0x1ec>)
 8005ea2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005ea6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005ea8:	4b75      	ldr	r3, [pc, #468]	; (8006080 <ADC_Init+0x1ec>)
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4973      	ldr	r1, [pc, #460]	; (8006080 <ADC_Init+0x1ec>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6859      	ldr	r1, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	021a      	lsls	r2, r3, #8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ee8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6859      	ldr	r1, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6899      	ldr	r1, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	4a58      	ldr	r2, [pc, #352]	; (8006084 <ADC_Init+0x1f0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d022      	beq.n	8005f6e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6899      	ldr	r1, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6899      	ldr	r1, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	609a      	str	r2, [r3, #8]
 8005f6c:	e00f      	b.n	8005f8e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0202 	bic.w	r2, r2, #2
 8005f9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6899      	ldr	r1, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	005a      	lsls	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005fda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	035a      	lsls	r2, r3, #13
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
 8005ff2:	e007      	b.n	8006004 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006002:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	3b01      	subs	r3, #1
 8006020:	051a      	lsls	r2, r3, #20
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6899      	ldr	r1, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006046:	025a      	lsls	r2, r3, #9
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6899      	ldr	r1, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	029a      	lsls	r2, r3, #10
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	40012300 	.word	0x40012300
 8006084:	0f000001 	.word	0x0f000001

08006088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <__NVIC_SetPriorityGrouping+0x40>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060a4:	4013      	ands	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80060b0:	4b06      	ldr	r3, [pc, #24]	; (80060cc <__NVIC_SetPriorityGrouping+0x44>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060b6:	4a04      	ldr	r2, [pc, #16]	; (80060c8 <__NVIC_SetPriorityGrouping+0x40>)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	60d3      	str	r3, [r2, #12]
}
 80060bc:	bf00      	nop
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	e000ed00 	.word	0xe000ed00
 80060cc:	05fa0000 	.word	0x05fa0000

080060d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060d4:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <__NVIC_GetPriorityGrouping+0x18>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	0a1b      	lsrs	r3, r3, #8
 80060da:	f003 0307 	and.w	r3, r3, #7
}
 80060de:	4618      	mov	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	e000ed00 	.word	0xe000ed00

080060ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	db0b      	blt.n	8006116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	f003 021f 	and.w	r2, r3, #31
 8006104:	4907      	ldr	r1, [pc, #28]	; (8006124 <__NVIC_EnableIRQ+0x38>)
 8006106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	2001      	movs	r0, #1
 800610e:	fa00 f202 	lsl.w	r2, r0, r2
 8006112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	e000e100 	.word	0xe000e100

08006128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	6039      	str	r1, [r7, #0]
 8006132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006138:	2b00      	cmp	r3, #0
 800613a:	db0a      	blt.n	8006152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	b2da      	uxtb	r2, r3
 8006140:	490c      	ldr	r1, [pc, #48]	; (8006174 <__NVIC_SetPriority+0x4c>)
 8006142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006146:	0112      	lsls	r2, r2, #4
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	440b      	add	r3, r1
 800614c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006150:	e00a      	b.n	8006168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	b2da      	uxtb	r2, r3
 8006156:	4908      	ldr	r1, [pc, #32]	; (8006178 <__NVIC_SetPriority+0x50>)
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	3b04      	subs	r3, #4
 8006160:	0112      	lsls	r2, r2, #4
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	440b      	add	r3, r1
 8006166:	761a      	strb	r2, [r3, #24]
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	e000e100 	.word	0xe000e100
 8006178:	e000ed00 	.word	0xe000ed00

0800617c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800617c:	b480      	push	{r7}
 800617e:	b089      	sub	sp, #36	; 0x24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f1c3 0307 	rsb	r3, r3, #7
 8006196:	2b04      	cmp	r3, #4
 8006198:	bf28      	it	cs
 800619a:	2304      	movcs	r3, #4
 800619c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3304      	adds	r3, #4
 80061a2:	2b06      	cmp	r3, #6
 80061a4:	d902      	bls.n	80061ac <NVIC_EncodePriority+0x30>
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	3b03      	subs	r3, #3
 80061aa:	e000      	b.n	80061ae <NVIC_EncodePriority+0x32>
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43da      	mvns	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	401a      	ands	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061c4:	f04f 31ff 	mov.w	r1, #4294967295
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	43d9      	mvns	r1, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d4:	4313      	orrs	r3, r2
         );
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3724      	adds	r7, #36	; 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff ff4c 	bl	8006088 <__NVIC_SetPriorityGrouping>
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800620a:	f7ff ff61 	bl	80060d0 <__NVIC_GetPriorityGrouping>
 800620e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	6978      	ldr	r0, [r7, #20]
 8006216:	f7ff ffb1 	bl	800617c <NVIC_EncodePriority>
 800621a:	4602      	mov	r2, r0
 800621c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006220:	4611      	mov	r1, r2
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff ff80 	bl	8006128 <__NVIC_SetPriority>
}
 8006228:	bf00      	nop
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800623a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff ff54 	bl	80060ec <__NVIC_EnableIRQ>
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e054      	b.n	8006308 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	7f5b      	ldrb	r3, [r3, #29]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb fc9a 	bl	8001ba8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	791b      	ldrb	r3, [r3, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10c      	bne.n	800629c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a22      	ldr	r2, [pc, #136]	; (8006310 <HAL_CRC_Init+0xc4>)
 8006288:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0218 	bic.w	r2, r2, #24
 8006298:	609a      	str	r2, [r3, #8]
 800629a:	e00c      	b.n	80062b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6899      	ldr	r1, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	461a      	mov	r2, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f834 	bl	8006314 <HAL_CRCEx_Polynomial_Set>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e028      	b.n	8006308 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	795b      	ldrb	r3, [r3, #5]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f04f 32ff 	mov.w	r2, #4294967295
 80062c6:	611a      	str	r2, [r3, #16]
 80062c8:	e004      	b.n	80062d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6912      	ldr	r2, [r2, #16]
 80062d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	04c11db7 	.word	0x04c11db7

08006314 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006324:	231f      	movs	r3, #31
 8006326:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006328:	bf00      	nop
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1e5a      	subs	r2, r3, #1
 800632e:	613a      	str	r2, [r7, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <HAL_CRCEx_Polynomial_Set+0x34>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f003 031f 	and.w	r3, r3, #31
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b18      	cmp	r3, #24
 800634c:	d846      	bhi.n	80063dc <HAL_CRCEx_Polynomial_Set+0xc8>
 800634e:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	080063e3 	.word	0x080063e3
 8006358:	080063dd 	.word	0x080063dd
 800635c:	080063dd 	.word	0x080063dd
 8006360:	080063dd 	.word	0x080063dd
 8006364:	080063dd 	.word	0x080063dd
 8006368:	080063dd 	.word	0x080063dd
 800636c:	080063dd 	.word	0x080063dd
 8006370:	080063dd 	.word	0x080063dd
 8006374:	080063d1 	.word	0x080063d1
 8006378:	080063dd 	.word	0x080063dd
 800637c:	080063dd 	.word	0x080063dd
 8006380:	080063dd 	.word	0x080063dd
 8006384:	080063dd 	.word	0x080063dd
 8006388:	080063dd 	.word	0x080063dd
 800638c:	080063dd 	.word	0x080063dd
 8006390:	080063dd 	.word	0x080063dd
 8006394:	080063c5 	.word	0x080063c5
 8006398:	080063dd 	.word	0x080063dd
 800639c:	080063dd 	.word	0x080063dd
 80063a0:	080063dd 	.word	0x080063dd
 80063a4:	080063dd 	.word	0x080063dd
 80063a8:	080063dd 	.word	0x080063dd
 80063ac:	080063dd 	.word	0x080063dd
 80063b0:	080063dd 	.word	0x080063dd
 80063b4:	080063b9 	.word	0x080063b9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b06      	cmp	r3, #6
 80063bc:	d913      	bls.n	80063e6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80063c2:	e010      	b.n	80063e6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b07      	cmp	r3, #7
 80063c8:	d90f      	bls.n	80063ea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80063ce:	e00c      	b.n	80063ea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b0f      	cmp	r3, #15
 80063d4:	d90b      	bls.n	80063ee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80063da:	e008      	b.n	80063ee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	75fb      	strb	r3, [r7, #23]
      break;
 80063e0:	e006      	b.n	80063f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80063e2:	bf00      	nop
 80063e4:	e004      	b.n	80063f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80063e6:	bf00      	nop
 80063e8:	e002      	b.n	80063f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80063ee:	bf00      	nop
  }
  if (status == HAL_OK)
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f023 0118 	bic.w	r1, r3, #24
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	430a      	orrs	r2, r1
 8006410:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006412:	7dfb      	ldrb	r3, [r7, #23]
}
 8006414:	4618      	mov	r0, r3
 8006416:	371c      	adds	r7, #28
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e069      	b.n	8006506 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d102      	bne.n	8006444 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fb fbd2 	bl	8001be8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6819      	ldr	r1, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <HAL_DCMI_Init+0xf0>)
 8006466:	400b      	ands	r3, r1
 8006468:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6819      	ldr	r1, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800647e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800648a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006496:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80064a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80064ae:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d112      	bne.n	80064e6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7f1b      	ldrb	r3, [r3, #28]
 80064c4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	7f5b      	ldrb	r3, [r3, #29]
 80064ca:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80064cc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7f9b      	ldrb	r3, [r3, #30]
 80064d2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80064d4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	7fdb      	ldrb	r3, [r3, #31]
 80064dc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80064e2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80064e4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 021e 	orr.w	r2, r2, #30
 80064f4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	ffe0f007 	.word	0xffe0f007

08006514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006520:	f7ff fafc 	bl	8005b1c <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e099      	b.n	8006664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006550:	e00f      	b.n	8006572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006552:	f7ff fae3 	bl	8005b1c <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b05      	cmp	r3, #5
 800655e:	d908      	bls.n	8006572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2203      	movs	r2, #3
 800656a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e078      	b.n	8006664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e8      	bne.n	8006552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4b38      	ldr	r3, [pc, #224]	; (800666c <HAL_DMA_Init+0x158>)
 800658c:	4013      	ands	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800659e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d107      	bne.n	80065dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	4313      	orrs	r3, r2
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0307 	bic.w	r3, r3, #7
 80065f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	2b04      	cmp	r3, #4
 8006604:	d117      	bne.n	8006636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00e      	beq.n	8006636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fad5 	bl	8006bc8 <DMA_CheckFifoParam>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2240      	movs	r2, #64	; 0x40
 8006628:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006632:	2301      	movs	r3, #1
 8006634:	e016      	b.n	8006664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa8c 	bl	8006b5c <DMA_CalcBaseAndBitshift>
 8006644:	4603      	mov	r3, r0
 8006646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664c:	223f      	movs	r2, #63	; 0x3f
 800664e:	409a      	lsls	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	f010803f 	.word	0xf010803f

08006670 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e050      	b.n	8006724 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d101      	bne.n	8006692 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
 8006690:	e048      	b.n	8006724 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2200      	movs	r2, #0
 80066a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2200      	movs	r2, #0
 80066b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2200      	movs	r2, #0
 80066b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2200      	movs	r2, #0
 80066c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2200      	movs	r2, #0
 80066c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2221      	movs	r2, #33	; 0x21
 80066d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa42 	bl	8006b5c <DMA_CalcBaseAndBitshift>
 80066d8:	4603      	mov	r3, r0
 80066da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e0:	223f      	movs	r2, #63	; 0x3f
 80066e2:	409a      	lsls	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_DMA_Start_IT+0x26>
 800674e:	2302      	movs	r3, #2
 8006750:	e048      	b.n	80067e4 <HAL_DMA_Start_IT+0xb8>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	d137      	bne.n	80067d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f9c0 	bl	8006b00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006784:	223f      	movs	r2, #63	; 0x3f
 8006786:	409a      	lsls	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0216 	orr.w	r2, r2, #22
 800679a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695a      	ldr	r2, [r3, #20]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d007      	beq.n	80067c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0208 	orr.w	r2, r2, #8
 80067c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e005      	b.n	80067e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80067de:	2302      	movs	r3, #2
 80067e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80067f8:	4b92      	ldr	r3, [pc, #584]	; (8006a44 <HAL_DMA_IRQHandler+0x258>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a92      	ldr	r2, [pc, #584]	; (8006a48 <HAL_DMA_IRQHandler+0x25c>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	0a9b      	lsrs	r3, r3, #10
 8006804:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006816:	2208      	movs	r2, #8
 8006818:	409a      	lsls	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4013      	ands	r3, r2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d01a      	beq.n	8006858 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d013      	beq.n	8006858 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0204 	bic.w	r2, r2, #4
 800683e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006844:	2208      	movs	r2, #8
 8006846:	409a      	lsls	r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006850:	f043 0201 	orr.w	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685c:	2201      	movs	r2, #1
 800685e:	409a      	lsls	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4013      	ands	r3, r2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d012      	beq.n	800688e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687a:	2201      	movs	r2, #1
 800687c:	409a      	lsls	r2, r3
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	f043 0202 	orr.w	r2, r3, #2
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006892:	2204      	movs	r2, #4
 8006894:	409a      	lsls	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4013      	ands	r3, r2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d012      	beq.n	80068c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b0:	2204      	movs	r2, #4
 80068b2:	409a      	lsls	r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068bc:	f043 0204 	orr.w	r2, r3, #4
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c8:	2210      	movs	r2, #16
 80068ca:	409a      	lsls	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d043      	beq.n	800695c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d03c      	beq.n	800695c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e6:	2210      	movs	r2, #16
 80068e8:	409a      	lsls	r2, r3
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d018      	beq.n	800692e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d108      	bne.n	800691c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d024      	beq.n	800695c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	4798      	blx	r3
 800691a:	e01f      	b.n	800695c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01b      	beq.n	800695c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
 800692c:	e016      	b.n	800695c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d107      	bne.n	800694c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0208 	bic.w	r2, r2, #8
 800694a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006960:	2220      	movs	r2, #32
 8006962:	409a      	lsls	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4013      	ands	r3, r2
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 808e 	beq.w	8006a8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 8086 	beq.w	8006a8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006982:	2220      	movs	r2, #32
 8006984:	409a      	lsls	r2, r3
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b05      	cmp	r3, #5
 8006994:	d136      	bne.n	8006a04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0216 	bic.w	r2, r2, #22
 80069a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695a      	ldr	r2, [r3, #20]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <HAL_DMA_IRQHandler+0x1da>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0208 	bic.w	r2, r2, #8
 80069d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069da:	223f      	movs	r2, #63	; 0x3f
 80069dc:	409a      	lsls	r2, r3
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d07d      	beq.n	8006af6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
        }
        return;
 8006a02:	e078      	b.n	8006af6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01c      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d108      	bne.n	8006a32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d030      	beq.n	8006a8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
 8006a30:	e02b      	b.n	8006a8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d027      	beq.n	8006a8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
 8006a42:	e022      	b.n	8006a8a <HAL_DMA_IRQHandler+0x29e>
 8006a44:	20000000 	.word	0x20000000
 8006a48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0210 	bic.w	r2, r2, #16
 8006a68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d032      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d022      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2205      	movs	r2, #5
 8006aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	60bb      	str	r3, [r7, #8]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d307      	bcc.n	8006ad2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f2      	bne.n	8006ab6 <HAL_DMA_IRQHandler+0x2ca>
 8006ad0:	e000      	b.n	8006ad4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006ad2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
 8006af4:	e000      	b.n	8006af8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006af6:	bf00      	nop
    }
  }
}
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop

08006b00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d108      	bne.n	8006b40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006b3e:	e007      	b.n	8006b50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	60da      	str	r2, [r3, #12]
}
 8006b50:	bf00      	nop
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	3b10      	subs	r3, #16
 8006b6c:	4a13      	ldr	r2, [pc, #76]	; (8006bbc <DMA_CalcBaseAndBitshift+0x60>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	091b      	lsrs	r3, r3, #4
 8006b74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b76:	4a12      	ldr	r2, [pc, #72]	; (8006bc0 <DMA_CalcBaseAndBitshift+0x64>)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d908      	bls.n	8006b9c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <DMA_CalcBaseAndBitshift+0x68>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	1d1a      	adds	r2, r3, #4
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	659a      	str	r2, [r3, #88]	; 0x58
 8006b9a:	e006      	b.n	8006baa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <DMA_CalcBaseAndBitshift+0x68>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	aaaaaaab 	.word	0xaaaaaaab
 8006bc0:	080139d4 	.word	0x080139d4
 8006bc4:	fffffc00 	.word	0xfffffc00

08006bc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d11f      	bne.n	8006c22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d855      	bhi.n	8006c94 <DMA_CheckFifoParam+0xcc>
 8006be8:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <DMA_CheckFifoParam+0x28>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c01 	.word	0x08006c01
 8006bf4:	08006c13 	.word	0x08006c13
 8006bf8:	08006c01 	.word	0x08006c01
 8006bfc:	08006c95 	.word	0x08006c95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d045      	beq.n	8006c98 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c10:	e042      	b.n	8006c98 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c1a:	d13f      	bne.n	8006c9c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c20:	e03c      	b.n	8006c9c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c2a:	d121      	bne.n	8006c70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d836      	bhi.n	8006ca0 <DMA_CheckFifoParam+0xd8>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <DMA_CheckFifoParam+0x70>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c4f 	.word	0x08006c4f
 8006c40:	08006c49 	.word	0x08006c49
 8006c44:	08006c61 	.word	0x08006c61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c4c:	e02f      	b.n	8006cae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d024      	beq.n	8006ca4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c5e:	e021      	b.n	8006ca4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c68:	d11e      	bne.n	8006ca8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c6e:	e01b      	b.n	8006ca8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d902      	bls.n	8006c7c <DMA_CheckFifoParam+0xb4>
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d003      	beq.n	8006c82 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c7a:	e018      	b.n	8006cae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c80:	e015      	b.n	8006cae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00e      	beq.n	8006cac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	73fb      	strb	r3, [r7, #15]
      break;
 8006c92:	e00b      	b.n	8006cac <DMA_CheckFifoParam+0xe4>
      break;
 8006c94:	bf00      	nop
 8006c96:	e00a      	b.n	8006cae <DMA_CheckFifoParam+0xe6>
      break;
 8006c98:	bf00      	nop
 8006c9a:	e008      	b.n	8006cae <DMA_CheckFifoParam+0xe6>
      break;
 8006c9c:	bf00      	nop
 8006c9e:	e006      	b.n	8006cae <DMA_CheckFifoParam+0xe6>
      break;
 8006ca0:	bf00      	nop
 8006ca2:	e004      	b.n	8006cae <DMA_CheckFifoParam+0xe6>
      break;
 8006ca4:	bf00      	nop
 8006ca6:	e002      	b.n	8006cae <DMA_CheckFifoParam+0xe6>
      break;   
 8006ca8:	bf00      	nop
 8006caa:	e000      	b.n	8006cae <DMA_CheckFifoParam+0xe6>
      break;
 8006cac:	bf00      	nop
    }
  } 
  
  return status; 
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e039      	b.n	8006d42 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fb f83e 	bl	8001d64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0c:	f023 0107 	bic.w	r1, r3, #7
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_DMA2D_Init+0x90>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68d1      	ldr	r1, [r2, #12]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6812      	ldr	r2, [r2, #0]
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	ffffc000 	.word	0xffffc000

08006d50 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_DMA2D_Start+0x1c>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e018      	b.n	8006d9e <HAL_DMA2D_Start+0x4e>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fa98 	bl	80072bc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b086      	sub	sp, #24
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d056      	beq.n	8006e70 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006dc2:	f7fe feab 	bl	8005b1c <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006dc8:	e04b      	b.n	8006e62 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d023      	beq.n	8006e24 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dea:	f043 0202 	orr.w	r2, r3, #2
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e00:	f043 0201 	orr.w	r2, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2221      	movs	r2, #33	; 0x21
 8006e0e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2204      	movs	r2, #4
 8006e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0a5      	b.n	8006f70 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d01a      	beq.n	8006e62 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006e2c:	f7fe fe76 	bl	8005b1c <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d302      	bcc.n	8006e42 <HAL_DMA2D_PollForTransfer+0x9c>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10f      	bne.n	8006e62 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e46:	f043 0220 	orr.w	r2, r3, #32
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2203      	movs	r2, #3
 8006e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e086      	b.n	8006f70 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0ac      	beq.n	8006dca <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d061      	beq.n	8006f56 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e92:	f7fe fe43 	bl	8005b1c <HAL_GetTick>
 8006e96:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006e98:	e056      	b.n	8006f48 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d02e      	beq.n	8006f0a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eba:	f043 0204 	orr.w	r2, r3, #4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed0:	f043 0202 	orr.w	r2, r3, #2
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee6:	f043 0201 	orr.w	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2229      	movs	r2, #41	; 0x29
 8006ef4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e032      	b.n	8006f70 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f10:	d01a      	beq.n	8006f48 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006f12:	f7fe fe03 	bl	8005b1c <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d302      	bcc.n	8006f28 <HAL_DMA2D_PollForTransfer+0x182>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10f      	bne.n	8006f48 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2c:	f043 0220 	orr.w	r2, r3, #32
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2203      	movs	r2, #3
 8006f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e013      	b.n	8006f70 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f003 0310 	and.w	r3, r3, #16
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0a1      	beq.n	8006e9a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2212      	movs	r2, #18
 8006f5c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d026      	beq.n	8006fe8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d021      	beq.n	8006fe8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fb2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb8:	f043 0201 	orr.w	r2, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d026      	beq.n	8007040 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d021      	beq.n	8007040 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800700a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2220      	movs	r2, #32
 8007012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007018:	f043 0202 	orr.w	r2, r3, #2
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2204      	movs	r2, #4
 8007024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d026      	beq.n	8007098 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007050:	2b00      	cmp	r3, #0
 8007052:	d021      	beq.n	8007098 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007062:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2208      	movs	r2, #8
 800706a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	f043 0204 	orr.w	r2, r3, #4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2204      	movs	r2, #4
 800707c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d013      	beq.n	80070ca <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00e      	beq.n	80070ca <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ba:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2204      	movs	r2, #4
 80070c2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f853 	bl	8007170 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d024      	beq.n	800711e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d01f      	beq.n	800711e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070ec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2202      	movs	r2, #2
 80070f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01f      	beq.n	8007168 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01a      	beq.n	8007168 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007140:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2210      	movs	r2, #16
 8007148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f80e 	bl	8007184 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_DMA2D_ConfigLayer+0x20>
 80071b4:	2302      	movs	r3, #2
 80071b6:	e079      	b.n	80072ac <HAL_DMA2D_ConfigLayer+0x114>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	3318      	adds	r3, #24
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80071e2:	4b35      	ldr	r3, [pc, #212]	; (80072b8 <HAL_DMA2D_ConfigLayer+0x120>)
 80071e4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b0a      	cmp	r3, #10
 80071ec:	d003      	beq.n	80071f6 <HAL_DMA2D_ConfigLayer+0x5e>
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b09      	cmp	r3, #9
 80071f4:	d107      	bne.n	8007206 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	e005      	b.n	8007212 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	061b      	lsls	r3, r3, #24
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d120      	bne.n	800725a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	43db      	mvns	r3, r3
 8007222:	ea02 0103 	and.w	r1, r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	430a      	orrs	r2, r1
 800722e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b0a      	cmp	r3, #10
 8007240:	d003      	beq.n	800724a <HAL_DMA2D_ConfigLayer+0xb2>
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b09      	cmp	r3, #9
 8007248:	d127      	bne.n	800729a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007256:	629a      	str	r2, [r3, #40]	; 0x28
 8007258:	e01f      	b.n	800729a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	43db      	mvns	r3, r3
 8007264:	ea02 0103 	and.w	r1, r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	430a      	orrs	r2, r1
 8007270:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2b0a      	cmp	r3, #10
 8007282:	d003      	beq.n	800728c <HAL_DMA2D_ConfigLayer+0xf4>
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b09      	cmp	r3, #9
 800728a:	d106      	bne.n	800729a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007298:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	ff03000f 	.word	0xff03000f

080072bc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80072bc:	b480      	push	{r7}
 80072be:	b08b      	sub	sp, #44	; 0x2c
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	041a      	lsls	r2, r3, #16
 80072d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072da:	431a      	orrs	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072f4:	d174      	bne.n	80073e0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80072fc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007304:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800730c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d108      	bne.n	800732e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	431a      	orrs	r2, r3
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	4313      	orrs	r3, r2
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
 800732c:	e053      	b.n	80073d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d106      	bne.n	8007344 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	4313      	orrs	r3, r2
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
 8007342:	e048      	b.n	80073d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d111      	bne.n	8007370 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	0cdb      	lsrs	r3, r3, #19
 8007350:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	0a9b      	lsrs	r3, r3, #10
 8007356:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	08db      	lsrs	r3, r3, #3
 800735c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	02db      	lsls	r3, r3, #11
 8007366:	4313      	orrs	r3, r2
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
 800736e:	e032      	b.n	80073d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b03      	cmp	r3, #3
 8007376:	d117      	bne.n	80073a8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	0fdb      	lsrs	r3, r3, #31
 800737c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	0cdb      	lsrs	r3, r3, #19
 8007382:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	0adb      	lsrs	r3, r3, #11
 8007388:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	08db      	lsrs	r3, r3, #3
 800738e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	029b      	lsls	r3, r3, #10
 8007398:	431a      	orrs	r2, r3
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	03db      	lsls	r3, r3, #15
 800739e:	4313      	orrs	r3, r2
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
 80073a6:	e016      	b.n	80073d6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	0f1b      	lsrs	r3, r3, #28
 80073ac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	0d1b      	lsrs	r3, r3, #20
 80073b2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	0b1b      	lsrs	r3, r3, #12
 80073b8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	091b      	lsrs	r3, r3, #4
 80073be:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	011a      	lsls	r2, r3, #4
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	021b      	lsls	r3, r3, #8
 80073c8:	431a      	orrs	r2, r3
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	031b      	lsls	r3, r3, #12
 80073ce:	4313      	orrs	r3, r2
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073dc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80073de:	e003      	b.n	80073e8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	60da      	str	r2, [r3, #12]
}
 80073e8:	bf00      	nop
 80073ea:	372c      	adds	r7, #44	; 0x2c
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b089      	sub	sp, #36	; 0x24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80073fe:	2300      	movs	r3, #0
 8007400:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800740a:	2300      	movs	r3, #0
 800740c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	e175      	b.n	8007700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007414:	2201      	movs	r2, #1
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	fa02 f303 	lsl.w	r3, r2, r3
 800741c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4013      	ands	r3, r2
 8007426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	429a      	cmp	r2, r3
 800742e:	f040 8164 	bne.w	80076fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d00b      	beq.n	8007452 <HAL_GPIO_Init+0x5e>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d007      	beq.n	8007452 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007446:	2b11      	cmp	r3, #17
 8007448:	d003      	beq.n	8007452 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b12      	cmp	r3, #18
 8007450:	d130      	bne.n	80074b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	2203      	movs	r2, #3
 800745e:	fa02 f303 	lsl.w	r3, r2, r3
 8007462:	43db      	mvns	r3, r3
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	4013      	ands	r3, r2
 8007468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	4313      	orrs	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007488:	2201      	movs	r2, #1
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	43db      	mvns	r3, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	4013      	ands	r3, r2
 8007496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	091b      	lsrs	r3, r3, #4
 800749e:	f003 0201 	and.w	r2, r3, #1
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	2203      	movs	r2, #3
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	43db      	mvns	r3, r3
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	4013      	ands	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	fa02 f303 	lsl.w	r3, r2, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4313      	orrs	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d003      	beq.n	80074f4 <HAL_GPIO_Init+0x100>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b12      	cmp	r3, #18
 80074f2:	d123      	bne.n	800753c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	08da      	lsrs	r2, r3, #3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3208      	adds	r2, #8
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	220f      	movs	r2, #15
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	43db      	mvns	r3, r3
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	4013      	ands	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	4313      	orrs	r3, r2
 800752c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	08da      	lsrs	r2, r3, #3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3208      	adds	r2, #8
 8007536:	69b9      	ldr	r1, [r7, #24]
 8007538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	2203      	movs	r2, #3
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	43db      	mvns	r3, r3
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	4013      	ands	r3, r2
 8007552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f003 0203 	and.w	r2, r3, #3
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4313      	orrs	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80be 	beq.w	80076fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800757e:	4b65      	ldr	r3, [pc, #404]	; (8007714 <HAL_GPIO_Init+0x320>)
 8007580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007582:	4a64      	ldr	r2, [pc, #400]	; (8007714 <HAL_GPIO_Init+0x320>)
 8007584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007588:	6453      	str	r3, [r2, #68]	; 0x44
 800758a:	4b62      	ldr	r3, [pc, #392]	; (8007714 <HAL_GPIO_Init+0x320>)
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007596:	4a60      	ldr	r2, [pc, #384]	; (8007718 <HAL_GPIO_Init+0x324>)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	089b      	lsrs	r3, r3, #2
 800759c:	3302      	adds	r3, #2
 800759e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	220f      	movs	r2, #15
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4013      	ands	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a57      	ldr	r2, [pc, #348]	; (800771c <HAL_GPIO_Init+0x328>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d037      	beq.n	8007632 <HAL_GPIO_Init+0x23e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a56      	ldr	r2, [pc, #344]	; (8007720 <HAL_GPIO_Init+0x32c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d031      	beq.n	800762e <HAL_GPIO_Init+0x23a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a55      	ldr	r2, [pc, #340]	; (8007724 <HAL_GPIO_Init+0x330>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d02b      	beq.n	800762a <HAL_GPIO_Init+0x236>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a54      	ldr	r2, [pc, #336]	; (8007728 <HAL_GPIO_Init+0x334>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d025      	beq.n	8007626 <HAL_GPIO_Init+0x232>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a53      	ldr	r2, [pc, #332]	; (800772c <HAL_GPIO_Init+0x338>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01f      	beq.n	8007622 <HAL_GPIO_Init+0x22e>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a52      	ldr	r2, [pc, #328]	; (8007730 <HAL_GPIO_Init+0x33c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d019      	beq.n	800761e <HAL_GPIO_Init+0x22a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a51      	ldr	r2, [pc, #324]	; (8007734 <HAL_GPIO_Init+0x340>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d013      	beq.n	800761a <HAL_GPIO_Init+0x226>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a50      	ldr	r2, [pc, #320]	; (8007738 <HAL_GPIO_Init+0x344>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00d      	beq.n	8007616 <HAL_GPIO_Init+0x222>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a4f      	ldr	r2, [pc, #316]	; (800773c <HAL_GPIO_Init+0x348>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d007      	beq.n	8007612 <HAL_GPIO_Init+0x21e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a4e      	ldr	r2, [pc, #312]	; (8007740 <HAL_GPIO_Init+0x34c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d101      	bne.n	800760e <HAL_GPIO_Init+0x21a>
 800760a:	2309      	movs	r3, #9
 800760c:	e012      	b.n	8007634 <HAL_GPIO_Init+0x240>
 800760e:	230a      	movs	r3, #10
 8007610:	e010      	b.n	8007634 <HAL_GPIO_Init+0x240>
 8007612:	2308      	movs	r3, #8
 8007614:	e00e      	b.n	8007634 <HAL_GPIO_Init+0x240>
 8007616:	2307      	movs	r3, #7
 8007618:	e00c      	b.n	8007634 <HAL_GPIO_Init+0x240>
 800761a:	2306      	movs	r3, #6
 800761c:	e00a      	b.n	8007634 <HAL_GPIO_Init+0x240>
 800761e:	2305      	movs	r3, #5
 8007620:	e008      	b.n	8007634 <HAL_GPIO_Init+0x240>
 8007622:	2304      	movs	r3, #4
 8007624:	e006      	b.n	8007634 <HAL_GPIO_Init+0x240>
 8007626:	2303      	movs	r3, #3
 8007628:	e004      	b.n	8007634 <HAL_GPIO_Init+0x240>
 800762a:	2302      	movs	r3, #2
 800762c:	e002      	b.n	8007634 <HAL_GPIO_Init+0x240>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <HAL_GPIO_Init+0x240>
 8007632:	2300      	movs	r3, #0
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	f002 0203 	and.w	r2, r2, #3
 800763a:	0092      	lsls	r2, r2, #2
 800763c:	4093      	lsls	r3, r2
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	4313      	orrs	r3, r2
 8007642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007644:	4934      	ldr	r1, [pc, #208]	; (8007718 <HAL_GPIO_Init+0x324>)
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	089b      	lsrs	r3, r3, #2
 800764a:	3302      	adds	r3, #2
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007652:	4b3c      	ldr	r3, [pc, #240]	; (8007744 <HAL_GPIO_Init+0x350>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	43db      	mvns	r3, r3
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	4013      	ands	r3, r2
 8007660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007676:	4a33      	ldr	r2, [pc, #204]	; (8007744 <HAL_GPIO_Init+0x350>)
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800767c:	4b31      	ldr	r3, [pc, #196]	; (8007744 <HAL_GPIO_Init+0x350>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	43db      	mvns	r3, r3
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	4013      	ands	r3, r2
 800768a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	4313      	orrs	r3, r2
 800769e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80076a0:	4a28      	ldr	r2, [pc, #160]	; (8007744 <HAL_GPIO_Init+0x350>)
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076a6:	4b27      	ldr	r3, [pc, #156]	; (8007744 <HAL_GPIO_Init+0x350>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	43db      	mvns	r3, r3
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	4013      	ands	r3, r2
 80076b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <HAL_GPIO_Init+0x350>)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076d0:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <HAL_GPIO_Init+0x350>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	43db      	mvns	r3, r3
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	4013      	ands	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076f4:	4a13      	ldr	r2, [pc, #76]	; (8007744 <HAL_GPIO_Init+0x350>)
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	3301      	adds	r3, #1
 80076fe:	61fb      	str	r3, [r7, #28]
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	2b0f      	cmp	r3, #15
 8007704:	f67f ae86 	bls.w	8007414 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007708:	bf00      	nop
 800770a:	3724      	adds	r7, #36	; 0x24
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	40023800 	.word	0x40023800
 8007718:	40013800 	.word	0x40013800
 800771c:	40020000 	.word	0x40020000
 8007720:	40020400 	.word	0x40020400
 8007724:	40020800 	.word	0x40020800
 8007728:	40020c00 	.word	0x40020c00
 800772c:	40021000 	.word	0x40021000
 8007730:	40021400 	.word	0x40021400
 8007734:	40021800 	.word	0x40021800
 8007738:	40021c00 	.word	0x40021c00
 800773c:	40022000 	.word	0x40022000
 8007740:	40022400 	.word	0x40022400
 8007744:	40013c00 	.word	0x40013c00

08007748 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007752:	2300      	movs	r3, #0
 8007754:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800775a:	2300      	movs	r3, #0
 800775c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	e0d9      	b.n	8007918 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007764:	2201      	movs	r2, #1
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	fa02 f303 	lsl.w	r3, r2, r3
 800776c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	4013      	ands	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	429a      	cmp	r2, r3
 800777c:	f040 80c9 	bne.w	8007912 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007780:	4a6a      	ldr	r2, [pc, #424]	; (800792c <HAL_GPIO_DeInit+0x1e4>)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	089b      	lsrs	r3, r3, #2
 8007786:	3302      	adds	r3, #2
 8007788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800778c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	220f      	movs	r2, #15
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	4013      	ands	r3, r2
 80077a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a62      	ldr	r2, [pc, #392]	; (8007930 <HAL_GPIO_DeInit+0x1e8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d037      	beq.n	800781a <HAL_GPIO_DeInit+0xd2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a61      	ldr	r2, [pc, #388]	; (8007934 <HAL_GPIO_DeInit+0x1ec>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d031      	beq.n	8007816 <HAL_GPIO_DeInit+0xce>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a60      	ldr	r2, [pc, #384]	; (8007938 <HAL_GPIO_DeInit+0x1f0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d02b      	beq.n	8007812 <HAL_GPIO_DeInit+0xca>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a5f      	ldr	r2, [pc, #380]	; (800793c <HAL_GPIO_DeInit+0x1f4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d025      	beq.n	800780e <HAL_GPIO_DeInit+0xc6>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a5e      	ldr	r2, [pc, #376]	; (8007940 <HAL_GPIO_DeInit+0x1f8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d01f      	beq.n	800780a <HAL_GPIO_DeInit+0xc2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a5d      	ldr	r2, [pc, #372]	; (8007944 <HAL_GPIO_DeInit+0x1fc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d019      	beq.n	8007806 <HAL_GPIO_DeInit+0xbe>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a5c      	ldr	r2, [pc, #368]	; (8007948 <HAL_GPIO_DeInit+0x200>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d013      	beq.n	8007802 <HAL_GPIO_DeInit+0xba>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a5b      	ldr	r2, [pc, #364]	; (800794c <HAL_GPIO_DeInit+0x204>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00d      	beq.n	80077fe <HAL_GPIO_DeInit+0xb6>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a5a      	ldr	r2, [pc, #360]	; (8007950 <HAL_GPIO_DeInit+0x208>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d007      	beq.n	80077fa <HAL_GPIO_DeInit+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a59      	ldr	r2, [pc, #356]	; (8007954 <HAL_GPIO_DeInit+0x20c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d101      	bne.n	80077f6 <HAL_GPIO_DeInit+0xae>
 80077f2:	2309      	movs	r3, #9
 80077f4:	e012      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 80077f6:	230a      	movs	r3, #10
 80077f8:	e010      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 80077fa:	2308      	movs	r3, #8
 80077fc:	e00e      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 80077fe:	2307      	movs	r3, #7
 8007800:	e00c      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 8007802:	2306      	movs	r3, #6
 8007804:	e00a      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 8007806:	2305      	movs	r3, #5
 8007808:	e008      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 800780a:	2304      	movs	r3, #4
 800780c:	e006      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 800780e:	2303      	movs	r3, #3
 8007810:	e004      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 8007812:	2302      	movs	r3, #2
 8007814:	e002      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 8007816:	2301      	movs	r3, #1
 8007818:	e000      	b.n	800781c <HAL_GPIO_DeInit+0xd4>
 800781a:	2300      	movs	r3, #0
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	f002 0203 	and.w	r2, r2, #3
 8007822:	0092      	lsls	r2, r2, #2
 8007824:	4093      	lsls	r3, r2
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	429a      	cmp	r2, r3
 800782a:	d132      	bne.n	8007892 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800782c:	4b4a      	ldr	r3, [pc, #296]	; (8007958 <HAL_GPIO_DeInit+0x210>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	43db      	mvns	r3, r3
 8007834:	4948      	ldr	r1, [pc, #288]	; (8007958 <HAL_GPIO_DeInit+0x210>)
 8007836:	4013      	ands	r3, r2
 8007838:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800783a:	4b47      	ldr	r3, [pc, #284]	; (8007958 <HAL_GPIO_DeInit+0x210>)
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	43db      	mvns	r3, r3
 8007842:	4945      	ldr	r1, [pc, #276]	; (8007958 <HAL_GPIO_DeInit+0x210>)
 8007844:	4013      	ands	r3, r2
 8007846:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007848:	4b43      	ldr	r3, [pc, #268]	; (8007958 <HAL_GPIO_DeInit+0x210>)
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	43db      	mvns	r3, r3
 8007850:	4941      	ldr	r1, [pc, #260]	; (8007958 <HAL_GPIO_DeInit+0x210>)
 8007852:	4013      	ands	r3, r2
 8007854:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007856:	4b40      	ldr	r3, [pc, #256]	; (8007958 <HAL_GPIO_DeInit+0x210>)
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	43db      	mvns	r3, r3
 800785e:	493e      	ldr	r1, [pc, #248]	; (8007958 <HAL_GPIO_DeInit+0x210>)
 8007860:	4013      	ands	r3, r2
 8007862:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	220f      	movs	r2, #15
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007874:	4a2d      	ldr	r2, [pc, #180]	; (800792c <HAL_GPIO_DeInit+0x1e4>)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	089b      	lsrs	r3, r3, #2
 800787a:	3302      	adds	r3, #2
 800787c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	43da      	mvns	r2, r3
 8007884:	4829      	ldr	r0, [pc, #164]	; (800792c <HAL_GPIO_DeInit+0x1e4>)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	089b      	lsrs	r3, r3, #2
 800788a:	400a      	ands	r2, r1
 800788c:	3302      	adds	r3, #2
 800788e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	2103      	movs	r1, #3
 800789c:	fa01 f303 	lsl.w	r3, r1, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	401a      	ands	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	08da      	lsrs	r2, r3, #3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3208      	adds	r2, #8
 80078b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	220f      	movs	r2, #15
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	43db      	mvns	r3, r3
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	08d2      	lsrs	r2, r2, #3
 80078c8:	4019      	ands	r1, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3208      	adds	r2, #8
 80078ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	2103      	movs	r1, #3
 80078dc:	fa01 f303 	lsl.w	r3, r1, r3
 80078e0:	43db      	mvns	r3, r3
 80078e2:	401a      	ands	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	2101      	movs	r1, #1
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	fa01 f303 	lsl.w	r3, r1, r3
 80078f4:	43db      	mvns	r3, r3
 80078f6:	401a      	ands	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	2103      	movs	r1, #3
 8007906:	fa01 f303 	lsl.w	r3, r1, r3
 800790a:	43db      	mvns	r3, r3
 800790c:	401a      	ands	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	3301      	adds	r3, #1
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b0f      	cmp	r3, #15
 800791c:	f67f af22 	bls.w	8007764 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	40013800 	.word	0x40013800
 8007930:	40020000 	.word	0x40020000
 8007934:	40020400 	.word	0x40020400
 8007938:	40020800 	.word	0x40020800
 800793c:	40020c00 	.word	0x40020c00
 8007940:	40021000 	.word	0x40021000
 8007944:	40021400 	.word	0x40021400
 8007948:	40021800 	.word	0x40021800
 800794c:	40021c00 	.word	0x40021c00
 8007950:	40022000 	.word	0x40022000
 8007954:	40022400 	.word	0x40022400
 8007958:	40013c00 	.word	0x40013c00

0800795c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	807b      	strh	r3, [r7, #2]
 8007968:	4613      	mov	r3, r2
 800796a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800796c:	787b      	ldrb	r3, [r7, #1]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007972:	887a      	ldrh	r2, [r7, #2]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007978:	e003      	b.n	8007982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800797a:	887b      	ldrh	r3, [r7, #2]
 800797c:	041a      	lsls	r2, r3, #16
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	619a      	str	r2, [r3, #24]
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b086      	sub	sp, #24
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f006 fd27 	bl	800e3f8 <USB_GetMode>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	f040 80ef 	bne.w	8007b90 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f006 fd0b 	bl	800e3d2 <USB_ReadInterrupts>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 80e5 	beq.w	8007b8e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f006 fd02 	bl	800e3d2 <USB_ReadInterrupts>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079d8:	d104      	bne.n	80079e4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80079e2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f006 fcf2 	bl	800e3d2 <USB_ReadInterrupts>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f8:	d104      	bne.n	8007a04 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a02:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f006 fce2 	bl	800e3d2 <USB_ReadInterrupts>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a18:	d104      	bne.n	8007a24 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007a22:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f006 fcd2 	bl	800e3d2 <USB_ReadInterrupts>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d103      	bne.n	8007a40 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f006 fcc4 	bl	800e3d2 <USB_ReadInterrupts>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a54:	d115      	bne.n	8007a82 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007a5e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d108      	bne.n	8007a82 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f008 f811 	bl	800fa98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f006 fcc9 	bl	800e414 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f006 fca3 	bl	800e3d2 <USB_ReadInterrupts>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a96:	d102      	bne.n	8007a9e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f8ef 	bl	8008c7c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f006 fc95 	bl	800e3d2 <USB_ReadInterrupts>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d106      	bne.n	8007ac0 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f007 ffd4 	bl	800fa60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2208      	movs	r2, #8
 8007abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f006 fc84 	bl	800e3d2 <USB_ReadInterrupts>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ad4:	d138      	bne.n	8007b48 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f006 fcd4 	bl	800e488 <USB_HC_ReadInterrupt>
 8007ae0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	e025      	b.n	8007b34 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d018      	beq.n	8007b2e <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b12:	d106      	bne.n	8007b22 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f858 	bl	8007bd0 <HCD_HC_IN_IRQHandler>
 8007b20:	e005      	b.n	8007b2e <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fc86 	bl	800843a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	3301      	adds	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d3d4      	bcc.n	8007ae8 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f006 fc40 	bl	800e3d2 <USB_ReadInterrupts>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d101      	bne.n	8007b60 <HAL_HCD_IRQHandler+0x1d2>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e000      	b.n	8007b62 <HAL_HCD_IRQHandler+0x1d4>
 8007b60:	2300      	movs	r3, #0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d014      	beq.n	8007b90 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699a      	ldr	r2, [r3, #24]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0210 	bic.w	r2, r2, #16
 8007b74:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 ffd4 	bl	8008b24 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699a      	ldr	r2, [r3, #24]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0210 	orr.w	r2, r2, #16
 8007b8a:	619a      	str	r2, [r3, #24]
 8007b8c:	e000      	b.n	8007b90 <HAL_HCD_IRQHandler+0x202>
      return;
 8007b8e:	bf00      	nop
    }
  }
}
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d101      	bne.n	8007bac <HAL_HCD_Stop+0x16>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e00d      	b.n	8007bc8 <HAL_HCD_Stop+0x32>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f006 fd75 	bl	800e6a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d119      	bne.n	8007c34 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2304      	movs	r3, #4
 8007c10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c2c:	f043 0302 	orr.w	r3, r3, #2
 8007c30:	60d3      	str	r3, [r2, #12]
 8007c32:	e0ce      	b.n	8007dd2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4a:	d12c      	bne.n	8007ca6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	440b      	add	r3, r1
 8007c6e:	335d      	adds	r3, #93	; 0x5d
 8007c70:	2207      	movs	r2, #7
 8007c72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	0151      	lsls	r1, r2, #5
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	440a      	add	r2, r1
 8007c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c8e:	f043 0302 	orr.w	r3, r3, #2
 8007c92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f006 fc03 	bl	800e4aa <USB_HC_Halt>
 8007ca4:	e095      	b.n	8007dd2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d109      	bne.n	8007cd0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc8:	461a      	mov	r2, r3
 8007cca:	2320      	movs	r3, #32
 8007ccc:	6093      	str	r3, [r2, #8]
 8007cce:	e080      	b.n	8007dd2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d134      	bne.n	8007d50 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d00:	f043 0302 	orr.w	r3, r3, #2
 8007d04:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	440b      	add	r3, r1
 8007d14:	335d      	adds	r3, #93	; 0x5d
 8007d16:	2205      	movs	r2, #5
 8007d18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d26:	461a      	mov	r2, r3
 8007d28:	2310      	movs	r3, #16
 8007d2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d38:	461a      	mov	r2, r3
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f006 fbae 	bl	800e4aa <USB_HC_Halt>
 8007d4e:	e040      	b.n	8007dd2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d66:	d134      	bne.n	8007dd2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d82:	f043 0302 	orr.w	r3, r3, #2
 8007d86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f006 fb89 	bl	800e4aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da4:	461a      	mov	r2, r3
 8007da6:	2310      	movs	r3, #16
 8007da8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	440b      	add	r3, r1
 8007db8:	335d      	adds	r3, #93	; 0x5d
 8007dba:	2208      	movs	r2, #8
 8007dbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de8:	d122      	bne.n	8007e30 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	0151      	lsls	r1, r2, #5
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	440a      	add	r2, r1
 8007e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e04:	f043 0302 	orr.w	r3, r3, #2
 8007e08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	b2d2      	uxtb	r2, r2
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f006 fb48 	bl	800e4aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e26:	461a      	mov	r2, r3
 8007e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e2c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007e2e:	e300      	b.n	8008432 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	f040 80fd 	bne.w	8008042 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01b      	beq.n	8007e88 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	440b      	add	r3, r1
 8007e5e:	3348      	adds	r3, #72	; 0x48
 8007e60:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	0159      	lsls	r1, r3, #5
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	440b      	add	r3, r1
 8007e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007e74:	1ad1      	subs	r1, r2, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	4403      	add	r3, r0
 8007e84:	334c      	adds	r3, #76	; 0x4c
 8007e86:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	440b      	add	r3, r1
 8007e96:	335d      	adds	r3, #93	; 0x5d
 8007e98:	2201      	movs	r2, #1
 8007e9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	440b      	add	r3, r1
 8007eaa:	3358      	adds	r3, #88	; 0x58
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	440b      	add	r3, r1
 8007ed0:	333f      	adds	r3, #63	; 0x3f
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	440b      	add	r3, r1
 8007ee6:	333f      	adds	r3, #63	; 0x3f
 8007ee8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d121      	bne.n	8007f32 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	0151      	lsls	r1, r2, #5
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	440a      	add	r2, r1
 8007f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f08:	f043 0302 	orr.w	r3, r3, #2
 8007f0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	4611      	mov	r1, r2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f006 fac6 	bl	800e4aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	6093      	str	r3, [r2, #8]
 8007f30:	e070      	b.n	8008014 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	440b      	add	r3, r1
 8007f40:	333f      	adds	r3, #63	; 0x3f
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d12a      	bne.n	8007f9e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f66:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	440b      	add	r3, r1
 8007f76:	335c      	adds	r3, #92	; 0x5c
 8007f78:	2201      	movs	r2, #1
 8007f7a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	b2d8      	uxtb	r0, r3
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	440b      	add	r3, r1
 8007f8e:	335c      	adds	r3, #92	; 0x5c
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	4601      	mov	r1, r0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f007 fd8c 	bl	800fab4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007f9c:	e03a      	b.n	8008014 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	440b      	add	r3, r1
 8007fac:	333f      	adds	r3, #63	; 0x3f
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d12f      	bne.n	8008014 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	440b      	add	r3, r1
 8007fc2:	335c      	adds	r3, #92	; 0x5c
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	440b      	add	r3, r1
 8007fd6:	3350      	adds	r3, #80	; 0x50
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	f083 0301 	eor.w	r3, r3, #1
 8007fde:	b2d8      	uxtb	r0, r3
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	440b      	add	r3, r1
 8007fee:	3350      	adds	r3, #80	; 0x50
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	b2d8      	uxtb	r0, r3
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	440b      	add	r3, r1
 8008006:	335c      	adds	r3, #92	; 0x5c
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	4601      	mov	r1, r0
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f007 fd50 	bl	800fab4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	440b      	add	r3, r1
 8008022:	3350      	adds	r3, #80	; 0x50
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	f083 0301 	eor.w	r3, r3, #1
 800802a:	b2d8      	uxtb	r0, r3
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	440b      	add	r3, r1
 800803a:	3350      	adds	r3, #80	; 0x50
 800803c:	4602      	mov	r2, r0
 800803e:	701a      	strb	r2, [r3, #0]
}
 8008040:	e1f7      	b.n	8008432 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	4413      	add	r3, r2
 800804a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b02      	cmp	r3, #2
 8008056:	f040 811a 	bne.w	800828e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4413      	add	r3, r2
 8008062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	0151      	lsls	r1, r2, #5
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	440a      	add	r2, r1
 8008070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008074:	f023 0302 	bic.w	r3, r3, #2
 8008078:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	440b      	add	r3, r1
 8008088:	335d      	adds	r3, #93	; 0x5d
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10a      	bne.n	80080a6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	440b      	add	r3, r1
 800809e:	335c      	adds	r3, #92	; 0x5c
 80080a0:	2201      	movs	r2, #1
 80080a2:	701a      	strb	r2, [r3, #0]
 80080a4:	e0d9      	b.n	800825a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	440b      	add	r3, r1
 80080b4:	335d      	adds	r3, #93	; 0x5d
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b05      	cmp	r3, #5
 80080ba:	d10a      	bne.n	80080d2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	440b      	add	r3, r1
 80080ca:	335c      	adds	r3, #92	; 0x5c
 80080cc:	2205      	movs	r2, #5
 80080ce:	701a      	strb	r2, [r3, #0]
 80080d0:	e0c3      	b.n	800825a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	440b      	add	r3, r1
 80080e0:	335d      	adds	r3, #93	; 0x5d
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b06      	cmp	r3, #6
 80080e6:	d00a      	beq.n	80080fe <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	440b      	add	r3, r1
 80080f6:	335d      	adds	r3, #93	; 0x5d
 80080f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80080fa:	2b08      	cmp	r3, #8
 80080fc:	d156      	bne.n	80081ac <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	440b      	add	r3, r1
 800810c:	3358      	adds	r3, #88	; 0x58
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	1c59      	adds	r1, r3, #1
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	4403      	add	r3, r0
 8008120:	3358      	adds	r3, #88	; 0x58
 8008122:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	440b      	add	r3, r1
 8008132:	3358      	adds	r3, #88	; 0x58
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b03      	cmp	r3, #3
 8008138:	d914      	bls.n	8008164 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	440b      	add	r3, r1
 8008148:	3358      	adds	r3, #88	; 0x58
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4613      	mov	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	00db      	lsls	r3, r3, #3
 800815a:	440b      	add	r3, r1
 800815c:	335c      	adds	r3, #92	; 0x5c
 800815e:	2204      	movs	r2, #4
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	e009      	b.n	8008178 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	440b      	add	r3, r1
 8008172:	335c      	adds	r3, #92	; 0x5c
 8008174:	2202      	movs	r2, #2
 8008176:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	4413      	add	r3, r2
 8008180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800818e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008196:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a4:	461a      	mov	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	e056      	b.n	800825a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	440b      	add	r3, r1
 80081ba:	335d      	adds	r3, #93	; 0x5d
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d123      	bne.n	800820a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	00db      	lsls	r3, r3, #3
 80081ce:	440b      	add	r3, r1
 80081d0:	335c      	adds	r3, #92	; 0x5c
 80081d2:	2202      	movs	r2, #2
 80081d4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081ec:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081f4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008202:	461a      	mov	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	e027      	b.n	800825a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	00db      	lsls	r3, r3, #3
 8008216:	440b      	add	r3, r1
 8008218:	335d      	adds	r3, #93	; 0x5d
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b07      	cmp	r3, #7
 800821e:	d11c      	bne.n	800825a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	440b      	add	r3, r1
 800822e:	3358      	adds	r3, #88	; 0x58
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	1c59      	adds	r1, r3, #1
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	4403      	add	r3, r0
 8008242:	3358      	adds	r3, #88	; 0x58
 8008244:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	440b      	add	r3, r1
 8008254:	335c      	adds	r3, #92	; 0x5c
 8008256:	2204      	movs	r2, #4
 8008258:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	4413      	add	r3, r2
 8008262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008266:	461a      	mov	r2, r3
 8008268:	2302      	movs	r3, #2
 800826a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	b2d8      	uxtb	r0, r3
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	440b      	add	r3, r1
 800827e:	335c      	adds	r3, #92	; 0x5c
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	4601      	mov	r1, r0
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f007 fc14 	bl	800fab4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800828c:	e0d1      	b.n	8008432 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	4413      	add	r3, r2
 8008296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a0:	2b80      	cmp	r3, #128	; 0x80
 80082a2:	d13e      	bne.n	8008322 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082be:	f043 0302 	orr.w	r3, r3, #2
 80082c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	440b      	add	r3, r1
 80082d2:	3358      	adds	r3, #88	; 0x58
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	1c59      	adds	r1, r3, #1
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	4403      	add	r3, r0
 80082e6:	3358      	adds	r3, #88	; 0x58
 80082e8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	440b      	add	r3, r1
 80082f8:	335d      	adds	r3, #93	; 0x5d
 80082fa:	2206      	movs	r2, #6
 80082fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	b2d2      	uxtb	r2, r2
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f006 f8ce 	bl	800e4aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	4413      	add	r3, r2
 8008316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800831a:	461a      	mov	r2, r3
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	6093      	str	r3, [r2, #8]
}
 8008320:	e087      	b.n	8008432 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	4413      	add	r3, r2
 800832a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b10      	cmp	r3, #16
 8008336:	d17c      	bne.n	8008432 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	440b      	add	r3, r1
 8008346:	333f      	adds	r3, #63	; 0x3f
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b03      	cmp	r3, #3
 800834c:	d122      	bne.n	8008394 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	440b      	add	r3, r1
 800835c:	3358      	adds	r3, #88	; 0x58
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	4413      	add	r3, r2
 800836a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	0151      	lsls	r1, r2, #5
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	440a      	add	r2, r1
 8008378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800837c:	f043 0302 	orr.w	r3, r3, #2
 8008380:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	b2d2      	uxtb	r2, r2
 800838a:	4611      	mov	r1, r2
 800838c:	4618      	mov	r0, r3
 800838e:	f006 f88c 	bl	800e4aa <USB_HC_Halt>
 8008392:	e045      	b.n	8008420 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008394:	6879      	ldr	r1, [r7, #4]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	440b      	add	r3, r1
 80083a2:	333f      	adds	r3, #63	; 0x3f
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	440b      	add	r3, r1
 80083b8:	333f      	adds	r3, #63	; 0x3f
 80083ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d12f      	bne.n	8008420 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	440b      	add	r3, r1
 80083ce:	3358      	adds	r3, #88	; 0x58
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d121      	bne.n	8008420 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	440b      	add	r3, r1
 80083ea:	335d      	adds	r3, #93	; 0x5d
 80083ec:	2203      	movs	r2, #3
 80083ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	0151      	lsls	r1, r2, #5
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	440a      	add	r2, r1
 8008406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800840a:	f043 0302 	orr.w	r3, r3, #2
 800840e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	b2d2      	uxtb	r2, r2
 8008418:	4611      	mov	r1, r2
 800841a:	4618      	mov	r0, r3
 800841c:	f006 f845 	bl	800e4aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	4413      	add	r3, r2
 8008428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800842c:	461a      	mov	r2, r3
 800842e:	2310      	movs	r3, #16
 8008430:	6093      	str	r3, [r2, #8]
}
 8008432:	bf00      	nop
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	460b      	mov	r3, r1
 8008444:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	4413      	add	r3, r2
 800845c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b04      	cmp	r3, #4
 8008468:	d119      	bne.n	800849e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	4413      	add	r3, r2
 8008472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008476:	461a      	mov	r2, r3
 8008478:	2304      	movs	r3, #4
 800847a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	4413      	add	r3, r2
 8008484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	440a      	add	r2, r1
 8008492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008496:	f043 0302 	orr.w	r3, r3, #2
 800849a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800849c:	e33e      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 0320 	and.w	r3, r3, #32
 80084b0:	2b20      	cmp	r3, #32
 80084b2:	d141      	bne.n	8008538 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c0:	461a      	mov	r2, r3
 80084c2:	2320      	movs	r3, #32
 80084c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	440b      	add	r3, r1
 80084d4:	333d      	adds	r3, #61	; 0x3d
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	f040 831f 	bne.w	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	440b      	add	r3, r1
 80084ec:	333d      	adds	r3, #61	; 0x3d
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	440b      	add	r3, r1
 8008500:	335c      	adds	r3, #92	; 0x5c
 8008502:	2202      	movs	r2, #2
 8008504:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	440a      	add	r2, r1
 800851c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008520:	f043 0302 	orr.w	r3, r3, #2
 8008524:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	b2d2      	uxtb	r2, r2
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f005 ffba 	bl	800e4aa <USB_HC_Halt>
}
 8008536:	e2f1      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	4413      	add	r3, r2
 8008540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854a:	2b40      	cmp	r3, #64	; 0x40
 800854c:	d13f      	bne.n	80085ce <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	440b      	add	r3, r1
 800855c:	335d      	adds	r3, #93	; 0x5d
 800855e:	2204      	movs	r2, #4
 8008560:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	440b      	add	r3, r1
 8008570:	333d      	adds	r3, #61	; 0x3d
 8008572:	2201      	movs	r2, #1
 8008574:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	440b      	add	r3, r1
 8008584:	3358      	adds	r3, #88	; 0x58
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	4413      	add	r3, r2
 8008592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	0151      	lsls	r1, r2, #5
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	440a      	add	r2, r1
 80085a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085a4:	f043 0302 	orr.w	r3, r3, #2
 80085a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	4611      	mov	r1, r2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f005 ff78 	bl	800e4aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c6:	461a      	mov	r2, r3
 80085c8:	2340      	movs	r3, #64	; 0x40
 80085ca:	6093      	str	r3, [r2, #8]
}
 80085cc:	e2a6      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e4:	d122      	bne.n	800862c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	0151      	lsls	r1, r2, #5
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	440a      	add	r2, r1
 80085fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008600:	f043 0302 	orr.w	r3, r3, #2
 8008604:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	4611      	mov	r1, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f005 ff4a 	bl	800e4aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008622:	461a      	mov	r2, r3
 8008624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008628:	6093      	str	r3, [r2, #8]
}
 800862a:	e277      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	4413      	add	r3, r2
 8008634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b01      	cmp	r3, #1
 8008640:	d135      	bne.n	80086ae <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4613      	mov	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	440b      	add	r3, r1
 8008650:	3358      	adds	r3, #88	; 0x58
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	4413      	add	r3, r2
 800865e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	0151      	lsls	r1, r2, #5
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	440a      	add	r2, r1
 800866c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008670:	f043 0302 	orr.w	r3, r3, #2
 8008674:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	b2d2      	uxtb	r2, r2
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f005 ff12 	bl	800e4aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	4413      	add	r3, r2
 800868e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008692:	461a      	mov	r2, r3
 8008694:	2301      	movs	r3, #1
 8008696:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	440b      	add	r3, r1
 80086a6:	335d      	adds	r3, #93	; 0x5d
 80086a8:	2201      	movs	r2, #1
 80086aa:	701a      	strb	r2, [r3, #0]
}
 80086ac:	e236      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d12b      	bne.n	800871c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d0:	461a      	mov	r2, r3
 80086d2:	2308      	movs	r3, #8
 80086d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	0151      	lsls	r1, r2, #5
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	440a      	add	r2, r1
 80086ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086f0:	f043 0302 	orr.w	r3, r3, #2
 80086f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	b2d2      	uxtb	r2, r2
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f005 fed2 	bl	800e4aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	440b      	add	r3, r1
 8008714:	335d      	adds	r3, #93	; 0x5d
 8008716:	2205      	movs	r2, #5
 8008718:	701a      	strb	r2, [r3, #0]
}
 800871a:	e1ff      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	4413      	add	r3, r2
 8008724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0310 	and.w	r3, r3, #16
 800872e:	2b10      	cmp	r3, #16
 8008730:	d155      	bne.n	80087de <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	440b      	add	r3, r1
 8008740:	3358      	adds	r3, #88	; 0x58
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	00db      	lsls	r3, r3, #3
 8008752:	440b      	add	r3, r1
 8008754:	335d      	adds	r3, #93	; 0x5d
 8008756:	2203      	movs	r2, #3
 8008758:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	440b      	add	r3, r1
 8008768:	333d      	adds	r3, #61	; 0x3d
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d114      	bne.n	800879a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	440b      	add	r3, r1
 800877e:	333c      	adds	r3, #60	; 0x3c
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	440b      	add	r3, r1
 8008794:	333d      	adds	r3, #61	; 0x3d
 8008796:	2201      	movs	r2, #1
 8008798:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	0151      	lsls	r1, r2, #5
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	440a      	add	r2, r1
 80087b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087b4:	f043 0302 	orr.w	r3, r3, #2
 80087b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	b2d2      	uxtb	r2, r2
 80087c2:	4611      	mov	r1, r2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f005 fe70 	bl	800e4aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d6:	461a      	mov	r2, r3
 80087d8:	2310      	movs	r3, #16
 80087da:	6093      	str	r3, [r2, #8]
}
 80087dc:	e19e      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f0:	2b80      	cmp	r3, #128	; 0x80
 80087f2:	d12b      	bne.n	800884c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	0151      	lsls	r1, r2, #5
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	440a      	add	r2, r1
 800880a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800880e:	f043 0302 	orr.w	r3, r3, #2
 8008812:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f005 fe43 	bl	800e4aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008824:	6879      	ldr	r1, [r7, #4]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	440b      	add	r3, r1
 8008832:	335d      	adds	r3, #93	; 0x5d
 8008834:	2206      	movs	r2, #6
 8008836:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	4413      	add	r3, r2
 8008840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008844:	461a      	mov	r2, r3
 8008846:	2380      	movs	r3, #128	; 0x80
 8008848:	6093      	str	r3, [r2, #8]
}
 800884a:	e167      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	4413      	add	r3, r2
 8008854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800885e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008862:	d135      	bne.n	80088d0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	4413      	add	r3, r2
 800886c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	440a      	add	r2, r1
 800887a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800887e:	f043 0302 	orr.w	r3, r3, #2
 8008882:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	4611      	mov	r1, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f005 fe0b 	bl	800e4aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	4413      	add	r3, r2
 800889c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a0:	461a      	mov	r2, r3
 80088a2:	2310      	movs	r3, #16
 80088a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b2:	461a      	mov	r2, r3
 80088b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80088ba:	6879      	ldr	r1, [r7, #4]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	440b      	add	r3, r1
 80088c8:	335d      	adds	r3, #93	; 0x5d
 80088ca:	2208      	movs	r2, #8
 80088cc:	701a      	strb	r2, [r3, #0]
}
 80088ce:	e125      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	f040 811a 	bne.w	8008b1c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008902:	f023 0302 	bic.w	r3, r3, #2
 8008906:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	440b      	add	r3, r1
 8008916:	335d      	adds	r3, #93	; 0x5d
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d137      	bne.n	800898e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	00db      	lsls	r3, r3, #3
 800892a:	440b      	add	r3, r1
 800892c:	335c      	adds	r3, #92	; 0x5c
 800892e:	2201      	movs	r2, #1
 8008930:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4613      	mov	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	00db      	lsls	r3, r3, #3
 800893e:	440b      	add	r3, r1
 8008940:	333f      	adds	r3, #63	; 0x3f
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d00b      	beq.n	8008960 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	440b      	add	r3, r1
 8008956:	333f      	adds	r3, #63	; 0x3f
 8008958:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800895a:	2b03      	cmp	r3, #3
 800895c:	f040 80c5 	bne.w	8008aea <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	440b      	add	r3, r1
 800896e:	3351      	adds	r3, #81	; 0x51
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	f083 0301 	eor.w	r3, r3, #1
 8008976:	b2d8      	uxtb	r0, r3
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	440b      	add	r3, r1
 8008986:	3351      	adds	r3, #81	; 0x51
 8008988:	4602      	mov	r2, r0
 800898a:	701a      	strb	r2, [r3, #0]
 800898c:	e0ad      	b.n	8008aea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	440b      	add	r3, r1
 800899c:	335d      	adds	r3, #93	; 0x5d
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d10a      	bne.n	80089ba <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4613      	mov	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	440b      	add	r3, r1
 80089b2:	335c      	adds	r3, #92	; 0x5c
 80089b4:	2202      	movs	r2, #2
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	e097      	b.n	8008aea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	440b      	add	r3, r1
 80089c8:	335d      	adds	r3, #93	; 0x5d
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	d10a      	bne.n	80089e6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	4613      	mov	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	440b      	add	r3, r1
 80089de:	335c      	adds	r3, #92	; 0x5c
 80089e0:	2202      	movs	r2, #2
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	e081      	b.n	8008aea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	440b      	add	r3, r1
 80089f4:	335d      	adds	r3, #93	; 0x5d
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2b05      	cmp	r3, #5
 80089fa:	d10a      	bne.n	8008a12 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	440b      	add	r3, r1
 8008a0a:	335c      	adds	r3, #92	; 0x5c
 8008a0c:	2205      	movs	r2, #5
 8008a0e:	701a      	strb	r2, [r3, #0]
 8008a10:	e06b      	b.n	8008aea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	440b      	add	r3, r1
 8008a20:	335d      	adds	r3, #93	; 0x5d
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b06      	cmp	r3, #6
 8008a26:	d00a      	beq.n	8008a3e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008a28:	6879      	ldr	r1, [r7, #4]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	440b      	add	r3, r1
 8008a36:	335d      	adds	r3, #93	; 0x5d
 8008a38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d155      	bne.n	8008aea <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	440b      	add	r3, r1
 8008a4c:	3358      	adds	r3, #88	; 0x58
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	1c59      	adds	r1, r3, #1
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	00db      	lsls	r3, r3, #3
 8008a5e:	4403      	add	r3, r0
 8008a60:	3358      	adds	r3, #88	; 0x58
 8008a62:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	440b      	add	r3, r1
 8008a72:	3358      	adds	r3, #88	; 0x58
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d914      	bls.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	440b      	add	r3, r1
 8008a88:	3358      	adds	r3, #88	; 0x58
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4613      	mov	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4413      	add	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	440b      	add	r3, r1
 8008a9c:	335c      	adds	r3, #92	; 0x5c
 8008a9e:	2204      	movs	r2, #4
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	e009      	b.n	8008ab8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	440b      	add	r3, r1
 8008ab2:	335c      	adds	r3, #92	; 0x5c
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ace:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ad6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af6:	461a      	mov	r2, r3
 8008af8:	2302      	movs	r3, #2
 8008afa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	b2d8      	uxtb	r0, r3
 8008b00:	6879      	ldr	r1, [r7, #4]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4613      	mov	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	440b      	add	r3, r1
 8008b0e:	335c      	adds	r3, #92	; 0x5c
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	4601      	mov	r1, r0
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f006 ffcc 	bl	800fab4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008b1c:	bf00      	nop
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08a      	sub	sp, #40	; 0x28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6a1b      	ldr	r3, [r3, #32]
 8008b3c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	f003 030f 	and.w	r3, r3, #15
 8008b44:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	0c5b      	lsrs	r3, r3, #17
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	091b      	lsrs	r3, r3, #4
 8008b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b58:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d003      	beq.n	8008b68 <HCD_RXQLVL_IRQHandler+0x44>
 8008b60:	2b05      	cmp	r3, #5
 8008b62:	f000 8082 	beq.w	8008c6a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008b66:	e083      	b.n	8008c70 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d07f      	beq.n	8008c6e <HCD_RXQLVL_IRQHandler+0x14a>
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	4613      	mov	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	440b      	add	r3, r1
 8008b7c:	3344      	adds	r3, #68	; 0x44
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d074      	beq.n	8008c6e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6818      	ldr	r0, [r3, #0]
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	440b      	add	r3, r1
 8008b96:	3344      	adds	r3, #68	; 0x44
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	b292      	uxth	r2, r2
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	f005 fbee 	bl	800e380 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	440b      	add	r3, r1
 8008bb2:	3344      	adds	r3, #68	; 0x44
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	18d1      	adds	r1, r2, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	4403      	add	r3, r0
 8008bc8:	3344      	adds	r3, #68	; 0x44
 8008bca:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	440b      	add	r3, r1
 8008bda:	334c      	adds	r3, #76	; 0x4c
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	18d1      	adds	r1, r2, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	4403      	add	r3, r0
 8008bf0:	334c      	adds	r3, #76	; 0x4c
 8008bf2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c00:	691a      	ldr	r2, [r3, #16]
 8008c02:	4b1d      	ldr	r3, [pc, #116]	; (8008c78 <HCD_RXQLVL_IRQHandler+0x154>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d031      	beq.n	8008c6e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c20:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c28:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c36:	461a      	mov	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	4613      	mov	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	440b      	add	r3, r1
 8008c4a:	3350      	adds	r3, #80	; 0x50
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	f083 0301 	eor.w	r3, r3, #1
 8008c52:	b2d8      	uxtb	r0, r3
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	440b      	add	r3, r1
 8008c62:	3350      	adds	r3, #80	; 0x50
 8008c64:	4602      	mov	r2, r0
 8008c66:	701a      	strb	r2, [r3, #0]
      break;
 8008c68:	e001      	b.n	8008c6e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8008c6e:	bf00      	nop
  }
}
 8008c70:	bf00      	nop
 8008c72:	3728      	adds	r7, #40	; 0x28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	1ff80000 	.word	0x1ff80000

08008c7c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008ca8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d10b      	bne.n	8008ccc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d102      	bne.n	8008cc4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f006 fedc 	bl	800fa7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f043 0302 	orr.w	r3, r3, #2
 8008cca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d132      	bne.n	8008d3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f043 0308 	orr.w	r3, r3, #8
 8008cdc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d126      	bne.n	8008d36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d113      	bne.n	8008d18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008cf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008cfa:	d106      	bne.n	8008d0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2102      	movs	r1, #2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f005 fb86 	bl	800e414 <USB_InitFSLSPClkSel>
 8008d08:	e011      	b.n	8008d2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2101      	movs	r1, #1
 8008d10:	4618      	mov	r0, r3
 8008d12:	f005 fb7f 	bl	800e414 <USB_InitFSLSPClkSel>
 8008d16:	e00a      	b.n	8008d2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d106      	bne.n	8008d2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d26:	461a      	mov	r2, r3
 8008d28:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008d2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f006 fed2 	bl	800fad8 <HAL_HCD_PortEnabled_Callback>
 8008d34:	e002      	b.n	8008d3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f006 fedc 	bl	800faf4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	d103      	bne.n	8008d4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f043 0320 	orr.w	r3, r3, #32
 8008d4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d54:	461a      	mov	r2, r3
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6013      	str	r3, [r2, #0]
}
 8008d5a:	bf00      	nop
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
	...

08008d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e07f      	b.n	8008e76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d106      	bne.n	8008d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7f9 f810 	bl	8001db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2224      	movs	r2, #36	; 0x24
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 0201 	bic.w	r2, r2, #1
 8008da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008db4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d107      	bne.n	8008dde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dda:	609a      	str	r2, [r3, #8]
 8008ddc:	e006      	b.n	8008dec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689a      	ldr	r2, [r3, #8]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008dea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d104      	bne.n	8008dfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6859      	ldr	r1, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <HAL_I2C_Init+0x11c>)
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691a      	ldr	r2, [r3, #16]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	ea42 0103 	orr.w	r1, r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	021a      	lsls	r2, r3, #8
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	69d9      	ldr	r1, [r3, #28]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a1a      	ldr	r2, [r3, #32]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	430a      	orrs	r2, r1
 8008e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0201 	orr.w	r2, r2, #1
 8008e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2220      	movs	r2, #32
 8008e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	02008000 	.word	0x02008000

08008e84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e021      	b.n	8008eda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2224      	movs	r2, #36	; 0x24
 8008e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0201 	bic.w	r2, r2, #1
 8008eac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7f8 fff6 	bl	8001ea0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af02      	add	r7, sp, #8
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	4608      	mov	r0, r1
 8008eee:	4611      	mov	r1, r2
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	817b      	strh	r3, [r7, #10]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	813b      	strh	r3, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	f040 80f9 	bne.w	80090fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <HAL_I2C_Mem_Write+0x34>
 8008f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d105      	bne.n	8008f24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e0ed      	b.n	8009100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d101      	bne.n	8008f32 <HAL_I2C_Mem_Write+0x4e>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e0e6      	b.n	8009100 <HAL_I2C_Mem_Write+0x21c>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f3a:	f7fc fdef 	bl	8005b1c <HAL_GetTick>
 8008f3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	2319      	movs	r3, #25
 8008f46:	2201      	movs	r2, #1
 8008f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fad1 	bl	80094f4 <I2C_WaitOnFlagUntilTimeout>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e0d1      	b.n	8009100 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2221      	movs	r2, #33	; 0x21
 8008f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2240      	movs	r2, #64	; 0x40
 8008f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a3a      	ldr	r2, [r7, #32]
 8008f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f84:	88f8      	ldrh	r0, [r7, #6]
 8008f86:	893a      	ldrh	r2, [r7, #8]
 8008f88:	8979      	ldrh	r1, [r7, #10]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	4603      	mov	r3, r0
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f9e1 	bl	800935c <I2C_RequestMemoryWrite>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d005      	beq.n	8008fac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e0a9      	b.n	8009100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	2bff      	cmp	r3, #255	; 0xff
 8008fb4:	d90e      	bls.n	8008fd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	22ff      	movs	r2, #255	; 0xff
 8008fba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	8979      	ldrh	r1, [r7, #10]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 fbb3 	bl	8009738 <I2C_TransferConfig>
 8008fd2:	e00f      	b.n	8008ff4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	8979      	ldrh	r1, [r7, #10]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 fba2 	bl	8009738 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fabb 	bl	8009574 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e07b      	b.n	8009100 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009022:	b29b      	uxth	r3, r3
 8009024:	3b01      	subs	r3, #1
 8009026:	b29a      	uxth	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009030:	3b01      	subs	r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800903c:	b29b      	uxth	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d034      	beq.n	80090ac <HAL_I2C_Mem_Write+0x1c8>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009046:	2b00      	cmp	r3, #0
 8009048:	d130      	bne.n	80090ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	2200      	movs	r2, #0
 8009052:	2180      	movs	r1, #128	; 0x80
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 fa4d 	bl	80094f4 <I2C_WaitOnFlagUntilTimeout>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e04d      	b.n	8009100 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009068:	b29b      	uxth	r3, r3
 800906a:	2bff      	cmp	r3, #255	; 0xff
 800906c:	d90e      	bls.n	800908c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	22ff      	movs	r2, #255	; 0xff
 8009072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009078:	b2da      	uxtb	r2, r3
 800907a:	8979      	ldrh	r1, [r7, #10]
 800907c:	2300      	movs	r3, #0
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 fb57 	bl	8009738 <I2C_TransferConfig>
 800908a:	e00f      	b.n	80090ac <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009090:	b29a      	uxth	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800909a:	b2da      	uxtb	r2, r3
 800909c:	8979      	ldrh	r1, [r7, #10]
 800909e:	2300      	movs	r3, #0
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 fb46 	bl	8009738 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d19e      	bne.n	8008ff4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fa9a 	bl	80095f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e01a      	b.n	8009100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2220      	movs	r2, #32
 80090d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6859      	ldr	r1, [r3, #4]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <HAL_I2C_Mem_Write+0x224>)
 80090de:	400b      	ands	r3, r1
 80090e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e000      	b.n	8009100 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80090fe:	2302      	movs	r3, #2
  }
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	fe00e800 	.word	0xfe00e800

0800910c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af02      	add	r7, sp, #8
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	461a      	mov	r2, r3
 800911a:	4603      	mov	r3, r0
 800911c:	817b      	strh	r3, [r7, #10]
 800911e:	460b      	mov	r3, r1
 8009120:	813b      	strh	r3, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b20      	cmp	r3, #32
 8009130:	f040 80fd 	bne.w	800932e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d002      	beq.n	8009140 <HAL_I2C_Mem_Read+0x34>
 800913a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800913c:	2b00      	cmp	r3, #0
 800913e:	d105      	bne.n	800914c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009146:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e0f1      	b.n	8009330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <HAL_I2C_Mem_Read+0x4e>
 8009156:	2302      	movs	r3, #2
 8009158:	e0ea      	b.n	8009330 <HAL_I2C_Mem_Read+0x224>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009162:	f7fc fcdb 	bl	8005b1c <HAL_GetTick>
 8009166:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	2319      	movs	r3, #25
 800916e:	2201      	movs	r2, #1
 8009170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 f9bd 	bl	80094f4 <I2C_WaitOnFlagUntilTimeout>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e0d5      	b.n	8009330 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2222      	movs	r2, #34	; 0x22
 8009188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2240      	movs	r2, #64	; 0x40
 8009190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6a3a      	ldr	r2, [r7, #32]
 800919e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80091ac:	88f8      	ldrh	r0, [r7, #6]
 80091ae:	893a      	ldrh	r2, [r7, #8]
 80091b0:	8979      	ldrh	r1, [r7, #10]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	4603      	mov	r3, r0
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 f921 	bl	8009404 <I2C_RequestMemoryRead>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e0ad      	b.n	8009330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d8:	b29b      	uxth	r3, r3
 80091da:	2bff      	cmp	r3, #255	; 0xff
 80091dc:	d90e      	bls.n	80091fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	22ff      	movs	r2, #255	; 0xff
 80091e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	8979      	ldrh	r1, [r7, #10]
 80091ec:	4b52      	ldr	r3, [pc, #328]	; (8009338 <HAL_I2C_Mem_Read+0x22c>)
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 fa9f 	bl	8009738 <I2C_TransferConfig>
 80091fa:	e00f      	b.n	800921c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009200:	b29a      	uxth	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800920a:	b2da      	uxtb	r2, r3
 800920c:	8979      	ldrh	r1, [r7, #10]
 800920e:	4b4a      	ldr	r3, [pc, #296]	; (8009338 <HAL_I2C_Mem_Read+0x22c>)
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 fa8e 	bl	8009738 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	2200      	movs	r2, #0
 8009224:	2104      	movs	r1, #4
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 f964 	bl	80094f4 <I2C_WaitOnFlagUntilTimeout>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e07c      	b.n	8009330 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	b2d2      	uxtb	r2, r2
 8009242:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009252:	3b01      	subs	r3, #1
 8009254:	b29a      	uxth	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800925e:	b29b      	uxth	r3, r3
 8009260:	3b01      	subs	r3, #1
 8009262:	b29a      	uxth	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d034      	beq.n	80092dc <HAL_I2C_Mem_Read+0x1d0>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009276:	2b00      	cmp	r3, #0
 8009278:	d130      	bne.n	80092dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	2200      	movs	r2, #0
 8009282:	2180      	movs	r1, #128	; 0x80
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 f935 	bl	80094f4 <I2C_WaitOnFlagUntilTimeout>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e04d      	b.n	8009330 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009298:	b29b      	uxth	r3, r3
 800929a:	2bff      	cmp	r3, #255	; 0xff
 800929c:	d90e      	bls.n	80092bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	22ff      	movs	r2, #255	; 0xff
 80092a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	8979      	ldrh	r1, [r7, #10]
 80092ac:	2300      	movs	r3, #0
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 fa3f 	bl	8009738 <I2C_TransferConfig>
 80092ba:	e00f      	b.n	80092dc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	8979      	ldrh	r1, [r7, #10]
 80092ce:	2300      	movs	r3, #0
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 fa2e 	bl	8009738 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d19a      	bne.n	800921c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 f982 	bl	80095f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e01a      	b.n	8009330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2220      	movs	r2, #32
 8009300:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6859      	ldr	r1, [r3, #4]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	4b0b      	ldr	r3, [pc, #44]	; (800933c <HAL_I2C_Mem_Read+0x230>)
 800930e:	400b      	ands	r3, r1
 8009310:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2220      	movs	r2, #32
 8009316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	e000      	b.n	8009330 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800932e:	2302      	movs	r3, #2
  }
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	80002400 	.word	0x80002400
 800933c:	fe00e800 	.word	0xfe00e800

08009340 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800934e:	b2db      	uxtb	r3, r3
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af02      	add	r7, sp, #8
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	4608      	mov	r0, r1
 8009366:	4611      	mov	r1, r2
 8009368:	461a      	mov	r2, r3
 800936a:	4603      	mov	r3, r0
 800936c:	817b      	strh	r3, [r7, #10]
 800936e:	460b      	mov	r3, r1
 8009370:	813b      	strh	r3, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009376:	88fb      	ldrh	r3, [r7, #6]
 8009378:	b2da      	uxtb	r2, r3
 800937a:	8979      	ldrh	r1, [r7, #10]
 800937c:	4b20      	ldr	r3, [pc, #128]	; (8009400 <I2C_RequestMemoryWrite+0xa4>)
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 f9d7 	bl	8009738 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800938a:	69fa      	ldr	r2, [r7, #28]
 800938c:	69b9      	ldr	r1, [r7, #24]
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 f8f0 	bl	8009574 <I2C_WaitOnTXISFlagUntilTimeout>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e02c      	b.n	80093f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d105      	bne.n	80093b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80093a4:	893b      	ldrh	r3, [r7, #8]
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	629a      	str	r2, [r3, #40]	; 0x28
 80093ae:	e015      	b.n	80093dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80093b0:	893b      	ldrh	r3, [r7, #8]
 80093b2:	0a1b      	lsrs	r3, r3, #8
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	69b9      	ldr	r1, [r7, #24]
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 f8d6 	bl	8009574 <I2C_WaitOnTXISFlagUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e012      	b.n	80093f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80093d2:	893b      	ldrh	r3, [r7, #8]
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2200      	movs	r2, #0
 80093e4:	2180      	movs	r1, #128	; 0x80
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f884 	bl	80094f4 <I2C_WaitOnFlagUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e000      	b.n	80093f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	80002000 	.word	0x80002000

08009404 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af02      	add	r7, sp, #8
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	4608      	mov	r0, r1
 800940e:	4611      	mov	r1, r2
 8009410:	461a      	mov	r2, r3
 8009412:	4603      	mov	r3, r0
 8009414:	817b      	strh	r3, [r7, #10]
 8009416:	460b      	mov	r3, r1
 8009418:	813b      	strh	r3, [r7, #8]
 800941a:	4613      	mov	r3, r2
 800941c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	b2da      	uxtb	r2, r3
 8009422:	8979      	ldrh	r1, [r7, #10]
 8009424:	4b20      	ldr	r3, [pc, #128]	; (80094a8 <I2C_RequestMemoryRead+0xa4>)
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	2300      	movs	r3, #0
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 f984 	bl	8009738 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	69b9      	ldr	r1, [r7, #24]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f89d 	bl	8009574 <I2C_WaitOnTXISFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e02c      	b.n	800949e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009444:	88fb      	ldrh	r3, [r7, #6]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d105      	bne.n	8009456 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800944a:	893b      	ldrh	r3, [r7, #8]
 800944c:	b2da      	uxtb	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	629a      	str	r2, [r3, #40]	; 0x28
 8009454:	e015      	b.n	8009482 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009456:	893b      	ldrh	r3, [r7, #8]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	b29b      	uxth	r3, r3
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009464:	69fa      	ldr	r2, [r7, #28]
 8009466:	69b9      	ldr	r1, [r7, #24]
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 f883 	bl	8009574 <I2C_WaitOnTXISFlagUntilTimeout>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e012      	b.n	800949e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009478:	893b      	ldrh	r3, [r7, #8]
 800947a:	b2da      	uxtb	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	2200      	movs	r2, #0
 800948a:	2140      	movs	r1, #64	; 0x40
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 f831 	bl	80094f4 <I2C_WaitOnFlagUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e000      	b.n	800949e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	80002000 	.word	0x80002000

080094ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d103      	bne.n	80094ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2200      	movs	r2, #0
 80094c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d007      	beq.n	80094e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	699a      	ldr	r2, [r3, #24]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f042 0201 	orr.w	r2, r2, #1
 80094e6:	619a      	str	r2, [r3, #24]
  }
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	4613      	mov	r3, r2
 8009502:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009504:	e022      	b.n	800954c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d01e      	beq.n	800954c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800950e:	f7fc fb05 	bl	8005b1c <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d302      	bcc.n	8009524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d113      	bne.n	800954c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009528:	f043 0220 	orr.w	r2, r3, #32
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e00f      	b.n	800956c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	4013      	ands	r3, r2
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	429a      	cmp	r2, r3
 800955a:	bf0c      	ite	eq
 800955c:	2301      	moveq	r3, #1
 800955e:	2300      	movne	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	429a      	cmp	r2, r3
 8009568:	d0cd      	beq.n	8009506 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009580:	e02c      	b.n	80095dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 f870 	bl	800966c <I2C_IsAcknowledgeFailed>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e02a      	b.n	80095ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959c:	d01e      	beq.n	80095dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800959e:	f7fc fabd 	bl	8005b1c <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d302      	bcc.n	80095b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d113      	bne.n	80095dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b8:	f043 0220 	orr.w	r2, r3, #32
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e007      	b.n	80095ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	f003 0302 	and.w	r3, r3, #2
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d1cb      	bne.n	8009582 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009600:	e028      	b.n	8009654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	68b9      	ldr	r1, [r7, #8]
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 f830 	bl	800966c <I2C_IsAcknowledgeFailed>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e026      	b.n	8009664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009616:	f7fc fa81 	bl	8005b1c <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	429a      	cmp	r2, r3
 8009624:	d302      	bcc.n	800962c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d113      	bne.n	8009654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009630:	f043 0220 	orr.w	r2, r3, #32
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2220      	movs	r2, #32
 800963c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e007      	b.n	8009664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	f003 0320 	and.w	r3, r3, #32
 800965e:	2b20      	cmp	r3, #32
 8009660:	d1cf      	bne.n	8009602 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	f003 0310 	and.w	r3, r3, #16
 8009682:	2b10      	cmp	r3, #16
 8009684:	d151      	bne.n	800972a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009686:	e022      	b.n	80096ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d01e      	beq.n	80096ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009690:	f7fc fa44 	bl	8005b1c <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	429a      	cmp	r2, r3
 800969e:	d302      	bcc.n	80096a6 <I2C_IsAcknowledgeFailed+0x3a>
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d113      	bne.n	80096ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096aa:	f043 0220 	orr.w	r2, r3, #32
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e02e      	b.n	800972c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	f003 0320 	and.w	r3, r3, #32
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d1d5      	bne.n	8009688 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2210      	movs	r2, #16
 80096e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2220      	movs	r2, #32
 80096ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f7ff fedd 	bl	80094ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6859      	ldr	r1, [r3, #4]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <I2C_IsAcknowledgeFailed+0xc8>)
 80096fe:	400b      	ands	r3, r1
 8009700:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009706:	f043 0204 	orr.w	r2, r3, #4
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2220      	movs	r2, #32
 8009712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	fe00e800 	.word	0xfe00e800

08009738 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	817b      	strh	r3, [r7, #10]
 8009746:	4613      	mov	r3, r2
 8009748:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	0d5b      	lsrs	r3, r3, #21
 8009754:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009758:	4b0d      	ldr	r3, [pc, #52]	; (8009790 <I2C_TransferConfig+0x58>)
 800975a:	430b      	orrs	r3, r1
 800975c:	43db      	mvns	r3, r3
 800975e:	ea02 0103 	and.w	r1, r2, r3
 8009762:	897b      	ldrh	r3, [r7, #10]
 8009764:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009768:	7a7b      	ldrb	r3, [r7, #9]
 800976a:	041b      	lsls	r3, r3, #16
 800976c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009770:	431a      	orrs	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	431a      	orrs	r2, r3
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	431a      	orrs	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009782:	bf00      	nop
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	03ff63ff 	.word	0x03ff63ff

08009794 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b20      	cmp	r3, #32
 80097a8:	d138      	bne.n	800981c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d101      	bne.n	80097b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80097b4:	2302      	movs	r3, #2
 80097b6:	e032      	b.n	800981e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2224      	movs	r2, #36	; 0x24
 80097c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f022 0201 	bic.w	r2, r2, #1
 80097d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6819      	ldr	r1, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	430a      	orrs	r2, r1
 80097f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f042 0201 	orr.w	r2, r2, #1
 8009806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	e000      	b.n	800981e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800981c:	2302      	movs	r3, #2
  }
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800982a:	b480      	push	{r7}
 800982c:	b085      	sub	sp, #20
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b20      	cmp	r3, #32
 800983e:	d139      	bne.n	80098b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009846:	2b01      	cmp	r3, #1
 8009848:	d101      	bne.n	800984e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800984a:	2302      	movs	r3, #2
 800984c:	e033      	b.n	80098b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2224      	movs	r2, #36	; 0x24
 800985a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f022 0201 	bic.w	r2, r2, #1
 800986c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800987c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0201 	orr.w	r2, r2, #1
 800989e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2220      	movs	r2, #32
 80098a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e000      	b.n	80098b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80098b4:	2302      	movs	r3, #2
  }
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
	...

080098c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e0bf      	b.n	8009a56 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d106      	bne.n	80098f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7f8 fb14 	bl	8001f18 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	699a      	ldr	r2, [r3, #24]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009906:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6999      	ldr	r1, [r3, #24]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800991c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	430a      	orrs	r2, r1
 800992a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6899      	ldr	r1, [r3, #8]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	4b4a      	ldr	r3, [pc, #296]	; (8009a60 <HAL_LTDC_Init+0x19c>)
 8009938:	400b      	ands	r3, r1
 800993a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	041b      	lsls	r3, r3, #16
 8009942:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6899      	ldr	r1, [r3, #8]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	699a      	ldr	r2, [r3, #24]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	431a      	orrs	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68d9      	ldr	r1, [r3, #12]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	4b3e      	ldr	r3, [pc, #248]	; (8009a60 <HAL_LTDC_Init+0x19c>)
 8009966:	400b      	ands	r3, r1
 8009968:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	041b      	lsls	r3, r3, #16
 8009970:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68d9      	ldr	r1, [r3, #12]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a1a      	ldr	r2, [r3, #32]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	431a      	orrs	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6919      	ldr	r1, [r3, #16]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	4b33      	ldr	r3, [pc, #204]	; (8009a60 <HAL_LTDC_Init+0x19c>)
 8009994:	400b      	ands	r3, r1
 8009996:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	041b      	lsls	r3, r3, #16
 800999e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6919      	ldr	r1, [r3, #16]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6959      	ldr	r1, [r3, #20]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	4b27      	ldr	r3, [pc, #156]	; (8009a60 <HAL_LTDC_Init+0x19c>)
 80099c2:	400b      	ands	r3, r1
 80099c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	041b      	lsls	r3, r3, #16
 80099cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6959      	ldr	r1, [r3, #20]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80099ea:	021b      	lsls	r3, r3, #8
 80099ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80099f4:	041b      	lsls	r3, r3, #16
 80099f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0206 	orr.w	r2, r2, #6
 8009a32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	699a      	ldr	r2, [r3, #24]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f042 0201 	orr.w	r2, r2, #1
 8009a42:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	f000f800 	.word	0xf000f800

08009a64 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f003 0304 	and.w	r3, r3, #4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d023      	beq.n	8009ace <HAL_LTDC_IRQHandler+0x6a>
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f003 0304 	and.w	r3, r3, #4
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d01e      	beq.n	8009ace <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 0204 	bic.w	r2, r2, #4
 8009a9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2204      	movs	r2, #4
 8009aa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009aae:	f043 0201 	orr.w	r2, r3, #1
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2204      	movs	r2, #4
 8009abc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f86f 	bl	8009bac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f003 0302 	and.w	r3, r3, #2
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d023      	beq.n	8009b20 <HAL_LTDC_IRQHandler+0xbc>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d01e      	beq.n	8009b20 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 0202 	bic.w	r2, r2, #2
 8009af0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2202      	movs	r2, #2
 8009af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b00:	f043 0202 	orr.w	r2, r3, #2
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f846 	bl	8009bac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d01b      	beq.n	8009b62 <HAL_LTDC_IRQHandler+0xfe>
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d016      	beq.n	8009b62 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 0201 	bic.w	r2, r2, #1
 8009b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f82f 	bl	8009bc0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01b      	beq.n	8009ba4 <HAL_LTDC_IRQHandler+0x140>
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f003 0308 	and.w	r3, r3, #8
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d016      	beq.n	8009ba4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f022 0208 	bic.w	r2, r2, #8
 8009b84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2208      	movs	r2, #8
 8009b8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f818 	bl	8009bd4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009ba4:	bf00      	nop
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009be8:	b5b0      	push	{r4, r5, r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d101      	bne.n	8009c02 <HAL_LTDC_ConfigLayer+0x1a>
 8009bfe:	2302      	movs	r3, #2
 8009c00:	e02c      	b.n	8009c5c <HAL_LTDC_ConfigLayer+0x74>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2134      	movs	r1, #52	; 0x34
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	4614      	mov	r4, r2
 8009c26:	461d      	mov	r5, r3
 8009c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	68b9      	ldr	r1, [r7, #8]
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 f81f 	bl	8009c80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2201      	movs	r2, #1
 8009c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bdb0      	pop	{r4, r5, r7, pc}

08009c64 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009c72:	b2db      	uxtb	r3, r3
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b089      	sub	sp, #36	; 0x24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	0c1b      	lsrs	r3, r3, #16
 8009c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c9c:	4413      	add	r3, r2
 8009c9e:	041b      	lsls	r3, r3, #16
 8009ca0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	01db      	lsls	r3, r3, #7
 8009cac:	4413      	add	r3, r2
 8009cae:	3384      	adds	r3, #132	; 0x84
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	6812      	ldr	r2, [r2, #0]
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	01d2      	lsls	r2, r2, #7
 8009cbc:	440a      	add	r2, r1
 8009cbe:	3284      	adds	r2, #132	; 0x84
 8009cc0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009cc4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	0c1b      	lsrs	r3, r3, #16
 8009cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cd6:	4413      	add	r3, r2
 8009cd8:	1c5a      	adds	r2, r3, #1
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	01db      	lsls	r3, r3, #7
 8009ce4:	440b      	add	r3, r1
 8009ce6:	3384      	adds	r3, #132	; 0x84
 8009ce8:	4619      	mov	r1, r3
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cfe:	4413      	add	r3, r2
 8009d00:	041b      	lsls	r3, r3, #16
 8009d02:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	01db      	lsls	r3, r3, #7
 8009d0e:	4413      	add	r3, r2
 8009d10:	3384      	adds	r3, #132	; 0x84
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	6812      	ldr	r2, [r2, #0]
 8009d18:	4611      	mov	r1, r2
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	01d2      	lsls	r2, r2, #7
 8009d1e:	440a      	add	r2, r1
 8009d20:	3284      	adds	r2, #132	; 0x84
 8009d22:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009d26:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d36:	4413      	add	r3, r2
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	01db      	lsls	r3, r3, #7
 8009d44:	440b      	add	r3, r1
 8009d46:	3384      	adds	r3, #132	; 0x84
 8009d48:	4619      	mov	r1, r3
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	461a      	mov	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	01db      	lsls	r3, r3, #7
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3384      	adds	r3, #132	; 0x84
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	6812      	ldr	r2, [r2, #0]
 8009d64:	4611      	mov	r1, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	01d2      	lsls	r2, r2, #7
 8009d6a:	440a      	add	r2, r1
 8009d6c:	3284      	adds	r2, #132	; 0x84
 8009d6e:	f023 0307 	bic.w	r3, r3, #7
 8009d72:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	01db      	lsls	r3, r3, #7
 8009d7e:	4413      	add	r3, r2
 8009d80:	3384      	adds	r3, #132	; 0x84
 8009d82:	461a      	mov	r2, r3
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	061b      	lsls	r3, r3, #24
 8009da4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	01db      	lsls	r3, r3, #7
 8009db0:	4413      	add	r3, r2
 8009db2:	3384      	adds	r3, #132	; 0x84
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	01db      	lsls	r3, r3, #7
 8009dc0:	4413      	add	r3, r2
 8009dc2:	3384      	adds	r3, #132	; 0x84
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	431a      	orrs	r2, r3
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4619      	mov	r1, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	01db      	lsls	r3, r3, #7
 8009de4:	440b      	add	r3, r1
 8009de6:	3384      	adds	r3, #132	; 0x84
 8009de8:	4619      	mov	r1, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	461a      	mov	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	01db      	lsls	r3, r3, #7
 8009dfa:	4413      	add	r3, r2
 8009dfc:	3384      	adds	r3, #132	; 0x84
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	6812      	ldr	r2, [r2, #0]
 8009e04:	4611      	mov	r1, r2
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	01d2      	lsls	r2, r2, #7
 8009e0a:	440a      	add	r2, r1
 8009e0c:	3284      	adds	r2, #132	; 0x84
 8009e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e12:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	01db      	lsls	r3, r3, #7
 8009e1e:	4413      	add	r3, r2
 8009e20:	3384      	adds	r3, #132	; 0x84
 8009e22:	461a      	mov	r2, r3
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	01db      	lsls	r3, r3, #7
 8009e34:	4413      	add	r3, r2
 8009e36:	3384      	adds	r3, #132	; 0x84
 8009e38:	69da      	ldr	r2, [r3, #28]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	01db      	lsls	r3, r3, #7
 8009e44:	440b      	add	r3, r1
 8009e46:	3384      	adds	r3, #132	; 0x84
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4b58      	ldr	r3, [pc, #352]	; (8009fac <LTDC_SetConfig+0x32c>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	69da      	ldr	r2, [r3, #28]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	6a1b      	ldr	r3, [r3, #32]
 8009e58:	68f9      	ldr	r1, [r7, #12]
 8009e5a:	6809      	ldr	r1, [r1, #0]
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	01c9      	lsls	r1, r1, #7
 8009e62:	4401      	add	r1, r0
 8009e64:	3184      	adds	r1, #132	; 0x84
 8009e66:	4313      	orrs	r3, r2
 8009e68:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	01db      	lsls	r3, r3, #7
 8009e74:	4413      	add	r3, r2
 8009e76:	3384      	adds	r3, #132	; 0x84
 8009e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	01db      	lsls	r3, r3, #7
 8009e84:	4413      	add	r3, r2
 8009e86:	3384      	adds	r3, #132	; 0x84
 8009e88:	461a      	mov	r2, r3
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	01db      	lsls	r3, r3, #7
 8009e98:	4413      	add	r3, r2
 8009e9a:	3384      	adds	r3, #132	; 0x84
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d102      	bne.n	8009eb2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009eac:	2304      	movs	r3, #4
 8009eae:	61fb      	str	r3, [r7, #28]
 8009eb0:	e01b      	b.n	8009eea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d102      	bne.n	8009ec0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	61fb      	str	r3, [r7, #28]
 8009ebe:	e014      	b.n	8009eea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d00b      	beq.n	8009ee0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d007      	beq.n	8009ee0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d003      	beq.n	8009ee0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009edc:	2b07      	cmp	r3, #7
 8009ede:	d102      	bne.n	8009ee6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	61fb      	str	r3, [r7, #28]
 8009ee4:	e001      	b.n	8009eea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	01db      	lsls	r3, r3, #7
 8009ef4:	4413      	add	r3, r2
 8009ef6:	3384      	adds	r3, #132	; 0x84
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	6812      	ldr	r2, [r2, #0]
 8009efe:	4611      	mov	r1, r2
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	01d2      	lsls	r2, r2, #7
 8009f04:	440a      	add	r2, r1
 8009f06:	3284      	adds	r2, #132	; 0x84
 8009f08:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	fb02 f303 	mul.w	r3, r2, r3
 8009f18:	041a      	lsls	r2, r3, #16
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	6859      	ldr	r1, [r3, #4]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	1acb      	subs	r3, r1, r3
 8009f24:	69f9      	ldr	r1, [r7, #28]
 8009f26:	fb01 f303 	mul.w	r3, r1, r3
 8009f2a:	3303      	adds	r3, #3
 8009f2c:	68f9      	ldr	r1, [r7, #12]
 8009f2e:	6809      	ldr	r1, [r1, #0]
 8009f30:	4608      	mov	r0, r1
 8009f32:	6879      	ldr	r1, [r7, #4]
 8009f34:	01c9      	lsls	r1, r1, #7
 8009f36:	4401      	add	r1, r0
 8009f38:	3184      	adds	r1, #132	; 0x84
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	461a      	mov	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	01db      	lsls	r3, r3, #7
 8009f48:	4413      	add	r3, r2
 8009f4a:	3384      	adds	r3, #132	; 0x84
 8009f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4619      	mov	r1, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	01db      	lsls	r3, r3, #7
 8009f58:	440b      	add	r3, r1
 8009f5a:	3384      	adds	r3, #132	; 0x84
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4b14      	ldr	r3, [pc, #80]	; (8009fb0 <LTDC_SetConfig+0x330>)
 8009f60:	4013      	ands	r3, r2
 8009f62:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	01db      	lsls	r3, r3, #7
 8009f6e:	4413      	add	r3, r2
 8009f70:	3384      	adds	r3, #132	; 0x84
 8009f72:	461a      	mov	r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	01db      	lsls	r3, r3, #7
 8009f84:	4413      	add	r3, r2
 8009f86:	3384      	adds	r3, #132	; 0x84
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	6812      	ldr	r2, [r2, #0]
 8009f8e:	4611      	mov	r1, r2
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	01d2      	lsls	r2, r2, #7
 8009f94:	440a      	add	r2, r1
 8009f96:	3284      	adds	r2, #132	; 0x84
 8009f98:	f043 0301 	orr.w	r3, r3, #1
 8009f9c:	6013      	str	r3, [r2, #0]
}
 8009f9e:	bf00      	nop
 8009fa0:	3724      	adds	r7, #36	; 0x24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	fffff8f8 	.word	0xfffff8f8
 8009fb0:	fffff800 	.word	0xfffff800

08009fb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a04      	ldr	r2, [pc, #16]	; (8009fd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fc2:	6013      	str	r3, [r2, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	40007000 	.word	0x40007000

08009fd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009fde:	4b23      	ldr	r3, [pc, #140]	; (800a06c <HAL_PWREx_EnableOverDrive+0x98>)
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe2:	4a22      	ldr	r2, [pc, #136]	; (800a06c <HAL_PWREx_EnableOverDrive+0x98>)
 8009fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8009fea:	4b20      	ldr	r3, [pc, #128]	; (800a06c <HAL_PWREx_EnableOverDrive+0x98>)
 8009fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009ff6:	4b1e      	ldr	r3, [pc, #120]	; (800a070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a1d      	ldr	r2, [pc, #116]	; (800a070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a000:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a002:	f7fb fd8b 	bl	8005b1c <HAL_GetTick>
 800a006:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a008:	e009      	b.n	800a01e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a00a:	f7fb fd87 	bl	8005b1c <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a018:	d901      	bls.n	800a01e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e022      	b.n	800a064 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a01e:	4b14      	ldr	r3, [pc, #80]	; (800a070 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a02a:	d1ee      	bne.n	800a00a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a02c:	4b10      	ldr	r3, [pc, #64]	; (800a070 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a0f      	ldr	r2, [pc, #60]	; (800a070 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a036:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a038:	f7fb fd70 	bl	8005b1c <HAL_GetTick>
 800a03c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a03e:	e009      	b.n	800a054 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a040:	f7fb fd6c 	bl	8005b1c <HAL_GetTick>
 800a044:	4602      	mov	r2, r0
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a04e:	d901      	bls.n	800a054 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e007      	b.n	800a064 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a054:	4b06      	ldr	r3, [pc, #24]	; (800a070 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a060:	d1ee      	bne.n	800a040 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	40023800 	.word	0x40023800
 800a070:	40007000 	.word	0x40007000

0800a074 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af02      	add	r7, sp, #8
 800a07a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a07c:	f7fb fd4e 	bl	8005b1c <HAL_GetTick>
 800a080:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e067      	b.n	800a15c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10b      	bne.n	800a0b0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7f8 f801 	bl	80020a8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a0a6:	f241 3188 	movw	r1, #5000	; 0x1388
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f85e 	bl	800a16c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	021a      	lsls	r2, r3, #8
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	430a      	orrs	r2, r1
 800a0c8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2120      	movs	r1, #32
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f856 	bl	800a188 <QSPI_WaitFlagStateUntilTimeout>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d135      	bne.n	800a152 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	4b1d      	ldr	r3, [pc, #116]	; (800a164 <HAL_QSPI_Init+0xf0>)
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6852      	ldr	r2, [r2, #4]
 800a0f4:	0611      	lsls	r1, r2, #24
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	68d2      	ldr	r2, [r2, #12]
 800a0fa:	4311      	orrs	r1, r2
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	69d2      	ldr	r2, [r2, #28]
 800a100:	4311      	orrs	r1, r2
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	6a12      	ldr	r2, [r2, #32]
 800a106:	4311      	orrs	r1, r2
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	6812      	ldr	r2, [r2, #0]
 800a10c:	430b      	orrs	r3, r1
 800a10e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	4b14      	ldr	r3, [pc, #80]	; (800a168 <HAL_QSPI_Init+0xf4>)
 800a118:	4013      	ands	r3, r2
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	6912      	ldr	r2, [r2, #16]
 800a11e:	0411      	lsls	r1, r2, #16
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	6952      	ldr	r2, [r2, #20]
 800a124:	4311      	orrs	r1, r2
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	6992      	ldr	r2, [r2, #24]
 800a12a:	4311      	orrs	r1, r2
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	6812      	ldr	r2, [r2, #0]
 800a130:	430b      	orrs	r3, r1
 800a132:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f042 0201 	orr.w	r2, r2, #1
 800a142:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a15a:	7afb      	ldrb	r3, [r7, #11]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	00ffff2f 	.word	0x00ffff2f
 800a168:	ffe0f8fe 	.word	0xffe0f8fe

0800a16c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	4613      	mov	r3, r2
 800a196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a198:	e01a      	b.n	800a1d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a0:	d016      	beq.n	800a1d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1a2:	f7fb fcbb 	bl	8005b1c <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d302      	bcc.n	800a1b8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10b      	bne.n	800a1d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2204      	movs	r2, #4
 800a1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c4:	f043 0201 	orr.w	r2, r3, #1
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e00e      	b.n	800a1ee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689a      	ldr	r2, [r3, #8]
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	4013      	ands	r3, r2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	bf14      	ite	ne
 800a1de:	2301      	movne	r3, #1
 800a1e0:	2300      	moveq	r3, #0
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d1d6      	bne.n	800a19a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a200:	2300      	movs	r3, #0
 800a202:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e291      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	f000 8087 	beq.w	800a32a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a21c:	4b96      	ldr	r3, [pc, #600]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f003 030c 	and.w	r3, r3, #12
 800a224:	2b04      	cmp	r3, #4
 800a226:	d00c      	beq.n	800a242 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a228:	4b93      	ldr	r3, [pc, #588]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	f003 030c 	and.w	r3, r3, #12
 800a230:	2b08      	cmp	r3, #8
 800a232:	d112      	bne.n	800a25a <HAL_RCC_OscConfig+0x62>
 800a234:	4b90      	ldr	r3, [pc, #576]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a23c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a240:	d10b      	bne.n	800a25a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a242:	4b8d      	ldr	r3, [pc, #564]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d06c      	beq.n	800a328 <HAL_RCC_OscConfig+0x130>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d168      	bne.n	800a328 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e26b      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a262:	d106      	bne.n	800a272 <HAL_RCC_OscConfig+0x7a>
 800a264:	4b84      	ldr	r3, [pc, #528]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a83      	ldr	r2, [pc, #524]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a26a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	e02e      	b.n	800a2d0 <HAL_RCC_OscConfig+0xd8>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10c      	bne.n	800a294 <HAL_RCC_OscConfig+0x9c>
 800a27a:	4b7f      	ldr	r3, [pc, #508]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a7e      	ldr	r2, [pc, #504]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	4b7c      	ldr	r3, [pc, #496]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a7b      	ldr	r2, [pc, #492]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a28c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	e01d      	b.n	800a2d0 <HAL_RCC_OscConfig+0xd8>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a29c:	d10c      	bne.n	800a2b8 <HAL_RCC_OscConfig+0xc0>
 800a29e:	4b76      	ldr	r3, [pc, #472]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a75      	ldr	r2, [pc, #468]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a2a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	4b73      	ldr	r3, [pc, #460]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a72      	ldr	r2, [pc, #456]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a2b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2b4:	6013      	str	r3, [r2, #0]
 800a2b6:	e00b      	b.n	800a2d0 <HAL_RCC_OscConfig+0xd8>
 800a2b8:	4b6f      	ldr	r3, [pc, #444]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a6e      	ldr	r2, [pc, #440]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a2be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	4b6c      	ldr	r3, [pc, #432]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a6b      	ldr	r2, [pc, #428]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a2ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d013      	beq.n	800a300 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d8:	f7fb fc20 	bl	8005b1c <HAL_GetTick>
 800a2dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2de:	e008      	b.n	800a2f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2e0:	f7fb fc1c 	bl	8005b1c <HAL_GetTick>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	2b64      	cmp	r3, #100	; 0x64
 800a2ec:	d901      	bls.n	800a2f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e21f      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2f2:	4b61      	ldr	r3, [pc, #388]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0f0      	beq.n	800a2e0 <HAL_RCC_OscConfig+0xe8>
 800a2fe:	e014      	b.n	800a32a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a300:	f7fb fc0c 	bl	8005b1c <HAL_GetTick>
 800a304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a306:	e008      	b.n	800a31a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a308:	f7fb fc08 	bl	8005b1c <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	2b64      	cmp	r3, #100	; 0x64
 800a314:	d901      	bls.n	800a31a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	e20b      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a31a:	4b57      	ldr	r3, [pc, #348]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1f0      	bne.n	800a308 <HAL_RCC_OscConfig+0x110>
 800a326:	e000      	b.n	800a32a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0302 	and.w	r3, r3, #2
 800a332:	2b00      	cmp	r3, #0
 800a334:	d069      	beq.n	800a40a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a336:	4b50      	ldr	r3, [pc, #320]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f003 030c 	and.w	r3, r3, #12
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00b      	beq.n	800a35a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a342:	4b4d      	ldr	r3, [pc, #308]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 030c 	and.w	r3, r3, #12
 800a34a:	2b08      	cmp	r3, #8
 800a34c:	d11c      	bne.n	800a388 <HAL_RCC_OscConfig+0x190>
 800a34e:	4b4a      	ldr	r3, [pc, #296]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d116      	bne.n	800a388 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a35a:	4b47      	ldr	r3, [pc, #284]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d005      	beq.n	800a372 <HAL_RCC_OscConfig+0x17a>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d001      	beq.n	800a372 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e1df      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a372:	4b41      	ldr	r3, [pc, #260]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	493d      	ldr	r1, [pc, #244]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a382:	4313      	orrs	r3, r2
 800a384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a386:	e040      	b.n	800a40a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d023      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a390:	4b39      	ldr	r3, [pc, #228]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a38      	ldr	r2, [pc, #224]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a396:	f043 0301 	orr.w	r3, r3, #1
 800a39a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39c:	f7fb fbbe 	bl	8005b1c <HAL_GetTick>
 800a3a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3a2:	e008      	b.n	800a3b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3a4:	f7fb fbba 	bl	8005b1c <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d901      	bls.n	800a3b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e1bd      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3b6:	4b30      	ldr	r3, [pc, #192]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0f0      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3c2:	4b2d      	ldr	r3, [pc, #180]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	4929      	ldr	r1, [pc, #164]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	600b      	str	r3, [r1, #0]
 800a3d6:	e018      	b.n	800a40a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3d8:	4b27      	ldr	r3, [pc, #156]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a26      	ldr	r2, [pc, #152]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a3de:	f023 0301 	bic.w	r3, r3, #1
 800a3e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e4:	f7fb fb9a 	bl	8005b1c <HAL_GetTick>
 800a3e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3ea:	e008      	b.n	800a3fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3ec:	f7fb fb96 	bl	8005b1c <HAL_GetTick>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d901      	bls.n	800a3fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e199      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3fe:	4b1e      	ldr	r3, [pc, #120]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1f0      	bne.n	800a3ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b00      	cmp	r3, #0
 800a414:	d038      	beq.n	800a488 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d019      	beq.n	800a452 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a41e:	4b16      	ldr	r3, [pc, #88]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a422:	4a15      	ldr	r2, [pc, #84]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a424:	f043 0301 	orr.w	r3, r3, #1
 800a428:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a42a:	f7fb fb77 	bl	8005b1c <HAL_GetTick>
 800a42e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a430:	e008      	b.n	800a444 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a432:	f7fb fb73 	bl	8005b1c <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d901      	bls.n	800a444 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e176      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a444:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0f0      	beq.n	800a432 <HAL_RCC_OscConfig+0x23a>
 800a450:	e01a      	b.n	800a488 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a456:	4a08      	ldr	r2, [pc, #32]	; (800a478 <HAL_RCC_OscConfig+0x280>)
 800a458:	f023 0301 	bic.w	r3, r3, #1
 800a45c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a45e:	f7fb fb5d 	bl	8005b1c <HAL_GetTick>
 800a462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a464:	e00a      	b.n	800a47c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a466:	f7fb fb59 	bl	8005b1c <HAL_GetTick>
 800a46a:	4602      	mov	r2, r0
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	2b02      	cmp	r3, #2
 800a472:	d903      	bls.n	800a47c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e15c      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
 800a478:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a47c:	4b91      	ldr	r3, [pc, #580]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a47e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a480:	f003 0302 	and.w	r3, r3, #2
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1ee      	bne.n	800a466 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 80a4 	beq.w	800a5de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a496:	4b8b      	ldr	r3, [pc, #556]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10d      	bne.n	800a4be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4a2:	4b88      	ldr	r3, [pc, #544]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a6:	4a87      	ldr	r2, [pc, #540]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a4a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4ac:	6413      	str	r3, [r2, #64]	; 0x40
 800a4ae:	4b85      	ldr	r3, [pc, #532]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4b6:	60bb      	str	r3, [r7, #8]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4be:	4b82      	ldr	r3, [pc, #520]	; (800a6c8 <HAL_RCC_OscConfig+0x4d0>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d118      	bne.n	800a4fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a4ca:	4b7f      	ldr	r3, [pc, #508]	; (800a6c8 <HAL_RCC_OscConfig+0x4d0>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a7e      	ldr	r2, [pc, #504]	; (800a6c8 <HAL_RCC_OscConfig+0x4d0>)
 800a4d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4d6:	f7fb fb21 	bl	8005b1c <HAL_GetTick>
 800a4da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4dc:	e008      	b.n	800a4f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4de:	f7fb fb1d 	bl	8005b1c <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b64      	cmp	r3, #100	; 0x64
 800a4ea:	d901      	bls.n	800a4f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e120      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4f0:	4b75      	ldr	r3, [pc, #468]	; (800a6c8 <HAL_RCC_OscConfig+0x4d0>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0f0      	beq.n	800a4de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d106      	bne.n	800a512 <HAL_RCC_OscConfig+0x31a>
 800a504:	4b6f      	ldr	r3, [pc, #444]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a508:	4a6e      	ldr	r2, [pc, #440]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a50a:	f043 0301 	orr.w	r3, r3, #1
 800a50e:	6713      	str	r3, [r2, #112]	; 0x70
 800a510:	e02d      	b.n	800a56e <HAL_RCC_OscConfig+0x376>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10c      	bne.n	800a534 <HAL_RCC_OscConfig+0x33c>
 800a51a:	4b6a      	ldr	r3, [pc, #424]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a51e:	4a69      	ldr	r2, [pc, #420]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a520:	f023 0301 	bic.w	r3, r3, #1
 800a524:	6713      	str	r3, [r2, #112]	; 0x70
 800a526:	4b67      	ldr	r3, [pc, #412]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52a:	4a66      	ldr	r2, [pc, #408]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a52c:	f023 0304 	bic.w	r3, r3, #4
 800a530:	6713      	str	r3, [r2, #112]	; 0x70
 800a532:	e01c      	b.n	800a56e <HAL_RCC_OscConfig+0x376>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	2b05      	cmp	r3, #5
 800a53a:	d10c      	bne.n	800a556 <HAL_RCC_OscConfig+0x35e>
 800a53c:	4b61      	ldr	r3, [pc, #388]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a53e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a540:	4a60      	ldr	r2, [pc, #384]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a542:	f043 0304 	orr.w	r3, r3, #4
 800a546:	6713      	str	r3, [r2, #112]	; 0x70
 800a548:	4b5e      	ldr	r3, [pc, #376]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a54a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a54c:	4a5d      	ldr	r2, [pc, #372]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a54e:	f043 0301 	orr.w	r3, r3, #1
 800a552:	6713      	str	r3, [r2, #112]	; 0x70
 800a554:	e00b      	b.n	800a56e <HAL_RCC_OscConfig+0x376>
 800a556:	4b5b      	ldr	r3, [pc, #364]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a55a:	4a5a      	ldr	r2, [pc, #360]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a55c:	f023 0301 	bic.w	r3, r3, #1
 800a560:	6713      	str	r3, [r2, #112]	; 0x70
 800a562:	4b58      	ldr	r3, [pc, #352]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a566:	4a57      	ldr	r2, [pc, #348]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a568:	f023 0304 	bic.w	r3, r3, #4
 800a56c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d015      	beq.n	800a5a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a576:	f7fb fad1 	bl	8005b1c <HAL_GetTick>
 800a57a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a57c:	e00a      	b.n	800a594 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a57e:	f7fb facd 	bl	8005b1c <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	f241 3288 	movw	r2, #5000	; 0x1388
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d901      	bls.n	800a594 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e0ce      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a594:	4b4b      	ldr	r3, [pc, #300]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a598:	f003 0302 	and.w	r3, r3, #2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0ee      	beq.n	800a57e <HAL_RCC_OscConfig+0x386>
 800a5a0:	e014      	b.n	800a5cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5a2:	f7fb fabb 	bl	8005b1c <HAL_GetTick>
 800a5a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5a8:	e00a      	b.n	800a5c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5aa:	f7fb fab7 	bl	8005b1c <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d901      	bls.n	800a5c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e0b8      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5c0:	4b40      	ldr	r3, [pc, #256]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1ee      	bne.n	800a5aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d105      	bne.n	800a5de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5d2:	4b3c      	ldr	r3, [pc, #240]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	4a3b      	ldr	r2, [pc, #236]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a5d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 80a4 	beq.w	800a730 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5e8:	4b36      	ldr	r3, [pc, #216]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f003 030c 	and.w	r3, r3, #12
 800a5f0:	2b08      	cmp	r3, #8
 800a5f2:	d06b      	beq.n	800a6cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d149      	bne.n	800a690 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5fc:	4b31      	ldr	r3, [pc, #196]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a30      	ldr	r2, [pc, #192]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a608:	f7fb fa88 	bl	8005b1c <HAL_GetTick>
 800a60c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a60e:	e008      	b.n	800a622 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a610:	f7fb fa84 	bl	8005b1c <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d901      	bls.n	800a622 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e087      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a622:	4b28      	ldr	r3, [pc, #160]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1f0      	bne.n	800a610 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	69da      	ldr	r2, [r3, #28]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	431a      	orrs	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63c:	019b      	lsls	r3, r3, #6
 800a63e:	431a      	orrs	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a644:	085b      	lsrs	r3, r3, #1
 800a646:	3b01      	subs	r3, #1
 800a648:	041b      	lsls	r3, r3, #16
 800a64a:	431a      	orrs	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	061b      	lsls	r3, r3, #24
 800a652:	4313      	orrs	r3, r2
 800a654:	4a1b      	ldr	r2, [pc, #108]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a65a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a65c:	4b19      	ldr	r3, [pc, #100]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a18      	ldr	r2, [pc, #96]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a668:	f7fb fa58 	bl	8005b1c <HAL_GetTick>
 800a66c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a66e:	e008      	b.n	800a682 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a670:	f7fb fa54 	bl	8005b1c <HAL_GetTick>
 800a674:	4602      	mov	r2, r0
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d901      	bls.n	800a682 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e057      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a682:	4b10      	ldr	r3, [pc, #64]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d0f0      	beq.n	800a670 <HAL_RCC_OscConfig+0x478>
 800a68e:	e04f      	b.n	800a730 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a690:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a0b      	ldr	r2, [pc, #44]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a69a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a69c:	f7fb fa3e 	bl	8005b1c <HAL_GetTick>
 800a6a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6a2:	e008      	b.n	800a6b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6a4:	f7fb fa3a 	bl	8005b1c <HAL_GetTick>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d901      	bls.n	800a6b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e03d      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6b6:	4b03      	ldr	r3, [pc, #12]	; (800a6c4 <HAL_RCC_OscConfig+0x4cc>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1f0      	bne.n	800a6a4 <HAL_RCC_OscConfig+0x4ac>
 800a6c2:	e035      	b.n	800a730 <HAL_RCC_OscConfig+0x538>
 800a6c4:	40023800 	.word	0x40023800
 800a6c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a6cc:	4b1b      	ldr	r3, [pc, #108]	; (800a73c <HAL_RCC_OscConfig+0x544>)
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d028      	beq.n	800a72c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d121      	bne.n	800a72c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d11a      	bne.n	800a72c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a702:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a704:	4293      	cmp	r3, r2
 800a706:	d111      	bne.n	800a72c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a712:	085b      	lsrs	r3, r3, #1
 800a714:	3b01      	subs	r3, #1
 800a716:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a718:	429a      	cmp	r2, r3
 800a71a:	d107      	bne.n	800a72c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a726:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a728:	429a      	cmp	r2, r3
 800a72a:	d001      	beq.n	800a730 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e000      	b.n	800a732 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	40023800 	.word	0x40023800

0800a740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e0d0      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a758:	4b6a      	ldr	r3, [pc, #424]	; (800a904 <HAL_RCC_ClockConfig+0x1c4>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 030f 	and.w	r3, r3, #15
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d910      	bls.n	800a788 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a766:	4b67      	ldr	r3, [pc, #412]	; (800a904 <HAL_RCC_ClockConfig+0x1c4>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f023 020f 	bic.w	r2, r3, #15
 800a76e:	4965      	ldr	r1, [pc, #404]	; (800a904 <HAL_RCC_ClockConfig+0x1c4>)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	4313      	orrs	r3, r2
 800a774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a776:	4b63      	ldr	r3, [pc, #396]	; (800a904 <HAL_RCC_ClockConfig+0x1c4>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	429a      	cmp	r2, r3
 800a782:	d001      	beq.n	800a788 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e0b8      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0302 	and.w	r3, r3, #2
 800a790:	2b00      	cmp	r3, #0
 800a792:	d020      	beq.n	800a7d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d005      	beq.n	800a7ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a7a0:	4b59      	ldr	r3, [pc, #356]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	4a58      	ldr	r2, [pc, #352]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a7a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a7aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0308 	and.w	r3, r3, #8
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d005      	beq.n	800a7c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a7b8:	4b53      	ldr	r3, [pc, #332]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	4a52      	ldr	r2, [pc, #328]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a7be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a7c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7c4:	4b50      	ldr	r3, [pc, #320]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	494d      	ldr	r1, [pc, #308]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d040      	beq.n	800a864 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d107      	bne.n	800a7fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7ea:	4b47      	ldr	r3, [pc, #284]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d115      	bne.n	800a822 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e07f      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d107      	bne.n	800a812 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a802:	4b41      	ldr	r3, [pc, #260]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e073      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a812:	4b3d      	ldr	r3, [pc, #244]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e06b      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a822:	4b39      	ldr	r3, [pc, #228]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f023 0203 	bic.w	r2, r3, #3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	4936      	ldr	r1, [pc, #216]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a830:	4313      	orrs	r3, r2
 800a832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a834:	f7fb f972 	bl	8005b1c <HAL_GetTick>
 800a838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a83a:	e00a      	b.n	800a852 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a83c:	f7fb f96e 	bl	8005b1c <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	f241 3288 	movw	r2, #5000	; 0x1388
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e053      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a852:	4b2d      	ldr	r3, [pc, #180]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f003 020c 	and.w	r2, r3, #12
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	429a      	cmp	r2, r3
 800a862:	d1eb      	bne.n	800a83c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a864:	4b27      	ldr	r3, [pc, #156]	; (800a904 <HAL_RCC_ClockConfig+0x1c4>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 030f 	and.w	r3, r3, #15
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d210      	bcs.n	800a894 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a872:	4b24      	ldr	r3, [pc, #144]	; (800a904 <HAL_RCC_ClockConfig+0x1c4>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f023 020f 	bic.w	r2, r3, #15
 800a87a:	4922      	ldr	r1, [pc, #136]	; (800a904 <HAL_RCC_ClockConfig+0x1c4>)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	4313      	orrs	r3, r2
 800a880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a882:	4b20      	ldr	r3, [pc, #128]	; (800a904 <HAL_RCC_ClockConfig+0x1c4>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 030f 	and.w	r3, r3, #15
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d001      	beq.n	800a894 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e032      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0304 	and.w	r3, r3, #4
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d008      	beq.n	800a8b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a8a0:	4b19      	ldr	r3, [pc, #100]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	4916      	ldr	r1, [pc, #88]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0308 	and.w	r3, r3, #8
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d009      	beq.n	800a8d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a8be:	4b12      	ldr	r3, [pc, #72]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	00db      	lsls	r3, r3, #3
 800a8cc:	490e      	ldr	r1, [pc, #56]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a8d2:	f000 f821 	bl	800a918 <HAL_RCC_GetSysClockFreq>
 800a8d6:	4601      	mov	r1, r0
 800a8d8:	4b0b      	ldr	r3, [pc, #44]	; (800a908 <HAL_RCC_ClockConfig+0x1c8>)
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	091b      	lsrs	r3, r3, #4
 800a8de:	f003 030f 	and.w	r3, r3, #15
 800a8e2:	4a0a      	ldr	r2, [pc, #40]	; (800a90c <HAL_RCC_ClockConfig+0x1cc>)
 800a8e4:	5cd3      	ldrb	r3, [r2, r3]
 800a8e6:	fa21 f303 	lsr.w	r3, r1, r3
 800a8ea:	4a09      	ldr	r2, [pc, #36]	; (800a910 <HAL_RCC_ClockConfig+0x1d0>)
 800a8ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a8ee:	4b09      	ldr	r3, [pc, #36]	; (800a914 <HAL_RCC_ClockConfig+0x1d4>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7f7 fffe 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	40023c00 	.word	0x40023c00
 800a908:	40023800 	.word	0x40023800
 800a90c:	08010eb0 	.word	0x08010eb0
 800a910:	20000000 	.word	0x20000000
 800a914:	20000054 	.word	0x20000054

0800a918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	607b      	str	r3, [r7, #4]
 800a922:	2300      	movs	r3, #0
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	2300      	movs	r3, #0
 800a928:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a92e:	4b50      	ldr	r3, [pc, #320]	; (800aa70 <HAL_RCC_GetSysClockFreq+0x158>)
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	f003 030c 	and.w	r3, r3, #12
 800a936:	2b04      	cmp	r3, #4
 800a938:	d007      	beq.n	800a94a <HAL_RCC_GetSysClockFreq+0x32>
 800a93a:	2b08      	cmp	r3, #8
 800a93c:	d008      	beq.n	800a950 <HAL_RCC_GetSysClockFreq+0x38>
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f040 808d 	bne.w	800aa5e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a944:	4b4b      	ldr	r3, [pc, #300]	; (800aa74 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a946:	60bb      	str	r3, [r7, #8]
      break;
 800a948:	e08c      	b.n	800aa64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a94a:	4b4b      	ldr	r3, [pc, #300]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x160>)
 800a94c:	60bb      	str	r3, [r7, #8]
      break;
 800a94e:	e089      	b.n	800aa64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a950:	4b47      	ldr	r3, [pc, #284]	; (800aa70 <HAL_RCC_GetSysClockFreq+0x158>)
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a958:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a95a:	4b45      	ldr	r3, [pc, #276]	; (800aa70 <HAL_RCC_GetSysClockFreq+0x158>)
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d023      	beq.n	800a9ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a966:	4b42      	ldr	r3, [pc, #264]	; (800aa70 <HAL_RCC_GetSysClockFreq+0x158>)
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	099b      	lsrs	r3, r3, #6
 800a96c:	f04f 0400 	mov.w	r4, #0
 800a970:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a974:	f04f 0200 	mov.w	r2, #0
 800a978:	ea03 0501 	and.w	r5, r3, r1
 800a97c:	ea04 0602 	and.w	r6, r4, r2
 800a980:	4a3d      	ldr	r2, [pc, #244]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x160>)
 800a982:	fb02 f106 	mul.w	r1, r2, r6
 800a986:	2200      	movs	r2, #0
 800a988:	fb02 f205 	mul.w	r2, r2, r5
 800a98c:	440a      	add	r2, r1
 800a98e:	493a      	ldr	r1, [pc, #232]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x160>)
 800a990:	fba5 0101 	umull	r0, r1, r5, r1
 800a994:	1853      	adds	r3, r2, r1
 800a996:	4619      	mov	r1, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f04f 0400 	mov.w	r4, #0
 800a99e:	461a      	mov	r2, r3
 800a9a0:	4623      	mov	r3, r4
 800a9a2:	f7f5 fc85 	bl	80002b0 <__aeabi_uldivmod>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	e049      	b.n	800aa42 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9ae:	4b30      	ldr	r3, [pc, #192]	; (800aa70 <HAL_RCC_GetSysClockFreq+0x158>)
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	099b      	lsrs	r3, r3, #6
 800a9b4:	f04f 0400 	mov.w	r4, #0
 800a9b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a9bc:	f04f 0200 	mov.w	r2, #0
 800a9c0:	ea03 0501 	and.w	r5, r3, r1
 800a9c4:	ea04 0602 	and.w	r6, r4, r2
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	4632      	mov	r2, r6
 800a9cc:	f04f 0300 	mov.w	r3, #0
 800a9d0:	f04f 0400 	mov.w	r4, #0
 800a9d4:	0154      	lsls	r4, r2, #5
 800a9d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a9da:	014b      	lsls	r3, r1, #5
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4622      	mov	r2, r4
 800a9e0:	1b49      	subs	r1, r1, r5
 800a9e2:	eb62 0206 	sbc.w	r2, r2, r6
 800a9e6:	f04f 0300 	mov.w	r3, #0
 800a9ea:	f04f 0400 	mov.w	r4, #0
 800a9ee:	0194      	lsls	r4, r2, #6
 800a9f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a9f4:	018b      	lsls	r3, r1, #6
 800a9f6:	1a5b      	subs	r3, r3, r1
 800a9f8:	eb64 0402 	sbc.w	r4, r4, r2
 800a9fc:	f04f 0100 	mov.w	r1, #0
 800aa00:	f04f 0200 	mov.w	r2, #0
 800aa04:	00e2      	lsls	r2, r4, #3
 800aa06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800aa0a:	00d9      	lsls	r1, r3, #3
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4614      	mov	r4, r2
 800aa10:	195b      	adds	r3, r3, r5
 800aa12:	eb44 0406 	adc.w	r4, r4, r6
 800aa16:	f04f 0100 	mov.w	r1, #0
 800aa1a:	f04f 0200 	mov.w	r2, #0
 800aa1e:	02a2      	lsls	r2, r4, #10
 800aa20:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800aa24:	0299      	lsls	r1, r3, #10
 800aa26:	460b      	mov	r3, r1
 800aa28:	4614      	mov	r4, r2
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f04f 0400 	mov.w	r4, #0
 800aa34:	461a      	mov	r2, r3
 800aa36:	4623      	mov	r3, r4
 800aa38:	f7f5 fc3a 	bl	80002b0 <__aeabi_uldivmod>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800aa42:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <HAL_RCC_GetSysClockFreq+0x158>)
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	0c1b      	lsrs	r3, r3, #16
 800aa48:	f003 0303 	and.w	r3, r3, #3
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa5a:	60bb      	str	r3, [r7, #8]
      break;
 800aa5c:	e002      	b.n	800aa64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa5e:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <HAL_RCC_GetSysClockFreq+0x15c>)
 800aa60:	60bb      	str	r3, [r7, #8]
      break;
 800aa62:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa64:	68bb      	ldr	r3, [r7, #8]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	40023800 	.word	0x40023800
 800aa74:	00f42400 	.word	0x00f42400
 800aa78:	017d7840 	.word	0x017d7840

0800aa7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa80:	4b03      	ldr	r3, [pc, #12]	; (800aa90 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa82:	681b      	ldr	r3, [r3, #0]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	20000000 	.word	0x20000000

0800aa94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aa98:	f7ff fff0 	bl	800aa7c <HAL_RCC_GetHCLKFreq>
 800aa9c:	4601      	mov	r1, r0
 800aa9e:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	0a9b      	lsrs	r3, r3, #10
 800aaa4:	f003 0307 	and.w	r3, r3, #7
 800aaa8:	4a03      	ldr	r2, [pc, #12]	; (800aab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aaaa:	5cd3      	ldrb	r3, [r2, r3]
 800aaac:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	40023800 	.word	0x40023800
 800aab8:	08010ec0 	.word	0x08010ec0

0800aabc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aac0:	f7ff ffdc 	bl	800aa7c <HAL_RCC_GetHCLKFreq>
 800aac4:	4601      	mov	r1, r0
 800aac6:	4b05      	ldr	r3, [pc, #20]	; (800aadc <HAL_RCC_GetPCLK2Freq+0x20>)
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	0b5b      	lsrs	r3, r3, #13
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	4a03      	ldr	r2, [pc, #12]	; (800aae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aad2:	5cd3      	ldrb	r3, [r2, r3]
 800aad4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aad8:	4618      	mov	r0, r3
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	40023800 	.word	0x40023800
 800aae0:	08010ec0 	.word	0x08010ec0

0800aae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	220f      	movs	r2, #15
 800aaf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aaf4:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <HAL_RCC_GetClockConfig+0x5c>)
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f003 0203 	and.w	r2, r3, #3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ab00:	4b0f      	ldr	r3, [pc, #60]	; (800ab40 <HAL_RCC_GetClockConfig+0x5c>)
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <HAL_RCC_GetClockConfig+0x5c>)
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ab18:	4b09      	ldr	r3, [pc, #36]	; (800ab40 <HAL_RCC_GetClockConfig+0x5c>)
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	08db      	lsrs	r3, r3, #3
 800ab1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ab26:	4b07      	ldr	r3, [pc, #28]	; (800ab44 <HAL_RCC_GetClockConfig+0x60>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 020f 	and.w	r2, r3, #15
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	601a      	str	r2, [r3, #0]
}
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	40023800 	.word	0x40023800
 800ab44:	40023c00 	.word	0x40023c00

0800ab48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d012      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ab70:	4b69      	ldr	r3, [pc, #420]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	4a68      	ldr	r2, [pc, #416]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ab7a:	6093      	str	r3, [r2, #8]
 800ab7c:	4b66      	ldr	r3, [pc, #408]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab7e:	689a      	ldr	r2, [r3, #8]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab84:	4964      	ldr	r1, [pc, #400]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab86:	4313      	orrs	r3, r2
 800ab88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ab92:	2301      	movs	r3, #1
 800ab94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d017      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aba2:	4b5d      	ldr	r3, [pc, #372]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb0:	4959      	ldr	r1, [pc, #356]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abb2:	4313      	orrs	r3, r2
 800abb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abc0:	d101      	bne.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800abc2:	2301      	movs	r3, #1
 800abc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800abce:	2301      	movs	r3, #1
 800abd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d017      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800abde:	4b4e      	ldr	r3, [pc, #312]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abe4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abec:	494a      	ldr	r1, [pc, #296]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abee:	4313      	orrs	r3, r2
 800abf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abfc:	d101      	bne.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800abfe:	2301      	movs	r3, #1
 800ac00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0320 	and.w	r3, r3, #32
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 808b 	beq.w	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ac2c:	4b3a      	ldr	r3, [pc, #232]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac30:	4a39      	ldr	r2, [pc, #228]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac36:	6413      	str	r3, [r2, #64]	; 0x40
 800ac38:	4b37      	ldr	r3, [pc, #220]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac40:	60bb      	str	r3, [r7, #8]
 800ac42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ac44:	4b35      	ldr	r3, [pc, #212]	; (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a34      	ldr	r2, [pc, #208]	; (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ac4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac50:	f7fa ff64 	bl	8005b1c <HAL_GetTick>
 800ac54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ac56:	e008      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac58:	f7fa ff60 	bl	8005b1c <HAL_GetTick>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	2b64      	cmp	r3, #100	; 0x64
 800ac64:	d901      	bls.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e355      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ac6a:	4b2c      	ldr	r3, [pc, #176]	; (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0f0      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ac76:	4b28      	ldr	r3, [pc, #160]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d035      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac8e:	693a      	ldr	r2, [r7, #16]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d02e      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac94:	4b20      	ldr	r3, [pc, #128]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ac9e:	4b1e      	ldr	r3, [pc, #120]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca2:	4a1d      	ldr	r2, [pc, #116]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aca8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800acaa:	4b1b      	ldr	r3, [pc, #108]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acae:	4a1a      	ldr	r2, [pc, #104]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800acb6:	4a18      	ldr	r2, [pc, #96]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800acbc:	4b16      	ldr	r3, [pc, #88]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d114      	bne.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acc8:	f7fa ff28 	bl	8005b1c <HAL_GetTick>
 800accc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acce:	e00a      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800acd0:	f7fa ff24 	bl	8005b1c <HAL_GetTick>
 800acd4:	4602      	mov	r2, r0
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	f241 3288 	movw	r2, #5000	; 0x1388
 800acde:	4293      	cmp	r3, r2
 800ace0:	d901      	bls.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ace2:	2303      	movs	r3, #3
 800ace4:	e317      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ace6:	4b0c      	ldr	r3, [pc, #48]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ace8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acea:	f003 0302 	and.w	r3, r3, #2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d0ee      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acfe:	d111      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ad00:	4b05      	ldr	r3, [pc, #20]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ad0c:	4b04      	ldr	r3, [pc, #16]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ad0e:	400b      	ands	r3, r1
 800ad10:	4901      	ldr	r1, [pc, #4]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad12:	4313      	orrs	r3, r2
 800ad14:	608b      	str	r3, [r1, #8]
 800ad16:	e00b      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ad18:	40023800 	.word	0x40023800
 800ad1c:	40007000 	.word	0x40007000
 800ad20:	0ffffcff 	.word	0x0ffffcff
 800ad24:	4bb0      	ldr	r3, [pc, #704]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	4aaf      	ldr	r2, [pc, #700]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ad2e:	6093      	str	r3, [r2, #8]
 800ad30:	4bad      	ldr	r3, [pc, #692]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad3c:	49aa      	ldr	r1, [pc, #680]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0310 	and.w	r3, r3, #16
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d010      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad4e:	4ba6      	ldr	r3, [pc, #664]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad54:	4aa4      	ldr	r2, [pc, #656]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ad5e:	4ba2      	ldr	r3, [pc, #648]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad68:	499f      	ldr	r1, [pc, #636]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00a      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad7c:	4b9a      	ldr	r3, [pc, #616]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad8a:	4997      	ldr	r1, [pc, #604]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad9e:	4b92      	ldr	r3, [pc, #584]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ada0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ada4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adac:	498e      	ldr	r1, [pc, #568]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00a      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800adc0:	4b89      	ldr	r3, [pc, #548]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800adc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adce:	4986      	ldr	r1, [pc, #536]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800add0:	4313      	orrs	r3, r2
 800add2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00a      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ade2:	4b81      	ldr	r3, [pc, #516]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ade4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf0:	497d      	ldr	r1, [pc, #500]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800adf2:	4313      	orrs	r3, r2
 800adf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00a      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ae04:	4b78      	ldr	r3, [pc, #480]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae0a:	f023 0203 	bic.w	r2, r3, #3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae12:	4975      	ldr	r1, [pc, #468]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae14:	4313      	orrs	r3, r2
 800ae16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ae26:	4b70      	ldr	r3, [pc, #448]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae2c:	f023 020c 	bic.w	r2, r3, #12
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae34:	496c      	ldr	r1, [pc, #432]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00a      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ae48:	4b67      	ldr	r3, [pc, #412]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae56:	4964      	ldr	r1, [pc, #400]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ae6a:	4b5f      	ldr	r3, [pc, #380]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae78:	495b      	ldr	r1, [pc, #364]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ae8c:	4b56      	ldr	r3, [pc, #344]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9a:	4953      	ldr	r1, [pc, #332]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00a      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800aeae:	4b4e      	ldr	r3, [pc, #312]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aeb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aebc:	494a      	ldr	r1, [pc, #296]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aebe:	4313      	orrs	r3, r2
 800aec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00a      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800aed0:	4b45      	ldr	r3, [pc, #276]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aede:	4942      	ldr	r1, [pc, #264]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00a      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800aef2:	4b3d      	ldr	r3, [pc, #244]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af00:	4939      	ldr	r1, [pc, #228]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800af02:	4313      	orrs	r3, r2
 800af04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d00a      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af14:	4b34      	ldr	r3, [pc, #208]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800af16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af22:	4931      	ldr	r1, [pc, #196]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800af24:	4313      	orrs	r3, r2
 800af26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af32:	2b00      	cmp	r3, #0
 800af34:	d011      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800af36:	4b2c      	ldr	r3, [pc, #176]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800af38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af44:	4928      	ldr	r1, [pc, #160]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800af46:	4313      	orrs	r3, r2
 800af48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af54:	d101      	bne.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800af56:	2301      	movs	r3, #1
 800af58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0308 	and.w	r3, r3, #8
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800af66:	2301      	movs	r3, #1
 800af68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00a      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800af76:	4b1c      	ldr	r3, [pc, #112]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800af78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af84:	4918      	ldr	r1, [pc, #96]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800af86:	4313      	orrs	r3, r2
 800af88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800af98:	4b13      	ldr	r3, [pc, #76]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800af9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afa8:	490f      	ldr	r1, [pc, #60]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d005      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afbe:	f040 80d8 	bne.w	800b172 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800afc2:	4b09      	ldr	r3, [pc, #36]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a08      	ldr	r2, [pc, #32]	; (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800afc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afce:	f7fa fda5 	bl	8005b1c <HAL_GetTick>
 800afd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800afd4:	e00a      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800afd6:	f7fa fda1 	bl	8005b1c <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	2b64      	cmp	r3, #100	; 0x64
 800afe2:	d903      	bls.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e196      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800afe8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800afec:	4b6c      	ldr	r3, [pc, #432]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1ee      	bne.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	2b00      	cmp	r3, #0
 800b002:	d021      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d11d      	bne.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b00c:	4b64      	ldr	r3, [pc, #400]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b00e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b012:	0c1b      	lsrs	r3, r3, #16
 800b014:	f003 0303 	and.w	r3, r3, #3
 800b018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b01a:	4b61      	ldr	r3, [pc, #388]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b01c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b020:	0e1b      	lsrs	r3, r3, #24
 800b022:	f003 030f 	and.w	r3, r3, #15
 800b026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	019a      	lsls	r2, r3, #6
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	041b      	lsls	r3, r3, #16
 800b032:	431a      	orrs	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	061b      	lsls	r3, r3, #24
 800b038:	431a      	orrs	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	071b      	lsls	r3, r3, #28
 800b040:	4957      	ldr	r1, [pc, #348]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b042:	4313      	orrs	r3, r2
 800b044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d004      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x516>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b05c:	d00a      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b066:	2b00      	cmp	r3, #0
 800b068:	d02e      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b072:	d129      	bne.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b074:	4b4a      	ldr	r3, [pc, #296]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b07a:	0c1b      	lsrs	r3, r3, #16
 800b07c:	f003 0303 	and.w	r3, r3, #3
 800b080:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b082:	4b47      	ldr	r3, [pc, #284]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b088:	0f1b      	lsrs	r3, r3, #28
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	019a      	lsls	r2, r3, #6
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	041b      	lsls	r3, r3, #16
 800b09a:	431a      	orrs	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	061b      	lsls	r3, r3, #24
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	071b      	lsls	r3, r3, #28
 800b0a8:	493d      	ldr	r1, [pc, #244]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b0b0:	4b3b      	ldr	r3, [pc, #236]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b0b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0b6:	f023 021f 	bic.w	r2, r3, #31
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	4937      	ldr	r1, [pc, #220]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d01d      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b0d4:	4b32      	ldr	r3, [pc, #200]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b0d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0da:	0e1b      	lsrs	r3, r3, #24
 800b0dc:	f003 030f 	and.w	r3, r3, #15
 800b0e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b0e2:	4b2f      	ldr	r3, [pc, #188]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b0e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0e8:	0f1b      	lsrs	r3, r3, #28
 800b0ea:	f003 0307 	and.w	r3, r3, #7
 800b0ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	019a      	lsls	r2, r3, #6
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	041b      	lsls	r3, r3, #16
 800b0fc:	431a      	orrs	r2, r3
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	061b      	lsls	r3, r3, #24
 800b102:	431a      	orrs	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	071b      	lsls	r3, r3, #28
 800b108:	4925      	ldr	r1, [pc, #148]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d011      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	019a      	lsls	r2, r3, #6
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	041b      	lsls	r3, r3, #16
 800b128:	431a      	orrs	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	061b      	lsls	r3, r3, #24
 800b130:	431a      	orrs	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	071b      	lsls	r3, r3, #28
 800b138:	4919      	ldr	r1, [pc, #100]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b13a:	4313      	orrs	r3, r2
 800b13c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b140:	4b17      	ldr	r3, [pc, #92]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a16      	ldr	r2, [pc, #88]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b14a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b14c:	f7fa fce6 	bl	8005b1c <HAL_GetTick>
 800b150:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b152:	e008      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b154:	f7fa fce2 	bl	8005b1c <HAL_GetTick>
 800b158:	4602      	mov	r2, r0
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	2b64      	cmp	r3, #100	; 0x64
 800b160:	d901      	bls.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e0d7      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b166:	4b0e      	ldr	r3, [pc, #56]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0f0      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	2b01      	cmp	r3, #1
 800b176:	f040 80cd 	bne.w	800b314 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b17a:	4b09      	ldr	r3, [pc, #36]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a08      	ldr	r2, [pc, #32]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800b180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b186:	f7fa fcc9 	bl	8005b1c <HAL_GetTick>
 800b18a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b18c:	e00a      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b18e:	f7fa fcc5 	bl	8005b1c <HAL_GetTick>
 800b192:	4602      	mov	r2, r0
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	2b64      	cmp	r3, #100	; 0x64
 800b19a:	d903      	bls.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e0ba      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800b1a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b1a4:	4b5e      	ldr	r3, [pc, #376]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1b0:	d0ed      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d009      	beq.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d02e      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d12a      	bne.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b1da:	4b51      	ldr	r3, [pc, #324]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e0:	0c1b      	lsrs	r3, r3, #16
 800b1e2:	f003 0303 	and.w	r3, r3, #3
 800b1e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b1e8:	4b4d      	ldr	r3, [pc, #308]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ee:	0f1b      	lsrs	r3, r3, #28
 800b1f0:	f003 0307 	and.w	r3, r3, #7
 800b1f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	019a      	lsls	r2, r3, #6
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	041b      	lsls	r3, r3, #16
 800b200:	431a      	orrs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	061b      	lsls	r3, r3, #24
 800b208:	431a      	orrs	r2, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	071b      	lsls	r3, r3, #28
 800b20e:	4944      	ldr	r1, [pc, #272]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b210:	4313      	orrs	r3, r2
 800b212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b216:	4b42      	ldr	r3, [pc, #264]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b21c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b224:	3b01      	subs	r3, #1
 800b226:	021b      	lsls	r3, r3, #8
 800b228:	493d      	ldr	r1, [pc, #244]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d022      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b244:	d11d      	bne.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b246:	4b36      	ldr	r3, [pc, #216]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24c:	0e1b      	lsrs	r3, r3, #24
 800b24e:	f003 030f 	and.w	r3, r3, #15
 800b252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b254:	4b32      	ldr	r3, [pc, #200]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25a:	0f1b      	lsrs	r3, r3, #28
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	019a      	lsls	r2, r3, #6
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a1b      	ldr	r3, [r3, #32]
 800b26c:	041b      	lsls	r3, r3, #16
 800b26e:	431a      	orrs	r2, r3
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	061b      	lsls	r3, r3, #24
 800b274:	431a      	orrs	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	071b      	lsls	r3, r3, #28
 800b27a:	4929      	ldr	r1, [pc, #164]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b27c:	4313      	orrs	r3, r2
 800b27e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0308 	and.w	r3, r3, #8
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d028      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b28e:	4b24      	ldr	r3, [pc, #144]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b294:	0e1b      	lsrs	r3, r3, #24
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b29c:	4b20      	ldr	r3, [pc, #128]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a2:	0c1b      	lsrs	r3, r3, #16
 800b2a4:	f003 0303 	and.w	r3, r3, #3
 800b2a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	019a      	lsls	r2, r3, #6
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	041b      	lsls	r3, r3, #16
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	061b      	lsls	r3, r3, #24
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	071b      	lsls	r3, r3, #28
 800b2c2:	4917      	ldr	r1, [pc, #92]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b2ca:	4b15      	ldr	r3, [pc, #84]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b2cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d8:	4911      	ldr	r1, [pc, #68]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b2e0:	4b0f      	ldr	r3, [pc, #60]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a0e      	ldr	r2, [pc, #56]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b2e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2ec:	f7fa fc16 	bl	8005b1c <HAL_GetTick>
 800b2f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b2f2:	e008      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b2f4:	f7fa fc12 	bl	8005b1c <HAL_GetTick>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	2b64      	cmp	r3, #100	; 0x64
 800b300:	d901      	bls.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b302:	2303      	movs	r3, #3
 800b304:	e007      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b306:	4b06      	ldr	r3, [pc, #24]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b30e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b312:	d1ef      	bne.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3720      	adds	r7, #32
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	40023800 	.word	0x40023800

0800b324 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a80      	ldr	r2, [pc, #512]	; (800b534 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800b334:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800b336:	4b80      	ldr	r3, [pc, #512]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b33c:	099b      	lsrs	r3, r3, #6
 800b33e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b346:	4b7c      	ldr	r3, [pc, #496]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b34c:	0c1b      	lsrs	r3, r3, #16
 800b34e:	f003 0203 	and.w	r2, r3, #3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b356:	4b78      	ldr	r3, [pc, #480]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b35c:	0e1b      	lsrs	r3, r3, #24
 800b35e:	f003 020f 	and.w	r2, r3, #15
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b366:	4b74      	ldr	r3, [pc, #464]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b36c:	0f1b      	lsrs	r3, r3, #28
 800b36e:	f003 0207 	and.w	r2, r3, #7
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800b376:	4b70      	ldr	r3, [pc, #448]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b37c:	099b      	lsrs	r3, r3, #6
 800b37e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b386:	4b6c      	ldr	r3, [pc, #432]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38c:	0c1b      	lsrs	r3, r3, #16
 800b38e:	f003 0203 	and.w	r2, r3, #3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b396:	4b68      	ldr	r3, [pc, #416]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b39c:	0e1b      	lsrs	r3, r3, #24
 800b39e:	f003 020f 	and.w	r2, r3, #15
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b3a6:	4b64      	ldr	r3, [pc, #400]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ac:	0f1b      	lsrs	r3, r3, #28
 800b3ae:	f003 0207 	and.w	r2, r3, #7
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800b3b6:	4b60      	ldr	r3, [pc, #384]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3bc:	f003 021f 	and.w	r2, r3, #31
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800b3c4:	4b5c      	ldr	r3, [pc, #368]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3ca:	0a1b      	lsrs	r3, r3, #8
 800b3cc:	f003 021f 	and.w	r2, r3, #31
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800b3d4:	4b58      	ldr	r3, [pc, #352]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3da:	0c1b      	lsrs	r3, r3, #16
 800b3dc:	f003 0203 	and.w	r2, r3, #3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800b3e4:	4b54      	ldr	r3, [pc, #336]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3ea:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800b3f2:	4b51      	ldr	r3, [pc, #324]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3f8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800b400:	4b4d      	ldr	r3, [pc, #308]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800b40c:	4b4a      	ldr	r3, [pc, #296]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800b41a:	4b47      	ldr	r3, [pc, #284]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b420:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800b428:	4b43      	ldr	r3, [pc, #268]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b42e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800b436:	4b40      	ldr	r3, [pc, #256]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b43c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800b444:	4b3c      	ldr	r3, [pc, #240]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b44a:	f003 0203 	and.w	r2, r3, #3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800b452:	4b39      	ldr	r3, [pc, #228]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b458:	f003 020c 	and.w	r2, r3, #12
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800b460:	4b35      	ldr	r3, [pc, #212]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b466:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800b46e:	4b32      	ldr	r3, [pc, #200]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b474:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800b47c:	4b2e      	ldr	r3, [pc, #184]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b482:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800b48a:	4b2b      	ldr	r3, [pc, #172]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b48c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b490:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800b498:	4b27      	ldr	r3, [pc, #156]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b49e:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800b4a6:	4b24      	ldr	r3, [pc, #144]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ac:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b4b4:	4b20      	ldr	r3, [pc, #128]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ba:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800b4c2:	4b1d      	ldr	r3, [pc, #116]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c8:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800b4d0:	4b19      	ldr	r3, [pc, #100]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b4d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d6:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b4de:	4b16      	ldr	r3, [pc, #88]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800b4ee:	4b12      	ldr	r3, [pc, #72]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b4f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800b4f8:	4b0f      	ldr	r3, [pc, #60]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	431a      	orrs	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800b508:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b50a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b50e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d103      	bne.n	800b51e <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800b51c:	e003      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b524:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b526:	bf00      	nop
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	00fffff1 	.word	0x00fffff1
 800b538:	40023800 	.word	0x40023800

0800b53c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b087      	sub	sp, #28
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b548:	2300      	movs	r3, #0
 800b54a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b55a:	f040 8086 	bne.w	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b55e:	4b8d      	ldr	r3, [pc, #564]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b564:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b56c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b574:	d03e      	beq.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800b576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b57a:	d073      	beq.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d000      	beq.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b580:	e074      	b.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b582:	4b84      	ldr	r3, [pc, #528]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d108      	bne.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b58e:	4b81      	ldr	r3, [pc, #516]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b596:	4a80      	ldr	r2, [pc, #512]	; (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800b598:	fbb2 f3f3 	udiv	r3, r2, r3
 800b59c:	613b      	str	r3, [r7, #16]
 800b59e:	e007      	b.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b5a0:	4b7c      	ldr	r3, [pc, #496]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5a8:	4a7c      	ldr	r2, [pc, #496]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800b5aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b5b0:	4b78      	ldr	r3, [pc, #480]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5b6:	0e1b      	lsrs	r3, r3, #24
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b5be:	4b75      	ldr	r3, [pc, #468]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c4:	099b      	lsrs	r3, r3, #6
 800b5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	fb02 f203 	mul.w	r2, r2, r3
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b5d8:	4b6e      	ldr	r3, [pc, #440]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b5da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5de:	0a1b      	lsrs	r3, r3, #8
 800b5e0:	f003 031f 	and.w	r3, r3, #31
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5f0:	617b      	str	r3, [r7, #20]
        break;
 800b5f2:	e03b      	b.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b5f4:	4b67      	ldr	r3, [pc, #412]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d108      	bne.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b600:	4b64      	ldr	r3, [pc, #400]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b608:	4a63      	ldr	r2, [pc, #396]	; (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800b60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	e007      	b.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b612:	4b60      	ldr	r3, [pc, #384]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b61a:	4a60      	ldr	r2, [pc, #384]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800b61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b620:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b622:	4b5c      	ldr	r3, [pc, #368]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b628:	0e1b      	lsrs	r3, r3, #24
 800b62a:	f003 030f 	and.w	r3, r3, #15
 800b62e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b630:	4b58      	ldr	r3, [pc, #352]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b636:	099b      	lsrs	r3, r3, #6
 800b638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	fb02 f203 	mul.w	r2, r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	fbb2 f3f3 	udiv	r3, r2, r3
 800b648:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b64a:	4b52      	ldr	r3, [pc, #328]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b650:	f003 031f 	and.w	r3, r3, #31
 800b654:	3301      	adds	r3, #1
 800b656:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b660:	617b      	str	r3, [r7, #20]
        break;
 800b662:	e003      	b.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b664:	4b4e      	ldr	r3, [pc, #312]	; (800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800b666:	617b      	str	r3, [r7, #20]
        break;
 800b668:	e000      	b.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800b66a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b672:	f040 8086 	bne.w	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b676:	4b47      	ldr	r3, [pc, #284]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b67c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b684:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b68c:	d03e      	beq.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b68e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b692:	d073      	beq.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b694:	2b00      	cmp	r3, #0
 800b696:	d000      	beq.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b698:	e074      	b.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b69a:	4b3e      	ldr	r3, [pc, #248]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d108      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b6a6:	4b3b      	ldr	r3, [pc, #236]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6ae:	4a3a      	ldr	r2, [pc, #232]	; (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800b6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b4:	613b      	str	r3, [r7, #16]
 800b6b6:	e007      	b.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b6b8:	4b36      	ldr	r3, [pc, #216]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6c0:	4a36      	ldr	r2, [pc, #216]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800b6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b6c8:	4b32      	ldr	r3, [pc, #200]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ce:	0e1b      	lsrs	r3, r3, #24
 800b6d0:	f003 030f 	and.w	r3, r3, #15
 800b6d4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b6d6:	4b2f      	ldr	r3, [pc, #188]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6dc:	099b      	lsrs	r3, r3, #6
 800b6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	fb02 f203 	mul.w	r2, r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ee:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b6f0:	4b28      	ldr	r3, [pc, #160]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b6f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6f6:	0a1b      	lsrs	r3, r3, #8
 800b6f8:	f003 031f 	and.w	r3, r3, #31
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	fbb2 f3f3 	udiv	r3, r2, r3
 800b708:	617b      	str	r3, [r7, #20]
        break;
 800b70a:	e03b      	b.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b70c:	4b21      	ldr	r3, [pc, #132]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d108      	bne.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b718:	4b1e      	ldr	r3, [pc, #120]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b720:	4a1d      	ldr	r2, [pc, #116]	; (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800b722:	fbb2 f3f3 	udiv	r3, r2, r3
 800b726:	613b      	str	r3, [r7, #16]
 800b728:	e007      	b.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b72a:	4b1a      	ldr	r3, [pc, #104]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b732:	4a1a      	ldr	r2, [pc, #104]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800b734:	fbb2 f3f3 	udiv	r3, r2, r3
 800b738:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b73a:	4b16      	ldr	r3, [pc, #88]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b73c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b740:	0e1b      	lsrs	r3, r3, #24
 800b742:	f003 030f 	and.w	r3, r3, #15
 800b746:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b748:	4b12      	ldr	r3, [pc, #72]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b74a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b74e:	099b      	lsrs	r3, r3, #6
 800b750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	fb02 f203 	mul.w	r2, r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b760:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b762:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b768:	f003 031f 	and.w	r3, r3, #31
 800b76c:	3301      	adds	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	fbb2 f3f3 	udiv	r3, r2, r3
 800b778:	617b      	str	r3, [r7, #20]
        break;
 800b77a:	e003      	b.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b77c:	4b08      	ldr	r3, [pc, #32]	; (800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800b77e:	617b      	str	r3, [r7, #20]
        break;
 800b780:	e000      	b.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800b782:	bf00      	nop

  return frequency;
 800b784:	697b      	ldr	r3, [r7, #20]
}
 800b786:	4618      	mov	r0, r3
 800b788:	371c      	adds	r7, #28
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	40023800 	.word	0x40023800
 800b798:	00f42400 	.word	0x00f42400
 800b79c:	017d7840 	.word	0x017d7840
 800b7a0:	00bb8000 	.word	0x00bb8000

0800b7a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e06b      	b.n	800b88e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7f5b      	ldrb	r3, [r3, #29]
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d105      	bne.n	800b7cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7f6 fcfe 	bl	80021c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	22ca      	movs	r2, #202	; 0xca
 800b7d8:	625a      	str	r2, [r3, #36]	; 0x24
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2253      	movs	r2, #83	; 0x53
 800b7e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fb00 	bl	800bde8 <RTC_EnterInitMode>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d008      	beq.n	800b800 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	22ff      	movs	r2, #255	; 0xff
 800b7f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2204      	movs	r2, #4
 800b7fa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e046      	b.n	800b88e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6899      	ldr	r1, [r3, #8]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	4b23      	ldr	r3, [pc, #140]	; (800b898 <HAL_RTC_Init+0xf4>)
 800b80c:	400b      	ands	r3, r1
 800b80e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6899      	ldr	r1, [r3, #8]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	431a      	orrs	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	431a      	orrs	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	68d2      	ldr	r2, [r2, #12]
 800b836:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6919      	ldr	r1, [r3, #16]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	041a      	lsls	r2, r3, #16
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	430a      	orrs	r2, r1
 800b84a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68da      	ldr	r2, [r3, #12]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b85a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f022 0208 	bic.w	r2, r2, #8
 800b86a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	699a      	ldr	r2, [r3, #24]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	430a      	orrs	r2, r1
 800b87c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	22ff      	movs	r2, #255	; 0xff
 800b884:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b88c:	2300      	movs	r3, #0
  }
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	ff8fffbf 	.word	0xff8fffbf

0800b89c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	7f1b      	ldrb	r3, [r3, #28]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d101      	bne.n	800b8b8 <HAL_RTC_SetTime+0x1c>
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	e0a8      	b.n	800ba0a <HAL_RTC_SetTime+0x16e>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d126      	bne.n	800b918 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 faac 	bl	800be40 <RTC_ByteToBcd2>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	785b      	ldrb	r3, [r3, #1]
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f000 faa5 	bl	800be40 <RTC_ByteToBcd2>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800b8fa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	789b      	ldrb	r3, [r3, #2]
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fa9d 	bl	800be40 <RTC_ByteToBcd2>
 800b906:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800b908:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	7b1b      	ldrb	r3, [r3, #12]
 800b910:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800b912:	4313      	orrs	r3, r2
 800b914:	617b      	str	r3, [r7, #20]
 800b916:	e018      	b.n	800b94a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b922:	2b00      	cmp	r3, #0
 800b924:	d102      	bne.n	800b92c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	2200      	movs	r2, #0
 800b92a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800b938:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800b93e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	7b1b      	ldrb	r3, [r3, #12]
 800b944:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800b946:	4313      	orrs	r3, r2
 800b948:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	22ca      	movs	r2, #202	; 0xca
 800b950:	625a      	str	r2, [r3, #36]	; 0x24
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2253      	movs	r2, #83	; 0x53
 800b958:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f000 fa44 	bl	800bde8 <RTC_EnterInitMode>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00b      	beq.n	800b97e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	22ff      	movs	r2, #255	; 0xff
 800b96c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2204      	movs	r2, #4
 800b972:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e045      	b.n	800ba0a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	6979      	ldr	r1, [r7, #20]
 800b984:	4b23      	ldr	r3, [pc, #140]	; (800ba14 <HAL_RTC_SetTime+0x178>)
 800b986:	400b      	ands	r3, r1
 800b988:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	689a      	ldr	r2, [r3, #8]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b998:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6899      	ldr	r1, [r3, #8]
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	691a      	ldr	r2, [r3, #16]
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	431a      	orrs	r2, r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68da      	ldr	r2, [r3, #12]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9c0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	f003 0320 	and.w	r3, r3, #32
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d111      	bne.n	800b9f4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 f9e1 	bl	800bd98 <HAL_RTC_WaitForSynchro>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00b      	beq.n	800b9f4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	22ff      	movs	r2, #255	; 0xff
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2204      	movs	r2, #4
 800b9e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e00a      	b.n	800ba0a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	22ff      	movs	r2, #255	; 0xff
 800b9fa:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ba08:	2300      	movs	r3, #0
  }
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd90      	pop	{r4, r7, pc}
 800ba12:	bf00      	nop
 800ba14:	007f7f7f 	.word	0x007f7f7f

0800ba18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ba18:	b590      	push	{r4, r7, lr}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	7f1b      	ldrb	r3, [r3, #28]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_RTC_SetDate+0x1c>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e092      	b.n	800bb5a <HAL_RTC_SetDate+0x142>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2201      	movs	r2, #1
 800ba38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2202      	movs	r2, #2
 800ba3e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d10e      	bne.n	800ba64 <HAL_RTC_SetDate+0x4c>
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	785b      	ldrb	r3, [r3, #1]
 800ba4a:	f003 0310 	and.w	r3, r3, #16
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d008      	beq.n	800ba64 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	785b      	ldrb	r3, [r3, #1]
 800ba56:	f023 0310 	bic.w	r3, r3, #16
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	330a      	adds	r3, #10
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d11c      	bne.n	800baa4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	78db      	ldrb	r3, [r3, #3]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f9e6 	bl	800be40 <RTC_ByteToBcd2>
 800ba74:	4603      	mov	r3, r0
 800ba76:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	785b      	ldrb	r3, [r3, #1]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f9df 	bl	800be40 <RTC_ByteToBcd2>
 800ba82:	4603      	mov	r3, r0
 800ba84:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ba86:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	789b      	ldrb	r3, [r3, #2]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 f9d7 	bl	800be40 <RTC_ByteToBcd2>
 800ba92:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ba94:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	617b      	str	r3, [r7, #20]
 800baa2:	e00e      	b.n	800bac2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	78db      	ldrb	r3, [r3, #3]
 800baa8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	785b      	ldrb	r3, [r3, #1]
 800baae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800bab0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800bab6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800babe:	4313      	orrs	r3, r2
 800bac0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	22ca      	movs	r2, #202	; 0xca
 800bac8:	625a      	str	r2, [r3, #36]	; 0x24
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2253      	movs	r2, #83	; 0x53
 800bad0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 f988 	bl	800bde8 <RTC_EnterInitMode>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00b      	beq.n	800baf6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	22ff      	movs	r2, #255	; 0xff
 800bae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2204      	movs	r2, #4
 800baea:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e031      	b.n	800bb5a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	6979      	ldr	r1, [r7, #20]
 800bafc:	4b19      	ldr	r3, [pc, #100]	; (800bb64 <HAL_RTC_SetDate+0x14c>)
 800bafe:	400b      	ands	r3, r1
 800bb00:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68da      	ldr	r2, [r3, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb10:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f003 0320 	and.w	r3, r3, #32
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d111      	bne.n	800bb44 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f000 f939 	bl	800bd98 <HAL_RTC_WaitForSynchro>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00b      	beq.n	800bb44 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	22ff      	movs	r2, #255	; 0xff
 800bb32:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2204      	movs	r2, #4
 800bb38:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e00a      	b.n	800bb5a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	22ff      	movs	r2, #255	; 0xff
 800bb4a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2200      	movs	r2, #0
 800bb56:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800bb58:	2300      	movs	r3, #0
  }
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	371c      	adds	r7, #28
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd90      	pop	{r4, r7, pc}
 800bb62:	bf00      	nop
 800bb64:	00ffff3f 	.word	0x00ffff3f

0800bb68 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800bb68:	b590      	push	{r4, r7, lr}
 800bb6a:	b089      	sub	sp, #36	; 0x24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	7f1b      	ldrb	r3, [r3, #28]
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d101      	bne.n	800bb8c <HAL_RTC_SetAlarm+0x24>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e101      	b.n	800bd90 <HAL_RTC_SetAlarm+0x228>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2202      	movs	r2, #2
 800bb96:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d137      	bne.n	800bc0e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d102      	bne.n	800bbb2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 f942 	bl	800be40 <RTC_ByteToBcd2>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	785b      	ldrb	r3, [r3, #1]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 f93b 	bl	800be40 <RTC_ByteToBcd2>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800bbce:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	789b      	ldrb	r3, [r3, #2]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 f933 	bl	800be40 <RTC_ByteToBcd2>
 800bbda:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800bbdc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	7b1b      	ldrb	r3, [r3, #12]
 800bbe4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800bbe6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 f925 	bl	800be40 <RTC_ByteToBcd2>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800bbfa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800bc02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	61fb      	str	r3, [r7, #28]
 800bc0c:	e023      	b.n	800bc56 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d102      	bne.n	800bc22 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	785b      	ldrb	r3, [r3, #1]
 800bc2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800bc2e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800bc34:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	7b1b      	ldrb	r3, [r3, #12]
 800bc3a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800bc3c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc44:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800bc46:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800bc4c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800bc52:	4313      	orrs	r3, r2
 800bc54:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	69db      	ldr	r3, [r3, #28]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	22ca      	movs	r2, #202	; 0xca
 800bc68:	625a      	str	r2, [r3, #36]	; 0x24
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2253      	movs	r2, #83	; 0x53
 800bc70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc7a:	d13f      	bne.n	800bcfc <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	689a      	ldr	r2, [r3, #8]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc8a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc9a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc9c:	f7f9 ff3e 	bl	8005b1c <HAL_GetTick>
 800bca0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800bca2:	e013      	b.n	800bccc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bca4:	f7f9 ff3a 	bl	8005b1c <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcb2:	d90b      	bls.n	800bccc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	22ff      	movs	r2, #255	; 0xff
 800bcba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2203      	movs	r2, #3
 800bcc0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	e061      	b.n	800bd90 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d0e4      	beq.n	800bca4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	69fa      	ldr	r2, [r7, #28]
 800bce0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	689a      	ldr	r2, [r3, #8]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcf8:	609a      	str	r2, [r3, #8]
 800bcfa:	e03e      	b.n	800bd7a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	689a      	ldr	r2, [r3, #8]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bd0a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689a      	ldr	r2, [r3, #8]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd1a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bd1c:	f7f9 fefe 	bl	8005b1c <HAL_GetTick>
 800bd20:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800bd22:	e013      	b.n	800bd4c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bd24:	f7f9 fefa 	bl	8005b1c <HAL_GetTick>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd32:	d90b      	bls.n	800bd4c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	22ff      	movs	r2, #255	; 0xff
 800bd3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2203      	movs	r2, #3
 800bd40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bd48:	2303      	movs	r3, #3
 800bd4a:	e021      	b.n	800bd90 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	f003 0302 	and.w	r3, r3, #2
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d0e4      	beq.n	800bd24 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	69fa      	ldr	r2, [r7, #28]
 800bd60:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	689a      	ldr	r2, [r3, #8]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd78:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	22ff      	movs	r2, #255	; 0xff
 800bd80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2201      	movs	r2, #1
 800bd86:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3724      	adds	r7, #36	; 0x24
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd90      	pop	{r4, r7, pc}

0800bd98 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bda0:	2300      	movs	r3, #0
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68da      	ldr	r2, [r3, #12]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bdb2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bdb4:	f7f9 feb2 	bl	8005b1c <HAL_GetTick>
 800bdb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800bdba:	e009      	b.n	800bdd0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bdbc:	f7f9 feae 	bl	8005b1c <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bdca:	d901      	bls.n	800bdd0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e007      	b.n	800bde0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	f003 0320 	and.w	r3, r3, #32
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0ee      	beq.n	800bdbc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d119      	bne.n	800be36 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f04f 32ff 	mov.w	r2, #4294967295
 800be0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800be0c:	f7f9 fe86 	bl	8005b1c <HAL_GetTick>
 800be10:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800be12:	e009      	b.n	800be28 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800be14:	f7f9 fe82 	bl	8005b1c <HAL_GetTick>
 800be18:	4602      	mov	r2, r0
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be22:	d901      	bls.n	800be28 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e007      	b.n	800be38 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be32:	2b00      	cmp	r3, #0
 800be34:	d0ee      	beq.n	800be14 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800be4e:	e005      	b.n	800be5c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	3301      	adds	r3, #1
 800be54:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	3b0a      	subs	r3, #10
 800be5a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	2b09      	cmp	r3, #9
 800be60:	d8f6      	bhi.n	800be50 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	b2db      	uxtb	r3, r3
 800be66:	011b      	lsls	r3, r3, #4
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	79fb      	ldrb	r3, [r7, #7]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	b2db      	uxtb	r3, r3
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	7f1b      	ldrb	r3, [r3, #28]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d101      	bne.n	800be98 <HAL_RTCEx_SetTimeStamp+0x1c>
 800be94:	2302      	movs	r3, #2
 800be96:	e03e      	b.n	800bf16 <HAL_RTCEx_SetTimeStamp+0x9a>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2201      	movs	r2, #1
 800be9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2202      	movs	r2, #2
 800bea2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689a      	ldr	r2, [r3, #8]
 800beaa:	4b1e      	ldr	r3, [pc, #120]	; (800bf24 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800beac:	4013      	ands	r3, r2
 800beae:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800beb0:	697a      	ldr	r2, [r7, #20]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	22ca      	movs	r2, #202	; 0xca
 800bebe:	625a      	str	r2, [r3, #36]	; 0x24
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2253      	movs	r2, #83	; 0x53
 800bec6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f022 0206 	bic.w	r2, r2, #6
 800bed6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689a      	ldr	r2, [r3, #8]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800befe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	22ff      	movs	r2, #255	; 0xff
 800bf06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	371c      	adds	r7, #28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	fffff7f7 	.word	0xfffff7f7

0800bf28 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b088      	sub	sp, #32
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e149      	b.n	800c1da <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d106      	bne.n	800bf60 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7f6 fc1a 	bl	8002794 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2202      	movs	r2, #2
 800bf64:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fa57 	bl	800c41c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d007      	beq.n	800bf86 <HAL_SAI_Init+0x5e>
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d302      	bcc.n	800bf80 <HAL_SAI_Init+0x58>
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d006      	beq.n	800bf8c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800bf7e:	e008      	b.n	800bf92 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61fb      	str	r3, [r7, #28]
      break;
 800bf84:	e005      	b.n	800bf92 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bf86:	2310      	movs	r3, #16
 800bf88:	61fb      	str	r3, [r7, #28]
      break;
 800bf8a:	e002      	b.n	800bf92 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bf8c:	2320      	movs	r3, #32
 800bf8e:	61fb      	str	r3, [r7, #28]
      break;
 800bf90:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d81d      	bhi.n	800bfd6 <HAL_SAI_Init+0xae>
 800bf9a:	a201      	add	r2, pc, #4	; (adr r2, 800bfa0 <HAL_SAI_Init+0x78>)
 800bf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa0:	0800bfb1 	.word	0x0800bfb1
 800bfa4:	0800bfb7 	.word	0x0800bfb7
 800bfa8:	0800bfbf 	.word	0x0800bfbf
 800bfac:	0800bfc7 	.word	0x0800bfc7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
      }
      break;
 800bfb4:	e010      	b.n	800bfd8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800bfb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfba:	617b      	str	r3, [r7, #20]
      }
      break;
 800bfbc:	e00c      	b.n	800bfd8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800bfbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bfc2:	617b      	str	r3, [r7, #20]
      }
      break;
 800bfc4:	e008      	b.n	800bfd8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800bfc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bfca:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	f043 0301 	orr.w	r3, r3, #1
 800bfd2:	61fb      	str	r3, [r7, #28]
      }
      break;
 800bfd4:	e000      	b.n	800bfd8 <HAL_SAI_Init+0xb0>
  default:
    break;
 800bfd6:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a81      	ldr	r2, [pc, #516]	; (800c1e4 <HAL_SAI_Init+0x2bc>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d004      	beq.n	800bfec <HAL_SAI_Init+0xc4>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a80      	ldr	r2, [pc, #512]	; (800c1e8 <HAL_SAI_Init+0x2c0>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d103      	bne.n	800bff4 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800bfec:	4a7f      	ldr	r2, [pc, #508]	; (800c1ec <HAL_SAI_Init+0x2c4>)
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	6013      	str	r3, [r2, #0]
 800bff2:	e002      	b.n	800bffa <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bff4:	4a7e      	ldr	r2, [pc, #504]	; (800c1f0 <HAL_SAI_Init+0x2c8>)
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d043      	beq.n	800c08a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a76      	ldr	r2, [pc, #472]	; (800c1e4 <HAL_SAI_Init+0x2bc>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d004      	beq.n	800c01a <HAL_SAI_Init+0xf2>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a74      	ldr	r2, [pc, #464]	; (800c1e8 <HAL_SAI_Init+0x2c0>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d104      	bne.n	800c024 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c01a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c01e:	f7ff fa8d 	bl	800b53c <HAL_RCCEx_GetPeriphCLKFreq>
 800c022:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a72      	ldr	r2, [pc, #456]	; (800c1f4 <HAL_SAI_Init+0x2cc>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d004      	beq.n	800c038 <HAL_SAI_Init+0x110>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a71      	ldr	r2, [pc, #452]	; (800c1f8 <HAL_SAI_Init+0x2d0>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d104      	bne.n	800c042 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c038:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c03c:	f7ff fa7e 	bl	800b53c <HAL_RCCEx_GetPeriphCLKFreq>
 800c040:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c042:	693a      	ldr	r2, [r7, #16]
 800c044:	4613      	mov	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	461a      	mov	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	69db      	ldr	r3, [r3, #28]
 800c052:	025b      	lsls	r3, r3, #9
 800c054:	fbb2 f3f3 	udiv	r3, r2, r3
 800c058:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	4a67      	ldr	r2, [pc, #412]	; (800c1fc <HAL_SAI_Init+0x2d4>)
 800c05e:	fba2 2303 	umull	r2, r3, r2, r3
 800c062:	08da      	lsrs	r2, r3, #3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800c068:	68f9      	ldr	r1, [r7, #12]
 800c06a:	4b64      	ldr	r3, [pc, #400]	; (800c1fc <HAL_SAI_Init+0x2d4>)
 800c06c:	fba3 2301 	umull	r2, r3, r3, r1
 800c070:	08da      	lsrs	r2, r3, #3
 800c072:	4613      	mov	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	005b      	lsls	r3, r3, #1
 800c07a:	1aca      	subs	r2, r1, r3
 800c07c:	2a08      	cmp	r2, #8
 800c07e:	d904      	bls.n	800c08a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d003      	beq.n	800c09a <HAL_SAI_Init+0x172>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	2b02      	cmp	r3, #2
 800c098:	d109      	bne.n	800c0ae <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d101      	bne.n	800c0a6 <HAL_SAI_Init+0x17e>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e001      	b.n	800c0aa <HAL_SAI_Init+0x182>
 800c0a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0aa:	61bb      	str	r3, [r7, #24]
 800c0ac:	e008      	b.n	800c0c0 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d102      	bne.n	800c0bc <HAL_SAI_Init+0x194>
 800c0b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0ba:	e000      	b.n	800c0be <HAL_SAI_Init+0x196>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6819      	ldr	r1, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	4b4d      	ldr	r3, [pc, #308]	; (800c200 <HAL_SAI_Init+0x2d8>)
 800c0cc:	400b      	ands	r3, r1
 800c0ce:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6819      	ldr	r1, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0de:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c0e4:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ea:	431a      	orrs	r2, r3
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800c0f8:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c104:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	051b      	lsls	r3, r3, #20
 800c10c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	430a      	orrs	r2, r1
 800c114:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6859      	ldr	r1, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	4b38      	ldr	r3, [pc, #224]	; (800c204 <HAL_SAI_Init+0x2dc>)
 800c122:	400b      	ands	r3, r1
 800c124:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	6859      	ldr	r1, [r3, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	699a      	ldr	r2, [r3, #24]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c134:	431a      	orrs	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13a:	431a      	orrs	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	430a      	orrs	r2, r1
 800c142:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6899      	ldr	r1, [r3, #8]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	4b2e      	ldr	r3, [pc, #184]	; (800c208 <HAL_SAI_Init+0x2e0>)
 800c150:	400b      	ands	r3, r1
 800c152:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	6899      	ldr	r1, [r3, #8]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800c164:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800c16a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800c170:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c176:	3b01      	subs	r3, #1
 800c178:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800c17a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	430a      	orrs	r2, r1
 800c182:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68d9      	ldr	r1, [r3, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c192:	400b      	ands	r3, r1
 800c194:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68d9      	ldr	r1, [r3, #12]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1aa:	041b      	lsls	r3, r3, #16
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	021b      	lsls	r3, r3, #8
 800c1b6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	430a      	orrs	r2, r1
 800c1be:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3720      	adds	r7, #32
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	40015804 	.word	0x40015804
 800c1e8:	40015824 	.word	0x40015824
 800c1ec:	40015800 	.word	0x40015800
 800c1f0:	40015c00 	.word	0x40015c00
 800c1f4:	40015c04 	.word	0x40015c04
 800c1f8:	40015c24 	.word	0x40015c24
 800c1fc:	cccccccd 	.word	0xcccccccd
 800c200:	ff05c010 	.word	0xff05c010
 800c204:	ffff1ff0 	.word	0xffff1ff0
 800c208:	fff88000 	.word	0xfff88000

0800c20c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e027      	b.n	800c26e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2202      	movs	r2, #2
 800c222:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2200      	movs	r2, #0
 800c22c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f04f 32ff 	mov.w	r2, #4294967295
 800c236:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f8ef 	bl	800c41c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	685a      	ldr	r2, [r3, #4]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f042 0208 	orr.w	r2, r2, #8
 800c24c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7f6 fb0a 	bl	8002868 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
	...

0800c278 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	4613      	mov	r3, r2
 800c284:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <HAL_SAI_Receive_DMA+0x1a>
 800c28c:	88fb      	ldrh	r3, [r7, #6]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	e074      	b.n	800c380 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d16d      	bne.n	800c37e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d101      	bne.n	800c2b0 <HAL_SAI_Receive_DMA+0x38>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	e067      	b.n	800c380 <HAL_SAI_Receive_DMA+0x108>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	88fa      	ldrh	r2, [r7, #6]
 800c2c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	88fa      	ldrh	r2, [r7, #6]
 800c2ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2222      	movs	r2, #34	; 0x22
 800c2da:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e2:	4a29      	ldr	r2, [pc, #164]	; (800c388 <HAL_SAI_Receive_DMA+0x110>)
 800c2e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ea:	4a28      	ldr	r2, [pc, #160]	; (800c38c <HAL_SAI_Receive_DMA+0x114>)
 800c2ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2f2:	4a27      	ldr	r2, [pc, #156]	; (800c390 <HAL_SAI_Receive_DMA+0x118>)
 800c2f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	331c      	adds	r3, #28
 800c308:	4619      	mov	r1, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c30e:	461a      	mov	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c316:	f7fa fa09 	bl	800672c <HAL_DMA_Start_IT>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	e029      	b.n	800c380 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c336:	2b00      	cmp	r3, #0
 800c338:	d107      	bne.n	800c34a <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c348:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c34a:	2100      	movs	r1, #0
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 f82f 	bl	800c3b0 <SAI_InterruptFlag>
 800c352:	4601      	mov	r1, r0
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	691a      	ldr	r2, [r3, #16]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c370:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2200      	movs	r2, #0
 800c376:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c37a:	2300      	movs	r3, #0
 800c37c:	e000      	b.n	800c380 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800c37e:	2302      	movs	r3, #2
  }
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	0800c4e9 	.word	0x0800c4e9
 800c38c:	0800c489 	.word	0x0800c489
 800c390:	0800c505 	.word	0x0800c505

0800c394 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c3a2:	b2db      	uxtb	r3, r3
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d103      	bne.n	800c3cc <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f043 0308 	orr.w	r3, r3, #8
 800c3ca:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d0:	2b08      	cmp	r3, #8
 800c3d2:	d10b      	bne.n	800c3ec <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d003      	beq.n	800c3e4 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d103      	bne.n	800c3ec <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f043 0310 	orr.w	r3, r3, #16
 800c3ea:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d003      	beq.n	800c3fc <SAI_InterruptFlag+0x4c>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d104      	bne.n	800c406 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c402:	60fb      	str	r3, [r7, #12]
 800c404:	e003      	b.n	800c40e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f043 0304 	orr.w	r3, r3, #4
 800c40c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800c40e:	68fb      	ldr	r3, [r7, #12]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c41c:	b490      	push	{r4, r7}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800c424:	4b16      	ldr	r3, [pc, #88]	; (800c480 <SAI_Disable+0x64>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a16      	ldr	r2, [pc, #88]	; (800c484 <SAI_Disable+0x68>)
 800c42a:	fba2 2303 	umull	r2, r3, r2, r3
 800c42e:	0b1b      	lsrs	r3, r3, #12
 800c430:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c444:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c446:	4623      	mov	r3, r4
 800c448:	1e5c      	subs	r4, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10a      	bne.n	800c464 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c454:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800c45e:	2303      	movs	r3, #3
 800c460:	73fb      	strb	r3, [r7, #15]
      break;
 800c462:	e006      	b.n	800c472 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1e9      	bne.n	800c446 <SAI_Disable+0x2a>

  return status;
 800c472:	7bfb      	ldrb	r3, [r7, #15]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bc90      	pop	{r4, r7}
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	20000000 	.word	0x20000000
 800c484:	95cbec1b 	.word	0x95cbec1b

0800c488 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c494:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c49e:	d01c      	beq.n	800c4da <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c4ae:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7ff ff78 	bl	800c3b0 <SAI_InterruptFlag>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	43d9      	mvns	r1, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	691a      	ldr	r2, [r3, #16]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	400a      	ands	r2, r1
 800c4d0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7f8 fa56 	bl	800498c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c4e0:	bf00      	nop
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7f8 fa52 	bl	80049a0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c4fc:	bf00      	nop
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c510:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c518:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d004      	beq.n	800c536 <SAI_DMAError+0x32>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c532:	2b01      	cmp	r3, #1
 800c534:	d112      	bne.n	800c55c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c544:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f7ff ff68 	bl	800c41c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f7f8 f837 	bl	80045d0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c562:	bf00      	nop
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e025      	b.n	800c5ca <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d106      	bne.n	800c598 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7f6 f8f4 	bl	8002780 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2202      	movs	r2, #2
 800c59c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	f001 fd58 	bl	800e060 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6818      	ldr	r0, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	6839      	ldr	r1, [r7, #0]
 800c5bc:	f001 fdc2 	bl	800e144 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d101      	bne.n	800c5ee <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	e018      	b.n	800c620 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	68b9      	ldr	r1, [r7, #8]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f001 fe20 	bl	800e244 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d104      	bne.n	800c616 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2205      	movs	r2, #5
 800c610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c614:	e003      	b.n	800c61e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d101      	bne.n	800c642 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c63e:	2302      	movs	r3, #2
 800c640:	e00e      	b.n	800c660 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2202      	movs	r2, #2
 800c646:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	4618      	mov	r0, r3
 800c652:	f001 fe18 	bl	800e286 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e04c      	b.n	800c714 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d106      	bne.n	800c694 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7f5 fdb4 	bl	80021fc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2202      	movs	r2, #2
 800c698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f022 0203 	bic.w	r2, r2, #3
 800c6aa:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	4b19      	ldr	r3, [pc, #100]	; (800c71c <HAL_SPDIFRX_Init+0xb4>)
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800c6c4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800c6ca:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800c6d0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800c6d6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800c6dc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800c6e2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800c6e8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800c6ee:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800c6f4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	fff88407 	.word	0xfff88407

0800c720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d101      	bne.n	800c732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e01d      	b.n	800c76e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d106      	bne.n	800c74c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7f5 fd9a 	bl	8002280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2202      	movs	r2, #2
 800c750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3304      	adds	r3, #4
 800c75c:	4619      	mov	r1, r3
 800c75e:	4610      	mov	r0, r2
 800c760:	f000 fb78 	bl	800ce54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
	...

0800c778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	68da      	ldr	r2, [r3, #12]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f042 0201 	orr.w	r2, r2, #1
 800c78e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689a      	ldr	r2, [r3, #8]
 800c796:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <HAL_TIM_Base_Start_IT+0x50>)
 800c798:	4013      	ands	r3, r2
 800c79a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b06      	cmp	r3, #6
 800c7a0:	d00b      	beq.n	800c7ba <HAL_TIM_Base_Start_IT+0x42>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7a8:	d007      	beq.n	800c7ba <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f042 0201 	orr.w	r2, r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c7ba:	2300      	movs	r3, #0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr
 800c7c8:	00010007 	.word	0x00010007

0800c7cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d101      	bne.n	800c7de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e01d      	b.n	800c81a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d106      	bne.n	800c7f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7f5 fdb2 	bl	800235c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3304      	adds	r3, #4
 800c808:	4619      	mov	r1, r3
 800c80a:	4610      	mov	r0, r2
 800c80c:	f000 fb22 	bl	800ce54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	f003 0302 	and.w	r3, r3, #2
 800c834:	2b02      	cmp	r3, #2
 800c836:	d122      	bne.n	800c87e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f003 0302 	and.w	r3, r3, #2
 800c842:	2b02      	cmp	r3, #2
 800c844:	d11b      	bne.n	800c87e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f06f 0202 	mvn.w	r2, #2
 800c84e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	699b      	ldr	r3, [r3, #24]
 800c85c:	f003 0303 	and.w	r3, r3, #3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d003      	beq.n	800c86c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fad7 	bl	800ce18 <HAL_TIM_IC_CaptureCallback>
 800c86a:	e005      	b.n	800c878 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fac9 	bl	800ce04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fada 	bl	800ce2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	2b04      	cmp	r3, #4
 800c88a:	d122      	bne.n	800c8d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	f003 0304 	and.w	r3, r3, #4
 800c896:	2b04      	cmp	r3, #4
 800c898:	d11b      	bne.n	800c8d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f06f 0204 	mvn.w	r2, #4
 800c8a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	699b      	ldr	r3, [r3, #24]
 800c8b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 faad 	bl	800ce18 <HAL_TIM_IC_CaptureCallback>
 800c8be:	e005      	b.n	800c8cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fa9f 	bl	800ce04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fab0 	bl	800ce2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	f003 0308 	and.w	r3, r3, #8
 800c8dc:	2b08      	cmp	r3, #8
 800c8de:	d122      	bne.n	800c926 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	f003 0308 	and.w	r3, r3, #8
 800c8ea:	2b08      	cmp	r3, #8
 800c8ec:	d11b      	bne.n	800c926 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f06f 0208 	mvn.w	r2, #8
 800c8f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2204      	movs	r2, #4
 800c8fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	69db      	ldr	r3, [r3, #28]
 800c904:	f003 0303 	and.w	r3, r3, #3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d003      	beq.n	800c914 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fa83 	bl	800ce18 <HAL_TIM_IC_CaptureCallback>
 800c912:	e005      	b.n	800c920 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fa75 	bl	800ce04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fa86 	bl	800ce2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	f003 0310 	and.w	r3, r3, #16
 800c930:	2b10      	cmp	r3, #16
 800c932:	d122      	bne.n	800c97a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	f003 0310 	and.w	r3, r3, #16
 800c93e:	2b10      	cmp	r3, #16
 800c940:	d11b      	bne.n	800c97a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f06f 0210 	mvn.w	r2, #16
 800c94a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2208      	movs	r2, #8
 800c950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	69db      	ldr	r3, [r3, #28]
 800c958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fa59 	bl	800ce18 <HAL_TIM_IC_CaptureCallback>
 800c966:	e005      	b.n	800c974 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fa4b 	bl	800ce04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fa5c 	bl	800ce2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	2b01      	cmp	r3, #1
 800c986:	d10e      	bne.n	800c9a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	f003 0301 	and.w	r3, r3, #1
 800c992:	2b01      	cmp	r3, #1
 800c994:	d107      	bne.n	800c9a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f06f 0201 	mvn.w	r2, #1
 800c99e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7f5 f865 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9b0:	2b80      	cmp	r3, #128	; 0x80
 800c9b2:	d10e      	bne.n	800c9d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9be:	2b80      	cmp	r3, #128	; 0x80
 800c9c0:	d107      	bne.n	800c9d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c9ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 feef 	bl	800d7b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9e0:	d10e      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ec:	2b80      	cmp	r3, #128	; 0x80
 800c9ee:	d107      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c9f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fee2 	bl	800d7c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca0a:	2b40      	cmp	r3, #64	; 0x40
 800ca0c:	d10e      	bne.n	800ca2c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca18:	2b40      	cmp	r3, #64	; 0x40
 800ca1a:	d107      	bne.n	800ca2c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fa0a 	bl	800ce40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	f003 0320 	and.w	r3, r3, #32
 800ca36:	2b20      	cmp	r3, #32
 800ca38:	d10e      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	f003 0320 	and.w	r3, r3, #32
 800ca44:	2b20      	cmp	r3, #32
 800ca46:	d107      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f06f 0220 	mvn.w	r2, #32
 800ca50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fea2 	bl	800d79c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca58:	bf00      	nop
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d101      	bne.n	800ca7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ca76:	2302      	movs	r3, #2
 800ca78:	e105      	b.n	800cc86 <HAL_TIM_PWM_ConfigChannel+0x226>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2202      	movs	r2, #2
 800ca86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b14      	cmp	r3, #20
 800ca8e:	f200 80f0 	bhi.w	800cc72 <HAL_TIM_PWM_ConfigChannel+0x212>
 800ca92:	a201      	add	r2, pc, #4	; (adr r2, 800ca98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ca94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca98:	0800caed 	.word	0x0800caed
 800ca9c:	0800cc73 	.word	0x0800cc73
 800caa0:	0800cc73 	.word	0x0800cc73
 800caa4:	0800cc73 	.word	0x0800cc73
 800caa8:	0800cb2d 	.word	0x0800cb2d
 800caac:	0800cc73 	.word	0x0800cc73
 800cab0:	0800cc73 	.word	0x0800cc73
 800cab4:	0800cc73 	.word	0x0800cc73
 800cab8:	0800cb6f 	.word	0x0800cb6f
 800cabc:	0800cc73 	.word	0x0800cc73
 800cac0:	0800cc73 	.word	0x0800cc73
 800cac4:	0800cc73 	.word	0x0800cc73
 800cac8:	0800cbaf 	.word	0x0800cbaf
 800cacc:	0800cc73 	.word	0x0800cc73
 800cad0:	0800cc73 	.word	0x0800cc73
 800cad4:	0800cc73 	.word	0x0800cc73
 800cad8:	0800cbf1 	.word	0x0800cbf1
 800cadc:	0800cc73 	.word	0x0800cc73
 800cae0:	0800cc73 	.word	0x0800cc73
 800cae4:	0800cc73 	.word	0x0800cc73
 800cae8:	0800cc31 	.word	0x0800cc31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 fa4e 	bl	800cf94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	699a      	ldr	r2, [r3, #24]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f042 0208 	orr.w	r2, r2, #8
 800cb06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	699a      	ldr	r2, [r3, #24]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f022 0204 	bic.w	r2, r2, #4
 800cb16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	6999      	ldr	r1, [r3, #24]
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	691a      	ldr	r2, [r3, #16]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	430a      	orrs	r2, r1
 800cb28:	619a      	str	r2, [r3, #24]
      break;
 800cb2a:	e0a3      	b.n	800cc74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68b9      	ldr	r1, [r7, #8]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 faa0 	bl	800d078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	699a      	ldr	r2, [r3, #24]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	699a      	ldr	r2, [r3, #24]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	6999      	ldr	r1, [r3, #24]
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	021a      	lsls	r2, r3, #8
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	430a      	orrs	r2, r1
 800cb6a:	619a      	str	r2, [r3, #24]
      break;
 800cb6c:	e082      	b.n	800cc74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68b9      	ldr	r1, [r7, #8]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f000 faf7 	bl	800d168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	69da      	ldr	r2, [r3, #28]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f042 0208 	orr.w	r2, r2, #8
 800cb88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	69da      	ldr	r2, [r3, #28]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f022 0204 	bic.w	r2, r2, #4
 800cb98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	69d9      	ldr	r1, [r3, #28]
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	691a      	ldr	r2, [r3, #16]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	430a      	orrs	r2, r1
 800cbaa:	61da      	str	r2, [r3, #28]
      break;
 800cbac:	e062      	b.n	800cc74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68b9      	ldr	r1, [r7, #8]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 fb4d 	bl	800d254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	69da      	ldr	r2, [r3, #28]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	69da      	ldr	r2, [r3, #28]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	69d9      	ldr	r1, [r3, #28]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	691b      	ldr	r3, [r3, #16]
 800cbe4:	021a      	lsls	r2, r3, #8
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	430a      	orrs	r2, r1
 800cbec:	61da      	str	r2, [r3, #28]
      break;
 800cbee:	e041      	b.n	800cc74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	68b9      	ldr	r1, [r7, #8]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fb84 	bl	800d304 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f042 0208 	orr.w	r2, r2, #8
 800cc0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f022 0204 	bic.w	r2, r2, #4
 800cc1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	691a      	ldr	r2, [r3, #16]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	430a      	orrs	r2, r1
 800cc2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc2e:	e021      	b.n	800cc74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68b9      	ldr	r1, [r7, #8]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 fbb6 	bl	800d3a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	021a      	lsls	r2, r3, #8
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc70:	e000      	b.n	800cc74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800cc72:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2201      	movs	r2, #1
 800cc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop

0800cc90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d101      	bne.n	800cca8 <HAL_TIM_ConfigClockSource+0x18>
 800cca4:	2302      	movs	r3, #2
 800cca6:	e0a6      	b.n	800cdf6 <HAL_TIM_ConfigClockSource+0x166>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2202      	movs	r2, #2
 800ccb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	4b4f      	ldr	r3, [pc, #316]	; (800ce00 <HAL_TIM_ConfigClockSource+0x170>)
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b40      	cmp	r3, #64	; 0x40
 800ccde:	d067      	beq.n	800cdb0 <HAL_TIM_ConfigClockSource+0x120>
 800cce0:	2b40      	cmp	r3, #64	; 0x40
 800cce2:	d80b      	bhi.n	800ccfc <HAL_TIM_ConfigClockSource+0x6c>
 800cce4:	2b10      	cmp	r3, #16
 800cce6:	d073      	beq.n	800cdd0 <HAL_TIM_ConfigClockSource+0x140>
 800cce8:	2b10      	cmp	r3, #16
 800ccea:	d802      	bhi.n	800ccf2 <HAL_TIM_ConfigClockSource+0x62>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d06f      	beq.n	800cdd0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ccf0:	e078      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ccf2:	2b20      	cmp	r3, #32
 800ccf4:	d06c      	beq.n	800cdd0 <HAL_TIM_ConfigClockSource+0x140>
 800ccf6:	2b30      	cmp	r3, #48	; 0x30
 800ccf8:	d06a      	beq.n	800cdd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ccfa:	e073      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ccfc:	2b70      	cmp	r3, #112	; 0x70
 800ccfe:	d00d      	beq.n	800cd1c <HAL_TIM_ConfigClockSource+0x8c>
 800cd00:	2b70      	cmp	r3, #112	; 0x70
 800cd02:	d804      	bhi.n	800cd0e <HAL_TIM_ConfigClockSource+0x7e>
 800cd04:	2b50      	cmp	r3, #80	; 0x50
 800cd06:	d033      	beq.n	800cd70 <HAL_TIM_ConfigClockSource+0xe0>
 800cd08:	2b60      	cmp	r3, #96	; 0x60
 800cd0a:	d041      	beq.n	800cd90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800cd0c:	e06a      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cd0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd12:	d066      	beq.n	800cde2 <HAL_TIM_ConfigClockSource+0x152>
 800cd14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd18:	d017      	beq.n	800cd4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800cd1a:	e063      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6818      	ldr	r0, [r3, #0]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	6899      	ldr	r1, [r3, #8]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	f000 fc0a 	bl	800d544 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	609a      	str	r2, [r3, #8]
      break;
 800cd48:	e04c      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6818      	ldr	r0, [r3, #0]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	6899      	ldr	r1, [r3, #8]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	f000 fbf3 	bl	800d544 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	689a      	ldr	r2, [r3, #8]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd6c:	609a      	str	r2, [r3, #8]
      break;
 800cd6e:	e039      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	6859      	ldr	r1, [r3, #4]
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	f000 fb67 	bl	800d450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2150      	movs	r1, #80	; 0x50
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 fbc0 	bl	800d50e <TIM_ITRx_SetConfig>
      break;
 800cd8e:	e029      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	6859      	ldr	r1, [r3, #4]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	f000 fb86 	bl	800d4ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2160      	movs	r1, #96	; 0x60
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 fbb0 	bl	800d50e <TIM_ITRx_SetConfig>
      break;
 800cdae:	e019      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6818      	ldr	r0, [r3, #0]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	6859      	ldr	r1, [r3, #4]
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	f000 fb47 	bl	800d450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2140      	movs	r1, #64	; 0x40
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f000 fba0 	bl	800d50e <TIM_ITRx_SetConfig>
      break;
 800cdce:	e009      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	4610      	mov	r0, r2
 800cddc:	f000 fb97 	bl	800d50e <TIM_ITRx_SetConfig>
      break;
 800cde0:	e000      	b.n	800cde4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800cde2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	fffeff88 	.word	0xfffeff88

0800ce04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ce34:	bf00      	nop
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce48:	bf00      	nop
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a40      	ldr	r2, [pc, #256]	; (800cf68 <TIM_Base_SetConfig+0x114>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d013      	beq.n	800ce94 <TIM_Base_SetConfig+0x40>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce72:	d00f      	beq.n	800ce94 <TIM_Base_SetConfig+0x40>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	4a3d      	ldr	r2, [pc, #244]	; (800cf6c <TIM_Base_SetConfig+0x118>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d00b      	beq.n	800ce94 <TIM_Base_SetConfig+0x40>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a3c      	ldr	r2, [pc, #240]	; (800cf70 <TIM_Base_SetConfig+0x11c>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d007      	beq.n	800ce94 <TIM_Base_SetConfig+0x40>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a3b      	ldr	r2, [pc, #236]	; (800cf74 <TIM_Base_SetConfig+0x120>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d003      	beq.n	800ce94 <TIM_Base_SetConfig+0x40>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4a3a      	ldr	r2, [pc, #232]	; (800cf78 <TIM_Base_SetConfig+0x124>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d108      	bne.n	800cea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4a2f      	ldr	r2, [pc, #188]	; (800cf68 <TIM_Base_SetConfig+0x114>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d02b      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceb4:	d027      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4a2c      	ldr	r2, [pc, #176]	; (800cf6c <TIM_Base_SetConfig+0x118>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d023      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4a2b      	ldr	r2, [pc, #172]	; (800cf70 <TIM_Base_SetConfig+0x11c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d01f      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a2a      	ldr	r2, [pc, #168]	; (800cf74 <TIM_Base_SetConfig+0x120>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d01b      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4a29      	ldr	r2, [pc, #164]	; (800cf78 <TIM_Base_SetConfig+0x124>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d017      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4a28      	ldr	r2, [pc, #160]	; (800cf7c <TIM_Base_SetConfig+0x128>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d013      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4a27      	ldr	r2, [pc, #156]	; (800cf80 <TIM_Base_SetConfig+0x12c>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d00f      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4a26      	ldr	r2, [pc, #152]	; (800cf84 <TIM_Base_SetConfig+0x130>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d00b      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a25      	ldr	r2, [pc, #148]	; (800cf88 <TIM_Base_SetConfig+0x134>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d007      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a24      	ldr	r2, [pc, #144]	; (800cf8c <TIM_Base_SetConfig+0x138>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d003      	beq.n	800cf06 <TIM_Base_SetConfig+0xb2>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a23      	ldr	r2, [pc, #140]	; (800cf90 <TIM_Base_SetConfig+0x13c>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d108      	bne.n	800cf18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	695b      	ldr	r3, [r3, #20]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	689a      	ldr	r2, [r3, #8]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4a0a      	ldr	r2, [pc, #40]	; (800cf68 <TIM_Base_SetConfig+0x114>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d003      	beq.n	800cf4c <TIM_Base_SetConfig+0xf8>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	4a0c      	ldr	r2, [pc, #48]	; (800cf78 <TIM_Base_SetConfig+0x124>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d103      	bne.n	800cf54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	691a      	ldr	r2, [r3, #16]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	615a      	str	r2, [r3, #20]
}
 800cf5a:	bf00      	nop
 800cf5c:	3714      	adds	r7, #20
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	40010000 	.word	0x40010000
 800cf6c:	40000400 	.word	0x40000400
 800cf70:	40000800 	.word	0x40000800
 800cf74:	40000c00 	.word	0x40000c00
 800cf78:	40010400 	.word	0x40010400
 800cf7c:	40014000 	.word	0x40014000
 800cf80:	40014400 	.word	0x40014400
 800cf84:	40014800 	.word	0x40014800
 800cf88:	40001800 	.word	0x40001800
 800cf8c:	40001c00 	.word	0x40001c00
 800cf90:	40002000 	.word	0x40002000

0800cf94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a1b      	ldr	r3, [r3, #32]
 800cfa2:	f023 0201 	bic.w	r2, r3, #1
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	4b2b      	ldr	r3, [pc, #172]	; (800d06c <TIM_OC1_SetConfig+0xd8>)
 800cfc0:	4013      	ands	r3, r2
 800cfc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f023 0303 	bic.w	r3, r3, #3
 800cfca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f023 0302 	bic.w	r3, r3, #2
 800cfdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	697a      	ldr	r2, [r7, #20]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a21      	ldr	r2, [pc, #132]	; (800d070 <TIM_OC1_SetConfig+0xdc>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d003      	beq.n	800cff8 <TIM_OC1_SetConfig+0x64>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a20      	ldr	r2, [pc, #128]	; (800d074 <TIM_OC1_SetConfig+0xe0>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d10c      	bne.n	800d012 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	f023 0308 	bic.w	r3, r3, #8
 800cffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	697a      	ldr	r2, [r7, #20]
 800d006:	4313      	orrs	r3, r2
 800d008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	f023 0304 	bic.w	r3, r3, #4
 800d010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4a16      	ldr	r2, [pc, #88]	; (800d070 <TIM_OC1_SetConfig+0xdc>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d003      	beq.n	800d022 <TIM_OC1_SetConfig+0x8e>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a15      	ldr	r2, [pc, #84]	; (800d074 <TIM_OC1_SetConfig+0xe0>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d111      	bne.n	800d046 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	4313      	orrs	r3, r2
 800d03a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	699b      	ldr	r3, [r3, #24]
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	4313      	orrs	r3, r2
 800d044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	621a      	str	r2, [r3, #32]
}
 800d060:	bf00      	nop
 800d062:	371c      	adds	r7, #28
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	fffeff8f 	.word	0xfffeff8f
 800d070:	40010000 	.word	0x40010000
 800d074:	40010400 	.word	0x40010400

0800d078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d078:	b480      	push	{r7}
 800d07a:	b087      	sub	sp, #28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	f023 0210 	bic.w	r2, r3, #16
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	4b2e      	ldr	r3, [pc, #184]	; (800d15c <TIM_OC2_SetConfig+0xe4>)
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	021b      	lsls	r3, r3, #8
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	f023 0320 	bic.w	r3, r3, #32
 800d0c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	011b      	lsls	r3, r3, #4
 800d0ca:	697a      	ldr	r2, [r7, #20]
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a23      	ldr	r2, [pc, #140]	; (800d160 <TIM_OC2_SetConfig+0xe8>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d003      	beq.n	800d0e0 <TIM_OC2_SetConfig+0x68>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a22      	ldr	r2, [pc, #136]	; (800d164 <TIM_OC2_SetConfig+0xec>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d10d      	bne.n	800d0fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	011b      	lsls	r3, r3, #4
 800d0ee:	697a      	ldr	r2, [r7, #20]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	4a18      	ldr	r2, [pc, #96]	; (800d160 <TIM_OC2_SetConfig+0xe8>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d003      	beq.n	800d10c <TIM_OC2_SetConfig+0x94>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4a17      	ldr	r2, [pc, #92]	; (800d164 <TIM_OC2_SetConfig+0xec>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d113      	bne.n	800d134 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d11a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	693a      	ldr	r2, [r7, #16]
 800d124:	4313      	orrs	r3, r2
 800d126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	4313      	orrs	r3, r2
 800d132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	621a      	str	r2, [r3, #32]
}
 800d14e:	bf00      	nop
 800d150:	371c      	adds	r7, #28
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	feff8fff 	.word	0xfeff8fff
 800d160:	40010000 	.word	0x40010000
 800d164:	40010400 	.word	0x40010400

0800d168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d168:	b480      	push	{r7}
 800d16a:	b087      	sub	sp, #28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a1b      	ldr	r3, [r3, #32]
 800d176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a1b      	ldr	r3, [r3, #32]
 800d182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	69db      	ldr	r3, [r3, #28]
 800d18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	4b2d      	ldr	r3, [pc, #180]	; (800d248 <TIM_OC3_SetConfig+0xe0>)
 800d194:	4013      	ands	r3, r2
 800d196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f023 0303 	bic.w	r3, r3, #3
 800d19e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	021b      	lsls	r3, r3, #8
 800d1b8:	697a      	ldr	r2, [r7, #20]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4a22      	ldr	r2, [pc, #136]	; (800d24c <TIM_OC3_SetConfig+0xe4>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d003      	beq.n	800d1ce <TIM_OC3_SetConfig+0x66>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a21      	ldr	r2, [pc, #132]	; (800d250 <TIM_OC3_SetConfig+0xe8>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d10d      	bne.n	800d1ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	021b      	lsls	r3, r3, #8
 800d1dc:	697a      	ldr	r2, [r7, #20]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4a17      	ldr	r2, [pc, #92]	; (800d24c <TIM_OC3_SetConfig+0xe4>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d003      	beq.n	800d1fa <TIM_OC3_SetConfig+0x92>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	4a16      	ldr	r2, [pc, #88]	; (800d250 <TIM_OC3_SetConfig+0xe8>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d113      	bne.n	800d222 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	011b      	lsls	r3, r3, #4
 800d210:	693a      	ldr	r2, [r7, #16]
 800d212:	4313      	orrs	r3, r2
 800d214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	699b      	ldr	r3, [r3, #24]
 800d21a:	011b      	lsls	r3, r3, #4
 800d21c:	693a      	ldr	r2, [r7, #16]
 800d21e:	4313      	orrs	r3, r2
 800d220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	693a      	ldr	r2, [r7, #16]
 800d226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	685a      	ldr	r2, [r3, #4]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	697a      	ldr	r2, [r7, #20]
 800d23a:	621a      	str	r2, [r3, #32]
}
 800d23c:	bf00      	nop
 800d23e:	371c      	adds	r7, #28
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	fffeff8f 	.word	0xfffeff8f
 800d24c:	40010000 	.word	0x40010000
 800d250:	40010400 	.word	0x40010400

0800d254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d254:	b480      	push	{r7}
 800d256:	b087      	sub	sp, #28
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6a1b      	ldr	r3, [r3, #32]
 800d262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a1b      	ldr	r3, [r3, #32]
 800d26e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	69db      	ldr	r3, [r3, #28]
 800d27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4b1e      	ldr	r3, [pc, #120]	; (800d2f8 <TIM_OC4_SetConfig+0xa4>)
 800d280:	4013      	ands	r3, r2
 800d282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d28a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	021b      	lsls	r3, r3, #8
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	4313      	orrs	r3, r2
 800d296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d29e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	031b      	lsls	r3, r3, #12
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a13      	ldr	r2, [pc, #76]	; (800d2fc <TIM_OC4_SetConfig+0xa8>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d003      	beq.n	800d2bc <TIM_OC4_SetConfig+0x68>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a12      	ldr	r2, [pc, #72]	; (800d300 <TIM_OC4_SetConfig+0xac>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d109      	bne.n	800d2d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	019b      	lsls	r3, r3, #6
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	693a      	ldr	r2, [r7, #16]
 800d2e8:	621a      	str	r2, [r3, #32]
}
 800d2ea:	bf00      	nop
 800d2ec:	371c      	adds	r7, #28
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	feff8fff 	.word	0xfeff8fff
 800d2fc:	40010000 	.word	0x40010000
 800d300:	40010400 	.word	0x40010400

0800d304 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d304:	b480      	push	{r7}
 800d306:	b087      	sub	sp, #28
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	4b1b      	ldr	r3, [pc, #108]	; (800d39c <TIM_OC5_SetConfig+0x98>)
 800d330:	4013      	ands	r3, r2
 800d332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d344:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	041b      	lsls	r3, r3, #16
 800d34c:	693a      	ldr	r2, [r7, #16]
 800d34e:	4313      	orrs	r3, r2
 800d350:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a12      	ldr	r2, [pc, #72]	; (800d3a0 <TIM_OC5_SetConfig+0x9c>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d003      	beq.n	800d362 <TIM_OC5_SetConfig+0x5e>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a11      	ldr	r2, [pc, #68]	; (800d3a4 <TIM_OC5_SetConfig+0xa0>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d109      	bne.n	800d376 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d368:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	695b      	ldr	r3, [r3, #20]
 800d36e:	021b      	lsls	r3, r3, #8
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	4313      	orrs	r3, r2
 800d374:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	697a      	ldr	r2, [r7, #20]
 800d37a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	621a      	str	r2, [r3, #32]
}
 800d390:	bf00      	nop
 800d392:	371c      	adds	r7, #28
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr
 800d39c:	fffeff8f 	.word	0xfffeff8f
 800d3a0:	40010000 	.word	0x40010000
 800d3a4:	40010400 	.word	0x40010400

0800d3a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a1b      	ldr	r3, [r3, #32]
 800d3b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a1b      	ldr	r3, [r3, #32]
 800d3c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	4b1c      	ldr	r3, [pc, #112]	; (800d444 <TIM_OC6_SetConfig+0x9c>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	021b      	lsls	r3, r3, #8
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d3ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	051b      	lsls	r3, r3, #20
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4a13      	ldr	r2, [pc, #76]	; (800d448 <TIM_OC6_SetConfig+0xa0>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d003      	beq.n	800d408 <TIM_OC6_SetConfig+0x60>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4a12      	ldr	r2, [pc, #72]	; (800d44c <TIM_OC6_SetConfig+0xa4>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d109      	bne.n	800d41c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d40e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	029b      	lsls	r3, r3, #10
 800d416:	697a      	ldr	r2, [r7, #20]
 800d418:	4313      	orrs	r3, r2
 800d41a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	693a      	ldr	r2, [r7, #16]
 800d434:	621a      	str	r2, [r3, #32]
}
 800d436:	bf00      	nop
 800d438:	371c      	adds	r7, #28
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	feff8fff 	.word	0xfeff8fff
 800d448:	40010000 	.word	0x40010000
 800d44c:	40010400 	.word	0x40010400

0800d450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d450:	b480      	push	{r7}
 800d452:	b087      	sub	sp, #28
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6a1b      	ldr	r3, [r3, #32]
 800d460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	f023 0201 	bic.w	r2, r3, #1
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d47a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	011b      	lsls	r3, r3, #4
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	4313      	orrs	r3, r2
 800d484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f023 030a 	bic.w	r3, r3, #10
 800d48c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	4313      	orrs	r3, r2
 800d494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	621a      	str	r2, [r3, #32]
}
 800d4a2:	bf00      	nop
 800d4a4:	371c      	adds	r7, #28
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr

0800d4ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b087      	sub	sp, #28
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	60f8      	str	r0, [r7, #12]
 800d4b6:	60b9      	str	r1, [r7, #8]
 800d4b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	f023 0210 	bic.w	r2, r3, #16
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6a1b      	ldr	r3, [r3, #32]
 800d4d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d4d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	031b      	lsls	r3, r3, #12
 800d4de:	697a      	ldr	r2, [r7, #20]
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d4ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	011b      	lsls	r3, r3, #4
 800d4f0:	693a      	ldr	r2, [r7, #16]
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	693a      	ldr	r2, [r7, #16]
 800d500:	621a      	str	r2, [r3, #32]
}
 800d502:	bf00      	nop
 800d504:	371c      	adds	r7, #28
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr

0800d50e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d50e:	b480      	push	{r7}
 800d510:	b085      	sub	sp, #20
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d524:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	4313      	orrs	r3, r2
 800d52c:	f043 0307 	orr.w	r3, r3, #7
 800d530:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	609a      	str	r2, [r3, #8]
}
 800d538:	bf00      	nop
 800d53a:	3714      	adds	r7, #20
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d544:	b480      	push	{r7}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
 800d550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d55e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	021a      	lsls	r2, r3, #8
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	431a      	orrs	r2, r3
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	4313      	orrs	r3, r2
 800d56c:	697a      	ldr	r2, [r7, #20]
 800d56e:	4313      	orrs	r3, r2
 800d570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	697a      	ldr	r2, [r7, #20]
 800d576:	609a      	str	r2, [r3, #8]
}
 800d578:	bf00      	nop
 800d57a:	371c      	adds	r7, #28
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d584:	b480      	push	{r7}
 800d586:	b085      	sub	sp, #20
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d594:	2b01      	cmp	r3, #1
 800d596:	d101      	bne.n	800d59c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d598:	2302      	movs	r3, #2
 800d59a:	e06d      	b.n	800d678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a30      	ldr	r2, [pc, #192]	; (800d684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d004      	beq.n	800d5d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a2f      	ldr	r2, [pc, #188]	; (800d688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d108      	bne.n	800d5e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d5d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a20      	ldr	r2, [pc, #128]	; (800d684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d022      	beq.n	800d64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d60e:	d01d      	beq.n	800d64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a1d      	ldr	r2, [pc, #116]	; (800d68c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d018      	beq.n	800d64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a1c      	ldr	r2, [pc, #112]	; (800d690 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d013      	beq.n	800d64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a1a      	ldr	r2, [pc, #104]	; (800d694 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d00e      	beq.n	800d64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a15      	ldr	r2, [pc, #84]	; (800d688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d009      	beq.n	800d64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4a16      	ldr	r2, [pc, #88]	; (800d698 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d004      	beq.n	800d64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a15      	ldr	r2, [pc, #84]	; (800d69c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d10c      	bne.n	800d666 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d652:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	4313      	orrs	r3, r2
 800d65c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3714      	adds	r7, #20
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr
 800d684:	40010000 	.word	0x40010000
 800d688:	40010400 	.word	0x40010400
 800d68c:	40000400 	.word	0x40000400
 800d690:	40000800 	.word	0x40000800
 800d694:	40000c00 	.word	0x40000c00
 800d698:	40014000 	.word	0x40014000
 800d69c:	40001800 	.word	0x40001800

0800d6a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d101      	bne.n	800d6bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d6b8:	2302      	movs	r3, #2
 800d6ba:	e065      	b.n	800d788 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	4313      	orrs	r3, r2
 800d708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	695b      	ldr	r3, [r3, #20]
 800d714:	4313      	orrs	r3, r2
 800d716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d722:	4313      	orrs	r3, r2
 800d724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	699b      	ldr	r3, [r3, #24]
 800d730:	041b      	lsls	r3, r3, #16
 800d732:	4313      	orrs	r3, r2
 800d734:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a16      	ldr	r2, [pc, #88]	; (800d794 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d004      	beq.n	800d74a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a14      	ldr	r2, [pc, #80]	; (800d798 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d115      	bne.n	800d776 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d754:	051b      	lsls	r3, r3, #20
 800d756:	4313      	orrs	r3, r2
 800d758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	69db      	ldr	r3, [r3, #28]
 800d764:	4313      	orrs	r3, r2
 800d766:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	6a1b      	ldr	r3, [r3, #32]
 800d772:	4313      	orrs	r3, r2
 800d774:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3714      	adds	r7, #20
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr
 800d794:	40010000 	.word	0x40010000
 800d798:	40010400 	.word	0x40010400

0800d79c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d7a4:	bf00      	nop
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d7b8:	bf00      	nop
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d7cc:	bf00      	nop
 800d7ce:	370c      	adds	r7, #12
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d101      	bne.n	800d7ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e040      	b.n	800d86c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d106      	bne.n	800d800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f7f4 fe9c 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2224      	movs	r2, #36	; 0x24
 800d804:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f022 0201 	bic.w	r2, r2, #1
 800d814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f82c 	bl	800d874 <UART_SetConfig>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d101      	bne.n	800d826 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	e022      	b.n	800d86c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 faca 	bl	800ddc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689a      	ldr	r2, [r3, #8]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f042 0201 	orr.w	r2, r2, #1
 800d862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 fb51 	bl	800df0c <UART_CheckIdleState>
 800d86a:	4603      	mov	r3, r0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800d87c:	2300      	movs	r3, #0
 800d87e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800d880:	2300      	movs	r3, #0
 800d882:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	689a      	ldr	r2, [r3, #8]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	431a      	orrs	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	431a      	orrs	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	69db      	ldr	r3, [r3, #28]
 800d898:	4313      	orrs	r3, r2
 800d89a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	4bb1      	ldr	r3, [pc, #708]	; (800db68 <UART_SetConfig+0x2f4>)
 800d8a4:	4013      	ands	r3, r2
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	6812      	ldr	r2, [r2, #0]
 800d8aa:	6939      	ldr	r1, [r7, #16]
 800d8ac:	430b      	orrs	r3, r1
 800d8ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	68da      	ldr	r2, [r3, #12]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	430a      	orrs	r2, r1
 800d8c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6a1b      	ldr	r3, [r3, #32]
 800d8d0:	693a      	ldr	r2, [r7, #16]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	430a      	orrs	r2, r1
 800d8e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4a9f      	ldr	r2, [pc, #636]	; (800db6c <UART_SetConfig+0x2f8>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d121      	bne.n	800d938 <UART_SetConfig+0xc4>
 800d8f4:	4b9e      	ldr	r3, [pc, #632]	; (800db70 <UART_SetConfig+0x2fc>)
 800d8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8fa:	f003 0303 	and.w	r3, r3, #3
 800d8fe:	2b03      	cmp	r3, #3
 800d900:	d816      	bhi.n	800d930 <UART_SetConfig+0xbc>
 800d902:	a201      	add	r2, pc, #4	; (adr r2, 800d908 <UART_SetConfig+0x94>)
 800d904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d908:	0800d919 	.word	0x0800d919
 800d90c:	0800d925 	.word	0x0800d925
 800d910:	0800d91f 	.word	0x0800d91f
 800d914:	0800d92b 	.word	0x0800d92b
 800d918:	2301      	movs	r3, #1
 800d91a:	77fb      	strb	r3, [r7, #31]
 800d91c:	e151      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d91e:	2302      	movs	r3, #2
 800d920:	77fb      	strb	r3, [r7, #31]
 800d922:	e14e      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d924:	2304      	movs	r3, #4
 800d926:	77fb      	strb	r3, [r7, #31]
 800d928:	e14b      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d92a:	2308      	movs	r3, #8
 800d92c:	77fb      	strb	r3, [r7, #31]
 800d92e:	e148      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d930:	2310      	movs	r3, #16
 800d932:	77fb      	strb	r3, [r7, #31]
 800d934:	bf00      	nop
 800d936:	e144      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a8d      	ldr	r2, [pc, #564]	; (800db74 <UART_SetConfig+0x300>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d134      	bne.n	800d9ac <UART_SetConfig+0x138>
 800d942:	4b8b      	ldr	r3, [pc, #556]	; (800db70 <UART_SetConfig+0x2fc>)
 800d944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d948:	f003 030c 	and.w	r3, r3, #12
 800d94c:	2b0c      	cmp	r3, #12
 800d94e:	d829      	bhi.n	800d9a4 <UART_SetConfig+0x130>
 800d950:	a201      	add	r2, pc, #4	; (adr r2, 800d958 <UART_SetConfig+0xe4>)
 800d952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d956:	bf00      	nop
 800d958:	0800d98d 	.word	0x0800d98d
 800d95c:	0800d9a5 	.word	0x0800d9a5
 800d960:	0800d9a5 	.word	0x0800d9a5
 800d964:	0800d9a5 	.word	0x0800d9a5
 800d968:	0800d999 	.word	0x0800d999
 800d96c:	0800d9a5 	.word	0x0800d9a5
 800d970:	0800d9a5 	.word	0x0800d9a5
 800d974:	0800d9a5 	.word	0x0800d9a5
 800d978:	0800d993 	.word	0x0800d993
 800d97c:	0800d9a5 	.word	0x0800d9a5
 800d980:	0800d9a5 	.word	0x0800d9a5
 800d984:	0800d9a5 	.word	0x0800d9a5
 800d988:	0800d99f 	.word	0x0800d99f
 800d98c:	2300      	movs	r3, #0
 800d98e:	77fb      	strb	r3, [r7, #31]
 800d990:	e117      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d992:	2302      	movs	r3, #2
 800d994:	77fb      	strb	r3, [r7, #31]
 800d996:	e114      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d998:	2304      	movs	r3, #4
 800d99a:	77fb      	strb	r3, [r7, #31]
 800d99c:	e111      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d99e:	2308      	movs	r3, #8
 800d9a0:	77fb      	strb	r3, [r7, #31]
 800d9a2:	e10e      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d9a4:	2310      	movs	r3, #16
 800d9a6:	77fb      	strb	r3, [r7, #31]
 800d9a8:	bf00      	nop
 800d9aa:	e10a      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a71      	ldr	r2, [pc, #452]	; (800db78 <UART_SetConfig+0x304>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d120      	bne.n	800d9f8 <UART_SetConfig+0x184>
 800d9b6:	4b6e      	ldr	r3, [pc, #440]	; (800db70 <UART_SetConfig+0x2fc>)
 800d9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d9c0:	2b10      	cmp	r3, #16
 800d9c2:	d00f      	beq.n	800d9e4 <UART_SetConfig+0x170>
 800d9c4:	2b10      	cmp	r3, #16
 800d9c6:	d802      	bhi.n	800d9ce <UART_SetConfig+0x15a>
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d005      	beq.n	800d9d8 <UART_SetConfig+0x164>
 800d9cc:	e010      	b.n	800d9f0 <UART_SetConfig+0x17c>
 800d9ce:	2b20      	cmp	r3, #32
 800d9d0:	d005      	beq.n	800d9de <UART_SetConfig+0x16a>
 800d9d2:	2b30      	cmp	r3, #48	; 0x30
 800d9d4:	d009      	beq.n	800d9ea <UART_SetConfig+0x176>
 800d9d6:	e00b      	b.n	800d9f0 <UART_SetConfig+0x17c>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	77fb      	strb	r3, [r7, #31]
 800d9dc:	e0f1      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d9de:	2302      	movs	r3, #2
 800d9e0:	77fb      	strb	r3, [r7, #31]
 800d9e2:	e0ee      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d9e4:	2304      	movs	r3, #4
 800d9e6:	77fb      	strb	r3, [r7, #31]
 800d9e8:	e0eb      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d9ea:	2308      	movs	r3, #8
 800d9ec:	77fb      	strb	r3, [r7, #31]
 800d9ee:	e0e8      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d9f0:	2310      	movs	r3, #16
 800d9f2:	77fb      	strb	r3, [r7, #31]
 800d9f4:	bf00      	nop
 800d9f6:	e0e4      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a5f      	ldr	r2, [pc, #380]	; (800db7c <UART_SetConfig+0x308>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d120      	bne.n	800da44 <UART_SetConfig+0x1d0>
 800da02:	4b5b      	ldr	r3, [pc, #364]	; (800db70 <UART_SetConfig+0x2fc>)
 800da04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800da0c:	2b40      	cmp	r3, #64	; 0x40
 800da0e:	d00f      	beq.n	800da30 <UART_SetConfig+0x1bc>
 800da10:	2b40      	cmp	r3, #64	; 0x40
 800da12:	d802      	bhi.n	800da1a <UART_SetConfig+0x1a6>
 800da14:	2b00      	cmp	r3, #0
 800da16:	d005      	beq.n	800da24 <UART_SetConfig+0x1b0>
 800da18:	e010      	b.n	800da3c <UART_SetConfig+0x1c8>
 800da1a:	2b80      	cmp	r3, #128	; 0x80
 800da1c:	d005      	beq.n	800da2a <UART_SetConfig+0x1b6>
 800da1e:	2bc0      	cmp	r3, #192	; 0xc0
 800da20:	d009      	beq.n	800da36 <UART_SetConfig+0x1c2>
 800da22:	e00b      	b.n	800da3c <UART_SetConfig+0x1c8>
 800da24:	2300      	movs	r3, #0
 800da26:	77fb      	strb	r3, [r7, #31]
 800da28:	e0cb      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da2a:	2302      	movs	r3, #2
 800da2c:	77fb      	strb	r3, [r7, #31]
 800da2e:	e0c8      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da30:	2304      	movs	r3, #4
 800da32:	77fb      	strb	r3, [r7, #31]
 800da34:	e0c5      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da36:	2308      	movs	r3, #8
 800da38:	77fb      	strb	r3, [r7, #31]
 800da3a:	e0c2      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da3c:	2310      	movs	r3, #16
 800da3e:	77fb      	strb	r3, [r7, #31]
 800da40:	bf00      	nop
 800da42:	e0be      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a4d      	ldr	r2, [pc, #308]	; (800db80 <UART_SetConfig+0x30c>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d124      	bne.n	800da98 <UART_SetConfig+0x224>
 800da4e:	4b48      	ldr	r3, [pc, #288]	; (800db70 <UART_SetConfig+0x2fc>)
 800da50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da5c:	d012      	beq.n	800da84 <UART_SetConfig+0x210>
 800da5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da62:	d802      	bhi.n	800da6a <UART_SetConfig+0x1f6>
 800da64:	2b00      	cmp	r3, #0
 800da66:	d007      	beq.n	800da78 <UART_SetConfig+0x204>
 800da68:	e012      	b.n	800da90 <UART_SetConfig+0x21c>
 800da6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da6e:	d006      	beq.n	800da7e <UART_SetConfig+0x20a>
 800da70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da74:	d009      	beq.n	800da8a <UART_SetConfig+0x216>
 800da76:	e00b      	b.n	800da90 <UART_SetConfig+0x21c>
 800da78:	2300      	movs	r3, #0
 800da7a:	77fb      	strb	r3, [r7, #31]
 800da7c:	e0a1      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da7e:	2302      	movs	r3, #2
 800da80:	77fb      	strb	r3, [r7, #31]
 800da82:	e09e      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da84:	2304      	movs	r3, #4
 800da86:	77fb      	strb	r3, [r7, #31]
 800da88:	e09b      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da8a:	2308      	movs	r3, #8
 800da8c:	77fb      	strb	r3, [r7, #31]
 800da8e:	e098      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da90:	2310      	movs	r3, #16
 800da92:	77fb      	strb	r3, [r7, #31]
 800da94:	bf00      	nop
 800da96:	e094      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a39      	ldr	r2, [pc, #228]	; (800db84 <UART_SetConfig+0x310>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d124      	bne.n	800daec <UART_SetConfig+0x278>
 800daa2:	4b33      	ldr	r3, [pc, #204]	; (800db70 <UART_SetConfig+0x2fc>)
 800daa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800daac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dab0:	d012      	beq.n	800dad8 <UART_SetConfig+0x264>
 800dab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dab6:	d802      	bhi.n	800dabe <UART_SetConfig+0x24a>
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d007      	beq.n	800dacc <UART_SetConfig+0x258>
 800dabc:	e012      	b.n	800dae4 <UART_SetConfig+0x270>
 800dabe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dac2:	d006      	beq.n	800dad2 <UART_SetConfig+0x25e>
 800dac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dac8:	d009      	beq.n	800dade <UART_SetConfig+0x26a>
 800daca:	e00b      	b.n	800dae4 <UART_SetConfig+0x270>
 800dacc:	2301      	movs	r3, #1
 800dace:	77fb      	strb	r3, [r7, #31]
 800dad0:	e077      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800dad2:	2302      	movs	r3, #2
 800dad4:	77fb      	strb	r3, [r7, #31]
 800dad6:	e074      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800dad8:	2304      	movs	r3, #4
 800dada:	77fb      	strb	r3, [r7, #31]
 800dadc:	e071      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800dade:	2308      	movs	r3, #8
 800dae0:	77fb      	strb	r3, [r7, #31]
 800dae2:	e06e      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800dae4:	2310      	movs	r3, #16
 800dae6:	77fb      	strb	r3, [r7, #31]
 800dae8:	bf00      	nop
 800daea:	e06a      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a25      	ldr	r2, [pc, #148]	; (800db88 <UART_SetConfig+0x314>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d124      	bne.n	800db40 <UART_SetConfig+0x2cc>
 800daf6:	4b1e      	ldr	r3, [pc, #120]	; (800db70 <UART_SetConfig+0x2fc>)
 800daf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dafc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800db00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db04:	d012      	beq.n	800db2c <UART_SetConfig+0x2b8>
 800db06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db0a:	d802      	bhi.n	800db12 <UART_SetConfig+0x29e>
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d007      	beq.n	800db20 <UART_SetConfig+0x2ac>
 800db10:	e012      	b.n	800db38 <UART_SetConfig+0x2c4>
 800db12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db16:	d006      	beq.n	800db26 <UART_SetConfig+0x2b2>
 800db18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800db1c:	d009      	beq.n	800db32 <UART_SetConfig+0x2be>
 800db1e:	e00b      	b.n	800db38 <UART_SetConfig+0x2c4>
 800db20:	2300      	movs	r3, #0
 800db22:	77fb      	strb	r3, [r7, #31]
 800db24:	e04d      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800db26:	2302      	movs	r3, #2
 800db28:	77fb      	strb	r3, [r7, #31]
 800db2a:	e04a      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800db2c:	2304      	movs	r3, #4
 800db2e:	77fb      	strb	r3, [r7, #31]
 800db30:	e047      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800db32:	2308      	movs	r3, #8
 800db34:	77fb      	strb	r3, [r7, #31]
 800db36:	e044      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800db38:	2310      	movs	r3, #16
 800db3a:	77fb      	strb	r3, [r7, #31]
 800db3c:	bf00      	nop
 800db3e:	e040      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a11      	ldr	r2, [pc, #68]	; (800db8c <UART_SetConfig+0x318>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d139      	bne.n	800dbbe <UART_SetConfig+0x34a>
 800db4a:	4b09      	ldr	r3, [pc, #36]	; (800db70 <UART_SetConfig+0x2fc>)
 800db4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800db54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db58:	d027      	beq.n	800dbaa <UART_SetConfig+0x336>
 800db5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db5e:	d817      	bhi.n	800db90 <UART_SetConfig+0x31c>
 800db60:	2b00      	cmp	r3, #0
 800db62:	d01c      	beq.n	800db9e <UART_SetConfig+0x32a>
 800db64:	e027      	b.n	800dbb6 <UART_SetConfig+0x342>
 800db66:	bf00      	nop
 800db68:	efff69f3 	.word	0xefff69f3
 800db6c:	40011000 	.word	0x40011000
 800db70:	40023800 	.word	0x40023800
 800db74:	40004400 	.word	0x40004400
 800db78:	40004800 	.word	0x40004800
 800db7c:	40004c00 	.word	0x40004c00
 800db80:	40005000 	.word	0x40005000
 800db84:	40011400 	.word	0x40011400
 800db88:	40007800 	.word	0x40007800
 800db8c:	40007c00 	.word	0x40007c00
 800db90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db94:	d006      	beq.n	800dba4 <UART_SetConfig+0x330>
 800db96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800db9a:	d009      	beq.n	800dbb0 <UART_SetConfig+0x33c>
 800db9c:	e00b      	b.n	800dbb6 <UART_SetConfig+0x342>
 800db9e:	2300      	movs	r3, #0
 800dba0:	77fb      	strb	r3, [r7, #31]
 800dba2:	e00e      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800dba4:	2302      	movs	r3, #2
 800dba6:	77fb      	strb	r3, [r7, #31]
 800dba8:	e00b      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800dbaa:	2304      	movs	r3, #4
 800dbac:	77fb      	strb	r3, [r7, #31]
 800dbae:	e008      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800dbb0:	2308      	movs	r3, #8
 800dbb2:	77fb      	strb	r3, [r7, #31]
 800dbb4:	e005      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800dbb6:	2310      	movs	r3, #16
 800dbb8:	77fb      	strb	r3, [r7, #31]
 800dbba:	bf00      	nop
 800dbbc:	e001      	b.n	800dbc2 <UART_SetConfig+0x34e>
 800dbbe:	2310      	movs	r3, #16
 800dbc0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	69db      	ldr	r3, [r3, #28]
 800dbc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbca:	d17f      	bne.n	800dccc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800dbcc:	7ffb      	ldrb	r3, [r7, #31]
 800dbce:	2b08      	cmp	r3, #8
 800dbd0:	d85c      	bhi.n	800dc8c <UART_SetConfig+0x418>
 800dbd2:	a201      	add	r2, pc, #4	; (adr r2, 800dbd8 <UART_SetConfig+0x364>)
 800dbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd8:	0800dbfd 	.word	0x0800dbfd
 800dbdc:	0800dc1d 	.word	0x0800dc1d
 800dbe0:	0800dc3d 	.word	0x0800dc3d
 800dbe4:	0800dc8d 	.word	0x0800dc8d
 800dbe8:	0800dc55 	.word	0x0800dc55
 800dbec:	0800dc8d 	.word	0x0800dc8d
 800dbf0:	0800dc8d 	.word	0x0800dc8d
 800dbf4:	0800dc8d 	.word	0x0800dc8d
 800dbf8:	0800dc75 	.word	0x0800dc75
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbfc:	f7fc ff4a 	bl	800aa94 <HAL_RCC_GetPCLK1Freq>
 800dc00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	005a      	lsls	r2, r3, #1
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	085b      	lsrs	r3, r3, #1
 800dc0c:	441a      	add	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	61bb      	str	r3, [r7, #24]
        break;
 800dc1a:	e03a      	b.n	800dc92 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc1c:	f7fc ff4e 	bl	800aabc <HAL_RCC_GetPCLK2Freq>
 800dc20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	005a      	lsls	r2, r3, #1
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	085b      	lsrs	r3, r3, #1
 800dc2c:	441a      	add	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	61bb      	str	r3, [r7, #24]
        break;
 800dc3a:	e02a      	b.n	800dc92 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	085a      	lsrs	r2, r3, #1
 800dc42:	4b5f      	ldr	r3, [pc, #380]	; (800ddc0 <UART_SetConfig+0x54c>)
 800dc44:	4413      	add	r3, r2
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	6852      	ldr	r2, [r2, #4]
 800dc4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	61bb      	str	r3, [r7, #24]
        break;
 800dc52:	e01e      	b.n	800dc92 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc54:	f7fc fe60 	bl	800a918 <HAL_RCC_GetSysClockFreq>
 800dc58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	005a      	lsls	r2, r3, #1
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	085b      	lsrs	r3, r3, #1
 800dc64:	441a      	add	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	61bb      	str	r3, [r7, #24]
        break;
 800dc72:	e00e      	b.n	800dc92 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	085b      	lsrs	r3, r3, #1
 800dc7a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	61bb      	str	r3, [r7, #24]
        break;
 800dc8a:	e002      	b.n	800dc92 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	75fb      	strb	r3, [r7, #23]
        break;
 800dc90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	2b0f      	cmp	r3, #15
 800dc96:	d916      	bls.n	800dcc6 <UART_SetConfig+0x452>
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc9e:	d212      	bcs.n	800dcc6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	f023 030f 	bic.w	r3, r3, #15
 800dca8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	085b      	lsrs	r3, r3, #1
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	f003 0307 	and.w	r3, r3, #7
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	897b      	ldrh	r3, [r7, #10]
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	897a      	ldrh	r2, [r7, #10]
 800dcc2:	60da      	str	r2, [r3, #12]
 800dcc4:	e070      	b.n	800dda8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	75fb      	strb	r3, [r7, #23]
 800dcca:	e06d      	b.n	800dda8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800dccc:	7ffb      	ldrb	r3, [r7, #31]
 800dcce:	2b08      	cmp	r3, #8
 800dcd0:	d859      	bhi.n	800dd86 <UART_SetConfig+0x512>
 800dcd2:	a201      	add	r2, pc, #4	; (adr r2, 800dcd8 <UART_SetConfig+0x464>)
 800dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd8:	0800dcfd 	.word	0x0800dcfd
 800dcdc:	0800dd1b 	.word	0x0800dd1b
 800dce0:	0800dd39 	.word	0x0800dd39
 800dce4:	0800dd87 	.word	0x0800dd87
 800dce8:	0800dd51 	.word	0x0800dd51
 800dcec:	0800dd87 	.word	0x0800dd87
 800dcf0:	0800dd87 	.word	0x0800dd87
 800dcf4:	0800dd87 	.word	0x0800dd87
 800dcf8:	0800dd6f 	.word	0x0800dd6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcfc:	f7fc feca 	bl	800aa94 <HAL_RCC_GetPCLK1Freq>
 800dd00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	085a      	lsrs	r2, r3, #1
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	441a      	add	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	61bb      	str	r3, [r7, #24]
        break;
 800dd18:	e038      	b.n	800dd8c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd1a:	f7fc fecf 	bl	800aabc <HAL_RCC_GetPCLK2Freq>
 800dd1e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	085a      	lsrs	r2, r3, #1
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	441a      	add	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	61bb      	str	r3, [r7, #24]
        break;
 800dd36:	e029      	b.n	800dd8c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	085a      	lsrs	r2, r3, #1
 800dd3e:	4b21      	ldr	r3, [pc, #132]	; (800ddc4 <UART_SetConfig+0x550>)
 800dd40:	4413      	add	r3, r2
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	6852      	ldr	r2, [r2, #4]
 800dd46:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	61bb      	str	r3, [r7, #24]
        break;
 800dd4e:	e01d      	b.n	800dd8c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd50:	f7fc fde2 	bl	800a918 <HAL_RCC_GetSysClockFreq>
 800dd54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	085a      	lsrs	r2, r3, #1
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	441a      	add	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	61bb      	str	r3, [r7, #24]
        break;
 800dd6c:	e00e      	b.n	800dd8c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	085b      	lsrs	r3, r3, #1
 800dd74:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	61bb      	str	r3, [r7, #24]
        break;
 800dd84:	e002      	b.n	800dd8c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	75fb      	strb	r3, [r7, #23]
        break;
 800dd8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	2b0f      	cmp	r3, #15
 800dd90:	d908      	bls.n	800dda4 <UART_SetConfig+0x530>
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd98:	d204      	bcs.n	800dda4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	69ba      	ldr	r2, [r7, #24]
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	e001      	b.n	800dda8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3720      	adds	r7, #32
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	01e84800 	.word	0x01e84800
 800ddc4:	00f42400 	.word	0x00f42400

0800ddc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd4:	f003 0301 	and.w	r3, r3, #1
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d00a      	beq.n	800ddf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf6:	f003 0302 	and.w	r3, r3, #2
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00a      	beq.n	800de14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	430a      	orrs	r2, r1
 800de12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de18:	f003 0304 	and.w	r3, r3, #4
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00a      	beq.n	800de36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	430a      	orrs	r2, r1
 800de34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3a:	f003 0308 	and.w	r3, r3, #8
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00a      	beq.n	800de58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	430a      	orrs	r2, r1
 800de56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5c:	f003 0310 	and.w	r3, r3, #16
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00a      	beq.n	800de7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	430a      	orrs	r2, r1
 800de78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7e:	f003 0320 	and.w	r3, r3, #32
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00a      	beq.n	800de9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	430a      	orrs	r2, r1
 800de9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d01a      	beq.n	800dede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	430a      	orrs	r2, r1
 800debc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dec6:	d10a      	bne.n	800dede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	430a      	orrs	r2, r1
 800dedc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	430a      	orrs	r2, r1
 800defe:	605a      	str	r2, [r3, #4]
  }
}
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af02      	add	r7, sp, #8
 800df12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800df1a:	f7f7 fdff 	bl	8005b1c <HAL_GetTick>
 800df1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f003 0308 	and.w	r3, r3, #8
 800df2a:	2b08      	cmp	r3, #8
 800df2c:	d10e      	bne.n	800df4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 f814 	bl	800df6a <UART_WaitOnFlagUntilTimeout>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df48:	2303      	movs	r3, #3
 800df4a:	e00a      	b.n	800df62 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2220      	movs	r2, #32
 800df50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2220      	movs	r2, #32
 800df56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b084      	sub	sp, #16
 800df6e:	af00      	add	r7, sp, #0
 800df70:	60f8      	str	r0, [r7, #12]
 800df72:	60b9      	str	r1, [r7, #8]
 800df74:	603b      	str	r3, [r7, #0]
 800df76:	4613      	mov	r3, r2
 800df78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df7a:	e05d      	b.n	800e038 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df82:	d059      	beq.n	800e038 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df84:	f7f7 fdca 	bl	8005b1c <HAL_GetTick>
 800df88:	4602      	mov	r2, r0
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	69ba      	ldr	r2, [r7, #24]
 800df90:	429a      	cmp	r2, r3
 800df92:	d302      	bcc.n	800df9a <UART_WaitOnFlagUntilTimeout+0x30>
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d11b      	bne.n	800dfd2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dfa8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	689a      	ldr	r2, [r3, #8]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f022 0201 	bic.w	r2, r2, #1
 800dfb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2220      	movs	r2, #32
 800dfbe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2220      	movs	r2, #32
 800dfc4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800dfce:	2303      	movs	r3, #3
 800dfd0:	e042      	b.n	800e058 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f003 0304 	and.w	r3, r3, #4
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d02b      	beq.n	800e038 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	69db      	ldr	r3, [r3, #28]
 800dfe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfee:	d123      	bne.n	800e038 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dff8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e008:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	689a      	ldr	r2, [r3, #8]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f022 0201 	bic.w	r2, r2, #1
 800e018:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2220      	movs	r2, #32
 800e01e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2220      	movs	r2, #32
 800e024:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2220      	movs	r2, #32
 800e02a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800e034:	2303      	movs	r3, #3
 800e036:	e00f      	b.n	800e058 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	69da      	ldr	r2, [r3, #28]
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	4013      	ands	r3, r2
 800e042:	68ba      	ldr	r2, [r7, #8]
 800e044:	429a      	cmp	r2, r3
 800e046:	bf0c      	ite	eq
 800e048:	2301      	moveq	r3, #1
 800e04a:	2300      	movne	r3, #0
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	461a      	mov	r2, r3
 800e050:	79fb      	ldrb	r3, [r7, #7]
 800e052:	429a      	cmp	r2, r3
 800e054:	d092      	beq.n	800df7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e056:	2300      	movs	r3, #0
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800e06e:	2300      	movs	r3, #0
 800e070:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d027      	beq.n	800e0ca <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	4b2f      	ldr	r3, [pc, #188]	; (800e140 <FMC_SDRAM_Init+0xe0>)
 800e084:	4013      	ands	r3, r2
 800e086:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e090:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800e096:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800e09c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800e0a2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800e0a8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800e0ae:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800e0b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e0ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	e032      	b.n	800e130 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e0d6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e0e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e0e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e0f4:	68ba      	ldr	r2, [r7, #8]
 800e0f6:	4b12      	ldr	r3, [pc, #72]	; (800e140 <FMC_SDRAM_Init+0xe0>)
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e104:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800e10a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800e110:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800e116:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800e11c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e11e:	68ba      	ldr	r2, [r7, #8]
 800e120:	4313      	orrs	r3, r2
 800e122:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3714      	adds	r7, #20
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	ffff8000 	.word	0xffff8000

0800e144 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e144:	b480      	push	{r7}
 800e146:	b087      	sub	sp, #28
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800e150:	2300      	movs	r3, #0
 800e152:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800e154:	2300      	movs	r3, #0
 800e156:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d02e      	beq.n	800e1bc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e16a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	3b01      	subs	r3, #1
 800e178:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e17a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	3b01      	subs	r3, #1
 800e182:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800e184:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	3b01      	subs	r3, #1
 800e18c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800e18e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	3b01      	subs	r3, #1
 800e196:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800e198:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800e1a2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	3b01      	subs	r3, #1
 800e1aa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	697a      	ldr	r2, [r7, #20]
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	697a      	ldr	r2, [r7, #20]
 800e1b8:	609a      	str	r2, [r3, #8]
 800e1ba:	e039      	b.n	800e230 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	4b1e      	ldr	r3, [pc, #120]	; (800e240 <FMC_SDRAM_Timing_Init+0xfc>)
 800e1c6:	4013      	ands	r3, r2
 800e1c8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	695b      	ldr	r3, [r3, #20]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e1ee:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e1fe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	3b01      	subs	r3, #1
 800e206:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e208:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	3b01      	subs	r3, #1
 800e210:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e212:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	699b      	ldr	r3, [r3, #24]
 800e218:	3b01      	subs	r3, #1
 800e21a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e21c:	4313      	orrs	r3, r2
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	4313      	orrs	r3, r2
 800e222:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	697a      	ldr	r2, [r7, #20]
 800e228:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	693a      	ldr	r2, [r7, #16]
 800e22e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800e230:	2300      	movs	r3, #0
}
 800e232:	4618      	mov	r0, r3
 800e234:	371c      	adds	r7, #28
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	ff0f0fff 	.word	0xff0f0fff

0800e244 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e244:	b480      	push	{r7}
 800e246:	b087      	sub	sp, #28
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e25c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	3b01      	subs	r3, #1
 800e264:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800e266:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e26e:	4313      	orrs	r3, r2
 800e270:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800e272:	697a      	ldr	r2, [r7, #20]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	371c      	adds	r7, #28
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e286:	b480      	push	{r7}
 800e288:	b083      	sub	sp, #12
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	695a      	ldr	r2, [r3, #20]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	431a      	orrs	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800e29e:	2300      	movs	r3, #0
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	f043 0201 	orr.w	r2, r3, #1
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e2c0:	2300      	movs	r3, #0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	370c      	adds	r7, #12
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2ce:	b480      	push	{r7}
 800e2d0:	b083      	sub	sp, #12
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	f023 0201 	bic.w	r2, r3, #1
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	019b      	lsls	r3, r3, #6
 800e302:	f043 0220 	orr.w	r2, r3, #32
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	3301      	adds	r3, #1
 800e30e:	60fb      	str	r3, [r7, #12]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	4a09      	ldr	r2, [pc, #36]	; (800e338 <USB_FlushTxFifo+0x48>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d901      	bls.n	800e31c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e318:	2303      	movs	r3, #3
 800e31a:	e006      	b.n	800e32a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	f003 0320 	and.w	r3, r3, #32
 800e324:	2b20      	cmp	r3, #32
 800e326:	d0f0      	beq.n	800e30a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr
 800e336:	bf00      	nop
 800e338:	00030d40 	.word	0x00030d40

0800e33c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b085      	sub	sp, #20
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e344:	2300      	movs	r3, #0
 800e346:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2210      	movs	r2, #16
 800e34c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	3301      	adds	r3, #1
 800e352:	60fb      	str	r3, [r7, #12]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	4a09      	ldr	r2, [pc, #36]	; (800e37c <USB_FlushRxFifo+0x40>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d901      	bls.n	800e360 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e35c:	2303      	movs	r3, #3
 800e35e:	e006      	b.n	800e36e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	691b      	ldr	r3, [r3, #16]
 800e364:	f003 0310 	and.w	r3, r3, #16
 800e368:	2b10      	cmp	r3, #16
 800e36a:	d0f0      	beq.n	800e34e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3714      	adds	r7, #20
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	00030d40 	.word	0x00030d40

0800e380 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e380:	b480      	push	{r7}
 800e382:	b089      	sub	sp, #36	; 0x24
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	4613      	mov	r3, r2
 800e38c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e396:	88fb      	ldrh	r3, [r7, #6]
 800e398:	3303      	adds	r3, #3
 800e39a:	089b      	lsrs	r3, r3, #2
 800e39c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e39e:	2300      	movs	r3, #0
 800e3a0:	61bb      	str	r3, [r7, #24]
 800e3a2:	e00b      	b.n	800e3bc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	601a      	str	r2, [r3, #0]
    pDest++;
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	61bb      	str	r3, [r7, #24]
 800e3bc:	69ba      	ldr	r2, [r7, #24]
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d3ef      	bcc.n	800e3a4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e3c4:	69fb      	ldr	r3, [r7, #28]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3724      	adds	r7, #36	; 0x24
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr

0800e3d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e3d2:	b480      	push	{r7}
 800e3d4:	b085      	sub	sp, #20
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	695b      	ldr	r3, [r3, #20]
 800e3de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	695b      	ldr	r3, [r3, #20]
 800e404:	f003 0301 	and.w	r3, r3, #1
}
 800e408:	4618      	mov	r0, r3
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e432:	f023 0303 	bic.w	r3, r3, #3
 800e436:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	78fb      	ldrb	r3, [r7, #3]
 800e442:	f003 0303 	and.w	r3, r3, #3
 800e446:	68f9      	ldr	r1, [r7, #12]
 800e448:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e44c:	4313      	orrs	r3, r2
 800e44e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e450:	78fb      	ldrb	r3, [r7, #3]
 800e452:	2b01      	cmp	r3, #1
 800e454:	d107      	bne.n	800e466 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e45c:	461a      	mov	r2, r3
 800e45e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e462:	6053      	str	r3, [r2, #4]
 800e464:	e009      	b.n	800e47a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800e466:	78fb      	ldrb	r3, [r7, #3]
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d106      	bne.n	800e47a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e472:	461a      	mov	r2, r3
 800e474:	f241 7370 	movw	r3, #6000	; 0x1770
 800e478:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e49a:	695b      	ldr	r3, [r3, #20]
 800e49c:	b29b      	uxth	r3, r3
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3714      	adds	r7, #20
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	b087      	sub	sp, #28
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800e4ba:	78fb      	ldrb	r3, [r7, #3]
 800e4bc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	015a      	lsls	r2, r3, #5
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	0c9b      	lsrs	r3, r3, #18
 800e4d2:	f003 0303 	and.w	r3, r3, #3
 800e4d6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d002      	beq.n	800e4e4 <USB_HC_Halt+0x3a>
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	d16c      	bne.n	800e5be <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	015a      	lsls	r2, r3, #5
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	0151      	lsls	r1, r2, #5
 800e4f6:	693a      	ldr	r2, [r7, #16]
 800e4f8:	440a      	add	r2, r1
 800e4fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e4fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e502:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d143      	bne.n	800e598 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	015a      	lsls	r2, r3, #5
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	4413      	add	r3, r2
 800e518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	0151      	lsls	r1, r2, #5
 800e522:	693a      	ldr	r2, [r7, #16]
 800e524:	440a      	add	r2, r1
 800e526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e52a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e52e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	015a      	lsls	r2, r3, #5
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	4413      	add	r3, r2
 800e538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	0151      	lsls	r1, r2, #5
 800e542:	693a      	ldr	r2, [r7, #16]
 800e544:	440a      	add	r2, r1
 800e546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e54a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e54e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	015a      	lsls	r2, r3, #5
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	4413      	add	r3, r2
 800e558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	68fa      	ldr	r2, [r7, #12]
 800e560:	0151      	lsls	r1, r2, #5
 800e562:	693a      	ldr	r2, [r7, #16]
 800e564:	440a      	add	r2, r1
 800e566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e56a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e56e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	3301      	adds	r3, #1
 800e574:	617b      	str	r3, [r7, #20]
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e57c:	d81d      	bhi.n	800e5ba <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	015a      	lsls	r2, r3, #5
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	4413      	add	r3, r2
 800e586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e594:	d0ec      	beq.n	800e570 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e596:	e080      	b.n	800e69a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	015a      	lsls	r2, r3, #5
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	4413      	add	r3, r2
 800e5a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	0151      	lsls	r1, r2, #5
 800e5aa:	693a      	ldr	r2, [r7, #16]
 800e5ac:	440a      	add	r2, r1
 800e5ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e5b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e5b6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e5b8:	e06f      	b.n	800e69a <USB_HC_Halt+0x1f0>
          break;
 800e5ba:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e5bc:	e06d      	b.n	800e69a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	015a      	lsls	r2, r3, #5
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68fa      	ldr	r2, [r7, #12]
 800e5ce:	0151      	lsls	r1, r2, #5
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	440a      	add	r2, r1
 800e5d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e5d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5dc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e5e4:	691b      	ldr	r3, [r3, #16]
 800e5e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d143      	bne.n	800e676 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	68fa      	ldr	r2, [r7, #12]
 800e5fe:	0151      	lsls	r1, r2, #5
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	440a      	add	r2, r1
 800e604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e60c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	015a      	lsls	r2, r3, #5
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	4413      	add	r3, r2
 800e616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	0151      	lsls	r1, r2, #5
 800e620:	693a      	ldr	r2, [r7, #16]
 800e622:	440a      	add	r2, r1
 800e624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e62c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	015a      	lsls	r2, r3, #5
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	4413      	add	r3, r2
 800e636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	0151      	lsls	r1, r2, #5
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	440a      	add	r2, r1
 800e644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e64c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	3301      	adds	r3, #1
 800e652:	617b      	str	r3, [r7, #20]
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e65a:	d81d      	bhi.n	800e698 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	015a      	lsls	r2, r3, #5
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	4413      	add	r3, r2
 800e664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e66e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e672:	d0ec      	beq.n	800e64e <USB_HC_Halt+0x1a4>
 800e674:	e011      	b.n	800e69a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	015a      	lsls	r2, r3, #5
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	4413      	add	r3, r2
 800e67e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	0151      	lsls	r1, r2, #5
 800e688:	693a      	ldr	r2, [r7, #16]
 800e68a:	440a      	add	r2, r1
 800e68c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	e000      	b.n	800e69a <USB_HC_Halt+0x1f0>
          break;
 800e698:	bf00      	nop
    }
  }

  return HAL_OK;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	371c      	adds	r7, #28
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7ff fe08 	bl	800e2ce <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e6be:	2110      	movs	r1, #16
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7ff fe15 	bl	800e2f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7ff fe38 	bl	800e33c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	613b      	str	r3, [r7, #16]
 800e6d0:	e01f      	b.n	800e712 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	015a      	lsls	r2, r3, #5
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	4413      	add	r3, r2
 800e6da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e6e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e6f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	015a      	lsls	r2, r3, #5
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	4413      	add	r3, r2
 800e702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e706:	461a      	mov	r2, r3
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	3301      	adds	r3, #1
 800e710:	613b      	str	r3, [r7, #16]
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	2b0f      	cmp	r3, #15
 800e716:	d9dc      	bls.n	800e6d2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e718:	2300      	movs	r3, #0
 800e71a:	613b      	str	r3, [r7, #16]
 800e71c:	e034      	b.n	800e788 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	015a      	lsls	r2, r3, #5
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	4413      	add	r3, r2
 800e726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e734:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e73c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e744:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	015a      	lsls	r2, r3, #5
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	4413      	add	r3, r2
 800e74e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e752:	461a      	mov	r2, r3
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	3301      	adds	r3, #1
 800e75c:	617b      	str	r3, [r7, #20]
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e764:	d80c      	bhi.n	800e780 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	015a      	lsls	r2, r3, #5
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	4413      	add	r3, r2
 800e76e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e77c:	d0ec      	beq.n	800e758 <USB_StopHost+0xb0>
 800e77e:	e000      	b.n	800e782 <USB_StopHost+0xda>
        break;
 800e780:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	3301      	adds	r3, #1
 800e786:	613b      	str	r3, [r7, #16]
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	2b0f      	cmp	r3, #15
 800e78c:	d9c7      	bls.n	800e71e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e794:	461a      	mov	r2, r3
 800e796:	f04f 33ff 	mov.w	r3, #4294967295
 800e79a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff fd81 	bl	800e2ac <USB_EnableGlobalInt>

  return HAL_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e7c2:	1c5a      	adds	r2, r3, #1
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f000 f804 	bl	800e7d8 <USBH_HandleSof>
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	2b0b      	cmp	r3, #11
 800e7e8:	d10a      	bne.n	800e800 <USBH_HandleSof+0x28>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d005      	beq.n	800e800 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e7fa:	699b      	ldr	r3, [r3, #24]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	4798      	blx	r3
  }
}
 800e800:	bf00      	nop
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e82c:	2200      	movs	r2, #0
 800e82e:	4619      	mov	r1, r3
 800e830:	f000 f8ae 	bl	800e990 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e834:	bf00      	nop
}
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e84c:	bf00      	nop
}
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e88c:	2200      	movs	r2, #0
 800e88e:	4619      	mov	r1, r3
 800e890:	f000 f87e 	bl	800e990 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b082      	sub	sp, #8
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f001 f926 	bl	800fb10 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	791b      	ldrb	r3, [r3, #4]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 f830 	bl	800e930 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	795b      	ldrb	r3, [r3, #5]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f82a 	bl	800e930 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	f000 f84c 	bl	800e990 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e8f8:	2300      	movs	r3, #0
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b082      	sub	sp, #8
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2201      	movs	r2, #1
 800e90e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e91e:	2200      	movs	r2, #0
 800e920:	4619      	mov	r1, r3
 800e922:	f000 f835 	bl	800e990 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800e926:	2300      	movs	r3, #0
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	460b      	mov	r3, r1
 800e93a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e93c:	78fb      	ldrb	r3, [r7, #3]
 800e93e:	2b0a      	cmp	r3, #10
 800e940:	d80d      	bhi.n	800e95e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e942:	78fb      	ldrb	r3, [r7, #3]
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	33e0      	adds	r3, #224	; 0xe0
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	685a      	ldr	r2, [r3, #4]
 800e94e:	78fb      	ldrb	r3, [r7, #3]
 800e950:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e954:	6879      	ldr	r1, [r7, #4]
 800e956:	33e0      	adds	r3, #224	; 0xe0
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	440b      	add	r3, r1
 800e95c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e95e:	2300      	movs	r3, #0
}
 800e960:	4618      	mov	r0, r3
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e972:	f3ef 8305 	mrs	r3, IPSR
 800e976:	607b      	str	r3, [r7, #4]
  return(result);
 800e978:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	bf14      	ite	ne
 800e97e:	2301      	movne	r3, #1
 800e980:	2300      	moveq	r3, #0
 800e982:	b2db      	uxtb	r3, r3
}
 800e984:	4618      	mov	r0, r3
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e99c:	2300      	movs	r3, #0
 800e99e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <osMessagePut+0x1e>
    ticks = 1;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e9ae:	f7ff ffdd 	bl	800e96c <inHandlerMode>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d018      	beq.n	800e9ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e9b8:	f107 0210 	add.w	r2, r7, #16
 800e9bc:	f107 0108 	add.w	r1, r7, #8
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f000 f9ae 	bl	800ed24 <xQueueGenericSendFromISR>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d001      	beq.n	800e9d2 <osMessagePut+0x42>
      return osErrorOS;
 800e9ce:	23ff      	movs	r3, #255	; 0xff
 800e9d0:	e018      	b.n	800ea04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d014      	beq.n	800ea02 <osMessagePut+0x72>
 800e9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ea0c <osMessagePut+0x7c>)
 800e9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9de:	601a      	str	r2, [r3, #0]
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	f3bf 8f6f 	isb	sy
 800e9e8:	e00b      	b.n	800ea02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e9ea:	f107 0108 	add.w	r1, r7, #8
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	697a      	ldr	r2, [r7, #20]
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f000 f894 	bl	800eb20 <xQueueGenericSend>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d001      	beq.n	800ea02 <osMessagePut+0x72>
      return osErrorOS;
 800e9fe:	23ff      	movs	r3, #255	; 0xff
 800ea00:	e000      	b.n	800ea04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3718      	adds	r7, #24
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	e000ed04 	.word	0xe000ed04

0800ea10 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	689a      	ldr	r2, [r3, #8]
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	683a      	ldr	r2, [r7, #0]
 800ea34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	683a      	ldr	r2, [r7, #0]
 800ea3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	601a      	str	r2, [r3, #0]
}
 800ea4c:	bf00      	nop
 800ea4e:	3714      	adds	r7, #20
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b085      	sub	sp, #20
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea6e:	d103      	bne.n	800ea78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	691b      	ldr	r3, [r3, #16]
 800ea74:	60fb      	str	r3, [r7, #12]
 800ea76:	e00c      	b.n	800ea92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	3308      	adds	r3, #8
 800ea7c:	60fb      	str	r3, [r7, #12]
 800ea7e:	e002      	b.n	800ea86 <vListInsert+0x2e>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	60fb      	str	r3, [r7, #12]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d2f6      	bcs.n	800ea80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	685a      	ldr	r2, [r3, #4]
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	683a      	ldr	r2, [r7, #0]
 800eaa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	683a      	ldr	r2, [r7, #0]
 800eaac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	1c5a      	adds	r2, r3, #1
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	601a      	str	r2, [r3, #0]
}
 800eabe:	bf00      	nop
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr

0800eaca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eaca:	b480      	push	{r7}
 800eacc:	b085      	sub	sp, #20
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	6892      	ldr	r2, [r2, #8]
 800eae0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	6852      	ldr	r2, [r2, #4]
 800eaea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d103      	bne.n	800eafe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	689a      	ldr	r2, [r3, #8]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2200      	movs	r2, #0
 800eb02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	1e5a      	subs	r2, r3, #1
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3714      	adds	r7, #20
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr
	...

0800eb20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08e      	sub	sp, #56	; 0x38
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
 800eb2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d10b      	bne.n	800eb54 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb40:	b672      	cpsid	i
 800eb42:	f383 8811 	msr	BASEPRI, r3
 800eb46:	f3bf 8f6f 	isb	sy
 800eb4a:	f3bf 8f4f 	dsb	sy
 800eb4e:	b662      	cpsie	i
 800eb50:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb52:	e7fe      	b.n	800eb52 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d103      	bne.n	800eb62 <xQueueGenericSend+0x42>
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d101      	bne.n	800eb66 <xQueueGenericSend+0x46>
 800eb62:	2301      	movs	r3, #1
 800eb64:	e000      	b.n	800eb68 <xQueueGenericSend+0x48>
 800eb66:	2300      	movs	r3, #0
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10b      	bne.n	800eb84 <xQueueGenericSend+0x64>
 800eb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb70:	b672      	cpsid	i
 800eb72:	f383 8811 	msr	BASEPRI, r3
 800eb76:	f3bf 8f6f 	isb	sy
 800eb7a:	f3bf 8f4f 	dsb	sy
 800eb7e:	b662      	cpsie	i
 800eb80:	627b      	str	r3, [r7, #36]	; 0x24
 800eb82:	e7fe      	b.n	800eb82 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	d103      	bne.n	800eb92 <xQueueGenericSend+0x72>
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d101      	bne.n	800eb96 <xQueueGenericSend+0x76>
 800eb92:	2301      	movs	r3, #1
 800eb94:	e000      	b.n	800eb98 <xQueueGenericSend+0x78>
 800eb96:	2300      	movs	r3, #0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10b      	bne.n	800ebb4 <xQueueGenericSend+0x94>
 800eb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba0:	b672      	cpsid	i
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	b662      	cpsie	i
 800ebb0:	623b      	str	r3, [r7, #32]
 800ebb2:	e7fe      	b.n	800ebb2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebb4:	f000 fd3e 	bl	800f634 <xTaskGetSchedulerState>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d102      	bne.n	800ebc4 <xQueueGenericSend+0xa4>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d101      	bne.n	800ebc8 <xQueueGenericSend+0xa8>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e000      	b.n	800ebca <xQueueGenericSend+0xaa>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d10b      	bne.n	800ebe6 <xQueueGenericSend+0xc6>
 800ebce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd2:	b672      	cpsid	i
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	b662      	cpsie	i
 800ebe2:	61fb      	str	r3, [r7, #28]
 800ebe4:	e7fe      	b.n	800ebe4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebe6:	f000 fe47 	bl	800f878 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d302      	bcc.n	800ebfc <xQueueGenericSend+0xdc>
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	2b02      	cmp	r3, #2
 800ebfa:	d129      	bne.n	800ec50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ebfc:	683a      	ldr	r2, [r7, #0]
 800ebfe:	68b9      	ldr	r1, [r7, #8]
 800ec00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec02:	f000 f92b 	bl	800ee5c <prvCopyDataToQueue>
 800ec06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d010      	beq.n	800ec32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec12:	3324      	adds	r3, #36	; 0x24
 800ec14:	4618      	mov	r0, r3
 800ec16:	f000 fc03 	bl	800f420 <xTaskRemoveFromEventList>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d013      	beq.n	800ec48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec20:	4b3f      	ldr	r3, [pc, #252]	; (800ed20 <xQueueGenericSend+0x200>)
 800ec22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec26:	601a      	str	r2, [r3, #0]
 800ec28:	f3bf 8f4f 	dsb	sy
 800ec2c:	f3bf 8f6f 	isb	sy
 800ec30:	e00a      	b.n	800ec48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d007      	beq.n	800ec48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ec38:	4b39      	ldr	r3, [pc, #228]	; (800ed20 <xQueueGenericSend+0x200>)
 800ec3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec3e:	601a      	str	r2, [r3, #0]
 800ec40:	f3bf 8f4f 	dsb	sy
 800ec44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ec48:	f000 fe48 	bl	800f8dc <vPortExitCritical>
				return pdPASS;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e063      	b.n	800ed18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d103      	bne.n	800ec5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec56:	f000 fe41 	bl	800f8dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e05c      	b.n	800ed18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d106      	bne.n	800ec72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec64:	f107 0314 	add.w	r3, r7, #20
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f000 fc3d 	bl	800f4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec72:	f000 fe33 	bl	800f8dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec76:	f000 f9c5 	bl	800f004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec7a:	f000 fdfd 	bl	800f878 <vPortEnterCritical>
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec84:	b25b      	sxtb	r3, r3
 800ec86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec8a:	d103      	bne.n	800ec94 <xQueueGenericSend+0x174>
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec9a:	b25b      	sxtb	r3, r3
 800ec9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca0:	d103      	bne.n	800ecaa <xQueueGenericSend+0x18a>
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecaa:	f000 fe17 	bl	800f8dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecae:	1d3a      	adds	r2, r7, #4
 800ecb0:	f107 0314 	add.w	r3, r7, #20
 800ecb4:	4611      	mov	r1, r2
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f000 fc2c 	bl	800f514 <xTaskCheckForTimeOut>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d124      	bne.n	800ed0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ecc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecc4:	f000 f986 	bl	800efd4 <prvIsQueueFull>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d018      	beq.n	800ed00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ecce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd0:	3310      	adds	r3, #16
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	4611      	mov	r1, r2
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f000 fb7c 	bl	800f3d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ecdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecde:	f000 f927 	bl	800ef30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ece2:	f000 f99d 	bl	800f020 <xTaskResumeAll>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f47f af7c 	bne.w	800ebe6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ecee:	4b0c      	ldr	r3, [pc, #48]	; (800ed20 <xQueueGenericSend+0x200>)
 800ecf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecf4:	601a      	str	r2, [r3, #0]
 800ecf6:	f3bf 8f4f 	dsb	sy
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	e772      	b.n	800ebe6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ed00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed02:	f000 f915 	bl	800ef30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed06:	f000 f98b 	bl	800f020 <xTaskResumeAll>
 800ed0a:	e76c      	b.n	800ebe6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed0e:	f000 f90f 	bl	800ef30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed12:	f000 f985 	bl	800f020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ed16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3738      	adds	r7, #56	; 0x38
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	e000ed04 	.word	0xe000ed04

0800ed24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b08e      	sub	sp, #56	; 0x38
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
 800ed30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d10b      	bne.n	800ed54 <xQueueGenericSendFromISR+0x30>
 800ed3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed40:	b672      	cpsid	i
 800ed42:	f383 8811 	msr	BASEPRI, r3
 800ed46:	f3bf 8f6f 	isb	sy
 800ed4a:	f3bf 8f4f 	dsb	sy
 800ed4e:	b662      	cpsie	i
 800ed50:	627b      	str	r3, [r7, #36]	; 0x24
 800ed52:	e7fe      	b.n	800ed52 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d103      	bne.n	800ed62 <xQueueGenericSendFromISR+0x3e>
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d101      	bne.n	800ed66 <xQueueGenericSendFromISR+0x42>
 800ed62:	2301      	movs	r3, #1
 800ed64:	e000      	b.n	800ed68 <xQueueGenericSendFromISR+0x44>
 800ed66:	2300      	movs	r3, #0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d10b      	bne.n	800ed84 <xQueueGenericSendFromISR+0x60>
 800ed6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed70:	b672      	cpsid	i
 800ed72:	f383 8811 	msr	BASEPRI, r3
 800ed76:	f3bf 8f6f 	isb	sy
 800ed7a:	f3bf 8f4f 	dsb	sy
 800ed7e:	b662      	cpsie	i
 800ed80:	623b      	str	r3, [r7, #32]
 800ed82:	e7fe      	b.n	800ed82 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	2b02      	cmp	r3, #2
 800ed88:	d103      	bne.n	800ed92 <xQueueGenericSendFromISR+0x6e>
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d101      	bne.n	800ed96 <xQueueGenericSendFromISR+0x72>
 800ed92:	2301      	movs	r3, #1
 800ed94:	e000      	b.n	800ed98 <xQueueGenericSendFromISR+0x74>
 800ed96:	2300      	movs	r3, #0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d10b      	bne.n	800edb4 <xQueueGenericSendFromISR+0x90>
 800ed9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda0:	b672      	cpsid	i
 800eda2:	f383 8811 	msr	BASEPRI, r3
 800eda6:	f3bf 8f6f 	isb	sy
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	b662      	cpsie	i
 800edb0:	61fb      	str	r3, [r7, #28]
 800edb2:	e7fe      	b.n	800edb2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edb4:	f000 fe12 	bl	800f9dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800edb8:	f3ef 8211 	mrs	r2, BASEPRI
 800edbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc0:	b672      	cpsid	i
 800edc2:	f383 8811 	msr	BASEPRI, r3
 800edc6:	f3bf 8f6f 	isb	sy
 800edca:	f3bf 8f4f 	dsb	sy
 800edce:	b662      	cpsie	i
 800edd0:	61ba      	str	r2, [r7, #24]
 800edd2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800edd4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d302      	bcc.n	800edea <xQueueGenericSendFromISR+0xc6>
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	d12c      	bne.n	800ee44 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800edea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800edf4:	683a      	ldr	r2, [r7, #0]
 800edf6:	68b9      	ldr	r1, [r7, #8]
 800edf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edfa:	f000 f82f 	bl	800ee5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800edfe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ee02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee06:	d112      	bne.n	800ee2e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d016      	beq.n	800ee3e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee12:	3324      	adds	r3, #36	; 0x24
 800ee14:	4618      	mov	r0, r3
 800ee16:	f000 fb03 	bl	800f420 <xTaskRemoveFromEventList>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d00e      	beq.n	800ee3e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00b      	beq.n	800ee3e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	601a      	str	r2, [r3, #0]
 800ee2c:	e007      	b.n	800ee3e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee32:	3301      	adds	r3, #1
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	b25a      	sxtb	r2, r3
 800ee38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ee42:	e001      	b.n	800ee48 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee44:	2300      	movs	r3, #0
 800ee46:	637b      	str	r3, [r7, #52]	; 0x34
 800ee48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3738      	adds	r7, #56	; 0x38
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10d      	bne.n	800ee96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d14d      	bne.n	800ef1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	4618      	mov	r0, r3
 800ee88:	f000 fbf2 	bl	800f670 <xTaskPriorityDisinherit>
 800ee8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2200      	movs	r2, #0
 800ee92:	609a      	str	r2, [r3, #8]
 800ee94:	e043      	b.n	800ef1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d119      	bne.n	800eed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	6858      	ldr	r0, [r3, #4]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea4:	461a      	mov	r2, r3
 800eea6:	68b9      	ldr	r1, [r7, #8]
 800eea8:	f001 f8d8 	bl	801005c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	685a      	ldr	r2, [r3, #4]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeb4:	441a      	add	r2, r3
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d32b      	bcc.n	800ef1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	605a      	str	r2, [r3, #4]
 800eece:	e026      	b.n	800ef1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	68d8      	ldr	r0, [r3, #12]
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eed8:	461a      	mov	r2, r3
 800eeda:	68b9      	ldr	r1, [r7, #8]
 800eedc:	f001 f8be 	bl	801005c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	68da      	ldr	r2, [r3, #12]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eee8:	425b      	negs	r3, r3
 800eeea:	441a      	add	r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	68da      	ldr	r2, [r3, #12]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d207      	bcs.n	800ef0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	689a      	ldr	r2, [r3, #8]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef04:	425b      	negs	r3, r3
 800ef06:	441a      	add	r2, r3
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b02      	cmp	r3, #2
 800ef10:	d105      	bne.n	800ef1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d002      	beq.n	800ef1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	3b01      	subs	r3, #1
 800ef1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	1c5a      	adds	r2, r3, #1
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ef26:	697b      	ldr	r3, [r7, #20]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3718      	adds	r7, #24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ef38:	f000 fc9e 	bl	800f878 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef44:	e011      	b.n	800ef6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d012      	beq.n	800ef74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	3324      	adds	r3, #36	; 0x24
 800ef52:	4618      	mov	r0, r3
 800ef54:	f000 fa64 	bl	800f420 <xTaskRemoveFromEventList>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d001      	beq.n	800ef62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ef5e:	f000 fb3d 	bl	800f5dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ef62:	7bfb      	ldrb	r3, [r7, #15]
 800ef64:	3b01      	subs	r3, #1
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	dce9      	bgt.n	800ef46 <prvUnlockQueue+0x16>
 800ef72:	e000      	b.n	800ef76 <prvUnlockQueue+0x46>
					break;
 800ef74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	22ff      	movs	r2, #255	; 0xff
 800ef7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ef7e:	f000 fcad 	bl	800f8dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ef82:	f000 fc79 	bl	800f878 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef8e:	e011      	b.n	800efb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	691b      	ldr	r3, [r3, #16]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d012      	beq.n	800efbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	3310      	adds	r3, #16
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 fa3f 	bl	800f420 <xTaskRemoveFromEventList>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d001      	beq.n	800efac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800efa8:	f000 fb18 	bl	800f5dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800efac:	7bbb      	ldrb	r3, [r7, #14]
 800efae:	3b01      	subs	r3, #1
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	dce9      	bgt.n	800ef90 <prvUnlockQueue+0x60>
 800efbc:	e000      	b.n	800efc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800efbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	22ff      	movs	r2, #255	; 0xff
 800efc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800efc8:	f000 fc88 	bl	800f8dc <vPortExitCritical>
}
 800efcc:	bf00      	nop
 800efce:	3710      	adds	r7, #16
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800efdc:	f000 fc4c 	bl	800f878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efe8:	429a      	cmp	r2, r3
 800efea:	d102      	bne.n	800eff2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800efec:	2301      	movs	r3, #1
 800efee:	60fb      	str	r3, [r7, #12]
 800eff0:	e001      	b.n	800eff6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eff2:	2300      	movs	r3, #0
 800eff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eff6:	f000 fc71 	bl	800f8dc <vPortExitCritical>

	return xReturn;
 800effa:	68fb      	ldr	r3, [r7, #12]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f004:	b480      	push	{r7}
 800f006:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f008:	4b04      	ldr	r3, [pc, #16]	; (800f01c <vTaskSuspendAll+0x18>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	3301      	adds	r3, #1
 800f00e:	4a03      	ldr	r2, [pc, #12]	; (800f01c <vTaskSuspendAll+0x18>)
 800f010:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f012:	bf00      	nop
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr
 800f01c:	20000554 	.word	0x20000554

0800f020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f026:	2300      	movs	r3, #0
 800f028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f02a:	2300      	movs	r3, #0
 800f02c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f02e:	4b42      	ldr	r3, [pc, #264]	; (800f138 <xTaskResumeAll+0x118>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d10b      	bne.n	800f04e <xTaskResumeAll+0x2e>
	__asm volatile
 800f036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03a:	b672      	cpsid	i
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	b662      	cpsie	i
 800f04a:	603b      	str	r3, [r7, #0]
 800f04c:	e7fe      	b.n	800f04c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f04e:	f000 fc13 	bl	800f878 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f052:	4b39      	ldr	r3, [pc, #228]	; (800f138 <xTaskResumeAll+0x118>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	3b01      	subs	r3, #1
 800f058:	4a37      	ldr	r2, [pc, #220]	; (800f138 <xTaskResumeAll+0x118>)
 800f05a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f05c:	4b36      	ldr	r3, [pc, #216]	; (800f138 <xTaskResumeAll+0x118>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d161      	bne.n	800f128 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f064:	4b35      	ldr	r3, [pc, #212]	; (800f13c <xTaskResumeAll+0x11c>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d05d      	beq.n	800f128 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f06c:	e02e      	b.n	800f0cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f06e:	4b34      	ldr	r3, [pc, #208]	; (800f140 <xTaskResumeAll+0x120>)
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	68db      	ldr	r3, [r3, #12]
 800f074:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	3318      	adds	r3, #24
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7ff fd25 	bl	800eaca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	3304      	adds	r3, #4
 800f084:	4618      	mov	r0, r3
 800f086:	f7ff fd20 	bl	800eaca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08e:	2201      	movs	r2, #1
 800f090:	409a      	lsls	r2, r3
 800f092:	4b2c      	ldr	r3, [pc, #176]	; (800f144 <xTaskResumeAll+0x124>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4313      	orrs	r3, r2
 800f098:	4a2a      	ldr	r2, [pc, #168]	; (800f144 <xTaskResumeAll+0x124>)
 800f09a:	6013      	str	r3, [r2, #0]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	4413      	add	r3, r2
 800f0a6:	009b      	lsls	r3, r3, #2
 800f0a8:	4a27      	ldr	r2, [pc, #156]	; (800f148 <xTaskResumeAll+0x128>)
 800f0aa:	441a      	add	r2, r3
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	3304      	adds	r3, #4
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	4610      	mov	r0, r2
 800f0b4:	f7ff fcac 	bl	800ea10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0bc:	4b23      	ldr	r3, [pc, #140]	; (800f14c <xTaskResumeAll+0x12c>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d302      	bcc.n	800f0cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f0c6:	4b22      	ldr	r3, [pc, #136]	; (800f150 <xTaskResumeAll+0x130>)
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0cc:	4b1c      	ldr	r3, [pc, #112]	; (800f140 <xTaskResumeAll+0x120>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d1cc      	bne.n	800f06e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d001      	beq.n	800f0de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f0da:	f000 fa8b 	bl	800f5f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f0de:	4b1d      	ldr	r3, [pc, #116]	; (800f154 <xTaskResumeAll+0x134>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d010      	beq.n	800f10c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0ea:	f000 f837 	bl	800f15c <xTaskIncrementTick>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d002      	beq.n	800f0fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f0f4:	4b16      	ldr	r3, [pc, #88]	; (800f150 <xTaskResumeAll+0x130>)
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d1f1      	bne.n	800f0ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800f106:	4b13      	ldr	r3, [pc, #76]	; (800f154 <xTaskResumeAll+0x134>)
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f10c:	4b10      	ldr	r3, [pc, #64]	; (800f150 <xTaskResumeAll+0x130>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d009      	beq.n	800f128 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f114:	2301      	movs	r3, #1
 800f116:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f118:	4b0f      	ldr	r3, [pc, #60]	; (800f158 <xTaskResumeAll+0x138>)
 800f11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f11e:	601a      	str	r2, [r3, #0]
 800f120:	f3bf 8f4f 	dsb	sy
 800f124:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f128:	f000 fbd8 	bl	800f8dc <vPortExitCritical>

	return xAlreadyYielded;
 800f12c:	68bb      	ldr	r3, [r7, #8]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20000554 	.word	0x20000554
 800f13c:	20000534 	.word	0x20000534
 800f140:	2000050c 	.word	0x2000050c
 800f144:	2000053c 	.word	0x2000053c
 800f148:	20000478 	.word	0x20000478
 800f14c:	20000474 	.word	0x20000474
 800f150:	20000548 	.word	0x20000548
 800f154:	20000544 	.word	0x20000544
 800f158:	e000ed04 	.word	0xe000ed04

0800f15c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b086      	sub	sp, #24
 800f160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f162:	2300      	movs	r3, #0
 800f164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f166:	4b4f      	ldr	r3, [pc, #316]	; (800f2a4 <xTaskIncrementTick+0x148>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f040 8089 	bne.w	800f282 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f170:	4b4d      	ldr	r3, [pc, #308]	; (800f2a8 <xTaskIncrementTick+0x14c>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3301      	adds	r3, #1
 800f176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f178:	4a4b      	ldr	r2, [pc, #300]	; (800f2a8 <xTaskIncrementTick+0x14c>)
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d121      	bne.n	800f1c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f184:	4b49      	ldr	r3, [pc, #292]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00b      	beq.n	800f1a6 <xTaskIncrementTick+0x4a>
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	b672      	cpsid	i
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	b662      	cpsie	i
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	e7fe      	b.n	800f1a4 <xTaskIncrementTick+0x48>
 800f1a6:	4b41      	ldr	r3, [pc, #260]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	60fb      	str	r3, [r7, #12]
 800f1ac:	4b40      	ldr	r3, [pc, #256]	; (800f2b0 <xTaskIncrementTick+0x154>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a3e      	ldr	r2, [pc, #248]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f1b2:	6013      	str	r3, [r2, #0]
 800f1b4:	4a3e      	ldr	r2, [pc, #248]	; (800f2b0 <xTaskIncrementTick+0x154>)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6013      	str	r3, [r2, #0]
 800f1ba:	4b3e      	ldr	r3, [pc, #248]	; (800f2b4 <xTaskIncrementTick+0x158>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	4a3c      	ldr	r2, [pc, #240]	; (800f2b4 <xTaskIncrementTick+0x158>)
 800f1c2:	6013      	str	r3, [r2, #0]
 800f1c4:	f000 fa16 	bl	800f5f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1c8:	4b3b      	ldr	r3, [pc, #236]	; (800f2b8 <xTaskIncrementTick+0x15c>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	693a      	ldr	r2, [r7, #16]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d348      	bcc.n	800f264 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1d2:	4b36      	ldr	r3, [pc, #216]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d104      	bne.n	800f1e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1dc:	4b36      	ldr	r3, [pc, #216]	; (800f2b8 <xTaskIncrementTick+0x15c>)
 800f1de:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e2:	601a      	str	r2, [r3, #0]
					break;
 800f1e4:	e03e      	b.n	800f264 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1e6:	4b31      	ldr	r3, [pc, #196]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f1f6:	693a      	ldr	r2, [r7, #16]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d203      	bcs.n	800f206 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1fe:	4a2e      	ldr	r2, [pc, #184]	; (800f2b8 <xTaskIncrementTick+0x15c>)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f204:	e02e      	b.n	800f264 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	3304      	adds	r3, #4
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7ff fc5d 	bl	800eaca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f214:	2b00      	cmp	r3, #0
 800f216:	d004      	beq.n	800f222 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	3318      	adds	r3, #24
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7ff fc54 	bl	800eaca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f226:	2201      	movs	r2, #1
 800f228:	409a      	lsls	r2, r3
 800f22a:	4b24      	ldr	r3, [pc, #144]	; (800f2bc <xTaskIncrementTick+0x160>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	4313      	orrs	r3, r2
 800f230:	4a22      	ldr	r2, [pc, #136]	; (800f2bc <xTaskIncrementTick+0x160>)
 800f232:	6013      	str	r3, [r2, #0]
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f238:	4613      	mov	r3, r2
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	4413      	add	r3, r2
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	4a1f      	ldr	r2, [pc, #124]	; (800f2c0 <xTaskIncrementTick+0x164>)
 800f242:	441a      	add	r2, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	3304      	adds	r3, #4
 800f248:	4619      	mov	r1, r3
 800f24a:	4610      	mov	r0, r2
 800f24c:	f7ff fbe0 	bl	800ea10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f254:	4b1b      	ldr	r3, [pc, #108]	; (800f2c4 <xTaskIncrementTick+0x168>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d3b9      	bcc.n	800f1d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f25e:	2301      	movs	r3, #1
 800f260:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f262:	e7b6      	b.n	800f1d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f264:	4b17      	ldr	r3, [pc, #92]	; (800f2c4 <xTaskIncrementTick+0x168>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f26a:	4915      	ldr	r1, [pc, #84]	; (800f2c0 <xTaskIncrementTick+0x164>)
 800f26c:	4613      	mov	r3, r2
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	4413      	add	r3, r2
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	440b      	add	r3, r1
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d907      	bls.n	800f28c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800f27c:	2301      	movs	r3, #1
 800f27e:	617b      	str	r3, [r7, #20]
 800f280:	e004      	b.n	800f28c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f282:	4b11      	ldr	r3, [pc, #68]	; (800f2c8 <xTaskIncrementTick+0x16c>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	3301      	adds	r3, #1
 800f288:	4a0f      	ldr	r2, [pc, #60]	; (800f2c8 <xTaskIncrementTick+0x16c>)
 800f28a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f28c:	4b0f      	ldr	r3, [pc, #60]	; (800f2cc <xTaskIncrementTick+0x170>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d001      	beq.n	800f298 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800f294:	2301      	movs	r3, #1
 800f296:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f298:	697b      	ldr	r3, [r7, #20]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3718      	adds	r7, #24
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	20000554 	.word	0x20000554
 800f2a8:	20000538 	.word	0x20000538
 800f2ac:	20000504 	.word	0x20000504
 800f2b0:	20000508 	.word	0x20000508
 800f2b4:	2000054c 	.word	0x2000054c
 800f2b8:	20000550 	.word	0x20000550
 800f2bc:	2000053c 	.word	0x2000053c
 800f2c0:	20000478 	.word	0x20000478
 800f2c4:	20000474 	.word	0x20000474
 800f2c8:	20000544 	.word	0x20000544
 800f2cc:	20000548 	.word	0x20000548

0800f2d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b088      	sub	sp, #32
 800f2d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f2d6:	4b3a      	ldr	r3, [pc, #232]	; (800f3c0 <vTaskSwitchContext+0xf0>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d003      	beq.n	800f2e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f2de:	4b39      	ldr	r3, [pc, #228]	; (800f3c4 <vTaskSwitchContext+0xf4>)
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f2e4:	e067      	b.n	800f3b6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800f2e6:	4b37      	ldr	r3, [pc, #220]	; (800f3c4 <vTaskSwitchContext+0xf4>)
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f2ec:	4b36      	ldr	r3, [pc, #216]	; (800f3c8 <vTaskSwitchContext+0xf8>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2f2:	61fb      	str	r3, [r7, #28]
 800f2f4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800f2f8:	61bb      	str	r3, [r7, #24]
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	69ba      	ldr	r2, [r7, #24]
 800f300:	429a      	cmp	r2, r3
 800f302:	d111      	bne.n	800f328 <vTaskSwitchContext+0x58>
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	3304      	adds	r3, #4
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	69ba      	ldr	r2, [r7, #24]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d10b      	bne.n	800f328 <vTaskSwitchContext+0x58>
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	3308      	adds	r3, #8
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	69ba      	ldr	r2, [r7, #24]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d105      	bne.n	800f328 <vTaskSwitchContext+0x58>
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	330c      	adds	r3, #12
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	69ba      	ldr	r2, [r7, #24]
 800f324:	429a      	cmp	r2, r3
 800f326:	d008      	beq.n	800f33a <vTaskSwitchContext+0x6a>
 800f328:	4b27      	ldr	r3, [pc, #156]	; (800f3c8 <vTaskSwitchContext+0xf8>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	4b26      	ldr	r3, [pc, #152]	; (800f3c8 <vTaskSwitchContext+0xf8>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	3334      	adds	r3, #52	; 0x34
 800f332:	4619      	mov	r1, r3
 800f334:	4610      	mov	r0, r2
 800f336:	f7f1 f93b 	bl	80005b0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f33a:	4b24      	ldr	r3, [pc, #144]	; (800f3cc <vTaskSwitchContext+0xfc>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	fab3 f383 	clz	r3, r3
 800f346:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f348:	7afb      	ldrb	r3, [r7, #11]
 800f34a:	f1c3 031f 	rsb	r3, r3, #31
 800f34e:	617b      	str	r3, [r7, #20]
 800f350:	491f      	ldr	r1, [pc, #124]	; (800f3d0 <vTaskSwitchContext+0x100>)
 800f352:	697a      	ldr	r2, [r7, #20]
 800f354:	4613      	mov	r3, r2
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	4413      	add	r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	440b      	add	r3, r1
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d10b      	bne.n	800f37c <vTaskSwitchContext+0xac>
	__asm volatile
 800f364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f368:	b672      	cpsid	i
 800f36a:	f383 8811 	msr	BASEPRI, r3
 800f36e:	f3bf 8f6f 	isb	sy
 800f372:	f3bf 8f4f 	dsb	sy
 800f376:	b662      	cpsie	i
 800f378:	607b      	str	r3, [r7, #4]
 800f37a:	e7fe      	b.n	800f37a <vTaskSwitchContext+0xaa>
 800f37c:	697a      	ldr	r2, [r7, #20]
 800f37e:	4613      	mov	r3, r2
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	4413      	add	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4a12      	ldr	r2, [pc, #72]	; (800f3d0 <vTaskSwitchContext+0x100>)
 800f388:	4413      	add	r3, r2
 800f38a:	613b      	str	r3, [r7, #16]
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	685a      	ldr	r2, [r3, #4]
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	605a      	str	r2, [r3, #4]
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	685a      	ldr	r2, [r3, #4]
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	3308      	adds	r3, #8
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d104      	bne.n	800f3ac <vTaskSwitchContext+0xdc>
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	605a      	str	r2, [r3, #4]
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	4a05      	ldr	r2, [pc, #20]	; (800f3c8 <vTaskSwitchContext+0xf8>)
 800f3b4:	6013      	str	r3, [r2, #0]
}
 800f3b6:	bf00      	nop
 800f3b8:	3720      	adds	r7, #32
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	20000554 	.word	0x20000554
 800f3c4:	20000548 	.word	0x20000548
 800f3c8:	20000474 	.word	0x20000474
 800f3cc:	2000053c 	.word	0x2000053c
 800f3d0:	20000478 	.word	0x20000478

0800f3d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d10b      	bne.n	800f3fc <vTaskPlaceOnEventList+0x28>
 800f3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e8:	b672      	cpsid	i
 800f3ea:	f383 8811 	msr	BASEPRI, r3
 800f3ee:	f3bf 8f6f 	isb	sy
 800f3f2:	f3bf 8f4f 	dsb	sy
 800f3f6:	b662      	cpsie	i
 800f3f8:	60fb      	str	r3, [r7, #12]
 800f3fa:	e7fe      	b.n	800f3fa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3fc:	4b07      	ldr	r3, [pc, #28]	; (800f41c <vTaskPlaceOnEventList+0x48>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3318      	adds	r3, #24
 800f402:	4619      	mov	r1, r3
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7ff fb27 	bl	800ea58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f40a:	2101      	movs	r1, #1
 800f40c:	6838      	ldr	r0, [r7, #0]
 800f40e:	f000 f9b7 	bl	800f780 <prvAddCurrentTaskToDelayedList>
}
 800f412:	bf00      	nop
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	20000474 	.word	0x20000474

0800f420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d10b      	bne.n	800f44e <xTaskRemoveFromEventList+0x2e>
 800f436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43a:	b672      	cpsid	i
 800f43c:	f383 8811 	msr	BASEPRI, r3
 800f440:	f3bf 8f6f 	isb	sy
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	b662      	cpsie	i
 800f44a:	60fb      	str	r3, [r7, #12]
 800f44c:	e7fe      	b.n	800f44c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	3318      	adds	r3, #24
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff fb39 	bl	800eaca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f458:	4b1d      	ldr	r3, [pc, #116]	; (800f4d0 <xTaskRemoveFromEventList+0xb0>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d11c      	bne.n	800f49a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	3304      	adds	r3, #4
 800f464:	4618      	mov	r0, r3
 800f466:	f7ff fb30 	bl	800eaca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f46e:	2201      	movs	r2, #1
 800f470:	409a      	lsls	r2, r3
 800f472:	4b18      	ldr	r3, [pc, #96]	; (800f4d4 <xTaskRemoveFromEventList+0xb4>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4313      	orrs	r3, r2
 800f478:	4a16      	ldr	r2, [pc, #88]	; (800f4d4 <xTaskRemoveFromEventList+0xb4>)
 800f47a:	6013      	str	r3, [r2, #0]
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f480:	4613      	mov	r3, r2
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	4413      	add	r3, r2
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	4a13      	ldr	r2, [pc, #76]	; (800f4d8 <xTaskRemoveFromEventList+0xb8>)
 800f48a:	441a      	add	r2, r3
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	3304      	adds	r3, #4
 800f490:	4619      	mov	r1, r3
 800f492:	4610      	mov	r0, r2
 800f494:	f7ff fabc 	bl	800ea10 <vListInsertEnd>
 800f498:	e005      	b.n	800f4a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	3318      	adds	r3, #24
 800f49e:	4619      	mov	r1, r3
 800f4a0:	480e      	ldr	r0, [pc, #56]	; (800f4dc <xTaskRemoveFromEventList+0xbc>)
 800f4a2:	f7ff fab5 	bl	800ea10 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4aa:	4b0d      	ldr	r3, [pc, #52]	; (800f4e0 <xTaskRemoveFromEventList+0xc0>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d905      	bls.n	800f4c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4b8:	4b0a      	ldr	r3, [pc, #40]	; (800f4e4 <xTaskRemoveFromEventList+0xc4>)
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	e001      	b.n	800f4c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4c4:	697b      	ldr	r3, [r7, #20]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3718      	adds	r7, #24
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	20000554 	.word	0x20000554
 800f4d4:	2000053c 	.word	0x2000053c
 800f4d8:	20000478 	.word	0x20000478
 800f4dc:	2000050c 	.word	0x2000050c
 800f4e0:	20000474 	.word	0x20000474
 800f4e4:	20000548 	.word	0x20000548

0800f4e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4f0:	4b06      	ldr	r3, [pc, #24]	; (800f50c <vTaskInternalSetTimeOutState+0x24>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4f8:	4b05      	ldr	r3, [pc, #20]	; (800f510 <vTaskInternalSetTimeOutState+0x28>)
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	605a      	str	r2, [r3, #4]
}
 800f500:	bf00      	nop
 800f502:	370c      	adds	r7, #12
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr
 800f50c:	2000054c 	.word	0x2000054c
 800f510:	20000538 	.word	0x20000538

0800f514 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10b      	bne.n	800f53c <xTaskCheckForTimeOut+0x28>
 800f524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f528:	b672      	cpsid	i
 800f52a:	f383 8811 	msr	BASEPRI, r3
 800f52e:	f3bf 8f6f 	isb	sy
 800f532:	f3bf 8f4f 	dsb	sy
 800f536:	b662      	cpsie	i
 800f538:	613b      	str	r3, [r7, #16]
 800f53a:	e7fe      	b.n	800f53a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10b      	bne.n	800f55a <xTaskCheckForTimeOut+0x46>
 800f542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f546:	b672      	cpsid	i
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	b662      	cpsie	i
 800f556:	60fb      	str	r3, [r7, #12]
 800f558:	e7fe      	b.n	800f558 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800f55a:	f000 f98d 	bl	800f878 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f55e:	4b1d      	ldr	r3, [pc, #116]	; (800f5d4 <xTaskCheckForTimeOut+0xc0>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	69ba      	ldr	r2, [r7, #24]
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f576:	d102      	bne.n	800f57e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f578:	2300      	movs	r3, #0
 800f57a:	61fb      	str	r3, [r7, #28]
 800f57c:	e023      	b.n	800f5c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	4b15      	ldr	r3, [pc, #84]	; (800f5d8 <xTaskCheckForTimeOut+0xc4>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	429a      	cmp	r2, r3
 800f588:	d007      	beq.n	800f59a <xTaskCheckForTimeOut+0x86>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	69ba      	ldr	r2, [r7, #24]
 800f590:	429a      	cmp	r2, r3
 800f592:	d302      	bcc.n	800f59a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f594:	2301      	movs	r3, #1
 800f596:	61fb      	str	r3, [r7, #28]
 800f598:	e015      	b.n	800f5c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d20b      	bcs.n	800f5bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	1ad2      	subs	r2, r2, r3
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7ff ff99 	bl	800f4e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	61fb      	str	r3, [r7, #28]
 800f5ba:	e004      	b.n	800f5c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f5c6:	f000 f989 	bl	800f8dc <vPortExitCritical>

	return xReturn;
 800f5ca:	69fb      	ldr	r3, [r7, #28]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3720      	adds	r7, #32
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	20000538 	.word	0x20000538
 800f5d8:	2000054c 	.word	0x2000054c

0800f5dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5dc:	b480      	push	{r7}
 800f5de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5e0:	4b03      	ldr	r3, [pc, #12]	; (800f5f0 <vTaskMissedYield+0x14>)
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	601a      	str	r2, [r3, #0]
}
 800f5e6:	bf00      	nop
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr
 800f5f0:	20000548 	.word	0x20000548

0800f5f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5fa:	4b0c      	ldr	r3, [pc, #48]	; (800f62c <prvResetNextTaskUnblockTime+0x38>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d104      	bne.n	800f60e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f604:	4b0a      	ldr	r3, [pc, #40]	; (800f630 <prvResetNextTaskUnblockTime+0x3c>)
 800f606:	f04f 32ff 	mov.w	r2, #4294967295
 800f60a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f60c:	e008      	b.n	800f620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f60e:	4b07      	ldr	r3, [pc, #28]	; (800f62c <prvResetNextTaskUnblockTime+0x38>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	4a04      	ldr	r2, [pc, #16]	; (800f630 <prvResetNextTaskUnblockTime+0x3c>)
 800f61e:	6013      	str	r3, [r2, #0]
}
 800f620:	bf00      	nop
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr
 800f62c:	20000504 	.word	0x20000504
 800f630:	20000550 	.word	0x20000550

0800f634 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f63a:	4b0b      	ldr	r3, [pc, #44]	; (800f668 <xTaskGetSchedulerState+0x34>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d102      	bne.n	800f648 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f642:	2301      	movs	r3, #1
 800f644:	607b      	str	r3, [r7, #4]
 800f646:	e008      	b.n	800f65a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f648:	4b08      	ldr	r3, [pc, #32]	; (800f66c <xTaskGetSchedulerState+0x38>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d102      	bne.n	800f656 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f650:	2302      	movs	r3, #2
 800f652:	607b      	str	r3, [r7, #4]
 800f654:	e001      	b.n	800f65a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f656:	2300      	movs	r3, #0
 800f658:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f65a:	687b      	ldr	r3, [r7, #4]
	}
 800f65c:	4618      	mov	r0, r3
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr
 800f668:	20000540 	.word	0x20000540
 800f66c:	20000554 	.word	0x20000554

0800f670 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f67c:	2300      	movs	r3, #0
 800f67e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d070      	beq.n	800f768 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f686:	4b3b      	ldr	r3, [pc, #236]	; (800f774 <xTaskPriorityDisinherit+0x104>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	693a      	ldr	r2, [r7, #16]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d00b      	beq.n	800f6a8 <xTaskPriorityDisinherit+0x38>
 800f690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f694:	b672      	cpsid	i
 800f696:	f383 8811 	msr	BASEPRI, r3
 800f69a:	f3bf 8f6f 	isb	sy
 800f69e:	f3bf 8f4f 	dsb	sy
 800f6a2:	b662      	cpsie	i
 800f6a4:	60fb      	str	r3, [r7, #12]
 800f6a6:	e7fe      	b.n	800f6a6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d10b      	bne.n	800f6c8 <xTaskPriorityDisinherit+0x58>
 800f6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b4:	b672      	cpsid	i
 800f6b6:	f383 8811 	msr	BASEPRI, r3
 800f6ba:	f3bf 8f6f 	isb	sy
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	b662      	cpsie	i
 800f6c4:	60bb      	str	r3, [r7, #8]
 800f6c6:	e7fe      	b.n	800f6c6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6cc:	1e5a      	subs	r2, r3, #1
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d044      	beq.n	800f768 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d140      	bne.n	800f768 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7ff f9ed 	bl	800eaca <uxListRemove>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d115      	bne.n	800f722 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6fa:	491f      	ldr	r1, [pc, #124]	; (800f778 <xTaskPriorityDisinherit+0x108>)
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	009b      	lsls	r3, r3, #2
 800f700:	4413      	add	r3, r2
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	440b      	add	r3, r1
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d10a      	bne.n	800f722 <xTaskPriorityDisinherit+0xb2>
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f710:	2201      	movs	r2, #1
 800f712:	fa02 f303 	lsl.w	r3, r2, r3
 800f716:	43da      	mvns	r2, r3
 800f718:	4b18      	ldr	r3, [pc, #96]	; (800f77c <xTaskPriorityDisinherit+0x10c>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4013      	ands	r3, r2
 800f71e:	4a17      	ldr	r2, [pc, #92]	; (800f77c <xTaskPriorityDisinherit+0x10c>)
 800f720:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72e:	f1c3 0207 	rsb	r2, r3, #7
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73a:	2201      	movs	r2, #1
 800f73c:	409a      	lsls	r2, r3
 800f73e:	4b0f      	ldr	r3, [pc, #60]	; (800f77c <xTaskPriorityDisinherit+0x10c>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4313      	orrs	r3, r2
 800f744:	4a0d      	ldr	r2, [pc, #52]	; (800f77c <xTaskPriorityDisinherit+0x10c>)
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f74c:	4613      	mov	r3, r2
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	4413      	add	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4a08      	ldr	r2, [pc, #32]	; (800f778 <xTaskPriorityDisinherit+0x108>)
 800f756:	441a      	add	r2, r3
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	3304      	adds	r3, #4
 800f75c:	4619      	mov	r1, r3
 800f75e:	4610      	mov	r0, r2
 800f760:	f7ff f956 	bl	800ea10 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f764:	2301      	movs	r3, #1
 800f766:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f768:	697b      	ldr	r3, [r7, #20]
	}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3718      	adds	r7, #24
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	20000474 	.word	0x20000474
 800f778:	20000478 	.word	0x20000478
 800f77c:	2000053c 	.word	0x2000053c

0800f780 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f78a:	4b29      	ldr	r3, [pc, #164]	; (800f830 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f790:	4b28      	ldr	r3, [pc, #160]	; (800f834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	3304      	adds	r3, #4
 800f796:	4618      	mov	r0, r3
 800f798:	f7ff f997 	bl	800eaca <uxListRemove>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10b      	bne.n	800f7ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f7a2:	4b24      	ldr	r3, [pc, #144]	; (800f834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800f7ae:	43da      	mvns	r2, r3
 800f7b0:	4b21      	ldr	r3, [pc, #132]	; (800f838 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4013      	ands	r3, r2
 800f7b6:	4a20      	ldr	r2, [pc, #128]	; (800f838 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c0:	d10a      	bne.n	800f7d8 <prvAddCurrentTaskToDelayedList+0x58>
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d007      	beq.n	800f7d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7c8:	4b1a      	ldr	r3, [pc, #104]	; (800f834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	3304      	adds	r3, #4
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	481a      	ldr	r0, [pc, #104]	; (800f83c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f7d2:	f7ff f91d 	bl	800ea10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f7d6:	e026      	b.n	800f826 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4413      	add	r3, r2
 800f7de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f7e0:	4b14      	ldr	r3, [pc, #80]	; (800f834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	68ba      	ldr	r2, [r7, #8]
 800f7e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d209      	bcs.n	800f804 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7f0:	4b13      	ldr	r3, [pc, #76]	; (800f840 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	4b0f      	ldr	r3, [pc, #60]	; (800f834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	4610      	mov	r0, r2
 800f7fe:	f7ff f92b 	bl	800ea58 <vListInsert>
}
 800f802:	e010      	b.n	800f826 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f804:	4b0f      	ldr	r3, [pc, #60]	; (800f844 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	4b0a      	ldr	r3, [pc, #40]	; (800f834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	3304      	adds	r3, #4
 800f80e:	4619      	mov	r1, r3
 800f810:	4610      	mov	r0, r2
 800f812:	f7ff f921 	bl	800ea58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f816:	4b0c      	ldr	r3, [pc, #48]	; (800f848 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	68ba      	ldr	r2, [r7, #8]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d202      	bcs.n	800f826 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f820:	4a09      	ldr	r2, [pc, #36]	; (800f848 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	6013      	str	r3, [r2, #0]
}
 800f826:	bf00      	nop
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	20000538 	.word	0x20000538
 800f834:	20000474 	.word	0x20000474
 800f838:	2000053c 	.word	0x2000053c
 800f83c:	20000520 	.word	0x20000520
 800f840:	20000508 	.word	0x20000508
 800f844:	20000504 	.word	0x20000504
 800f848:	20000550 	.word	0x20000550
 800f84c:	00000000 	.word	0x00000000

0800f850 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f850:	4b07      	ldr	r3, [pc, #28]	; (800f870 <pxCurrentTCBConst2>)
 800f852:	6819      	ldr	r1, [r3, #0]
 800f854:	6808      	ldr	r0, [r1, #0]
 800f856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f85a:	f380 8809 	msr	PSP, r0
 800f85e:	f3bf 8f6f 	isb	sy
 800f862:	f04f 0000 	mov.w	r0, #0
 800f866:	f380 8811 	msr	BASEPRI, r0
 800f86a:	4770      	bx	lr
 800f86c:	f3af 8000 	nop.w

0800f870 <pxCurrentTCBConst2>:
 800f870:	20000474 	.word	0x20000474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f874:	bf00      	nop
 800f876:	bf00      	nop

0800f878 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f878:	b480      	push	{r7}
 800f87a:	b083      	sub	sp, #12
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f882:	b672      	cpsid	i
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	b662      	cpsie	i
 800f892:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f894:	4b0f      	ldr	r3, [pc, #60]	; (800f8d4 <vPortEnterCritical+0x5c>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	3301      	adds	r3, #1
 800f89a:	4a0e      	ldr	r2, [pc, #56]	; (800f8d4 <vPortEnterCritical+0x5c>)
 800f89c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f89e:	4b0d      	ldr	r3, [pc, #52]	; (800f8d4 <vPortEnterCritical+0x5c>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d110      	bne.n	800f8c8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f8a6:	4b0c      	ldr	r3, [pc, #48]	; (800f8d8 <vPortEnterCritical+0x60>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00b      	beq.n	800f8c8 <vPortEnterCritical+0x50>
 800f8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b4:	b672      	cpsid	i
 800f8b6:	f383 8811 	msr	BASEPRI, r3
 800f8ba:	f3bf 8f6f 	isb	sy
 800f8be:	f3bf 8f4f 	dsb	sy
 800f8c2:	b662      	cpsie	i
 800f8c4:	603b      	str	r3, [r7, #0]
 800f8c6:	e7fe      	b.n	800f8c6 <vPortEnterCritical+0x4e>
	}
}
 800f8c8:	bf00      	nop
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr
 800f8d4:	2000005c 	.word	0x2000005c
 800f8d8:	e000ed04 	.word	0xe000ed04

0800f8dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f8e2:	4b12      	ldr	r3, [pc, #72]	; (800f92c <vPortExitCritical+0x50>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d10b      	bne.n	800f902 <vPortExitCritical+0x26>
 800f8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ee:	b672      	cpsid	i
 800f8f0:	f383 8811 	msr	BASEPRI, r3
 800f8f4:	f3bf 8f6f 	isb	sy
 800f8f8:	f3bf 8f4f 	dsb	sy
 800f8fc:	b662      	cpsie	i
 800f8fe:	607b      	str	r3, [r7, #4]
 800f900:	e7fe      	b.n	800f900 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800f902:	4b0a      	ldr	r3, [pc, #40]	; (800f92c <vPortExitCritical+0x50>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	3b01      	subs	r3, #1
 800f908:	4a08      	ldr	r2, [pc, #32]	; (800f92c <vPortExitCritical+0x50>)
 800f90a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f90c:	4b07      	ldr	r3, [pc, #28]	; (800f92c <vPortExitCritical+0x50>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d104      	bne.n	800f91e <vPortExitCritical+0x42>
 800f914:	2300      	movs	r3, #0
 800f916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f91e:	bf00      	nop
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop
 800f92c:	2000005c 	.word	0x2000005c

0800f930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f930:	f3ef 8009 	mrs	r0, PSP
 800f934:	f3bf 8f6f 	isb	sy
 800f938:	4b15      	ldr	r3, [pc, #84]	; (800f990 <pxCurrentTCBConst>)
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	f01e 0f10 	tst.w	lr, #16
 800f940:	bf08      	it	eq
 800f942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94a:	6010      	str	r0, [r2, #0]
 800f94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f950:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f954:	b672      	cpsid	i
 800f956:	f380 8811 	msr	BASEPRI, r0
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	f3bf 8f6f 	isb	sy
 800f962:	b662      	cpsie	i
 800f964:	f7ff fcb4 	bl	800f2d0 <vTaskSwitchContext>
 800f968:	f04f 0000 	mov.w	r0, #0
 800f96c:	f380 8811 	msr	BASEPRI, r0
 800f970:	bc09      	pop	{r0, r3}
 800f972:	6819      	ldr	r1, [r3, #0]
 800f974:	6808      	ldr	r0, [r1, #0]
 800f976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97a:	f01e 0f10 	tst.w	lr, #16
 800f97e:	bf08      	it	eq
 800f980:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f984:	f380 8809 	msr	PSP, r0
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop

0800f990 <pxCurrentTCBConst>:
 800f990:	20000474 	.word	0x20000474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f994:	bf00      	nop
 800f996:	bf00      	nop

0800f998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
	__asm volatile
 800f99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a2:	b672      	cpsid	i
 800f9a4:	f383 8811 	msr	BASEPRI, r3
 800f9a8:	f3bf 8f6f 	isb	sy
 800f9ac:	f3bf 8f4f 	dsb	sy
 800f9b0:	b662      	cpsie	i
 800f9b2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f9b4:	f7ff fbd2 	bl	800f15c <xTaskIncrementTick>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d003      	beq.n	800f9c6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f9be:	4b06      	ldr	r3, [pc, #24]	; (800f9d8 <SysTick_Handler+0x40>)
 800f9c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9c4:	601a      	str	r2, [r3, #0]
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f9d0:	bf00      	nop
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	e000ed04 	.word	0xe000ed04

0800f9dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f9dc:	b480      	push	{r7}
 800f9de:	b085      	sub	sp, #20
 800f9e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f9e2:	f3ef 8305 	mrs	r3, IPSR
 800f9e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2b0f      	cmp	r3, #15
 800f9ec:	d915      	bls.n	800fa1a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f9ee:	4a18      	ldr	r2, [pc, #96]	; (800fa50 <vPortValidateInterruptPriority+0x74>)
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	4413      	add	r3, r2
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f9f8:	4b16      	ldr	r3, [pc, #88]	; (800fa54 <vPortValidateInterruptPriority+0x78>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	7afa      	ldrb	r2, [r7, #11]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d20b      	bcs.n	800fa1a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa06:	b672      	cpsid	i
 800fa08:	f383 8811 	msr	BASEPRI, r3
 800fa0c:	f3bf 8f6f 	isb	sy
 800fa10:	f3bf 8f4f 	dsb	sy
 800fa14:	b662      	cpsie	i
 800fa16:	607b      	str	r3, [r7, #4]
 800fa18:	e7fe      	b.n	800fa18 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fa1a:	4b0f      	ldr	r3, [pc, #60]	; (800fa58 <vPortValidateInterruptPriority+0x7c>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fa22:	4b0e      	ldr	r3, [pc, #56]	; (800fa5c <vPortValidateInterruptPriority+0x80>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d90b      	bls.n	800fa42 <vPortValidateInterruptPriority+0x66>
 800fa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2e:	b672      	cpsid	i
 800fa30:	f383 8811 	msr	BASEPRI, r3
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	f3bf 8f4f 	dsb	sy
 800fa3c:	b662      	cpsie	i
 800fa3e:	603b      	str	r3, [r7, #0]
 800fa40:	e7fe      	b.n	800fa40 <vPortValidateInterruptPriority+0x64>
	}
 800fa42:	bf00      	nop
 800fa44:	3714      	adds	r7, #20
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr
 800fa4e:	bf00      	nop
 800fa50:	e000e3f0 	.word	0xe000e3f0
 800fa54:	20000558 	.word	0x20000558
 800fa58:	e000ed0c 	.word	0xe000ed0c
 800fa5c:	2000055c 	.word	0x2000055c

0800fa60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fe fea0 	bl	800e7b4 <USBH_LL_IncTimer>
}
 800fa74:	bf00      	nop
 800fa76:	3708      	adds	r7, #8
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fe fee4 	bl	800e858 <USBH_LL_Connect>
}
 800fa90:	bf00      	nop
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fe fef9 	bl	800e89e <USBH_LL_Disconnect>
}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	460b      	mov	r3, r1
 800fabe:	70fb      	strb	r3, [r7, #3]
 800fac0:	4613      	mov	r3, r2
 800fac2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800faca:	4618      	mov	r0, r3
 800facc:	f7fe ff19 	bl	800e902 <USBH_LL_NotifyURBChange>
#endif
}
 800fad0:	bf00      	nop
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fe fe8e 	bl	800e808 <USBH_LL_PortEnabled>
}
 800faec:	bf00      	nop
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fe fe9a 	bl	800e83c <USBH_LL_PortDisabled>
}
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7f8 f835 	bl	8007b96 <HAL_HCD_Stop>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb30:	7bfb      	ldrb	r3, [r7, #15]
 800fb32:	4618      	mov	r0, r3
 800fb34:	f000 f808 	bl	800fb48 <USBH_Get_USB_Status>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
	...

0800fb48 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	4603      	mov	r3, r0
 800fb50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb52:	2300      	movs	r3, #0
 800fb54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fb56:	79fb      	ldrb	r3, [r7, #7]
 800fb58:	2b03      	cmp	r3, #3
 800fb5a:	d817      	bhi.n	800fb8c <USBH_Get_USB_Status+0x44>
 800fb5c:	a201      	add	r2, pc, #4	; (adr r2, 800fb64 <USBH_Get_USB_Status+0x1c>)
 800fb5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb62:	bf00      	nop
 800fb64:	0800fb75 	.word	0x0800fb75
 800fb68:	0800fb7b 	.word	0x0800fb7b
 800fb6c:	0800fb81 	.word	0x0800fb81
 800fb70:	0800fb87 	.word	0x0800fb87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fb74:	2300      	movs	r3, #0
 800fb76:	73fb      	strb	r3, [r7, #15]
    break;
 800fb78:	e00b      	b.n	800fb92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fb7a:	2302      	movs	r3, #2
 800fb7c:	73fb      	strb	r3, [r7, #15]
    break;
 800fb7e:	e008      	b.n	800fb92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fb80:	2301      	movs	r3, #1
 800fb82:	73fb      	strb	r3, [r7, #15]
    break;
 800fb84:	e005      	b.n	800fb92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fb86:	2302      	movs	r3, #2
 800fb88:	73fb      	strb	r3, [r7, #15]
    break;
 800fb8a:	e002      	b.n	800fb92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fb8c:	2302      	movs	r3, #2
 800fb8e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb90:	bf00      	nop
  }
  return usb_status;
 800fb92:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3714      	adds	r7, #20
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr

0800fba0 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 800fba4:	f000 f806 	bl	800fbb4 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800fba8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbac:	f7f5 f9da 	bl	8004f64 <BSP_LCD_Clear>
}
 800fbb0:	bf00      	nop
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800fbb8:	4b12      	ldr	r3, [pc, #72]	; (800fc04 <LCD_LOG_DeInit+0x50>)
 800fbba:	4a13      	ldr	r2, [pc, #76]	; (800fc08 <LCD_LOG_DeInit+0x54>)
 800fbbc:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 800fbbe:	4b13      	ldr	r3, [pc, #76]	; (800fc0c <LCD_LOG_DeInit+0x58>)
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 800fbc4:	4b12      	ldr	r3, [pc, #72]	; (800fc10 <LCD_LOG_DeInit+0x5c>)
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 800fbca:	4b12      	ldr	r3, [pc, #72]	; (800fc14 <LCD_LOG_DeInit+0x60>)
 800fbcc:	2200      	movs	r2, #0
 800fbce:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 800fbd0:	4b11      	ldr	r3, [pc, #68]	; (800fc18 <LCD_LOG_DeInit+0x64>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 800fbd6:	4b11      	ldr	r3, [pc, #68]	; (800fc1c <LCD_LOG_DeInit+0x68>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800fbdc:	4b10      	ldr	r3, [pc, #64]	; (800fc20 <LCD_LOG_DeInit+0x6c>)
 800fbde:	2201      	movs	r2, #1
 800fbe0:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 800fbe2:	4b10      	ldr	r3, [pc, #64]	; (800fc24 <LCD_LOG_DeInit+0x70>)
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 800fbe8:	4b0f      	ldr	r3, [pc, #60]	; (800fc28 <LCD_LOG_DeInit+0x74>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 800fbee:	4b0f      	ldr	r3, [pc, #60]	; (800fc2c <LCD_LOG_DeInit+0x78>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 800fbf4:	4b0e      	ldr	r3, [pc, #56]	; (800fc30 <LCD_LOG_DeInit+0x7c>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	801a      	strh	r2, [r3, #0]
}
 800fbfa:	bf00      	nop
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr
 800fc04:	200065f0 	.word	0x200065f0
 800fc08:	ff000080 	.word	0xff000080
 800fc0c:	20002992 	.word	0x20002992
 800fc10:	20002998 	.word	0x20002998
 800fc14:	20002990 	.word	0x20002990
 800fc18:	2000298e 	.word	0x2000298e
 800fc1c:	2000298c 	.word	0x2000298c
 800fc20:	20002994 	.word	0x20002994
 800fc24:	2000299a 	.word	0x2000299a
 800fc28:	20002995 	.word	0x20002995
 800fc2c:	20002996 	.word	0x20002996
 800fc30:	200065f4 	.word	0x200065f4

0800fc34 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800fc3c:	4817      	ldr	r0, [pc, #92]	; (800fc9c <LCD_LOG_SetHeader+0x68>)
 800fc3e:	f7f5 f961 	bl	8004f04 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800fc42:	4817      	ldr	r0, [pc, #92]	; (800fca0 <LCD_LOG_SetHeader+0x6c>)
 800fc44:	f7f5 f92c 	bl	8004ea0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 800fc48:	f7f5 f8a2 	bl	8004d90 <BSP_LCD_GetXSize>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	4b12      	ldr	r3, [pc, #72]	; (800fc9c <LCD_LOG_SetHeader+0x68>)
 800fc52:	88db      	ldrh	r3, [r3, #6]
 800fc54:	4619      	mov	r1, r3
 800fc56:	0049      	lsls	r1, r1, #1
 800fc58:	440b      	add	r3, r1
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	2000      	movs	r0, #0
 800fc60:	f7f5 fb10 	bl	8005284 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800fc64:	f04f 30ff 	mov.w	r0, #4294967295
 800fc68:	f7f5 f91a 	bl	8004ea0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800fc6c:	480c      	ldr	r0, [pc, #48]	; (800fca0 <LCD_LOG_SetHeader+0x6c>)
 800fc6e:	f7f5 f92f 	bl	8004ed0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 800fc72:	4b0a      	ldr	r3, [pc, #40]	; (800fc9c <LCD_LOG_SetHeader+0x68>)
 800fc74:	88d9      	ldrh	r1, [r3, #6]
 800fc76:	2301      	movs	r3, #1
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	2000      	movs	r0, #0
 800fc7c:	f7f5 f9de 	bl	800503c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 800fc80:	f04f 30ff 	mov.w	r0, #4294967295
 800fc84:	f7f5 f924 	bl	8004ed0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800fc88:	4806      	ldr	r0, [pc, #24]	; (800fca4 <LCD_LOG_SetHeader+0x70>)
 800fc8a:	f7f5 f909 	bl	8004ea0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800fc8e:	4806      	ldr	r0, [pc, #24]	; (800fca8 <LCD_LOG_SetHeader+0x74>)
 800fc90:	f7f5 f938 	bl	8004f04 <BSP_LCD_SetFont>
}
 800fc94:	bf00      	nop
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	20000040 	.word	0x20000040
 800fca0:	ff0000ff 	.word	0xff0000ff
 800fca4:	ff000080 	.word	0xff000080
 800fca8:	20000048 	.word	0x20000048

0800fcac <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 800fcac:	b590      	push	{r4, r7, lr}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 800fcb4:	481e      	ldr	r0, [pc, #120]	; (800fd30 <LCD_LOG_SetFooter+0x84>)
 800fcb6:	f7f5 f925 	bl	8004f04 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800fcba:	481e      	ldr	r0, [pc, #120]	; (800fd34 <LCD_LOG_SetFooter+0x88>)
 800fcbc:	f7f5 f8f0 	bl	8004ea0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 800fcc0:	f7f5 f87a 	bl	8004db8 <BSP_LCD_GetYSize>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	4b19      	ldr	r3, [pc, #100]	; (800fd30 <LCD_LOG_SetFooter+0x84>)
 800fcca:	88db      	ldrh	r3, [r3, #6]
 800fccc:	1ad3      	subs	r3, r2, r3
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	3b04      	subs	r3, #4
 800fcd2:	b29c      	uxth	r4, r3
 800fcd4:	f7f5 f85c 	bl	8004d90 <BSP_LCD_GetXSize>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	b29a      	uxth	r2, r3
 800fcdc:	4b14      	ldr	r3, [pc, #80]	; (800fd30 <LCD_LOG_SetFooter+0x84>)
 800fcde:	88db      	ldrh	r3, [r3, #6]
 800fce0:	3304      	adds	r3, #4
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	4621      	mov	r1, r4
 800fce6:	2000      	movs	r0, #0
 800fce8:	f7f5 facc 	bl	8005284 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800fcec:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf0:	f7f5 f8d6 	bl	8004ea0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800fcf4:	480f      	ldr	r0, [pc, #60]	; (800fd34 <LCD_LOG_SetFooter+0x88>)
 800fcf6:	f7f5 f8eb 	bl	8004ed0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 800fcfa:	f7f5 f85d 	bl	8004db8 <BSP_LCD_GetYSize>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	b29a      	uxth	r2, r3
 800fd02:	4b0b      	ldr	r3, [pc, #44]	; (800fd30 <LCD_LOG_SetFooter+0x84>)
 800fd04:	88db      	ldrh	r3, [r3, #6]
 800fd06:	1ad3      	subs	r3, r2, r3
 800fd08:	b299      	uxth	r1, r3
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	2000      	movs	r0, #0
 800fd10:	f7f5 f994 	bl	800503c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 800fd14:	f04f 30ff 	mov.w	r0, #4294967295
 800fd18:	f7f5 f8da 	bl	8004ed0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800fd1c:	4806      	ldr	r0, [pc, #24]	; (800fd38 <LCD_LOG_SetFooter+0x8c>)
 800fd1e:	f7f5 f8bf 	bl	8004ea0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800fd22:	4803      	ldr	r0, [pc, #12]	; (800fd30 <LCD_LOG_SetFooter+0x84>)
 800fd24:	f7f5 f8ee 	bl	8004f04 <BSP_LCD_SetFont>
}
 800fd28:	bf00      	nop
 800fd2a:	370c      	adds	r7, #12
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd90      	pop	{r4, r7, pc}
 800fd30:	20000048 	.word	0x20000048
 800fd34:	ff0000ff 	.word	0xff0000ff
 800fd38:	ff000080 	.word	0xff000080

0800fd3c <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 800fd3c:	b590      	push	{r4, r7, lr}
 800fd3e:	b085      	sub	sp, #20
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 800fd44:	f7f5 f8f8 	bl	8004f38 <BSP_LCD_GetFont>
 800fd48:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 800fd4a:	4b60      	ldr	r3, [pc, #384]	; (800fecc <__io_putchar+0x190>)
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	f040 80b6 	bne.w	800fec0 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 800fd54:	4b5e      	ldr	r3, [pc, #376]	; (800fed0 <__io_putchar+0x194>)
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d110      	bne.n	800fd7e <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800fd5c:	4b5d      	ldr	r3, [pc, #372]	; (800fed4 <__io_putchar+0x198>)
 800fd5e:	881a      	ldrh	r2, [r3, #0]
 800fd60:	4b5d      	ldr	r3, [pc, #372]	; (800fed8 <__io_putchar+0x19c>)
 800fd62:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800fd64:	4b5d      	ldr	r3, [pc, #372]	; (800fedc <__io_putchar+0x1a0>)
 800fd66:	881a      	ldrh	r2, [r3, #0]
 800fd68:	4b5d      	ldr	r3, [pc, #372]	; (800fee0 <__io_putchar+0x1a4>)
 800fd6a:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 800fd6c:	4b58      	ldr	r3, [pc, #352]	; (800fed0 <__io_putchar+0x194>)
 800fd6e:	2200      	movs	r2, #0
 800fd70:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 800fd72:	4b5c      	ldr	r3, [pc, #368]	; (800fee4 <__io_putchar+0x1a8>)
 800fd74:	2200      	movs	r2, #0
 800fd76:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 800fd78:	4b5b      	ldr	r3, [pc, #364]	; (800fee8 <__io_putchar+0x1ac>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 800fd7e:	4b5b      	ldr	r3, [pc, #364]	; (800feec <__io_putchar+0x1b0>)
 800fd80:	881b      	ldrh	r3, [r3, #0]
 800fd82:	461c      	mov	r4, r3
 800fd84:	f7f5 f804 	bl	8004d90 <BSP_LCD_GetXSize>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	889b      	ldrh	r3, [r3, #4]
 800fd8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd92:	429c      	cmp	r4, r3
 800fd94:	d218      	bcs.n	800fdc8 <__io_putchar+0x8c>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2b0a      	cmp	r3, #10
 800fd9a:	d015      	beq.n	800fdc8 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800fd9c:	4b4e      	ldr	r3, [pc, #312]	; (800fed8 <__io_putchar+0x19c>)
 800fd9e:	881b      	ldrh	r3, [r3, #0]
 800fda0:	4619      	mov	r1, r3
 800fda2:	4b52      	ldr	r3, [pc, #328]	; (800feec <__io_putchar+0x1b0>)
 800fda4:	881b      	ldrh	r3, [r3, #0]
 800fda6:	1c5a      	adds	r2, r3, #1
 800fda8:	b290      	uxth	r0, r2
 800fdaa:	4a50      	ldr	r2, [pc, #320]	; (800feec <__io_putchar+0x1b0>)
 800fdac:	8010      	strh	r0, [r2, #0]
 800fdae:	461c      	mov	r4, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	b2d8      	uxtb	r0, r3
 800fdb4:	4a4e      	ldr	r2, [pc, #312]	; (800fef0 <__io_putchar+0x1b4>)
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	015b      	lsls	r3, r3, #5
 800fdba:	440b      	add	r3, r1
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	4413      	add	r3, r2
 800fdc0:	4423      	add	r3, r4
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	701a      	strb	r2, [r3, #0]
 800fdc6:	e07b      	b.n	800fec0 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800fdc8:	4b45      	ldr	r3, [pc, #276]	; (800fee0 <__io_putchar+0x1a4>)
 800fdca:	881a      	ldrh	r2, [r3, #0]
 800fdcc:	4b42      	ldr	r3, [pc, #264]	; (800fed8 <__io_putchar+0x19c>)
 800fdce:	881b      	ldrh	r3, [r3, #0]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d314      	bcc.n	800fdfe <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 800fdd4:	4b47      	ldr	r3, [pc, #284]	; (800fef4 <__io_putchar+0x1b8>)
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d10d      	bne.n	800fdf8 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 800fddc:	4b40      	ldr	r3, [pc, #256]	; (800fee0 <__io_putchar+0x1a4>)
 800fdde:	881b      	ldrh	r3, [r3, #0]
 800fde0:	3301      	adds	r3, #1
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	4b3e      	ldr	r3, [pc, #248]	; (800fee0 <__io_putchar+0x1a4>)
 800fde6:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 800fde8:	4b3d      	ldr	r3, [pc, #244]	; (800fee0 <__io_putchar+0x1a4>)
 800fdea:	881b      	ldrh	r3, [r3, #0]
 800fdec:	2b75      	cmp	r3, #117	; 0x75
 800fdee:	d106      	bne.n	800fdfe <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 800fdf0:	4b3b      	ldr	r3, [pc, #236]	; (800fee0 <__io_putchar+0x1a4>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	801a      	strh	r2, [r3, #0]
 800fdf6:	e002      	b.n	800fdfe <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 800fdf8:	4b3e      	ldr	r3, [pc, #248]	; (800fef4 <__io_putchar+0x1b8>)
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800fdfe:	4b3b      	ldr	r3, [pc, #236]	; (800feec <__io_putchar+0x1b0>)
 800fe00:	881b      	ldrh	r3, [r3, #0]
 800fe02:	60fb      	str	r3, [r7, #12]
 800fe04:	e015      	b.n	800fe32 <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800fe06:	4b34      	ldr	r3, [pc, #208]	; (800fed8 <__io_putchar+0x19c>)
 800fe08:	881b      	ldrh	r3, [r3, #0]
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	4b37      	ldr	r3, [pc, #220]	; (800feec <__io_putchar+0x1b0>)
 800fe0e:	881b      	ldrh	r3, [r3, #0]
 800fe10:	1c5a      	adds	r2, r3, #1
 800fe12:	b290      	uxth	r0, r2
 800fe14:	4a35      	ldr	r2, [pc, #212]	; (800feec <__io_putchar+0x1b0>)
 800fe16:	8010      	strh	r0, [r2, #0]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	4a35      	ldr	r2, [pc, #212]	; (800fef0 <__io_putchar+0x1b4>)
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	015b      	lsls	r3, r3, #5
 800fe20:	440b      	add	r3, r1
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	4413      	add	r3, r2
 800fe26:	4403      	add	r3, r0
 800fe28:	2220      	movs	r2, #32
 800fe2a:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	60fb      	str	r3, [r7, #12]
 800fe32:	f7f4 ffad 	bl	8004d90 <BSP_LCD_GetXSize>
 800fe36:	4602      	mov	r2, r0
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	889b      	ldrh	r3, [r3, #4]
 800fe3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d3df      	bcc.n	800fe06 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800fe46:	4b24      	ldr	r3, [pc, #144]	; (800fed8 <__io_putchar+0x19c>)
 800fe48:	881b      	ldrh	r3, [r3, #0]
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	4b2a      	ldr	r3, [pc, #168]	; (800fef8 <__io_putchar+0x1bc>)
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	4927      	ldr	r1, [pc, #156]	; (800fef0 <__io_putchar+0x1b4>)
 800fe52:	4603      	mov	r3, r0
 800fe54:	015b      	lsls	r3, r3, #5
 800fe56:	4403      	add	r3, r0
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	440b      	add	r3, r1
 800fe5c:	3380      	adds	r3, #128	; 0x80
 800fe5e:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 800fe60:	4b22      	ldr	r3, [pc, #136]	; (800feec <__io_putchar+0x1b0>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 800fe66:	f000 f849 	bl	800fefc <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 800fe6a:	4b1b      	ldr	r3, [pc, #108]	; (800fed8 <__io_putchar+0x19c>)
 800fe6c:	881b      	ldrh	r3, [r3, #0]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	4b19      	ldr	r3, [pc, #100]	; (800fed8 <__io_putchar+0x19c>)
 800fe74:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 800fe76:	4b18      	ldr	r3, [pc, #96]	; (800fed8 <__io_putchar+0x19c>)
 800fe78:	881b      	ldrh	r3, [r3, #0]
 800fe7a:	2b75      	cmp	r3, #117	; 0x75
 800fe7c:	d108      	bne.n	800fe90 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 800fe7e:	4b16      	ldr	r3, [pc, #88]	; (800fed8 <__io_putchar+0x19c>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 800fe84:	4b16      	ldr	r3, [pc, #88]	; (800fee0 <__io_putchar+0x1a4>)
 800fe86:	2201      	movs	r2, #1
 800fe88:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800fe8a:	4b1a      	ldr	r3, [pc, #104]	; (800fef4 <__io_putchar+0x1b8>)
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b0a      	cmp	r3, #10
 800fe94:	d014      	beq.n	800fec0 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800fe96:	4b10      	ldr	r3, [pc, #64]	; (800fed8 <__io_putchar+0x19c>)
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	4b13      	ldr	r3, [pc, #76]	; (800feec <__io_putchar+0x1b0>)
 800fe9e:	881b      	ldrh	r3, [r3, #0]
 800fea0:	1c5a      	adds	r2, r3, #1
 800fea2:	b290      	uxth	r0, r2
 800fea4:	4a11      	ldr	r2, [pc, #68]	; (800feec <__io_putchar+0x1b0>)
 800fea6:	8010      	strh	r0, [r2, #0]
 800fea8:	461c      	mov	r4, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	b2d8      	uxtb	r0, r3
 800feae:	4a10      	ldr	r2, [pc, #64]	; (800fef0 <__io_putchar+0x1b4>)
 800feb0:	460b      	mov	r3, r1
 800feb2:	015b      	lsls	r3, r3, #5
 800feb4:	440b      	add	r3, r1
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	4413      	add	r3, r2
 800feba:	4423      	add	r3, r4
 800febc:	4602      	mov	r2, r0
 800febe:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 800fec0:	687b      	ldr	r3, [r7, #4]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3714      	adds	r7, #20
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd90      	pop	{r4, r7, pc}
 800feca:	bf00      	nop
 800fecc:	20002995 	.word	0x20002995
 800fed0:	2000299a 	.word	0x2000299a
 800fed4:	2000298c 	.word	0x2000298c
 800fed8:	20002990 	.word	0x20002990
 800fedc:	2000298e 	.word	0x2000298e
 800fee0:	20002998 	.word	0x20002998
 800fee4:	20002996 	.word	0x20002996
 800fee8:	200065f4 	.word	0x200065f4
 800feec:	20002992 	.word	0x20002992
 800fef0:	2000299c 	.word	0x2000299c
 800fef4:	20002994 	.word	0x20002994
 800fef8:	200065f0 	.word	0x200065f0

0800fefc <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 800ff02:	2300      	movs	r3, #0
 800ff04:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 800ff06:	2300      	movs	r3, #0
 800ff08:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	807b      	strh	r3, [r7, #2]
 800ff0e:	2300      	movs	r3, #0
 800ff10:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800ff12:	4b39      	ldr	r3, [pc, #228]	; (800fff8 <LCD_LOG_UpdateDisplay+0xfc>)
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	2b0f      	cmp	r3, #15
 800ff18:	d826      	bhi.n	800ff68 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 800ff1a:	4b37      	ldr	r3, [pc, #220]	; (800fff8 <LCD_LOG_UpdateDisplay+0xfc>)
 800ff1c:	881a      	ldrh	r2, [r3, #0]
 800ff1e:	4b37      	ldr	r3, [pc, #220]	; (800fffc <LCD_LOG_UpdateDisplay+0x100>)
 800ff20:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d320      	bcc.n	800ff68 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800ff26:	79fb      	ldrb	r3, [r7, #7]
 800ff28:	4a33      	ldr	r2, [pc, #204]	; (800fff8 <LCD_LOG_UpdateDisplay+0xfc>)
 800ff2a:	8812      	ldrh	r2, [r2, #0]
 800ff2c:	441a      	add	r2, r3
 800ff2e:	4934      	ldr	r1, [pc, #208]	; (8010000 <LCD_LOG_UpdateDisplay+0x104>)
 800ff30:	4613      	mov	r3, r2
 800ff32:	015b      	lsls	r3, r3, #5
 800ff34:	4413      	add	r3, r2
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	440b      	add	r3, r1
 800ff3a:	3380      	adds	r3, #128	; 0x80
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7f4 ffae 	bl	8004ea0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800ff44:	4b2c      	ldr	r3, [pc, #176]	; (800fff8 <LCD_LOG_UpdateDisplay+0xfc>)
 800ff46:	881b      	ldrh	r3, [r3, #0]
 800ff48:	3304      	adds	r3, #4
 800ff4a:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 800ff4c:	79fb      	ldrb	r3, [r7, #7]
 800ff4e:	4a2a      	ldr	r2, [pc, #168]	; (800fff8 <LCD_LOG_UpdateDisplay+0xfc>)
 800ff50:	8812      	ldrh	r2, [r2, #0]
 800ff52:	441a      	add	r2, r3
 800ff54:	4613      	mov	r3, r2
 800ff56:	015b      	lsls	r3, r3, #5
 800ff58:	4413      	add	r3, r2
 800ff5a:	009b      	lsls	r3, r3, #2
 800ff5c:	4a28      	ldr	r2, [pc, #160]	; (8010000 <LCD_LOG_UpdateDisplay+0x104>)
 800ff5e:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800ff60:	4619      	mov	r1, r3
 800ff62:	f7f5 f92f 	bl	80051c4 <BSP_LCD_DisplayStringAtLine>
 800ff66:	e043      	b.n	800fff0 <LCD_LOG_UpdateDisplay+0xf4>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800ff68:	4b23      	ldr	r3, [pc, #140]	; (800fff8 <LCD_LOG_UpdateDisplay+0xfc>)
 800ff6a:	881a      	ldrh	r2, [r3, #0]
 800ff6c:	4b23      	ldr	r3, [pc, #140]	; (800fffc <LCD_LOG_UpdateDisplay+0x100>)
 800ff6e:	881b      	ldrh	r3, [r3, #0]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d204      	bcs.n	800ff7e <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 800ff74:	4b20      	ldr	r3, [pc, #128]	; (800fff8 <LCD_LOG_UpdateDisplay+0xfc>)
 800ff76:	881b      	ldrh	r3, [r3, #0]
 800ff78:	3375      	adds	r3, #117	; 0x75
 800ff7a:	80bb      	strh	r3, [r7, #4]
 800ff7c:	e002      	b.n	800ff84 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 800ff7e:	4b1e      	ldr	r3, [pc, #120]	; (800fff8 <LCD_LOG_UpdateDisplay+0xfc>)
 800ff80:	881b      	ldrh	r3, [r3, #0]
 800ff82:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 800ff84:	88bb      	ldrh	r3, [r7, #4]
 800ff86:	3b10      	subs	r3, #16
 800ff88:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	71fb      	strb	r3, [r7, #7]
 800ff8e:	e02c      	b.n	800ffea <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800ff90:	79fa      	ldrb	r2, [r7, #7]
 800ff92:	887b      	ldrh	r3, [r7, #2]
 800ff94:	4413      	add	r3, r2
 800ff96:	4a1b      	ldr	r2, [pc, #108]	; (8010004 <LCD_LOG_UpdateDisplay+0x108>)
 800ff98:	fb82 1203 	smull	r1, r2, r2, r3
 800ff9c:	441a      	add	r2, r3
 800ff9e:	1191      	asrs	r1, r2, #6
 800ffa0:	17da      	asrs	r2, r3, #31
 800ffa2:	1a8a      	subs	r2, r1, r2
 800ffa4:	2175      	movs	r1, #117	; 0x75
 800ffa6:	fb01 f202 	mul.w	r2, r1, r2
 800ffaa:	1a9a      	subs	r2, r3, r2
 800ffac:	4613      	mov	r3, r2
 800ffae:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800ffb0:	883a      	ldrh	r2, [r7, #0]
 800ffb2:	4913      	ldr	r1, [pc, #76]	; (8010000 <LCD_LOG_UpdateDisplay+0x104>)
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	015b      	lsls	r3, r3, #5
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	440b      	add	r3, r1
 800ffbe:	3380      	adds	r3, #128	; 0x80
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7f4 ff6c 	bl	8004ea0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800ffc8:	79fb      	ldrb	r3, [r7, #7]
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	3304      	adds	r3, #4
 800ffce:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 800ffd0:	883a      	ldrh	r2, [r7, #0]
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	015b      	lsls	r3, r3, #5
 800ffd6:	4413      	add	r3, r2
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4a09      	ldr	r2, [pc, #36]	; (8010000 <LCD_LOG_UpdateDisplay+0x104>)
 800ffdc:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800ffde:	4619      	mov	r1, r3
 800ffe0:	f7f5 f8f0 	bl	80051c4 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800ffe4:	79fb      	ldrb	r3, [r7, #7]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	71fb      	strb	r3, [r7, #7]
 800ffea:	79fb      	ldrb	r3, [r7, #7]
 800ffec:	2b10      	cmp	r3, #16
 800ffee:	d9cf      	bls.n	800ff90 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 800fff0:	bf00      	nop
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	20002990 	.word	0x20002990
 800fffc:	20002998 	.word	0x20002998
 8010000:	2000299c 	.word	0x2000299c
 8010004:	8c08c08d 	.word	0x8c08c08d

08010008 <__errno>:
 8010008:	4b01      	ldr	r3, [pc, #4]	; (8010010 <__errno+0x8>)
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	20000060 	.word	0x20000060

08010014 <__libc_init_array>:
 8010014:	b570      	push	{r4, r5, r6, lr}
 8010016:	4e0d      	ldr	r6, [pc, #52]	; (801004c <__libc_init_array+0x38>)
 8010018:	4c0d      	ldr	r4, [pc, #52]	; (8010050 <__libc_init_array+0x3c>)
 801001a:	1ba4      	subs	r4, r4, r6
 801001c:	10a4      	asrs	r4, r4, #2
 801001e:	2500      	movs	r5, #0
 8010020:	42a5      	cmp	r5, r4
 8010022:	d109      	bne.n	8010038 <__libc_init_array+0x24>
 8010024:	4e0b      	ldr	r6, [pc, #44]	; (8010054 <__libc_init_array+0x40>)
 8010026:	4c0c      	ldr	r4, [pc, #48]	; (8010058 <__libc_init_array+0x44>)
 8010028:	f000 ff10 	bl	8010e4c <_init>
 801002c:	1ba4      	subs	r4, r4, r6
 801002e:	10a4      	asrs	r4, r4, #2
 8010030:	2500      	movs	r5, #0
 8010032:	42a5      	cmp	r5, r4
 8010034:	d105      	bne.n	8010042 <__libc_init_array+0x2e>
 8010036:	bd70      	pop	{r4, r5, r6, pc}
 8010038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801003c:	4798      	blx	r3
 801003e:	3501      	adds	r5, #1
 8010040:	e7ee      	b.n	8010020 <__libc_init_array+0xc>
 8010042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010046:	4798      	blx	r3
 8010048:	3501      	adds	r5, #1
 801004a:	e7f2      	b.n	8010032 <__libc_init_array+0x1e>
 801004c:	08013a7c 	.word	0x08013a7c
 8010050:	08013a7c 	.word	0x08013a7c
 8010054:	08013a7c 	.word	0x08013a7c
 8010058:	08013a80 	.word	0x08013a80

0801005c <memcpy>:
 801005c:	b510      	push	{r4, lr}
 801005e:	1e43      	subs	r3, r0, #1
 8010060:	440a      	add	r2, r1
 8010062:	4291      	cmp	r1, r2
 8010064:	d100      	bne.n	8010068 <memcpy+0xc>
 8010066:	bd10      	pop	{r4, pc}
 8010068:	f811 4b01 	ldrb.w	r4, [r1], #1
 801006c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010070:	e7f7      	b.n	8010062 <memcpy+0x6>

08010072 <memset>:
 8010072:	4402      	add	r2, r0
 8010074:	4603      	mov	r3, r0
 8010076:	4293      	cmp	r3, r2
 8010078:	d100      	bne.n	801007c <memset+0xa>
 801007a:	4770      	bx	lr
 801007c:	f803 1b01 	strb.w	r1, [r3], #1
 8010080:	e7f9      	b.n	8010076 <memset+0x4>
	...

08010084 <_free_r>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	4605      	mov	r5, r0
 8010088:	2900      	cmp	r1, #0
 801008a:	d045      	beq.n	8010118 <_free_r+0x94>
 801008c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010090:	1f0c      	subs	r4, r1, #4
 8010092:	2b00      	cmp	r3, #0
 8010094:	bfb8      	it	lt
 8010096:	18e4      	addlt	r4, r4, r3
 8010098:	f000 f98e 	bl	80103b8 <__malloc_lock>
 801009c:	4a1f      	ldr	r2, [pc, #124]	; (801011c <_free_r+0x98>)
 801009e:	6813      	ldr	r3, [r2, #0]
 80100a0:	4610      	mov	r0, r2
 80100a2:	b933      	cbnz	r3, 80100b2 <_free_r+0x2e>
 80100a4:	6063      	str	r3, [r4, #4]
 80100a6:	6014      	str	r4, [r2, #0]
 80100a8:	4628      	mov	r0, r5
 80100aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100ae:	f000 b984 	b.w	80103ba <__malloc_unlock>
 80100b2:	42a3      	cmp	r3, r4
 80100b4:	d90c      	bls.n	80100d0 <_free_r+0x4c>
 80100b6:	6821      	ldr	r1, [r4, #0]
 80100b8:	1862      	adds	r2, r4, r1
 80100ba:	4293      	cmp	r3, r2
 80100bc:	bf04      	itt	eq
 80100be:	681a      	ldreq	r2, [r3, #0]
 80100c0:	685b      	ldreq	r3, [r3, #4]
 80100c2:	6063      	str	r3, [r4, #4]
 80100c4:	bf04      	itt	eq
 80100c6:	1852      	addeq	r2, r2, r1
 80100c8:	6022      	streq	r2, [r4, #0]
 80100ca:	6004      	str	r4, [r0, #0]
 80100cc:	e7ec      	b.n	80100a8 <_free_r+0x24>
 80100ce:	4613      	mov	r3, r2
 80100d0:	685a      	ldr	r2, [r3, #4]
 80100d2:	b10a      	cbz	r2, 80100d8 <_free_r+0x54>
 80100d4:	42a2      	cmp	r2, r4
 80100d6:	d9fa      	bls.n	80100ce <_free_r+0x4a>
 80100d8:	6819      	ldr	r1, [r3, #0]
 80100da:	1858      	adds	r0, r3, r1
 80100dc:	42a0      	cmp	r0, r4
 80100de:	d10b      	bne.n	80100f8 <_free_r+0x74>
 80100e0:	6820      	ldr	r0, [r4, #0]
 80100e2:	4401      	add	r1, r0
 80100e4:	1858      	adds	r0, r3, r1
 80100e6:	4282      	cmp	r2, r0
 80100e8:	6019      	str	r1, [r3, #0]
 80100ea:	d1dd      	bne.n	80100a8 <_free_r+0x24>
 80100ec:	6810      	ldr	r0, [r2, #0]
 80100ee:	6852      	ldr	r2, [r2, #4]
 80100f0:	605a      	str	r2, [r3, #4]
 80100f2:	4401      	add	r1, r0
 80100f4:	6019      	str	r1, [r3, #0]
 80100f6:	e7d7      	b.n	80100a8 <_free_r+0x24>
 80100f8:	d902      	bls.n	8010100 <_free_r+0x7c>
 80100fa:	230c      	movs	r3, #12
 80100fc:	602b      	str	r3, [r5, #0]
 80100fe:	e7d3      	b.n	80100a8 <_free_r+0x24>
 8010100:	6820      	ldr	r0, [r4, #0]
 8010102:	1821      	adds	r1, r4, r0
 8010104:	428a      	cmp	r2, r1
 8010106:	bf04      	itt	eq
 8010108:	6811      	ldreq	r1, [r2, #0]
 801010a:	6852      	ldreq	r2, [r2, #4]
 801010c:	6062      	str	r2, [r4, #4]
 801010e:	bf04      	itt	eq
 8010110:	1809      	addeq	r1, r1, r0
 8010112:	6021      	streq	r1, [r4, #0]
 8010114:	605c      	str	r4, [r3, #4]
 8010116:	e7c7      	b.n	80100a8 <_free_r+0x24>
 8010118:	bd38      	pop	{r3, r4, r5, pc}
 801011a:	bf00      	nop
 801011c:	20000560 	.word	0x20000560

08010120 <_malloc_r>:
 8010120:	b570      	push	{r4, r5, r6, lr}
 8010122:	1ccd      	adds	r5, r1, #3
 8010124:	f025 0503 	bic.w	r5, r5, #3
 8010128:	3508      	adds	r5, #8
 801012a:	2d0c      	cmp	r5, #12
 801012c:	bf38      	it	cc
 801012e:	250c      	movcc	r5, #12
 8010130:	2d00      	cmp	r5, #0
 8010132:	4606      	mov	r6, r0
 8010134:	db01      	blt.n	801013a <_malloc_r+0x1a>
 8010136:	42a9      	cmp	r1, r5
 8010138:	d903      	bls.n	8010142 <_malloc_r+0x22>
 801013a:	230c      	movs	r3, #12
 801013c:	6033      	str	r3, [r6, #0]
 801013e:	2000      	movs	r0, #0
 8010140:	bd70      	pop	{r4, r5, r6, pc}
 8010142:	f000 f939 	bl	80103b8 <__malloc_lock>
 8010146:	4a21      	ldr	r2, [pc, #132]	; (80101cc <_malloc_r+0xac>)
 8010148:	6814      	ldr	r4, [r2, #0]
 801014a:	4621      	mov	r1, r4
 801014c:	b991      	cbnz	r1, 8010174 <_malloc_r+0x54>
 801014e:	4c20      	ldr	r4, [pc, #128]	; (80101d0 <_malloc_r+0xb0>)
 8010150:	6823      	ldr	r3, [r4, #0]
 8010152:	b91b      	cbnz	r3, 801015c <_malloc_r+0x3c>
 8010154:	4630      	mov	r0, r6
 8010156:	f000 f855 	bl	8010204 <_sbrk_r>
 801015a:	6020      	str	r0, [r4, #0]
 801015c:	4629      	mov	r1, r5
 801015e:	4630      	mov	r0, r6
 8010160:	f000 f850 	bl	8010204 <_sbrk_r>
 8010164:	1c43      	adds	r3, r0, #1
 8010166:	d124      	bne.n	80101b2 <_malloc_r+0x92>
 8010168:	230c      	movs	r3, #12
 801016a:	6033      	str	r3, [r6, #0]
 801016c:	4630      	mov	r0, r6
 801016e:	f000 f924 	bl	80103ba <__malloc_unlock>
 8010172:	e7e4      	b.n	801013e <_malloc_r+0x1e>
 8010174:	680b      	ldr	r3, [r1, #0]
 8010176:	1b5b      	subs	r3, r3, r5
 8010178:	d418      	bmi.n	80101ac <_malloc_r+0x8c>
 801017a:	2b0b      	cmp	r3, #11
 801017c:	d90f      	bls.n	801019e <_malloc_r+0x7e>
 801017e:	600b      	str	r3, [r1, #0]
 8010180:	50cd      	str	r5, [r1, r3]
 8010182:	18cc      	adds	r4, r1, r3
 8010184:	4630      	mov	r0, r6
 8010186:	f000 f918 	bl	80103ba <__malloc_unlock>
 801018a:	f104 000b 	add.w	r0, r4, #11
 801018e:	1d23      	adds	r3, r4, #4
 8010190:	f020 0007 	bic.w	r0, r0, #7
 8010194:	1ac3      	subs	r3, r0, r3
 8010196:	d0d3      	beq.n	8010140 <_malloc_r+0x20>
 8010198:	425a      	negs	r2, r3
 801019a:	50e2      	str	r2, [r4, r3]
 801019c:	e7d0      	b.n	8010140 <_malloc_r+0x20>
 801019e:	428c      	cmp	r4, r1
 80101a0:	684b      	ldr	r3, [r1, #4]
 80101a2:	bf16      	itet	ne
 80101a4:	6063      	strne	r3, [r4, #4]
 80101a6:	6013      	streq	r3, [r2, #0]
 80101a8:	460c      	movne	r4, r1
 80101aa:	e7eb      	b.n	8010184 <_malloc_r+0x64>
 80101ac:	460c      	mov	r4, r1
 80101ae:	6849      	ldr	r1, [r1, #4]
 80101b0:	e7cc      	b.n	801014c <_malloc_r+0x2c>
 80101b2:	1cc4      	adds	r4, r0, #3
 80101b4:	f024 0403 	bic.w	r4, r4, #3
 80101b8:	42a0      	cmp	r0, r4
 80101ba:	d005      	beq.n	80101c8 <_malloc_r+0xa8>
 80101bc:	1a21      	subs	r1, r4, r0
 80101be:	4630      	mov	r0, r6
 80101c0:	f000 f820 	bl	8010204 <_sbrk_r>
 80101c4:	3001      	adds	r0, #1
 80101c6:	d0cf      	beq.n	8010168 <_malloc_r+0x48>
 80101c8:	6025      	str	r5, [r4, #0]
 80101ca:	e7db      	b.n	8010184 <_malloc_r+0x64>
 80101cc:	20000560 	.word	0x20000560
 80101d0:	20000564 	.word	0x20000564

080101d4 <iprintf>:
 80101d4:	b40f      	push	{r0, r1, r2, r3}
 80101d6:	4b0a      	ldr	r3, [pc, #40]	; (8010200 <iprintf+0x2c>)
 80101d8:	b513      	push	{r0, r1, r4, lr}
 80101da:	681c      	ldr	r4, [r3, #0]
 80101dc:	b124      	cbz	r4, 80101e8 <iprintf+0x14>
 80101de:	69a3      	ldr	r3, [r4, #24]
 80101e0:	b913      	cbnz	r3, 80101e8 <iprintf+0x14>
 80101e2:	4620      	mov	r0, r4
 80101e4:	f000 f85e 	bl	80102a4 <__sinit>
 80101e8:	ab05      	add	r3, sp, #20
 80101ea:	9a04      	ldr	r2, [sp, #16]
 80101ec:	68a1      	ldr	r1, [r4, #8]
 80101ee:	9301      	str	r3, [sp, #4]
 80101f0:	4620      	mov	r0, r4
 80101f2:	f000 f90d 	bl	8010410 <_vfiprintf_r>
 80101f6:	b002      	add	sp, #8
 80101f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101fc:	b004      	add	sp, #16
 80101fe:	4770      	bx	lr
 8010200:	20000060 	.word	0x20000060

08010204 <_sbrk_r>:
 8010204:	b538      	push	{r3, r4, r5, lr}
 8010206:	4c06      	ldr	r4, [pc, #24]	; (8010220 <_sbrk_r+0x1c>)
 8010208:	2300      	movs	r3, #0
 801020a:	4605      	mov	r5, r0
 801020c:	4608      	mov	r0, r1
 801020e:	6023      	str	r3, [r4, #0]
 8010210:	f7f2 fc84 	bl	8002b1c <_sbrk>
 8010214:	1c43      	adds	r3, r0, #1
 8010216:	d102      	bne.n	801021e <_sbrk_r+0x1a>
 8010218:	6823      	ldr	r3, [r4, #0]
 801021a:	b103      	cbz	r3, 801021e <_sbrk_r+0x1a>
 801021c:	602b      	str	r3, [r5, #0]
 801021e:	bd38      	pop	{r3, r4, r5, pc}
 8010220:	200065f8 	.word	0x200065f8

08010224 <std>:
 8010224:	2300      	movs	r3, #0
 8010226:	b510      	push	{r4, lr}
 8010228:	4604      	mov	r4, r0
 801022a:	e9c0 3300 	strd	r3, r3, [r0]
 801022e:	6083      	str	r3, [r0, #8]
 8010230:	8181      	strh	r1, [r0, #12]
 8010232:	6643      	str	r3, [r0, #100]	; 0x64
 8010234:	81c2      	strh	r2, [r0, #14]
 8010236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801023a:	6183      	str	r3, [r0, #24]
 801023c:	4619      	mov	r1, r3
 801023e:	2208      	movs	r2, #8
 8010240:	305c      	adds	r0, #92	; 0x5c
 8010242:	f7ff ff16 	bl	8010072 <memset>
 8010246:	4b05      	ldr	r3, [pc, #20]	; (801025c <std+0x38>)
 8010248:	6263      	str	r3, [r4, #36]	; 0x24
 801024a:	4b05      	ldr	r3, [pc, #20]	; (8010260 <std+0x3c>)
 801024c:	62a3      	str	r3, [r4, #40]	; 0x28
 801024e:	4b05      	ldr	r3, [pc, #20]	; (8010264 <std+0x40>)
 8010250:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010252:	4b05      	ldr	r3, [pc, #20]	; (8010268 <std+0x44>)
 8010254:	6224      	str	r4, [r4, #32]
 8010256:	6323      	str	r3, [r4, #48]	; 0x30
 8010258:	bd10      	pop	{r4, pc}
 801025a:	bf00      	nop
 801025c:	0801094d 	.word	0x0801094d
 8010260:	0801096f 	.word	0x0801096f
 8010264:	080109a7 	.word	0x080109a7
 8010268:	080109cb 	.word	0x080109cb

0801026c <_cleanup_r>:
 801026c:	4901      	ldr	r1, [pc, #4]	; (8010274 <_cleanup_r+0x8>)
 801026e:	f000 b885 	b.w	801037c <_fwalk_reent>
 8010272:	bf00      	nop
 8010274:	08010ca5 	.word	0x08010ca5

08010278 <__sfmoreglue>:
 8010278:	b570      	push	{r4, r5, r6, lr}
 801027a:	1e4a      	subs	r2, r1, #1
 801027c:	2568      	movs	r5, #104	; 0x68
 801027e:	4355      	muls	r5, r2
 8010280:	460e      	mov	r6, r1
 8010282:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010286:	f7ff ff4b 	bl	8010120 <_malloc_r>
 801028a:	4604      	mov	r4, r0
 801028c:	b140      	cbz	r0, 80102a0 <__sfmoreglue+0x28>
 801028e:	2100      	movs	r1, #0
 8010290:	e9c0 1600 	strd	r1, r6, [r0]
 8010294:	300c      	adds	r0, #12
 8010296:	60a0      	str	r0, [r4, #8]
 8010298:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801029c:	f7ff fee9 	bl	8010072 <memset>
 80102a0:	4620      	mov	r0, r4
 80102a2:	bd70      	pop	{r4, r5, r6, pc}

080102a4 <__sinit>:
 80102a4:	6983      	ldr	r3, [r0, #24]
 80102a6:	b510      	push	{r4, lr}
 80102a8:	4604      	mov	r4, r0
 80102aa:	bb33      	cbnz	r3, 80102fa <__sinit+0x56>
 80102ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80102b0:	6503      	str	r3, [r0, #80]	; 0x50
 80102b2:	4b12      	ldr	r3, [pc, #72]	; (80102fc <__sinit+0x58>)
 80102b4:	4a12      	ldr	r2, [pc, #72]	; (8010300 <__sinit+0x5c>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	6282      	str	r2, [r0, #40]	; 0x28
 80102ba:	4298      	cmp	r0, r3
 80102bc:	bf04      	itt	eq
 80102be:	2301      	moveq	r3, #1
 80102c0:	6183      	streq	r3, [r0, #24]
 80102c2:	f000 f81f 	bl	8010304 <__sfp>
 80102c6:	6060      	str	r0, [r4, #4]
 80102c8:	4620      	mov	r0, r4
 80102ca:	f000 f81b 	bl	8010304 <__sfp>
 80102ce:	60a0      	str	r0, [r4, #8]
 80102d0:	4620      	mov	r0, r4
 80102d2:	f000 f817 	bl	8010304 <__sfp>
 80102d6:	2200      	movs	r2, #0
 80102d8:	60e0      	str	r0, [r4, #12]
 80102da:	2104      	movs	r1, #4
 80102dc:	6860      	ldr	r0, [r4, #4]
 80102de:	f7ff ffa1 	bl	8010224 <std>
 80102e2:	2201      	movs	r2, #1
 80102e4:	2109      	movs	r1, #9
 80102e6:	68a0      	ldr	r0, [r4, #8]
 80102e8:	f7ff ff9c 	bl	8010224 <std>
 80102ec:	2202      	movs	r2, #2
 80102ee:	2112      	movs	r1, #18
 80102f0:	68e0      	ldr	r0, [r4, #12]
 80102f2:	f7ff ff97 	bl	8010224 <std>
 80102f6:	2301      	movs	r3, #1
 80102f8:	61a3      	str	r3, [r4, #24]
 80102fa:	bd10      	pop	{r4, pc}
 80102fc:	080139dc 	.word	0x080139dc
 8010300:	0801026d 	.word	0x0801026d

08010304 <__sfp>:
 8010304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010306:	4b1b      	ldr	r3, [pc, #108]	; (8010374 <__sfp+0x70>)
 8010308:	681e      	ldr	r6, [r3, #0]
 801030a:	69b3      	ldr	r3, [r6, #24]
 801030c:	4607      	mov	r7, r0
 801030e:	b913      	cbnz	r3, 8010316 <__sfp+0x12>
 8010310:	4630      	mov	r0, r6
 8010312:	f7ff ffc7 	bl	80102a4 <__sinit>
 8010316:	3648      	adds	r6, #72	; 0x48
 8010318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801031c:	3b01      	subs	r3, #1
 801031e:	d503      	bpl.n	8010328 <__sfp+0x24>
 8010320:	6833      	ldr	r3, [r6, #0]
 8010322:	b133      	cbz	r3, 8010332 <__sfp+0x2e>
 8010324:	6836      	ldr	r6, [r6, #0]
 8010326:	e7f7      	b.n	8010318 <__sfp+0x14>
 8010328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801032c:	b16d      	cbz	r5, 801034a <__sfp+0x46>
 801032e:	3468      	adds	r4, #104	; 0x68
 8010330:	e7f4      	b.n	801031c <__sfp+0x18>
 8010332:	2104      	movs	r1, #4
 8010334:	4638      	mov	r0, r7
 8010336:	f7ff ff9f 	bl	8010278 <__sfmoreglue>
 801033a:	6030      	str	r0, [r6, #0]
 801033c:	2800      	cmp	r0, #0
 801033e:	d1f1      	bne.n	8010324 <__sfp+0x20>
 8010340:	230c      	movs	r3, #12
 8010342:	603b      	str	r3, [r7, #0]
 8010344:	4604      	mov	r4, r0
 8010346:	4620      	mov	r0, r4
 8010348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801034a:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <__sfp+0x74>)
 801034c:	6665      	str	r5, [r4, #100]	; 0x64
 801034e:	e9c4 5500 	strd	r5, r5, [r4]
 8010352:	60a5      	str	r5, [r4, #8]
 8010354:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010358:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801035c:	2208      	movs	r2, #8
 801035e:	4629      	mov	r1, r5
 8010360:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010364:	f7ff fe85 	bl	8010072 <memset>
 8010368:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801036c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010370:	e7e9      	b.n	8010346 <__sfp+0x42>
 8010372:	bf00      	nop
 8010374:	080139dc 	.word	0x080139dc
 8010378:	ffff0001 	.word	0xffff0001

0801037c <_fwalk_reent>:
 801037c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010380:	4680      	mov	r8, r0
 8010382:	4689      	mov	r9, r1
 8010384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010388:	2600      	movs	r6, #0
 801038a:	b914      	cbnz	r4, 8010392 <_fwalk_reent+0x16>
 801038c:	4630      	mov	r0, r6
 801038e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010392:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010396:	3f01      	subs	r7, #1
 8010398:	d501      	bpl.n	801039e <_fwalk_reent+0x22>
 801039a:	6824      	ldr	r4, [r4, #0]
 801039c:	e7f5      	b.n	801038a <_fwalk_reent+0xe>
 801039e:	89ab      	ldrh	r3, [r5, #12]
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d907      	bls.n	80103b4 <_fwalk_reent+0x38>
 80103a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103a8:	3301      	adds	r3, #1
 80103aa:	d003      	beq.n	80103b4 <_fwalk_reent+0x38>
 80103ac:	4629      	mov	r1, r5
 80103ae:	4640      	mov	r0, r8
 80103b0:	47c8      	blx	r9
 80103b2:	4306      	orrs	r6, r0
 80103b4:	3568      	adds	r5, #104	; 0x68
 80103b6:	e7ee      	b.n	8010396 <_fwalk_reent+0x1a>

080103b8 <__malloc_lock>:
 80103b8:	4770      	bx	lr

080103ba <__malloc_unlock>:
 80103ba:	4770      	bx	lr

080103bc <__sfputc_r>:
 80103bc:	6893      	ldr	r3, [r2, #8]
 80103be:	3b01      	subs	r3, #1
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	b410      	push	{r4}
 80103c4:	6093      	str	r3, [r2, #8]
 80103c6:	da08      	bge.n	80103da <__sfputc_r+0x1e>
 80103c8:	6994      	ldr	r4, [r2, #24]
 80103ca:	42a3      	cmp	r3, r4
 80103cc:	db01      	blt.n	80103d2 <__sfputc_r+0x16>
 80103ce:	290a      	cmp	r1, #10
 80103d0:	d103      	bne.n	80103da <__sfputc_r+0x1e>
 80103d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103d6:	f000 bafd 	b.w	80109d4 <__swbuf_r>
 80103da:	6813      	ldr	r3, [r2, #0]
 80103dc:	1c58      	adds	r0, r3, #1
 80103de:	6010      	str	r0, [r2, #0]
 80103e0:	7019      	strb	r1, [r3, #0]
 80103e2:	4608      	mov	r0, r1
 80103e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103e8:	4770      	bx	lr

080103ea <__sfputs_r>:
 80103ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ec:	4606      	mov	r6, r0
 80103ee:	460f      	mov	r7, r1
 80103f0:	4614      	mov	r4, r2
 80103f2:	18d5      	adds	r5, r2, r3
 80103f4:	42ac      	cmp	r4, r5
 80103f6:	d101      	bne.n	80103fc <__sfputs_r+0x12>
 80103f8:	2000      	movs	r0, #0
 80103fa:	e007      	b.n	801040c <__sfputs_r+0x22>
 80103fc:	463a      	mov	r2, r7
 80103fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010402:	4630      	mov	r0, r6
 8010404:	f7ff ffda 	bl	80103bc <__sfputc_r>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d1f3      	bne.n	80103f4 <__sfputs_r+0xa>
 801040c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010410 <_vfiprintf_r>:
 8010410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010414:	460c      	mov	r4, r1
 8010416:	b09d      	sub	sp, #116	; 0x74
 8010418:	4617      	mov	r7, r2
 801041a:	461d      	mov	r5, r3
 801041c:	4606      	mov	r6, r0
 801041e:	b118      	cbz	r0, 8010428 <_vfiprintf_r+0x18>
 8010420:	6983      	ldr	r3, [r0, #24]
 8010422:	b90b      	cbnz	r3, 8010428 <_vfiprintf_r+0x18>
 8010424:	f7ff ff3e 	bl	80102a4 <__sinit>
 8010428:	4b7c      	ldr	r3, [pc, #496]	; (801061c <_vfiprintf_r+0x20c>)
 801042a:	429c      	cmp	r4, r3
 801042c:	d158      	bne.n	80104e0 <_vfiprintf_r+0xd0>
 801042e:	6874      	ldr	r4, [r6, #4]
 8010430:	89a3      	ldrh	r3, [r4, #12]
 8010432:	0718      	lsls	r0, r3, #28
 8010434:	d55e      	bpl.n	80104f4 <_vfiprintf_r+0xe4>
 8010436:	6923      	ldr	r3, [r4, #16]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d05b      	beq.n	80104f4 <_vfiprintf_r+0xe4>
 801043c:	2300      	movs	r3, #0
 801043e:	9309      	str	r3, [sp, #36]	; 0x24
 8010440:	2320      	movs	r3, #32
 8010442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010446:	2330      	movs	r3, #48	; 0x30
 8010448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801044c:	9503      	str	r5, [sp, #12]
 801044e:	f04f 0b01 	mov.w	fp, #1
 8010452:	46b8      	mov	r8, r7
 8010454:	4645      	mov	r5, r8
 8010456:	f815 3b01 	ldrb.w	r3, [r5], #1
 801045a:	b10b      	cbz	r3, 8010460 <_vfiprintf_r+0x50>
 801045c:	2b25      	cmp	r3, #37	; 0x25
 801045e:	d154      	bne.n	801050a <_vfiprintf_r+0xfa>
 8010460:	ebb8 0a07 	subs.w	sl, r8, r7
 8010464:	d00b      	beq.n	801047e <_vfiprintf_r+0x6e>
 8010466:	4653      	mov	r3, sl
 8010468:	463a      	mov	r2, r7
 801046a:	4621      	mov	r1, r4
 801046c:	4630      	mov	r0, r6
 801046e:	f7ff ffbc 	bl	80103ea <__sfputs_r>
 8010472:	3001      	adds	r0, #1
 8010474:	f000 80c2 	beq.w	80105fc <_vfiprintf_r+0x1ec>
 8010478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801047a:	4453      	add	r3, sl
 801047c:	9309      	str	r3, [sp, #36]	; 0x24
 801047e:	f898 3000 	ldrb.w	r3, [r8]
 8010482:	2b00      	cmp	r3, #0
 8010484:	f000 80ba 	beq.w	80105fc <_vfiprintf_r+0x1ec>
 8010488:	2300      	movs	r3, #0
 801048a:	f04f 32ff 	mov.w	r2, #4294967295
 801048e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010492:	9304      	str	r3, [sp, #16]
 8010494:	9307      	str	r3, [sp, #28]
 8010496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801049a:	931a      	str	r3, [sp, #104]	; 0x68
 801049c:	46a8      	mov	r8, r5
 801049e:	2205      	movs	r2, #5
 80104a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80104a4:	485e      	ldr	r0, [pc, #376]	; (8010620 <_vfiprintf_r+0x210>)
 80104a6:	f7ef feb3 	bl	8000210 <memchr>
 80104aa:	9b04      	ldr	r3, [sp, #16]
 80104ac:	bb78      	cbnz	r0, 801050e <_vfiprintf_r+0xfe>
 80104ae:	06d9      	lsls	r1, r3, #27
 80104b0:	bf44      	itt	mi
 80104b2:	2220      	movmi	r2, #32
 80104b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80104b8:	071a      	lsls	r2, r3, #28
 80104ba:	bf44      	itt	mi
 80104bc:	222b      	movmi	r2, #43	; 0x2b
 80104be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80104c2:	782a      	ldrb	r2, [r5, #0]
 80104c4:	2a2a      	cmp	r2, #42	; 0x2a
 80104c6:	d02a      	beq.n	801051e <_vfiprintf_r+0x10e>
 80104c8:	9a07      	ldr	r2, [sp, #28]
 80104ca:	46a8      	mov	r8, r5
 80104cc:	2000      	movs	r0, #0
 80104ce:	250a      	movs	r5, #10
 80104d0:	4641      	mov	r1, r8
 80104d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104d6:	3b30      	subs	r3, #48	; 0x30
 80104d8:	2b09      	cmp	r3, #9
 80104da:	d969      	bls.n	80105b0 <_vfiprintf_r+0x1a0>
 80104dc:	b360      	cbz	r0, 8010538 <_vfiprintf_r+0x128>
 80104de:	e024      	b.n	801052a <_vfiprintf_r+0x11a>
 80104e0:	4b50      	ldr	r3, [pc, #320]	; (8010624 <_vfiprintf_r+0x214>)
 80104e2:	429c      	cmp	r4, r3
 80104e4:	d101      	bne.n	80104ea <_vfiprintf_r+0xda>
 80104e6:	68b4      	ldr	r4, [r6, #8]
 80104e8:	e7a2      	b.n	8010430 <_vfiprintf_r+0x20>
 80104ea:	4b4f      	ldr	r3, [pc, #316]	; (8010628 <_vfiprintf_r+0x218>)
 80104ec:	429c      	cmp	r4, r3
 80104ee:	bf08      	it	eq
 80104f0:	68f4      	ldreq	r4, [r6, #12]
 80104f2:	e79d      	b.n	8010430 <_vfiprintf_r+0x20>
 80104f4:	4621      	mov	r1, r4
 80104f6:	4630      	mov	r0, r6
 80104f8:	f000 fad0 	bl	8010a9c <__swsetup_r>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d09d      	beq.n	801043c <_vfiprintf_r+0x2c>
 8010500:	f04f 30ff 	mov.w	r0, #4294967295
 8010504:	b01d      	add	sp, #116	; 0x74
 8010506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801050a:	46a8      	mov	r8, r5
 801050c:	e7a2      	b.n	8010454 <_vfiprintf_r+0x44>
 801050e:	4a44      	ldr	r2, [pc, #272]	; (8010620 <_vfiprintf_r+0x210>)
 8010510:	1a80      	subs	r0, r0, r2
 8010512:	fa0b f000 	lsl.w	r0, fp, r0
 8010516:	4318      	orrs	r0, r3
 8010518:	9004      	str	r0, [sp, #16]
 801051a:	4645      	mov	r5, r8
 801051c:	e7be      	b.n	801049c <_vfiprintf_r+0x8c>
 801051e:	9a03      	ldr	r2, [sp, #12]
 8010520:	1d11      	adds	r1, r2, #4
 8010522:	6812      	ldr	r2, [r2, #0]
 8010524:	9103      	str	r1, [sp, #12]
 8010526:	2a00      	cmp	r2, #0
 8010528:	db01      	blt.n	801052e <_vfiprintf_r+0x11e>
 801052a:	9207      	str	r2, [sp, #28]
 801052c:	e004      	b.n	8010538 <_vfiprintf_r+0x128>
 801052e:	4252      	negs	r2, r2
 8010530:	f043 0302 	orr.w	r3, r3, #2
 8010534:	9207      	str	r2, [sp, #28]
 8010536:	9304      	str	r3, [sp, #16]
 8010538:	f898 3000 	ldrb.w	r3, [r8]
 801053c:	2b2e      	cmp	r3, #46	; 0x2e
 801053e:	d10e      	bne.n	801055e <_vfiprintf_r+0x14e>
 8010540:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010544:	2b2a      	cmp	r3, #42	; 0x2a
 8010546:	d138      	bne.n	80105ba <_vfiprintf_r+0x1aa>
 8010548:	9b03      	ldr	r3, [sp, #12]
 801054a:	1d1a      	adds	r2, r3, #4
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	9203      	str	r2, [sp, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	bfb8      	it	lt
 8010554:	f04f 33ff 	movlt.w	r3, #4294967295
 8010558:	f108 0802 	add.w	r8, r8, #2
 801055c:	9305      	str	r3, [sp, #20]
 801055e:	4d33      	ldr	r5, [pc, #204]	; (801062c <_vfiprintf_r+0x21c>)
 8010560:	f898 1000 	ldrb.w	r1, [r8]
 8010564:	2203      	movs	r2, #3
 8010566:	4628      	mov	r0, r5
 8010568:	f7ef fe52 	bl	8000210 <memchr>
 801056c:	b140      	cbz	r0, 8010580 <_vfiprintf_r+0x170>
 801056e:	2340      	movs	r3, #64	; 0x40
 8010570:	1b40      	subs	r0, r0, r5
 8010572:	fa03 f000 	lsl.w	r0, r3, r0
 8010576:	9b04      	ldr	r3, [sp, #16]
 8010578:	4303      	orrs	r3, r0
 801057a:	f108 0801 	add.w	r8, r8, #1
 801057e:	9304      	str	r3, [sp, #16]
 8010580:	f898 1000 	ldrb.w	r1, [r8]
 8010584:	482a      	ldr	r0, [pc, #168]	; (8010630 <_vfiprintf_r+0x220>)
 8010586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801058a:	2206      	movs	r2, #6
 801058c:	f108 0701 	add.w	r7, r8, #1
 8010590:	f7ef fe3e 	bl	8000210 <memchr>
 8010594:	2800      	cmp	r0, #0
 8010596:	d037      	beq.n	8010608 <_vfiprintf_r+0x1f8>
 8010598:	4b26      	ldr	r3, [pc, #152]	; (8010634 <_vfiprintf_r+0x224>)
 801059a:	bb1b      	cbnz	r3, 80105e4 <_vfiprintf_r+0x1d4>
 801059c:	9b03      	ldr	r3, [sp, #12]
 801059e:	3307      	adds	r3, #7
 80105a0:	f023 0307 	bic.w	r3, r3, #7
 80105a4:	3308      	adds	r3, #8
 80105a6:	9303      	str	r3, [sp, #12]
 80105a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105aa:	444b      	add	r3, r9
 80105ac:	9309      	str	r3, [sp, #36]	; 0x24
 80105ae:	e750      	b.n	8010452 <_vfiprintf_r+0x42>
 80105b0:	fb05 3202 	mla	r2, r5, r2, r3
 80105b4:	2001      	movs	r0, #1
 80105b6:	4688      	mov	r8, r1
 80105b8:	e78a      	b.n	80104d0 <_vfiprintf_r+0xc0>
 80105ba:	2300      	movs	r3, #0
 80105bc:	f108 0801 	add.w	r8, r8, #1
 80105c0:	9305      	str	r3, [sp, #20]
 80105c2:	4619      	mov	r1, r3
 80105c4:	250a      	movs	r5, #10
 80105c6:	4640      	mov	r0, r8
 80105c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105cc:	3a30      	subs	r2, #48	; 0x30
 80105ce:	2a09      	cmp	r2, #9
 80105d0:	d903      	bls.n	80105da <_vfiprintf_r+0x1ca>
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d0c3      	beq.n	801055e <_vfiprintf_r+0x14e>
 80105d6:	9105      	str	r1, [sp, #20]
 80105d8:	e7c1      	b.n	801055e <_vfiprintf_r+0x14e>
 80105da:	fb05 2101 	mla	r1, r5, r1, r2
 80105de:	2301      	movs	r3, #1
 80105e0:	4680      	mov	r8, r0
 80105e2:	e7f0      	b.n	80105c6 <_vfiprintf_r+0x1b6>
 80105e4:	ab03      	add	r3, sp, #12
 80105e6:	9300      	str	r3, [sp, #0]
 80105e8:	4622      	mov	r2, r4
 80105ea:	4b13      	ldr	r3, [pc, #76]	; (8010638 <_vfiprintf_r+0x228>)
 80105ec:	a904      	add	r1, sp, #16
 80105ee:	4630      	mov	r0, r6
 80105f0:	f3af 8000 	nop.w
 80105f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80105f8:	4681      	mov	r9, r0
 80105fa:	d1d5      	bne.n	80105a8 <_vfiprintf_r+0x198>
 80105fc:	89a3      	ldrh	r3, [r4, #12]
 80105fe:	065b      	lsls	r3, r3, #25
 8010600:	f53f af7e 	bmi.w	8010500 <_vfiprintf_r+0xf0>
 8010604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010606:	e77d      	b.n	8010504 <_vfiprintf_r+0xf4>
 8010608:	ab03      	add	r3, sp, #12
 801060a:	9300      	str	r3, [sp, #0]
 801060c:	4622      	mov	r2, r4
 801060e:	4b0a      	ldr	r3, [pc, #40]	; (8010638 <_vfiprintf_r+0x228>)
 8010610:	a904      	add	r1, sp, #16
 8010612:	4630      	mov	r0, r6
 8010614:	f000 f888 	bl	8010728 <_printf_i>
 8010618:	e7ec      	b.n	80105f4 <_vfiprintf_r+0x1e4>
 801061a:	bf00      	nop
 801061c:	08013a00 	.word	0x08013a00
 8010620:	08013a40 	.word	0x08013a40
 8010624:	08013a20 	.word	0x08013a20
 8010628:	080139e0 	.word	0x080139e0
 801062c:	08013a46 	.word	0x08013a46
 8010630:	08013a4a 	.word	0x08013a4a
 8010634:	00000000 	.word	0x00000000
 8010638:	080103eb 	.word	0x080103eb

0801063c <_printf_common>:
 801063c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010640:	4691      	mov	r9, r2
 8010642:	461f      	mov	r7, r3
 8010644:	688a      	ldr	r2, [r1, #8]
 8010646:	690b      	ldr	r3, [r1, #16]
 8010648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801064c:	4293      	cmp	r3, r2
 801064e:	bfb8      	it	lt
 8010650:	4613      	movlt	r3, r2
 8010652:	f8c9 3000 	str.w	r3, [r9]
 8010656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801065a:	4606      	mov	r6, r0
 801065c:	460c      	mov	r4, r1
 801065e:	b112      	cbz	r2, 8010666 <_printf_common+0x2a>
 8010660:	3301      	adds	r3, #1
 8010662:	f8c9 3000 	str.w	r3, [r9]
 8010666:	6823      	ldr	r3, [r4, #0]
 8010668:	0699      	lsls	r1, r3, #26
 801066a:	bf42      	ittt	mi
 801066c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010670:	3302      	addmi	r3, #2
 8010672:	f8c9 3000 	strmi.w	r3, [r9]
 8010676:	6825      	ldr	r5, [r4, #0]
 8010678:	f015 0506 	ands.w	r5, r5, #6
 801067c:	d107      	bne.n	801068e <_printf_common+0x52>
 801067e:	f104 0a19 	add.w	sl, r4, #25
 8010682:	68e3      	ldr	r3, [r4, #12]
 8010684:	f8d9 2000 	ldr.w	r2, [r9]
 8010688:	1a9b      	subs	r3, r3, r2
 801068a:	42ab      	cmp	r3, r5
 801068c:	dc28      	bgt.n	80106e0 <_printf_common+0xa4>
 801068e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010692:	6822      	ldr	r2, [r4, #0]
 8010694:	3300      	adds	r3, #0
 8010696:	bf18      	it	ne
 8010698:	2301      	movne	r3, #1
 801069a:	0692      	lsls	r2, r2, #26
 801069c:	d42d      	bmi.n	80106fa <_printf_common+0xbe>
 801069e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106a2:	4639      	mov	r1, r7
 80106a4:	4630      	mov	r0, r6
 80106a6:	47c0      	blx	r8
 80106a8:	3001      	adds	r0, #1
 80106aa:	d020      	beq.n	80106ee <_printf_common+0xb2>
 80106ac:	6823      	ldr	r3, [r4, #0]
 80106ae:	68e5      	ldr	r5, [r4, #12]
 80106b0:	f8d9 2000 	ldr.w	r2, [r9]
 80106b4:	f003 0306 	and.w	r3, r3, #6
 80106b8:	2b04      	cmp	r3, #4
 80106ba:	bf08      	it	eq
 80106bc:	1aad      	subeq	r5, r5, r2
 80106be:	68a3      	ldr	r3, [r4, #8]
 80106c0:	6922      	ldr	r2, [r4, #16]
 80106c2:	bf0c      	ite	eq
 80106c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106c8:	2500      	movne	r5, #0
 80106ca:	4293      	cmp	r3, r2
 80106cc:	bfc4      	itt	gt
 80106ce:	1a9b      	subgt	r3, r3, r2
 80106d0:	18ed      	addgt	r5, r5, r3
 80106d2:	f04f 0900 	mov.w	r9, #0
 80106d6:	341a      	adds	r4, #26
 80106d8:	454d      	cmp	r5, r9
 80106da:	d11a      	bne.n	8010712 <_printf_common+0xd6>
 80106dc:	2000      	movs	r0, #0
 80106de:	e008      	b.n	80106f2 <_printf_common+0xb6>
 80106e0:	2301      	movs	r3, #1
 80106e2:	4652      	mov	r2, sl
 80106e4:	4639      	mov	r1, r7
 80106e6:	4630      	mov	r0, r6
 80106e8:	47c0      	blx	r8
 80106ea:	3001      	adds	r0, #1
 80106ec:	d103      	bne.n	80106f6 <_printf_common+0xba>
 80106ee:	f04f 30ff 	mov.w	r0, #4294967295
 80106f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106f6:	3501      	adds	r5, #1
 80106f8:	e7c3      	b.n	8010682 <_printf_common+0x46>
 80106fa:	18e1      	adds	r1, r4, r3
 80106fc:	1c5a      	adds	r2, r3, #1
 80106fe:	2030      	movs	r0, #48	; 0x30
 8010700:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010704:	4422      	add	r2, r4
 8010706:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801070a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801070e:	3302      	adds	r3, #2
 8010710:	e7c5      	b.n	801069e <_printf_common+0x62>
 8010712:	2301      	movs	r3, #1
 8010714:	4622      	mov	r2, r4
 8010716:	4639      	mov	r1, r7
 8010718:	4630      	mov	r0, r6
 801071a:	47c0      	blx	r8
 801071c:	3001      	adds	r0, #1
 801071e:	d0e6      	beq.n	80106ee <_printf_common+0xb2>
 8010720:	f109 0901 	add.w	r9, r9, #1
 8010724:	e7d8      	b.n	80106d8 <_printf_common+0x9c>
	...

08010728 <_printf_i>:
 8010728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801072c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010730:	460c      	mov	r4, r1
 8010732:	7e09      	ldrb	r1, [r1, #24]
 8010734:	b085      	sub	sp, #20
 8010736:	296e      	cmp	r1, #110	; 0x6e
 8010738:	4617      	mov	r7, r2
 801073a:	4606      	mov	r6, r0
 801073c:	4698      	mov	r8, r3
 801073e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010740:	f000 80b3 	beq.w	80108aa <_printf_i+0x182>
 8010744:	d822      	bhi.n	801078c <_printf_i+0x64>
 8010746:	2963      	cmp	r1, #99	; 0x63
 8010748:	d036      	beq.n	80107b8 <_printf_i+0x90>
 801074a:	d80a      	bhi.n	8010762 <_printf_i+0x3a>
 801074c:	2900      	cmp	r1, #0
 801074e:	f000 80b9 	beq.w	80108c4 <_printf_i+0x19c>
 8010752:	2958      	cmp	r1, #88	; 0x58
 8010754:	f000 8083 	beq.w	801085e <_printf_i+0x136>
 8010758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801075c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010760:	e032      	b.n	80107c8 <_printf_i+0xa0>
 8010762:	2964      	cmp	r1, #100	; 0x64
 8010764:	d001      	beq.n	801076a <_printf_i+0x42>
 8010766:	2969      	cmp	r1, #105	; 0x69
 8010768:	d1f6      	bne.n	8010758 <_printf_i+0x30>
 801076a:	6820      	ldr	r0, [r4, #0]
 801076c:	6813      	ldr	r3, [r2, #0]
 801076e:	0605      	lsls	r5, r0, #24
 8010770:	f103 0104 	add.w	r1, r3, #4
 8010774:	d52a      	bpl.n	80107cc <_printf_i+0xa4>
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	6011      	str	r1, [r2, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	da03      	bge.n	8010786 <_printf_i+0x5e>
 801077e:	222d      	movs	r2, #45	; 0x2d
 8010780:	425b      	negs	r3, r3
 8010782:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010786:	486f      	ldr	r0, [pc, #444]	; (8010944 <_printf_i+0x21c>)
 8010788:	220a      	movs	r2, #10
 801078a:	e039      	b.n	8010800 <_printf_i+0xd8>
 801078c:	2973      	cmp	r1, #115	; 0x73
 801078e:	f000 809d 	beq.w	80108cc <_printf_i+0x1a4>
 8010792:	d808      	bhi.n	80107a6 <_printf_i+0x7e>
 8010794:	296f      	cmp	r1, #111	; 0x6f
 8010796:	d020      	beq.n	80107da <_printf_i+0xb2>
 8010798:	2970      	cmp	r1, #112	; 0x70
 801079a:	d1dd      	bne.n	8010758 <_printf_i+0x30>
 801079c:	6823      	ldr	r3, [r4, #0]
 801079e:	f043 0320 	orr.w	r3, r3, #32
 80107a2:	6023      	str	r3, [r4, #0]
 80107a4:	e003      	b.n	80107ae <_printf_i+0x86>
 80107a6:	2975      	cmp	r1, #117	; 0x75
 80107a8:	d017      	beq.n	80107da <_printf_i+0xb2>
 80107aa:	2978      	cmp	r1, #120	; 0x78
 80107ac:	d1d4      	bne.n	8010758 <_printf_i+0x30>
 80107ae:	2378      	movs	r3, #120	; 0x78
 80107b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107b4:	4864      	ldr	r0, [pc, #400]	; (8010948 <_printf_i+0x220>)
 80107b6:	e055      	b.n	8010864 <_printf_i+0x13c>
 80107b8:	6813      	ldr	r3, [r2, #0]
 80107ba:	1d19      	adds	r1, r3, #4
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	6011      	str	r1, [r2, #0]
 80107c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107c8:	2301      	movs	r3, #1
 80107ca:	e08c      	b.n	80108e6 <_printf_i+0x1be>
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	6011      	str	r1, [r2, #0]
 80107d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80107d4:	bf18      	it	ne
 80107d6:	b21b      	sxthne	r3, r3
 80107d8:	e7cf      	b.n	801077a <_printf_i+0x52>
 80107da:	6813      	ldr	r3, [r2, #0]
 80107dc:	6825      	ldr	r5, [r4, #0]
 80107de:	1d18      	adds	r0, r3, #4
 80107e0:	6010      	str	r0, [r2, #0]
 80107e2:	0628      	lsls	r0, r5, #24
 80107e4:	d501      	bpl.n	80107ea <_printf_i+0xc2>
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	e002      	b.n	80107f0 <_printf_i+0xc8>
 80107ea:	0668      	lsls	r0, r5, #25
 80107ec:	d5fb      	bpl.n	80107e6 <_printf_i+0xbe>
 80107ee:	881b      	ldrh	r3, [r3, #0]
 80107f0:	4854      	ldr	r0, [pc, #336]	; (8010944 <_printf_i+0x21c>)
 80107f2:	296f      	cmp	r1, #111	; 0x6f
 80107f4:	bf14      	ite	ne
 80107f6:	220a      	movne	r2, #10
 80107f8:	2208      	moveq	r2, #8
 80107fa:	2100      	movs	r1, #0
 80107fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010800:	6865      	ldr	r5, [r4, #4]
 8010802:	60a5      	str	r5, [r4, #8]
 8010804:	2d00      	cmp	r5, #0
 8010806:	f2c0 8095 	blt.w	8010934 <_printf_i+0x20c>
 801080a:	6821      	ldr	r1, [r4, #0]
 801080c:	f021 0104 	bic.w	r1, r1, #4
 8010810:	6021      	str	r1, [r4, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d13d      	bne.n	8010892 <_printf_i+0x16a>
 8010816:	2d00      	cmp	r5, #0
 8010818:	f040 808e 	bne.w	8010938 <_printf_i+0x210>
 801081c:	4665      	mov	r5, ip
 801081e:	2a08      	cmp	r2, #8
 8010820:	d10b      	bne.n	801083a <_printf_i+0x112>
 8010822:	6823      	ldr	r3, [r4, #0]
 8010824:	07db      	lsls	r3, r3, #31
 8010826:	d508      	bpl.n	801083a <_printf_i+0x112>
 8010828:	6923      	ldr	r3, [r4, #16]
 801082a:	6862      	ldr	r2, [r4, #4]
 801082c:	429a      	cmp	r2, r3
 801082e:	bfde      	ittt	le
 8010830:	2330      	movle	r3, #48	; 0x30
 8010832:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010836:	f105 35ff 	addle.w	r5, r5, #4294967295
 801083a:	ebac 0305 	sub.w	r3, ip, r5
 801083e:	6123      	str	r3, [r4, #16]
 8010840:	f8cd 8000 	str.w	r8, [sp]
 8010844:	463b      	mov	r3, r7
 8010846:	aa03      	add	r2, sp, #12
 8010848:	4621      	mov	r1, r4
 801084a:	4630      	mov	r0, r6
 801084c:	f7ff fef6 	bl	801063c <_printf_common>
 8010850:	3001      	adds	r0, #1
 8010852:	d14d      	bne.n	80108f0 <_printf_i+0x1c8>
 8010854:	f04f 30ff 	mov.w	r0, #4294967295
 8010858:	b005      	add	sp, #20
 801085a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801085e:	4839      	ldr	r0, [pc, #228]	; (8010944 <_printf_i+0x21c>)
 8010860:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010864:	6813      	ldr	r3, [r2, #0]
 8010866:	6821      	ldr	r1, [r4, #0]
 8010868:	1d1d      	adds	r5, r3, #4
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	6015      	str	r5, [r2, #0]
 801086e:	060a      	lsls	r2, r1, #24
 8010870:	d50b      	bpl.n	801088a <_printf_i+0x162>
 8010872:	07ca      	lsls	r2, r1, #31
 8010874:	bf44      	itt	mi
 8010876:	f041 0120 	orrmi.w	r1, r1, #32
 801087a:	6021      	strmi	r1, [r4, #0]
 801087c:	b91b      	cbnz	r3, 8010886 <_printf_i+0x15e>
 801087e:	6822      	ldr	r2, [r4, #0]
 8010880:	f022 0220 	bic.w	r2, r2, #32
 8010884:	6022      	str	r2, [r4, #0]
 8010886:	2210      	movs	r2, #16
 8010888:	e7b7      	b.n	80107fa <_printf_i+0xd2>
 801088a:	064d      	lsls	r5, r1, #25
 801088c:	bf48      	it	mi
 801088e:	b29b      	uxthmi	r3, r3
 8010890:	e7ef      	b.n	8010872 <_printf_i+0x14a>
 8010892:	4665      	mov	r5, ip
 8010894:	fbb3 f1f2 	udiv	r1, r3, r2
 8010898:	fb02 3311 	mls	r3, r2, r1, r3
 801089c:	5cc3      	ldrb	r3, [r0, r3]
 801089e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80108a2:	460b      	mov	r3, r1
 80108a4:	2900      	cmp	r1, #0
 80108a6:	d1f5      	bne.n	8010894 <_printf_i+0x16c>
 80108a8:	e7b9      	b.n	801081e <_printf_i+0xf6>
 80108aa:	6813      	ldr	r3, [r2, #0]
 80108ac:	6825      	ldr	r5, [r4, #0]
 80108ae:	6961      	ldr	r1, [r4, #20]
 80108b0:	1d18      	adds	r0, r3, #4
 80108b2:	6010      	str	r0, [r2, #0]
 80108b4:	0628      	lsls	r0, r5, #24
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	d501      	bpl.n	80108be <_printf_i+0x196>
 80108ba:	6019      	str	r1, [r3, #0]
 80108bc:	e002      	b.n	80108c4 <_printf_i+0x19c>
 80108be:	066a      	lsls	r2, r5, #25
 80108c0:	d5fb      	bpl.n	80108ba <_printf_i+0x192>
 80108c2:	8019      	strh	r1, [r3, #0]
 80108c4:	2300      	movs	r3, #0
 80108c6:	6123      	str	r3, [r4, #16]
 80108c8:	4665      	mov	r5, ip
 80108ca:	e7b9      	b.n	8010840 <_printf_i+0x118>
 80108cc:	6813      	ldr	r3, [r2, #0]
 80108ce:	1d19      	adds	r1, r3, #4
 80108d0:	6011      	str	r1, [r2, #0]
 80108d2:	681d      	ldr	r5, [r3, #0]
 80108d4:	6862      	ldr	r2, [r4, #4]
 80108d6:	2100      	movs	r1, #0
 80108d8:	4628      	mov	r0, r5
 80108da:	f7ef fc99 	bl	8000210 <memchr>
 80108de:	b108      	cbz	r0, 80108e4 <_printf_i+0x1bc>
 80108e0:	1b40      	subs	r0, r0, r5
 80108e2:	6060      	str	r0, [r4, #4]
 80108e4:	6863      	ldr	r3, [r4, #4]
 80108e6:	6123      	str	r3, [r4, #16]
 80108e8:	2300      	movs	r3, #0
 80108ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108ee:	e7a7      	b.n	8010840 <_printf_i+0x118>
 80108f0:	6923      	ldr	r3, [r4, #16]
 80108f2:	462a      	mov	r2, r5
 80108f4:	4639      	mov	r1, r7
 80108f6:	4630      	mov	r0, r6
 80108f8:	47c0      	blx	r8
 80108fa:	3001      	adds	r0, #1
 80108fc:	d0aa      	beq.n	8010854 <_printf_i+0x12c>
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	079b      	lsls	r3, r3, #30
 8010902:	d413      	bmi.n	801092c <_printf_i+0x204>
 8010904:	68e0      	ldr	r0, [r4, #12]
 8010906:	9b03      	ldr	r3, [sp, #12]
 8010908:	4298      	cmp	r0, r3
 801090a:	bfb8      	it	lt
 801090c:	4618      	movlt	r0, r3
 801090e:	e7a3      	b.n	8010858 <_printf_i+0x130>
 8010910:	2301      	movs	r3, #1
 8010912:	464a      	mov	r2, r9
 8010914:	4639      	mov	r1, r7
 8010916:	4630      	mov	r0, r6
 8010918:	47c0      	blx	r8
 801091a:	3001      	adds	r0, #1
 801091c:	d09a      	beq.n	8010854 <_printf_i+0x12c>
 801091e:	3501      	adds	r5, #1
 8010920:	68e3      	ldr	r3, [r4, #12]
 8010922:	9a03      	ldr	r2, [sp, #12]
 8010924:	1a9b      	subs	r3, r3, r2
 8010926:	42ab      	cmp	r3, r5
 8010928:	dcf2      	bgt.n	8010910 <_printf_i+0x1e8>
 801092a:	e7eb      	b.n	8010904 <_printf_i+0x1dc>
 801092c:	2500      	movs	r5, #0
 801092e:	f104 0919 	add.w	r9, r4, #25
 8010932:	e7f5      	b.n	8010920 <_printf_i+0x1f8>
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1ac      	bne.n	8010892 <_printf_i+0x16a>
 8010938:	7803      	ldrb	r3, [r0, #0]
 801093a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801093e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010942:	e76c      	b.n	801081e <_printf_i+0xf6>
 8010944:	08013a51 	.word	0x08013a51
 8010948:	08013a62 	.word	0x08013a62

0801094c <__sread>:
 801094c:	b510      	push	{r4, lr}
 801094e:	460c      	mov	r4, r1
 8010950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010954:	f000 fa46 	bl	8010de4 <_read_r>
 8010958:	2800      	cmp	r0, #0
 801095a:	bfab      	itete	ge
 801095c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801095e:	89a3      	ldrhlt	r3, [r4, #12]
 8010960:	181b      	addge	r3, r3, r0
 8010962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010966:	bfac      	ite	ge
 8010968:	6563      	strge	r3, [r4, #84]	; 0x54
 801096a:	81a3      	strhlt	r3, [r4, #12]
 801096c:	bd10      	pop	{r4, pc}

0801096e <__swrite>:
 801096e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010972:	461f      	mov	r7, r3
 8010974:	898b      	ldrh	r3, [r1, #12]
 8010976:	05db      	lsls	r3, r3, #23
 8010978:	4605      	mov	r5, r0
 801097a:	460c      	mov	r4, r1
 801097c:	4616      	mov	r6, r2
 801097e:	d505      	bpl.n	801098c <__swrite+0x1e>
 8010980:	2302      	movs	r3, #2
 8010982:	2200      	movs	r2, #0
 8010984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010988:	f000 f9b6 	bl	8010cf8 <_lseek_r>
 801098c:	89a3      	ldrh	r3, [r4, #12]
 801098e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010996:	81a3      	strh	r3, [r4, #12]
 8010998:	4632      	mov	r2, r6
 801099a:	463b      	mov	r3, r7
 801099c:	4628      	mov	r0, r5
 801099e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109a2:	f000 b869 	b.w	8010a78 <_write_r>

080109a6 <__sseek>:
 80109a6:	b510      	push	{r4, lr}
 80109a8:	460c      	mov	r4, r1
 80109aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ae:	f000 f9a3 	bl	8010cf8 <_lseek_r>
 80109b2:	1c43      	adds	r3, r0, #1
 80109b4:	89a3      	ldrh	r3, [r4, #12]
 80109b6:	bf15      	itete	ne
 80109b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80109ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80109be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109c2:	81a3      	strheq	r3, [r4, #12]
 80109c4:	bf18      	it	ne
 80109c6:	81a3      	strhne	r3, [r4, #12]
 80109c8:	bd10      	pop	{r4, pc}

080109ca <__sclose>:
 80109ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ce:	f000 b8d3 	b.w	8010b78 <_close_r>
	...

080109d4 <__swbuf_r>:
 80109d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d6:	460e      	mov	r6, r1
 80109d8:	4614      	mov	r4, r2
 80109da:	4605      	mov	r5, r0
 80109dc:	b118      	cbz	r0, 80109e6 <__swbuf_r+0x12>
 80109de:	6983      	ldr	r3, [r0, #24]
 80109e0:	b90b      	cbnz	r3, 80109e6 <__swbuf_r+0x12>
 80109e2:	f7ff fc5f 	bl	80102a4 <__sinit>
 80109e6:	4b21      	ldr	r3, [pc, #132]	; (8010a6c <__swbuf_r+0x98>)
 80109e8:	429c      	cmp	r4, r3
 80109ea:	d12a      	bne.n	8010a42 <__swbuf_r+0x6e>
 80109ec:	686c      	ldr	r4, [r5, #4]
 80109ee:	69a3      	ldr	r3, [r4, #24]
 80109f0:	60a3      	str	r3, [r4, #8]
 80109f2:	89a3      	ldrh	r3, [r4, #12]
 80109f4:	071a      	lsls	r2, r3, #28
 80109f6:	d52e      	bpl.n	8010a56 <__swbuf_r+0x82>
 80109f8:	6923      	ldr	r3, [r4, #16]
 80109fa:	b363      	cbz	r3, 8010a56 <__swbuf_r+0x82>
 80109fc:	6923      	ldr	r3, [r4, #16]
 80109fe:	6820      	ldr	r0, [r4, #0]
 8010a00:	1ac0      	subs	r0, r0, r3
 8010a02:	6963      	ldr	r3, [r4, #20]
 8010a04:	b2f6      	uxtb	r6, r6
 8010a06:	4283      	cmp	r3, r0
 8010a08:	4637      	mov	r7, r6
 8010a0a:	dc04      	bgt.n	8010a16 <__swbuf_r+0x42>
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	4628      	mov	r0, r5
 8010a10:	f000 f948 	bl	8010ca4 <_fflush_r>
 8010a14:	bb28      	cbnz	r0, 8010a62 <__swbuf_r+0x8e>
 8010a16:	68a3      	ldr	r3, [r4, #8]
 8010a18:	3b01      	subs	r3, #1
 8010a1a:	60a3      	str	r3, [r4, #8]
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	1c5a      	adds	r2, r3, #1
 8010a20:	6022      	str	r2, [r4, #0]
 8010a22:	701e      	strb	r6, [r3, #0]
 8010a24:	6963      	ldr	r3, [r4, #20]
 8010a26:	3001      	adds	r0, #1
 8010a28:	4283      	cmp	r3, r0
 8010a2a:	d004      	beq.n	8010a36 <__swbuf_r+0x62>
 8010a2c:	89a3      	ldrh	r3, [r4, #12]
 8010a2e:	07db      	lsls	r3, r3, #31
 8010a30:	d519      	bpl.n	8010a66 <__swbuf_r+0x92>
 8010a32:	2e0a      	cmp	r6, #10
 8010a34:	d117      	bne.n	8010a66 <__swbuf_r+0x92>
 8010a36:	4621      	mov	r1, r4
 8010a38:	4628      	mov	r0, r5
 8010a3a:	f000 f933 	bl	8010ca4 <_fflush_r>
 8010a3e:	b190      	cbz	r0, 8010a66 <__swbuf_r+0x92>
 8010a40:	e00f      	b.n	8010a62 <__swbuf_r+0x8e>
 8010a42:	4b0b      	ldr	r3, [pc, #44]	; (8010a70 <__swbuf_r+0x9c>)
 8010a44:	429c      	cmp	r4, r3
 8010a46:	d101      	bne.n	8010a4c <__swbuf_r+0x78>
 8010a48:	68ac      	ldr	r4, [r5, #8]
 8010a4a:	e7d0      	b.n	80109ee <__swbuf_r+0x1a>
 8010a4c:	4b09      	ldr	r3, [pc, #36]	; (8010a74 <__swbuf_r+0xa0>)
 8010a4e:	429c      	cmp	r4, r3
 8010a50:	bf08      	it	eq
 8010a52:	68ec      	ldreq	r4, [r5, #12]
 8010a54:	e7cb      	b.n	80109ee <__swbuf_r+0x1a>
 8010a56:	4621      	mov	r1, r4
 8010a58:	4628      	mov	r0, r5
 8010a5a:	f000 f81f 	bl	8010a9c <__swsetup_r>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d0cc      	beq.n	80109fc <__swbuf_r+0x28>
 8010a62:	f04f 37ff 	mov.w	r7, #4294967295
 8010a66:	4638      	mov	r0, r7
 8010a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	08013a00 	.word	0x08013a00
 8010a70:	08013a20 	.word	0x08013a20
 8010a74:	080139e0 	.word	0x080139e0

08010a78 <_write_r>:
 8010a78:	b538      	push	{r3, r4, r5, lr}
 8010a7a:	4c07      	ldr	r4, [pc, #28]	; (8010a98 <_write_r+0x20>)
 8010a7c:	4605      	mov	r5, r0
 8010a7e:	4608      	mov	r0, r1
 8010a80:	4611      	mov	r1, r2
 8010a82:	2200      	movs	r2, #0
 8010a84:	6022      	str	r2, [r4, #0]
 8010a86:	461a      	mov	r2, r3
 8010a88:	f7f1 fff7 	bl	8002a7a <_write>
 8010a8c:	1c43      	adds	r3, r0, #1
 8010a8e:	d102      	bne.n	8010a96 <_write_r+0x1e>
 8010a90:	6823      	ldr	r3, [r4, #0]
 8010a92:	b103      	cbz	r3, 8010a96 <_write_r+0x1e>
 8010a94:	602b      	str	r3, [r5, #0]
 8010a96:	bd38      	pop	{r3, r4, r5, pc}
 8010a98:	200065f8 	.word	0x200065f8

08010a9c <__swsetup_r>:
 8010a9c:	4b32      	ldr	r3, [pc, #200]	; (8010b68 <__swsetup_r+0xcc>)
 8010a9e:	b570      	push	{r4, r5, r6, lr}
 8010aa0:	681d      	ldr	r5, [r3, #0]
 8010aa2:	4606      	mov	r6, r0
 8010aa4:	460c      	mov	r4, r1
 8010aa6:	b125      	cbz	r5, 8010ab2 <__swsetup_r+0x16>
 8010aa8:	69ab      	ldr	r3, [r5, #24]
 8010aaa:	b913      	cbnz	r3, 8010ab2 <__swsetup_r+0x16>
 8010aac:	4628      	mov	r0, r5
 8010aae:	f7ff fbf9 	bl	80102a4 <__sinit>
 8010ab2:	4b2e      	ldr	r3, [pc, #184]	; (8010b6c <__swsetup_r+0xd0>)
 8010ab4:	429c      	cmp	r4, r3
 8010ab6:	d10f      	bne.n	8010ad8 <__swsetup_r+0x3c>
 8010ab8:	686c      	ldr	r4, [r5, #4]
 8010aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	0715      	lsls	r5, r2, #28
 8010ac2:	d42c      	bmi.n	8010b1e <__swsetup_r+0x82>
 8010ac4:	06d0      	lsls	r0, r2, #27
 8010ac6:	d411      	bmi.n	8010aec <__swsetup_r+0x50>
 8010ac8:	2209      	movs	r2, #9
 8010aca:	6032      	str	r2, [r6, #0]
 8010acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ad0:	81a3      	strh	r3, [r4, #12]
 8010ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ad6:	e03e      	b.n	8010b56 <__swsetup_r+0xba>
 8010ad8:	4b25      	ldr	r3, [pc, #148]	; (8010b70 <__swsetup_r+0xd4>)
 8010ada:	429c      	cmp	r4, r3
 8010adc:	d101      	bne.n	8010ae2 <__swsetup_r+0x46>
 8010ade:	68ac      	ldr	r4, [r5, #8]
 8010ae0:	e7eb      	b.n	8010aba <__swsetup_r+0x1e>
 8010ae2:	4b24      	ldr	r3, [pc, #144]	; (8010b74 <__swsetup_r+0xd8>)
 8010ae4:	429c      	cmp	r4, r3
 8010ae6:	bf08      	it	eq
 8010ae8:	68ec      	ldreq	r4, [r5, #12]
 8010aea:	e7e6      	b.n	8010aba <__swsetup_r+0x1e>
 8010aec:	0751      	lsls	r1, r2, #29
 8010aee:	d512      	bpl.n	8010b16 <__swsetup_r+0x7a>
 8010af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010af2:	b141      	cbz	r1, 8010b06 <__swsetup_r+0x6a>
 8010af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010af8:	4299      	cmp	r1, r3
 8010afa:	d002      	beq.n	8010b02 <__swsetup_r+0x66>
 8010afc:	4630      	mov	r0, r6
 8010afe:	f7ff fac1 	bl	8010084 <_free_r>
 8010b02:	2300      	movs	r3, #0
 8010b04:	6363      	str	r3, [r4, #52]	; 0x34
 8010b06:	89a3      	ldrh	r3, [r4, #12]
 8010b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b0c:	81a3      	strh	r3, [r4, #12]
 8010b0e:	2300      	movs	r3, #0
 8010b10:	6063      	str	r3, [r4, #4]
 8010b12:	6923      	ldr	r3, [r4, #16]
 8010b14:	6023      	str	r3, [r4, #0]
 8010b16:	89a3      	ldrh	r3, [r4, #12]
 8010b18:	f043 0308 	orr.w	r3, r3, #8
 8010b1c:	81a3      	strh	r3, [r4, #12]
 8010b1e:	6923      	ldr	r3, [r4, #16]
 8010b20:	b94b      	cbnz	r3, 8010b36 <__swsetup_r+0x9a>
 8010b22:	89a3      	ldrh	r3, [r4, #12]
 8010b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b2c:	d003      	beq.n	8010b36 <__swsetup_r+0x9a>
 8010b2e:	4621      	mov	r1, r4
 8010b30:	4630      	mov	r0, r6
 8010b32:	f000 f917 	bl	8010d64 <__smakebuf_r>
 8010b36:	89a2      	ldrh	r2, [r4, #12]
 8010b38:	f012 0301 	ands.w	r3, r2, #1
 8010b3c:	d00c      	beq.n	8010b58 <__swsetup_r+0xbc>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	60a3      	str	r3, [r4, #8]
 8010b42:	6963      	ldr	r3, [r4, #20]
 8010b44:	425b      	negs	r3, r3
 8010b46:	61a3      	str	r3, [r4, #24]
 8010b48:	6923      	ldr	r3, [r4, #16]
 8010b4a:	b953      	cbnz	r3, 8010b62 <__swsetup_r+0xc6>
 8010b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010b54:	d1ba      	bne.n	8010acc <__swsetup_r+0x30>
 8010b56:	bd70      	pop	{r4, r5, r6, pc}
 8010b58:	0792      	lsls	r2, r2, #30
 8010b5a:	bf58      	it	pl
 8010b5c:	6963      	ldrpl	r3, [r4, #20]
 8010b5e:	60a3      	str	r3, [r4, #8]
 8010b60:	e7f2      	b.n	8010b48 <__swsetup_r+0xac>
 8010b62:	2000      	movs	r0, #0
 8010b64:	e7f7      	b.n	8010b56 <__swsetup_r+0xba>
 8010b66:	bf00      	nop
 8010b68:	20000060 	.word	0x20000060
 8010b6c:	08013a00 	.word	0x08013a00
 8010b70:	08013a20 	.word	0x08013a20
 8010b74:	080139e0 	.word	0x080139e0

08010b78 <_close_r>:
 8010b78:	b538      	push	{r3, r4, r5, lr}
 8010b7a:	4c06      	ldr	r4, [pc, #24]	; (8010b94 <_close_r+0x1c>)
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	4605      	mov	r5, r0
 8010b80:	4608      	mov	r0, r1
 8010b82:	6023      	str	r3, [r4, #0]
 8010b84:	f7f1 ff95 	bl	8002ab2 <_close>
 8010b88:	1c43      	adds	r3, r0, #1
 8010b8a:	d102      	bne.n	8010b92 <_close_r+0x1a>
 8010b8c:	6823      	ldr	r3, [r4, #0]
 8010b8e:	b103      	cbz	r3, 8010b92 <_close_r+0x1a>
 8010b90:	602b      	str	r3, [r5, #0]
 8010b92:	bd38      	pop	{r3, r4, r5, pc}
 8010b94:	200065f8 	.word	0x200065f8

08010b98 <__sflush_r>:
 8010b98:	898a      	ldrh	r2, [r1, #12]
 8010b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b9e:	4605      	mov	r5, r0
 8010ba0:	0710      	lsls	r0, r2, #28
 8010ba2:	460c      	mov	r4, r1
 8010ba4:	d458      	bmi.n	8010c58 <__sflush_r+0xc0>
 8010ba6:	684b      	ldr	r3, [r1, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	dc05      	bgt.n	8010bb8 <__sflush_r+0x20>
 8010bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	dc02      	bgt.n	8010bb8 <__sflush_r+0x20>
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bba:	2e00      	cmp	r6, #0
 8010bbc:	d0f9      	beq.n	8010bb2 <__sflush_r+0x1a>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010bc4:	682f      	ldr	r7, [r5, #0]
 8010bc6:	6a21      	ldr	r1, [r4, #32]
 8010bc8:	602b      	str	r3, [r5, #0]
 8010bca:	d032      	beq.n	8010c32 <__sflush_r+0x9a>
 8010bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010bce:	89a3      	ldrh	r3, [r4, #12]
 8010bd0:	075a      	lsls	r2, r3, #29
 8010bd2:	d505      	bpl.n	8010be0 <__sflush_r+0x48>
 8010bd4:	6863      	ldr	r3, [r4, #4]
 8010bd6:	1ac0      	subs	r0, r0, r3
 8010bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010bda:	b10b      	cbz	r3, 8010be0 <__sflush_r+0x48>
 8010bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010bde:	1ac0      	subs	r0, r0, r3
 8010be0:	2300      	movs	r3, #0
 8010be2:	4602      	mov	r2, r0
 8010be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010be6:	6a21      	ldr	r1, [r4, #32]
 8010be8:	4628      	mov	r0, r5
 8010bea:	47b0      	blx	r6
 8010bec:	1c43      	adds	r3, r0, #1
 8010bee:	89a3      	ldrh	r3, [r4, #12]
 8010bf0:	d106      	bne.n	8010c00 <__sflush_r+0x68>
 8010bf2:	6829      	ldr	r1, [r5, #0]
 8010bf4:	291d      	cmp	r1, #29
 8010bf6:	d848      	bhi.n	8010c8a <__sflush_r+0xf2>
 8010bf8:	4a29      	ldr	r2, [pc, #164]	; (8010ca0 <__sflush_r+0x108>)
 8010bfa:	40ca      	lsrs	r2, r1
 8010bfc:	07d6      	lsls	r6, r2, #31
 8010bfe:	d544      	bpl.n	8010c8a <__sflush_r+0xf2>
 8010c00:	2200      	movs	r2, #0
 8010c02:	6062      	str	r2, [r4, #4]
 8010c04:	04d9      	lsls	r1, r3, #19
 8010c06:	6922      	ldr	r2, [r4, #16]
 8010c08:	6022      	str	r2, [r4, #0]
 8010c0a:	d504      	bpl.n	8010c16 <__sflush_r+0x7e>
 8010c0c:	1c42      	adds	r2, r0, #1
 8010c0e:	d101      	bne.n	8010c14 <__sflush_r+0x7c>
 8010c10:	682b      	ldr	r3, [r5, #0]
 8010c12:	b903      	cbnz	r3, 8010c16 <__sflush_r+0x7e>
 8010c14:	6560      	str	r0, [r4, #84]	; 0x54
 8010c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c18:	602f      	str	r7, [r5, #0]
 8010c1a:	2900      	cmp	r1, #0
 8010c1c:	d0c9      	beq.n	8010bb2 <__sflush_r+0x1a>
 8010c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c22:	4299      	cmp	r1, r3
 8010c24:	d002      	beq.n	8010c2c <__sflush_r+0x94>
 8010c26:	4628      	mov	r0, r5
 8010c28:	f7ff fa2c 	bl	8010084 <_free_r>
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8010c30:	e7c0      	b.n	8010bb4 <__sflush_r+0x1c>
 8010c32:	2301      	movs	r3, #1
 8010c34:	4628      	mov	r0, r5
 8010c36:	47b0      	blx	r6
 8010c38:	1c41      	adds	r1, r0, #1
 8010c3a:	d1c8      	bne.n	8010bce <__sflush_r+0x36>
 8010c3c:	682b      	ldr	r3, [r5, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d0c5      	beq.n	8010bce <__sflush_r+0x36>
 8010c42:	2b1d      	cmp	r3, #29
 8010c44:	d001      	beq.n	8010c4a <__sflush_r+0xb2>
 8010c46:	2b16      	cmp	r3, #22
 8010c48:	d101      	bne.n	8010c4e <__sflush_r+0xb6>
 8010c4a:	602f      	str	r7, [r5, #0]
 8010c4c:	e7b1      	b.n	8010bb2 <__sflush_r+0x1a>
 8010c4e:	89a3      	ldrh	r3, [r4, #12]
 8010c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c54:	81a3      	strh	r3, [r4, #12]
 8010c56:	e7ad      	b.n	8010bb4 <__sflush_r+0x1c>
 8010c58:	690f      	ldr	r7, [r1, #16]
 8010c5a:	2f00      	cmp	r7, #0
 8010c5c:	d0a9      	beq.n	8010bb2 <__sflush_r+0x1a>
 8010c5e:	0793      	lsls	r3, r2, #30
 8010c60:	680e      	ldr	r6, [r1, #0]
 8010c62:	bf08      	it	eq
 8010c64:	694b      	ldreq	r3, [r1, #20]
 8010c66:	600f      	str	r7, [r1, #0]
 8010c68:	bf18      	it	ne
 8010c6a:	2300      	movne	r3, #0
 8010c6c:	eba6 0807 	sub.w	r8, r6, r7
 8010c70:	608b      	str	r3, [r1, #8]
 8010c72:	f1b8 0f00 	cmp.w	r8, #0
 8010c76:	dd9c      	ble.n	8010bb2 <__sflush_r+0x1a>
 8010c78:	4643      	mov	r3, r8
 8010c7a:	463a      	mov	r2, r7
 8010c7c:	6a21      	ldr	r1, [r4, #32]
 8010c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c80:	4628      	mov	r0, r5
 8010c82:	47b0      	blx	r6
 8010c84:	2800      	cmp	r0, #0
 8010c86:	dc06      	bgt.n	8010c96 <__sflush_r+0xfe>
 8010c88:	89a3      	ldrh	r3, [r4, #12]
 8010c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c8e:	81a3      	strh	r3, [r4, #12]
 8010c90:	f04f 30ff 	mov.w	r0, #4294967295
 8010c94:	e78e      	b.n	8010bb4 <__sflush_r+0x1c>
 8010c96:	4407      	add	r7, r0
 8010c98:	eba8 0800 	sub.w	r8, r8, r0
 8010c9c:	e7e9      	b.n	8010c72 <__sflush_r+0xda>
 8010c9e:	bf00      	nop
 8010ca0:	20400001 	.word	0x20400001

08010ca4 <_fflush_r>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	690b      	ldr	r3, [r1, #16]
 8010ca8:	4605      	mov	r5, r0
 8010caa:	460c      	mov	r4, r1
 8010cac:	b1db      	cbz	r3, 8010ce6 <_fflush_r+0x42>
 8010cae:	b118      	cbz	r0, 8010cb8 <_fflush_r+0x14>
 8010cb0:	6983      	ldr	r3, [r0, #24]
 8010cb2:	b90b      	cbnz	r3, 8010cb8 <_fflush_r+0x14>
 8010cb4:	f7ff faf6 	bl	80102a4 <__sinit>
 8010cb8:	4b0c      	ldr	r3, [pc, #48]	; (8010cec <_fflush_r+0x48>)
 8010cba:	429c      	cmp	r4, r3
 8010cbc:	d109      	bne.n	8010cd2 <_fflush_r+0x2e>
 8010cbe:	686c      	ldr	r4, [r5, #4]
 8010cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cc4:	b17b      	cbz	r3, 8010ce6 <_fflush_r+0x42>
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	4628      	mov	r0, r5
 8010cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cce:	f7ff bf63 	b.w	8010b98 <__sflush_r>
 8010cd2:	4b07      	ldr	r3, [pc, #28]	; (8010cf0 <_fflush_r+0x4c>)
 8010cd4:	429c      	cmp	r4, r3
 8010cd6:	d101      	bne.n	8010cdc <_fflush_r+0x38>
 8010cd8:	68ac      	ldr	r4, [r5, #8]
 8010cda:	e7f1      	b.n	8010cc0 <_fflush_r+0x1c>
 8010cdc:	4b05      	ldr	r3, [pc, #20]	; (8010cf4 <_fflush_r+0x50>)
 8010cde:	429c      	cmp	r4, r3
 8010ce0:	bf08      	it	eq
 8010ce2:	68ec      	ldreq	r4, [r5, #12]
 8010ce4:	e7ec      	b.n	8010cc0 <_fflush_r+0x1c>
 8010ce6:	2000      	movs	r0, #0
 8010ce8:	bd38      	pop	{r3, r4, r5, pc}
 8010cea:	bf00      	nop
 8010cec:	08013a00 	.word	0x08013a00
 8010cf0:	08013a20 	.word	0x08013a20
 8010cf4:	080139e0 	.word	0x080139e0

08010cf8 <_lseek_r>:
 8010cf8:	b538      	push	{r3, r4, r5, lr}
 8010cfa:	4c07      	ldr	r4, [pc, #28]	; (8010d18 <_lseek_r+0x20>)
 8010cfc:	4605      	mov	r5, r0
 8010cfe:	4608      	mov	r0, r1
 8010d00:	4611      	mov	r1, r2
 8010d02:	2200      	movs	r2, #0
 8010d04:	6022      	str	r2, [r4, #0]
 8010d06:	461a      	mov	r2, r3
 8010d08:	f7f1 fefa 	bl	8002b00 <_lseek>
 8010d0c:	1c43      	adds	r3, r0, #1
 8010d0e:	d102      	bne.n	8010d16 <_lseek_r+0x1e>
 8010d10:	6823      	ldr	r3, [r4, #0]
 8010d12:	b103      	cbz	r3, 8010d16 <_lseek_r+0x1e>
 8010d14:	602b      	str	r3, [r5, #0]
 8010d16:	bd38      	pop	{r3, r4, r5, pc}
 8010d18:	200065f8 	.word	0x200065f8

08010d1c <__swhatbuf_r>:
 8010d1c:	b570      	push	{r4, r5, r6, lr}
 8010d1e:	460e      	mov	r6, r1
 8010d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d24:	2900      	cmp	r1, #0
 8010d26:	b096      	sub	sp, #88	; 0x58
 8010d28:	4614      	mov	r4, r2
 8010d2a:	461d      	mov	r5, r3
 8010d2c:	da07      	bge.n	8010d3e <__swhatbuf_r+0x22>
 8010d2e:	2300      	movs	r3, #0
 8010d30:	602b      	str	r3, [r5, #0]
 8010d32:	89b3      	ldrh	r3, [r6, #12]
 8010d34:	061a      	lsls	r2, r3, #24
 8010d36:	d410      	bmi.n	8010d5a <__swhatbuf_r+0x3e>
 8010d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d3c:	e00e      	b.n	8010d5c <__swhatbuf_r+0x40>
 8010d3e:	466a      	mov	r2, sp
 8010d40:	f000 f862 	bl	8010e08 <_fstat_r>
 8010d44:	2800      	cmp	r0, #0
 8010d46:	dbf2      	blt.n	8010d2e <__swhatbuf_r+0x12>
 8010d48:	9a01      	ldr	r2, [sp, #4]
 8010d4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d52:	425a      	negs	r2, r3
 8010d54:	415a      	adcs	r2, r3
 8010d56:	602a      	str	r2, [r5, #0]
 8010d58:	e7ee      	b.n	8010d38 <__swhatbuf_r+0x1c>
 8010d5a:	2340      	movs	r3, #64	; 0x40
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	6023      	str	r3, [r4, #0]
 8010d60:	b016      	add	sp, #88	; 0x58
 8010d62:	bd70      	pop	{r4, r5, r6, pc}

08010d64 <__smakebuf_r>:
 8010d64:	898b      	ldrh	r3, [r1, #12]
 8010d66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d68:	079d      	lsls	r5, r3, #30
 8010d6a:	4606      	mov	r6, r0
 8010d6c:	460c      	mov	r4, r1
 8010d6e:	d507      	bpl.n	8010d80 <__smakebuf_r+0x1c>
 8010d70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d74:	6023      	str	r3, [r4, #0]
 8010d76:	6123      	str	r3, [r4, #16]
 8010d78:	2301      	movs	r3, #1
 8010d7a:	6163      	str	r3, [r4, #20]
 8010d7c:	b002      	add	sp, #8
 8010d7e:	bd70      	pop	{r4, r5, r6, pc}
 8010d80:	ab01      	add	r3, sp, #4
 8010d82:	466a      	mov	r2, sp
 8010d84:	f7ff ffca 	bl	8010d1c <__swhatbuf_r>
 8010d88:	9900      	ldr	r1, [sp, #0]
 8010d8a:	4605      	mov	r5, r0
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	f7ff f9c7 	bl	8010120 <_malloc_r>
 8010d92:	b948      	cbnz	r0, 8010da8 <__smakebuf_r+0x44>
 8010d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d98:	059a      	lsls	r2, r3, #22
 8010d9a:	d4ef      	bmi.n	8010d7c <__smakebuf_r+0x18>
 8010d9c:	f023 0303 	bic.w	r3, r3, #3
 8010da0:	f043 0302 	orr.w	r3, r3, #2
 8010da4:	81a3      	strh	r3, [r4, #12]
 8010da6:	e7e3      	b.n	8010d70 <__smakebuf_r+0xc>
 8010da8:	4b0d      	ldr	r3, [pc, #52]	; (8010de0 <__smakebuf_r+0x7c>)
 8010daa:	62b3      	str	r3, [r6, #40]	; 0x28
 8010dac:	89a3      	ldrh	r3, [r4, #12]
 8010dae:	6020      	str	r0, [r4, #0]
 8010db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010db4:	81a3      	strh	r3, [r4, #12]
 8010db6:	9b00      	ldr	r3, [sp, #0]
 8010db8:	6163      	str	r3, [r4, #20]
 8010dba:	9b01      	ldr	r3, [sp, #4]
 8010dbc:	6120      	str	r0, [r4, #16]
 8010dbe:	b15b      	cbz	r3, 8010dd8 <__smakebuf_r+0x74>
 8010dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	f000 f831 	bl	8010e2c <_isatty_r>
 8010dca:	b128      	cbz	r0, 8010dd8 <__smakebuf_r+0x74>
 8010dcc:	89a3      	ldrh	r3, [r4, #12]
 8010dce:	f023 0303 	bic.w	r3, r3, #3
 8010dd2:	f043 0301 	orr.w	r3, r3, #1
 8010dd6:	81a3      	strh	r3, [r4, #12]
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	431d      	orrs	r5, r3
 8010ddc:	81a5      	strh	r5, [r4, #12]
 8010dde:	e7cd      	b.n	8010d7c <__smakebuf_r+0x18>
 8010de0:	0801026d 	.word	0x0801026d

08010de4 <_read_r>:
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	4c07      	ldr	r4, [pc, #28]	; (8010e04 <_read_r+0x20>)
 8010de8:	4605      	mov	r5, r0
 8010dea:	4608      	mov	r0, r1
 8010dec:	4611      	mov	r1, r2
 8010dee:	2200      	movs	r2, #0
 8010df0:	6022      	str	r2, [r4, #0]
 8010df2:	461a      	mov	r2, r3
 8010df4:	f7f1 fe24 	bl	8002a40 <_read>
 8010df8:	1c43      	adds	r3, r0, #1
 8010dfa:	d102      	bne.n	8010e02 <_read_r+0x1e>
 8010dfc:	6823      	ldr	r3, [r4, #0]
 8010dfe:	b103      	cbz	r3, 8010e02 <_read_r+0x1e>
 8010e00:	602b      	str	r3, [r5, #0]
 8010e02:	bd38      	pop	{r3, r4, r5, pc}
 8010e04:	200065f8 	.word	0x200065f8

08010e08 <_fstat_r>:
 8010e08:	b538      	push	{r3, r4, r5, lr}
 8010e0a:	4c07      	ldr	r4, [pc, #28]	; (8010e28 <_fstat_r+0x20>)
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	4605      	mov	r5, r0
 8010e10:	4608      	mov	r0, r1
 8010e12:	4611      	mov	r1, r2
 8010e14:	6023      	str	r3, [r4, #0]
 8010e16:	f7f1 fe58 	bl	8002aca <_fstat>
 8010e1a:	1c43      	adds	r3, r0, #1
 8010e1c:	d102      	bne.n	8010e24 <_fstat_r+0x1c>
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	b103      	cbz	r3, 8010e24 <_fstat_r+0x1c>
 8010e22:	602b      	str	r3, [r5, #0]
 8010e24:	bd38      	pop	{r3, r4, r5, pc}
 8010e26:	bf00      	nop
 8010e28:	200065f8 	.word	0x200065f8

08010e2c <_isatty_r>:
 8010e2c:	b538      	push	{r3, r4, r5, lr}
 8010e2e:	4c06      	ldr	r4, [pc, #24]	; (8010e48 <_isatty_r+0x1c>)
 8010e30:	2300      	movs	r3, #0
 8010e32:	4605      	mov	r5, r0
 8010e34:	4608      	mov	r0, r1
 8010e36:	6023      	str	r3, [r4, #0]
 8010e38:	f7f1 fe57 	bl	8002aea <_isatty>
 8010e3c:	1c43      	adds	r3, r0, #1
 8010e3e:	d102      	bne.n	8010e46 <_isatty_r+0x1a>
 8010e40:	6823      	ldr	r3, [r4, #0]
 8010e42:	b103      	cbz	r3, 8010e46 <_isatty_r+0x1a>
 8010e44:	602b      	str	r3, [r5, #0]
 8010e46:	bd38      	pop	{r3, r4, r5, pc}
 8010e48:	200065f8 	.word	0x200065f8

08010e4c <_init>:
 8010e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4e:	bf00      	nop
 8010e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e52:	bc08      	pop	{r3}
 8010e54:	469e      	mov	lr, r3
 8010e56:	4770      	bx	lr

08010e58 <_fini>:
 8010e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5a:	bf00      	nop
 8010e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e5e:	bc08      	pop	{r3}
 8010e60:	469e      	mov	lr, r3
 8010e62:	4770      	bx	lr
